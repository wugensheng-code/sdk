#ifndef AL_MMC_HW_H
#define AL_MMC_HW_H

#ifdef _cplusplus
extern "C" {
#endif

/***************************** Include Files ********************************/
#include "al_core.h"

/************************** Constant Definitions ****************************/

/**************************** Type Definitions ******************************/

/***************** Macros (Inline Functions) Definitions ********************/

#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_0_DEF     (0)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_1         (1)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_2         (2)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_3         (3)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_4         (4)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_5         (5)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_6         (6)
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_7         (7)

#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_DETECT_N_YES   (0)
#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_DETECT_N_NOT   (1)

#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_DETECT_N_EMIO_MIO       (0)
#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_DETECT_N_CONFIGURED     (1)

#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_WRITE_PROT_NOT     (0)
#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_WRITE_PROT_YES     (1)

#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_WRITE_PROT_EMIO_MIO     (0)
#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_WRITE_PROT_CONFIGURED   (1)

#define MMC_MMC0_CLK_PHASE          MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_0_DEF
#define MMC_MMC1_CLK_PHASE          MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_0_DEF

#define MMC_MMC0_CARD_DETECT_SIG    MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_DETECT_N_CONFIGURED
#define MMC_MMC1_CARD_DETECT_SIG    MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_DETECT_N_CONFIGURED

#define MMC_MMC0_CARD_DETECT_STATE  MMC_TOP_NS_CFG_CTRL_CFG_CARD_DETECT_N_YES
#define MMC_MMC1_CARD_DETECT_STATE  MMC_TOP_NS_CFG_CTRL_CFG_CARD_DETECT_N_YES

#define MMC_MMC0_WR_PROT_SIG        MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_WRITE_PROT_CONFIGURED
#define MMC_MMC1_WR_PROT_SIG        MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_WRITE_PROT_CONFIGURED

#define MMC_MMC0_WR_PROT_STATE      MMC_TOP_NS_CFG_CTRL_CFG_CARD_WRITE_PROT_NOT
#define MMC_MMC1_WR_PROT_STATE      MMC_TOP_NS_CFG_CTRL_CFG_CARD_WRITE_PROT_NOT

///////////////////////////////////////////////////////
// Register: MMC_TOP_NS_CFG_CTRL
// Top Nonsecure Config Contrl
///////////////////////////////////////////////////////
#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_SHIFT             0
#define MMC_TOP_NS_CFG_CTRL_CCLK_SOFT_RST_SHIFT             3
#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_DETECT_N_SHIFT         4
#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_WRITE_PROT_SHIFT       5
#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_DETECT_N_SHIFT      6
#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_WRITE_PROT_SHIFT    7

#define MMC_TOP_NS_CFG_CTRL_CLK_PHASE_SEL_SIZE              3
#define MMC_TOP_NS_CFG_CTRL_CCLK_SOFT_RST_SIZE              1
#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_DETECT_N_SIZE          1
#define MMC_TOP_NS_CFG_CTRL_CFG_CARD_WRITE_PROT_SIZE        1
#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_DETECT_N_SIZE       1
#define MMC_TOP_NS_CFG_CTRL_SWITCH_CARD_WRITE_PROT_SIZE     1

///////////////////////////////////////////////////////
// Register: SDMASA_R
// SDMA System Address register,
// This register is used to configure a 32-bit Block Count or an SDMA System Address based on the Host Version 4 Enable bit in the Host Control 2 register.
///////////////////////////////////////////////////////
#define MMC_SDMASA_R_OFFSET     0x0UL
#define MMC_SDMASA_R_NUM        0x1

#define MMC_SDMASA_R_BLOCKCNT_SDMASA_SHIFT  0
#define MMC_SDMASA_R_BLOCKCNT_SDMASA_SIZE   32

///////////////////////////////////////////////////////
// Register: BLOCKCOUNT_R_BLOCKSIZE_R
// This register is used to configure the number of data blocks
///////////////////////////////////////////////////////
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_OFFSET 0x4UL
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_NUM    0x1

#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_XFER_BLOCK_SIZE_SHIFT      0
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_SDMA_BUF_BDARY_SHIFT       12
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_RSVD_BLOCKSIZE15_SHIFT     15
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_BLOCK_CNT_SHIFT            16

#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_XFER_BLOCK_SIZE_SIZE       12
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_SDMA_BUF_BDARY_SIZE        3
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_RSVD_BLOCKSIZE15_SIZE      1
#define MMC_BLOCKCOUNT_R_BLOCKSIZE_R_BLOCK_CNT_SIZE             16

///////////////////////////////////////////////////////
// Register: ARGUMENT_R
// This register is used to configure the SD/eMMC command argument
///////////////////////////////////////////////////////
#define MMC_ARGUMENT_R_OFFSET   0x8UL
#define MMC_ARGUMENT_R_NUM      0x1

#define MMC_ARGUMENT_R_ARGUMENT_SHIFT   0

#define MMC_ARGUMENT_R_ARGUMENT_SIZE    32

///////////////////////////////////////////////////////
// Register: CMD_R_XFER_MODE_R
// This register is used to provide the information related to a command and a response packet.
///////////////////////////////////////////////////////
#define MMC_CMD_R_XFER_MODE_R_OFFSET    0xCUL
#define MMC_CMD_R_XFER_MODE_R_NUM       0x1

#define MMC_CMD_R_XFER_MODE_R_DMA_ENABLE_SHIFT          0
#define MMC_CMD_R_XFER_MODE_R_BLOCK_COUNT_ENABLE_SHIFT  1
#define MMC_CMD_R_XFER_MODE_R_AUTO_CMD_ENABLE_SHIFT     2
#define MMC_CMD_R_XFER_MODE_R_DATA_XFER_DIR_SHIFT       4
#define MMC_CMD_R_XFER_MODE_R_MULTI_BLK_SEL_SHIFT       5
#define MMC_CMD_R_XFER_MODE_R_RESP_TYPE_SHIFT           6
#define MMC_CMD_R_XFER_MODE_R_RESP_ERR_CHK_ENABLE_SHIFT 7
#define MMC_CMD_R_XFER_MODE_R_RESP_INT_DISABLE_SHIFT    8
#define MMC_CMD_R_XFER_MODE_R_RSVD_SHIFT                9
#define MMC_CMD_R_XFER_MODE_R_RESP_TYPE_SELECT_SHIFT    16
#define MMC_CMD_R_XFER_MODE_R_SUB_CMD_FLAG_SHIFT        18
#define MMC_CMD_R_XFER_MODE_R_CMD_CRC_CHK_ENABLE_SHIFT  19
#define MMC_CMD_R_XFER_MODE_R_CMD_IDX_CHK_ENABLE_SHIFT  20
#define MMC_CMD_R_XFER_MODE_R_DATA_PRESENT_SEL_SHIFT    21
#define MMC_CMD_R_XFER_MODE_R_CMD_TYPE_SHIFT            22
#define MMC_CMD_R_XFER_MODE_R_CMD_INDEX_SHIFT           24
#define MMC_CMD_R_XFER_MODE_R_RSVD_30_31_SHIFT          30

#define MMC_CMD_R_XFER_MODE_R_DMA_ENABLE_SIZE           1
#define MMC_CMD_R_XFER_MODE_R_BLOCK_COUNT_ENABLE_SIZE   1
#define MMC_CMD_R_XFER_MODE_R_AUTO_CMD_ENABLE_SIZE      2
#define MMC_CMD_R_XFER_MODE_R_DATA_XFER_DIR_SIZE        1
#define MMC_CMD_R_XFER_MODE_R_MULTI_BLK_SEL_SIZE        1
#define MMC_CMD_R_XFER_MODE_R_RESP_TYPE_SIZE            1
#define MMC_CMD_R_XFER_MODE_R_RESP_ERR_CHK_ENABLE_SIZE  1
#define MMC_CMD_R_XFER_MODE_R_RESP_INT_DISABLE_SIZE     1
#define MMC_CMD_R_XFER_MODE_R_RSVD_SIZE                 7
#define MMC_CMD_R_XFER_MODE_R_RESP_TYPE_SELECT_SIZE     2
#define MMC_CMD_R_XFER_MODE_R_SUB_CMD_FLAG_SIZE         1
#define MMC_CMD_R_XFER_MODE_R_CMD_CRC_CHK_ENABLE_SIZE   1
#define MMC_CMD_R_XFER_MODE_R_CMD_IDX_CHK_ENABLE_SIZE   1
#define MMC_CMD_R_XFER_MODE_R_DATA_PRESENT_SEL_SIZE     1
#define MMC_CMD_R_XFER_MODE_R_CMD_TYPE_SIZE             2
#define MMC_CMD_R_XFER_MODE_R_CMD_INDEX_SIZE            6
#define MMC_CMD_R_XFER_MODE_R_RSVD_30_31_SIZE           2

///////////////////////////////////////////////////////
// Register: RESP01_R
// This register stores 39-08 bits of the Response Field for an SD/eMMC mode
// The response for an SD/eMMC command can be a maximum of 128 bits. These 128 bits are segregated into four 32-bit registers: RESP01_R, RESP23_R, RESP45_R and RESP67_R.
///////////////////////////////////////////////////////
#define MMC_RESP01_R_OFFSET     0x10UL
#define MMC_RESP01_R_NUM        0x1

#define MMC_RESP01_R_RESP01_SHIFT   0

#define MMC_RESP01_R_RESP01_SIZE    32

///////////////////////////////////////////////////////
// Register: RESP23_R
// This register stores 71-40 bits of the Response Field for an SD/eMMC mode. This register is used to store the response from the cards
///////////////////////////////////////////////////////
#define MMC_RESP23_R_OFFSET     0x14UL
#define MMC_RESP23_R_NUM        0x1

#define MMC_RESP23_R_RESP23_SHIFT   0

#define MMC_RESP23_R_RESP23_SIZE    32

///////////////////////////////////////////////////////
// Register: RESP45_R
// This register stores 103-72 bits of the Response Field for an SD/eMMC mode
///////////////////////////////////////////////////////
#define MMC_RESP45_R_OFFSET     0x18UL
#define MMC_RESP45_R_NUM        0x1

#define MMC_RESP45_R_RESP45_SHIFT   0

#define MMC_RESP45_R_RESP45_SIZE    32

///////////////////////////////////////////////////////
// Register: RESP67_R
// This register stores 135-104 bits of the Response Field for an SD/eMMC mode
///////////////////////////////////////////////////////
#define MMC_RESP67_R_OFFSET     0x1CUL
#define MMC_RESP67_R_NUM        0x1

#define MMC_RESP67_R_RESP67_SHIFT   0

#define MMC_RESP67_R_RESP67_SIZE    32

///////////////////////////////////////////////////////
// Register: BUF_DATA_R
// This register is used to access the packet buffer
///////////////////////////////////////////////////////
#define MMC_BUF_DATA_R_OFFSET   0x20UL
#define MMC_BUF_DATA_R_NUM      0x1

#define MMC_BUF_DATA_R_BUF_DATA_SHIFT   0

#define MMC_BUF_DATA_R_BUF_DATA_SIZE    32

///////////////////////////////////////////////////////
// Register: PSTATE_REG
// This register indicates the present status of the Host Controller
///////////////////////////////////////////////////////
#define MMC_PSTATE_REG_OFFSET   0x24UL
#define MMC_PSTATE_REG_NUM      0x1

#define MMC_PSTATE_REG_CMD_INHIBIT_SHIFT            0
#define MMC_PSTATE_REG_CMD_INHIBIT_DAT_SHIFT        1
#define MMC_PSTATE_REG_DAT_LINE_ACTIVE_SHIFT        2
#define MMC_PSTATE_REG_RE_TUNE_REQ_SHIFT            3
#define MMC_PSTATE_REG_DAT_7_4_SHIFT                4
#define MMC_PSTATE_REG_WR_XFER_ACTIVE_SHIFT         8
#define MMC_PSTATE_REG_RD_XFER_ACTIVE_SHIFT         9
#define MMC_PSTATE_REG_BUF_WR_ENABLE_SHIFT          10
#define MMC_PSTATE_REG_BUF_RD_ENABLE_SHIFT          11
#define MMC_PSTATE_REG_RSVD_15_12_SHIFT             12
#define MMC_PSTATE_REG_CARD_INSERTED_SHIFT          16
#define MMC_PSTATE_REG_CARD_STABLE_SHIFT            17
#define MMC_PSTATE_REG_CARD_DETECT_PIN_LEVEL_SHIFT  18
#define MMC_PSTATE_REG_WR_PROTECT_SW_LVL_SHIFT      19
#define MMC_PSTATE_REG_DAT_3_0_SHIFT                20
#define MMC_PSTATE_REG_CMD_LINE_LVL_SHIFT           24
#define MMC_PSTATE_REG_HOST_REG_VOL_SHIFT           25
#define MMC_PSTATE_REG_RSVD_26_SHIFT                26
#define MMC_PSTATE_REG_CMD_ISSUE_ERR_SHIFT          27
#define MMC_PSTATE_REG_SUB_CMD_STAT_SHIFT           28
#define MMC_PSTATE_REG_IN_DORMANT_ST_SHIFT          29
#define MMC_PSTATE_REG_LANE_SYNC_SHIFT              30
#define MMC_PSTATE_REG_UHS2_IF_DETECT_SHIFT         31

#define MMC_PSTATE_REG_CMD_INHIBIT_SIZE             1
#define MMC_PSTATE_REG_CMD_INHIBIT_DAT_SIZE         1
#define MMC_PSTATE_REG_DAT_LINE_ACTIVE_SIZE         1
#define MMC_PSTATE_REG_RE_TUNE_REQ_SIZE             1
#define MMC_PSTATE_REG_DAT_7_4_SIZE                 4
#define MMC_PSTATE_REG_WR_XFER_ACTIVE_SIZE          1
#define MMC_PSTATE_REG_RD_XFER_ACTIVE_SIZE          1
#define MMC_PSTATE_REG_BUF_WR_ENABLE_SIZE           1
#define MMC_PSTATE_REG_BUF_RD_ENABLE_SIZE           1
#define MMC_PSTATE_REG_RSVD_15_12_SIZE              4
#define MMC_PSTATE_REG_CARD_INSERTED_SIZE           1
#define MMC_PSTATE_REG_CARD_STABLE_SIZE             1
#define MMC_PSTATE_REG_CARD_DETECT_PIN_LEVEL_SIZE   1
#define MMC_PSTATE_REG_WR_PROTECT_SW_LVL_SIZE       1
#define MMC_PSTATE_REG_DAT_3_0_SIZE                 4
#define MMC_PSTATE_REG_CMD_LINE_LVL_SIZE            1
#define MMC_PSTATE_REG_HOST_REG_VOL_SIZE            1
#define MMC_PSTATE_REG_RSVD_26_SIZE                 1
#define MMC_PSTATE_REG_CMD_ISSUE_ERR_SIZE           1
#define MMC_PSTATE_REG_SUB_CMD_STAT_SIZE            1
#define MMC_PSTATE_REG_IN_DORMANT_ST_SIZE           1
#define MMC_PSTATE_REG_LANE_SYNC_SIZE               1
#define MMC_PSTATE_REG_UHS2_IF_DETECT_SIZE          1

///////////////////////////////////////////////////////
// Register: WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R
// This register is mandatory for the Host Controller, but the wakeup functionality depends on the Host Controller system hardware and software. The Host Driver maintains voltage on the SD Bus by setting the SD Bus Power to 1 in the Power Control Register, while a wakeup event through the Card Interrupt is desired.
///////////////////////////////////////////////////////
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_OFFSET   0x28UL
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_NUM      0x1

#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_LED_CTRL_SHIFT               0
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_DAT_XFER_WIDTH_SHIFT         1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_HIGH_SPEED_EN_SHIFT          2
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_DMA_SEL_SHIFT                3
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_EXT_DAT_XFER_SHIFT           5
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_DETECT_TEST_LVL_SHIFT   6
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_DETECT_SIG_SEL_SHIFT    7
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_PWR_VDD1_SHIFT        8
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_VOL_VDD1_SHIFT        9
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_PWR_VDD2_SHIFT        12
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_VOL_VDD2_SHIFT        13
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_STOP_BG_REQ_SHIFT            16
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CONTINUE_REQ_SHIFT           17
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_RD_WAIT_CTRL_SHIFT           18
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_INT_AT_BGAP_SHIFT            19
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_RSVD_23_20_SHIFT             20
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_INT_SHIFT               24
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_INSERT_SHIFT            25
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_REMOVAL_SHIFT           26
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_RSVD_31_27_SHIFT             27

#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_LED_CTRL_SIZE                1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_DAT_XFER_WIDTH_SIZE          1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_HIGH_SPEED_EN_SIZE           1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_DMA_SEL_SIZE                 2
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_EXT_DAT_XFER_SIZE            1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_DETECT_TEST_LVL_SIZE    1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_DETECT_SIG_SEL_SIZE     1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_PWR_VDD1_SIZE         1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_VOL_VDD1_SIZE         3
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_PWR_VDD2_SIZE         1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_SD_BUS_VOL_VDD2_SIZE         3
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_STOP_BG_REQ_SIZE             1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CONTINUE_REQ_SIZE            1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_RD_WAIT_CTRL_SIZE            1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_INT_AT_BGAP_SIZE             1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_RSVD_23_20_SIZE              4
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_INT_SIZE                1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_INSERT_SIZE             1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_CARD_REMOVAL_SIZE            1
#define MMC_WUP_CTRL_R_BGAP_CTRL_R_PWR_CTRL_R_HOST_CTRL1_R_RSVD_31_27_SIZE              5

///////////////////////////////////////////////////////
// Register: SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R
// This register is used to generate a reset pulse by writing 1 to each bit of this register. After completing the reset, the Host Controller clears each bit. As it takes some time to complete a software reset, the Host Driver confirms that these bits are 0.
///////////////////////////////////////////////////////
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_OFFSET  0x2CUL
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_NUM     0x1

#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_INTERNAL_CLK_EN_SHIFT       0
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_INTERNAL_CLK_STABLE_SHIFT   1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SD_CLK_EN_SHIFT             2
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_PLL_ENABLE_SHIFT            3
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_RSVD_4_SHIFT                4
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_CLK_GEN_SELECT_SHIFT        5
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_UPPER_FREQ_SEL_SHIFT        6
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_FREQ_SEL_SHIFT              8
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_TOUT_CNT_SHIFT              16
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_RSVD_23_20_SHIFT            20
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SW_RST_ALL_SHIFT            24
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SW_RST_CMD_SHIFT            25
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SW_RST_DAT_SHIFT            26
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_RSVD_31_27_SHIFT            27

#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_INTERNAL_CLK_EN_SIZE        1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_INTERNAL_CLK_STABLE_SIZE    1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SD_CLK_EN_SIZE              1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_PLL_ENABLE_SIZE             1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_RSVD_4_SIZE                 1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_CLK_GEN_SELECT_SIZE         1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_UPPER_FREQ_SEL_SIZE         2
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_FREQ_SEL_SIZE               8
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_TOUT_CNT_SIZE               4
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_RSVD_23_20_SIZE             4
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SW_RST_ALL_SIZE             1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SW_RST_CMD_SIZE             1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_SW_RST_DAT_SIZE             1
#define MMC_SW_RST_R_TOUT_CTRL_R_CLK_CTRL_R_RSVD_31_27_SIZE             5

///////////////////////////////////////////////////////
// Register: ERROR_INT_STAT_R_NORMAL_INT_STAT_R
// This register enables an interrupt when the Error Interrupt Status Enable is enabled and at least one of the statuses is set to 1. Writing to 1 clears the bit and writing to 0 retains the bit unchanged. Signals defined in this register can be enabled by the Error Interrupt Status Enable register, but not by the Error Interrupt Signal Enable register. More than one status can be cleared with a single register write.
// This register reflects the status of the Normal Interrupt.
///////////////////////////////////////////////////////
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_OFFSET   0x30UL
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_NUM      0x1

#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_COMPLETE_SHIFT       0
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_XFER_COMPLETE_SHIFT      1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BGAP_EVENT_SHIFT         2
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DMA_INTERRUPT_SHIFT      3
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BUF_WR_READY_SHIFT       4
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BUF_RD_READY_SHIFT       5
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CARD_INSERTION_SHIFT     6
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CARD_REMOVAL_SHIFT       7
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CARD_INTERRUPT_SHIFT     8
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_INT_A_SHIFT              9
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_INT_B_SHIFT              10
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_INT_C_SHIFT              11
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_RE_TUNE_EVENT_SHIFT      12
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_FX_EVENT_SHIFT           13
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CQE_EVENT_SHIFT          14
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_ERR_INTERRUPT_SHIFT      15
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_TOUT_ERR_SHIFT       16
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_CRC_ERR_SHIFT        17
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_END_BIT_ERR_SHIFT    18
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_IDX_ERR_SHIFT        19
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DATA_TOUT_ERR_SHIFT      20
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DATA_CRC_ERR_SHIFT       21
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DATA_END_BIT_ERR_SHIFT   22
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CUR_LMT_ERR_SHIFT        23
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_AUTO_CMD_ERR_SHIFT       24
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_ADMA_ERR_SHIFT           25
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_TUNING_ERR_SHIFT         26
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_RESP_ERR_SHIFT           27
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BOOT_ACK_ERR_SHIFT       28
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_VENDOR_ERR1_SHIFT        29
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_VENDOR_ERR2_SHIFT        30
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_VENDOR_ERR3_SHIFT        31

#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_COMPLETE_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_XFER_COMPLETE_SIZE       1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BGAP_EVENT_SIZE          1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DMA_INTERRUPT_SIZE       1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BUF_WR_READY_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BUF_RD_READY_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CARD_INSERTION_SIZE      1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CARD_REMOVAL_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CARD_INTERRUPT_SIZE      1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_INT_A_SIZE               1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_INT_B_SIZE               1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_INT_C_SIZE               1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_RE_TUNE_EVENT_SIZE       1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_FX_EVENT_SIZE            1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CQE_EVENT_SIZE           1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_ERR_INTERRUPT_SIZE       1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_TOUT_ERR_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_CRC_ERR_SIZE         1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_END_BIT_ERR_SIZE     1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CMD_IDX_ERR_SIZE         1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DATA_TOUT_ERR_SIZE       1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DATA_CRC_ERR_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_DATA_END_BIT_ERR_SIZE    1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_CUR_LMT_ERR_SIZE         1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_AUTO_CMD_ERR_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_ADMA_ERR_SIZE            1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_TUNING_ERR_SIZE          1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_RESP_ERR_SIZE            1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_BOOT_ACK_ERR_SIZE        1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_VENDOR_ERR1_SIZE         1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_VENDOR_ERR2_SIZE         1
#define MMC_ERROR_INT_STAT_R_NORMAL_INT_STAT_R_VENDOR_ERR3_SIZE         1

///////////////////////////////////////////////////////
// Register: ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R
// This register sets the Interrupt Status for Error Interrupt Status register (ERROR_INT_STAT_R), when ERROR_INT_STAT_EN_R is set to 1.
///////////////////////////////////////////////////////
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_OFFSET     0x34UL
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_NUM        0x1

#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_COMPLETE_STAT_EN_SHIFT     0
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_XFER_COMPLETE_STAT_EN_SHIFT    1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BGAP_EVENT_STAT_EN_SHIFT       2
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DMA_INTERRUPT_STAT_EN_SHIFT    3
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BUF_WR_READY_STAT_EN_SHIFT     4
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BUF_RD_READY_STAT_EN_SHIFT     5
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CARD_INSERTION_STAT_EN_SHIFT   6
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CARD_REMOVAL_STAT_EN_SHIFT     7
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CARD_INTERRUPT_STAT_EN_SHIFT   8
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_INT_A_STAT_EN_SHIFT            9
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_INT_B_STAT_EN_SHIFT            10
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_INT_C_STAT_EN_SHIFT            11
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_RE_TUNE_EVENT_STAT_EN_SHIFT    12
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_FX_EVENT_STAT_EN_SHIFT         13
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CQE_EVENT_STAT_EN_SHIFT        14
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_RSVD_15_SHIFT                  15
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_TOUT_ERR_STAT_EN_SHIFT     16
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_CRC_ERR_STAT_EN_SHIFT      17
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_END_BIT_ERR_STAT_EN_SHIFT  18
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_IDX_ERR_STAT_EN_SHIFT      19
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DATA_TOUT_ERR_STAT_EN_SHIFT    20
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DATA_CRC_ERR_STAT_EN_SHIFT     21
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DATA_END_BIT_ERR_STAT_EN_SHIFT 22
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CUR_LMT_ERR_STAT_EN_SHIFT      23
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_AUTO_CMD_ERR_STAT_EN_SHIFT     24
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_ADMA_ERR_STAT_EN_SHIFT         25
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_TUNING_ERR_STAT_EN_SHIFT       26
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_RESP_ERR_STAT_EN_SHIFT         27
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BOOT_ACK_ERR_STAT_EN_SHIFT     28
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_VENDOR_ERR_STAT_EN1_SHIFT      29
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_VENDOR_ERR_STAT_EN2_SHIFT      30
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_VENDOR_ERR_STAT_EN3_SHIFT      31

#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_COMPLETE_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_XFER_COMPLETE_STAT_EN_SIZE     1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BGAP_EVENT_STAT_EN_SIZE        1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DMA_INTERRUPT_STAT_EN_SIZE     1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BUF_WR_READY_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BUF_RD_READY_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CARD_INSERTION_STAT_EN_SIZE    1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CARD_REMOVAL_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CARD_INTERRUPT_STAT_EN_SIZE    1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_INT_A_STAT_EN_SIZE             1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_INT_B_STAT_EN_SIZE             1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_INT_C_STAT_EN_SIZE             1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_RE_TUNE_EVENT_STAT_EN_SIZE     1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_FX_EVENT_STAT_EN_SIZE          1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CQE_EVENT_STAT_EN_SIZE         1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_RSVD_15_SIZE                   1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_TOUT_ERR_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_CRC_ERR_STAT_EN_SIZE       1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_END_BIT_ERR_STAT_EN_SIZE   1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CMD_IDX_ERR_STAT_EN_SIZE       1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DATA_TOUT_ERR_STAT_EN_SIZE     1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DATA_CRC_ERR_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_DATA_END_BIT_ERR_STAT_EN_SIZE  1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_CUR_LMT_ERR_STAT_EN_SIZE       1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_AUTO_CMD_ERR_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_ADMA_ERR_STAT_EN_SIZE          1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_TUNING_ERR_STAT_EN_SIZE        1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_RESP_ERR_STAT_EN_SIZE          1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_BOOT_ACK_ERR_STAT_EN_SIZE      1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_VENDOR_ERR_STAT_EN1_SIZE       1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_VENDOR_ERR_STAT_EN2_SIZE       1
#define MMC_ERROR_INT_STAT_EN_R_NORMAL_INT_STAT_EN_R_VENDOR_ERR_STAT_EN3_SIZE       1

///////////////////////////////////////////////////////
// Register: ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R
// This register is used to select the interrupt status that is notified to the Host System as an interrupt. All these status bits share the same 1-bit interrupt line. Setting any of these bits to 1 enables interrupt generation.
///////////////////////////////////////////////////////
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_OFFSET     0x38UL
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_NUM        0x1

#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_COMPLETE_SIGNAL_EN_SHIFT       0
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_XFER_COMPLETE_SIGNAL_EN_SHIFT      1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BGAP_EVENT_SIGNAL_EN_SHIFT         2
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DMA_INTERRUPT_SIGNAL_EN_SHIFT      3
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BUF_WR_READY_SIGNAL_EN_SHIFT       4
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BUF_RD_READY_SIGNAL_EN_SHIFT       5
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CARD_INSERTION_SIGNAL_EN_SHIFT     6
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CARD_REMOVAL_SIGNAL_EN_SHIFT       7
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CARD_INTERRUPT_SIGNAL_EN_SHIFT     8
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_INT_A_SIGNAL_EN_SHIFT              9
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_INT_B_SIGNAL_EN_SHIFT              10
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_INT_C_SIGNAL_EN_SHIFT              11
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_RE_TUNE_EVENT_SIGNAL_EN_SHIFT      12
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_FX_EVENT_SIGNAL_EN_SHIFT           13
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CQE_EVENT_SIGNAL_EN_SHIFT          14
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_RSVD_15_SHIFT                      15
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_TOUT_ERR_SIGNAL_EN_SHIFT       16
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_CRC_ERR_SIGNAL_EN_SHIFT        17
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_END_BIT_ERR_SIGNAL_EN_SHIFT    18
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_IDX_ERR_SIGNAL_EN_SHIFT        19
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DATA_TOUT_ERR_SIGNAL_EN_SHIFT      20
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DATA_CRC_ERR_SIGNAL_EN_SHIFT       21
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DATA_END_BIT_ERR_SIGNAL_EN_SHIFT   22
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CUR_LMT_ERR_SIGNAL_EN_SHIFT        23
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_AUTO_CMD_ERR_SIGNAL_EN_SHIFT       24
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_ADMA_ERR_SIGNAL_EN_SHIFT           25
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_TUNING_ERR_SIGNAL_EN_SHIFT         26
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_RESP_ERR_SIGNAL_EN_SHIFT           27
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BOOT_ACK_ERR_SIGNAL_EN_SHIFT       28
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_VENDOR_ERR_SIGNAL_EN1_SHIFT        29
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_VENDOR_ERR_SIGNAL_EN2_SHIFT        30
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_VENDOR_ERR_SIGNAL_EN3_SHIFT        31

#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_COMPLETE_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_XFER_COMPLETE_SIGNAL_EN_SIZE       1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BGAP_EVENT_SIGNAL_EN_SIZE          1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DMA_INTERRUPT_SIGNAL_EN_SIZE       1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BUF_WR_READY_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BUF_RD_READY_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CARD_INSERTION_SIGNAL_EN_SIZE      1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CARD_REMOVAL_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CARD_INTERRUPT_SIGNAL_EN_SIZE      1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_INT_A_SIGNAL_EN_SIZE               1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_INT_B_SIGNAL_EN_SIZE               1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_INT_C_SIGNAL_EN_SIZE               1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_RE_TUNE_EVENT_SIGNAL_EN_SIZE       1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_FX_EVENT_SIGNAL_EN_SIZE            1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CQE_EVENT_SIGNAL_EN_SIZE           1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_RSVD_15_SIZE                       1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_TOUT_ERR_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_CRC_ERR_SIGNAL_EN_SIZE         1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_END_BIT_ERR_SIGNAL_EN_SIZE     1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CMD_IDX_ERR_SIGNAL_EN_SIZE         1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DATA_TOUT_ERR_SIGNAL_EN_SIZE       1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DATA_CRC_ERR_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_DATA_END_BIT_ERR_SIGNAL_EN_SIZE    1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_CUR_LMT_ERR_SIGNAL_EN_SIZE         1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_AUTO_CMD_ERR_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_ADMA_ERR_SIGNAL_EN_SIZE            1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_TUNING_ERR_SIGNAL_EN_SIZE          1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_RESP_ERR_SIGNAL_EN_SIZE            1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_BOOT_ACK_ERR_SIGNAL_EN_SIZE        1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_VENDOR_ERR_SIGNAL_EN1_SIZE         1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_VENDOR_ERR_SIGNAL_EN2_SIZE         1
#define MMC_ERROR_INT_SIGNAL_EN_R_NORMAL_INT_SIGNAL_EN_R_VENDOR_ERR_SIGNAL_EN3_SIZE         1

///////////////////////////////////////////////////////
// Register: HOST_CTRL2_R_AUTO_CMD_STAT_R
// This register is used to control how the Host Controller operates.
///////////////////////////////////////////////////////
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_OFFSET     0x3CUL
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_NUM        0x1

#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD12_NOT_EXEC_SHIFT          0
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_TOUT_ERR_SHIFT            1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_CRC_ERR_SHIFT             2
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_EBIT_ERR_SHIFT            3
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_IDX_ERR_SHIFT             4
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_RESP_ERR_SHIFT            5
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_RSVD_6_SHIFT                       6
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_CMD_NOT_ISSUED_AUTO_CMD12_SHIFT    7
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_RSVD_15_8_SHIFT                    8
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_UHS_MODE_SEL_SHIFT                 16
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_SIGNALING_EN_SHIFT                 19
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_DRV_STRENGTH_SEL_SHIFT             20
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_EXEC_TUNING_SHIFT                  22
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_SAMPLE_CLK_SEL_SHIFT               23
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_UHS2_IF_ENABLE_SHIFT               24
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_RSVD_9_SHIFT                       25
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_ADMA2_LEN_MODE_SHIFT               26
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_CMD23_ENABLE_SHIFT                 27
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_HOST_VER4_ENABLE_SHIFT             28
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_ADDRESSING_SHIFT                   29
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_ASYNC_INT_ENABLE_SHIFT             30
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_PRESET_VAL_ENABLE_SHIFT            31

#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD12_NOT_EXEC_SIZE       1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_TOUT_ERR_SIZE         1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_CRC_ERR_SIZE          1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_EBIT_ERR_SIZE         1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_IDX_ERR_SIZE          1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_AUTO_CMD_RESP_ERR_SIZE         1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_RSVD_6_SIZE                    1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_CMD_NOT_ISSUED_AUTO_CMD12_SIZE 1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_RSVD_15_8_SIZE                 8
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_UHS_MODE_SEL_SIZE              3
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_SIGNALING_EN_SIZE              1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_DRV_STRENGTH_SEL_SIZE          2
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_EXEC_TUNING_SIZE               1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_SAMPLE_CLK_SEL_SIZE            1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_UHS2_IF_ENABLE_SIZE            1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_RSVD_9_SIZE                    1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_ADMA2_LEN_MODE_SIZE            1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_CMD23_ENABLE_SIZE              1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_HOST_VER4_ENABLE_SIZE          1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_ADDRESSING_SIZE                1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_ASYNC_INT_ENABLE_SIZE          1
#define MMC_HOST_CTRL2_R_AUTO_CMD_STAT_R_PRESET_VAL_ENABLE_SIZE         1

///////////////////////////////////////////////////////
// Register: CAPABILITIES1_R
// This register provides the Host Driver with information specific to the Host Controller implementation. The host controller may implement these values as fixed or loaded from the flash memory during power on initialization. Capabilities register is segregated into two 32-bit registers: CAPABILITIES1_R and CAPABILITIES2_R. The CAPABILITIES1_R register is the lower part of Capabilities register.
///////////////////////////////////////////////////////
#define MMC_CAPABILITIES1_R_OFFSET  0x40UL
#define MMC_CAPABILITIES1_R_NUM     0x1

#define MMC_CAPABILITIES1_R_TOUT_CLK_FREQ_SHIFT         0
#define MMC_CAPABILITIES1_R_RSVD_6_SHIFT                6
#define MMC_CAPABILITIES1_R_TOUT_CLK_UNIT_SHIFT         7
#define MMC_CAPABILITIES1_R_BASE_CLK_FREQ_SHIFT         8
#define MMC_CAPABILITIES1_R_MAX_BLK_LEN_SHIFT           16
#define MMC_CAPABILITIES1_R_EMBEDDED_8_BIT_SHIFT        18
#define MMC_CAPABILITIES1_R_ADMA2_SUPPORT_SHIFT         19
#define MMC_CAPABILITIES1_R_RSVD_20_SHIFT               20
#define MMC_CAPABILITIES1_R_HIGH_SPEED_SUPPORT_SHIFT    21
#define MMC_CAPABILITIES1_R_SDMA_SUPPORT_SHIFT          22
#define MMC_CAPABILITIES1_R_SUS_RES_SUPPORT_SHIFT       23
#define MMC_CAPABILITIES1_R_VOLT_33_SHIFT               24
#define MMC_CAPABILITIES1_R_VOLT_30_SHIFT               25
#define MMC_CAPABILITIES1_R_VOLT_18_SHIFT               26
#define MMC_CAPABILITIES1_R_SYS_ADDR_64_V4_SHIFT        27
#define MMC_CAPABILITIES1_R_SYS_ADDR_64_V3_SHIFT        28
#define MMC_CAPABILITIES1_R_ASYNC_INT_SUPPORT_SHIFT     29
#define MMC_CAPABILITIES1_R_SLOT_TYPE_R_SHIFT           30

#define MMC_CAPABILITIES1_R_TOUT_CLK_FREQ_SIZE          6
#define MMC_CAPABILITIES1_R_RSVD_6_SIZE                 1
#define MMC_CAPABILITIES1_R_TOUT_CLK_UNIT_SIZE          1
#define MMC_CAPABILITIES1_R_BASE_CLK_FREQ_SIZE          8
#define MMC_CAPABILITIES1_R_MAX_BLK_LEN_SIZE            2
#define MMC_CAPABILITIES1_R_EMBEDDED_8_BIT_SIZE         1
#define MMC_CAPABILITIES1_R_ADMA2_SUPPORT_SIZE          1
#define MMC_CAPABILITIES1_R_RSVD_20_SIZE                1
#define MMC_CAPABILITIES1_R_HIGH_SPEED_SUPPORT_SIZE     1
#define MMC_CAPABILITIES1_R_SDMA_SUPPORT_SIZE           1
#define MMC_CAPABILITIES1_R_SUS_RES_SUPPORT_SIZE        1
#define MMC_CAPABILITIES1_R_VOLT_33_SIZE                1
#define MMC_CAPABILITIES1_R_VOLT_30_SIZE                1
#define MMC_CAPABILITIES1_R_VOLT_18_SIZE                1
#define MMC_CAPABILITIES1_R_SYS_ADDR_64_V4_SIZE         1
#define MMC_CAPABILITIES1_R_SYS_ADDR_64_V3_SIZE         1
#define MMC_CAPABILITIES1_R_ASYNC_INT_SUPPORT_SIZE      1
#define MMC_CAPABILITIES1_R_SLOT_TYPE_R_SIZE            2

///////////////////////////////////////////////////////
// Register: CAPABILITIES2_R
// This register provides the Host Driver with information specific to the Host Controller implementation. The host controller may implement these values as fixed or as loaded from flash memory during power on initialization. Capabilities register is segregated into two 32-bit registers, namely CAPABILITIES1_R and CAPABILITIES2_R. The CAPABILITIES2_R register is upper part of Capabilities register
///////////////////////////////////////////////////////
#define MMC_CAPABILITIES2_R_OFFSET  0x44UL
#define MMC_CAPABILITIES2_R_NUM     0x1

#define MMC_CAPABILITIES2_R_SDR50_SUPPORT_SHIFT     0
#define MMC_CAPABILITIES2_R_SDR104_SUPPORT_SHIFT    1
#define MMC_CAPABILITIES2_R_DDR50_SUPPORT_SHIFT     2
#define MMC_CAPABILITIES2_R_UHS2_SUPPORT_SHIFT      3
#define MMC_CAPABILITIES2_R_DRV_TYPEA_SHIFT         4
#define MMC_CAPABILITIES2_R_DRV_TYPEC_SHIFT         5
#define MMC_CAPABILITIES2_R_DRV_TYPED_SHIFT         6
#define MMC_CAPABILITIES2_R_RSVD_39_SHIFT           7
#define MMC_CAPABILITIES2_R_RETUNE_CNT_SHIFT        8
#define MMC_CAPABILITIES2_R_RSVD_44_SHIFT           12
#define MMC_CAPABILITIES2_R_USE_TUNING_SDR50_SHIFT  13
#define MMC_CAPABILITIES2_R_RE_TUNING_MODES_SHIFT   14
#define MMC_CAPABILITIES2_R_CLK_MUL_SHIFT           16
#define MMC_CAPABILITIES2_R_RSVD_56_58_SHIFT        24
#define MMC_CAPABILITIES2_R_ADMA3_SUPPORT_SHIFT     27
#define MMC_CAPABILITIES2_R_VDD2_18V_SUPPORT_SHIFT  28
#define MMC_CAPABILITIES2_R_RSVD_61_SHIFT           29
#define MMC_CAPABILITIES2_R_RSVD_62_63_SHIFT        30

#define MMC_CAPABILITIES2_R_SDR50_SUPPORT_SIZE      1
#define MMC_CAPABILITIES2_R_SDR104_SUPPORT_SIZE     1
#define MMC_CAPABILITIES2_R_DDR50_SUPPORT_SIZE      1
#define MMC_CAPABILITIES2_R_UHS2_SUPPORT_SIZE       1
#define MMC_CAPABILITIES2_R_DRV_TYPEA_SIZE          1
#define MMC_CAPABILITIES2_R_DRV_TYPEC_SIZE          1
#define MMC_CAPABILITIES2_R_DRV_TYPED_SIZE          1
#define MMC_CAPABILITIES2_R_RSVD_39_SIZE            1
#define MMC_CAPABILITIES2_R_RETUNE_CNT_SIZE         4
#define MMC_CAPABILITIES2_R_RSVD_44_SIZE            1
#define MMC_CAPABILITIES2_R_USE_TUNING_SDR50_SIZE   1
#define MMC_CAPABILITIES2_R_RE_TUNING_MODES_SIZE    2
#define MMC_CAPABILITIES2_R_CLK_MUL_SIZE            8
#define MMC_CAPABILITIES2_R_RSVD_56_58_SIZE         3
#define MMC_CAPABILITIES2_R_ADMA3_SUPPORT_SIZE      1
#define MMC_CAPABILITIES2_R_VDD2_18V_SUPPORT_SIZE   1
#define MMC_CAPABILITIES2_R_RSVD_61_SIZE            1
#define MMC_CAPABILITIES2_R_RSVD_62_63_SIZE         2

///////////////////////////////////////////////////////
// Register: CURR_CAPABILITIES1_R
// This register indicate the maximum current capability for each voltage, for VDD1. The value is meaningful if the Voltage Support is set in the Capabilities register. If this information is supplied by the Host System through another method, all the Maximum Current Capabilities registers are set to 0.
///////////////////////////////////////////////////////
#define MMC_CURR_CAPABILITIES1_R_OFFSET     0x48UL
#define MMC_CURR_CAPABILITIES1_R_NUM        0x1

#define MMC_CURR_CAPABILITIES1_R_MAX_CUR_33V_SHIFT  0
#define MMC_CURR_CAPABILITIES1_R_MAX_CUR_30V_SHIFT  8
#define MMC_CURR_CAPABILITIES1_R_MAX_CUR_18V_SHIFT  16
#define MMC_CURR_CAPABILITIES1_R_RSVD_31_24_SHIFT   24

#define MMC_CURR_CAPABILITIES1_R_MAX_CUR_33V_SIZE   8
#define MMC_CURR_CAPABILITIES1_R_MAX_CUR_30V_SIZE   8
#define MMC_CURR_CAPABILITIES1_R_MAX_CUR_18V_SIZE   8
#define MMC_CURR_CAPABILITIES1_R_RSVD_31_24_SIZE    8

///////////////////////////////////////////////////////
// Register: CURR_CAPABILITIES2_R
// This register indicates the maximum current capability for each voltage (for VDD2). The value is meaningful if Voltage Support is set in the Capabilities register. If this information is supplied by the Host System through another method, all the Maximum Current Capabilities registers are set to 0.
///////////////////////////////////////////////////////
#define MMC_CURR_CAPABILITIES2_R_OFFSET     0x4CUL
#define MMC_CURR_CAPABILITIES2_R_NUM        0x1

#define MMC_CURR_CAPABILITIES2_R_MAX_CUR_VDD2_18V_SHIFT 0
#define MMC_CURR_CAPABILITIES2_R_RSVD_63_40_SHIFT       8

#define MMC_CURR_CAPABILITIES2_R_MAX_CUR_VDD2_18V_SIZE  8
#define MMC_CURR_CAPABILITIES2_R_RSVD_63_40_SIZE        24

///////////////////////////////////////////////////////
// Register: FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R
// This register is not physically implemented but is an address at which the Error Interrupt Status register can be written. The effect of a write to this address is reflected in the Error Interrupt Status register if the corresponding bit of the Error Interrupt Status Enable register is set
///////////////////////////////////////////////////////
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_OFFSET 0x50UL
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_NUM    0x1

#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD12_NOT_EXEC_SHIFT        0
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_TOUT_ERR_SHIFT          1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_CRC_ERR_SHIFT           2
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_EBIT_ERR_SHIFT          3
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_IDX_ERR_SHIFT           4
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_RESP_ERR_SHIFT          5
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_RSVD_6_SHIFT                           6
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_NOT_ISSUED_AUTO_CMD12_SHIFT  7
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_RSVD_15_8_SHIFT                        8
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_TOUT_ERR_SHIFT               16
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_CRC_ERR_SHIFT                17
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_END_BIT_ERR_SHIFT            18
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_IDX_ERR_SHIFT                19
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_DATA_TOUT_ERR_SHIFT              20
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_DATA_CRC_ERR_SHIFT               21
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_DATA_END_BIT_ERR_SHIFT           22
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CUR_LMT_ERR_SHIFT                23
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_ERR_SHIFT               24
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_ADMA_ERR_SHIFT                   25
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_TUNING_ERR_SHIFT                 26
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_RESP_ERR_SHIFT                   27
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_BOOT_ACK_ERR_SHIFT               28
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_VENDOR_ERR1_SHIFT                29
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_VENDOR_ERR2_SHIFT                30
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_VENDOR_ERR3_SHIFT                31

#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD12_NOT_EXEC_SIZE         1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_TOUT_ERR_SIZE           1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_CRC_ERR_SIZE            1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_EBIT_ERR_SIZE           1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_IDX_ERR_SIZE            1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_RESP_ERR_SIZE           1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_RSVD_6_SIZE                            1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_NOT_ISSUED_AUTO_CMD12_SIZE   1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_RSVD_15_8_SIZE                         8
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_TOUT_ERR_SIZE                1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_CRC_ERR_SIZE                 1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_END_BIT_ERR_SIZE             1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CMD_IDX_ERR_SIZE                 1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_DATA_TOUT_ERR_SIZE               1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_DATA_CRC_ERR_SIZE                1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_DATA_END_BIT_ERR_SIZE            1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_CUR_LMT_ERR_SIZE                 1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_AUTO_CMD_ERR_SIZE                1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_ADMA_ERR_SIZE                    1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_TUNING_ERR_SIZE                  1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_RESP_ERR_SIZE                    1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_BOOT_ACK_ERR_SIZE                1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_VENDOR_ERR1_SIZE                 1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_VENDOR_ERR2_SIZE                 1
#define MMC_FORCE_ERROR_INT_STAT_R_FORCE_AUTO_CMD_STAT_R_FORCE_VENDOR_ERR3_SIZE                 1

///////////////////////////////////////////////////////
// Register: ADMA_ERR_STAT_R
// This register stores the ADMA state during an ADMA error.
///////////////////////////////////////////////////////
#define MMC_ADMA_ERR_STAT_R_OFFSET  0x54UL
#define MMC_ADMA_ERR_STAT_R_NUM     0x1

#define MMC_ADMA_ERR_STAT_R_ADMA_ERR_STATES_SHIFT   0
#define MMC_ADMA_ERR_STAT_R_ADMA_LEN_ERR_SHIFT      2
#define MMC_ADMA_ERR_STAT_R_RSVD_31_3_SHIFT         3

#define MMC_ADMA_ERR_STAT_R_ADMA_ERR_STATES_SIZE    2
#define MMC_ADMA_ERR_STAT_R_ADMA_LEN_ERR_SIZE       1
#define MMC_ADMA_ERR_STAT_R_RSVD_31_3_SIZE          29

///////////////////////////////////////////////////////
// Register: ADMA_SA_LOW_R
// This register holds the lower 32-bit system address for DMA transfer
///////////////////////////////////////////////////////
#define MMC_ADMA_SA_LOW_R_OFFSET    0x58UL
#define MMC_ADMA_SA_LOW_R_NUM       0x1

#define MMC_ADMA_SA_LOW_R_ADMA_SA_LOW_SHIFT 0

#define MMC_ADMA_SA_LOW_R_ADMA_SA_LOW_SIZE  32

///////////////////////////////////////////////////////
// Register: PRESET_DS_R_PRESET_INIT_R
// This register defines Preset Value for Default Speed mode in SD mode
///////////////////////////////////////////////////////
#define MMC_PRESET_DS_R_PRESET_INIT_R_OFFSET    0x60UL
#define MMC_PRESET_DS_R_PRESET_INIT_R_NUM       0x1

#define MMC_PRESET_DS_R_PRESET_INIT_R_FREQ_SEL_VAL_INIT_SHIFT       0
#define MMC_PRESET_DS_R_PRESET_INIT_R_CLK_GEN_SEL_VAL_INIT_SHIFT    10
#define MMC_PRESET_DS_R_PRESET_INIT_R_RSVD_13_11_SHIFT              11
#define MMC_PRESET_DS_R_PRESET_INIT_R_DRV_SEL_VAL_INIT_SHIFT        14
#define MMC_PRESET_DS_R_PRESET_INIT_R_FREQ_SEL_VAL_DS_SHIFT         16
#define MMC_PRESET_DS_R_PRESET_INIT_R_CLK_GEN_SEL_VAL_DS_SHIFT      26
#define MMC_PRESET_DS_R_PRESET_INIT_R_RSVD_29_27_SHIFT              27
#define MMC_PRESET_DS_R_PRESET_INIT_R_DRV_SEL_VAL_DS_SHIFT          30

#define MMC_PRESET_DS_R_PRESET_INIT_R_FREQ_SEL_VAL_INIT_SIZE        10
#define MMC_PRESET_DS_R_PRESET_INIT_R_CLK_GEN_SEL_VAL_INIT_SIZE     1
#define MMC_PRESET_DS_R_PRESET_INIT_R_RSVD_13_11_SIZE               3
#define MMC_PRESET_DS_R_PRESET_INIT_R_DRV_SEL_VAL_INIT_SIZE         2
#define MMC_PRESET_DS_R_PRESET_INIT_R_FREQ_SEL_VAL_DS_SIZE          10
#define MMC_PRESET_DS_R_PRESET_INIT_R_CLK_GEN_SEL_VAL_DS_SIZE       1
#define MMC_PRESET_DS_R_PRESET_INIT_R_RSVD_29_27_SIZE               3
#define MMC_PRESET_DS_R_PRESET_INIT_R_DRV_SEL_VAL_DS_SIZE           2

///////////////////////////////////////////////////////
// Register: PRESET_HS_R
//
///////////////////////////////////////////////////////
#define MMC_PRESET_HS_R_OFFSET  0x64UL
#define MMC_PRESET_HS_R_NUM     0x1

#define MMC_PRESET_HS_R_FREQ_SEL_VAL_0_SHIFT        0
#define MMC_PRESET_HS_R_CLK_GEN_SEL_VAL_0_SHIFT     10
#define MMC_PRESET_HS_R_RSVD_13_11_SHIFT            11
#define MMC_PRESET_HS_R_DRV_SEL_VAL_0_SHIFT         14
#define MMC_PRESET_HS_R_FREQ_SEL_VAL_1_SHIFT        16
#define MMC_PRESET_HS_R_CLK_GEN_SEL_VAL_1_SHIFT     26
#define MMC_PRESET_HS_R_RSVD_29_27_SHIFT            27
#define MMC_PRESET_HS_R_DRV_SEL_VAL_1_SHIFT         30

#define MMC_PRESET_HS_R_FREQ_SEL_VAL_0_SIZE         10
#define MMC_PRESET_HS_R_CLK_GEN_SEL_VAL_0_SIZE      1
#define MMC_PRESET_HS_R_RSVD_13_11_SIZE             3
#define MMC_PRESET_HS_R_DRV_SEL_VAL_0_SIZE          2
#define MMC_PRESET_HS_R_FREQ_SEL_VAL_1_SIZE         10
#define MMC_PRESET_HS_R_CLK_GEN_SEL_VAL_1_SIZE      1
#define MMC_PRESET_HS_R_RSVD_29_27_SIZE             3
#define MMC_PRESET_HS_R_DRV_SEL_VAL_1_SIZE          2

///////////////////////////////////////////////////////
// Register: PRESET_SDR50_R_PRESET_SDR25_R
// This register defines Preset Value for SDR50 speed mode in SD mode
///////////////////////////////////////////////////////
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_OFFSET    0x68UL
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_NUM       0x1

#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_FREQ_SEL_VAL_0_SHIFT      0
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_CLK_GEN_SEL_VAL_0_SHIFT   10
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_RSVD_13_11_SHIFT          11
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_DRV_SEL_VAL_0_SHIFT       14
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_FREQ_SEL_VAL_1_SHIFT      16
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_CLK_GEN_SEL_VAL_1_SHIFT   26
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_RSVD_29_27_SHIFT          27
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_DRV_SEL_VAL_1_SHIFT       30

#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_FREQ_SEL_VAL_0_SIZE       10
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_CLK_GEN_SEL_VAL_0_SIZE    1
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_RSVD_13_11_SIZE           3
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_DRV_SEL_VAL_0_SIZE        2
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_FREQ_SEL_VAL_1_SIZE       10
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_CLK_GEN_SEL_VAL_1_SIZE    1
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_RSVD_29_27_SIZE           3
#define MMC_PRESET_SDR50_R_PRESET_SDR25_R_DRV_SEL_VAL_1_SIZE        2

///////////////////////////////////////////////////////
// Register: PRESET_DDR50_R_PRESET_SDR104_R
// This register defines the Preset Value for DDR50 and High Speed DDR speed modes in the SD and eMMC modes, respectively.
///////////////////////////////////////////////////////
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_OFFSET   0x6CUL
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_NUM      0x1

#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_FREQ_SEL_VAL_0_SHIFT     0
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_CLK_GEN_SEL_VAL_0_SHIFT  10
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_RSVD_13_11_SHIFT         11
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_DRV_SEL_VAL_0_SHIFT      14
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_FREQ_SEL_VAL_1_SHIFT     16
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_CLK_GEN_SEL_VAL_1_SHIFT  26
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_RSVD_29_27_SHIFT         27
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_DRV_SEL_VAL_1_SHIFT      30

#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_FREQ_SEL_VAL_0_SIZE      10
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_CLK_GEN_SEL_VAL_0_SIZE   1
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_RSVD_13_11_SIZE          3
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_DRV_SEL_VAL_0_SIZE       2
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_FREQ_SEL_VAL_1_SIZE      10
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_CLK_GEN_SEL_VAL_1_SIZE   1
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_RSVD_29_27_SIZE          3
#define MMC_PRESET_DDR50_R_PRESET_SDR104_R_DRV_SEL_VAL_1_SIZE       2

///////////////////////////////////////////////////////
// Register: PRESET_UHS2_R
// This register is used to hold the preset value for UHS-II and HS400 speed modes in the SD and eMMC modes, respectively
///////////////////////////////////////////////////////
#define MMC_PRESET_UHS2_R_OFFSET    0x74UL
#define MMC_PRESET_UHS2_R_NUM       0x1

#define MMC_PRESET_UHS2_R_FREQ_SEL_VAL_SHIFT        0
#define MMC_PRESET_UHS2_R_CLK_GEN_SEL_VAL_SHIFT     10
#define MMC_PRESET_UHS2_R_RSVD_13_11_SHIFT          11
#define MMC_PRESET_UHS2_R_DRV_SEL_VAL_SHIFT         14
#define MMC_PRESET_UHS2_R_RSVD_31_24_SHIFT          16

#define MMC_PRESET_UHS2_R_FREQ_SEL_VAL_SIZE         10
#define MMC_PRESET_UHS2_R_CLK_GEN_SEL_VAL_SIZE      1
#define MMC_PRESET_UHS2_R_RSVD_13_11_SIZE           3
#define MMC_PRESET_UHS2_R_DRV_SEL_VAL_SIZE          2
#define MMC_PRESET_UHS2_R_RSVD_31_24_SIZE           16

///////////////////////////////////////////////////////
// Register: ADMA_ID_LOW_R
// This register holds the lower 32-bit Integrated Descriptor address
///////////////////////////////////////////////////////
#define MMC_ADMA_ID_LOW_R_OFFSET    0x78UL
#define MMC_ADMA_ID_LOW_R_NUM       0x1

#define MMC_ADMA_ID_LOW_R_ADMA_ID_LOW_SHIFT 0

#define MMC_ADMA_ID_LOW_R_ADMA_ID_LOW_SIZE  32

///////////////////////////////////////////////////////
// Register: P_EMBEDDED_CNTRL
// This register points to the location of UHS-II embedded control registers
///////////////////////////////////////////////////////
#define MMC_P_EMBEDDED_CNTRL_OFFSET     0xE4UL
#define MMC_P_EMBEDDED_CNTRL_NUM        0x1

#define MMC_P_EMBEDDED_CNTRL_RESERVED_15_0_SHIFT    0
#define MMC_P_EMBEDDED_CNTRL_REG_OFFSET_ADDR_SHIFT  16
#define MMC_P_EMBEDDED_CNTRL_RESERVED_31_28_SHIFT   28

#define MMC_P_EMBEDDED_CNTRL_RESERVED_15_0_SIZE     16
#define MMC_P_EMBEDDED_CNTRL_REG_OFFSET_ADDR_SIZE   12
#define MMC_P_EMBEDDED_CNTRL_RESERVED_31_28_SIZE    4

///////////////////////////////////////////////////////
// Register: P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA
// This register is used as a pointer for the Vendor Specific Area 2.
///////////////////////////////////////////////////////
#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_OFFSET   0xE8UL
#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_NUM      0x1

#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_REG_OFFSET_ADDR_0_SHIFT  0
#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_RESERVED_15_12_SHIFT     12
#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_REG_OFFSET_ADDR_1_SHIFT  16

#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_REG_OFFSET_ADDR_0_SIZE   12
#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_RESERVED_15_12_SIZE      4
#define MMC_P_VENDOR2_SPECIFIC_AREA_P_VENDOR_SPECIFIC_AREA_REG_OFFSET_ADDR_1_SIZE   16

///////////////////////////////////////////////////////
// Register: HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R
// This register is used to indicate the Host Controller Version number
///////////////////////////////////////////////////////
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_OFFSET     0xFCUL
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_NUM        0x1

#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_INTR_SLOT_SHIFT            0
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_RESERVED_15_8_SHIFT        8
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_SPEC_VERSION_NUM_SHIFT     16
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_VENDOR_VERSION_NUM_SHIFT   24

#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_INTR_SLOT_SIZE             8
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_RESERVED_15_8_SIZE         8
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_SPEC_VERSION_NUM_SIZE      8
#define MMC_HOST_CNTRL_VERS_R_SLOT_INTR_STATUS_R_VENDOR_VERSION_NUM_SIZE    8

///////////////////////////////////////////////////////
// Register: EMBEDDED_CTRL_R
// This register controls the embedded device. When the Host Controller is connected to a removable device, this register is not used.
///////////////////////////////////////////////////////
#define MMC_EMBEDDED_CTRL_R_OFFSET  0xF6CUL
#define MMC_EMBEDDED_CTRL_R_NUM     0x1

#define MMC_EMBEDDED_CTRL_R_NUM_CLK_PIN_SHIFT       0
#define MMC_EMBEDDED_CTRL_R_RSVD_3_SHIFT            3
#define MMC_EMBEDDED_CTRL_R_NUM_INT_PIN_SHIFT       4
#define MMC_EMBEDDED_CTRL_R_RSVD_7_6_SHIFT          6
#define MMC_EMBEDDED_CTRL_R_BUS_WIDTH_PRESET_SHIFT  8
#define MMC_EMBEDDED_CTRL_R_RSVD_15_SHIFT           15
#define MMC_EMBEDDED_CTRL_R_CLK_PIN_SEL_SHIFT       16
#define MMC_EMBEDDED_CTRL_R_RSVD_19_SHIFT           19
#define MMC_EMBEDDED_CTRL_R_INT_PIN_SEL_SHIFT       20
#define MMC_EMBEDDED_CTRL_R_RSVD_23_SHIFT           23
#define MMC_EMBEDDED_CTRL_R_BACK_END_PWR_CTRL_SHIFT 24
#define MMC_EMBEDDED_CTRL_R_RSVD_31_SHIFT           31

#define MMC_EMBEDDED_CTRL_R_NUM_CLK_PIN_SIZE        3
#define MMC_EMBEDDED_CTRL_R_RSVD_3_SIZE             1
#define MMC_EMBEDDED_CTRL_R_NUM_INT_PIN_SIZE        2
#define MMC_EMBEDDED_CTRL_R_RSVD_7_6_SIZE           2
#define MMC_EMBEDDED_CTRL_R_BUS_WIDTH_PRESET_SIZE   7
#define MMC_EMBEDDED_CTRL_R_RSVD_15_SIZE            1
#define MMC_EMBEDDED_CTRL_R_CLK_PIN_SEL_SIZE        3
#define MMC_EMBEDDED_CTRL_R_RSVD_19_SIZE            1
#define MMC_EMBEDDED_CTRL_R_INT_PIN_SEL_SIZE        3
#define MMC_EMBEDDED_CTRL_R_RSVD_23_SIZE            1
#define MMC_EMBEDDED_CTRL_R_BACK_END_PWR_CTRL_SIZE  7
#define MMC_EMBEDDED_CTRL_R_RSVD_31_SIZE            1

///////////////////////////////////////////////////////
// Register: CQCAP
// This register indicates the capabilities of the command queuing engine
///////////////////////////////////////////////////////
#define MMC_CQCAP_OFFSET    0x184UL
#define MMC_CQCAP_NUM       0x1

#define MMC_CQCAP_ITCFVAL_SHIFT         0
#define MMC_CQCAP_CQCCAP_RSVD1_SHIFT    10
#define MMC_CQCAP_ITCFMUL_SHIFT         12
#define MMC_CQCAP_CQCCAP_RSVD2_SHIFT    16
#define MMC_CQCAP_CRYPTO_SUPPORT_SHIFT  28
#define MMC_CQCAP_CQCCAP_RSVD3_SHIFT    29

#define MMC_CQCAP_ITCFVAL_SIZE          10
#define MMC_CQCAP_CQCCAP_RSVD1_SIZE     2
#define MMC_CQCAP_ITCFMUL_SIZE          4
#define MMC_CQCAP_CQCCAP_RSVD2_SIZE     12
#define MMC_CQCAP_CRYPTO_SUPPORT_SIZE   1
#define MMC_CQCAP_CQCCAP_RSVD3_SIZE     3

///////////////////////////////////////////////////////
// Register: MSHC_VER_ID_R
// This register reflects the current release number of DWC_mshc/DWC_mshc_lite.
///////////////////////////////////////////////////////
#define MMC_MSHC_VER_ID_R_OFFSET    0x500UL
#define MMC_MSHC_VER_ID_R_NUM       0x1

#define MMC_MSHC_VER_ID_R_MSHC_VER_ID_SHIFT 0

#define MMC_MSHC_VER_ID_R_MSHC_VER_ID_SIZE  32

///////////////////////////////////////////////////////
// Register: MSHC_VER_TYPE_R
// This register reflects the current release type of DWC_mshc/DWC_mshc_lite.
///////////////////////////////////////////////////////
#define MMC_MSHC_VER_TYPE_R_OFFSET  0x504UL
#define MMC_MSHC_VER_TYPE_R_NUM     0x1

#define MMC_MSHC_VER_TYPE_R_MSHC_VER_TYPE_SHIFT 0

#define MMC_MSHC_VER_TYPE_R_MSHC_VER_TYPE_SIZE  32

///////////////////////////////////////////////////////
// Register: MSHC_CTRL_R
// This register is used to control the operation of MSHC Host Controller
///////////////////////////////////////////////////////
#define MMC_MSHC_CTRL_R_OFFSET  0x508UL
#define MMC_MSHC_CTRL_R_NUM     0x1

#define MMC_MSHC_CTRL_R_CMD_CONFLICT_CHECK_SHIFT    0
#define MMC_MSHC_CTRL_R_RSVD1_SHIFT                 1
#define MMC_MSHC_CTRL_R_SW_CG_DIS_SHIFT             4
#define MMC_MSHC_CTRL_R_RSVD5_SHIFT                 5
#define MMC_MSHC_CTRL_R_PEDGE_DRV_EN_SHIFT          6
#define MMC_MSHC_CTRL_R_NEDGE_SMPL_EN_SHIFT         7
#define MMC_MSHC_CTRL_R_RSVD_31_8_SHIFT             8

#define MMC_MSHC_CTRL_R_CMD_CONFLICT_CHECK_SIZE     1
#define MMC_MSHC_CTRL_R_RSVD1_SIZE                  3
#define MMC_MSHC_CTRL_R_SW_CG_DIS_SIZE              1
#define MMC_MSHC_CTRL_R_RSVD5_SIZE                  1
#define MMC_MSHC_CTRL_R_PEDGE_DRV_EN_SIZE           1
#define MMC_MSHC_CTRL_R_NEDGE_SMPL_EN_SIZE          1
#define MMC_MSHC_CTRL_R_RSVD_31_8_SIZE              24

///////////////////////////////////////////////////////
// Register: MBIU_CTRL_R
// This register is used to select the valid burst types that the AHB Master bus interface can generate. When more than one bit is set the master selects the burst it prefers among those that are enabled in this register.
///////////////////////////////////////////////////////
#define MMC_MBIU_CTRL_R_OFFSET  0x510UL
#define MMC_MBIU_CTRL_R_NUM     0x1

#define MMC_MBIU_CTRL_R_UNDEFL_INCR_EN_SHIFT    0
#define MMC_MBIU_CTRL_R_BURST_INCR4_EN_SHIFT    1
#define MMC_MBIU_CTRL_R_BURST_INCR8_EN_SHIFT    2
#define MMC_MBIU_CTRL_R_BURST_INCR16_EN_SHIFT   3
#define MMC_MBIU_CTRL_R_RSVD_31_4_SHIFT         4

#define MMC_MBIU_CTRL_R_UNDEFL_INCR_EN_SIZE     1
#define MMC_MBIU_CTRL_R_BURST_INCR4_EN_SIZE     1
#define MMC_MBIU_CTRL_R_BURST_INCR8_EN_SIZE     1
#define MMC_MBIU_CTRL_R_BURST_INCR16_EN_SIZE    1
#define MMC_MBIU_CTRL_R_RSVD_31_4_SIZE          28

///////////////////////////////////////////////////////
// Register: BOOT_CTRL_R_EMMC_CTRL_R
// This register is used to control the eMMC Boot operation.
///////////////////////////////////////////////////////
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_OFFSET  0x52CUL
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_NUM     0x1

#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_CARD_IS_EMMC_SHIFT          0
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_DISABLE_DATA_CRC_CHK_SHIFT  1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_EMMC_RST_N_SHIFT            2
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_EMMC_RST_N_O_SHIFT          3
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_RSVD_4_15_SHIFT             4
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_MAN_BOOT_EN_SHIFT           16
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_RSVD_6_1_SHIFT              17
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_VALIDATE_BOOT_SHIFT         23
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_BOOT_ACK_ENABLE_SHIFT       24
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_RSVD_27_25_SHIFT            25
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_BOOT_TOUT_CNT_SHIFT         28

#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_CARD_IS_EMMC_SIZE           1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_DISABLE_DATA_CRC_CHK_SIZE   1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_EMMC_RST_N_SIZE             1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_EMMC_RST_N_O_SIZE           1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_RSVD_4_15_SIZE              12
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_MAN_BOOT_EN_SIZE            1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_RSVD_6_1_SIZE               6
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_VALIDATE_BOOT_SIZE          1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_BOOT_ACK_ENABLE_SIZE        1
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_RSVD_27_25_SIZE             3
#define MMC_BOOT_CTRL_R_EMMC_CTRL_R_BOOT_TOUT_CNT_SIZE          4

///////////////////////////////////////////////////////
// Register: AT_CTRL_R
// This register controls some aspects of tuning and auto-tuning features. Do not program this register when HOST_CTRL2_R.SAMPLE_CLK_SEL is '1'
///////////////////////////////////////////////////////
#define MMC_AT_CTRL_R_OFFSET    0x540UL
#define MMC_AT_CTRL_R_NUM       0x1

#define MMC_AT_CTRL_R_RSDV_0_1_SHIFT            0
#define MMC_AT_CTRL_R_SWIN_TH_EN_SHIFT          2
#define MMC_AT_CTRL_R_RPT_TUNE_ERR_SHIFT        3
#define MMC_AT_CTRL_R_SW_TUNE_EN_SHIFT          4
#define MMC_AT_CTRL_R_RSDV_5_15_SHIFT           5
#define MMC_AT_CTRL_R_TUNE_CLK_STOP_EN_SHIFT    16
#define MMC_AT_CTRL_R_PRE_CHANGE_DLY_SHIFT      17
#define MMC_AT_CTRL_R_POST_CHANGE_DLY_SHIFT     19
#define MMC_AT_CTRL_R_RSVD_21_23_SHIFT          21
#define MMC_AT_CTRL_R_SWIN_TH_VAL_SHIFT         24
#define MMC_AT_CTRL_R_RSVD_27_31_SHIFT          27

#define MMC_AT_CTRL_R_RSDV_0_1_SIZE             2
#define MMC_AT_CTRL_R_SWIN_TH_EN_SIZE           1
#define MMC_AT_CTRL_R_RPT_TUNE_ERR_SIZE         1
#define MMC_AT_CTRL_R_SW_TUNE_EN_SIZE           1
#define MMC_AT_CTRL_R_RSDV_5_15_SIZE            11
#define MMC_AT_CTRL_R_TUNE_CLK_STOP_EN_SIZE     1
#define MMC_AT_CTRL_R_PRE_CHANGE_DLY_SIZE       2
#define MMC_AT_CTRL_R_POST_CHANGE_DLY_SIZE      2
#define MMC_AT_CTRL_R_RSVD_21_23_SIZE           3
#define MMC_AT_CTRL_R_SWIN_TH_VAL_SIZE          3
#define MMC_AT_CTRL_R_RSVD_27_31_SIZE           5

///////////////////////////////////////////////////////
// Register: c
// Register to read the Center, Left and Right codes used by tuning and auto-tuning engines. Center code field is also used for software managed tuning.
///////////////////////////////////////////////////////
#define MMC_AT_STAT_R_OFFSET    0x544UL
#define MMC_AT_STAT_R_NUM       0x1

#define MMC_AT_STAT_R_CENTER_PH_CODE_SHIFT  0
#define MMC_AT_STAT_R_R_EDGE_PH_CODE_SHIFT  8
#define MMC_AT_STAT_R_L_EDGE_PH_CODE_SHIFT  16
#define MMC_AT_STAT_R_RSDV1_SHIFT           24

#define MMC_AT_STAT_R_CENTER_PH_CODE_SIZE   8
#define MMC_AT_STAT_R_R_EDGE_PH_CODE_SIZE   8
#define MMC_AT_STAT_R_L_EDGE_PH_CODE_SIZE   8
#define MMC_AT_STAT_R_RSDV1_SIZE            8

/**************************** Type Definitions ******************************/
typedef struct {
    AL_U32      DeviceId;
    AL_U32      BaseAddress;
    AL_U32      IntrId;
    AL_U32      BusWidth;
    AL_U32      InputClk;
    AL_U32      CardDetectSig;
    AL_U32      WritePortSig;
    AL_U32      CardDetect;
    AL_U32      WritePort;
    AL_U32      ClkPhase;
} AL_MMC_HwConfigStruct;

#ifdef _cplusplus
}
#endif

#endif
