
1hard_test.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000061000800 <_start>:
#ifdef DEBUG
	bl uart0_init_simple
	bl print_boot_el
	isb
#endif
	b setup_vector
    61000800:	14000001 	b	61000804 <setup_vector>

0000000061000804 <setup_vector>:
	 * x1 = CurrentEL，
	 * 0xc --> el3_entry
	 * 0x8 --> el2_entry
	 * 0x4 --> el1_entry
	**/
	switch_el x1, el3_entry, el2_entry, el1_entry
    61000804:	d5384241 	mrs	x1, currentel
    61000808:	f100303f 	cmp	x1, #0xc
    6100080c:	540000a0 	b.eq	61000820 <el3_entry>  // b.none
    61000810:	f100203f 	cmp	x1, #0x8
    61000814:	540004a0 	b.eq	610008a8 <el2_entry>  // b.none
    61000818:	f100103f 	cmp	x1, #0x4
    6100081c:	54000560 	b.eq	610008c8 <el1_entry>  // b.none

0000000061000820 <el3_entry>:
	/* execute el3 */
el3_entry:
	mrs x0, mpidr_el1
    61000820:	d53800a0 	mrs	x0, mpidr_el1
	ldr	x1, =0x00ff
    61000824:	58000721 	ldr	x1, 61000908 <main_entry+0x18>
	and	x0, x0, x1
    61000828:	8a010000 	and	x0, x0, x1
	cmp x0, #0
    6100082c:	f100001f 	cmp	x0, #0x0

	/*if primary cpu, continue boot */
	b.eq 0f
    61000830:	54000040 	b.eq	61000838 <el3_entry+0x18>  // b.none

	/*if secondary cpu, loop here*/
	b .
    61000834:	14000000 	b	61000834 <el3_entry+0x14>

0:

	/*init el3 gic system registers*/
	ldr x0, =0x0f
    61000838:	580006c0 	ldr	x0, 61000910 <main_entry+0x20>
	msr icc_sre_el3, x0
    6100083c:	d51ecca0 	msr	icc_sre_el3, x0

	//enable group1 secure,non-secure
	ldr x0, =0x03
    61000840:	580006c0 	ldr	x0, 61000918 <main_entry+0x28>
	msr icc_igrpen1_el3, x0
    61000844:	d51ecce0 	msr	s3_6_c12_c12_7, x0
	ldr x0, =0x01
    61000848:	580006c0 	ldr	x0, 61000920 <main_entry+0x30>
	msr icc_igrpen1_el1, x0
    6100084c:	d518cce0 	msr	s3_0_c12_c12_7, x0
	msr icc_igrpen0_el1, x0
    61000850:	d518ccc0 	msr	s3_0_c12_c12_6, x0

	adr	x0, vectors
    61000854:	10003d60 	adr	x0, 61001000 <vectors>
	msr vbar_el3, x0
    61000858:	d51ec000 	msr	vbar_el3, x0
	mrs	x0, scr_el3
    6100085c:	d53e1100 	mrs	x0, scr_el3
	/* x0 = x0 | 0xf */
	orr	x0, x0, #0xf			/* SCR_EL3.NS|IRQ|FIQ|EA */
    61000860:	b2400c00 	orr	x0, x0, #0xf
	msr	scr_el3, x0
    61000864:	d51e1100 	msr	scr_el3, x0
	msr	cptr_el3, xzr			/* Enable FP/SIMD */
    61000868:	d51e115f 	msr	cptr_el3, xzr
	/* set up stack point */
	ldr x28, =_sp
    6100086c:	580005fc 	ldr	x28, 61000928 <main_entry+0x38>
	mov sp, x28
    61000870:	9100039f 	mov	sp, x28
#ifdef COUNTER_FREQUENCY
	ldr	x0, =COUNTER_FREQUENCY
    61000874:	580005e0 	ldr	x0, 61000930 <main_entry+0x40>
	msr	cntfrq_el0, x0			/* Initialize CNTFRQ */
    61000878:	d51be000 	msr	cntfrq_el0, x0
#endif
/* switch to el1 */
#ifdef SWITCH_TO_EL1_FROM_EL3
	switch_el3_to_el1
    6100087c:	580005f5 	ldr	x21, 61000938 <main_entry+0x48>
    61000880:	d51e1115 	msr	scr_el3, x21
    61000884:	580005f5 	ldr	x21, 61000940 <main_entry+0x50>
    61000888:	d5181015 	msr	sctlr_el1, x21
    6100088c:	580005f5 	ldr	x21, 61000948 <main_entry+0x58>
    61000890:	d51e4015 	msr	spsr_el3, x21
    61000894:	100001b5 	adr	x21, 610008c8 <el1_entry>
    61000898:	d51e4035 	msr	elr_el3, x21
    6100089c:	d69f03e0 	eret
#endif
	b   main_entry
    610008a0:	14000014 	b	610008f0 <main_entry>
    610008a4:	d503201f 	nop

00000000610008a8 <el2_entry>:

/* el2 */
.align 3
el2_entry:
	adr	x0, vectors
    610008a8:	10003ac0 	adr	x0, 61001000 <vectors>
	msr	vbar_el2, x0
    610008ac:	d51cc000 	msr	vbar_el2, x0
	mov	x0, #0x33ff
    610008b0:	d2867fe0 	mov	x0, #0x33ff                	// #13311
	msr	cptr_el2, x0			/* Enable FP/SIMD */
    610008b4:	d51c1140 	msr	cptr_el2, x0
	/* set up stack point */
	ldr x28, =_sp
    610008b8:	5800039c 	ldr	x28, 61000928 <main_entry+0x38>
	mov sp, x28
    610008bc:	9100039f 	mov	sp, x28
	b   main_entry
    610008c0:	1400000c 	b	610008f0 <main_entry>
    610008c4:	d503201f 	nop

00000000610008c8 <el1_entry>:

/* el1 */
.align 3
el1_entry:
	/* set up stack point */
	ldr x28, =_sp
    610008c8:	5800031c 	ldr	x28, 61000928 <main_entry+0x38>
	mov sp, x28
    610008cc:	9100039f 	mov	sp, x28
	adr	x0, vectors
    610008d0:	10003980 	adr	x0, 61001000 <vectors>
	msr	vbar_el1, x0
    610008d4:	d518c000 	msr	vbar_el1, x0
	mov	x0, #3 << 20
    610008d8:	d2a00600 	mov	x0, #0x300000              	// #3145728
	msr	cpacr_el1, x0			/* Enable FP/SIMD */
    610008dc:	d5181040 	msr	cpacr_el1, x0
	//enable icache & MMU
	mrs x0, sctlr_el1
    610008e0:	d5381000 	mrs	x0, sctlr_el1
	orr x0, x0, #(1 << 12)
    610008e4:	b2740000 	orr	x0, x0, #0x1000
	msr sctlr_el1, x0
    610008e8:	d5181000 	msr	sctlr_el1, x0
	b   main_entry
    610008ec:	14000001 	b	610008f0 <main_entry>

00000000610008f0 <main_entry>:

main_entry:
	isb
    610008f0:	d5033fdf 	isb
#ifdef DEBUG
	bl uart0_init_simple
	bl print_el
#endif
	/* clear bss */
	bl clear_bss
    610008f4:	9400001f 	bl	61000970 <clear_bss>

	/* Processor specific initialization */
	bl	lowlevel_init
    610008f8:	94000016 	bl	61000950 <lowlevel_init>

	//123

	/* jump to main */
	bl	main
    610008fc:	940016a2 	bl	61006384 <main>

	/* hang */
	b .
    61000900:	14000000 	b	61000900 <main_entry+0x10>
    61000904:	00000000 	udf	#0
    61000908:	000000ff 	udf	#255
    6100090c:	00000000 	udf	#0
    61000910:	0000000f 	udf	#15
    61000914:	00000000 	udf	#0
    61000918:	00000003 	udf	#3
    6100091c:	00000000 	udf	#0
    61000920:	00000001 	udf	#1
    61000924:	00000000 	udf	#0
    61000928:	61040000 	.inst	0x61040000 ; undefined
    6100092c:	00000000 	udf	#0
    61000930:	02faf080 	.inst	0x02faf080 ; undefined
    61000934:	00000000 	udf	#0
    61000938:	00000400 	udf	#1024
	...
    61000948:	000001c5 	udf	#453
    6100094c:	00000000 	udf	#0

0000000061000950 <lowlevel_init>:
#include <linkage.h>
#include <macro.h>

WEAK(lowlevel_init)
	/* Save LR */
	stp	x29, x30, [sp, #-16]!
    61000950:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!

	// do cpu lowlevel init here
	bl _premain_init
    61000954:	94000986 	bl	61002f6c <_premain_init>

	/* Restore LR */
	ldp	x29, x30, [sp],#16
    61000958:	a8c17bfd 	ldp	x29, x30, [sp], #16

	ret
    6100095c:	d65f03c0 	ret

0000000061000960 <clear_mem>:

/* clean mem using zero
*/
.globl clear_mem
clear_mem:
	str  xzr, [x0], #8
    61000960:	f800841f 	str	xzr, [x0], #8
	subs x1,  x1,   #8
    61000964:	f1002021 	subs	x1, x1, #0x8
	b.gt clear_mem
    61000968:	54ffffcc 	b.gt	61000960 <clear_mem>
	ret
    6100096c:	d65f03c0 	ret

0000000061000970 <clear_bss>:

/* clear bss*/
.globl clear_bss
clear_bss:
	/* Save LR */
	mov x25, lr
    61000970:	aa1e03f9 	mov	x25, x30

	ldr	x0, =_bss_start
    61000974:	580000e0 	ldr	x0, 61000990 <clear_bss+0x20>
	ldr	x1, =_bss_end
    61000978:	58000101 	ldr	x1, 61000998 <clear_bss+0x28>
	sub	x1, x1, x0
    6100097c:	cb000021 	sub	x1, x1, x0
	bl 	clear_mem
    61000980:	97fffff8 	bl	61000960 <clear_mem>

	/* Restore LR and return */
	mov lr, x25
    61000984:	aa1903fe 	mov	x30, x25
	ret
    61000988:	d65f03c0 	ret
    6100098c:	00000000 	udf	#0
    61000990:	61007000 	.inst	0x61007000 ; undefined
    61000994:	00000000 	udf	#0
    61000998:	61008000 	.inst	0x61008000 ; undefined
	...

0000000061001000 <vectors>:
.globl	vectors
vectors:
	/* Current EL Synchronous exception with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001000:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001004:	940000ff 	bl	61001400 <_exception_entry>
	bl	do_bad_sync
    61001008:	94000785 	bl	61002e1c <do_bad_sync>
	b	exception_exit
    6100100c:	14000122 	b	61001494 <exception_exit>
    61001010:	d503201f 	nop
    61001014:	d503201f 	nop
    61001018:	d503201f 	nop
    6100101c:	d503201f 	nop
    61001020:	d503201f 	nop
    61001024:	d503201f 	nop
    61001028:	d503201f 	nop
    6100102c:	d503201f 	nop
    61001030:	d503201f 	nop
    61001034:	d503201f 	nop
    61001038:	d503201f 	nop
    6100103c:	d503201f 	nop
    61001040:	d503201f 	nop
    61001044:	d503201f 	nop
    61001048:	d503201f 	nop
    6100104c:	d503201f 	nop
    61001050:	d503201f 	nop
    61001054:	d503201f 	nop
    61001058:	d503201f 	nop
    6100105c:	d503201f 	nop
    61001060:	d503201f 	nop
    61001064:	d503201f 	nop
    61001068:	d503201f 	nop
    6100106c:	d503201f 	nop
    61001070:	d503201f 	nop
    61001074:	d503201f 	nop
    61001078:	d503201f 	nop
    6100107c:	d503201f 	nop

	/* Current EL irq exception with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001080:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001084:	940000df 	bl	61001400 <_exception_entry>
	bl	do_bad_irq
    61001088:	9400076d 	bl	61002e3c <do_bad_irq>
	b	exception_exit
    6100108c:	14000102 	b	61001494 <exception_exit>
    61001090:	d503201f 	nop
    61001094:	d503201f 	nop
    61001098:	d503201f 	nop
    6100109c:	d503201f 	nop
    610010a0:	d503201f 	nop
    610010a4:	d503201f 	nop
    610010a8:	d503201f 	nop
    610010ac:	d503201f 	nop
    610010b0:	d503201f 	nop
    610010b4:	d503201f 	nop
    610010b8:	d503201f 	nop
    610010bc:	d503201f 	nop
    610010c0:	d503201f 	nop
    610010c4:	d503201f 	nop
    610010c8:	d503201f 	nop
    610010cc:	d503201f 	nop
    610010d0:	d503201f 	nop
    610010d4:	d503201f 	nop
    610010d8:	d503201f 	nop
    610010dc:	d503201f 	nop
    610010e0:	d503201f 	nop
    610010e4:	d503201f 	nop
    610010e8:	d503201f 	nop
    610010ec:	d503201f 	nop
    610010f0:	d503201f 	nop
    610010f4:	d503201f 	nop
    610010f8:	d503201f 	nop
    610010fc:	d503201f 	nop

	/* Current EL fiq exception with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001100:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001104:	940000bf 	bl	61001400 <_exception_entry>
	bl	do_bad_fiq
    61001108:	94000755 	bl	61002e5c <do_bad_fiq>
	b	exception_exit
    6100110c:	140000e2 	b	61001494 <exception_exit>
    61001110:	d503201f 	nop
    61001114:	d503201f 	nop
    61001118:	d503201f 	nop
    6100111c:	d503201f 	nop
    61001120:	d503201f 	nop
    61001124:	d503201f 	nop
    61001128:	d503201f 	nop
    6100112c:	d503201f 	nop
    61001130:	d503201f 	nop
    61001134:	d503201f 	nop
    61001138:	d503201f 	nop
    6100113c:	d503201f 	nop
    61001140:	d503201f 	nop
    61001144:	d503201f 	nop
    61001148:	d503201f 	nop
    6100114c:	d503201f 	nop
    61001150:	d503201f 	nop
    61001154:	d503201f 	nop
    61001158:	d503201f 	nop
    6100115c:	d503201f 	nop
    61001160:	d503201f 	nop
    61001164:	d503201f 	nop
    61001168:	d503201f 	nop
    6100116c:	d503201f 	nop
    61001170:	d503201f 	nop
    61001174:	d503201f 	nop
    61001178:	d503201f 	nop
    6100117c:	d503201f 	nop

	/* Current EL Error with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001180:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001184:	9400009f 	bl	61001400 <_exception_entry>
	bl	do_bad_error
    61001188:	9400073d 	bl	61002e7c <do_bad_error>
	b	exception_exit
    6100118c:	140000c2 	b	61001494 <exception_exit>
    61001190:	d503201f 	nop
    61001194:	d503201f 	nop
    61001198:	d503201f 	nop
    6100119c:	d503201f 	nop
    610011a0:	d503201f 	nop
    610011a4:	d503201f 	nop
    610011a8:	d503201f 	nop
    610011ac:	d503201f 	nop
    610011b0:	d503201f 	nop
    610011b4:	d503201f 	nop
    610011b8:	d503201f 	nop
    610011bc:	d503201f 	nop
    610011c0:	d503201f 	nop
    610011c4:	d503201f 	nop
    610011c8:	d503201f 	nop
    610011cc:	d503201f 	nop
    610011d0:	d503201f 	nop
    610011d4:	d503201f 	nop
    610011d8:	d503201f 	nop
    610011dc:	d503201f 	nop
    610011e0:	d503201f 	nop
    610011e4:	d503201f 	nop
    610011e8:	d503201f 	nop
    610011ec:	d503201f 	nop
    610011f0:	d503201f 	nop
    610011f4:	d503201f 	nop
    610011f8:	d503201f 	nop
    610011fc:	d503201f 	nop

	/* Current EL (SP_ELx) Synchronous Handler */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001200:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001204:	9400007f 	bl	61001400 <_exception_entry>
	bl	do_sync_handle
    61001208:	94000725 	bl	61002e9c <do_sync_handle>
	b	exception_exit
    6100120c:	140000a2 	b	61001494 <exception_exit>
    61001210:	d503201f 	nop
    61001214:	d503201f 	nop
    61001218:	d503201f 	nop
    6100121c:	d503201f 	nop
    61001220:	d503201f 	nop
    61001224:	d503201f 	nop
    61001228:	d503201f 	nop
    6100122c:	d503201f 	nop
    61001230:	d503201f 	nop
    61001234:	d503201f 	nop
    61001238:	d503201f 	nop
    6100123c:	d503201f 	nop
    61001240:	d503201f 	nop
    61001244:	d503201f 	nop
    61001248:	d503201f 	nop
    6100124c:	d503201f 	nop
    61001250:	d503201f 	nop
    61001254:	d503201f 	nop
    61001258:	d503201f 	nop
    6100125c:	d503201f 	nop
    61001260:	d503201f 	nop
    61001264:	d503201f 	nop
    61001268:	d503201f 	nop
    6100126c:	d503201f 	nop
    61001270:	d503201f 	nop
    61001274:	d503201f 	nop
    61001278:	d503201f 	nop
    6100127c:	d503201f 	nop

	/* Current EL (SP_ELx) irq Handler */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001280:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001284:	9400005f 	bl	61001400 <_exception_entry>
	bl	do_irq_handle
    61001288:	94000329 	bl	61001f2c <do_irq_handle>
	b	exception_exit
    6100128c:	14000082 	b	61001494 <exception_exit>
    61001290:	d503201f 	nop
    61001294:	d503201f 	nop
    61001298:	d503201f 	nop
    6100129c:	d503201f 	nop
    610012a0:	d503201f 	nop
    610012a4:	d503201f 	nop
    610012a8:	d503201f 	nop
    610012ac:	d503201f 	nop
    610012b0:	d503201f 	nop
    610012b4:	d503201f 	nop
    610012b8:	d503201f 	nop
    610012bc:	d503201f 	nop
    610012c0:	d503201f 	nop
    610012c4:	d503201f 	nop
    610012c8:	d503201f 	nop
    610012cc:	d503201f 	nop
    610012d0:	d503201f 	nop
    610012d4:	d503201f 	nop
    610012d8:	d503201f 	nop
    610012dc:	d503201f 	nop
    610012e0:	d503201f 	nop
    610012e4:	d503201f 	nop
    610012e8:	d503201f 	nop
    610012ec:	d503201f 	nop
    610012f0:	d503201f 	nop
    610012f4:	d503201f 	nop
    610012f8:	d503201f 	nop
    610012fc:	d503201f 	nop

	 /* Current EL (SP_ELx) FIQ Handler */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001300:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001304:	9400003f 	bl	61001400 <_exception_entry>
	bl	do_fiq_handle
    61001308:	94000357 	bl	61002064 <do_fiq_handle>
	b	exception_exit
    6100130c:	14000062 	b	61001494 <exception_exit>
    61001310:	d503201f 	nop
    61001314:	d503201f 	nop
    61001318:	d503201f 	nop
    6100131c:	d503201f 	nop
    61001320:	d503201f 	nop
    61001324:	d503201f 	nop
    61001328:	d503201f 	nop
    6100132c:	d503201f 	nop
    61001330:	d503201f 	nop
    61001334:	d503201f 	nop
    61001338:	d503201f 	nop
    6100133c:	d503201f 	nop
    61001340:	d503201f 	nop
    61001344:	d503201f 	nop
    61001348:	d503201f 	nop
    6100134c:	d503201f 	nop
    61001350:	d503201f 	nop
    61001354:	d503201f 	nop
    61001358:	d503201f 	nop
    6100135c:	d503201f 	nop
    61001360:	d503201f 	nop
    61001364:	d503201f 	nop
    61001368:	d503201f 	nop
    6100136c:	d503201f 	nop
    61001370:	d503201f 	nop
    61001374:	d503201f 	nop
    61001378:	d503201f 	nop
    6100137c:	d503201f 	nop

	/* Current EL (SP_ELx) Error Handler */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61001380:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61001384:	9400001f 	bl	61001400 <_exception_entry>
	bl	do_error
    61001388:	940006cd 	bl	61002ebc <do_error>
	b	exception_exit
    6100138c:	14000042 	b	61001494 <exception_exit>
    61001390:	d503201f 	nop
    61001394:	d503201f 	nop
    61001398:	d503201f 	nop
    6100139c:	d503201f 	nop
    610013a0:	d503201f 	nop
    610013a4:	d503201f 	nop
    610013a8:	d503201f 	nop
    610013ac:	d503201f 	nop
    610013b0:	d503201f 	nop
    610013b4:	d503201f 	nop
    610013b8:	d503201f 	nop
    610013bc:	d503201f 	nop
    610013c0:	d503201f 	nop
    610013c4:	d503201f 	nop
    610013c8:	d503201f 	nop
    610013cc:	d503201f 	nop
    610013d0:	d503201f 	nop
    610013d4:	d503201f 	nop
    610013d8:	d503201f 	nop
    610013dc:	d503201f 	nop
    610013e0:	d503201f 	nop
    610013e4:	d503201f 	nop
    610013e8:	d503201f 	nop
    610013ec:	d503201f 	nop
    610013f0:	d503201f 	nop
    610013f4:	d503201f 	nop
    610013f8:	d503201f 	nop
    610013fc:	d503201f 	nop

0000000061001400 <_exception_entry>:
	.align 10

/* save x0~x30 to sp */
/* return: x0=sp, x1=esr_eln,x2=elr_eln,(n=1,2,3)*/
_exception_entry:
	stp	x27, x28, [sp, #-16]!
    61001400:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
	stp	x25, x26, [sp, #-16]!
    61001404:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
	stp	x23, x24, [sp, #-16]!
    61001408:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
	stp	x21, x22, [sp, #-16]!
    6100140c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
	stp	x19, x20, [sp, #-16]!
    61001410:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
	stp	x17, x18, [sp, #-16]!
    61001414:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
	stp	x15, x16, [sp, #-16]!
    61001418:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
	stp	x13, x14, [sp, #-16]!
    6100141c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
	stp	x11, x12, [sp, #-16]!
    61001420:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
	stp	x9, x10,  [sp, #-16]!
    61001424:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
	stp	x7, x8,   [sp, #-16]!
    61001428:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
	stp	x5, x6,   [sp, #-16]!
    6100142c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
	stp	x3, x4,   [sp, #-16]!
    61001430:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
	stp	x1, x2,   [sp, #-16]!
    61001434:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
	b	_save_el_regs			/* jump to the second part */
    61001438:	14000001 	b	6100143c <_save_el_regs>

000000006100143c <_save_el_regs>:
/*
 * Save exception specific context: ESR and ELR,spsr for all exception levels.
 * This is the second part of the shared routine called into from all entries.
 */
_save_el_regs:
	switch_el x11, 3f, 2f, 1f
    6100143c:	d538424b 	mrs	x11, currentel
    61001440:	f100317f 	cmp	x11, #0xc
    61001444:	540000a0 	b.eq	61001458 <_save_el_regs+0x1c>  // b.none
    61001448:	f100217f 	cmp	x11, #0x8
    6100144c:	540000e0 	b.eq	61001468 <_save_el_regs+0x2c>  // b.none
    61001450:	f100117f 	cmp	x11, #0x4
    61001454:	54000120 	b.eq	61001478 <_save_el_regs+0x3c>  // b.none
3:	mrs	x1, esr_el3
    61001458:	d53e5201 	mrs	x1, esr_el3
	mrs	x2, elr_el3
    6100145c:	d53e4022 	mrs	x2, elr_el3
	mrs x3, spsr_el3
    61001460:	d53e4003 	mrs	x3, spsr_el3
	b	0f
    61001464:	14000008 	b	61001484 <_save_el_regs+0x48>
2:	mrs	x1, esr_el2
    61001468:	d53c5201 	mrs	x1, esr_el2
	mrs	x2, elr_el2
    6100146c:	d53c4022 	mrs	x2, elr_el2
	mrs x3, spsr_el2
    61001470:	d53c4003 	mrs	x3, spsr_el2
	b	0f
    61001474:	14000004 	b	61001484 <_save_el_regs+0x48>
1:	mrs	x1, esr_el1
    61001478:	d5385201 	mrs	x1, esr_el1
	mrs	x2, elr_el1
    6100147c:	d5384022 	mrs	x2, elr_el1
	mrs x3, spsr_el1
    61001480:	d5384003 	mrs	x3, spsr_el1
0:
	stp	x2, x0, [sp, #-16]!
    61001484:	a9bf03e2 	stp	x2, x0, [sp, #-16]!
	stp	x3, x1, [sp, #-16]!
    61001488:	a9bf07e3 	stp	x3, x1, [sp, #-16]!
	mov	x0, sp
    6100148c:	910003e0 	mov	x0, sp
	ret
    61001490:	d65f03c0 	ret

0000000061001494 <exception_exit>:
/*
 * Restore the exception return address, for all exception levels.
 * This is the first part of the shared routine called into from all entries.
 */
exception_exit:
	ldp	x3, x1, [sp],#16
    61001494:	a8c107e3 	ldp	x3, x1, [sp], #16
	ldp	x2, x0, [sp],#16
    61001498:	a8c103e2 	ldp	x2, x0, [sp], #16
	switch_el x11, 3f, 2f, 1f
    6100149c:	d538424b 	mrs	x11, currentel
    610014a0:	f100317f 	cmp	x11, #0xc
    610014a4:	540000a0 	b.eq	610014b8 <exception_exit+0x24>  // b.none
    610014a8:	f100217f 	cmp	x11, #0x8
    610014ac:	540000a0 	b.eq	610014c0 <exception_exit+0x2c>  // b.none
    610014b0:	f100117f 	cmp	x11, #0x4
    610014b4:	540000a0 	b.eq	610014c8 <exception_exit+0x34>  // b.none
3:	msr	elr_el3, x2
    610014b8:	d51e4022 	msr	elr_el3, x2
	b	_restore_regs
    610014bc:	14000005 	b	610014d0 <_restore_regs>
2:	msr	elr_el2, x2
    610014c0:	d51c4022 	msr	elr_el2, x2
	b	_restore_regs
    610014c4:	14000003 	b	610014d0 <_restore_regs>
1:	msr	elr_el1, x2
    610014c8:	d5184022 	msr	elr_el1, x2
	b	_restore_regs		/* jump to the second part */
    610014cc:	14000001 	b	610014d0 <_restore_regs>

00000000610014d0 <_restore_regs>:
/*
 * Restore the general purpose registers from the exception stack, then return.
 * This is the second part of the shared routine called into from all entries.
 */
_restore_regs:
	ldp	x1, x2,   [sp],#16
    610014d0:	a8c10be1 	ldp	x1, x2, [sp], #16
	ldp	x3, x4,   [sp],#16
    610014d4:	a8c113e3 	ldp	x3, x4, [sp], #16
	ldp	x5, x6,   [sp],#16
    610014d8:	a8c11be5 	ldp	x5, x6, [sp], #16
	ldp	x7, x8,   [sp],#16
    610014dc:	a8c123e7 	ldp	x7, x8, [sp], #16
	ldp	x9, x10,  [sp],#16
    610014e0:	a8c12be9 	ldp	x9, x10, [sp], #16
	ldp	x11, x12, [sp],#16
    610014e4:	a8c133eb 	ldp	x11, x12, [sp], #16
	ldp	x13, x14, [sp],#16
    610014e8:	a8c13bed 	ldp	x13, x14, [sp], #16
	ldp	x15, x16, [sp],#16
    610014ec:	a8c143ef 	ldp	x15, x16, [sp], #16
	ldp	x17, x18, [sp],#16
    610014f0:	a8c14bf1 	ldp	x17, x18, [sp], #16
	ldp	x19, x20, [sp],#16
    610014f4:	a8c153f3 	ldp	x19, x20, [sp], #16
	ldp	x21, x22, [sp],#16
    610014f8:	a8c15bf5 	ldp	x21, x22, [sp], #16
	ldp	x23, x24, [sp],#16
    610014fc:	a8c163f7 	ldp	x23, x24, [sp], #16
	ldp	x25, x26, [sp],#16
    61001500:	a8c16bf9 	ldp	x25, x26, [sp], #16
	ldp	x27, x28, [sp],#16
    61001504:	a8c173fb 	ldp	x27, x28, [sp], #16
	ldp	x29, x30, [sp],#16
    61001508:	a8c17bfd 	ldp	x29, x30, [sp], #16
	eret
    6100150c:	d69f03e0 	eret

Disassembly of section .text.__raw_writel:

0000000061001510 <__raw_writel>:
	asm volatile("strh %w0, [%1]" : : "rZ" (val), "r" (addr));
}

#define __raw_writel __raw_writel
static __always_inline void __raw_writel(u32 val, volatile void __iomem *addr)
{
    61001510:	d10043ff 	sub	sp, sp, #0x10
    61001514:	b9000fe0 	str	w0, [sp, #12]
    61001518:	f90003e1 	str	x1, [sp]
	asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
    6100151c:	b9400fe0 	ldr	w0, [sp, #12]
    61001520:	f94003e1 	ldr	x1, [sp]
    61001524:	b9000020 	str	w0, [x1]
}
    61001528:	d503201f 	nop
    6100152c:	910043ff 	add	sp, sp, #0x10
    61001530:	d65f03c0 	ret

0000000061001534 <__raw_writel>:
{
    61001534:	d10043ff 	sub	sp, sp, #0x10
    61001538:	b9000fe0 	str	w0, [sp, #12]
    6100153c:	f90003e1 	str	x1, [sp]
	asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
    61001540:	b9400fe0 	ldr	w0, [sp, #12]
    61001544:	f94003e1 	ldr	x1, [sp]
    61001548:	b9000020 	str	w0, [x1]
}
    6100154c:	d503201f 	nop
    61001550:	910043ff 	add	sp, sp, #0x10
    61001554:	d65f03c0 	ret

Disassembly of section .text.generic_timer_enable:

0000000061001558 <generic_timer_enable>:
 * @desc  : enable generic timer
 * @param {*}
 * @return {*}
 */
static int generic_timer_enable(void)
{
    61001558:	d10043ff 	sub	sp, sp, #0x10
	unsigned int v = 1;
    6100155c:	52800020 	mov	w0, #0x1                   	// #1
    61001560:	b9000fe0 	str	w0, [sp, #12]
	asm volatile(
    61001564:	b9400fe0 	ldr	w0, [sp, #12]
    61001568:	d51be220 	msr	cntp_ctl_el0, x0
		"msr cntp_ctl_el0, %x[v]"
		:
		: [v]"r"(v)
		: "memory");
	return 0;
    6100156c:	52800000 	mov	w0, #0x0                   	// #0
}
    61001570:	910043ff 	add	sp, sp, #0x10
    61001574:	d65f03c0 	ret

Disassembly of section .text.generic_timer_reset:

0000000061001578 <generic_timer_reset>:
 * @desc  : reset generic timer tval
 * @param {unsigned int} val
 * @return {*}
 */
int generic_timer_reset(unsigned int val)
{
    61001578:	d10043ff 	sub	sp, sp, #0x10
    6100157c:	b9000fe0 	str	w0, [sp, #12]
	asm volatile(
    61001580:	b9400fe0 	ldr	w0, [sp, #12]
    61001584:	d51be200 	msr	cntp_tval_el0, x0
		"msr cntp_tval_el0, %x[timer_val]"
		:
		: [timer_val] "r" (val)
		: "memory");

	return 0;
    61001588:	52800000 	mov	w0, #0x0                   	// #0
}
    6100158c:	910043ff 	add	sp, sp, #0x10
    61001590:	d65f03c0 	ret

Disassembly of section .text.generic_timer_get_freq:

0000000061001594 <generic_timer_get_freq>:

unsigned int generic_timer_get_freq(void)
{
    61001594:	d10043ff 	sub	sp, sp, #0x10
	unsigned int freq;

	asm volatile(
    61001598:	d53be000 	mrs	x0, cntfrq_el0
    6100159c:	b9000fe0 	str	w0, [sp, #12]
		"mrs %0, cntfrq_el0"
		: "=r" (freq)
		:
		: "memory");

	return freq;
    610015a0:	b9400fe0 	ldr	w0, [sp, #12]
}
    610015a4:	910043ff 	add	sp, sp, #0x10
    610015a8:	d65f03c0 	ret

Disassembly of section .text.generic_timer_init:

00000000610015ac <generic_timer_init>:


void generic_timer_init(void)
{
    610015ac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    610015b0:	910003fd 	mov	x29, sp
	generic_timer_rate = generic_timer_get_freq();
    610015b4:	97fffff8 	bl	61001594 <generic_timer_get_freq>
    610015b8:	2a0003e1 	mov	w1, w0
    610015bc:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610015c0:	913a8000 	add	x0, x0, #0xea0
    610015c4:	b9000001 	str	w1, [x0]

	// printf("cntp freq:0x%x\r\n", generic_timer_rate);
	// generic_timer_rate /= HZ;

	writel_relaxed(0x1,(void *)0xf8e05000UL);
    610015c8:	d28a0001 	mov	x1, #0x5000                	// #20480
    610015cc:	f2bf1c01 	movk	x1, #0xf8e0, lsl #16
    610015d0:	52800020 	mov	w0, #0x1                   	// #1
    610015d4:	97ffffcf 	bl	61001510 <__raw_writel>

	generic_timer_enable();
    610015d8:	97ffffe0 	bl	61001558 <generic_timer_enable>
	generic_timer_reset(generic_timer_rate);
    610015dc:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610015e0:	913a8000 	add	x0, x0, #0xea0
    610015e4:	b9400000 	ldr	w0, [x0]
    610015e8:	97ffffe4 	bl	61001578 <generic_timer_reset>

	// enable the irq until call register_irq to install irq handler
	//gicv3_enable_irq(GENERIC_TIMER_IRQ);
}
    610015ec:	d503201f 	nop
    610015f0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    610015f4:	d65f03c0 	ret

Disassembly of section .text.gic_write_eoir:

00000000610015f8 <gic_write_eoir>:
 * These system registers are 32 bits, but we make sure that the compiler
 * sets the GP register's most significant bits to 0 with an explicit cast.
 */

static inline void gic_write_eoir(u32 irq)
{
    610015f8:	d10083ff 	sub	sp, sp, #0x20
    610015fc:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(irq, SYS_ICC_EOIR1_EL1);
    61001600:	b9400fe0 	ldr	w0, [sp, #12]
    61001604:	f9000fe0 	str	x0, [sp, #24]
    61001608:	f9400fe0 	ldr	x0, [sp, #24]
    6100160c:	d518cc20 	msr	s3_0_c12_c12_1, x0
	isb();
    61001610:	d5033fdf 	isb
}
    61001614:	d503201f 	nop
    61001618:	910083ff 	add	sp, sp, #0x20
    6100161c:	d65f03c0 	ret

Disassembly of section .text.gic_read_iar_common:

0000000061001620 <gic_read_iar_common>:
	write_sysreg_s(irq, SYS_ICC_DIR_EL1);
	isb();
}

static inline u64 gic_read_iar_common(void)
{
    61001620:	d10043ff 	sub	sp, sp, #0x10
    61001624:	d538cc00 	mrs	x0, s3_0_c12_c12_0
	u64 irqstat;

	irqstat = read_sysreg_s(SYS_ICC_IAR1_EL1);
    61001628:	f90007e0 	str	x0, [sp, #8]
    6100162c:	f94007e0 	ldr	x0, [sp, #8]
    61001630:	f90003e0 	str	x0, [sp]

	dsb(sy);
    61001634:	d5033f9f 	dsb	sy

	return irqstat;
    61001638:	f94003e0 	ldr	x0, [sp]
}
    6100163c:	910043ff 	add	sp, sp, #0x10
    61001640:	d65f03c0 	ret

Disassembly of section .text.gic_write_ctlr:

0000000061001644 <gic_write_ctlr>:

	return irqstat;
}

static inline void gic_write_ctlr(u32 val)
{
    61001644:	d10083ff 	sub	sp, sp, #0x20
    61001648:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_CTLR_EL1);
    6100164c:	b9400fe0 	ldr	w0, [sp, #12]
    61001650:	f9000fe0 	str	x0, [sp, #24]
    61001654:	f9400fe0 	ldr	x0, [sp, #24]
    61001658:	d518cc80 	msr	s3_0_c12_c12_4, x0
	isb();
    6100165c:	d5033fdf 	isb
}
    61001660:	d503201f 	nop
    61001664:	910083ff 	add	sp, sp, #0x20
    61001668:	d65f03c0 	ret

Disassembly of section .text.gic_write_grpen1:

000000006100166c <gic_write_grpen1>:
{
	return read_sysreg_s(SYS_ICC_CTLR_EL1);
}

static inline void gic_write_grpen1(u32 val)
{
    6100166c:	d10083ff 	sub	sp, sp, #0x20
    61001670:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_IGRPEN1_EL1);
    61001674:	b9400fe0 	ldr	w0, [sp, #12]
    61001678:	f9000fe0 	str	x0, [sp, #24]
    6100167c:	f9400fe0 	ldr	x0, [sp, #24]
    61001680:	d518cce0 	msr	s3_0_c12_c12_7, x0
	isb();
    61001684:	d5033fdf 	isb
}
    61001688:	d503201f 	nop
    6100168c:	910083ff 	add	sp, sp, #0x20
    61001690:	d65f03c0 	ret

Disassembly of section .text.gic_read_sre:

0000000061001694 <gic_read_sre>:
{
	write_sysreg_s(val, SYS_ICC_SGI1R_EL1);
}

static inline u32 gic_read_sre(void)
{
    61001694:	d10043ff 	sub	sp, sp, #0x10
    61001698:	d538cca0 	mrs	x0, icc_sre_el1
	return read_sysreg_s(SYS_ICC_SRE_EL1);
    6100169c:	f90007e0 	str	x0, [sp, #8]
    610016a0:	f94007e0 	ldr	x0, [sp, #8]
}
    610016a4:	910043ff 	add	sp, sp, #0x10
    610016a8:	d65f03c0 	ret

Disassembly of section .text.gic_write_sre:

00000000610016ac <gic_write_sre>:

static inline void gic_write_sre(u32 val)
{
    610016ac:	d10083ff 	sub	sp, sp, #0x20
    610016b0:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_SRE_EL1);
    610016b4:	b9400fe0 	ldr	w0, [sp, #12]
    610016b8:	f9000fe0 	str	x0, [sp, #24]
    610016bc:	f9400fe0 	ldr	x0, [sp, #24]
    610016c0:	d518cca0 	msr	icc_sre_el1, x0
	isb();
    610016c4:	d5033fdf 	isb
}
    610016c8:	d503201f 	nop
    610016cc:	910083ff 	add	sp, sp, #0x20
    610016d0:	d65f03c0 	ret

Disassembly of section .text.gic_write_bpr1:

00000000610016d4 <gic_write_bpr1>:

static inline void gic_write_bpr1(u32 val)
{
    610016d4:	d10083ff 	sub	sp, sp, #0x20
    610016d8:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_BPR1_EL1);
    610016dc:	b9400fe0 	ldr	w0, [sp, #12]
    610016e0:	f9000fe0 	str	x0, [sp, #24]
    610016e4:	f9400fe0 	ldr	x0, [sp, #24]
    610016e8:	d518cc60 	msr	s3_0_c12_c12_3, x0
}
    610016ec:	d503201f 	nop
    610016f0:	910083ff 	add	sp, sp, #0x20
    610016f4:	d65f03c0 	ret

Disassembly of section .text.__raw_writeq:

00000000610016f8 <__raw_writeq>:

#define __raw_writeq __raw_writeq
static inline void __raw_writeq(u64 val, volatile void __iomem *addr)
{
    610016f8:	d10043ff 	sub	sp, sp, #0x10
    610016fc:	f90007e0 	str	x0, [sp, #8]
    61001700:	f90003e1 	str	x1, [sp]
	asm volatile("str %x0, [%1]" : : "rZ" (val), "r" (addr));
    61001704:	f94007e0 	ldr	x0, [sp, #8]
    61001708:	f94003e1 	ldr	x1, [sp]
    6100170c:	f9000020 	str	x0, [x1]
}
    61001710:	d503201f 	nop
    61001714:	910043ff 	add	sp, sp, #0x10
    61001718:	d65f03c0 	ret

Disassembly of section .text.__raw_readl:

000000006100171c <__raw_readl>:
	return val;
}

#define __raw_readl __raw_readl
static __always_inline u32 __raw_readl(const volatile void __iomem *addr)
{
    6100171c:	d10083ff 	sub	sp, sp, #0x20
    61001720:	f90007e0 	str	x0, [sp, #8]
	u32 val;
	asm volatile("ldr %w0, [%1]" \
    61001724:	f94007e0 	ldr	x0, [sp, #8]
    61001728:	b9400000 	ldr	w0, [x0]
    6100172c:	b9001fe0 	str	w0, [sp, #28]
		     : "=r" (val) : "r" (addr));
	return val;
    61001730:	b9401fe0 	ldr	w0, [sp, #28]
}
    61001734:	910083ff 	add	sp, sp, #0x20
    61001738:	d65f03c0 	ret

Disassembly of section .text.cpu_relax:

000000006100173c <cpu_relax>:

#ifndef __ASSEMBLY__

static inline void cpu_relax(void)
{
	asm volatile("yield" ::: "memory");
    6100173c:	d503203f 	yield
}
    61001740:	d503201f 	nop
    61001744:	d65f03c0 	ret

Disassembly of section .text.gic_do_wait_for_rwp:

0000000061001748 <gic_do_wait_for_rwp>:
	request_interrupt(int_id, handler, irq_handler_list);
}


static void gic_do_wait_for_rwp(void __iomem *rwp_addr)
{
    61001748:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    6100174c:	910003fd 	mov	x29, sp
    61001750:	f9000fe0 	str	x0, [sp, #24]
	u32_t count = 1000000;	/* 1s! */
    61001754:	52884800 	mov	w0, #0x4240                	// #16960
    61001758:	72a001e0 	movk	w0, #0xf, lsl #16
    6100175c:	b9003fe0 	str	w0, [sp, #60]

	while (readl(rwp_addr) & GICD_CTLR_RWP) {
    61001760:	1400000a 	b	61001788 <gic_do_wait_for_rwp+0x40>
		count--;
    61001764:	b9403fe0 	ldr	w0, [sp, #60]
    61001768:	51000400 	sub	w0, w0, #0x1
    6100176c:	b9003fe0 	str	w0, [sp, #60]
		if (!count) {
    61001770:	b9403fe0 	ldr	w0, [sp, #60]
    61001774:	7100001f 	cmp	w0, #0x0
    61001778:	54000240 	b.eq	610017c0 <gic_do_wait_for_rwp+0x78>  // b.none
			gic_print("RWP timeout, gone fishing\n");
			return;
		}
		cpu_relax();
    6100177c:	97fffff0 	bl	6100173c <cpu_relax>
		_delay_ms(1);
    61001780:	52800020 	mov	w0, #0x1                   	// #1
    61001784:	94000590 	bl	61002dc4 <_delay_ms>
	while (readl(rwp_addr) & GICD_CTLR_RWP) {
    61001788:	f9400fe0 	ldr	x0, [sp, #24]
    6100178c:	97ffffe4 	bl	6100171c <__raw_readl>
    61001790:	b9003be0 	str	w0, [sp, #56]
    61001794:	b9403be0 	ldr	w0, [sp, #56]
    61001798:	b90037e0 	str	w0, [sp, #52]
    6100179c:	d50331bf 	dmb	oshld
    610017a0:	b94037e0 	ldr	w0, [sp, #52]
    610017a4:	ca000000 	eor	x0, x0, x0
    610017a8:	b5000000 	cbnz	x0, 610017a8 <gic_do_wait_for_rwp+0x60>
    610017ac:	f90017e0 	str	x0, [sp, #40]
    610017b0:	b94037e0 	ldr	w0, [sp, #52]
    610017b4:	7100001f 	cmp	w0, #0x0
    610017b8:	54fffd6b 	b.lt	61001764 <gic_do_wait_for_rwp+0x1c>  // b.tstop
    610017bc:	14000002 	b	610017c4 <gic_do_wait_for_rwp+0x7c>
			return;
    610017c0:	d503201f 	nop
	}
}
    610017c4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    610017c8:	d65f03c0 	ret

Disassembly of section .text.gic_dist_wait:

00000000610017cc <gic_dist_wait>:

static void gic_dist_wait(void)
{
    610017cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    610017d0:	910003fd 	mov	x29, sp
	gic_do_wait_for_rwp(GICD_BASE);
    610017d4:	d2bba000 	mov	x0, #0xdd000000            	// #3707764736
    610017d8:	97ffffdc 	bl	61001748 <gic_do_wait_for_rwp>
}
    610017dc:	d503201f 	nop
    610017e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    610017e4:	d65f03c0 	ret

Disassembly of section .text.gic_redist_wait:

00000000610017e8 <gic_redist_wait>:

static void gic_redist_wait(void)
{
    610017e8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    610017ec:	910003fd 	mov	x29, sp
	gic_do_wait_for_rwp(GICR_RD_BASE);
    610017f0:	d2bba080 	mov	x0, #0xdd040000            	// #3708026880
    610017f4:	97ffffd5 	bl	61001748 <gic_do_wait_for_rwp>
}
    610017f8:	d503201f 	nop
    610017fc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61001800:	d65f03c0 	ret

Disassembly of section .text.gic_mpidr_to_affinity:

0000000061001804 <gic_mpidr_to_affinity>:

static u64 gic_mpidr_to_affinity(unsigned long mpidr)
{
    61001804:	d10083ff 	sub	sp, sp, #0x20
    61001808:	f90007e0 	str	x0, [sp, #8]
	u64 aff;
	aff = ((u64)MPIDR_AFFINITY_LEVEL(mpidr, 3) << 32 |
    6100180c:	f94007e1 	ldr	x1, [sp, #8]
    61001810:	b2405fe0 	mov	x0, #0xffffff              	// #16777215
    61001814:	f2c01fe0 	movk	x0, #0xff, lsl #32
    61001818:	8a000020 	and	x0, x1, x0
    6100181c:	f9000fe0 	str	x0, [sp, #24]
		MPIDR_AFFINITY_LEVEL(mpidr, 2) << 16 |
		MPIDR_AFFINITY_LEVEL(mpidr, 1) << 8  |
		MPIDR_AFFINITY_LEVEL(mpidr, 0));

	return aff;
    61001820:	f9400fe0 	ldr	x0, [sp, #24]
}
    61001824:	910083ff 	add	sp, sp, #0x20
    61001828:	d65f03c0 	ret

Disassembly of section .text.gicv3_dist_init:

000000006100182c <gicv3_dist_init>:

void gicv3_dist_init(u32 int_group)
{
    6100182c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61001830:	910003fd 	mov	x29, sp
    61001834:	b9001fe0 	str	w0, [sp, #28]
	u32 spi_itline_nums, cpu_nums, gic_irqs;
	u32 gicd_typer;
	u64 affinity;

	/* Disable the distributor */
	writel_relaxed(0, GICD_CTLR);
    61001838:	d2bba001 	mov	x1, #0xdd000000            	// #3707764736
    6100183c:	52800000 	mov	w0, #0x0                   	// #0
    61001840:	97ffff3d 	bl	61001534 <__raw_writel>
	gic_dist_wait();
    61001844:	97ffffe2 	bl	610017cc <gic_dist_wait>

	gicd_typer = readl_relaxed(GICD_TYPER);
    61001848:	d2800080 	mov	x0, #0x4                   	// #4
    6100184c:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001850:	97ffffb3 	bl	6100171c <__raw_readl>
    61001854:	b9003be0 	str	w0, [sp, #56]
    61001858:	b9403be0 	ldr	w0, [sp, #56]
    6100185c:	b90037e0 	str	w0, [sp, #52]
	spi_itline_nums = gicd_typer & GICD_ITLines_Numbers;
    61001860:	b94037e0 	ldr	w0, [sp, #52]
    61001864:	12001000 	and	w0, w0, #0x1f
    61001868:	b90033e0 	str	w0, [sp, #48]
	gic_irqs = min((spi_itline_nums + 1) * 32, 1020);
    6100186c:	b94033e0 	ldr	w0, [sp, #48]
    61001870:	11000400 	add	w0, w0, #0x1
    61001874:	531b6800 	lsl	w0, w0, #5
    61001878:	52807f81 	mov	w1, #0x3fc                 	// #1020
    6100187c:	710ff01f 	cmp	w0, #0x3fc
    61001880:	1a819000 	csel	w0, w0, w1, ls  // ls = plast
    61001884:	b9002fe0 	str	w0, [sp, #44]
	gic_print("support irq amount: %d\n", gic_irqs);

	/*
	 * Set all global interrupts to be level triggered, active low.
	 */
	for (i = 32; i < gic_irqs; i += 16)
    61001888:	52800400 	mov	w0, #0x20                  	// #32
    6100188c:	b9003fe0 	str	w0, [sp, #60]
    61001890:	1400000d 	b	610018c4 <gicv3_dist_init+0x98>
		writel_relaxed(GICD_INT_ACTLOW_LVLTRIG, GICD_ICFGR + i / 4);
    61001894:	b9403fe0 	ldr	w0, [sp, #60]
    61001898:	53027c00 	lsr	w0, w0, #2
    6100189c:	2a0003e1 	mov	w1, w0
    610018a0:	d2818000 	mov	x0, #0xc00                 	// #3072
    610018a4:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610018a8:	8b000020 	add	x0, x1, x0
    610018ac:	aa0003e1 	mov	x1, x0
    610018b0:	52800000 	mov	w0, #0x0                   	// #0
    610018b4:	97ffff20 	bl	61001534 <__raw_writel>
	for (i = 32; i < gic_irqs; i += 16)
    610018b8:	b9403fe0 	ldr	w0, [sp, #60]
    610018bc:	11004000 	add	w0, w0, #0x10
    610018c0:	b9003fe0 	str	w0, [sp, #60]
    610018c4:	b9403fe1 	ldr	w1, [sp, #60]
    610018c8:	b9402fe0 	ldr	w0, [sp, #44]
    610018cc:	6b00003f 	cmp	w1, w0
    610018d0:	54fffe23 	b.cc	61001894 <gicv3_dist_init+0x68>  // b.lo, b.ul, b.last

	/*
	 * Set priority on all global interrupts.
	 */
	for (i = 32; i < gic_irqs; i += 4)
    610018d4:	52800400 	mov	w0, #0x20                  	// #32
    610018d8:	b9003fe0 	str	w0, [sp, #60]
    610018dc:	1400000c 	b	6100190c <gicv3_dist_init+0xe0>
		writel_relaxed(GICD_INT_DEF_PRI_X4, GICD_IPRIORITYR + i);
    610018e0:	b9403fe1 	ldr	w1, [sp, #60]
    610018e4:	d2808000 	mov	x0, #0x400                 	// #1024
    610018e8:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610018ec:	8b000020 	add	x0, x1, x0
    610018f0:	aa0003e1 	mov	x1, x0
    610018f4:	52941400 	mov	w0, #0xa0a0                	// #41120
    610018f8:	72b41400 	movk	w0, #0xa0a0, lsl #16
    610018fc:	97ffff0e 	bl	61001534 <__raw_writel>
	for (i = 32; i < gic_irqs; i += 4)
    61001900:	b9403fe0 	ldr	w0, [sp, #60]
    61001904:	11001000 	add	w0, w0, #0x4
    61001908:	b9003fe0 	str	w0, [sp, #60]
    6100190c:	b9403fe1 	ldr	w1, [sp, #60]
    61001910:	b9402fe0 	ldr	w0, [sp, #44]
    61001914:	6b00003f 	cmp	w1, w0
    61001918:	54fffe43 	b.cc	610018e0 <gicv3_dist_init+0xb4>  // b.lo, b.ul, b.last

	/*
	 * Deactivate and disable all SPIs. Leave the PPI and SGIs
	 * alone as they are in the redistributor registers on GICv3.
	 */
	for (i = 32; i < gic_irqs; i += 32) {
    6100191c:	52800400 	mov	w0, #0x20                  	// #32
    61001920:	b9003fe0 	str	w0, [sp, #60]
    61001924:	14000016 	b	6100197c <gicv3_dist_init+0x150>
		writel_relaxed(GICD_INT_EN_CLR_X32, GICD_ACTIVE_CLEAR + i / 8);
    61001928:	b9403fe0 	ldr	w0, [sp, #60]
    6100192c:	53037c00 	lsr	w0, w0, #3
    61001930:	2a0003e1 	mov	w1, w0
    61001934:	d2807000 	mov	x0, #0x380                 	// #896
    61001938:	f2bba000 	movk	x0, #0xdd00, lsl #16
    6100193c:	8b000020 	add	x0, x1, x0
    61001940:	aa0003e1 	mov	x1, x0
    61001944:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001948:	97fffefb 	bl	61001534 <__raw_writel>
		writel_relaxed(GICD_INT_EN_CLR_X32, GICD_ICENABLER + i / 8);
    6100194c:	b9403fe0 	ldr	w0, [sp, #60]
    61001950:	53037c00 	lsr	w0, w0, #3
    61001954:	2a0003e1 	mov	w1, w0
    61001958:	d2803000 	mov	x0, #0x180                 	// #384
    6100195c:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001960:	8b000020 	add	x0, x1, x0
    61001964:	aa0003e1 	mov	x1, x0
    61001968:	12800000 	mov	w0, #0xffffffff            	// #-1
    6100196c:	97fffef2 	bl	61001534 <__raw_writel>
	for (i = 32; i < gic_irqs; i += 32) {
    61001970:	b9403fe0 	ldr	w0, [sp, #60]
    61001974:	11008000 	add	w0, w0, #0x20
    61001978:	b9003fe0 	str	w0, [sp, #60]
    6100197c:	b9403fe1 	ldr	w1, [sp, #60]
    61001980:	b9402fe0 	ldr	w0, [sp, #44]
    61001984:	6b00003f 	cmp	w1, w0
    61001988:	54fffd03 	b.cc	61001928 <gicv3_dist_init+0xfc>  // b.lo, b.ul, b.last
	}
	gic_dist_wait();
    6100198c:	97ffff90 	bl	610017cc <gic_dist_wait>
	/* there setting depend the running secure state */
	if (int_group == GROUP_1_NONSECURE) {
    61001990:	b9401fe0 	ldr	w0, [sp, #28]
    61001994:	7100081f 	cmp	w0, #0x2
    61001998:	540003c1 	b.ne	61001a10 <gicv3_dist_init+0x1e4>  // b.any
		 /* group 1 non-secure*/
		 /* gicd.ctrl.ds = 1 */
		for (i = 32; i < gic_irqs; i += 32) {
    6100199c:	52800400 	mov	w0, #0x20                  	// #32
    610019a0:	b9003fe0 	str	w0, [sp, #60]
    610019a4:	14000016 	b	610019fc <gicv3_dist_init+0x1d0>
			writel_relaxed(~0x0, GICD_IGROUPR + i / 8);
    610019a8:	b9403fe0 	ldr	w0, [sp, #60]
    610019ac:	53037c00 	lsr	w0, w0, #3
    610019b0:	2a0003e1 	mov	w1, w0
    610019b4:	d2801000 	mov	x0, #0x80                  	// #128
    610019b8:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610019bc:	8b000020 	add	x0, x1, x0
    610019c0:	aa0003e1 	mov	x1, x0
    610019c4:	12800000 	mov	w0, #0xffffffff            	// #-1
    610019c8:	97fffedb 	bl	61001534 <__raw_writel>
			writel_relaxed(0, GICD_IGRPMODR + i / 8);
    610019cc:	b9403fe0 	ldr	w0, [sp, #60]
    610019d0:	53037c00 	lsr	w0, w0, #3
    610019d4:	2a0003e1 	mov	w1, w0
    610019d8:	d281a000 	mov	x0, #0xd00                 	// #3328
    610019dc:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610019e0:	8b000020 	add	x0, x1, x0
    610019e4:	aa0003e1 	mov	x1, x0
    610019e8:	52800000 	mov	w0, #0x0                   	// #0
    610019ec:	97fffed2 	bl	61001534 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32) {
    610019f0:	b9403fe0 	ldr	w0, [sp, #60]
    610019f4:	11008000 	add	w0, w0, #0x20
    610019f8:	b9003fe0 	str	w0, [sp, #60]
    610019fc:	b9403fe1 	ldr	w1, [sp, #60]
    61001a00:	b9402fe0 	ldr	w0, [sp, #44]
    61001a04:	6b00003f 	cmp	w1, w0
    61001a08:	54fffd03 	b.cc	610019a8 <gicv3_dist_init+0x17c>  // b.lo, b.ul, b.last
    61001a0c:	1400003d 	b	61001b00 <gicv3_dist_init+0x2d4>
		}
	} else if (int_group == GROUP_1_SECURE) {
    61001a10:	b9401fe0 	ldr	w0, [sp, #28]
    61001a14:	7100041f 	cmp	w0, #0x1
    61001a18:	540003c1 	b.ne	61001a90 <gicv3_dist_init+0x264>  // b.any
		 /* group 1 secure*/
		 /* gicd.ctrl.ds = 1 */
		for (i = 32; i < gic_irqs; i += 32) {
    61001a1c:	52800400 	mov	w0, #0x20                  	// #32
    61001a20:	b9003fe0 	str	w0, [sp, #60]
    61001a24:	14000016 	b	61001a7c <gicv3_dist_init+0x250>
			writel_relaxed(0x0, GICD_IGROUPR + i / 8);
    61001a28:	b9403fe0 	ldr	w0, [sp, #60]
    61001a2c:	53037c00 	lsr	w0, w0, #3
    61001a30:	2a0003e1 	mov	w1, w0
    61001a34:	d2801000 	mov	x0, #0x80                  	// #128
    61001a38:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001a3c:	8b000020 	add	x0, x1, x0
    61001a40:	aa0003e1 	mov	x1, x0
    61001a44:	52800000 	mov	w0, #0x0                   	// #0
    61001a48:	97fffebb 	bl	61001534 <__raw_writel>
			writel_relaxed(~0x0, GICD_IGRPMODR + i / 8);
    61001a4c:	b9403fe0 	ldr	w0, [sp, #60]
    61001a50:	53037c00 	lsr	w0, w0, #3
    61001a54:	2a0003e1 	mov	w1, w0
    61001a58:	d281a000 	mov	x0, #0xd00                 	// #3328
    61001a5c:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001a60:	8b000020 	add	x0, x1, x0
    61001a64:	aa0003e1 	mov	x1, x0
    61001a68:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001a6c:	97fffeb2 	bl	61001534 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32) {
    61001a70:	b9403fe0 	ldr	w0, [sp, #60]
    61001a74:	11008000 	add	w0, w0, #0x20
    61001a78:	b9003fe0 	str	w0, [sp, #60]
    61001a7c:	b9403fe1 	ldr	w1, [sp, #60]
    61001a80:	b9402fe0 	ldr	w0, [sp, #44]
    61001a84:	6b00003f 	cmp	w1, w0
    61001a88:	54fffd03 	b.cc	61001a28 <gicv3_dist_init+0x1fc>  // b.lo, b.ul, b.last
    61001a8c:	1400001d 	b	61001b00 <gicv3_dist_init+0x2d4>
		}
	} else {
		for (i = 32; i < gic_irqs; i += 32) {
    61001a90:	52800400 	mov	w0, #0x20                  	// #32
    61001a94:	b9003fe0 	str	w0, [sp, #60]
    61001a98:	14000016 	b	61001af0 <gicv3_dist_init+0x2c4>
			writel_relaxed(0x0, GICD_IGROUPR + i / 8);
    61001a9c:	b9403fe0 	ldr	w0, [sp, #60]
    61001aa0:	53037c00 	lsr	w0, w0, #3
    61001aa4:	2a0003e1 	mov	w1, w0
    61001aa8:	d2801000 	mov	x0, #0x80                  	// #128
    61001aac:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001ab0:	8b000020 	add	x0, x1, x0
    61001ab4:	aa0003e1 	mov	x1, x0
    61001ab8:	52800000 	mov	w0, #0x0                   	// #0
    61001abc:	97fffe9e 	bl	61001534 <__raw_writel>
			writel_relaxed(0x0, GICD_IGRPMODR + i / 8);
    61001ac0:	b9403fe0 	ldr	w0, [sp, #60]
    61001ac4:	53037c00 	lsr	w0, w0, #3
    61001ac8:	2a0003e1 	mov	w1, w0
    61001acc:	d281a000 	mov	x0, #0xd00                 	// #3328
    61001ad0:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001ad4:	8b000020 	add	x0, x1, x0
    61001ad8:	aa0003e1 	mov	x1, x0
    61001adc:	52800000 	mov	w0, #0x0                   	// #0
    61001ae0:	97fffe95 	bl	61001534 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32) {
    61001ae4:	b9403fe0 	ldr	w0, [sp, #60]
    61001ae8:	11008000 	add	w0, w0, #0x20
    61001aec:	b9003fe0 	str	w0, [sp, #60]
    61001af0:	b9403fe1 	ldr	w1, [sp, #60]
    61001af4:	b9402fe0 	ldr	w0, [sp, #44]
    61001af8:	6b00003f 	cmp	w1, w0
    61001afc:	54fffd03 	b.cc	61001a9c <gicv3_dist_init+0x270>  // b.lo, b.ul, b.last
		}
	}

	writel_relaxed(0x37, GICD_CTLR);
    61001b00:	d2bba001 	mov	x1, #0xdd000000            	// #3707764736
    61001b04:	528006e0 	mov	w0, #0x37                  	// #55
    61001b08:	97fffe8b 	bl	61001534 <__raw_writel>
	gic_dist_wait();
    61001b0c:	97ffff30 	bl	610017cc <gic_dist_wait>
	/*
	 * Set all global interrupts to the boot CPU only. ARE must be enabled.
	 */
	affinity = gic_mpidr_to_affinity(0);
    61001b10:	d2800000 	mov	x0, #0x0                   	// #0
    61001b14:	97ffff3c 	bl	61001804 <gic_mpidr_to_affinity>
    61001b18:	f90013e0 	str	x0, [sp, #32]
	for (i = 32; i < gic_irqs; i++)
    61001b1c:	52800400 	mov	w0, #0x20                  	// #32
    61001b20:	b9003fe0 	str	w0, [sp, #60]
    61001b24:	1400000d 	b	61001b58 <gicv3_dist_init+0x32c>
		writeq_relaxed(affinity, GICD_IROUTER + i * 8);
    61001b28:	b9403fe0 	ldr	w0, [sp, #60]
    61001b2c:	531d7000 	lsl	w0, w0, #3
    61001b30:	2a0003e1 	mov	w1, w0
    61001b34:	d28c0000 	mov	x0, #0x6000                	// #24576
    61001b38:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001b3c:	8b000020 	add	x0, x1, x0
    61001b40:	aa0003e1 	mov	x1, x0
    61001b44:	f94013e0 	ldr	x0, [sp, #32]
    61001b48:	97fffeec 	bl	610016f8 <__raw_writeq>
	for (i = 32; i < gic_irqs; i++)
    61001b4c:	b9403fe0 	ldr	w0, [sp, #60]
    61001b50:	11000400 	add	w0, w0, #0x1
    61001b54:	b9003fe0 	str	w0, [sp, #60]
    61001b58:	b9403fe1 	ldr	w1, [sp, #60]
    61001b5c:	b9402fe0 	ldr	w0, [sp, #44]
    61001b60:	6b00003f 	cmp	w1, w0
    61001b64:	54fffe23 	b.cc	61001b28 <gicv3_dist_init+0x2fc>  // b.lo, b.ul, b.last

	gic_dist_wait();
    61001b68:	97ffff19 	bl	610017cc <gic_dist_wait>
}
    61001b6c:	d503201f 	nop
    61001b70:	a8c47bfd 	ldp	x29, x30, [sp], #64
    61001b74:	d65f03c0 	ret

Disassembly of section .text.gic_enable_redist:

0000000061001b78 <gic_enable_redist>:

void gic_enable_redist(bool enable)
{
    61001b78:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61001b7c:	910003fd 	mov	x29, sp
    61001b80:	39007fe0 	strb	w0, [sp, #31]
	u32 count = 1000000;	/* 1s! */
    61001b84:	52884800 	mov	w0, #0x4240                	// #16960
    61001b88:	72a001e0 	movk	w0, #0xf, lsl #16
    61001b8c:	b9003fe0 	str	w0, [sp, #60]
	u32 val;

	val = readl_relaxed(GICR_WAKER);
    61001b90:	d2800280 	mov	x0, #0x14                  	// #20
    61001b94:	f2bba080 	movk	x0, #0xdd04, lsl #16
    61001b98:	97fffee1 	bl	6100171c <__raw_readl>
    61001b9c:	b90037e0 	str	w0, [sp, #52]
    61001ba0:	b94037e0 	ldr	w0, [sp, #52]
    61001ba4:	b9003be0 	str	w0, [sp, #56]
	if (enable)
    61001ba8:	39407fe0 	ldrb	w0, [sp, #31]
    61001bac:	7100001f 	cmp	w0, #0x0
    61001bb0:	540000a0 	b.eq	61001bc4 <gic_enable_redist+0x4c>  // b.none
		/* Wake up this CPU redistributor */
		val &= ~GICR_WAKER_ProcessorSleep;
    61001bb4:	b9403be0 	ldr	w0, [sp, #56]
    61001bb8:	121e7800 	and	w0, w0, #0xfffffffd
    61001bbc:	b9003be0 	str	w0, [sp, #56]
    61001bc0:	14000004 	b	61001bd0 <gic_enable_redist+0x58>
	else
		val |= GICR_WAKER_ProcessorSleep;
    61001bc4:	b9403be0 	ldr	w0, [sp, #56]
    61001bc8:	321f0000 	orr	w0, w0, #0x2
    61001bcc:	b9003be0 	str	w0, [sp, #56]
	writel_relaxed(val, GICR_WAKER);
    61001bd0:	d2800281 	mov	x1, #0x14                  	// #20
    61001bd4:	f2bba081 	movk	x1, #0xdd04, lsl #16
    61001bd8:	b9403be0 	ldr	w0, [sp, #56]
    61001bdc:	97fffe56 	bl	61001534 <__raw_writel>

	if (!enable) {		/* Check that GICR_WAKER is writeable */
    61001be0:	39407fe0 	ldrb	w0, [sp, #31]
    61001be4:	52000000 	eor	w0, w0, #0x1
    61001be8:	12001c00 	and	w0, w0, #0xff
    61001bec:	7100001f 	cmp	w0, #0x0
    61001bf0:	540003a0 	b.eq	61001c64 <gic_enable_redist+0xec>  // b.none
		val = readl_relaxed(GICR_WAKER);
    61001bf4:	d2800280 	mov	x0, #0x14                  	// #20
    61001bf8:	f2bba080 	movk	x0, #0xdd04, lsl #16
    61001bfc:	97fffec8 	bl	6100171c <__raw_readl>
    61001c00:	b90033e0 	str	w0, [sp, #48]
    61001c04:	b94033e0 	ldr	w0, [sp, #48]
    61001c08:	b9003be0 	str	w0, [sp, #56]
		if (!(val & GICR_WAKER_ProcessorSleep))
    61001c0c:	b9403be0 	ldr	w0, [sp, #56]
    61001c10:	121f0000 	and	w0, w0, #0x2
    61001c14:	7100001f 	cmp	w0, #0x0
    61001c18:	54000340 	b.eq	61001c80 <gic_enable_redist+0x108>  // b.none
			return;	/* No PM support in this redistributor */
	}

	while (--count) {
    61001c1c:	14000012 	b	61001c64 <gic_enable_redist+0xec>
		val = readl_relaxed(GICR_WAKER);
    61001c20:	d2800280 	mov	x0, #0x14                  	// #20
    61001c24:	f2bba080 	movk	x0, #0xdd04, lsl #16
    61001c28:	97fffebd 	bl	6100171c <__raw_readl>
    61001c2c:	b9002fe0 	str	w0, [sp, #44]
    61001c30:	b9402fe0 	ldr	w0, [sp, #44]
    61001c34:	b9003be0 	str	w0, [sp, #56]
		if (enable ^ (bool)(val & GICR_WAKER_ChildrenAsleep))
    61001c38:	39407fe0 	ldrb	w0, [sp, #31]
    61001c3c:	b9403be1 	ldr	w1, [sp, #56]
    61001c40:	121e0021 	and	w1, w1, #0x4
    61001c44:	7100003f 	cmp	w1, #0x0
    61001c48:	1a9f07e1 	cset	w1, ne  // ne = any
    61001c4c:	12001c21 	and	w1, w1, #0xff
    61001c50:	6b01001f 	cmp	w0, w1
    61001c54:	540001a1 	b.ne	61001c88 <gic_enable_redist+0x110>  // b.any
			break;
		cpu_relax();
    61001c58:	97fffeb9 	bl	6100173c <cpu_relax>
		_delay_ms(1);
    61001c5c:	52800020 	mov	w0, #0x1                   	// #1
    61001c60:	94000459 	bl	61002dc4 <_delay_ms>
	while (--count) {
    61001c64:	b9403fe0 	ldr	w0, [sp, #60]
    61001c68:	51000400 	sub	w0, w0, #0x1
    61001c6c:	b9003fe0 	str	w0, [sp, #60]
    61001c70:	b9403fe0 	ldr	w0, [sp, #60]
    61001c74:	7100001f 	cmp	w0, #0x0
    61001c78:	54fffd41 	b.ne	61001c20 <gic_enable_redist+0xa8>  // b.any
    61001c7c:	14000004 	b	61001c8c <gic_enable_redist+0x114>
			return;	/* No PM support in this redistributor */
    61001c80:	d503201f 	nop
    61001c84:	14000002 	b	61001c8c <gic_enable_redist+0x114>
			break;
    61001c88:	d503201f 	nop
	}

	if (!count)
		gic_print("redistributor failed to %s...\n", enable ? "wakeup" : "sleep");
}
    61001c8c:	a8c47bfd 	ldp	x29, x30, [sp], #64
    61001c90:	d65f03c0 	ret

Disassembly of section .text.gicv3_redist_init:

0000000061001c94 <gicv3_redist_init>:

void gicv3_redist_init(u32 int_group)
{
    61001c94:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61001c98:	910003fd 	mov	x29, sp
    61001c9c:	b9001fe0 	str	w0, [sp, #28]
	u32 i;
	u32 nr = 1;
    61001ca0:	52800020 	mov	w0, #0x1                   	// #1
    61001ca4:	b9002be0 	str	w0, [sp, #40]
	gic_enable_redist(true);
    61001ca8:	52800020 	mov	w0, #0x1                   	// #1
    61001cac:	97ffffb3 	bl	61001b78 <gic_enable_redist>

	if (int_group == GROUP_1_NONSECURE) {
    61001cb0:	b9401fe0 	ldr	w0, [sp, #28]
    61001cb4:	7100081f 	cmp	w0, #0x2
    61001cb8:	54000141 	b.ne	61001ce0 <gicv3_redist_init+0x4c>  // b.any
		/* Configure SGIs/PPIs as non-secure Group-1 */
		writel_relaxed(~0x0, GICR_SGI_IGROUPR0);
    61001cbc:	d2801001 	mov	x1, #0x80                  	// #128
    61001cc0:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001cc4:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001cc8:	97fffe1b 	bl	61001534 <__raw_writel>
		writel_relaxed(0x0, GICR_SGI_IGRPMOD0);
    61001ccc:	d281a001 	mov	x1, #0xd00                 	// #3328
    61001cd0:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001cd4:	52800000 	mov	w0, #0x0                   	// #0
    61001cd8:	97fffe17 	bl	61001534 <__raw_writel>
    61001cdc:	14000015 	b	61001d30 <gicv3_redist_init+0x9c>
	} else if (int_group == GROUP_1_SECURE) {
    61001ce0:	b9401fe0 	ldr	w0, [sp, #28]
    61001ce4:	7100041f 	cmp	w0, #0x1
    61001ce8:	54000141 	b.ne	61001d10 <gicv3_redist_init+0x7c>  // b.any
		/* Configure SGIs/PPIs as secure Group-1 */
		writel_relaxed(0x0, GICR_SGI_IGROUPR0);
    61001cec:	d2801001 	mov	x1, #0x80                  	// #128
    61001cf0:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001cf4:	52800000 	mov	w0, #0x0                   	// #0
    61001cf8:	97fffe0f 	bl	61001534 <__raw_writel>
		writel_relaxed(~0x0, GICR_SGI_IGRPMOD0);
    61001cfc:	d281a001 	mov	x1, #0xd00                 	// #3328
    61001d00:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001d04:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001d08:	97fffe0b 	bl	61001534 <__raw_writel>
    61001d0c:	14000009 	b	61001d30 <gicv3_redist_init+0x9c>
	} else {

		writel_relaxed(0x0, GICR_SGI_IGROUPR0);
    61001d10:	d2801001 	mov	x1, #0x80                  	// #128
    61001d14:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001d18:	52800000 	mov	w0, #0x0                   	// #0
    61001d1c:	97fffe06 	bl	61001534 <__raw_writel>
		writel_relaxed(0x0, GICR_SGI_IGRPMOD0);
    61001d20:	d281a001 	mov	x1, #0xd00                 	// #3328
    61001d24:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001d28:	52800000 	mov	w0, #0x0                   	// #0
    61001d2c:	97fffe02 	bl	61001534 <__raw_writel>

	/*
	 * Deal with the banked PPI and SGI interrupts - disable all
	 * private interrupts. Make sure everything is deactivated.
	 */
	writel_relaxed(GICD_INT_EN_CLR_X32, GICR_SGI_ACTIVE_CLEAR);
    61001d30:	d2807001 	mov	x1, #0x380                 	// #896
    61001d34:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001d38:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001d3c:	97fffdfe 	bl	61001534 <__raw_writel>
	writel_relaxed(GICD_INT_EN_CLR_X32, GICR_SGI_ENABLE_CLEAR);
    61001d40:	d2803001 	mov	x1, #0x180                 	// #384
    61001d44:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001d48:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001d4c:	97fffdfa 	bl	61001534 <__raw_writel>

	/*
	 * Set priority on PPI and SGI interrupts
	 */
	for (i = 0; i < 8; i += 1)
    61001d50:	b9002fff 	str	wzr, [sp, #44]
    61001d54:	1400000e 	b	61001d8c <gicv3_redist_init+0xf8>
		writel_relaxed(GICD_INT_DEF_PRI_X4, GICR_SGI_PRI + i * 4);
    61001d58:	b9402fe0 	ldr	w0, [sp, #44]
    61001d5c:	531e7400 	lsl	w0, w0, #2
    61001d60:	2a0003e1 	mov	w1, w0
    61001d64:	d2808000 	mov	x0, #0x400                 	// #1024
    61001d68:	f2bba0a0 	movk	x0, #0xdd05, lsl #16
    61001d6c:	8b000020 	add	x0, x1, x0
    61001d70:	aa0003e1 	mov	x1, x0
    61001d74:	52941400 	mov	w0, #0xa0a0                	// #41120
    61001d78:	72b41400 	movk	w0, #0xa0a0, lsl #16
    61001d7c:	97fffdee 	bl	61001534 <__raw_writel>
	for (i = 0; i < 8; i += 1)
    61001d80:	b9402fe0 	ldr	w0, [sp, #44]
    61001d84:	11000400 	add	w0, w0, #0x1
    61001d88:	b9002fe0 	str	w0, [sp, #44]
    61001d8c:	b9402fe0 	ldr	w0, [sp, #44]
    61001d90:	71001c1f 	cmp	w0, #0x7
    61001d94:	54fffe29 	b.ls	61001d58 <gicv3_redist_init+0xc4>  // b.plast

	/* SGI: edge-triggered */
	writel_relaxed(GICR_SGI_EDGE_TRIG, GICR_SGI_ICFGR0);
    61001d98:	d2818001 	mov	x1, #0xc00                 	// #3072
    61001d9c:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001da0:	3201f3e0 	mov	w0, #0xaaaaaaaa            	// #-1431655766
    61001da4:	97fffde4 	bl	61001534 <__raw_writel>
	/* PPI: level-triggered */
	writel_relaxed(GICR_SGI_LEVEL_TRIG, GICR_SGI_ICFGR1);
    61001da8:	d2818081 	mov	x1, #0xc04                 	// #3076
    61001dac:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001db0:	52800000 	mov	w0, #0x0                   	// #0
    61001db4:	97fffde0 	bl	61001534 <__raw_writel>

	gic_redist_wait();
    61001db8:	97fffe8c 	bl	610017e8 <gic_redist_wait>
}
    61001dbc:	d503201f 	nop
    61001dc0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61001dc4:	d65f03c0 	ret

Disassembly of section .text.gic_enable_sre:

0000000061001dc8 <gic_enable_sre>:


static bool gic_enable_sre(void)
{
    61001dc8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61001dcc:	910003fd 	mov	x29, sp
	u32 val;
	val = gic_read_sre();
    61001dd0:	97fffe31 	bl	61001694 <gic_read_sre>
    61001dd4:	b9001fe0 	str	w0, [sp, #28]
	if (val & ICC_SRE_EL1_SRE)
    61001dd8:	b9401fe0 	ldr	w0, [sp, #28]
    61001ddc:	12000000 	and	w0, w0, #0x1
    61001de0:	7100001f 	cmp	w0, #0x0
    61001de4:	54000060 	b.eq	61001df0 <gic_enable_sre+0x28>  // b.none
		return true;
    61001de8:	52800020 	mov	w0, #0x1                   	// #1
    61001dec:	1400000d 	b	61001e20 <gic_enable_sre+0x58>

	val |= ICC_SRE_EL1_SRE;
    61001df0:	b9401fe0 	ldr	w0, [sp, #28]
    61001df4:	32000000 	orr	w0, w0, #0x1
    61001df8:	b9001fe0 	str	w0, [sp, #28]
	gic_write_sre(val);
    61001dfc:	b9401fe0 	ldr	w0, [sp, #28]
    61001e00:	97fffe2b 	bl	610016ac <gic_write_sre>
	val = gic_read_sre();
    61001e04:	97fffe24 	bl	61001694 <gic_read_sre>
    61001e08:	b9001fe0 	str	w0, [sp, #28]

	return !!(val & ICC_SRE_EL1_SRE);
    61001e0c:	b9401fe0 	ldr	w0, [sp, #28]
    61001e10:	12000000 	and	w0, w0, #0x1
    61001e14:	7100001f 	cmp	w0, #0x0
    61001e18:	1a9f07e0 	cset	w0, ne  // ne = any
    61001e1c:	12001c00 	and	w0, w0, #0xff
}
    61001e20:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61001e24:	d65f03c0 	ret

Disassembly of section .text.gicv3_cpu_sysregs_init:

0000000061001e28 <gicv3_cpu_sysregs_init>:

	return pribits;
}

static void gicv3_cpu_sysregs_init(void)
{
    61001e28:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61001e2c:	910003fd 	mov	x29, sp
	/* no nmi */
	//write_gicreg(0, ICC_AP1R1_EL1);
	/* Set priority mask register */
	write_gicreg(DEFAULT_PMR_VALUE, ICC_PMR_EL1);
    61001e30:	d2801e00 	mov	x0, #0xf0                  	// #240
    61001e34:	f9000fe0 	str	x0, [sp, #24]
    61001e38:	f9400fe0 	ldr	x0, [sp, #24]
    61001e3c:	d5184600 	msr	s3_0_c4_c6_0, x0

	gic_write_bpr1(0);
    61001e40:	52800000 	mov	w0, #0x0                   	// #0
    61001e44:	97fffe24 	bl	610016d4 <gic_write_bpr1>
	/* eoi mode */
	gic_write_ctlr(ICC_CTLR_EL1_EOImode_drop_dir);
    61001e48:	52800000 	mov	w0, #0x0                   	// #0
    61001e4c:	97fffdfe 	bl	61001644 <gic_write_ctlr>

	isb();
    61001e50:	d5033fdf 	isb
	/* enable group1 */
	gic_write_grpen1(1);
    61001e54:	52800020 	mov	w0, #0x1                   	// #1
    61001e58:	97fffe05 	bl	6100166c <gic_write_grpen1>

}
    61001e5c:	d503201f 	nop
    61001e60:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61001e64:	d65f03c0 	ret

Disassembly of section .text.gicv3_cpu_memory_map_init:

0000000061001e68 <gicv3_cpu_memory_map_init>:

static void gicv3_cpu_memory_map_init(void)
{
    61001e68:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61001e6c:	910003fd 	mov	x29, sp
	/* Set priority mask register */
	writel_relaxed(DEFAULT_PMR_VALUE, GICC_PMR);
    61001e70:	d2800081 	mov	x1, #0x4                   	// #4
    61001e74:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    61001e78:	52801e00 	mov	w0, #0xf0                  	// #240
    61001e7c:	97fffdae 	bl	61001534 <__raw_writel>

	writel_relaxed(0x0, GICC_BPR);
    61001e80:	d2800101 	mov	x1, #0x8                   	// #8
    61001e84:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    61001e88:	52800000 	mov	w0, #0x0                   	// #0
    61001e8c:	97fffdaa 	bl	61001534 <__raw_writel>
	/* enable group1, eoimode0 */
	writel_relaxed((1<0) | (1<1) | (0<9), GICC_CTRL);
    61001e90:	d2bf1801 	mov	x1, #0xf8c00000            	// #4173332480
    61001e94:	52800020 	mov	w0, #0x1                   	// #1
    61001e98:	97fffda7 	bl	61001534 <__raw_writel>

}
    61001e9c:	d503201f 	nop
    61001ea0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61001ea4:	d65f03c0 	ret

Disassembly of section .text.gicv3_cpu_init:

0000000061001ea8 <gicv3_cpu_init>:
void gicv3_cpu_init(void)
{
    61001ea8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61001eac:	910003fd 	mov	x29, sp
	int i;
	u32 pribits;

	/* enable sre */
	if (!gic_enable_sre()) {
    61001eb0:	97ffffc6 	bl	61001dc8 <gic_enable_sre>
    61001eb4:	12001c00 	and	w0, w0, #0xff
    61001eb8:	52000000 	eor	w0, w0, #0x1
    61001ebc:	12001c00 	and	w0, w0, #0xff
    61001ec0:	7100001f 	cmp	w0, #0x0
    61001ec4:	54000120 	b.eq	61001ee8 <gicv3_cpu_init+0x40>  // b.none
		printf("GIC: unable to init gic cpu interface by setting system register.\n");
    61001ec8:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61001ecc:	91176000 	add	x0, x0, #0x5d8
    61001ed0:	94000338 	bl	61002bb0 <printf>
		printf("try to init gic cpu interface using memory-mapped register.\n");
    61001ed4:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61001ed8:	91188000 	add	x0, x0, #0x620
    61001edc:	94000335 	bl	61002bb0 <printf>
		gicv3_cpu_memory_map_init();
    61001ee0:	97ffffe2 	bl	61001e68 <gicv3_cpu_memory_map_init>
		printf("init gic cpu interface using system register.\n");
		gicv3_cpu_sysregs_init();
	}


}
    61001ee4:	14000005 	b	61001ef8 <gicv3_cpu_init+0x50>
		printf("init gic cpu interface using system register.\n");
    61001ee8:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61001eec:	91198000 	add	x0, x0, #0x660
    61001ef0:	94000330 	bl	61002bb0 <printf>
		gicv3_cpu_sysregs_init();
    61001ef4:	97ffffcd 	bl	61001e28 <gicv3_cpu_sysregs_init>
}
    61001ef8:	d503201f 	nop
    61001efc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61001f00:	d65f03c0 	ret

Disassembly of section .text.gicv3_init:

0000000061001f04 <gicv3_init>:

__attribute__((weak)) void gicv3_init(void)
{
    61001f04:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61001f08:	910003fd 	mov	x29, sp
    gicv3_dist_init(GROUP_1_SECURE);
    61001f0c:	52800020 	mov	w0, #0x1                   	// #1
    61001f10:	97fffe47 	bl	6100182c <gicv3_dist_init>
    gicv3_redist_init(GROUP_1_SECURE);
    61001f14:	52800020 	mov	w0, #0x1                   	// #1
    61001f18:	97ffff5f 	bl	61001c94 <gicv3_redist_init>

    gicv3_cpu_init();
    61001f1c:	97ffffe3 	bl	61001ea8 <gicv3_cpu_init>

    gic_print("gicv3 : enabled.\n");
}
    61001f20:	d503201f 	nop
    61001f24:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61001f28:	d65f03c0 	ret

Disassembly of section .text.do_irq_handle:

0000000061001f2c <do_irq_handle>:
/**
 * @desc  : irq handle implement
 * @flow  : read irq number -> deal with this irq event -> 	write eoi
 */
void do_irq_handle(void)
{
    61001f2c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61001f30:	910003fd 	mov	x29, sp
	u32	int_id;

	/* enable sre */
	if (!gic_enable_sre()) {
    61001f34:	97ffffa5 	bl	61001dc8 <gic_enable_sre>
    61001f38:	12001c00 	and	w0, w0, #0xff
    61001f3c:	52000000 	eor	w0, w0, #0x1
    61001f40:	12001c00 	and	w0, w0, #0xff
    61001f44:	7100001f 	cmp	w0, #0x0
    61001f48:	54000120 	b.eq	61001f6c <do_irq_handle+0x40>  // b.none
		/* interrupr acknowledge by read gicc_iar*/
		int_id = readl_relaxed(GICC_IAR) & 0xffffff;
    61001f4c:	d2800180 	mov	x0, #0xc                   	// #12
    61001f50:	f2bf1800 	movk	x0, #0xf8c0, lsl #16
    61001f54:	97fffdf2 	bl	6100171c <__raw_readl>
    61001f58:	b9001fe0 	str	w0, [sp, #28]
    61001f5c:	b9401fe0 	ldr	w0, [sp, #28]
    61001f60:	12005c00 	and	w0, w0, #0xffffff
    61001f64:	b9002fe0 	str	w0, [sp, #44]
    61001f68:	14000004 	b	61001f78 <do_irq_handle+0x4c>
	} else {
		/* interrupr acknowledge by read iar*/
		int_id = gic_read_iar_common() & 0xffffff;
    61001f6c:	97fffdad 	bl	61001620 <gic_read_iar_common>
    61001f70:	12005c00 	and	w0, w0, #0xffffff
    61001f74:	b9002fe0 	str	w0, [sp, #44]
	}

	/* run irq handler function */
	void (*p_func)();
	if (int_id < IRQ_MAX_NUM) {
    61001f78:	b9402fe0 	ldr	w0, [sp, #44]
    61001f7c:	7103fc1f 	cmp	w0, #0xff
    61001f80:	540000e8 	b.hi	61001f9c <do_irq_handle+0x70>  // b.pmore
		p_func = irq_handler_list[int_id];
    61001f84:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61001f88:	913aa000 	add	x0, x0, #0xea8
    61001f8c:	b9402fe1 	ldr	w1, [sp, #44]
    61001f90:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    61001f94:	f90013e0 	str	x0, [sp, #32]
    61001f98:	14000008 	b	61001fb8 <do_irq_handle+0x8c>
	} else {
		p_func = irq_handler_list[int_id -GICV3_SPECIAL_START + IRQ_MAX_NUM];
    61001f9c:	b9402fe0 	ldr	w0, [sp, #44]
    61001fa0:	510bf001 	sub	w1, w0, #0x2fc
    61001fa4:	b0000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61001fa8:	913aa000 	add	x0, x0, #0xea8
    61001fac:	2a0103e1 	mov	w1, w1
    61001fb0:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    61001fb4:	f90013e0 	str	x0, [sp, #32]
	}

	if (!p_func) {
    61001fb8:	f94013e0 	ldr	x0, [sp, #32]
    61001fbc:	f100001f 	cmp	x0, #0x0
    61001fc0:	54000060 	b.eq	61001fcc <do_irq_handle+0xa0>  // b.none
		gic_print("can not found your irq event handle at irq number: %d\n", int_id);
	} else {
		p_func();
    61001fc4:	f94013e0 	ldr	x0, [sp, #32]
    61001fc8:	d63f0000 	blr	x0
	}

	/* write end of interrupt to deactivate the interrupt */
	if (!gic_enable_sre()) {
    61001fcc:	97ffff7f 	bl	61001dc8 <gic_enable_sre>
    61001fd0:	12001c00 	and	w0, w0, #0xff
    61001fd4:	52000000 	eor	w0, w0, #0x1
    61001fd8:	12001c00 	and	w0, w0, #0xff
    61001fdc:	7100001f 	cmp	w0, #0x0
    61001fe0:	540000c0 	b.eq	61001ff8 <do_irq_handle+0xcc>  // b.none
		writel_relaxed(int_id, GICC_EOIR);
    61001fe4:	d2800201 	mov	x1, #0x10                  	// #16
    61001fe8:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    61001fec:	b9402fe0 	ldr	w0, [sp, #44]
    61001ff0:	97fffd51 	bl	61001534 <__raw_writel>
	} else {
		gic_write_eoir(int_id);
	}
}
    61001ff4:	14000003 	b	61002000 <do_irq_handle+0xd4>
		gic_write_eoir(int_id);
    61001ff8:	b9402fe0 	ldr	w0, [sp, #44]
    61001ffc:	97fffd7f 	bl	610015f8 <gic_write_eoir>
}
    61002000:	d503201f 	nop
    61002004:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002008:	d65f03c0 	ret

Disassembly of section .text.gic_fiq_get_int_id:

000000006100200c <gic_fiq_get_int_id>:

__attribute__((weak)) unsigned int gic_fiq_get_int_id(void)
{
    6100200c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002010:	910003fd 	mov	x29, sp
	unsigned int int_id;

	/* enable sre */
	if (!gic_enable_sre()) {
    61002014:	97ffff6d 	bl	61001dc8 <gic_enable_sre>
    61002018:	12001c00 	and	w0, w0, #0xff
    6100201c:	52000000 	eor	w0, w0, #0x1
    61002020:	12001c00 	and	w0, w0, #0xff
    61002024:	7100001f 	cmp	w0, #0x0
    61002028:	54000120 	b.eq	6100204c <gic_fiq_get_int_id+0x40>  // b.none
		/* interrupr acknowledge by read gicc_iar*/
		int_id = readl_relaxed(GICC_IAR) & 0xffffff;
    6100202c:	d2800180 	mov	x0, #0xc                   	// #12
    61002030:	f2bf1800 	movk	x0, #0xf8c0, lsl #16
    61002034:	97fffdba 	bl	6100171c <__raw_readl>
    61002038:	b9001be0 	str	w0, [sp, #24]
    6100203c:	b9401be0 	ldr	w0, [sp, #24]
    61002040:	12005c00 	and	w0, w0, #0xffffff
    61002044:	b9001fe0 	str	w0, [sp, #28]
    61002048:	14000004 	b	61002058 <gic_fiq_get_int_id+0x4c>
	} else {
		/* interrupr acknowledge by read iar*/
		int_id = gic_read_iar_common() & 0xffffff;
    6100204c:	97fffd75 	bl	61001620 <gic_read_iar_common>
    61002050:	12005c00 	and	w0, w0, #0xffffff
    61002054:	b9001fe0 	str	w0, [sp, #28]
	}
}
    61002058:	d503201f 	nop
    6100205c:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002060:	d65f03c0 	ret

Disassembly of section .text.do_fiq_handle:

0000000061002064 <do_fiq_handle>:
/**
 * @desc  : irq handle implement; this is weak function because we need to read ICC_IAR0_EL1 if group0 case
 * @flow  : read irq number -> deal with this irq event -> 	write eoi
 */
void do_fiq_handle(void)
{
    61002064:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002068:	910003fd 	mov	x29, sp
	u32	int_id;
	void (*p_func)();

	int_id = gic_fiq_get_int_id();
    6100206c:	97ffffe8 	bl	6100200c <gic_fiq_get_int_id>
    61002070:	b90017e0 	str	w0, [sp, #20]

	/* run irq handler function */
	if (int_id < IRQ_MAX_NUM) {
    61002074:	b94017e0 	ldr	w0, [sp, #20]
    61002078:	7103fc1f 	cmp	w0, #0xff
    6100207c:	540000e8 	b.hi	61002098 <do_fiq_handle+0x34>  // b.pmore
		p_func = fiq_handler_list[int_id];
    61002080:	b0000020 	adrp	x0, 61007000 <_bss_start>
    61002084:	911b2000 	add	x0, x0, #0x6c8
    61002088:	b94017e1 	ldr	w1, [sp, #20]
    6100208c:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    61002090:	f9000fe0 	str	x0, [sp, #24]
    61002094:	14000008 	b	610020b4 <do_fiq_handle+0x50>
	} else {
		p_func = fiq_handler_list[int_id - GICV3_SPECIAL_START + IRQ_MAX_NUM];
    61002098:	b94017e0 	ldr	w0, [sp, #20]
    6100209c:	510bf001 	sub	w1, w0, #0x2fc
    610020a0:	b0000020 	adrp	x0, 61007000 <_bss_start>
    610020a4:	911b2000 	add	x0, x0, #0x6c8
    610020a8:	2a0103e1 	mov	w1, w1
    610020ac:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    610020b0:	f9000fe0 	str	x0, [sp, #24]
	}
	if (!p_func) {
    610020b4:	f9400fe0 	ldr	x0, [sp, #24]
    610020b8:	f100001f 	cmp	x0, #0x0
    610020bc:	54000060 	b.eq	610020c8 <do_fiq_handle+0x64>  // b.none
		gic_print("can not found your irq event handle at irq number: %d\n",int_id);
	} else {
		p_func();
    610020c0:	f9400fe0 	ldr	x0, [sp, #24]
    610020c4:	d63f0000 	blr	x0
	}
	/* write end of interrupt to deactivate the interrupt */

	if (!gic_enable_sre()) {
    610020c8:	97ffff40 	bl	61001dc8 <gic_enable_sre>
    610020cc:	12001c00 	and	w0, w0, #0xff
    610020d0:	52000000 	eor	w0, w0, #0x1
    610020d4:	12001c00 	and	w0, w0, #0xff
    610020d8:	7100001f 	cmp	w0, #0x0
    610020dc:	540000c0 	b.eq	610020f4 <do_fiq_handle+0x90>  // b.none
		writel_relaxed(int_id, GICC_EOIR);
    610020e0:	d2800201 	mov	x1, #0x10                  	// #16
    610020e4:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    610020e8:	b94017e0 	ldr	w0, [sp, #20]
    610020ec:	97fffd12 	bl	61001534 <__raw_writel>
	} else {
		gic_write_eoir(int_id);
	}
}
    610020f0:	14000003 	b	610020fc <do_fiq_handle+0x98>
		gic_write_eoir(int_id);
    610020f4:	b94017e0 	ldr	w0, [sp, #20]
    610020f8:	97fffd40 	bl	610015f8 <gic_write_eoir>
}
    610020fc:	d503201f 	nop
    61002100:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002104:	d65f03c0 	ret

Disassembly of section .text.__assert:

0000000061002108 <__assert>:
#include <cdefs.h>
#include <stdio.h>

 __attribute__((weak)) void __dead2 __assert(const char *file, unsigned int line,
		      const char *assertion)
{
    61002108:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    6100210c:	910003fd 	mov	x29, sp
    61002110:	f90017e0 	str	x0, [sp, #40]
    61002114:	b90027e1 	str	w1, [sp, #36]
    61002118:	f9000fe2 	str	x2, [sp, #24]
	printf("ASSERT: %s:%d:%s\n", file, line, assertion);
    6100211c:	f9400fe3 	ldr	x3, [sp, #24]
    61002120:	b94027e2 	ldr	w2, [sp, #36]
    61002124:	f94017e1 	ldr	x1, [sp, #40]
    61002128:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100212c:	911a4000 	add	x0, x0, #0x690
    61002130:	940002a0 	bl	61002bb0 <printf>
	while (1)
    61002134:	14000000 	b	61002134 <__assert+0x2c>

Disassembly of section .text.memcpy:

0000000061002138 <memcpy>:

#include <stddef.h>
#include <string.h>

void *memcpy(void *dst, const void *src, size_t len)
{
    61002138:	d100c3ff 	sub	sp, sp, #0x30
    6100213c:	f9000fe0 	str	x0, [sp, #24]
    61002140:	f9000be1 	str	x1, [sp, #16]
    61002144:	f90007e2 	str	x2, [sp, #8]
	const char *s = src;
    61002148:	f9400be0 	ldr	x0, [sp, #16]
    6100214c:	f90017e0 	str	x0, [sp, #40]
	char *d = dst;
    61002150:	f9400fe0 	ldr	x0, [sp, #24]
    61002154:	f90013e0 	str	x0, [sp, #32]

	while (len--)
    61002158:	14000009 	b	6100217c <memcpy+0x44>
		*d++ = *s++;
    6100215c:	f94017e1 	ldr	x1, [sp, #40]
    61002160:	91000420 	add	x0, x1, #0x1
    61002164:	f90017e0 	str	x0, [sp, #40]
    61002168:	f94013e0 	ldr	x0, [sp, #32]
    6100216c:	91000402 	add	x2, x0, #0x1
    61002170:	f90013e2 	str	x2, [sp, #32]
    61002174:	39400021 	ldrb	w1, [x1]
    61002178:	39000001 	strb	w1, [x0]
	while (len--)
    6100217c:	f94007e0 	ldr	x0, [sp, #8]
    61002180:	d1000401 	sub	x1, x0, #0x1
    61002184:	f90007e1 	str	x1, [sp, #8]
    61002188:	f100001f 	cmp	x0, #0x0
    6100218c:	54fffe81 	b.ne	6100215c <memcpy+0x24>  // b.any

	return dst;
    61002190:	f9400fe0 	ldr	x0, [sp, #24]
}
    61002194:	9100c3ff 	add	sp, sp, #0x30
    61002198:	d65f03c0 	ret

Disassembly of section .text.memset:

000000006100219c <memset>:
#include <stddef.h>
#include <string.h>
#include <stdint.h>

void *memset(void *dst, int val, size_t count)
{
    6100219c:	d10103ff 	sub	sp, sp, #0x40
    610021a0:	f9000fe0 	str	x0, [sp, #24]
    610021a4:	b90017e1 	str	w1, [sp, #20]
    610021a8:	f90007e2 	str	x2, [sp, #8]
	uint8_t *ptr = dst;
    610021ac:	f9400fe0 	ldr	x0, [sp, #24]
    610021b0:	f9001fe0 	str	x0, [sp, #56]
	uint64_t *ptr64;
	uint64_t fill = (unsigned char)val;
    610021b4:	b94017e0 	ldr	w0, [sp, #20]
    610021b8:	12001c00 	and	w0, w0, #0xff
    610021bc:	92401c00 	and	x0, x0, #0xff
    610021c0:	f90017e0 	str	x0, [sp, #40]

	/* Simplify code below by making sure we write at least one byte. */
	if (count == 0U) {
    610021c4:	f94007e0 	ldr	x0, [sp, #8]
    610021c8:	f100001f 	cmp	x0, #0x0
    610021cc:	54000241 	b.ne	61002214 <memset+0x78>  // b.any
		return dst;
    610021d0:	f9400fe0 	ldr	x0, [sp, #24]
    610021d4:	14000042 	b	610022dc <memset+0x140>
	}

	/* Handle the first part, until the pointer becomes 64-bit aligned. */
	while (((uintptr_t)ptr & 7U) != 0U) {
		*ptr = (uint8_t)val;
    610021d8:	b94017e0 	ldr	w0, [sp, #20]
    610021dc:	12001c01 	and	w1, w0, #0xff
    610021e0:	f9401fe0 	ldr	x0, [sp, #56]
    610021e4:	39000001 	strb	w1, [x0]
		ptr++;
    610021e8:	f9401fe0 	ldr	x0, [sp, #56]
    610021ec:	91000400 	add	x0, x0, #0x1
    610021f0:	f9001fe0 	str	x0, [sp, #56]
		if (--count == 0U) {
    610021f4:	f94007e0 	ldr	x0, [sp, #8]
    610021f8:	d1000400 	sub	x0, x0, #0x1
    610021fc:	f90007e0 	str	x0, [sp, #8]
    61002200:	f94007e0 	ldr	x0, [sp, #8]
    61002204:	f100001f 	cmp	x0, #0x0
    61002208:	54000061 	b.ne	61002214 <memset+0x78>  // b.any
			return dst;
    6100220c:	f9400fe0 	ldr	x0, [sp, #24]
    61002210:	14000033 	b	610022dc <memset+0x140>
	while (((uintptr_t)ptr & 7U) != 0U) {
    61002214:	f9401fe0 	ldr	x0, [sp, #56]
    61002218:	92400800 	and	x0, x0, #0x7
    6100221c:	f100001f 	cmp	x0, #0x0
    61002220:	54fffdc1 	b.ne	610021d8 <memset+0x3c>  // b.any
		}
	}

	/* Duplicate the fill byte to the rest of the 64-bit word. */
	fill |= fill << 8;
    61002224:	f94017e0 	ldr	x0, [sp, #40]
    61002228:	d378dc00 	lsl	x0, x0, #8
    6100222c:	f94017e1 	ldr	x1, [sp, #40]
    61002230:	aa000020 	orr	x0, x1, x0
    61002234:	f90017e0 	str	x0, [sp, #40]
	fill |= fill << 16;
    61002238:	f94017e0 	ldr	x0, [sp, #40]
    6100223c:	d370bc00 	lsl	x0, x0, #16
    61002240:	f94017e1 	ldr	x1, [sp, #40]
    61002244:	aa000020 	orr	x0, x1, x0
    61002248:	f90017e0 	str	x0, [sp, #40]
	fill |= fill << 32;
    6100224c:	f94017e0 	ldr	x0, [sp, #40]
    61002250:	d3607c00 	lsl	x0, x0, #32
    61002254:	f94017e1 	ldr	x1, [sp, #40]
    61002258:	aa000020 	orr	x0, x1, x0
    6100225c:	f90017e0 	str	x0, [sp, #40]

	/* Use 64-bit writes for as long as possible. */
	ptr64 = (uint64_t *)ptr;
    61002260:	f9401fe0 	ldr	x0, [sp, #56]
    61002264:	f9001be0 	str	x0, [sp, #48]
	for (; count >= 8U; count -= 8) {
    61002268:	1400000a 	b	61002290 <memset+0xf4>
		*ptr64 = fill;
    6100226c:	f9401be0 	ldr	x0, [sp, #48]
    61002270:	f94017e1 	ldr	x1, [sp, #40]
    61002274:	f9000001 	str	x1, [x0]
		ptr64++;
    61002278:	f9401be0 	ldr	x0, [sp, #48]
    6100227c:	91002000 	add	x0, x0, #0x8
    61002280:	f9001be0 	str	x0, [sp, #48]
	for (; count >= 8U; count -= 8) {
    61002284:	f94007e0 	ldr	x0, [sp, #8]
    61002288:	d1002000 	sub	x0, x0, #0x8
    6100228c:	f90007e0 	str	x0, [sp, #8]
    61002290:	f94007e0 	ldr	x0, [sp, #8]
    61002294:	f1001c1f 	cmp	x0, #0x7
    61002298:	54fffea8 	b.hi	6100226c <memset+0xd0>  // b.pmore
	}

	/* Handle the remaining part byte-per-byte. */
	ptr = (uint8_t *)ptr64;
    6100229c:	f9401be0 	ldr	x0, [sp, #48]
    610022a0:	f9001fe0 	str	x0, [sp, #56]
	while (count-- > 0U)  {
    610022a4:	14000008 	b	610022c4 <memset+0x128>
		*ptr = (uint8_t)val;
    610022a8:	b94017e0 	ldr	w0, [sp, #20]
    610022ac:	12001c01 	and	w1, w0, #0xff
    610022b0:	f9401fe0 	ldr	x0, [sp, #56]
    610022b4:	39000001 	strb	w1, [x0]
		ptr++;
    610022b8:	f9401fe0 	ldr	x0, [sp, #56]
    610022bc:	91000400 	add	x0, x0, #0x1
    610022c0:	f9001fe0 	str	x0, [sp, #56]
	while (count-- > 0U)  {
    610022c4:	f94007e0 	ldr	x0, [sp, #8]
    610022c8:	d1000401 	sub	x1, x0, #0x1
    610022cc:	f90007e1 	str	x1, [sp, #8]
    610022d0:	f100001f 	cmp	x0, #0x0
    610022d4:	54fffea1 	b.ne	610022a8 <memset+0x10c>  // b.any
	}

	return dst;
    610022d8:	f9400fe0 	ldr	x0, [sp, #24]
}
    610022dc:	910103ff 	add	sp, sp, #0x40
    610022e0:	d65f03c0 	ret

Disassembly of section .text.string_print:

00000000610022e4 <string_print>:
	(((_lcount) > 1)  ? va_arg(_args, unsigned long long int) :	\
	(((_lcount) == 1) ? va_arg(_args, unsigned long int) :		\
			    va_arg(_args, unsigned int)))

static int string_print(const char *str)
{
    610022e4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    610022e8:	910003fd 	mov	x29, sp
    610022ec:	f9000fe0 	str	x0, [sp, #24]
	int count = 0;
    610022f0:	b9002fff 	str	wzr, [sp, #44]

	assert(str != NULL);
    610022f4:	f9400fe0 	ldr	x0, [sp, #24]
    610022f8:	f100001f 	cmp	x0, #0x0
    610022fc:	54000201 	b.ne	6100233c <string_print+0x58>  // b.any
    61002300:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002304:	911aa002 	add	x2, x0, #0x6a8
    61002308:	528003c1 	mov	w1, #0x1e                  	// #30
    6100230c:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002310:	911ae000 	add	x0, x0, #0x6b8
    61002314:	97ffff7d 	bl	61002108 <__assert>

	for ( ; *str != '\0'; str++) {
		(void)putchar(*str);
    61002318:	f9400fe0 	ldr	x0, [sp, #24]
    6100231c:	39400000 	ldrb	w0, [x0]
    61002320:	94000250 	bl	61002c60 <putchar>
		count++;
    61002324:	b9402fe0 	ldr	w0, [sp, #44]
    61002328:	11000400 	add	w0, w0, #0x1
    6100232c:	b9002fe0 	str	w0, [sp, #44]
	for ( ; *str != '\0'; str++) {
    61002330:	f9400fe0 	ldr	x0, [sp, #24]
    61002334:	91000400 	add	x0, x0, #0x1
    61002338:	f9000fe0 	str	x0, [sp, #24]
    6100233c:	f9400fe0 	ldr	x0, [sp, #24]
    61002340:	39400000 	ldrb	w0, [x0]
    61002344:	7100001f 	cmp	w0, #0x0
    61002348:	54fffe81 	b.ne	61002318 <string_print+0x34>  // b.any
	}

	return count;
    6100234c:	b9402fe0 	ldr	w0, [sp, #44]
}
    61002350:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002354:	d65f03c0 	ret

Disassembly of section .text.unsigned_num_print:

0000000061002358 <unsigned_num_print>:

static int unsigned_num_print(unsigned long long int unum, unsigned int radix,
			      char padc, int padn)
{
    61002358:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    6100235c:	910003fd 	mov	x29, sp
    61002360:	f90017e0 	str	x0, [sp, #40]
    61002364:	b90027e1 	str	w1, [sp, #36]
    61002368:	39008fe2 	strb	w2, [sp, #35]
    6100236c:	b9001fe3 	str	w3, [sp, #28]
	/* Just need enough space to store 64 bit decimal integer */
	char num_buf[20];
	int i = 0, count = 0;
    61002370:	b9004fff 	str	wzr, [sp, #76]
    61002374:	b9004bff 	str	wzr, [sp, #72]
	unsigned int rem;

	do {
		rem = unum % radix;
    61002378:	b94027e1 	ldr	w1, [sp, #36]
    6100237c:	f94017e0 	ldr	x0, [sp, #40]
    61002380:	9ac10802 	udiv	x2, x0, x1
    61002384:	9b017c41 	mul	x1, x2, x1
    61002388:	cb010000 	sub	x0, x0, x1
    6100238c:	b90047e0 	str	w0, [sp, #68]
		if (rem < 0xa)
    61002390:	b94047e0 	ldr	w0, [sp, #68]
    61002394:	7100241f 	cmp	w0, #0x9
    61002398:	54000128 	b.hi	610023bc <unsigned_num_print+0x64>  // b.pmore
			num_buf[i] = '0' + rem;
    6100239c:	b94047e0 	ldr	w0, [sp, #68]
    610023a0:	12001c00 	and	w0, w0, #0xff
    610023a4:	1100c000 	add	w0, w0, #0x30
    610023a8:	12001c02 	and	w2, w0, #0xff
    610023ac:	b9804fe0 	ldrsw	x0, [sp, #76]
    610023b0:	9100c3e1 	add	x1, sp, #0x30
    610023b4:	38206822 	strb	w2, [x1, x0]
    610023b8:	14000008 	b	610023d8 <unsigned_num_print+0x80>
		else
			num_buf[i] = 'a' + (rem - 0xa);
    610023bc:	b94047e0 	ldr	w0, [sp, #68]
    610023c0:	12001c00 	and	w0, w0, #0xff
    610023c4:	11015c00 	add	w0, w0, #0x57
    610023c8:	12001c02 	and	w2, w0, #0xff
    610023cc:	b9804fe0 	ldrsw	x0, [sp, #76]
    610023d0:	9100c3e1 	add	x1, sp, #0x30
    610023d4:	38206822 	strb	w2, [x1, x0]
		i++;
    610023d8:	b9404fe0 	ldr	w0, [sp, #76]
    610023dc:	11000400 	add	w0, w0, #0x1
    610023e0:	b9004fe0 	str	w0, [sp, #76]
		unum /= radix;
    610023e4:	b94027e0 	ldr	w0, [sp, #36]
    610023e8:	f94017e1 	ldr	x1, [sp, #40]
    610023ec:	9ac00820 	udiv	x0, x1, x0
    610023f0:	f90017e0 	str	x0, [sp, #40]
	} while (unum > 0U);
    610023f4:	f94017e0 	ldr	x0, [sp, #40]
    610023f8:	f100001f 	cmp	x0, #0x0
    610023fc:	54fffbe1 	b.ne	61002378 <unsigned_num_print+0x20>  // b.any

	if (padn > 0) {
    61002400:	b9401fe0 	ldr	w0, [sp, #28]
    61002404:	7100001f 	cmp	w0, #0x0
    61002408:	540002cd 	b.le	61002460 <unsigned_num_print+0x108>
		while (i < padn) {
    6100240c:	14000009 	b	61002430 <unsigned_num_print+0xd8>
			(void)putchar(padc);
    61002410:	39408fe0 	ldrb	w0, [sp, #35]
    61002414:	94000213 	bl	61002c60 <putchar>
			count++;
    61002418:	b9404be0 	ldr	w0, [sp, #72]
    6100241c:	11000400 	add	w0, w0, #0x1
    61002420:	b9004be0 	str	w0, [sp, #72]
			padn--;
    61002424:	b9401fe0 	ldr	w0, [sp, #28]
    61002428:	51000400 	sub	w0, w0, #0x1
    6100242c:	b9001fe0 	str	w0, [sp, #28]
		while (i < padn) {
    61002430:	b9404fe1 	ldr	w1, [sp, #76]
    61002434:	b9401fe0 	ldr	w0, [sp, #28]
    61002438:	6b00003f 	cmp	w1, w0
    6100243c:	54fffeab 	b.lt	61002410 <unsigned_num_print+0xb8>  // b.tstop
		}
	}

	while (--i >= 0) {
    61002440:	14000008 	b	61002460 <unsigned_num_print+0x108>
		(void)putchar(num_buf[i]);
    61002444:	b9804fe0 	ldrsw	x0, [sp, #76]
    61002448:	9100c3e1 	add	x1, sp, #0x30
    6100244c:	38606820 	ldrb	w0, [x1, x0]
    61002450:	94000204 	bl	61002c60 <putchar>
		count++;
    61002454:	b9404be0 	ldr	w0, [sp, #72]
    61002458:	11000400 	add	w0, w0, #0x1
    6100245c:	b9004be0 	str	w0, [sp, #72]
	while (--i >= 0) {
    61002460:	b9404fe0 	ldr	w0, [sp, #76]
    61002464:	51000400 	sub	w0, w0, #0x1
    61002468:	b9004fe0 	str	w0, [sp, #76]
    6100246c:	b9404fe0 	ldr	w0, [sp, #76]
    61002470:	7100001f 	cmp	w0, #0x0
    61002474:	54fffe8a 	b.ge	61002444 <unsigned_num_print+0xec>  // b.tcont
	}

	return count;
    61002478:	b9404be0 	ldr	w0, [sp, #72]
}
    6100247c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    61002480:	d65f03c0 	ret

Disassembly of section .text.vprintf:

0000000061002484 <vprintf>:
 *
 * The print exits on all other formats specifiers other than valid
 * combinations of the above specifiers.
 *******************************************************************/
int vprintf(const char *fmt, va_list args)
{
    61002484:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    61002488:	910003fd 	mov	x29, sp
    6100248c:	f9000bf3 	str	x19, [sp, #16]
    61002490:	f90017e0 	str	x0, [sp, #40]
    61002494:	aa0103f3 	mov	x19, x1
	int l_count;
	long long int num;
	unsigned long long int unum;
	char *str;
	char padc = '\0'; /* Padding character */
    61002498:	39017fff 	strb	wzr, [sp, #95]
	int padn; /* Number of characters to pad */
	int count = 0; /* Number of printed characters */
    6100249c:	b90057ff 	str	wzr, [sp, #84]

	while (*fmt != '\0') {
    610024a0:	140001bc 	b	61002b90 <vprintf+0x70c>
		l_count = 0;
    610024a4:	b9006fff 	str	wzr, [sp, #108]
		padn = 0;
    610024a8:	b9005bff 	str	wzr, [sp, #88]

		if (*fmt == '%') {
    610024ac:	f94017e0 	ldr	x0, [sp, #40]
    610024b0:	39400000 	ldrb	w0, [x0]
    610024b4:	7100941f 	cmp	w0, #0x25
    610024b8:	540035a1 	b.ne	61002b6c <vprintf+0x6e8>  // b.any
			fmt++;
    610024bc:	f94017e0 	ldr	x0, [sp, #40]
    610024c0:	91000400 	add	x0, x0, #0x1
    610024c4:	f90017e0 	str	x0, [sp, #40]
			/* Check the format specifier */
loop:
			switch (*fmt) {
    610024c8:	f94017e0 	ldr	x0, [sp, #40]
    610024cc:	39400000 	ldrb	w0, [x0]
    610024d0:	7101e81f 	cmp	w0, #0x7a
    610024d4:	540024a0 	b.eq	61002968 <vprintf+0x4e4>  // b.none
    610024d8:	7101e81f 	cmp	w0, #0x7a
    610024dc:	540033cc 	b.gt	61002b54 <vprintf+0x6d0>
    610024e0:	7101e01f 	cmp	w0, #0x78
    610024e4:	540019c0 	b.eq	6100281c <vprintf+0x398>  // b.none
    610024e8:	7101e01f 	cmp	w0, #0x78
    610024ec:	5400334c 	b.gt	61002b54 <vprintf+0x6d0>
    610024f0:	7101d41f 	cmp	w0, #0x75
    610024f4:	54002540 	b.eq	6100299c <vprintf+0x518>  // b.none
    610024f8:	7101d41f 	cmp	w0, #0x75
    610024fc:	540032cc 	b.gt	61002b54 <vprintf+0x6d0>
    61002500:	7101cc1f 	cmp	w0, #0x73
    61002504:	54000f80 	b.eq	610026f4 <vprintf+0x270>  // b.none
    61002508:	7101cc1f 	cmp	w0, #0x73
    6100250c:	5400324c 	b.gt	61002b54 <vprintf+0x6d0>
    61002510:	7101c01f 	cmp	w0, #0x70
    61002514:	540012a0 	b.eq	61002768 <vprintf+0x2e4>  // b.none
    61002518:	7101c01f 	cmp	w0, #0x70
    6100251c:	540031cc 	b.gt	61002b54 <vprintf+0x6d0>
    61002520:	7101b01f 	cmp	w0, #0x6c
    61002524:	540022e0 	b.eq	61002980 <vprintf+0x4fc>  // b.none
    61002528:	7101b01f 	cmp	w0, #0x6c
    6100252c:	5400314c 	b.gt	61002b54 <vprintf+0x6d0>
    61002530:	7101a41f 	cmp	w0, #0x69
    61002534:	540001e0 	b.eq	61002570 <vprintf+0xec>  // b.none
    61002538:	7101a41f 	cmp	w0, #0x69
    6100253c:	540030cc 	b.gt	61002b54 <vprintf+0x6d0>
    61002540:	7101901f 	cmp	w0, #0x64
    61002544:	54000160 	b.eq	61002570 <vprintf+0xec>  // b.none
    61002548:	7101901f 	cmp	w0, #0x64
    6100254c:	5400304c 	b.gt	61002b54 <vprintf+0x6d0>
    61002550:	7100941f 	cmp	w0, #0x25
    61002554:	54000080 	b.eq	61002564 <vprintf+0xe0>  // b.none
    61002558:	7100c01f 	cmp	w0, #0x30
    6100255c:	54002c60 	b.eq	61002ae8 <vprintf+0x664>  // b.none
    61002560:	1400017d 	b	61002b54 <vprintf+0x6d0>
			case '%':
				(void)putchar('%');
    61002564:	528004a0 	mov	w0, #0x25                  	// #37
    61002568:	940001be 	bl	61002c60 <putchar>
				break;
    6100256c:	1400017c 	b	61002b5c <vprintf+0x6d8>
			case 'i': /* Fall through to next one */
			case 'd':
				num = get_num_va_args(args, l_count);
    61002570:	b9406fe0 	ldr	w0, [sp, #108]
    61002574:	7100041f 	cmp	w0, #0x1
    61002578:	540002ed 	b.le	610025d4 <vprintf+0x150>
    6100257c:	b9401a61 	ldr	w1, [x19, #24]
    61002580:	f9400260 	ldr	x0, [x19]
    61002584:	7100003f 	cmp	w1, #0x0
    61002588:	540000ab 	b.lt	6100259c <vprintf+0x118>  // b.tstop
    6100258c:	91003c01 	add	x1, x0, #0xf
    61002590:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002594:	f9000261 	str	x1, [x19]
    61002598:	1400000d 	b	610025cc <vprintf+0x148>
    6100259c:	11002022 	add	w2, w1, #0x8
    610025a0:	b9001a62 	str	w2, [x19, #24]
    610025a4:	b9401a62 	ldr	w2, [x19, #24]
    610025a8:	7100005f 	cmp	w2, #0x0
    610025ac:	540000ad 	b.le	610025c0 <vprintf+0x13c>
    610025b0:	91003c01 	add	x1, x0, #0xf
    610025b4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610025b8:	f9000261 	str	x1, [x19]
    610025bc:	14000004 	b	610025cc <vprintf+0x148>
    610025c0:	f9400662 	ldr	x2, [x19, #8]
    610025c4:	93407c20 	sxtw	x0, w1
    610025c8:	8b000040 	add	x0, x2, x0
    610025cc:	f9400000 	ldr	x0, [x0]
    610025d0:	14000030 	b	61002690 <vprintf+0x20c>
    610025d4:	b9406fe0 	ldr	w0, [sp, #108]
    610025d8:	7100041f 	cmp	w0, #0x1
    610025dc:	540002e1 	b.ne	61002638 <vprintf+0x1b4>  // b.any
    610025e0:	b9401a61 	ldr	w1, [x19, #24]
    610025e4:	f9400260 	ldr	x0, [x19]
    610025e8:	7100003f 	cmp	w1, #0x0
    610025ec:	540000ab 	b.lt	61002600 <vprintf+0x17c>  // b.tstop
    610025f0:	91003c01 	add	x1, x0, #0xf
    610025f4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610025f8:	f9000261 	str	x1, [x19]
    610025fc:	1400000d 	b	61002630 <vprintf+0x1ac>
    61002600:	11002022 	add	w2, w1, #0x8
    61002604:	b9001a62 	str	w2, [x19, #24]
    61002608:	b9401a62 	ldr	w2, [x19, #24]
    6100260c:	7100005f 	cmp	w2, #0x0
    61002610:	540000ad 	b.le	61002624 <vprintf+0x1a0>
    61002614:	91003c01 	add	x1, x0, #0xf
    61002618:	927df021 	and	x1, x1, #0xfffffffffffffff8
    6100261c:	f9000261 	str	x1, [x19]
    61002620:	14000004 	b	61002630 <vprintf+0x1ac>
    61002624:	f9400662 	ldr	x2, [x19, #8]
    61002628:	93407c20 	sxtw	x0, w1
    6100262c:	8b000040 	add	x0, x2, x0
    61002630:	f9400000 	ldr	x0, [x0]
    61002634:	14000017 	b	61002690 <vprintf+0x20c>
    61002638:	b9401a61 	ldr	w1, [x19, #24]
    6100263c:	f9400260 	ldr	x0, [x19]
    61002640:	7100003f 	cmp	w1, #0x0
    61002644:	540000ab 	b.lt	61002658 <vprintf+0x1d4>  // b.tstop
    61002648:	91002c01 	add	x1, x0, #0xb
    6100264c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002650:	f9000261 	str	x1, [x19]
    61002654:	1400000d 	b	61002688 <vprintf+0x204>
    61002658:	11002022 	add	w2, w1, #0x8
    6100265c:	b9001a62 	str	w2, [x19, #24]
    61002660:	b9401a62 	ldr	w2, [x19, #24]
    61002664:	7100005f 	cmp	w2, #0x0
    61002668:	540000ad 	b.le	6100267c <vprintf+0x1f8>
    6100266c:	91002c01 	add	x1, x0, #0xb
    61002670:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002674:	f9000261 	str	x1, [x19]
    61002678:	14000004 	b	61002688 <vprintf+0x204>
    6100267c:	f9400662 	ldr	x2, [x19, #8]
    61002680:	93407c20 	sxtw	x0, w1
    61002684:	8b000040 	add	x0, x2, x0
    61002688:	b9400000 	ldr	w0, [x0]
    6100268c:	93407c00 	sxtw	x0, w0
    61002690:	f90023e0 	str	x0, [sp, #64]
				if (num < 0) {
    61002694:	f94023e0 	ldr	x0, [sp, #64]
    61002698:	f100001f 	cmp	x0, #0x0
    6100269c:	5400014a 	b.ge	610026c4 <vprintf+0x240>  // b.tcont
					(void)putchar('-');
    610026a0:	528005a0 	mov	w0, #0x2d                  	// #45
    610026a4:	9400016f 	bl	61002c60 <putchar>
					unum = (unsigned long long int)-num;
    610026a8:	f94023e0 	ldr	x0, [sp, #64]
    610026ac:	cb0003e0 	neg	x0, x0
    610026b0:	f90033e0 	str	x0, [sp, #96]
					padn--;
    610026b4:	b9405be0 	ldr	w0, [sp, #88]
    610026b8:	51000400 	sub	w0, w0, #0x1
    610026bc:	b9005be0 	str	w0, [sp, #88]
    610026c0:	14000003 	b	610026cc <vprintf+0x248>
				} else
					unum = (unsigned long long int)num;
    610026c4:	f94023e0 	ldr	x0, [sp, #64]
    610026c8:	f90033e0 	str	x0, [sp, #96]

				count += unsigned_num_print(unum, 10,
    610026cc:	b9405be3 	ldr	w3, [sp, #88]
    610026d0:	39417fe2 	ldrb	w2, [sp, #95]
    610026d4:	52800141 	mov	w1, #0xa                   	// #10
    610026d8:	f94033e0 	ldr	x0, [sp, #96]
    610026dc:	97ffff1f 	bl	61002358 <unsigned_num_print>
    610026e0:	2a0003e1 	mov	w1, w0
    610026e4:	b94057e0 	ldr	w0, [sp, #84]
    610026e8:	0b010000 	add	w0, w0, w1
    610026ec:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    610026f0:	1400011b 	b	61002b5c <vprintf+0x6d8>
			case 's':
				str = va_arg(args, char *);
    610026f4:	b9401a61 	ldr	w1, [x19, #24]
    610026f8:	f9400260 	ldr	x0, [x19]
    610026fc:	7100003f 	cmp	w1, #0x0
    61002700:	540000ab 	b.lt	61002714 <vprintf+0x290>  // b.tstop
    61002704:	91003c01 	add	x1, x0, #0xf
    61002708:	927df021 	and	x1, x1, #0xfffffffffffffff8
    6100270c:	f9000261 	str	x1, [x19]
    61002710:	1400000d 	b	61002744 <vprintf+0x2c0>
    61002714:	11002022 	add	w2, w1, #0x8
    61002718:	b9001a62 	str	w2, [x19, #24]
    6100271c:	b9401a62 	ldr	w2, [x19, #24]
    61002720:	7100005f 	cmp	w2, #0x0
    61002724:	540000ad 	b.le	61002738 <vprintf+0x2b4>
    61002728:	91003c01 	add	x1, x0, #0xf
    6100272c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002730:	f9000261 	str	x1, [x19]
    61002734:	14000004 	b	61002744 <vprintf+0x2c0>
    61002738:	f9400662 	ldr	x2, [x19, #8]
    6100273c:	93407c20 	sxtw	x0, w1
    61002740:	8b000040 	add	x0, x2, x0
    61002744:	f9400000 	ldr	x0, [x0]
    61002748:	f90027e0 	str	x0, [sp, #72]
				count += string_print(str);
    6100274c:	f94027e0 	ldr	x0, [sp, #72]
    61002750:	97fffee5 	bl	610022e4 <string_print>
    61002754:	2a0003e1 	mov	w1, w0
    61002758:	b94057e0 	ldr	w0, [sp, #84]
    6100275c:	0b010000 	add	w0, w0, w1
    61002760:	b90057e0 	str	w0, [sp, #84]
				break;
    61002764:	140000fe 	b	61002b5c <vprintf+0x6d8>
			case 'p':
				unum = (uintptr_t)va_arg(args, void *);
    61002768:	b9401a61 	ldr	w1, [x19, #24]
    6100276c:	f9400260 	ldr	x0, [x19]
    61002770:	7100003f 	cmp	w1, #0x0
    61002774:	540000ab 	b.lt	61002788 <vprintf+0x304>  // b.tstop
    61002778:	91003c01 	add	x1, x0, #0xf
    6100277c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002780:	f9000261 	str	x1, [x19]
    61002784:	1400000d 	b	610027b8 <vprintf+0x334>
    61002788:	11002022 	add	w2, w1, #0x8
    6100278c:	b9001a62 	str	w2, [x19, #24]
    61002790:	b9401a62 	ldr	w2, [x19, #24]
    61002794:	7100005f 	cmp	w2, #0x0
    61002798:	540000ad 	b.le	610027ac <vprintf+0x328>
    6100279c:	91003c01 	add	x1, x0, #0xf
    610027a0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610027a4:	f9000261 	str	x1, [x19]
    610027a8:	14000004 	b	610027b8 <vprintf+0x334>
    610027ac:	f9400662 	ldr	x2, [x19, #8]
    610027b0:	93407c20 	sxtw	x0, w1
    610027b4:	8b000040 	add	x0, x2, x0
    610027b8:	f9400000 	ldr	x0, [x0]
    610027bc:	f90033e0 	str	x0, [sp, #96]
				if (unum > 0U) {
    610027c0:	f94033e0 	ldr	x0, [sp, #96]
    610027c4:	f100001f 	cmp	x0, #0x0
    610027c8:	54000160 	b.eq	610027f4 <vprintf+0x370>  // b.none
					count += string_print("0x");
    610027cc:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610027d0:	911ba000 	add	x0, x0, #0x6e8
    610027d4:	97fffec4 	bl	610022e4 <string_print>
    610027d8:	2a0003e1 	mov	w1, w0
    610027dc:	b94057e0 	ldr	w0, [sp, #84]
    610027e0:	0b010000 	add	w0, w0, w1
    610027e4:	b90057e0 	str	w0, [sp, #84]
					padn -= 2;
    610027e8:	b9405be0 	ldr	w0, [sp, #88]
    610027ec:	51000800 	sub	w0, w0, #0x2
    610027f0:	b9005be0 	str	w0, [sp, #88]
				}

				count += unsigned_num_print(unum, 16,
    610027f4:	b9405be3 	ldr	w3, [sp, #88]
    610027f8:	39417fe2 	ldrb	w2, [sp, #95]
    610027fc:	52800201 	mov	w1, #0x10                  	// #16
    61002800:	f94033e0 	ldr	x0, [sp, #96]
    61002804:	97fffed5 	bl	61002358 <unsigned_num_print>
    61002808:	2a0003e1 	mov	w1, w0
    6100280c:	b94057e0 	ldr	w0, [sp, #84]
    61002810:	0b010000 	add	w0, w0, w1
    61002814:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61002818:	140000d1 	b	61002b5c <vprintf+0x6d8>
			case 'x':
				unum = get_unum_va_args(args, l_count);
    6100281c:	b9406fe0 	ldr	w0, [sp, #108]
    61002820:	7100041f 	cmp	w0, #0x1
    61002824:	540002ed 	b.le	61002880 <vprintf+0x3fc>
    61002828:	b9401a61 	ldr	w1, [x19, #24]
    6100282c:	f9400260 	ldr	x0, [x19]
    61002830:	7100003f 	cmp	w1, #0x0
    61002834:	540000ab 	b.lt	61002848 <vprintf+0x3c4>  // b.tstop
    61002838:	91003c01 	add	x1, x0, #0xf
    6100283c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002840:	f9000261 	str	x1, [x19]
    61002844:	1400000d 	b	61002878 <vprintf+0x3f4>
    61002848:	11002022 	add	w2, w1, #0x8
    6100284c:	b9001a62 	str	w2, [x19, #24]
    61002850:	b9401a62 	ldr	w2, [x19, #24]
    61002854:	7100005f 	cmp	w2, #0x0
    61002858:	540000ad 	b.le	6100286c <vprintf+0x3e8>
    6100285c:	91003c01 	add	x1, x0, #0xf
    61002860:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002864:	f9000261 	str	x1, [x19]
    61002868:	14000004 	b	61002878 <vprintf+0x3f4>
    6100286c:	f9400662 	ldr	x2, [x19, #8]
    61002870:	93407c20 	sxtw	x0, w1
    61002874:	8b000040 	add	x0, x2, x0
    61002878:	f9400000 	ldr	x0, [x0]
    6100287c:	14000030 	b	6100293c <vprintf+0x4b8>
    61002880:	b9406fe0 	ldr	w0, [sp, #108]
    61002884:	7100041f 	cmp	w0, #0x1
    61002888:	540002e1 	b.ne	610028e4 <vprintf+0x460>  // b.any
    6100288c:	b9401a61 	ldr	w1, [x19, #24]
    61002890:	f9400260 	ldr	x0, [x19]
    61002894:	7100003f 	cmp	w1, #0x0
    61002898:	540000ab 	b.lt	610028ac <vprintf+0x428>  // b.tstop
    6100289c:	91003c01 	add	x1, x0, #0xf
    610028a0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610028a4:	f9000261 	str	x1, [x19]
    610028a8:	1400000d 	b	610028dc <vprintf+0x458>
    610028ac:	11002022 	add	w2, w1, #0x8
    610028b0:	b9001a62 	str	w2, [x19, #24]
    610028b4:	b9401a62 	ldr	w2, [x19, #24]
    610028b8:	7100005f 	cmp	w2, #0x0
    610028bc:	540000ad 	b.le	610028d0 <vprintf+0x44c>
    610028c0:	91003c01 	add	x1, x0, #0xf
    610028c4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610028c8:	f9000261 	str	x1, [x19]
    610028cc:	14000004 	b	610028dc <vprintf+0x458>
    610028d0:	f9400662 	ldr	x2, [x19, #8]
    610028d4:	93407c20 	sxtw	x0, w1
    610028d8:	8b000040 	add	x0, x2, x0
    610028dc:	f9400000 	ldr	x0, [x0]
    610028e0:	14000017 	b	6100293c <vprintf+0x4b8>
    610028e4:	b9401a61 	ldr	w1, [x19, #24]
    610028e8:	f9400260 	ldr	x0, [x19]
    610028ec:	7100003f 	cmp	w1, #0x0
    610028f0:	540000ab 	b.lt	61002904 <vprintf+0x480>  // b.tstop
    610028f4:	91002c01 	add	x1, x0, #0xb
    610028f8:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610028fc:	f9000261 	str	x1, [x19]
    61002900:	1400000d 	b	61002934 <vprintf+0x4b0>
    61002904:	11002022 	add	w2, w1, #0x8
    61002908:	b9001a62 	str	w2, [x19, #24]
    6100290c:	b9401a62 	ldr	w2, [x19, #24]
    61002910:	7100005f 	cmp	w2, #0x0
    61002914:	540000ad 	b.le	61002928 <vprintf+0x4a4>
    61002918:	91002c01 	add	x1, x0, #0xb
    6100291c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002920:	f9000261 	str	x1, [x19]
    61002924:	14000004 	b	61002934 <vprintf+0x4b0>
    61002928:	f9400662 	ldr	x2, [x19, #8]
    6100292c:	93407c20 	sxtw	x0, w1
    61002930:	8b000040 	add	x0, x2, x0
    61002934:	b9400000 	ldr	w0, [x0]
    61002938:	2a0003e0 	mov	w0, w0
    6100293c:	f90033e0 	str	x0, [sp, #96]
				count += unsigned_num_print(unum, 16,
    61002940:	b9405be3 	ldr	w3, [sp, #88]
    61002944:	39417fe2 	ldrb	w2, [sp, #95]
    61002948:	52800201 	mov	w1, #0x10                  	// #16
    6100294c:	f94033e0 	ldr	x0, [sp, #96]
    61002950:	97fffe82 	bl	61002358 <unsigned_num_print>
    61002954:	2a0003e1 	mov	w1, w0
    61002958:	b94057e0 	ldr	w0, [sp, #84]
    6100295c:	0b010000 	add	w0, w0, w1
    61002960:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61002964:	1400007e 	b	61002b5c <vprintf+0x6d8>
			case 'z':
				if (sizeof(size_t) == 8U)
					l_count = 2;
    61002968:	52800040 	mov	w0, #0x2                   	// #2
    6100296c:	b9006fe0 	str	w0, [sp, #108]

				fmt++;
    61002970:	f94017e0 	ldr	x0, [sp, #40]
    61002974:	91000400 	add	x0, x0, #0x1
    61002978:	f90017e0 	str	x0, [sp, #40]
				goto loop;
    6100297c:	17fffed3 	b	610024c8 <vprintf+0x44>
			case 'l':
				l_count++;
    61002980:	b9406fe0 	ldr	w0, [sp, #108]
    61002984:	11000400 	add	w0, w0, #0x1
    61002988:	b9006fe0 	str	w0, [sp, #108]
				fmt++;
    6100298c:	f94017e0 	ldr	x0, [sp, #40]
    61002990:	91000400 	add	x0, x0, #0x1
    61002994:	f90017e0 	str	x0, [sp, #40]
				goto loop;
    61002998:	17fffecc 	b	610024c8 <vprintf+0x44>
			case 'u':
				unum = get_unum_va_args(args, l_count);
    6100299c:	b9406fe0 	ldr	w0, [sp, #108]
    610029a0:	7100041f 	cmp	w0, #0x1
    610029a4:	540002ed 	b.le	61002a00 <vprintf+0x57c>
    610029a8:	b9401a61 	ldr	w1, [x19, #24]
    610029ac:	f9400260 	ldr	x0, [x19]
    610029b0:	7100003f 	cmp	w1, #0x0
    610029b4:	540000ab 	b.lt	610029c8 <vprintf+0x544>  // b.tstop
    610029b8:	91003c01 	add	x1, x0, #0xf
    610029bc:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610029c0:	f9000261 	str	x1, [x19]
    610029c4:	1400000d 	b	610029f8 <vprintf+0x574>
    610029c8:	11002022 	add	w2, w1, #0x8
    610029cc:	b9001a62 	str	w2, [x19, #24]
    610029d0:	b9401a62 	ldr	w2, [x19, #24]
    610029d4:	7100005f 	cmp	w2, #0x0
    610029d8:	540000ad 	b.le	610029ec <vprintf+0x568>
    610029dc:	91003c01 	add	x1, x0, #0xf
    610029e0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610029e4:	f9000261 	str	x1, [x19]
    610029e8:	14000004 	b	610029f8 <vprintf+0x574>
    610029ec:	f9400662 	ldr	x2, [x19, #8]
    610029f0:	93407c20 	sxtw	x0, w1
    610029f4:	8b000040 	add	x0, x2, x0
    610029f8:	f9400000 	ldr	x0, [x0]
    610029fc:	14000030 	b	61002abc <vprintf+0x638>
    61002a00:	b9406fe0 	ldr	w0, [sp, #108]
    61002a04:	7100041f 	cmp	w0, #0x1
    61002a08:	540002e1 	b.ne	61002a64 <vprintf+0x5e0>  // b.any
    61002a0c:	b9401a61 	ldr	w1, [x19, #24]
    61002a10:	f9400260 	ldr	x0, [x19]
    61002a14:	7100003f 	cmp	w1, #0x0
    61002a18:	540000ab 	b.lt	61002a2c <vprintf+0x5a8>  // b.tstop
    61002a1c:	91003c01 	add	x1, x0, #0xf
    61002a20:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002a24:	f9000261 	str	x1, [x19]
    61002a28:	1400000d 	b	61002a5c <vprintf+0x5d8>
    61002a2c:	11002022 	add	w2, w1, #0x8
    61002a30:	b9001a62 	str	w2, [x19, #24]
    61002a34:	b9401a62 	ldr	w2, [x19, #24]
    61002a38:	7100005f 	cmp	w2, #0x0
    61002a3c:	540000ad 	b.le	61002a50 <vprintf+0x5cc>
    61002a40:	91003c01 	add	x1, x0, #0xf
    61002a44:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002a48:	f9000261 	str	x1, [x19]
    61002a4c:	14000004 	b	61002a5c <vprintf+0x5d8>
    61002a50:	f9400662 	ldr	x2, [x19, #8]
    61002a54:	93407c20 	sxtw	x0, w1
    61002a58:	8b000040 	add	x0, x2, x0
    61002a5c:	f9400000 	ldr	x0, [x0]
    61002a60:	14000017 	b	61002abc <vprintf+0x638>
    61002a64:	b9401a61 	ldr	w1, [x19, #24]
    61002a68:	f9400260 	ldr	x0, [x19]
    61002a6c:	7100003f 	cmp	w1, #0x0
    61002a70:	540000ab 	b.lt	61002a84 <vprintf+0x600>  // b.tstop
    61002a74:	91002c01 	add	x1, x0, #0xb
    61002a78:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002a7c:	f9000261 	str	x1, [x19]
    61002a80:	1400000d 	b	61002ab4 <vprintf+0x630>
    61002a84:	11002022 	add	w2, w1, #0x8
    61002a88:	b9001a62 	str	w2, [x19, #24]
    61002a8c:	b9401a62 	ldr	w2, [x19, #24]
    61002a90:	7100005f 	cmp	w2, #0x0
    61002a94:	540000ad 	b.le	61002aa8 <vprintf+0x624>
    61002a98:	91002c01 	add	x1, x0, #0xb
    61002a9c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002aa0:	f9000261 	str	x1, [x19]
    61002aa4:	14000004 	b	61002ab4 <vprintf+0x630>
    61002aa8:	f9400662 	ldr	x2, [x19, #8]
    61002aac:	93407c20 	sxtw	x0, w1
    61002ab0:	8b000040 	add	x0, x2, x0
    61002ab4:	b9400000 	ldr	w0, [x0]
    61002ab8:	2a0003e0 	mov	w0, w0
    61002abc:	f90033e0 	str	x0, [sp, #96]
				count += unsigned_num_print(unum, 10,
    61002ac0:	b9405be3 	ldr	w3, [sp, #88]
    61002ac4:	39417fe2 	ldrb	w2, [sp, #95]
    61002ac8:	52800141 	mov	w1, #0xa                   	// #10
    61002acc:	f94033e0 	ldr	x0, [sp, #96]
    61002ad0:	97fffe22 	bl	61002358 <unsigned_num_print>
    61002ad4:	2a0003e1 	mov	w1, w0
    61002ad8:	b94057e0 	ldr	w0, [sp, #84]
    61002adc:	0b010000 	add	w0, w0, w1
    61002ae0:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61002ae4:	1400001e 	b	61002b5c <vprintf+0x6d8>
			case '0':
				padc = '0';
    61002ae8:	52800600 	mov	w0, #0x30                  	// #48
    61002aec:	39017fe0 	strb	w0, [sp, #95]
				padn = 0;
    61002af0:	b9005bff 	str	wzr, [sp, #88]
				fmt++;
    61002af4:	f94017e0 	ldr	x0, [sp, #40]
    61002af8:	91000400 	add	x0, x0, #0x1
    61002afc:	f90017e0 	str	x0, [sp, #40]

				for (;;) {
					char ch = *fmt;
    61002b00:	f94017e0 	ldr	x0, [sp, #40]
    61002b04:	39400000 	ldrb	w0, [x0]
    61002b08:	3900ffe0 	strb	w0, [sp, #63]
					if ((ch < '0') || (ch > '9')) {
    61002b0c:	3940ffe0 	ldrb	w0, [sp, #63]
    61002b10:	7100bc1f 	cmp	w0, #0x2f
    61002b14:	54ffcda9 	b.ls	610024c8 <vprintf+0x44>  // b.plast
    61002b18:	3940ffe0 	ldrb	w0, [sp, #63]
    61002b1c:	7100e41f 	cmp	w0, #0x39
    61002b20:	54000049 	b.ls	61002b28 <vprintf+0x6a4>  // b.plast
						goto loop;
    61002b24:	17fffe69 	b	610024c8 <vprintf+0x44>
					}
					padn = (padn * 10) + (ch - '0');
    61002b28:	b9405be1 	ldr	w1, [sp, #88]
    61002b2c:	52800140 	mov	w0, #0xa                   	// #10
    61002b30:	1b007c21 	mul	w1, w1, w0
    61002b34:	3940ffe0 	ldrb	w0, [sp, #63]
    61002b38:	5100c000 	sub	w0, w0, #0x30
    61002b3c:	0b000020 	add	w0, w1, w0
    61002b40:	b9005be0 	str	w0, [sp, #88]
					fmt++;
    61002b44:	f94017e0 	ldr	x0, [sp, #40]
    61002b48:	91000400 	add	x0, x0, #0x1
    61002b4c:	f90017e0 	str	x0, [sp, #40]
				for (;;) {
    61002b50:	17ffffec 	b	61002b00 <vprintf+0x67c>
				}
				assert(0); /* Unreachable */
			default:
				/* Exit on any other format specifier */
				return -1;
    61002b54:	12800000 	mov	w0, #0xffffffff            	// #-1
    61002b58:	14000013 	b	61002ba4 <vprintf+0x720>
			}
			fmt++;
    61002b5c:	f94017e0 	ldr	x0, [sp, #40]
    61002b60:	91000400 	add	x0, x0, #0x1
    61002b64:	f90017e0 	str	x0, [sp, #40]
			continue;
    61002b68:	1400000a 	b	61002b90 <vprintf+0x70c>
		}
		(void)putchar(*fmt);
    61002b6c:	f94017e0 	ldr	x0, [sp, #40]
    61002b70:	39400000 	ldrb	w0, [x0]
    61002b74:	9400003b 	bl	61002c60 <putchar>
		fmt++;
    61002b78:	f94017e0 	ldr	x0, [sp, #40]
    61002b7c:	91000400 	add	x0, x0, #0x1
    61002b80:	f90017e0 	str	x0, [sp, #40]
		count++;
    61002b84:	b94057e0 	ldr	w0, [sp, #84]
    61002b88:	11000400 	add	w0, w0, #0x1
    61002b8c:	b90057e0 	str	w0, [sp, #84]
	while (*fmt != '\0') {
    61002b90:	f94017e0 	ldr	x0, [sp, #40]
    61002b94:	39400000 	ldrb	w0, [x0]
    61002b98:	7100001f 	cmp	w0, #0x0
    61002b9c:	54ffc841 	b.ne	610024a4 <vprintf+0x20>  // b.any
	}

	return count;
    61002ba0:	b94057e0 	ldr	w0, [sp, #84]
}
    61002ba4:	f9400bf3 	ldr	x19, [sp, #16]
    61002ba8:	a8c77bfd 	ldp	x29, x30, [sp], #112
    61002bac:	d65f03c0 	ret

Disassembly of section .text.printf:

0000000061002bb0 <printf>:

int printf(const char *fmt, ...)
{
    61002bb0:	a9ad7bfd 	stp	x29, x30, [sp, #-304]!
    61002bb4:	910003fd 	mov	x29, sp
    61002bb8:	f9001fe0 	str	x0, [sp, #56]
    61002bbc:	f9007fe1 	str	x1, [sp, #248]
    61002bc0:	f90083e2 	str	x2, [sp, #256]
    61002bc4:	f90087e3 	str	x3, [sp, #264]
    61002bc8:	f9008be4 	str	x4, [sp, #272]
    61002bcc:	f9008fe5 	str	x5, [sp, #280]
    61002bd0:	f90093e6 	str	x6, [sp, #288]
    61002bd4:	f90097e7 	str	x7, [sp, #296]
    61002bd8:	3d801fe0 	str	q0, [sp, #112]
    61002bdc:	3d8023e1 	str	q1, [sp, #128]
    61002be0:	3d8027e2 	str	q2, [sp, #144]
    61002be4:	3d802be3 	str	q3, [sp, #160]
    61002be8:	3d802fe4 	str	q4, [sp, #176]
    61002bec:	3d8033e5 	str	q5, [sp, #192]
    61002bf0:	3d8037e6 	str	q6, [sp, #208]
    61002bf4:	3d803be7 	str	q7, [sp, #224]
	int count;
	va_list va;

	va_start(va, fmt);
    61002bf8:	9104c3e0 	add	x0, sp, #0x130
    61002bfc:	f90027e0 	str	x0, [sp, #72]
    61002c00:	9104c3e0 	add	x0, sp, #0x130
    61002c04:	f9002be0 	str	x0, [sp, #80]
    61002c08:	9103c3e0 	add	x0, sp, #0xf0
    61002c0c:	f9002fe0 	str	x0, [sp, #88]
    61002c10:	128006e0 	mov	w0, #0xffffffc8            	// #-56
    61002c14:	b90063e0 	str	w0, [sp, #96]
    61002c18:	12800fe0 	mov	w0, #0xffffff80            	// #-128
    61002c1c:	b90067e0 	str	w0, [sp, #100]
	count = vprintf(fmt, va);
    61002c20:	f94027e0 	ldr	x0, [sp, #72]
    61002c24:	f9000be0 	str	x0, [sp, #16]
    61002c28:	f9402be0 	ldr	x0, [sp, #80]
    61002c2c:	f9000fe0 	str	x0, [sp, #24]
    61002c30:	f9402fe0 	ldr	x0, [sp, #88]
    61002c34:	f90013e0 	str	x0, [sp, #32]
    61002c38:	f94033e0 	ldr	x0, [sp, #96]
    61002c3c:	f90017e0 	str	x0, [sp, #40]
    61002c40:	910043e0 	add	x0, sp, #0x10
    61002c44:	aa0003e1 	mov	x1, x0
    61002c48:	f9401fe0 	ldr	x0, [sp, #56]
    61002c4c:	97fffe0e 	bl	61002484 <vprintf>
    61002c50:	b9006fe0 	str	w0, [sp, #108]
	va_end(va);

	return count;
    61002c54:	b9406fe0 	ldr	w0, [sp, #108]
}
    61002c58:	a8d37bfd 	ldp	x29, x30, [sp], #304
    61002c5c:	d65f03c0 	ret

Disassembly of section .text.putchar:

0000000061002c60 <putchar>:

#include <stdio.h>
#include "nuclei_sdk_hal.h"

int putchar(int c)
{
    61002c60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002c64:	910003fd 	mov	x29, sp
    61002c68:	b9001fe0 	str	w0, [sp, #28]
	return uart_write(SOC_DEBUG_UART, c);
    61002c6c:	b9401fe0 	ldr	w0, [sp, #28]
    61002c70:	12001c00 	and	w0, w0, #0xff
    61002c74:	2a0003e1 	mov	w1, w0
    61002c78:	d2bf0800 	mov	x0, #0xf8400000            	// #4164943872
    61002c7c:	9400028b 	bl	610036a8 <uart_write>
}
    61002c80:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002c84:	d65f03c0 	ret

Disassembly of section .text.strcmp:

0000000061002c88 <strcmp>:
/*
 * Compare strings.
 */
int
strcmp(const char *s1, const char *s2)
{
    61002c88:	d10043ff 	sub	sp, sp, #0x10
    61002c8c:	f90007e0 	str	x0, [sp, #8]
    61002c90:	f90003e1 	str	x1, [sp]
	while (*s1 == *s2++)
    61002c94:	14000009 	b	61002cb8 <strcmp+0x30>
		if (*s1++ == '\0')
    61002c98:	f94007e0 	ldr	x0, [sp, #8]
    61002c9c:	91000401 	add	x1, x0, #0x1
    61002ca0:	f90007e1 	str	x1, [sp, #8]
    61002ca4:	39400000 	ldrb	w0, [x0]
    61002ca8:	7100001f 	cmp	w0, #0x0
    61002cac:	54000061 	b.ne	61002cb8 <strcmp+0x30>  // b.any
			return (0);
    61002cb0:	52800000 	mov	w0, #0x0                   	// #0
    61002cb4:	14000010 	b	61002cf4 <strcmp+0x6c>
	while (*s1 == *s2++)
    61002cb8:	f94007e0 	ldr	x0, [sp, #8]
    61002cbc:	39400001 	ldrb	w1, [x0]
    61002cc0:	f94003e0 	ldr	x0, [sp]
    61002cc4:	91000402 	add	x2, x0, #0x1
    61002cc8:	f90003e2 	str	x2, [sp]
    61002ccc:	39400000 	ldrb	w0, [x0]
    61002cd0:	6b00003f 	cmp	w1, w0
    61002cd4:	54fffe20 	b.eq	61002c98 <strcmp+0x10>  // b.none
	return (*(const unsigned char *)s1 - *(const unsigned char *)(s2 - 1));
    61002cd8:	f94007e0 	ldr	x0, [sp, #8]
    61002cdc:	39400000 	ldrb	w0, [x0]
    61002ce0:	2a0003e1 	mov	w1, w0
    61002ce4:	f94003e0 	ldr	x0, [sp]
    61002ce8:	d1000400 	sub	x0, x0, #0x1
    61002cec:	39400000 	ldrb	w0, [x0]
    61002cf0:	4b000020 	sub	w0, w1, w0
}
    61002cf4:	910043ff 	add	sp, sp, #0x10
    61002cf8:	d65f03c0 	ret

Disassembly of section .text.__delay:

0000000061002cfc <__delay>:
 * @param {u64_t} count
 * @return {*}
 */

static void __delay(u64_t count)
{
    61002cfc:	d100c3ff 	sub	sp, sp, #0x30
    61002d00:	f90007e0 	str	x0, [sp, #8]
	u64_t tEnd, tCur;
	tCur = read_sysreg(CNTPCT_EL0);
    61002d04:	d53be020 	mrs	x0, cntpct_el0
    61002d08:	f90017e0 	str	x0, [sp, #40]
    61002d0c:	f94017e0 	ldr	x0, [sp, #40]
    61002d10:	f90013e0 	str	x0, [sp, #32]
	tEnd = tCur +count;
    61002d14:	f94013e1 	ldr	x1, [sp, #32]
    61002d18:	f94007e0 	ldr	x0, [sp, #8]
    61002d1c:	8b000020 	add	x0, x1, x0
    61002d20:	f9000fe0 	str	x0, [sp, #24]
	do {
		tCur = read_sysreg(CNTPCT_EL0);
    61002d24:	d53be020 	mrs	x0, cntpct_el0
    61002d28:	f9000be0 	str	x0, [sp, #16]
    61002d2c:	f9400be0 	ldr	x0, [sp, #16]
    61002d30:	f90013e0 	str	x0, [sp, #32]
	} while (tCur < tEnd);
    61002d34:	f94013e1 	ldr	x1, [sp, #32]
    61002d38:	f9400fe0 	ldr	x0, [sp, #24]
    61002d3c:	eb00003f 	cmp	x1, x0
    61002d40:	54ffff23 	b.cc	61002d24 <__delay+0x28>  // b.lo, b.ul, b.last
}
    61002d44:	d503201f 	nop
    61002d48:	d503201f 	nop
    61002d4c:	9100c3ff 	add	sp, sp, #0x30
    61002d50:	d65f03c0 	ret

Disassembly of section .text.syscnt_get_freq:

0000000061002d54 <syscnt_get_freq>:
 * @desc  : get cpu system counter freq
 * @param {*}
 * @return: system counter freq
 */
static u64_t syscnt_get_freq(void)
{
    61002d54:	d10043ff 	sub	sp, sp, #0x10
	unsigned int freq;

	asm volatile(
    61002d58:	d53be000 	mrs	x0, cntfrq_el0
    61002d5c:	b9000fe0 	str	w0, [sp, #12]
		"mrs %0, cntfrq_el0"
		: "=r" (freq)
		:
		: "memory");

	return freq;
    61002d60:	b9400fe0 	ldr	w0, [sp, #12]
}
    61002d64:	910043ff 	add	sp, sp, #0x10
    61002d68:	d65f03c0 	ret

Disassembly of section .text.get_SystickTimer:

0000000061002d6c <get_SystickTimer>:

u64 get_SystickTimer(void)
{
    61002d6c:	d10043ff 	sub	sp, sp, #0x10
	return read_sysreg(CNTPCT_EL0);
    61002d70:	d53be020 	mrs	x0, cntpct_el0
    61002d74:	f90007e0 	str	x0, [sp, #8]
    61002d78:	f94007e0 	ldr	x0, [sp, #8]
}
    61002d7c:	910043ff 	add	sp, sp, #0x10
    61002d80:	d65f03c0 	ret

Disassembly of section .text.get_MTimerOutValue:

0000000061002d84 <get_MTimerOutValue>:

uint64_t get_MTimerOutValue(uint64_t count)
{
    61002d84:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61002d88:	910003fd 	mov	x29, sp
    61002d8c:	f9000fe0 	str	x0, [sp, #24]
	u64_t freq = syscnt_get_freq();
    61002d90:	97fffff1 	bl	61002d54 <syscnt_get_freq>
    61002d94:	f90017e0 	str	x0, [sp, #40]
    return (count*(freq/2000000));
    61002d98:	f94017e1 	ldr	x1, [sp, #40]
    61002d9c:	d2869b60 	mov	x0, #0x34db                	// #13531
    61002da0:	f2baf6c0 	movk	x0, #0xd7b6, lsl #16
    61002da4:	f2dbd040 	movk	x0, #0xde82, lsl #32
    61002da8:	f2e86360 	movk	x0, #0x431b, lsl #48
    61002dac:	9bc07c20 	umulh	x0, x1, x0
    61002db0:	d353fc01 	lsr	x1, x0, #19
    61002db4:	f9400fe0 	ldr	x0, [sp, #24]
    61002db8:	9b007c20 	mul	x0, x1, x0
}
    61002dbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002dc0:	d65f03c0 	ret

Disassembly of section .text._delay_ms:

0000000061002dc4 <_delay_ms>:
    u64_t delay_cnt = (u64_t)(count*(freq/2000000));	//寄存器50MHz实际25MHz
    __delay(delay_cnt);
}

void _delay_ms(u64_t count)
{
    61002dc4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61002dc8:	910003fd 	mov	x29, sp
    61002dcc:	f9000fe0 	str	x0, [sp, #24]
    u64_t freq = syscnt_get_freq();
    61002dd0:	97ffffe1 	bl	61002d54 <syscnt_get_freq>
    61002dd4:	f90017e0 	str	x0, [sp, #40]
    u64_t delay_cnt = (u64_t)(count*(freq/2000));
    61002dd8:	f94017e0 	ldr	x0, [sp, #40]
    61002ddc:	d344fc01 	lsr	x1, x0, #4
    61002de0:	d287efa0 	mov	x0, #0x3f7d                	// #16253
    61002de4:	f2abc6a0 	movk	x0, #0x5e35, lsl #16
    61002de8:	f2c93740 	movk	x0, #0x49ba, lsl #32
    61002dec:	f2e04180 	movk	x0, #0x20c, lsl #48
    61002df0:	9bc07c20 	umulh	x0, x1, x0
    61002df4:	aa0003e1 	mov	x1, x0
    61002df8:	f9400fe0 	ldr	x0, [sp, #24]
    61002dfc:	9b017c00 	mul	x0, x0, x1
    61002e00:	f90013e0 	str	x0, [sp, #32]
    __delay(delay_cnt);
    61002e04:	f94013e0 	ldr	x0, [sp, #32]
    61002e08:	97ffffbd 	bl	61002cfc <__delay>
}
    61002e0c:	d503201f 	nop
    61002e10:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002e14:	d65f03c0 	ret

Disassembly of section .text.panic:

0000000061002e18 <panic>:

static void panic(void)
{
	error_print("warning: system hang here, waiting for exiting\n");

	while (1)
    61002e18:	14000000 	b	61002e18 <panic>

Disassembly of section .text.do_bad_sync:

0000000061002e1c <do_bad_sync>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_sync(struct pt_regs *pt_regs, unsigned int esr)
{
    61002e1c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002e20:	910003fd 	mov	x29, sp
    61002e24:	f9000fe0 	str	x0, [sp, #24]
    61002e28:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Synchronous Abort at current el with sp0\" handler, but not found your handle implement.\n");
	panic();
    61002e2c:	97fffffb 	bl	61002e18 <panic>
}
    61002e30:	d503201f 	nop
    61002e34:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002e38:	d65f03c0 	ret

Disassembly of section .text.do_bad_irq:

0000000061002e3c <do_bad_irq>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_irq(struct pt_regs *pt_regs, unsigned int esr)
{
    61002e3c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002e40:	910003fd 	mov	x29, sp
    61002e44:	f9000fe0 	str	x0, [sp, #24]
    61002e48:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Irq at current el with sp0 \" handler\n, but not found your handle implement.");
	panic();
    61002e4c:	97fffff3 	bl	61002e18 <panic>
}
    61002e50:	d503201f 	nop
    61002e54:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002e58:	d65f03c0 	ret

Disassembly of section .text.do_bad_fiq:

0000000061002e5c <do_bad_fiq>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_fiq(struct pt_regs *pt_regs, unsigned int esr)
{
    61002e5c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002e60:	910003fd 	mov	x29, sp
    61002e64:	f9000fe0 	str	x0, [sp, #24]
    61002e68:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Fiq at current el with sp0\" handler, but not found your handle implement.\n");
	panic();
    61002e6c:	97ffffeb 	bl	61002e18 <panic>
}
    61002e70:	d503201f 	nop
    61002e74:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002e78:	d65f03c0 	ret

Disassembly of section .text.do_bad_error:

0000000061002e7c <do_bad_error>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_error(struct pt_regs *pt_regs, unsigned int esr)
{
    61002e7c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002e80:	910003fd 	mov	x29, sp
    61002e84:	f9000fe0 	str	x0, [sp, #24]
    61002e88:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Error at current el with sp0\" handler, but not found your handle implement.\n");
	panic();
    61002e8c:	97ffffe3 	bl	61002e18 <panic>
}
    61002e90:	d503201f 	nop
    61002e94:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002e98:	d65f03c0 	ret

Disassembly of section .text.do_sync_handle:

0000000061002e9c <do_sync_handle>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_sync_handle(struct pt_regs *pt_regs, unsigned int esr)
{
    61002e9c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002ea0:	910003fd 	mov	x29, sp
    61002ea4:	f9000fe0 	str	x0, [sp, #24]
    61002ea8:	b90017e1 	str	w1, [sp, #20]
	error_print("\"Synchronous Abort at current el with spx\" handler, but not found your handle implement.\n\r");
	panic();
    61002eac:	97ffffdb 	bl	61002e18 <panic>
}
    61002eb0:	d503201f 	nop
    61002eb4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002eb8:	d65f03c0 	ret

Disassembly of section .text.do_error:

0000000061002ebc <do_error>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_error(struct pt_regs *pt_regs, unsigned int esr)
{
    61002ebc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002ec0:	910003fd 	mov	x29, sp
    61002ec4:	f9000fe0 	str	x0, [sp, #24]
    61002ec8:	b90017e1 	str	w1, [sp, #20]
	error_print("\"Error at current el with spx\" handler, but not found your handle implement.");
	panic();
    61002ecc:	97ffffd3 	bl	61002e18 <panic>
}
    61002ed0:	d503201f 	nop
    61002ed4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61002ed8:	d65f03c0 	ret

Disassembly of section .text.SystemBannerPrint:

0000000061002edc <SystemBannerPrint>:

/** @} */ /* End of Doxygen Group NMSIS_Core_ExceptionAndNMI */

/** Banner Print for Nuclei SDK */
void SystemBannerPrint(void)
{
    61002edc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61002ee0:	910003fd 	mov	x29, sp
#if defined(NUCLEI_BANNER) && (NUCLEI_BANNER == 1)
#ifndef DOWNLOAD_MODE
#error DOWNLOAD_MODE is not defined via build system, please check!
#endif
    const char* download_modes[] = {"FLASHXIP", "FLASH", "ILM", "DDR"};
    61002ee4:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002ee8:	911bc000 	add	x0, x0, #0x6f0
    61002eec:	f9000be0 	str	x0, [sp, #16]
    61002ef0:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002ef4:	911c0000 	add	x0, x0, #0x700
    61002ef8:	f9000fe0 	str	x0, [sp, #24]
    61002efc:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f00:	911c2000 	add	x0, x0, #0x708
    61002f04:	f90013e0 	str	x0, [sp, #32]
    61002f08:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f0c:	911c4000 	add	x0, x0, #0x710
    61002f10:	f90017e0 	str	x0, [sp, #40]
    printf("Anlogic APU SDK Build Time: %s, %s\r\n", __DATE__, __TIME__);
    61002f14:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f18:	911c6002 	add	x2, x0, #0x718
    61002f1c:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f20:	911ca001 	add	x1, x0, #0x728
    61002f24:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f28:	911ce000 	add	x0, x0, #0x738
    61002f2c:	97ffff21 	bl	61002bb0 <printf>
    printf("Download Mode: %s\r\n", download_modes[DOWNLOAD_MODE]);
    61002f30:	f94013e0 	ldr	x0, [sp, #32]
    61002f34:	aa0003e1 	mov	x1, x0
    61002f38:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f3c:	911d8000 	add	x0, x0, #0x760
    61002f40:	97ffff1c 	bl	61002bb0 <printf>
    printf("CPU Frequency %lu Hz\r\n", SystemCoreClock);
    61002f44:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f48:	913a0000 	add	x0, x0, #0xe80
    61002f4c:	b9400000 	ldr	w0, [x0]
    61002f50:	2a0003e1 	mov	w1, w0
    61002f54:	90000020 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61002f58:	911de000 	add	x0, x0, #0x778
    61002f5c:	97ffff15 	bl	61002bb0 <printf>
#endif
}
    61002f60:	d503201f 	nop
    61002f64:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002f68:	d65f03c0 	ret

Disassembly of section .text._premain_init:

0000000061002f6c <_premain_init>:
 * For RISC-V gnu toolchain, _init function might not be called
 * by __libc_init_array function, so we defined a new function
 * to do initialization
 */
void _premain_init(void)
{
    61002f6c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61002f70:	910003fd 	mov	x29, sp
#endif
    SystemCoreClock = get_cpu_freq();
    gpio_iof_config(GPIO, IOF0_UART0_MASK, IOF_SEL_0);
    uart_init(SOC_DEBUG_UART, 115200);
#else
    Enablepinmux1();
    61002f74:	9400000d 	bl	61002fa8 <Enablepinmux1>
	AlUart_Init(AL_UART0, 115200, UART_BIT_LENGTH_8, AL_UART_STOP_BIT_1);
    61002f78:	52800003 	mov	w3, #0x0                   	// #0
    61002f7c:	52800062 	mov	w2, #0x3                   	// #3
    61002f80:	52984001 	mov	w1, #0xc200                	// #49664
    61002f84:	72a00021 	movk	w1, #0x1, lsl #16
    61002f88:	d2bf0800 	mov	x0, #0xf8400000            	// #4164943872
    61002f8c:	94000105 	bl	610033a0 <AlUart_Init>
	/* Display banner after UART initialized */
	SystemBannerPrint();
    61002f90:	97ffffd3 	bl	61002edc <SystemBannerPrint>
	gicv3_init();
    61002f94:	97fffbdc 	bl	61001f04 <gicv3_init>
	generic_timer_init();
    61002f98:	97fff985 	bl	610015ac <generic_timer_init>
#endif

}
    61002f9c:	d503201f 	nop
    61002fa0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61002fa4:	d65f03c0 	ret

Disassembly of section .text.Enablepinmux1:

0000000061002fa8 <Enablepinmux1>:
    \retval
*/

 void Enablepinmux1(void)
{ 
     *(uint32_t *)(0xf8803000u) =0x1;	  //QSPI  MIO0
    61002fa8:	d2860000 	mov	x0, #0x3000                	// #12288
    61002fac:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002fb0:	52800021 	mov	w1, #0x1                   	// #1
    61002fb4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803004u) =0x1;
    61002fb8:	d2860080 	mov	x0, #0x3004                	// #12292
    61002fbc:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002fc0:	52800021 	mov	w1, #0x1                   	// #1
    61002fc4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803008u) =0x1;
    61002fc8:	d2860100 	mov	x0, #0x3008                	// #12296
    61002fcc:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002fd0:	52800021 	mov	w1, #0x1                   	// #1
    61002fd4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880300cu) =0x1;
    61002fd8:	d2860180 	mov	x0, #0x300c                	// #12300
    61002fdc:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002fe0:	52800021 	mov	w1, #0x1                   	// #1
    61002fe4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803010u) =0x1;
    61002fe8:	d2860200 	mov	x0, #0x3010                	// #12304
    61002fec:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002ff0:	52800021 	mov	w1, #0x1                   	// #1
    61002ff4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803014u) =0x1;
    61002ff8:	d2860280 	mov	x0, #0x3014                	// #12308
    61002ffc:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003000:	52800021 	mov	w1, #0x1                   	// #1
    61003004:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803018u) =0x1;   
    61003008:	d2860300 	mov	x0, #0x3018                	// #12312
    6100300c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003010:	52800021 	mov	w1, #0x1                   	// #1
    61003014:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf880301cu) =0x4;    //GPIO MIO7
    61003018:	d2860380 	mov	x0, #0x301c                	// #12316
    6100301c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003020:	52800081 	mov	w1, #0x4                   	// #4
    61003024:	b9000001 	str	w1, [x0]
	 
     *(uint32_t *)(0xf8803020u) =0x1;    //CAN1 MIO8
    61003028:	d2860400 	mov	x0, #0x3020                	// #12320
    6100302c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003030:	52800021 	mov	w1, #0x1                   	// #1
    61003034:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803024u) =0x1;
    61003038:	d2860480 	mov	x0, #0x3024                	// #12324
    6100303c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003040:	52800021 	mov	w1, #0x1                   	// #1
    61003044:	b9000001 	str	w1, [x0]
	 *(uint32_t *)(0xf880340cu) =0x1;    //sel3
    61003048:	d2868180 	mov	x0, #0x340c                	// #13324
    6100304c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003050:	52800021 	mov	w1, #0x1                   	// #1
    61003054:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf8803028u) =0x4;    //GPIO MIO10
    61003058:	d2860500 	mov	x0, #0x3028                	// #12328
    6100305c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003060:	52800081 	mov	w1, #0x4                   	// #4
    61003064:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880302cu) =0x4;    //GPIO MIO11
    61003068:	d2860580 	mov	x0, #0x302c                	// #12332
    6100306c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003070:	52800081 	mov	w1, #0x4                   	// #4
    61003074:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf8803030u) =0x0;    //I2C1 MIO12
    61003078:	d2860600 	mov	x0, #0x3030                	// #12336
    6100307c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003080:	b900001f 	str	wzr, [x0]
     *(uint32_t *)(0xf8803034u) =0x0;    //I2C1 MIO13
    61003084:	d2860680 	mov	x0, #0x3034                	// #12340
    61003088:	f2bf1000 	movk	x0, #0xf880, lsl #16
    6100308c:	b900001f 	str	wzr, [x0]
     *(uint32_t *)(0xf8803404u) =0x1;
    61003090:	d2868080 	mov	x0, #0x3404                	// #13316
    61003094:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003098:	52800021 	mov	w1, #0x1                   	// #1
    6100309c:	b9000001 	str	w1, [x0]


     *(uint32_t *)(0xf8803038u) =0x4;    //GPIO MIO14
    610030a0:	d2860700 	mov	x0, #0x3038                	// #12344
    610030a4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610030a8:	52800081 	mov	w1, #0x4                   	// #4
    610030ac:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880303cu) =0x4;    //GPIO MIO15
    610030b0:	d2860780 	mov	x0, #0x303c                	// #12348
    610030b4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610030b8:	52800081 	mov	w1, #0x4                   	// #4
    610030bc:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf8803040u) =0x9;    //spi0  MIO16
    610030c0:	d2860800 	mov	x0, #0x3040                	// #12352
    610030c4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610030c8:	52800121 	mov	w1, #0x9                   	// #9
    610030cc:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803044u) =0x9;    //spi0  MIO17
    610030d0:	d2860880 	mov	x0, #0x3044                	// #12356
    610030d4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610030d8:	52800121 	mov	w1, #0x9                   	// #9
    610030dc:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803048u) =0x9;    //spi0  MIO18
    610030e0:	d2860900 	mov	x0, #0x3048                	// #12360
    610030e4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610030e8:	52800121 	mov	w1, #0x9                   	// #9
    610030ec:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880304cu) =0x4;    //GPIO MIO19
    610030f0:	d2860980 	mov	x0, #0x304c                	// #12364
    610030f4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610030f8:	52800081 	mov	w1, #0x4                   	// #4
    610030fc:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803050u) =0x4;    //GPIO MIO20
    61003100:	d2860a00 	mov	x0, #0x3050                	// #12368
    61003104:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003108:	52800081 	mov	w1, #0x4                   	// #4
    6100310c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803054u) =0x9;    //spi0  MIO21
    61003110:	d2860a80 	mov	x0, #0x3054                	// #12372
    61003114:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003118:	52800121 	mov	w1, #0x9                   	// #9
    6100311c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803424u) =0x1;    //emio_sel9
    61003120:	d2868480 	mov	x0, #0x3424                	// #13348
    61003124:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003128:	52800021 	mov	w1, #0x1                   	// #1
    6100312c:	b9000001 	str	w1, [x0]


     *(uint32_t *)(0xf8803058u) =0x7;        //MIO23/24/25/22 jtag
    61003130:	d2860b00 	mov	x0, #0x3058                	// #12376
    61003134:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003138:	528000e1 	mov	w1, #0x7                   	// #7
    6100313c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880305cu) =0x7; 
    61003140:	d2860b80 	mov	x0, #0x305c                	// #12380
    61003144:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003148:	528000e1 	mov	w1, #0x7                   	// #7
    6100314c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803060u) =0x7; 
    61003150:	d2860c00 	mov	x0, #0x3060                	// #12384
    61003154:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003158:	528000e1 	mov	w1, #0x7                   	// #7
    6100315c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803064u) =0x7; 
    61003160:	d2860c80 	mov	x0, #0x3064                	// #12388
    61003164:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003168:	528000e1 	mov	w1, #0x7                   	// #7
    6100316c:	b9000001 	str	w1, [x0]
                                         //
	 
	 *(uint32_t *)(0xf8803068u) =0x3;    //uart0  MIO26/27
    61003170:	d2860d00 	mov	x0, #0x3068                	// #12392
    61003174:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003178:	52800061 	mov	w1, #0x3                   	// #3
    6100317c:	b9000001 	str	w1, [x0]
	 *(uint32_t *)(0xf880306cu) =0x3;
    61003180:	d2860d80 	mov	x0, #0x306c                	// #12396
    61003184:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003188:	52800061 	mov	w1, #0x3                   	// #3
    6100318c:	b9000001 	str	w1, [x0]
	 *(uint32_t *)(0xf8803410u) =0x1;
    61003190:	d2868200 	mov	x0, #0x3410                	// #13328
    61003194:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003198:	52800021 	mov	w1, #0x1                   	// #1
    6100319c:	b9000001 	str	w1, [x0]

	*(uint32_t *)(0xf8803070u) =0xe;     //rgmii1 mio 28-39
    610031a0:	d2860e00 	mov	x0, #0x3070                	// #12400
    610031a4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610031a8:	528001c1 	mov	w1, #0xe                   	// #14
    610031ac:	b9000001 	str	w1, [x0]
	*(uint32_t *)(0xf8803074u) =0xe;
    610031b0:	d2860e80 	mov	x0, #0x3074                	// #12404
    610031b4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610031b8:	528001c1 	mov	w1, #0xe                   	// #14
    610031bc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803078u) =0xe;
    610031c0:	d2860f00 	mov	x0, #0x3078                	// #12408
    610031c4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610031c8:	528001c1 	mov	w1, #0xe                   	// #14
    610031cc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880307cu) =0xe;
    610031d0:	d2860f80 	mov	x0, #0x307c                	// #12412
    610031d4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610031d8:	528001c1 	mov	w1, #0xe                   	// #14
    610031dc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803080u) =0xe;
    610031e0:	d2861000 	mov	x0, #0x3080                	// #12416
    610031e4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610031e8:	528001c1 	mov	w1, #0xe                   	// #14
    610031ec:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803084u) =0xe;
    610031f0:	d2861080 	mov	x0, #0x3084                	// #12420
    610031f4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610031f8:	528001c1 	mov	w1, #0xe                   	// #14
    610031fc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803088u) =0xe;
    61003200:	d2861100 	mov	x0, #0x3088                	// #12424
    61003204:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003208:	528001c1 	mov	w1, #0xe                   	// #14
    6100320c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880308cu) =0xe;
    61003210:	d2861180 	mov	x0, #0x308c                	// #12428
    61003214:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003218:	528001c1 	mov	w1, #0xe                   	// #14
    6100321c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803090u) =0xe;
    61003220:	d2861200 	mov	x0, #0x3090                	// #12432
    61003224:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003228:	528001c1 	mov	w1, #0xe                   	// #14
    6100322c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803094u) =0xe;
    61003230:	d2861280 	mov	x0, #0x3094                	// #12436
    61003234:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003238:	528001c1 	mov	w1, #0xe                   	// #14
    6100323c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803098u) =0xe;
    61003240:	d2861300 	mov	x0, #0x3098                	// #12440
    61003244:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003248:	528001c1 	mov	w1, #0xe                   	// #14
    6100324c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880309cu) =0xe;
    61003250:	d2861380 	mov	x0, #0x309c                	// #12444
    61003254:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003258:	528001c1 	mov	w1, #0xe                   	// #14
    6100325c:	b9000001 	str	w1, [x0]
  

    *(uint32_t *)(0xf88030a0u) =0xa;      //SDIO0 mio40-45
    61003260:	d2861400 	mov	x0, #0x30a0                	// #12448
    61003264:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003268:	52800141 	mov	w1, #0xa                   	// #10
    6100326c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030a4u) =0xa;
    61003270:	d2861480 	mov	x0, #0x30a4                	// #12452
    61003274:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003278:	52800141 	mov	w1, #0xa                   	// #10
    6100327c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030a8u) =0xa;
    61003280:	d2861500 	mov	x0, #0x30a8                	// #12456
    61003284:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003288:	52800141 	mov	w1, #0xa                   	// #10
    6100328c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030acu) =0xa;
    61003290:	d2861580 	mov	x0, #0x30ac                	// #12460
    61003294:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003298:	52800141 	mov	w1, #0xa                   	// #10
    6100329c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030b0u) =0xa;
    610032a0:	d2861600 	mov	x0, #0x30b0                	// #12464
    610032a4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610032a8:	52800141 	mov	w1, #0xa                   	// #10
    610032ac:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030b4u) =0xa; 
    610032b0:	d2861680 	mov	x0, #0x30b4                	// #12468
    610032b4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610032b8:	52800141 	mov	w1, #0xa                   	// #10
    610032bc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880342cu) =0x1;     //emio_sel11
    610032c0:	d2868580 	mov	x0, #0x342c                	// #13356
    610032c4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610032c8:	52800021 	mov	w1, #0x1                   	// #1
    610032cc:	b9000001 	str	w1, [x0]

    *(uint32_t *)(0xf88030b8u) =0x9;      //spi1 mio46-49
    610032d0:	d2861700 	mov	x0, #0x30b8                	// #12472
    610032d4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610032d8:	52800121 	mov	w1, #0x9                   	// #9
    610032dc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030bcu) =0x9;
    610032e0:	d2861780 	mov	x0, #0x30bc                	// #12476
    610032e4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610032e8:	52800121 	mov	w1, #0x9                   	// #9
    610032ec:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030c0u) =0x9;
    610032f0:	d2861800 	mov	x0, #0x30c0                	// #12480
    610032f4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610032f8:	52800121 	mov	w1, #0x9                   	// #9
    610032fc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030c4u) =0x9;
    61003300:	d2861880 	mov	x0, #0x30c4                	// #12484
    61003304:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003308:	52800121 	mov	w1, #0x9                   	// #9
    6100330c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803428u) =0x1;      //emio_sel9
    61003310:	d2868500 	mov	x0, #0x3428                	// #13352
    61003314:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003318:	52800021 	mov	w1, #0x1                   	// #1
    6100331c:	b9000001 	str	w1, [x0]

    *(uint32_t *)(0xf88030c8u) =0x0;      //i2c0 mio50-51
    61003320:	d2861900 	mov	x0, #0x30c8                	// #12488
    61003324:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003328:	b900001f 	str	wzr, [x0]
    *(uint32_t *)(0xf88030ccu) =0x0;
    6100332c:	d2861980 	mov	x0, #0x30cc                	// #12492
    61003330:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003334:	b900001f 	str	wzr, [x0]
    *(uint32_t *)(0xf8803400u) =0x1;      //emio_sel12
    61003338:	d2868000 	mov	x0, #0x3400                	// #13312
    6100333c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003340:	52800021 	mov	w1, #0x1                   	// #1
    61003344:	b9000001 	str	w1, [x0]
    
    *(uint32_t *)(0xf88030d0u) =0xf;      //mdc1   MIO52-53
    61003348:	d2861a00 	mov	x0, #0x30d0                	// #12496
    6100334c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003350:	528001e1 	mov	w1, #0xf                   	// #15
    61003354:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030d4u) =0xf;      //mdio1
    61003358:	d2861a80 	mov	x0, #0x30d4                	// #12500
    6100335c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003360:	528001e1 	mov	w1, #0xf                   	// #15
    61003364:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803438u) =0x1;      //emio_sel
    61003368:	d2868700 	mov	x0, #0x3438                	// #13368
    6100336c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003370:	52800021 	mov	w1, #0x1                   	// #1
    61003374:	b9000001 	str	w1, [x0]

}
    61003378:	d503201f 	nop
    6100337c:	d65f03c0 	ret

Disassembly of section .text.setvbuf:

0000000061003380 <setvbuf>:
unsigned long strtoul(const char *nptr, char **endptr, int base);
long long strtoll(const char *nptr, char **endptr, int base);
unsigned long long strtoull(const char *nptr, char **endptr, int base);

static int inline setvbuf(FILE * stream, char * buf, int mode,
         size_t size){
    61003380:	d10083ff 	sub	sp, sp, #0x20
    61003384:	f9000fe0 	str	x0, [sp, #24]
    61003388:	f9000be1 	str	x1, [sp, #16]
    6100338c:	b9000fe2 	str	w2, [sp, #12]
    61003390:	f90003e3 	str	x3, [sp]
};
    61003394:	d503201f 	nop
    61003398:	910083ff 	add	sp, sp, #0x20
    6100339c:	d65f03c0 	ret

Disassembly of section .text.AlUart_Init:

00000000610033a0 <AlUart_Init>:
    \param  baudrate: uart buadrate
    \param  bit_length: bit length (5/6/7/8)
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t AlUart_Init(AL_UART_TypeDef *uart, uint32_t baudrate,AL_UART_BIT_LENGTH bit_length, AL_UART_STOP_BIT stopbit)
{
    610033a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    610033a4:	910003fd 	mov	x29, sp
    610033a8:	f90017e0 	str	x0, [sp, #40]
    610033ac:	b90027e1 	str	w1, [sp, #36]
    610033b0:	b90023e2 	str	w2, [sp, #32]
    610033b4:	b9001fe3 	str	w3, [sp, #28]
    if (__RARELY(uart == NULL)) {
    610033b8:	f94017e0 	ldr	x0, [sp, #40]
    610033bc:	f100001f 	cmp	x0, #0x0
    610033c0:	1a9f17e0 	cset	w0, eq  // eq = none
    610033c4:	12001c00 	and	w0, w0, #0xff
    610033c8:	92401c00 	and	x0, x0, #0xff
    610033cc:	f100001f 	cmp	x0, #0x0
    610033d0:	54000060 	b.eq	610033dc <AlUart_Init+0x3c>  // b.none
        return -1;
    610033d4:	12800000 	mov	w0, #0xffffffff            	// #-1
    610033d8:	1400001e 	b	61003450 <AlUart_Init+0xb0>
    }
    setvbuf(stdout, NULL, _IONBF, 0);
    610033dc:	d2800003 	mov	x3, #0x0                   	// #0
    610033e0:	52800042 	mov	w2, #0x2                   	// #2
    610033e4:	d2800001 	mov	x1, #0x0                   	// #0
    610033e8:	d2800020 	mov	x0, #0x1                   	// #1
    610033ec:	97ffffe5 	bl	61003380 <setvbuf>
    //AlUart_enablePtime(uart);					//enable programmable THR empty mode
    *(uint32_t *)(0xf8803068U) = 0x3;
    610033f0:	d2860d00 	mov	x0, #0x3068                	// #12392
    610033f4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    610033f8:	52800061 	mov	w1, #0x3                   	// #3
    610033fc:	b9000001 	str	w1, [x0]
	*(uint32_t *)(0xf880306cU) = 0x3;
    61003400:	d2860d80 	mov	x0, #0x306c                	// #12396
    61003404:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003408:	52800061 	mov	w1, #0x3                   	// #3
    6100340c:	b9000001 	str	w1, [x0]
	*(uint32_t *)(0xf8803410U) = 0x1;
    61003410:	d2868200 	mov	x0, #0x3410                	// #13328
    61003414:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003418:	52800021 	mov	w1, #0x1                   	// #1
    6100341c:	b9000001 	str	w1, [x0]
    AlUart_SetBaudrate(uart, baudrate);		//set_baudrate
    61003420:	b94027e1 	ldr	w1, [sp, #36]
    61003424:	f94017e0 	ldr	x0, [sp, #40]
    61003428:	9400000c 	bl	61003458 <AlUart_SetBaudrate>
    AlUart_DatalengConfig(uart,bit_length);	//set_dataleng
    6100342c:	b94023e1 	ldr	w1, [sp, #32]
    61003430:	f94017e0 	ldr	x0, [sp, #40]
    61003434:	94000037 	bl	61003510 <AlUart_DatalengConfig>
    AlUart_ConfigStopbit(uart,stopbit);		//set_stopbit
    61003438:	b9401fe1 	ldr	w1, [sp, #28]
    6100343c:	f94017e0 	ldr	x0, [sp, #40]
    61003440:	9400005e 	bl	610035b8 <AlUart_ConfigStopbit>
    AlUart_FifoEnable(uart);
    61003444:	f94017e0 	ldr	x0, [sp, #40]
    61003448:	94000087 	bl	61003664 <AlUart_FifoEnable>
    return 0;
    6100344c:	52800000 	mov	w0, #0x0                   	// #0
}
    61003450:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61003454:	d65f03c0 	ret

Disassembly of section .text.AlUart_SetBaudrate:

0000000061003458 <AlUart_SetBaudrate>:
uint8_t AlUart_SetBaudrate(AL_UART_TypeDef *uart, uint32_t baudrate){
    61003458:	d10043ff 	sub	sp, sp, #0x10
    6100345c:	f90007e0 	str	x0, [sp, #8]
    61003460:	b90007e1 	str	w1, [sp, #4]
    uart->LCR 		 |= UART_REG_LCR_DLAB_MASK ;
    61003464:	f94007e0 	ldr	x0, [sp, #8]
    61003468:	b9400c00 	ldr	w0, [x0, #12]
    6100346c:	32190001 	orr	w1, w0, #0x80
    61003470:	f94007e0 	ldr	x0, [sp, #8]
    61003474:	b9000c01 	str	w1, [x0, #12]
    uart->DLH_IER 	  = ((uint16_t)(uart_clock / (baudrate*16))) >> 8 ;
    61003478:	b94007e0 	ldr	w0, [sp, #4]
    6100347c:	531c6c00 	lsl	w0, w0, #4
    61003480:	528b4001 	mov	w1, #0x5a00                	// #23040
    61003484:	72a04c41 	movk	w1, #0x262, lsl #16
    61003488:	1ac00820 	udiv	w0, w1, w0
    6100348c:	12003c00 	and	w0, w0, #0xffff
    61003490:	53087c00 	lsr	w0, w0, #8
    61003494:	12003c00 	and	w0, w0, #0xffff
    61003498:	2a0003e1 	mov	w1, w0
    6100349c:	f94007e0 	ldr	x0, [sp, #8]
    610034a0:	b9000401 	str	w1, [x0, #4]
    uart->RBR_THR_DLL = ((uint8_t)(uart_clock / (baudrate*16))) ;
    610034a4:	b94007e0 	ldr	w0, [sp, #4]
    610034a8:	531c6c00 	lsl	w0, w0, #4
    610034ac:	528b4001 	mov	w1, #0x5a00                	// #23040
    610034b0:	72a04c41 	movk	w1, #0x262, lsl #16
    610034b4:	1ac00820 	udiv	w0, w1, w0
    610034b8:	12001c00 	and	w0, w0, #0xff
    610034bc:	2a0003e1 	mov	w1, w0
    610034c0:	f94007e0 	ldr	x0, [sp, #8]
    610034c4:	b9000001 	str	w1, [x0]
    uart->MCR 		 |= UART_REG_MCR_DTR_MASK;
    610034c8:	f94007e0 	ldr	x0, [sp, #8]
    610034cc:	b9401000 	ldr	w0, [x0, #16]
    610034d0:	32000001 	orr	w1, w0, #0x1
    610034d4:	f94007e0 	ldr	x0, [sp, #8]
    610034d8:	b9001001 	str	w1, [x0, #16]
    uart->MCR 		 |= UART_REG_MCR_RTS_MASK;
    610034dc:	f94007e0 	ldr	x0, [sp, #8]
    610034e0:	b9401000 	ldr	w0, [x0, #16]
    610034e4:	321f0001 	orr	w1, w0, #0x2
    610034e8:	f94007e0 	ldr	x0, [sp, #8]
    610034ec:	b9001001 	str	w1, [x0, #16]
    uart->LCR 		 &= (uint8_t)(0x7f);
    610034f0:	f94007e0 	ldr	x0, [sp, #8]
    610034f4:	b9400c00 	ldr	w0, [x0, #12]
    610034f8:	12001801 	and	w1, w0, #0x7f
    610034fc:	f94007e0 	ldr	x0, [sp, #8]
    61003500:	b9000c01 	str	w1, [x0, #12]
    return 0;
    61003504:	52800000 	mov	w0, #0x0                   	// #0
}
    61003508:	910043ff 	add	sp, sp, #0x10
    6100350c:	d65f03c0 	ret

Disassembly of section .text.AlUart_DatalengConfig:

0000000061003510 <AlUart_DatalengConfig>:
uint8_t AlUart_DatalengConfig(AL_UART_TypeDef *uart,AL_UART_BIT_LENGTH bit_length){
    61003510:	d10043ff 	sub	sp, sp, #0x10
    61003514:	f90007e0 	str	x0, [sp, #8]
    61003518:	b90007e1 	str	w1, [sp, #4]
	switch (bit_length)
    6100351c:	b94007e0 	ldr	w0, [sp, #4]
    61003520:	7100081f 	cmp	w0, #0x2
    61003524:	540002c0 	b.eq	6100357c <AlUart_DatalengConfig+0x6c>  // b.none
    61003528:	b94007e0 	ldr	w0, [sp, #4]
    6100352c:	7100081f 	cmp	w0, #0x2
    61003530:	54000328 	b.hi	61003594 <AlUart_DatalengConfig+0x84>  // b.pmore
    61003534:	b94007e0 	ldr	w0, [sp, #4]
    61003538:	7100001f 	cmp	w0, #0x0
    6100353c:	540000a0 	b.eq	61003550 <AlUart_DatalengConfig+0x40>  // b.none
    61003540:	b94007e0 	ldr	w0, [sp, #4]
    61003544:	7100041f 	cmp	w0, #0x1
    61003548:	540000e0 	b.eq	61003564 <AlUart_DatalengConfig+0x54>  // b.none
    6100354c:	14000012 	b	61003594 <AlUart_DatalengConfig+0x84>
	    {
	    case 0:
	    	uart->LCR |= UART_REG_LCR_DLS_5BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61003550:	f94007e0 	ldr	x0, [sp, #8]
    61003554:	b9400c01 	ldr	w1, [x0, #12]
    61003558:	f94007e0 	ldr	x0, [sp, #8]
    6100355c:	b9000c01 	str	w1, [x0, #12]
	    	break;
    61003560:	14000013 	b	610035ac <AlUart_DatalengConfig+0x9c>
	    case 1:
	    	uart->LCR |= UART_REG_LCR_DLS_6BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61003564:	f94007e0 	ldr	x0, [sp, #8]
    61003568:	b9400c00 	ldr	w0, [x0, #12]
    6100356c:	32000001 	orr	w1, w0, #0x1
    61003570:	f94007e0 	ldr	x0, [sp, #8]
    61003574:	b9000c01 	str	w1, [x0, #12]
	    	break;
    61003578:	1400000d 	b	610035ac <AlUart_DatalengConfig+0x9c>
	    case 2:
	        uart->LCR |= UART_REG_LCR_DLS_7BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    6100357c:	f94007e0 	ldr	x0, [sp, #8]
    61003580:	b9400c00 	ldr	w0, [x0, #12]
    61003584:	321f0001 	orr	w1, w0, #0x2
    61003588:	f94007e0 	ldr	x0, [sp, #8]
    6100358c:	b9000c01 	str	w1, [x0, #12]
	        break;
    61003590:	14000007 	b	610035ac <AlUart_DatalengConfig+0x9c>
	    default:
	    	uart->LCR |= UART_REG_LCR_DLS_8BITS;
    61003594:	f94007e0 	ldr	x0, [sp, #8]
    61003598:	b9400c00 	ldr	w0, [x0, #12]
    6100359c:	32000401 	orr	w1, w0, #0x3
    610035a0:	f94007e0 	ldr	x0, [sp, #8]
    610035a4:	b9000c01 	str	w1, [x0, #12]
	    	break;
    610035a8:	d503201f 	nop
	    }
	return 0;
    610035ac:	52800000 	mov	w0, #0x0                   	// #0
}
    610035b0:	910043ff 	add	sp, sp, #0x10
    610035b4:	d65f03c0 	ret

Disassembly of section .text.AlUart_ConfigStopbit:

00000000610035b8 <AlUart_ConfigStopbit>:
    \param  uart: uart parameter stuct
    \param  stopbit: stop bit (1/2/0.5/1.5)
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t AlUart_ConfigStopbit(AL_UART_TypeDef *uart, AL_UART_STOP_BIT stopbit)
{
    610035b8:	d10043ff 	sub	sp, sp, #0x10
    610035bc:	f90007e0 	str	x0, [sp, #8]
    610035c0:	b90007e1 	str	w1, [sp, #4]
   if (__RARELY(uart == NULL)) {
    610035c4:	f94007e0 	ldr	x0, [sp, #8]
    610035c8:	f100001f 	cmp	x0, #0x0
    610035cc:	1a9f17e0 	cset	w0, eq  // eq = none
    610035d0:	12001c00 	and	w0, w0, #0xff
    610035d4:	92401c00 	and	x0, x0, #0xff
    610035d8:	f100001f 	cmp	x0, #0x0
    610035dc:	54000060 	b.eq	610035e8 <AlUart_ConfigStopbit+0x30>  // b.none
        return -1;
    610035e0:	12800000 	mov	w0, #0xffffffff            	// #-1
    610035e4:	1400001e 	b	6100365c <AlUart_ConfigStopbit+0xa4>
    }
   switch(stopbit)
    610035e8:	b94007e0 	ldr	w0, [sp, #4]
    610035ec:	7100001f 	cmp	w0, #0x0
    610035f0:	540000a0 	b.eq	61003604 <AlUart_ConfigStopbit+0x4c>  // b.none
    610035f4:	b94007e0 	ldr	w0, [sp, #4]
    610035f8:	7100041f 	cmp	w0, #0x1
    610035fc:	540000e0 	b.eq	61003618 <AlUart_ConfigStopbit+0x60>  // b.none
    61003600:	14000010 	b	61003640 <AlUart_ConfigStopbit+0x88>
      {
      case 0:
   	   uart->LCR |=  UART_REG_LCR_STOP_1BITS;
    61003604:	f94007e0 	ldr	x0, [sp, #8]
    61003608:	b9400c01 	ldr	w1, [x0, #12]
    6100360c:	f94007e0 	ldr	x0, [sp, #8]
    61003610:	b9000c01 	str	w1, [x0, #12]
   	   break;
    61003614:	14000011 	b	61003658 <AlUart_ConfigStopbit+0xa0>
      case 1:
   	   uart->LCR &= ~UART_REG_LCR_DLS_5BITS;
    61003618:	f94007e0 	ldr	x0, [sp, #8]
    6100361c:	b9400c01 	ldr	w1, [x0, #12]
    61003620:	f94007e0 	ldr	x0, [sp, #8]
    61003624:	b9000c01 	str	w1, [x0, #12]
   	   uart->LCR |=  UART_REG_LCR_STOP_2BITS;
    61003628:	f94007e0 	ldr	x0, [sp, #8]
    6100362c:	b9400c00 	ldr	w0, [x0, #12]
    61003630:	321e0001 	orr	w1, w0, #0x4
    61003634:	f94007e0 	ldr	x0, [sp, #8]
    61003638:	b9000c01 	str	w1, [x0, #12]
   	   break;
    6100363c:	14000007 	b	61003658 <AlUart_ConfigStopbit+0xa0>
      default:
   	   uart->LCR |=  UART_REG_LCR_STOP_2BITS;
    61003640:	f94007e0 	ldr	x0, [sp, #8]
    61003644:	b9400c00 	ldr	w0, [x0, #12]
    61003648:	321e0001 	orr	w1, w0, #0x4
    6100364c:	f94007e0 	ldr	x0, [sp, #8]
    61003650:	b9000c01 	str	w1, [x0, #12]
   	   break;
    61003654:	d503201f 	nop
      }
    return 0;
    61003658:	52800000 	mov	w0, #0x0                   	// #0
}
    6100365c:	910043ff 	add	sp, sp, #0x10
    61003660:	d65f03c0 	ret

Disassembly of section .text.AlUart_FifoEnable:

0000000061003664 <AlUart_FifoEnable>:
    \brief  uart FIFOF enable
    \param  uart: uart parameter stuct
    \retval FCR:  value
*/
uint8_t AlUart_FifoEnable(AL_UART_TypeDef *uart)
{
    61003664:	d10043ff 	sub	sp, sp, #0x10
    61003668:	f90007e0 	str	x0, [sp, #8]

    if (__RARELY(uart == NULL)) {
    6100366c:	f94007e0 	ldr	x0, [sp, #8]
    61003670:	f100001f 	cmp	x0, #0x0
    61003674:	1a9f17e0 	cset	w0, eq  // eq = none
    61003678:	12001c00 	and	w0, w0, #0xff
    6100367c:	92401c00 	and	x0, x0, #0xff
    61003680:	f100001f 	cmp	x0, #0x0
    61003684:	54000060 	b.eq	61003690 <AlUart_FifoEnable+0x2c>  // b.none
        return -1;
    61003688:	52801fe0 	mov	w0, #0xff                  	// #255
    6100368c:	14000005 	b	610036a0 <AlUart_FifoEnable+0x3c>
    }
    uart ->IIR_FCR = UART_REG_FCR_FIFOE_MASK;
    61003690:	f94007e0 	ldr	x0, [sp, #8]
    61003694:	52800021 	mov	w1, #0x1                   	// #1
    61003698:	b9000801 	str	w1, [x0, #8]
    return 0;
    6100369c:	52800000 	mov	w0, #0x0                   	// #0
}
    610036a0:	910043ff 	add	sp, sp, #0x10
    610036a4:	d65f03c0 	ret

Disassembly of section .text.uart_write:

00000000610036a8 <uart_write>:
    \param  uart: uart parameter stuct
    \param  val: value of TXFIFO
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t uart_write(AL_UART_TypeDef *uart, volatile uint8_t val)
{
    610036a8:	d10043ff 	sub	sp, sp, #0x10
    610036ac:	f90007e0 	str	x0, [sp, #8]
    610036b0:	39001fe1 	strb	w1, [sp, #7]
   if (__RARELY(uart == NULL)) {
    610036b4:	f94007e0 	ldr	x0, [sp, #8]
    610036b8:	f100001f 	cmp	x0, #0x0
    610036bc:	1a9f17e0 	cset	w0, eq  // eq = none
    610036c0:	12001c00 	and	w0, w0, #0xff
    610036c4:	92401c00 	and	x0, x0, #0xff
    610036c8:	f100001f 	cmp	x0, #0x0
    610036cc:	54000060 	b.eq	610036d8 <uart_write+0x30>  // b.none
        return -1;
    610036d0:	12800000 	mov	w0, #0xffffffff            	// #-1
    610036d4:	1400000d 	b	61003708 <uart_write+0x60>
    }
	   while (0==(uart->LSR & 0x20));
    610036d8:	d503201f 	nop
    610036dc:	f94007e0 	ldr	x0, [sp, #8]
    610036e0:	b9401400 	ldr	w0, [x0, #20]
    610036e4:	121b0000 	and	w0, w0, #0x20
    610036e8:	7100001f 	cmp	w0, #0x0
    610036ec:	54ffff80 	b.eq	610036dc <uart_write+0x34>  // b.none
	   uart ->RBR_THR_DLL = val & 0xFF ;
    610036f0:	39401fe0 	ldrb	w0, [sp, #7]
    610036f4:	12001c00 	and	w0, w0, #0xff
    610036f8:	2a0003e1 	mov	w1, w0
    610036fc:	f94007e0 	ldr	x0, [sp, #8]
    61003700:	b9000001 	str	w1, [x0]
    return 0;
    61003704:	52800000 	mov	w0, #0x0                   	// #0
}
    61003708:	910043ff 	add	sp, sp, #0x10
    6100370c:	d65f03c0 	ret

Disassembly of section .text.Mtimer_Start:

0000000061003710 <Mtimer_Start>:
    Mtimer->IsTimerOut = 0;
    return 0;
}

uint32_t Mtimer_Start(MtimerParams* Mtimer, u64 Us)
{
    61003710:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61003714:	910003fd 	mov	x29, sp
    61003718:	f9000fe0 	str	x0, [sp, #24]
    6100371c:	f9000be1 	str	x1, [sp, #16]
    Mtimer->StartPoint = get_SystickTimer();
    61003720:	97fffd93 	bl	61002d6c <get_SystickTimer>
    61003724:	93407c01 	sxtw	x1, w0
    61003728:	f9400fe0 	ldr	x0, [sp, #24]
    6100372c:	f9000001 	str	x1, [x0]
    Mtimer->CurPoint = Mtimer->StartPoint;
    61003730:	f9400fe0 	ldr	x0, [sp, #24]
    61003734:	f9400001 	ldr	x1, [x0]
    61003738:	f9400fe0 	ldr	x0, [sp, #24]
    6100373c:	f9000401 	str	x1, [x0, #8]
    Mtimer->TimerOut = get_MTimerOutValue(Us);
    61003740:	f9400be0 	ldr	x0, [sp, #16]
    61003744:	97fffd90 	bl	61002d84 <get_MTimerOutValue>
    61003748:	93407c01 	sxtw	x1, w0
    6100374c:	f9400fe0 	ldr	x0, [sp, #24]
    61003750:	f9000801 	str	x1, [x0, #16]
    Mtimer->IsTimerOut = 0;
    61003754:	f9400fe0 	ldr	x0, [sp, #24]
    61003758:	b900181f 	str	wzr, [x0, #24]
    return 0;
    6100375c:	52800000 	mov	w0, #0x0                   	// #0
}
    61003760:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61003764:	d65f03c0 	ret

Disassembly of section .text.Mtimer_TimerOut:

0000000061003768 <Mtimer_TimerOut>:

uint32_t Mtimer_TimerOut(MtimerParams* Mtimer)
{
    61003768:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    6100376c:	910003fd 	mov	x29, sp
    61003770:	f9000fe0 	str	x0, [sp, #24]
    u64 Tconsumed;
    uint32_t Ret = 0;
    61003774:	b9002fff 	str	wzr, [sp, #44]
    Mtimer->CurPoint = get_SystickTimer();
    61003778:	97fffd7d 	bl	61002d6c <get_SystickTimer>
    6100377c:	93407c01 	sxtw	x1, w0
    61003780:	f9400fe0 	ldr	x0, [sp, #24]
    61003784:	f9000401 	str	x1, [x0, #8]
    Tconsumed = Mtimer->CurPoint - Mtimer->StartPoint;
    61003788:	f9400fe0 	ldr	x0, [sp, #24]
    6100378c:	f9400401 	ldr	x1, [x0, #8]
    61003790:	f9400fe0 	ldr	x0, [sp, #24]
    61003794:	f9400000 	ldr	x0, [x0]
    61003798:	cb000020 	sub	x0, x1, x0
    6100379c:	f90013e0 	str	x0, [sp, #32]
    if(Tconsumed >= Mtimer->TimerOut){
    610037a0:	f9400fe0 	ldr	x0, [sp, #24]
    610037a4:	f9400800 	ldr	x0, [x0, #16]
    610037a8:	f94013e1 	ldr	x1, [sp, #32]
    610037ac:	eb00003f 	cmp	x1, x0
    610037b0:	540000e3 	b.cc	610037cc <Mtimer_TimerOut+0x64>  // b.lo, b.ul, b.last
        Mtimer->IsTimerOut = 1;
    610037b4:	f9400fe0 	ldr	x0, [sp, #24]
    610037b8:	52800021 	mov	w1, #0x1                   	// #1
    610037bc:	b9001801 	str	w1, [x0, #24]
        Ret = 1;
    610037c0:	52800020 	mov	w0, #0x1                   	// #1
    610037c4:	b9002fe0 	str	w0, [sp, #44]
    610037c8:	14000004 	b	610037d8 <Mtimer_TimerOut+0x70>
    }else{
        Mtimer->IsTimerOut = 0;
    610037cc:	f9400fe0 	ldr	x0, [sp, #24]
    610037d0:	b900181f 	str	wzr, [x0, #24]
        Ret = 0;
    610037d4:	b9002fff 	str	wzr, [sp, #44]
    }
    return Ret;
    610037d8:	b9402fe0 	ldr	w0, [sp, #44]
}
    610037dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    610037e0:	d65f03c0 	ret

Disassembly of section .text.Mtimer_IsTimerOut:

00000000610037e4 <Mtimer_IsTimerOut>:

uint32_t Mtimer_IsTimerOut(MtimerParams* Mtimer)
{
    610037e4:	d10043ff 	sub	sp, sp, #0x10
    610037e8:	f90007e0 	str	x0, [sp, #8]
    return Mtimer->IsTimerOut;
    610037ec:	f94007e0 	ldr	x0, [sp, #8]
    610037f0:	b9401800 	ldr	w0, [x0, #24]
    610037f4:	910043ff 	add	sp, sp, #0x10
    610037f8:	d65f03c0 	ret

Disassembly of section .text.reg_read:

00000000610037fc <reg_read>:
volatile DWC_mshc_block_registers* SDIO = (DWC_mshc_block_registers*)SDIO_WRAP__SDIO0__BASE_ADDR;
volatile DWC_mshc_block_registers* eMMC = (DWC_mshc_block_registers*)SDIO_WRAP__SDIO0__BASE_ADDR;


inline unsigned int reg_read(unsigned long reg_address)
{
    610037fc:	d10043ff 	sub	sp, sp, #0x10
    61003800:	f90007e0 	str	x0, [sp, #8]
    return *((volatile unsigned int *)reg_address);
    61003804:	f94007e0 	ldr	x0, [sp, #8]
    61003808:	b9400000 	ldr	w0, [x0]
}
    6100380c:	910043ff 	add	sp, sp, #0x10
    61003810:	d65f03c0 	ret

Disassembly of section .text.reg_write:

0000000061003814 <reg_write>:

inline void reg_write(unsigned long reg_address, u32 reg_wdata)
{
    61003814:	d10043ff 	sub	sp, sp, #0x10
    61003818:	f90007e0 	str	x0, [sp, #8]
    6100381c:	b90007e1 	str	w1, [sp, #4]
    *((volatile unsigned int *)reg_address) = reg_wdata;
    61003820:	f94007e0 	ldr	x0, [sp, #8]
    61003824:	b94007e1 	ldr	w1, [sp, #4]
    61003828:	b9000001 	str	w1, [x0]
}
    6100382c:	d503201f 	nop
    61003830:	910043ff 	add	sp, sp, #0x10
    61003834:	d65f03c0 	ret

Disassembly of section .text.error_stat_print:

0000000061003838 <error_stat_print>:

static void error_stat_print(uint32_t err_state)
{
    61003838:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    6100383c:	910003fd 	mov	x29, sp
    61003840:	b9001fe0 	str	w0, [sp, #28]
    printf("error stat print: ");
    61003844:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003848:	911e4000 	add	x0, x0, #0x790
    6100384c:	97fffcd9 	bl	61002bb0 <printf>
    switch(err_state){
    61003850:	b9401fe0 	ldr	w0, [sp, #28]
    61003854:	7100301f 	cmp	w0, #0xc
    61003858:	54000ee0 	b.eq	61003a34 <error_stat_print+0x1fc>  // b.none
    6100385c:	b9401fe0 	ldr	w0, [sp, #28]
    61003860:	7100301f 	cmp	w0, #0xc
    61003864:	54000f08 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003868:	b9401fe0 	ldr	w0, [sp, #28]
    6100386c:	71002c1f 	cmp	w0, #0xb
    61003870:	54000da0 	b.eq	61003a24 <error_stat_print+0x1ec>  // b.none
    61003874:	b9401fe0 	ldr	w0, [sp, #28]
    61003878:	71002c1f 	cmp	w0, #0xb
    6100387c:	54000e48 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003880:	b9401fe0 	ldr	w0, [sp, #28]
    61003884:	7100281f 	cmp	w0, #0xa
    61003888:	54000c60 	b.eq	61003a14 <error_stat_print+0x1dc>  // b.none
    6100388c:	b9401fe0 	ldr	w0, [sp, #28]
    61003890:	7100281f 	cmp	w0, #0xa
    61003894:	54000d88 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003898:	b9401fe0 	ldr	w0, [sp, #28]
    6100389c:	7100241f 	cmp	w0, #0x9
    610038a0:	54000b20 	b.eq	61003a04 <error_stat_print+0x1cc>  // b.none
    610038a4:	b9401fe0 	ldr	w0, [sp, #28]
    610038a8:	7100241f 	cmp	w0, #0x9
    610038ac:	54000cc8 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    610038b0:	b9401fe0 	ldr	w0, [sp, #28]
    610038b4:	7100201f 	cmp	w0, #0x8
    610038b8:	540009e0 	b.eq	610039f4 <error_stat_print+0x1bc>  // b.none
    610038bc:	b9401fe0 	ldr	w0, [sp, #28]
    610038c0:	7100201f 	cmp	w0, #0x8
    610038c4:	54000c08 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    610038c8:	b9401fe0 	ldr	w0, [sp, #28]
    610038cc:	71001c1f 	cmp	w0, #0x7
    610038d0:	540008a0 	b.eq	610039e4 <error_stat_print+0x1ac>  // b.none
    610038d4:	b9401fe0 	ldr	w0, [sp, #28]
    610038d8:	71001c1f 	cmp	w0, #0x7
    610038dc:	54000b48 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    610038e0:	b9401fe0 	ldr	w0, [sp, #28]
    610038e4:	7100181f 	cmp	w0, #0x6
    610038e8:	54000760 	b.eq	610039d4 <error_stat_print+0x19c>  // b.none
    610038ec:	b9401fe0 	ldr	w0, [sp, #28]
    610038f0:	7100181f 	cmp	w0, #0x6
    610038f4:	54000a88 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    610038f8:	b9401fe0 	ldr	w0, [sp, #28]
    610038fc:	7100141f 	cmp	w0, #0x5
    61003900:	54000620 	b.eq	610039c4 <error_stat_print+0x18c>  // b.none
    61003904:	b9401fe0 	ldr	w0, [sp, #28]
    61003908:	7100141f 	cmp	w0, #0x5
    6100390c:	540009c8 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003910:	b9401fe0 	ldr	w0, [sp, #28]
    61003914:	7100101f 	cmp	w0, #0x4
    61003918:	540004e0 	b.eq	610039b4 <error_stat_print+0x17c>  // b.none
    6100391c:	b9401fe0 	ldr	w0, [sp, #28]
    61003920:	7100101f 	cmp	w0, #0x4
    61003924:	54000908 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003928:	b9401fe0 	ldr	w0, [sp, #28]
    6100392c:	71000c1f 	cmp	w0, #0x3
    61003930:	540003a0 	b.eq	610039a4 <error_stat_print+0x16c>  // b.none
    61003934:	b9401fe0 	ldr	w0, [sp, #28]
    61003938:	71000c1f 	cmp	w0, #0x3
    6100393c:	54000848 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003940:	b9401fe0 	ldr	w0, [sp, #28]
    61003944:	7100081f 	cmp	w0, #0x2
    61003948:	54000260 	b.eq	61003994 <error_stat_print+0x15c>  // b.none
    6100394c:	b9401fe0 	ldr	w0, [sp, #28]
    61003950:	7100081f 	cmp	w0, #0x2
    61003954:	54000788 	b.hi	61003a44 <error_stat_print+0x20c>  // b.pmore
    61003958:	b9401fe0 	ldr	w0, [sp, #28]
    6100395c:	7100001f 	cmp	w0, #0x0
    61003960:	540000a0 	b.eq	61003974 <error_stat_print+0x13c>  // b.none
    61003964:	b9401fe0 	ldr	w0, [sp, #28]
    61003968:	7100041f 	cmp	w0, #0x1
    6100396c:	540000c0 	b.eq	61003984 <error_stat_print+0x14c>  // b.none
    61003970:	14000035 	b	61003a44 <error_stat_print+0x20c>
        case 0:
            printf("MMC_CMD_TOUT_ERR\r\n");
    61003974:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003978:	911ea000 	add	x0, x0, #0x7a8
    6100397c:	97fffc8d 	bl	61002bb0 <printf>
            break;
    61003980:	14000035 	b	61003a54 <error_stat_print+0x21c>
        case 1:
            printf("MMC_CMD_CRC_ERR\r\n");
    61003984:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003988:	911f0000 	add	x0, x0, #0x7c0
    6100398c:	97fffc89 	bl	61002bb0 <printf>
            break;
    61003990:	14000031 	b	61003a54 <error_stat_print+0x21c>
        case 2:
            printf("MMC_CMD_END_BIT_ERR\r\n");
    61003994:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003998:	911f6000 	add	x0, x0, #0x7d8
    6100399c:	97fffc85 	bl	61002bb0 <printf>
            break;
    610039a0:	1400002d 	b	61003a54 <error_stat_print+0x21c>
        case 3:
            printf("MMC_CMD_IDX_ERR\r\n");
    610039a4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610039a8:	911fc000 	add	x0, x0, #0x7f0
    610039ac:	97fffc81 	bl	61002bb0 <printf>
            break;
    610039b0:	14000029 	b	61003a54 <error_stat_print+0x21c>
        case 4:
            printf("MMC_DATA_TOUT_ERR\r\n");
    610039b4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610039b8:	91202000 	add	x0, x0, #0x808
    610039bc:	97fffc7d 	bl	61002bb0 <printf>
            break;
    610039c0:	14000025 	b	61003a54 <error_stat_print+0x21c>
        case 5:
            printf("MMC_DATA_CRC_ERR\r\n");
    610039c4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610039c8:	91208000 	add	x0, x0, #0x820
    610039cc:	97fffc79 	bl	61002bb0 <printf>
            break;
    610039d0:	14000021 	b	61003a54 <error_stat_print+0x21c>
        case 6:
            printf("MMC_DATA_END_BIT_ERR\r\n");
    610039d4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610039d8:	9120e000 	add	x0, x0, #0x838
    610039dc:	97fffc75 	bl	61002bb0 <printf>
            break;
    610039e0:	1400001d 	b	61003a54 <error_stat_print+0x21c>
        case 7:
            printf("MMC_CUR_LMT_ERR\r\n");
    610039e4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610039e8:	91214000 	add	x0, x0, #0x850
    610039ec:	97fffc71 	bl	61002bb0 <printf>
            break;
    610039f0:	14000019 	b	61003a54 <error_stat_print+0x21c>
        case 8:
            printf("MMC_AUTO_CMD_ERR\r\n");
    610039f4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610039f8:	9121a000 	add	x0, x0, #0x868
    610039fc:	97fffc6d 	bl	61002bb0 <printf>
            break;
    61003a00:	14000015 	b	61003a54 <error_stat_print+0x21c>
        case 9:
            printf("MMC_ADMA_ERR\r\n");
    61003a04:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003a08:	91220000 	add	x0, x0, #0x880
    61003a0c:	97fffc69 	bl	61002bb0 <printf>
            break;
    61003a10:	14000011 	b	61003a54 <error_stat_print+0x21c>
        case 10:
            printf("MMC_TUNING_ERR\r\n");
    61003a14:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003a18:	91224000 	add	x0, x0, #0x890
    61003a1c:	97fffc65 	bl	61002bb0 <printf>
            break;
    61003a20:	1400000d 	b	61003a54 <error_stat_print+0x21c>
        case 11:
            printf("MMC_RESP_ERR\r\n");
    61003a24:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003a28:	9122a000 	add	x0, x0, #0x8a8
    61003a2c:	97fffc61 	bl	61002bb0 <printf>
            break;
    61003a30:	14000009 	b	61003a54 <error_stat_print+0x21c>
        case 12:
            printf("MMC_BOOT_ACK_ERR\r\n");
    61003a34:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003a38:	9122e000 	add	x0, x0, #0x8b8
    61003a3c:	97fffc5d 	bl	61002bb0 <printf>
            break;
    61003a40:	14000005 	b	61003a54 <error_stat_print+0x21c>
        default:
            printf("unknown error state\r\n");
    61003a44:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003a48:	91234000 	add	x0, x0, #0x8d0
    61003a4c:	97fffc59 	bl	61002bb0 <printf>
            break;
    61003a50:	d503201f 	nop
    }
}
    61003a54:	d503201f 	nop
    61003a58:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61003a5c:	d65f03c0 	ret

Disassembly of section .text.error_stat_check:

0000000061003a60 <error_stat_check>:

void error_stat_check(volatile ERROR_INT_STAT_R__NORMAL_INT_STAT_R r)
{
    61003a60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61003a64:	910003fd 	mov	x29, sp
    61003a68:	b9001be0 	str	w0, [sp, #24]
    uint32_t i = 0;
    61003a6c:	b9002fff 	str	wzr, [sp, #44]
    uint32_t errorbits = r.d32>>0x10;
    61003a70:	b9401be0 	ldr	w0, [sp, #24]
    61003a74:	53107c00 	lsr	w0, w0, #16
    61003a78:	b9002be0 	str	w0, [sp, #40]
    for(;i < MMC_ERR_INT_STAT_BITS_LEN; i++){
    61003a7c:	1400000c 	b	61003aac <error_stat_check+0x4c>
        if(((errorbits>>i)&0x1) == 1)
    61003a80:	b9402fe0 	ldr	w0, [sp, #44]
    61003a84:	b9402be1 	ldr	w1, [sp, #40]
    61003a88:	1ac02420 	lsr	w0, w1, w0
    61003a8c:	12000000 	and	w0, w0, #0x1
    61003a90:	7100001f 	cmp	w0, #0x0
    61003a94:	54000060 	b.eq	61003aa0 <error_stat_check+0x40>  // b.none
            error_stat_print(i);
    61003a98:	b9402fe0 	ldr	w0, [sp, #44]
    61003a9c:	97ffff67 	bl	61003838 <error_stat_print>
    for(;i < MMC_ERR_INT_STAT_BITS_LEN; i++){
    61003aa0:	b9402fe0 	ldr	w0, [sp, #44]
    61003aa4:	11000400 	add	w0, w0, #0x1
    61003aa8:	b9002fe0 	str	w0, [sp, #44]
    61003aac:	b9402fe0 	ldr	w0, [sp, #44]
    61003ab0:	7100301f 	cmp	w0, #0xc
    61003ab4:	54fffe69 	b.ls	61003a80 <error_stat_check+0x20>  // b.plast
    }
}
    61003ab8:	d503201f 	nop
    61003abc:	d503201f 	nop
    61003ac0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61003ac4:	d65f03c0 	ret

Disassembly of section .text.wait_command_complete:

0000000061003ac8 <wait_command_complete>:

u32 wait_command_complete(volatile DWC_mshc_block_registers* ptr)
{
    61003ac8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61003acc:	910003fd 	mov	x29, sp
    61003ad0:	f9000fe0 	str	x0, [sp, #24]
    __IO ERROR_INT_STAT_R__NORMAL_INT_STAT_R r;
    MTIMER_OUT_CONDITION(MMC_CMD_TIMEOUT_VAL, &mtimer, r.bit.cmd_complete != 1){
    61003ad4:	d290d401 	mov	x1, #0x86a0                	// #34464
    61003ad8:	f2a00021 	movk	x1, #0x1, lsl #16
    61003adc:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003ae0:	913d8000 	add	x0, x0, #0xf60
    61003ae4:	97ffff0b 	bl	61003710 <Mtimer_Start>
    61003ae8:	14000005 	b	61003afc <wait_command_complete+0x34>
        r.d32 = REG_READ(&(ptr->error_int_stat_r__normal_int_stat.d32));
    61003aec:	f9400fe0 	ldr	x0, [sp, #24]
    61003af0:	9100c000 	add	x0, x0, #0x30
    61003af4:	97ffff42 	bl	610037fc <reg_read>
    61003af8:	b9002be0 	str	w0, [sp, #40]
    MTIMER_OUT_CONDITION(MMC_CMD_TIMEOUT_VAL, &mtimer, r.bit.cmd_complete != 1){
    61003afc:	b9402be0 	ldr	w0, [sp, #40]
    61003b00:	d3400000 	ubfx	x0, x0, #0, #1
    61003b04:	12001c00 	and	w0, w0, #0xff
    61003b08:	7100041f 	cmp	w0, #0x1
    61003b0c:	540000c0 	b.eq	61003b24 <wait_command_complete+0x5c>  // b.none
    61003b10:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003b14:	913d8000 	add	x0, x0, #0xf60
    61003b18:	97ffff14 	bl	61003768 <Mtimer_TimerOut>
    61003b1c:	7100001f 	cmp	w0, #0x0
    61003b20:	54fffe60 	b.eq	61003aec <wait_command_complete+0x24>  // b.none
    }
    if(Mtimer_IsTimerOut(&mtimer)){
    61003b24:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003b28:	913d8000 	add	x0, x0, #0xf60
    61003b2c:	97ffff2e 	bl	610037e4 <Mtimer_IsTimerOut>
    61003b30:	7100001f 	cmp	w0, #0x0
    61003b34:	540000a0 	b.eq	61003b48 <wait_command_complete+0x80>  // b.none
        error_stat_check(r);
    61003b38:	b9402be0 	ldr	w0, [sp, #40]
    61003b3c:	97ffffc9 	bl	61003a60 <error_stat_check>
        return MMC_CMD_TIMEOUT;
    61003b40:	52800040 	mov	w0, #0x2                   	// #2
    61003b44:	14000010 	b	61003b84 <wait_command_complete+0xbc>
    }else{
        r.d32 = REG_READ(&(ptr->error_int_stat_r__normal_int_stat.d32));
    61003b48:	f9400fe0 	ldr	x0, [sp, #24]
    61003b4c:	9100c000 	add	x0, x0, #0x30
    61003b50:	97ffff2b 	bl	610037fc <reg_read>
    61003b54:	b9002be0 	str	w0, [sp, #40]
        r.bit.cmd_complete = 0x1;
    61003b58:	b9402be0 	ldr	w0, [sp, #40]
    61003b5c:	32000000 	orr	w0, w0, #0x1
    61003b60:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
    61003b64:	f9400fe0 	ldr	x0, [sp, #24]
    61003b68:	9100c000 	add	x0, x0, #0x30
    61003b6c:	aa0003e2 	mov	x2, x0
    61003b70:	b9402be0 	ldr	w0, [sp, #40]
    61003b74:	2a0003e1 	mov	w1, w0
    61003b78:	aa0203e0 	mov	x0, x2
    61003b7c:	97ffff26 	bl	61003814 <reg_write>
        return MMC_SUCCESS;
    61003b80:	52800000 	mov	w0, #0x0                   	// #0
    }
}
    61003b84:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61003b88:	d65f03c0 	ret

Disassembly of section .text.wait_transfer_complete:

0000000061003b8c <wait_transfer_complete>:

u32 wait_transfer_complete(volatile DWC_mshc_block_registers* ptr)
{
    61003b8c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61003b90:	910003fd 	mov	x29, sp
    61003b94:	f9000fe0 	str	x0, [sp, #24]
    __IO ERROR_INT_STAT_R__NORMAL_INT_STAT_R r;
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, r.bit.xfer_complete != 1){
    61003b98:	d2884801 	mov	x1, #0x4240                	// #16960
    61003b9c:	f2a001e1 	movk	x1, #0xf, lsl #16
    61003ba0:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003ba4:	913d8000 	add	x0, x0, #0xf60
    61003ba8:	97fffeda 	bl	61003710 <Mtimer_Start>
    61003bac:	14000005 	b	61003bc0 <wait_transfer_complete+0x34>
        r.d32 = REG_READ(&(ptr->error_int_stat_r__normal_int_stat.d32));
    61003bb0:	f9400fe0 	ldr	x0, [sp, #24]
    61003bb4:	9100c000 	add	x0, x0, #0x30
    61003bb8:	97ffff11 	bl	610037fc <reg_read>
    61003bbc:	b9002be0 	str	w0, [sp, #40]
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, r.bit.xfer_complete != 1){
    61003bc0:	b9402be0 	ldr	w0, [sp, #40]
    61003bc4:	d3410400 	ubfx	x0, x0, #1, #1
    61003bc8:	12001c00 	and	w0, w0, #0xff
    61003bcc:	7100041f 	cmp	w0, #0x1
    61003bd0:	540000c0 	b.eq	61003be8 <wait_transfer_complete+0x5c>  // b.none
    61003bd4:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003bd8:	913d8000 	add	x0, x0, #0xf60
    61003bdc:	97fffee3 	bl	61003768 <Mtimer_TimerOut>
    61003be0:	7100001f 	cmp	w0, #0x0
    61003be4:	54fffe60 	b.eq	61003bb0 <wait_transfer_complete+0x24>  // b.none
    }
    if(Mtimer_IsTimerOut(&mtimer)){
    61003be8:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003bec:	913d8000 	add	x0, x0, #0xf60
    61003bf0:	97fffefd 	bl	610037e4 <Mtimer_IsTimerOut>
    61003bf4:	7100001f 	cmp	w0, #0x0
    61003bf8:	540000a0 	b.eq	61003c0c <wait_transfer_complete+0x80>  // b.none
        error_stat_check(r);
    61003bfc:	b9402be0 	ldr	w0, [sp, #40]
    61003c00:	97ffff98 	bl	61003a60 <error_stat_check>
        return MMC_XFER_TIMEOUT;
    61003c04:	52800060 	mov	w0, #0x3                   	// #3
    61003c08:	14000010 	b	61003c48 <wait_transfer_complete+0xbc>
    }else{
        r.d32 = REG_READ(&(ptr->error_int_stat_r__normal_int_stat.d32));
    61003c0c:	f9400fe0 	ldr	x0, [sp, #24]
    61003c10:	9100c000 	add	x0, x0, #0x30
    61003c14:	97fffefa 	bl	610037fc <reg_read>
    61003c18:	b9002be0 	str	w0, [sp, #40]
        r.bit.xfer_complete = 0x1;
    61003c1c:	b9402be0 	ldr	w0, [sp, #40]
    61003c20:	321f0000 	orr	w0, w0, #0x2
    61003c24:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
    61003c28:	f9400fe0 	ldr	x0, [sp, #24]
    61003c2c:	9100c000 	add	x0, x0, #0x30
    61003c30:	aa0003e2 	mov	x2, x0
    61003c34:	b9402be0 	ldr	w0, [sp, #40]
    61003c38:	2a0003e1 	mov	w1, w0
    61003c3c:	aa0203e0 	mov	x0, x2
    61003c40:	97fffef5 	bl	61003814 <reg_write>
        return MMC_SUCCESS;
    61003c44:	52800000 	mov	w0, #0x0                   	// #0
    }
}
    61003c48:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61003c4c:	d65f03c0 	ret

Disassembly of section .text.wait_clock_stable:

0000000061003c50 <wait_clock_stable>:
        return MMC_SUCCESS;
    }
}

u32 wait_clock_stable(volatile DWC_mshc_block_registers* ptr)
{
    61003c50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61003c54:	910003fd 	mov	x29, sp
    61003c58:	f9000fe0 	str	x0, [sp, #24]
    __IO SW_RST_R__TOUT_CTRL_R__CLK_CTRL_R r;
    MTIMER_OUT_CONDITION(MMC_WAIT_CLK_STABLE_TIMEOUT_VAL, &mtimer, r.bit.internal_clk_stable != 1){
    61003c5c:	d290d401 	mov	x1, #0x86a0                	// #34464
    61003c60:	f2a00021 	movk	x1, #0x1, lsl #16
    61003c64:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003c68:	913d8000 	add	x0, x0, #0xf60
    61003c6c:	97fffea9 	bl	61003710 <Mtimer_Start>
    61003c70:	14000005 	b	61003c84 <wait_clock_stable+0x34>
        r.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32));
    61003c74:	f9400fe0 	ldr	x0, [sp, #24]
    61003c78:	9100b000 	add	x0, x0, #0x2c
    61003c7c:	97fffee0 	bl	610037fc <reg_read>
    61003c80:	b9002be0 	str	w0, [sp, #40]
    MTIMER_OUT_CONDITION(MMC_WAIT_CLK_STABLE_TIMEOUT_VAL, &mtimer, r.bit.internal_clk_stable != 1){
    61003c84:	b9402be0 	ldr	w0, [sp, #40]
    61003c88:	d3410400 	ubfx	x0, x0, #1, #1
    61003c8c:	12001c00 	and	w0, w0, #0xff
    61003c90:	7100041f 	cmp	w0, #0x1
    61003c94:	540000c0 	b.eq	61003cac <wait_clock_stable+0x5c>  // b.none
    61003c98:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003c9c:	913d8000 	add	x0, x0, #0xf60
    61003ca0:	97fffeb2 	bl	61003768 <Mtimer_TimerOut>
    61003ca4:	7100001f 	cmp	w0, #0x0
    61003ca8:	54fffe60 	b.eq	61003c74 <wait_clock_stable+0x24>  // b.none
    }
    if(Mtimer_IsTimerOut(&mtimer)){
    61003cac:	90000020 	adrp	x0, 61007000 <_bss_start>
    61003cb0:	913d8000 	add	x0, x0, #0xf60
    61003cb4:	97fffecc 	bl	610037e4 <Mtimer_IsTimerOut>
    61003cb8:	7100001f 	cmp	w0, #0x0
    61003cbc:	54000060 	b.eq	61003cc8 <wait_clock_stable+0x78>  // b.none
        return MMC_WAIT_CLK_STABLE_TIMEOUT;
    61003cc0:	52800080 	mov	w0, #0x4                   	// #4
    61003cc4:	14000002 	b	61003ccc <wait_clock_stable+0x7c>
    }else{
        return MMC_SUCCESS;
    61003cc8:	52800000 	mov	w0, #0x0                   	// #0
    }
}
    61003ccc:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61003cd0:	d65f03c0 	ret

Disassembly of section .text.HostControllerSetup:

0000000061003cd4 <HostControllerSetup>:
 * @param	None
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 HostControllerSetup(volatile DWC_mshc_block_registers* ptr)
{
    61003cd4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61003cd8:	910003fd 	mov	x29, sp
    61003cdc:	f9000fe0 	str	x0, [sp, #24]
    u32 status = MMC_SUCCESS;
    61003ce0:	b9003fff 	str	wzr, [sp, #60]
    WUP_CTRL_R__BGAP_CTRL_R__PWR_CTRL_R__HOST_CTRL1_R r1;
    SW_RST_R__TOUT_CTRL_R__CLK_CTRL_R r2;
    HOST_CTRL2_R__AUTO_CMD_STAT_R r3;
    MMC_PRINT("HostControllerSetup\r\n");   //sequence path print
    61003ce4:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003ce8:	91264000 	add	x0, x0, #0x990
    61003cec:	97fffbb1 	bl	61002bb0 <printf>

    r1.d32 = 0;
    61003cf0:	b9003bff 	str	wzr, [sp, #56]
    r1.bit.dma_sel = MMC_HC1_DMA_SEL_ADMA2;   //ADMA2
    61003cf4:	b9403be0 	ldr	w0, [sp, #56]
    61003cf8:	52800041 	mov	w1, #0x2                   	// #2
    61003cfc:	331d0420 	bfi	w0, w1, #3, #2
    61003d00:	b9003be0 	str	w0, [sp, #56]
    r1.bit.sd_bus_pwr_vdd1 = MMC_PC_SBP_VDD1_ON;   //VDD1 PWR ON support SD and eMMC
    61003d04:	b9403be0 	ldr	w0, [sp, #56]
    61003d08:	32180000 	orr	w0, w0, #0x100
    61003d0c:	b9003be0 	str	w0, [sp, #56]
    r1.bit.sd_bus_vol_vdd1 = MMC_PC_SBV_VDD1_3V3;   //3.3V
    61003d10:	b9403be0 	ldr	w0, [sp, #56]
    61003d14:	32170800 	orr	w0, w0, #0xe00
    61003d18:	b9003be0 	str	w0, [sp, #56]
    REG_WRITE(&(ptr->wup_ctrl_r__bgap_ctrl_r__pwr_ctrl_r__host_ctrl1.d32), r1.d32);
    61003d1c:	f9400fe0 	ldr	x0, [sp, #24]
    61003d20:	9100a000 	add	x0, x0, #0x28
    61003d24:	aa0003e2 	mov	x2, x0
    61003d28:	b9403be0 	ldr	w0, [sp, #56]
    61003d2c:	2a0003e1 	mov	w1, w0
    61003d30:	aa0203e0 	mov	x0, x2
    61003d34:	97fffeb8 	bl	61003814 <reg_write>
    MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    61003d38:	b9403be0 	ldr	w0, [sp, #56]
    61003d3c:	2a0003e1 	mov	w1, w0
    61003d40:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003d44:	9126a000 	add	x0, x0, #0x9a8
    61003d48:	97fffb9a 	bl	61002bb0 <printf>

    /*status = set_clock_frequency(ptr);
    if(status != MMC_SUCCESS){
        return status;
    }*/
    r2.d32 = 0;
    61003d4c:	b90033ff 	str	wzr, [sp, #48]
    r2.bit.internal_clk_en = 0x1;       //Oscillate
    61003d50:	b94033e0 	ldr	w0, [sp, #48]
    61003d54:	32000000 	orr	w0, w0, #0x1
    61003d58:	b90033e0 	str	w0, [sp, #48]
    r2.bit.clk_gen_select = 0x1;        //Programmable Clock Mode
    61003d5c:	b94033e0 	ldr	w0, [sp, #48]
    61003d60:	321b0000 	orr	w0, w0, #0x20
    61003d64:	b90033e0 	str	w0, [sp, #48]
    REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl), r2.d32);
    61003d68:	f9400fe0 	ldr	x0, [sp, #24]
    61003d6c:	9100b000 	add	x0, x0, #0x2c
    61003d70:	aa0003e2 	mov	x2, x0
    61003d74:	b94033e0 	ldr	w0, [sp, #48]
    61003d78:	2a0003e1 	mov	w1, w0
    61003d7c:	aa0203e0 	mov	x0, x2
    61003d80:	97fffea5 	bl	61003814 <reg_write>
    MMC_WAIT_CLK_STABLE(ptr);
    61003d84:	f9400fe0 	ldr	x0, [sp, #24]
    61003d88:	97ffffb2 	bl	61003c50 <wait_clock_stable>
    61003d8c:	b9003fe0 	str	w0, [sp, #60]
    61003d90:	b9403fe0 	ldr	w0, [sp, #60]
    61003d94:	7100001f 	cmp	w0, #0x0
    61003d98:	54000060 	b.eq	61003da4 <HostControllerSetup+0xd0>  // b.none
    61003d9c:	b9403fe0 	ldr	w0, [sp, #60]
    61003da0:	1400002a 	b	61003e48 <HostControllerSetup+0x174>
    r2.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl));
    61003da4:	f9400fe0 	ldr	x0, [sp, #24]
    61003da8:	9100b000 	add	x0, x0, #0x2c
    61003dac:	97fffe94 	bl	610037fc <reg_read>
    61003db0:	b90033e0 	str	w0, [sp, #48]
    r2.bit.pll_enable = 0x1;            //PLL enabled
    61003db4:	b94033e0 	ldr	w0, [sp, #48]
    61003db8:	321d0000 	orr	w0, w0, #0x8
    61003dbc:	b90033e0 	str	w0, [sp, #48]
    REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r2.d32);
    61003dc0:	f9400fe0 	ldr	x0, [sp, #24]
    61003dc4:	9100b000 	add	x0, x0, #0x2c
    61003dc8:	aa0003e2 	mov	x2, x0
    61003dcc:	b94033e0 	ldr	w0, [sp, #48]
    61003dd0:	2a0003e1 	mov	w1, w0
    61003dd4:	aa0203e0 	mov	x0, x2
    61003dd8:	97fffe8f 	bl	61003814 <reg_write>
    MMC_WAIT_CLK_STABLE(ptr);
    61003ddc:	f9400fe0 	ldr	x0, [sp, #24]
    61003de0:	97ffff9c 	bl	61003c50 <wait_clock_stable>
    61003de4:	b9003fe0 	str	w0, [sp, #60]
    61003de8:	b9403fe0 	ldr	w0, [sp, #60]
    61003dec:	7100001f 	cmp	w0, #0x0
    61003df0:	54000060 	b.eq	61003dfc <HostControllerSetup+0x128>  // b.none
    61003df4:	b9403fe0 	ldr	w0, [sp, #60]
    61003df8:	14000014 	b	61003e48 <HostControllerSetup+0x174>
    MMC_PRINT("r2.d32 is %x\r\n", r2.d32);
    61003dfc:	b94033e0 	ldr	w0, [sp, #48]
    61003e00:	2a0003e1 	mov	w1, w0
    61003e04:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003e08:	9126e000 	add	x0, x0, #0x9b8
    61003e0c:	97fffb69 	bl	61002bb0 <printf>

    r3.d32 = 0; //Do not set Version 4 Parameters
    61003e10:	b9002bff 	str	wzr, [sp, #40]
    REG_WRITE(&(ptr->host_ctrl2_r__auto_cmd_stat.d32), r3.d32);
    61003e14:	f9400fe0 	ldr	x0, [sp, #24]
    61003e18:	9100f000 	add	x0, x0, #0x3c
    61003e1c:	aa0003e2 	mov	x2, x0
    61003e20:	b9402be0 	ldr	w0, [sp, #40]
    61003e24:	2a0003e1 	mov	w1, w0
    61003e28:	aa0203e0 	mov	x0, x2
    61003e2c:	97fffe7a 	bl	61003814 <reg_write>
    MMC_PRINT("r3.d32 is %x\r\n", r3.d32);
    61003e30:	b9402be0 	ldr	w0, [sp, #40]
    61003e34:	2a0003e1 	mov	w1, w0
    61003e38:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003e3c:	91272000 	add	x0, x0, #0x9c8
    61003e40:	97fffb5c 	bl	61002bb0 <printf>
    return status;
    61003e44:	b9403fe0 	ldr	w0, [sp, #60]
}
    61003e48:	a8c47bfd 	ldp	x29, x30, [sp], #64
    61003e4c:	d65f03c0 	ret

Disassembly of section .text.HostControllerClockSetup:

0000000061003e50 <HostControllerClockSetup>:
 * @param	None
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 HostControllerClockSetup(volatile DWC_mshc_block_registers* ptr, uint32_t freq)
{
    61003e50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61003e54:	910003fd 	mov	x29, sp
    61003e58:	f9000fe0 	str	x0, [sp, #24]
    61003e5c:	b90017e1 	str	w1, [sp, #20]
    u32 status = MMC_SUCCESS;
    61003e60:	b9002fff 	str	wzr, [sp, #44]
    SW_RST_R__TOUT_CTRL_R__CLK_CTRL_R r1;
    MMC_PRINT("HostControllerClockSetup\r\n");
    61003e64:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003e68:	91276000 	add	x0, x0, #0x9d8
    61003e6c:	97fffb51 	bl	61002bb0 <printf>

    //  Host Controller Clock Setup
    if (freq == MMC_FREQ_10M)
    61003e70:	b94017e0 	ldr	w0, [sp, #20]
    61003e74:	7100041f 	cmp	w0, #0x1
    61003e78:	54000fa1 	b.ne	6100406c <HostControllerClockSetup+0x21c>  // b.any
    {
        MMC_PRINT("MMC_FREQ_10M\r\n");
    61003e7c:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003e80:	9127e000 	add	x0, x0, #0x9f8
    61003e84:	97fffb4b 	bl	61002bb0 <printf>
        r1.d32 = 0;
    61003e88:	b9002bff 	str	wzr, [sp, #40]
        r1.bit.internal_clk_en = 0x1;       //Oscillate
    61003e8c:	b9402be0 	ldr	w0, [sp, #40]
    61003e90:	32000000 	orr	w0, w0, #0x1
    61003e94:	b9002be0 	str	w0, [sp, #40]
        r1.bit.clk_gen_select = 0x1;        //Programmable Clock Mode
    61003e98:	b9402be0 	ldr	w0, [sp, #40]
    61003e9c:	321b0000 	orr	w0, w0, #0x20
    61003ea0:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl), r1.d32);
    61003ea4:	f9400fe0 	ldr	x0, [sp, #24]
    61003ea8:	9100b000 	add	x0, x0, #0x2c
    61003eac:	aa0003e2 	mov	x2, x0
    61003eb0:	b9402be0 	ldr	w0, [sp, #40]
    61003eb4:	2a0003e1 	mov	w1, w0
    61003eb8:	aa0203e0 	mov	x0, x2
    61003ebc:	97fffe56 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    61003ec0:	f9400fe0 	ldr	x0, [sp, #24]
    61003ec4:	97ffff63 	bl	61003c50 <wait_clock_stable>
    61003ec8:	b9002fe0 	str	w0, [sp, #44]
    61003ecc:	b9402fe0 	ldr	w0, [sp, #44]
    61003ed0:	7100001f 	cmp	w0, #0x0
    61003ed4:	54000060 	b.eq	61003ee0 <HostControllerClockSetup+0x90>  // b.none
    61003ed8:	b9402fe0 	ldr	w0, [sp, #44]
    61003edc:	140000de 	b	61004254 <HostControllerClockSetup+0x404>
        r1.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl));
    61003ee0:	f9400fe0 	ldr	x0, [sp, #24]
    61003ee4:	9100b000 	add	x0, x0, #0x2c
    61003ee8:	97fffe45 	bl	610037fc <reg_read>
    61003eec:	b9002be0 	str	w0, [sp, #40]
        r1.bit.pll_enable = 0x1;            //PLL enabled
    61003ef0:	b9402be0 	ldr	w0, [sp, #40]
    61003ef4:	321d0000 	orr	w0, w0, #0x8
    61003ef8:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61003efc:	f9400fe0 	ldr	x0, [sp, #24]
    61003f00:	9100b000 	add	x0, x0, #0x2c
    61003f04:	aa0003e2 	mov	x2, x0
    61003f08:	b9402be0 	ldr	w0, [sp, #40]
    61003f0c:	2a0003e1 	mov	w1, w0
    61003f10:	aa0203e0 	mov	x0, x2
    61003f14:	97fffe40 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    61003f18:	f9400fe0 	ldr	x0, [sp, #24]
    61003f1c:	97ffff4d 	bl	61003c50 <wait_clock_stable>
    61003f20:	b9002fe0 	str	w0, [sp, #44]
    61003f24:	b9402fe0 	ldr	w0, [sp, #44]
    61003f28:	7100001f 	cmp	w0, #0x0
    61003f2c:	54000060 	b.eq	61003f38 <HostControllerClockSetup+0xe8>  // b.none
    61003f30:	b9402fe0 	ldr	w0, [sp, #44]
    61003f34:	140000c8 	b	61004254 <HostControllerClockSetup+0x404>
        MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    61003f38:	b9402be0 	ldr	w0, [sp, #40]
    61003f3c:	2a0003e1 	mov	w1, w0
    61003f40:	f0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61003f44:	9126a000 	add	x0, x0, #0x9a8
    61003f48:	97fffb1a 	bl	61002bb0 <printf>

        REG_WRITE(TOP_NS__CFG_CTRL_SDIO0_ADDR, 0x00000008);     //clk soft reset
    61003f4c:	52800101 	mov	w1, #0x8                   	// #8
    61003f50:	d2802a80 	mov	x0, #0x154                 	// #340
    61003f54:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003f58:	97fffe2f 	bl	61003814 <reg_write>
        REG_WRITE(TOP_NS__CFG_CTRL_SDIO0_ADDR, 0x00000000);
    61003f5c:	52800001 	mov	w1, #0x0                   	// #0
    61003f60:	d2802a80 	mov	x0, #0x154                 	// #340
    61003f64:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61003f68:	97fffe2b 	bl	61003814 <reg_write>

        r1.d32 = 0;
    61003f6c:	b9002bff 	str	wzr, [sp, #40]
        r1.bit.internal_clk_en = 0x1;       //Oscillate
    61003f70:	b9402be0 	ldr	w0, [sp, #40]
    61003f74:	32000000 	orr	w0, w0, #0x1
    61003f78:	b9002be0 	str	w0, [sp, #40]
        r1.bit.clk_gen_select = 0x1;        //Programmable Clock Mode
    61003f7c:	b9402be0 	ldr	w0, [sp, #40]
    61003f80:	321b0000 	orr	w0, w0, #0x20
    61003f84:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61003f88:	f9400fe0 	ldr	x0, [sp, #24]
    61003f8c:	9100b000 	add	x0, x0, #0x2c
    61003f90:	aa0003e2 	mov	x2, x0
    61003f94:	b9402be0 	ldr	w0, [sp, #40]
    61003f98:	2a0003e1 	mov	w1, w0
    61003f9c:	aa0203e0 	mov	x0, x2
    61003fa0:	97fffe1d 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    61003fa4:	f9400fe0 	ldr	x0, [sp, #24]
    61003fa8:	97ffff2a 	bl	61003c50 <wait_clock_stable>
    61003fac:	b9002fe0 	str	w0, [sp, #44]
    61003fb0:	b9402fe0 	ldr	w0, [sp, #44]
    61003fb4:	7100001f 	cmp	w0, #0x0
    61003fb8:	54000060 	b.eq	61003fc4 <HostControllerClockSetup+0x174>  // b.none
    61003fbc:	b9402fe0 	ldr	w0, [sp, #44]
    61003fc0:	140000a5 	b	61004254 <HostControllerClockSetup+0x404>
        r1.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32));
    61003fc4:	f9400fe0 	ldr	x0, [sp, #24]
    61003fc8:	9100b000 	add	x0, x0, #0x2c
    61003fcc:	97fffe0c 	bl	610037fc <reg_read>
    61003fd0:	b9002be0 	str	w0, [sp, #40]
        r1.bit.pll_enable = 0x1;            //PLL enabled
    61003fd4:	b9402be0 	ldr	w0, [sp, #40]
    61003fd8:	321d0000 	orr	w0, w0, #0x8
    61003fdc:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61003fe0:	f9400fe0 	ldr	x0, [sp, #24]
    61003fe4:	9100b000 	add	x0, x0, #0x2c
    61003fe8:	aa0003e2 	mov	x2, x0
    61003fec:	b9402be0 	ldr	w0, [sp, #40]
    61003ff0:	2a0003e1 	mov	w1, w0
    61003ff4:	aa0203e0 	mov	x0, x2
    61003ff8:	97fffe07 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    61003ffc:	f9400fe0 	ldr	x0, [sp, #24]
    61004000:	97ffff14 	bl	61003c50 <wait_clock_stable>
    61004004:	b9002fe0 	str	w0, [sp, #44]
    61004008:	b9402fe0 	ldr	w0, [sp, #44]
    6100400c:	7100001f 	cmp	w0, #0x0
    61004010:	54000060 	b.eq	6100401c <HostControllerClockSetup+0x1cc>  // b.none
    61004014:	b9402fe0 	ldr	w0, [sp, #44]
    61004018:	1400008f 	b	61004254 <HostControllerClockSetup+0x404>
        r1.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32));
    6100401c:	f9400fe0 	ldr	x0, [sp, #24]
    61004020:	9100b000 	add	x0, x0, #0x2c
    61004024:	97fffdf6 	bl	610037fc <reg_read>
    61004028:	b9002be0 	str	w0, [sp, #40]
        r1.bit.sd_clk_en = 0x1;             //Enable SDCLK/RCLK
    6100402c:	b9402be0 	ldr	w0, [sp, #40]
    61004030:	321e0000 	orr	w0, w0, #0x4
    61004034:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61004038:	f9400fe0 	ldr	x0, [sp, #24]
    6100403c:	9100b000 	add	x0, x0, #0x2c
    61004040:	aa0003e2 	mov	x2, x0
    61004044:	b9402be0 	ldr	w0, [sp, #40]
    61004048:	2a0003e1 	mov	w1, w0
    6100404c:	aa0203e0 	mov	x0, x2
    61004050:	97fffdf1 	bl	61003814 <reg_write>
        MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    61004054:	b9402be0 	ldr	w0, [sp, #40]
    61004058:	2a0003e1 	mov	w1, w0
    6100405c:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004060:	9126a000 	add	x0, x0, #0x9a8
    61004064:	97fffad3 	bl	61002bb0 <printf>
    61004068:	1400007a 	b	61004250 <HostControllerClockSetup+0x400>
    }else{
        MMC_PRINT("MMC_FREQ_400K\r\n");
    6100406c:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004070:	91282000 	add	x0, x0, #0xa08
    61004074:	97fffacf 	bl	61002bb0 <printf>
        r1.d32 = 0;
    61004078:	b9002bff 	str	wzr, [sp, #40]
        r1.bit.internal_clk_en = 0x1;       //Oscillate
    6100407c:	b9402be0 	ldr	w0, [sp, #40]
    61004080:	32000000 	orr	w0, w0, #0x1
    61004084:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61004088:	f9400fe0 	ldr	x0, [sp, #24]
    6100408c:	9100b000 	add	x0, x0, #0x2c
    61004090:	aa0003e2 	mov	x2, x0
    61004094:	b9402be0 	ldr	w0, [sp, #40]
    61004098:	2a0003e1 	mov	w1, w0
    6100409c:	aa0203e0 	mov	x0, x2
    610040a0:	97fffddd 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    610040a4:	f9400fe0 	ldr	x0, [sp, #24]
    610040a8:	97fffeea 	bl	61003c50 <wait_clock_stable>
    610040ac:	b9002fe0 	str	w0, [sp, #44]
    610040b0:	b9402fe0 	ldr	w0, [sp, #44]
    610040b4:	7100001f 	cmp	w0, #0x0
    610040b8:	54000060 	b.eq	610040c4 <HostControllerClockSetup+0x274>  // b.none
    610040bc:	b9402fe0 	ldr	w0, [sp, #44]
    610040c0:	14000065 	b	61004254 <HostControllerClockSetup+0x404>
        r1.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32));
    610040c4:	f9400fe0 	ldr	x0, [sp, #24]
    610040c8:	9100b000 	add	x0, x0, #0x2c
    610040cc:	97fffdcc 	bl	610037fc <reg_read>
    610040d0:	b9002be0 	str	w0, [sp, #40]
        r1.bit.pll_enable = 0x1;            //PLL enabled
    610040d4:	b9402be0 	ldr	w0, [sp, #40]
    610040d8:	321d0000 	orr	w0, w0, #0x8
    610040dc:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    610040e0:	f9400fe0 	ldr	x0, [sp, #24]
    610040e4:	9100b000 	add	x0, x0, #0x2c
    610040e8:	aa0003e2 	mov	x2, x0
    610040ec:	b9402be0 	ldr	w0, [sp, #40]
    610040f0:	2a0003e1 	mov	w1, w0
    610040f4:	aa0203e0 	mov	x0, x2
    610040f8:	97fffdc7 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    610040fc:	f9400fe0 	ldr	x0, [sp, #24]
    61004100:	97fffed4 	bl	61003c50 <wait_clock_stable>
    61004104:	b9002fe0 	str	w0, [sp, #44]
    61004108:	b9402fe0 	ldr	w0, [sp, #44]
    6100410c:	7100001f 	cmp	w0, #0x0
    61004110:	54000060 	b.eq	6100411c <HostControllerClockSetup+0x2cc>  // b.none
    61004114:	b9402fe0 	ldr	w0, [sp, #44]
    61004118:	1400004f 	b	61004254 <HostControllerClockSetup+0x404>
        MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    6100411c:	b9402be0 	ldr	w0, [sp, #40]
    61004120:	2a0003e1 	mov	w1, w0
    61004124:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004128:	9126a000 	add	x0, x0, #0x9a8
    6100412c:	97fffaa1 	bl	61002bb0 <printf>


        REG_WRITE(TOP_NS__CFG_CTRL_SDIO0_ADDR, 0x00000008);
    61004130:	52800101 	mov	w1, #0x8                   	// #8
    61004134:	d2802a80 	mov	x0, #0x154                 	// #340
    61004138:	f2bf1000 	movk	x0, #0xf880, lsl #16
    6100413c:	97fffdb6 	bl	61003814 <reg_write>
        REG_WRITE(TOP_NS__CFG_CTRL_SDIO0_ADDR, 0x00000000);
    61004140:	52800001 	mov	w1, #0x0                   	// #0
    61004144:	d2802a80 	mov	x0, #0x154                 	// #340
    61004148:	f2bf1000 	movk	x0, #0xf880, lsl #16
    6100414c:	97fffdb2 	bl	61003814 <reg_write>
        REG_WRITE(TOP_NS__CFG_CTRL_ADDR, 0x000000b0);
    61004150:	52801601 	mov	w1, #0xb0                  	// #176
    61004154:	d2802a00 	mov	x0, #0x150                 	// #336
    61004158:	f2bf1000 	movk	x0, #0xf880, lsl #16
    6100415c:	97fffdae 	bl	61003814 <reg_write>
        
        r1.d32 = 0;
    61004160:	b9002bff 	str	wzr, [sp, #40]
        r1.bit.internal_clk_en = 0x1;       //Oscillate
    61004164:	b9402be0 	ldr	w0, [sp, #40]
    61004168:	32000000 	orr	w0, w0, #0x1
    6100416c:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61004170:	f9400fe0 	ldr	x0, [sp, #24]
    61004174:	9100b000 	add	x0, x0, #0x2c
    61004178:	aa0003e2 	mov	x2, x0
    6100417c:	b9402be0 	ldr	w0, [sp, #40]
    61004180:	2a0003e1 	mov	w1, w0
    61004184:	aa0203e0 	mov	x0, x2
    61004188:	97fffda3 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    6100418c:	f9400fe0 	ldr	x0, [sp, #24]
    61004190:	97fffeb0 	bl	61003c50 <wait_clock_stable>
    61004194:	b9002fe0 	str	w0, [sp, #44]
    61004198:	b9402fe0 	ldr	w0, [sp, #44]
    6100419c:	7100001f 	cmp	w0, #0x0
    610041a0:	54000060 	b.eq	610041ac <HostControllerClockSetup+0x35c>  // b.none
    610041a4:	b9402fe0 	ldr	w0, [sp, #44]
    610041a8:	1400002b 	b	61004254 <HostControllerClockSetup+0x404>
        r1.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32));
    610041ac:	f9400fe0 	ldr	x0, [sp, #24]
    610041b0:	9100b000 	add	x0, x0, #0x2c
    610041b4:	97fffd92 	bl	610037fc <reg_read>
    610041b8:	b9002be0 	str	w0, [sp, #40]
        r1.bit.pll_enable = 0x1;            //PLL enabled
    610041bc:	b9402be0 	ldr	w0, [sp, #40]
    610041c0:	321d0000 	orr	w0, w0, #0x8
    610041c4:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    610041c8:	f9400fe0 	ldr	x0, [sp, #24]
    610041cc:	9100b000 	add	x0, x0, #0x2c
    610041d0:	aa0003e2 	mov	x2, x0
    610041d4:	b9402be0 	ldr	w0, [sp, #40]
    610041d8:	2a0003e1 	mov	w1, w0
    610041dc:	aa0203e0 	mov	x0, x2
    610041e0:	97fffd8d 	bl	61003814 <reg_write>
        MMC_WAIT_CLK_STABLE(ptr);
    610041e4:	f9400fe0 	ldr	x0, [sp, #24]
    610041e8:	97fffe9a 	bl	61003c50 <wait_clock_stable>
    610041ec:	b9002fe0 	str	w0, [sp, #44]
    610041f0:	b9402fe0 	ldr	w0, [sp, #44]
    610041f4:	7100001f 	cmp	w0, #0x0
    610041f8:	54000060 	b.eq	61004204 <HostControllerClockSetup+0x3b4>  // b.none
    610041fc:	b9402fe0 	ldr	w0, [sp, #44]
    61004200:	14000015 	b	61004254 <HostControllerClockSetup+0x404>
        r1.d32 = REG_READ(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32));
    61004204:	f9400fe0 	ldr	x0, [sp, #24]
    61004208:	9100b000 	add	x0, x0, #0x2c
    6100420c:	97fffd7c 	bl	610037fc <reg_read>
    61004210:	b9002be0 	str	w0, [sp, #40]
        r1.bit.sd_clk_en = 0x1;             //Enable SDCLK/RCLK
    61004214:	b9402be0 	ldr	w0, [sp, #40]
    61004218:	321e0000 	orr	w0, w0, #0x4
    6100421c:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(ptr->sw_rst_r__tout_ctrl_r__clk_ctrl.d32), r1.d32);
    61004220:	f9400fe0 	ldr	x0, [sp, #24]
    61004224:	9100b000 	add	x0, x0, #0x2c
    61004228:	aa0003e2 	mov	x2, x0
    6100422c:	b9402be0 	ldr	w0, [sp, #40]
    61004230:	2a0003e1 	mov	w1, w0
    61004234:	aa0203e0 	mov	x0, x2
    61004238:	97fffd77 	bl	61003814 <reg_write>
        MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    6100423c:	b9402be0 	ldr	w0, [sp, #40]
    61004240:	2a0003e1 	mov	w1, w0
    61004244:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004248:	9126a000 	add	x0, x0, #0x9a8
    6100424c:	97fffa59 	bl	61002bb0 <printf>
    }
    return status;
    61004250:	b9402fe0 	ldr	w0, [sp, #44]
}
    61004254:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61004258:	d65f03c0 	ret

Disassembly of section .text.InitInterruptSetting:

000000006100425c <InitInterruptSetting>:
 * @param	None
 * @return	status
 *
 ******************************************************************************/
u32 InitInterruptSetting(volatile DWC_mshc_block_registers* ptr)
{
    6100425c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61004260:	910003fd 	mov	x29, sp
    61004264:	f9000fe0 	str	x0, [sp, #24]
    uint32_t status = MMC_SUCCESS;
    61004268:	b9003fff 	str	wzr, [sp, #60]
    ERROR_INT_STAT_EN_R__NORMAL_INT_STAT_EN_R r1;
    ERROR_INT_SIGNAL_EN_R__NORMAL_INT_SIGNAL_EN_R r2;
    ERROR_INT_STAT_EN_R__NORMAL_INT_STAT_EN_R r3;
    HOST_CTRL2_R__AUTO_CMD_STAT_R r4;

    MMC_PRINT("InitInterruptSetting\r\n");
    6100426c:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004270:	91286000 	add	x0, x0, #0xa18
    61004274:	97fffa4f 	bl	61002bb0 <printf>
    r1.d32 = 0;
    61004278:	b9003bff 	str	wzr, [sp, #56]
    r1.bit.cmd_complete_stat_en = 0x1;
    6100427c:	b9403be0 	ldr	w0, [sp, #56]
    61004280:	32000000 	orr	w0, w0, #0x1
    61004284:	b9003be0 	str	w0, [sp, #56]
    r1.bit.xfer_complete_stat_en = 0x1;
    61004288:	b9403be0 	ldr	w0, [sp, #56]
    6100428c:	321f0000 	orr	w0, w0, #0x2
    61004290:	b9003be0 	str	w0, [sp, #56]
    r1.bit.bgap_event_stat_en = 0x1;
    61004294:	b9403be0 	ldr	w0, [sp, #56]
    61004298:	321e0000 	orr	w0, w0, #0x4
    6100429c:	b9003be0 	str	w0, [sp, #56]
    r1.bit.dma_interrupt_stat_en = 0x1;
    610042a0:	b9403be0 	ldr	w0, [sp, #56]
    610042a4:	321d0000 	orr	w0, w0, #0x8
    610042a8:	b9003be0 	str	w0, [sp, #56]
    r1.bit.buf_wr_ready_stat_en = 0x1;
    610042ac:	b9403be0 	ldr	w0, [sp, #56]
    610042b0:	321c0000 	orr	w0, w0, #0x10
    610042b4:	b9003be0 	str	w0, [sp, #56]
    r1.bit.buf_rd_ready_stat_en = 0x1;
    610042b8:	b9403be0 	ldr	w0, [sp, #56]
    610042bc:	321b0000 	orr	w0, w0, #0x20
    610042c0:	b9003be0 	str	w0, [sp, #56]
    r1.bit.card_insertion_stat_en = 0x1;
    610042c4:	b9403be0 	ldr	w0, [sp, #56]
    610042c8:	321a0000 	orr	w0, w0, #0x40
    610042cc:	b9003be0 	str	w0, [sp, #56]
    r1.bit.card_removal_stat_en = 0x1;
    610042d0:	b9403be0 	ldr	w0, [sp, #56]
    610042d4:	32190000 	orr	w0, w0, #0x80
    610042d8:	b9003be0 	str	w0, [sp, #56]
    r1.bit.int_a_stat_en = 0x1;
    610042dc:	b9403be0 	ldr	w0, [sp, #56]
    610042e0:	32170000 	orr	w0, w0, #0x200
    610042e4:	b9003be0 	str	w0, [sp, #56]
    REG_WRITE(&(ptr->error_int_stat_en_r__normal_int_stat_en.d32), r1.d32);
    610042e8:	f9400fe0 	ldr	x0, [sp, #24]
    610042ec:	9100d000 	add	x0, x0, #0x34
    610042f0:	aa0003e2 	mov	x2, x0
    610042f4:	b9403be0 	ldr	w0, [sp, #56]
    610042f8:	2a0003e1 	mov	w1, w0
    610042fc:	aa0203e0 	mov	x0, x2
    61004300:	97fffd45 	bl	61003814 <reg_write>
    MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    61004304:	b9403be0 	ldr	w0, [sp, #56]
    61004308:	2a0003e1 	mov	w1, w0
    6100430c:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004310:	9126a000 	add	x0, x0, #0x9a8
    61004314:	97fffa27 	bl	61002bb0 <printf>

    r2.d32 = 0;
    61004318:	b90033ff 	str	wzr, [sp, #48]
    r2.bit.cmd_complete_signal_en = 0x1;
    6100431c:	b94033e0 	ldr	w0, [sp, #48]
    61004320:	32000000 	orr	w0, w0, #0x1
    61004324:	b90033e0 	str	w0, [sp, #48]
    r2.bit.xfer_complete_signal_en = 0x1;
    61004328:	b94033e0 	ldr	w0, [sp, #48]
    6100432c:	321f0000 	orr	w0, w0, #0x2
    61004330:	b90033e0 	str	w0, [sp, #48]
    r2.bit.bgap_event_signal_en = 0x1;
    61004334:	b94033e0 	ldr	w0, [sp, #48]
    61004338:	321e0000 	orr	w0, w0, #0x4
    6100433c:	b90033e0 	str	w0, [sp, #48]
    r2.bit.dma_interrupt_signal_en = 0x1;
    61004340:	b94033e0 	ldr	w0, [sp, #48]
    61004344:	321d0000 	orr	w0, w0, #0x8
    61004348:	b90033e0 	str	w0, [sp, #48]
    r2.bit.buf_wr_ready_signal_en = 0x1;
    6100434c:	b94033e0 	ldr	w0, [sp, #48]
    61004350:	321c0000 	orr	w0, w0, #0x10
    61004354:	b90033e0 	str	w0, [sp, #48]
    r2.bit.buf_rd_ready_signal_en = 0x1;
    61004358:	b94033e0 	ldr	w0, [sp, #48]
    6100435c:	321b0000 	orr	w0, w0, #0x20
    61004360:	b90033e0 	str	w0, [sp, #48]
    r2.bit.card_insertion_signal_en = 0x1;
    61004364:	b94033e0 	ldr	w0, [sp, #48]
    61004368:	321a0000 	orr	w0, w0, #0x40
    6100436c:	b90033e0 	str	w0, [sp, #48]
    r2.bit.card_removal_signal_en = 0x1;
    61004370:	b94033e0 	ldr	w0, [sp, #48]
    61004374:	32190000 	orr	w0, w0, #0x80
    61004378:	b90033e0 	str	w0, [sp, #48]
    REG_WRITE(&(ptr->error_int_signal_en_r__normal_int_signal_en.d32), r2.d32);
    6100437c:	f9400fe0 	ldr	x0, [sp, #24]
    61004380:	9100e000 	add	x0, x0, #0x38
    61004384:	aa0003e2 	mov	x2, x0
    61004388:	b94033e0 	ldr	w0, [sp, #48]
    6100438c:	2a0003e1 	mov	w1, w0
    61004390:	aa0203e0 	mov	x0, x2
    61004394:	97fffd20 	bl	61003814 <reg_write>
    MMC_PRINT("r2.d32 is %x\r\n", r2.d32);
    61004398:	b94033e0 	ldr	w0, [sp, #48]
    6100439c:	2a0003e1 	mov	w1, w0
    610043a0:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610043a4:	9126e000 	add	x0, x0, #0x9b8
    610043a8:	97fffa02 	bl	61002bb0 <printf>

    r3.d32 = 0;
    610043ac:	b9002bff 	str	wzr, [sp, #40]
    r3.bit.cmd_complete_stat_en = 0x1;
    610043b0:	b9402be0 	ldr	w0, [sp, #40]
    610043b4:	32000000 	orr	w0, w0, #0x1
    610043b8:	b9002be0 	str	w0, [sp, #40]
    r3.bit.xfer_complete_stat_en = 0x1;
    610043bc:	b9402be0 	ldr	w0, [sp, #40]
    610043c0:	321f0000 	orr	w0, w0, #0x2
    610043c4:	b9002be0 	str	w0, [sp, #40]
    r3.bit.bgap_event_stat_en = 0x1;
    610043c8:	b9402be0 	ldr	w0, [sp, #40]
    610043cc:	321e0000 	orr	w0, w0, #0x4
    610043d0:	b9002be0 	str	w0, [sp, #40]
    r3.bit.dma_interrupt_stat_en = 0x1;
    610043d4:	b9402be0 	ldr	w0, [sp, #40]
    610043d8:	321d0000 	orr	w0, w0, #0x8
    610043dc:	b9002be0 	str	w0, [sp, #40]
    r3.bit.buf_wr_ready_stat_en = 0x1;
    610043e0:	b9402be0 	ldr	w0, [sp, #40]
    610043e4:	321c0000 	orr	w0, w0, #0x10
    610043e8:	b9002be0 	str	w0, [sp, #40]
    r3.bit.buf_rd_ready_stat_en = 0x1;
    610043ec:	b9402be0 	ldr	w0, [sp, #40]
    610043f0:	321b0000 	orr	w0, w0, #0x20
    610043f4:	b9002be0 	str	w0, [sp, #40]
    r3.bit.card_insertion_stat_en = 0x1;
    610043f8:	b9402be0 	ldr	w0, [sp, #40]
    610043fc:	321a0000 	orr	w0, w0, #0x40
    61004400:	b9002be0 	str	w0, [sp, #40]
    r3.bit.card_removal_stat_en = 0x1;
    61004404:	b9402be0 	ldr	w0, [sp, #40]
    61004408:	32190000 	orr	w0, w0, #0x80
    6100440c:	b9002be0 	str	w0, [sp, #40]
    r3.bit.int_a_stat_en = 0x1;
    61004410:	b9402be0 	ldr	w0, [sp, #40]
    61004414:	32170000 	orr	w0, w0, #0x200
    61004418:	b9002be0 	str	w0, [sp, #40]
    r3.bit.cmd_tout_err_stat_en = 0x1;
    6100441c:	b9402be0 	ldr	w0, [sp, #40]
    61004420:	32100000 	orr	w0, w0, #0x10000
    61004424:	b9002be0 	str	w0, [sp, #40]
    r3.bit.cmd_crc_err_stat_en = 0x1;
    61004428:	b9402be0 	ldr	w0, [sp, #40]
    6100442c:	320f0000 	orr	w0, w0, #0x20000
    61004430:	b9002be0 	str	w0, [sp, #40]
    r3.bit.cmd_end_bit_err_stat_en = 0x1;
    61004434:	b9402be0 	ldr	w0, [sp, #40]
    61004438:	320e0000 	orr	w0, w0, #0x40000
    6100443c:	b9002be0 	str	w0, [sp, #40]
    r3.bit.cmd_idx_err_stat_en = 0x1;
    61004440:	b9402be0 	ldr	w0, [sp, #40]
    61004444:	320d0000 	orr	w0, w0, #0x80000
    61004448:	b9002be0 	str	w0, [sp, #40]
    r3.bit.data_tout_err_stat_en = 0x1;
    6100444c:	b9402be0 	ldr	w0, [sp, #40]
    61004450:	320c0000 	orr	w0, w0, #0x100000
    61004454:	b9002be0 	str	w0, [sp, #40]
    r3.bit.data_crc_err_stat_en = 0x1;
    61004458:	b9402be0 	ldr	w0, [sp, #40]
    6100445c:	320b0000 	orr	w0, w0, #0x200000
    61004460:	b9002be0 	str	w0, [sp, #40]
    r3.bit.data_end_bit_err_stat_en = 0x1;
    61004464:	b9402be0 	ldr	w0, [sp, #40]
    61004468:	320a0000 	orr	w0, w0, #0x400000
    6100446c:	b9002be0 	str	w0, [sp, #40]
    r3.bit.cur_lmt_err_stat_en = 0x1;
    61004470:	b9402be0 	ldr	w0, [sp, #40]
    61004474:	32090000 	orr	w0, w0, #0x800000
    61004478:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(ptr->error_int_stat_en_r__normal_int_stat_en.d32), r3.d32);
    6100447c:	f9400fe0 	ldr	x0, [sp, #24]
    61004480:	9100d000 	add	x0, x0, #0x34
    61004484:	aa0003e2 	mov	x2, x0
    61004488:	b9402be0 	ldr	w0, [sp, #40]
    6100448c:	2a0003e1 	mov	w1, w0
    61004490:	aa0203e0 	mov	x0, x2
    61004494:	97fffce0 	bl	61003814 <reg_write>
    MMC_PRINT("r3.d32 is %x\r\n", r3.d32);
    61004498:	b9402be0 	ldr	w0, [sp, #40]
    6100449c:	2a0003e1 	mov	w1, w0
    610044a0:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610044a4:	91272000 	add	x0, x0, #0x9c8
    610044a8:	97fff9c2 	bl	61002bb0 <printf>

    r4.d32 = 0; //Do not set Version 4 Parameters
    610044ac:	b90023ff 	str	wzr, [sp, #32]
    REG_WRITE(&(ptr->host_ctrl2_r__auto_cmd_stat.d32), r4.d32);
    610044b0:	f9400fe0 	ldr	x0, [sp, #24]
    610044b4:	9100f000 	add	x0, x0, #0x3c
    610044b8:	aa0003e2 	mov	x2, x0
    610044bc:	b94023e0 	ldr	w0, [sp, #32]
    610044c0:	2a0003e1 	mov	w1, w0
    610044c4:	aa0203e0 	mov	x0, x2
    610044c8:	97fffcd3 	bl	61003814 <reg_write>
    MMC_PRINT("r4.d32 is %x\r\n", r4.d32);
    610044cc:	b94023e0 	ldr	w0, [sp, #32]
    610044d0:	2a0003e1 	mov	w1, w0
    610044d4:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610044d8:	9128c000 	add	x0, x0, #0xa30
    610044dc:	97fff9b5 	bl	61002bb0 <printf>

    SDRegWrite(MBIU_CTRL_R, 0x01010004);    //AHB Bus Burst Mode:Undefined INCR Burst
    610044e0:	52800081 	mov	w1, #0x4                   	// #4
    610044e4:	72a02021 	movk	w1, #0x101, lsl #16
    610044e8:	d294a200 	mov	x0, #0xa510                	// #42256
    610044ec:	f2bf0080 	movk	x0, #0xf804, lsl #16
    610044f0:	97fffcc9 	bl	61003814 <reg_write>
    return status;
    610044f4:	b9403fe0 	ldr	w0, [sp, #60]
}
    610044f8:	a8c47bfd 	ldp	x29, x30, [sp], #64
    610044fc:	d65f03c0 	ret

Disassembly of section .text.SD_GetCardInfo:

0000000061004500 <SD_GetCardInfo>:
 *         information.
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 SD_GetCardInfo(SD_CardInfo *cardinfo)
{
    61004500:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61004504:	910003fd 	mov	x29, sp
    61004508:	f9000fe0 	str	x0, [sp, #24]
    u32 status = MMC_SUCCESS;
    6100450c:	b9002fff 	str	wzr, [sp, #44]
    uint8_t tmp = 0;
    61004510:	3900afff 	strb	wzr, [sp, #43]

    MMC_PRINT("SD_GetCardInfo\r\n");
    61004514:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004518:	91290000 	add	x0, x0, #0xa40
    6100451c:	97fff9a5 	bl	61002bb0 <printf>
    cardinfo->CardType = (uint8_t)CardType;
    61004520:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004524:	913a2000 	add	x0, x0, #0xe88
    61004528:	b9400000 	ldr	w0, [x0]
    6100452c:	12001c01 	and	w1, w0, #0xff
    61004530:	f9400fe0 	ldr	x0, [sp, #24]
    61004534:	39015801 	strb	w1, [x0, #86]
    cardinfo->RCA = (uint16_t)RCA;
    61004538:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100453c:	913a1000 	add	x0, x0, #0xe84
    61004540:	b9400000 	ldr	w0, [x0]
    61004544:	12003c01 	and	w1, w0, #0xffff
    61004548:	f9400fe0 	ldr	x0, [sp, #24]
    6100454c:	7900a801 	strh	w1, [x0, #84]

    /*adjust postion*/
    CSD_Tab[0] = CSD_Tab[0] << 8;
    61004550:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004554:	913d0000 	add	x0, x0, #0xf40
    61004558:	b9400000 	ldr	w0, [x0]
    6100455c:	53185c01 	lsl	w1, w0, #8
    61004560:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004564:	913d0000 	add	x0, x0, #0xf40
    61004568:	b9000001 	str	w1, [x0]
    tmp = (CSD_Tab[1] & 0xFF000000) >> 24;
    6100456c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004570:	913d0000 	add	x0, x0, #0xf40
    61004574:	b9400400 	ldr	w0, [x0, #4]
    61004578:	53187c00 	lsr	w0, w0, #24
    6100457c:	12001c00 	and	w0, w0, #0xff
    61004580:	3900afe0 	strb	w0, [sp, #43]
    memcpy(((uint8_t *)&CSD_Tab[0]), &tmp, 1);
    61004584:	9100afe0 	add	x0, sp, #0x2b
    61004588:	d2800022 	mov	x2, #0x1                   	// #1
    6100458c:	aa0003e1 	mov	x1, x0
    61004590:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004594:	913d0000 	add	x0, x0, #0xf40
    61004598:	97fff6e8 	bl	61002138 <memcpy>
    CSD_Tab[1] = CSD_Tab[1] << 8;
    6100459c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610045a0:	913d0000 	add	x0, x0, #0xf40
    610045a4:	b9400400 	ldr	w0, [x0, #4]
    610045a8:	53185c01 	lsl	w1, w0, #8
    610045ac:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610045b0:	913d0000 	add	x0, x0, #0xf40
    610045b4:	b9000401 	str	w1, [x0, #4]
    tmp = (CSD_Tab[2] & 0xFF000000) >> 24;
    610045b8:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610045bc:	913d0000 	add	x0, x0, #0xf40
    610045c0:	b9400800 	ldr	w0, [x0, #8]
    610045c4:	53187c00 	lsr	w0, w0, #24
    610045c8:	12001c00 	and	w0, w0, #0xff
    610045cc:	3900afe0 	strb	w0, [sp, #43]
    memcpy(((uint8_t *)&CSD_Tab[1]), &tmp, 1);
    610045d0:	9100afe0 	add	x0, sp, #0x2b
    610045d4:	d2800022 	mov	x2, #0x1                   	// #1
    610045d8:	aa0003e1 	mov	x1, x0
    610045dc:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610045e0:	913d1000 	add	x0, x0, #0xf44
    610045e4:	97fff6d5 	bl	61002138 <memcpy>
    CSD_Tab[2] = CSD_Tab[2] << 8;
    610045e8:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610045ec:	913d0000 	add	x0, x0, #0xf40
    610045f0:	b9400800 	ldr	w0, [x0, #8]
    610045f4:	53185c01 	lsl	w1, w0, #8
    610045f8:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610045fc:	913d0000 	add	x0, x0, #0xf40
    61004600:	b9000801 	str	w1, [x0, #8]
    tmp = (CSD_Tab[3] & 0xFF000000) >> 24;
    61004604:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004608:	913d0000 	add	x0, x0, #0xf40
    6100460c:	b9400c00 	ldr	w0, [x0, #12]
    61004610:	53187c00 	lsr	w0, w0, #24
    61004614:	12001c00 	and	w0, w0, #0xff
    61004618:	3900afe0 	strb	w0, [sp, #43]
    memcpy(((uint8_t *)&CSD_Tab[2]), &tmp, 1);
    6100461c:	9100afe0 	add	x0, sp, #0x2b
    61004620:	d2800022 	mov	x2, #0x1                   	// #1
    61004624:	aa0003e1 	mov	x1, x0
    61004628:	f0000000 	adrp	x0, 61007000 <_bss_start>
    6100462c:	913d2000 	add	x0, x0, #0xf48
    61004630:	97fff6c2 	bl	61002138 <memcpy>
    CSD_Tab[3] = CSD_Tab[3] << 8;
    61004634:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004638:	913d0000 	add	x0, x0, #0xf40
    6100463c:	b9400c00 	ldr	w0, [x0, #12]
    61004640:	53185c01 	lsl	w1, w0, #8
    61004644:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004648:	913d0000 	add	x0, x0, #0xf40
    6100464c:	b9000c01 	str	w1, [x0, #12]

    /*!< Byte 0 */
    tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
    61004650:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004654:	913d0000 	add	x0, x0, #0xf40
    61004658:	b9400000 	ldr	w0, [x0]
    6100465c:	53187c00 	lsr	w0, w0, #24
    61004660:	12001c00 	and	w0, w0, #0xff
    61004664:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
    61004668:	3940afe0 	ldrb	w0, [sp, #43]
    6100466c:	53067c00 	lsr	w0, w0, #6
    61004670:	12001c01 	and	w1, w0, #0xff
    61004674:	f9400fe0 	ldr	x0, [sp, #24]
    61004678:	39000001 	strb	w1, [x0]
    cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
    6100467c:	3940afe0 	ldrb	w0, [sp, #43]
    61004680:	13027c00 	asr	w0, w0, #2
    61004684:	12001c00 	and	w0, w0, #0xff
    61004688:	12000c00 	and	w0, w0, #0xf
    6100468c:	12001c01 	and	w1, w0, #0xff
    61004690:	f9400fe0 	ldr	x0, [sp, #24]
    61004694:	39000401 	strb	w1, [x0, #1]
    cardinfo->SD_csd.Reserved1 = tmp & 0x03;
    61004698:	3940afe0 	ldrb	w0, [sp, #43]
    6100469c:	12000400 	and	w0, w0, #0x3
    610046a0:	12001c01 	and	w1, w0, #0xff
    610046a4:	f9400fe0 	ldr	x0, [sp, #24]
    610046a8:	39000801 	strb	w1, [x0, #2]

    /*!< Byte 1 */
    tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
    610046ac:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610046b0:	913d0000 	add	x0, x0, #0xf40
    610046b4:	b9400000 	ldr	w0, [x0]
    610046b8:	53107c00 	lsr	w0, w0, #16
    610046bc:	12001c00 	and	w0, w0, #0xff
    610046c0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.TAAC = tmp;
    610046c4:	3940afe1 	ldrb	w1, [sp, #43]
    610046c8:	f9400fe0 	ldr	x0, [sp, #24]
    610046cc:	39000c01 	strb	w1, [x0, #3]

    /*!< Byte 2 */
    tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
    610046d0:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610046d4:	913d0000 	add	x0, x0, #0xf40
    610046d8:	b9400000 	ldr	w0, [x0]
    610046dc:	53087c00 	lsr	w0, w0, #8
    610046e0:	12001c00 	and	w0, w0, #0xff
    610046e4:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.NSAC = tmp;
    610046e8:	3940afe1 	ldrb	w1, [sp, #43]
    610046ec:	f9400fe0 	ldr	x0, [sp, #24]
    610046f0:	39001001 	strb	w1, [x0, #4]

    /*!< Byte 3 */
    tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
    610046f4:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610046f8:	913d0000 	add	x0, x0, #0xf40
    610046fc:	b9400000 	ldr	w0, [x0]
    61004700:	12001c00 	and	w0, w0, #0xff
    61004704:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.MaxBusClkFrec = tmp;
    61004708:	3940afe1 	ldrb	w1, [sp, #43]
    6100470c:	f9400fe0 	ldr	x0, [sp, #24]
    61004710:	39001401 	strb	w1, [x0, #5]

    /*!< Byte 4 */
    tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
    61004714:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004718:	913d0000 	add	x0, x0, #0xf40
    6100471c:	b9400400 	ldr	w0, [x0, #4]
    61004720:	53187c00 	lsr	w0, w0, #24
    61004724:	12001c00 	and	w0, w0, #0xff
    61004728:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.CardComdClasses = tmp << 4;
    6100472c:	3940afe0 	ldrb	w0, [sp, #43]
    61004730:	12003c00 	and	w0, w0, #0xffff
    61004734:	531c2c00 	ubfiz	w0, w0, #4, #12
    61004738:	12003c01 	and	w1, w0, #0xffff
    6100473c:	f9400fe0 	ldr	x0, [sp, #24]
    61004740:	79000c01 	strh	w1, [x0, #6]

    /*!< Byte 5 */
    tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
    61004744:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004748:	913d0000 	add	x0, x0, #0xf40
    6100474c:	b9400400 	ldr	w0, [x0, #4]
    61004750:	53107c00 	lsr	w0, w0, #16
    61004754:	12001c00 	and	w0, w0, #0xff
    61004758:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
    6100475c:	f9400fe0 	ldr	x0, [sp, #24]
    61004760:	79400c00 	ldrh	w0, [x0, #6]
    61004764:	12003c01 	and	w1, w0, #0xffff
    61004768:	3940afe0 	ldrb	w0, [sp, #43]
    6100476c:	53047c00 	lsr	w0, w0, #4
    61004770:	12001c00 	and	w0, w0, #0xff
    61004774:	12003c00 	and	w0, w0, #0xffff
    61004778:	2a000020 	orr	w0, w1, w0
    6100477c:	12003c01 	and	w1, w0, #0xffff
    61004780:	f9400fe0 	ldr	x0, [sp, #24]
    61004784:	79000c01 	strh	w1, [x0, #6]
    cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
    61004788:	3940afe0 	ldrb	w0, [sp, #43]
    6100478c:	12000c00 	and	w0, w0, #0xf
    61004790:	12001c01 	and	w1, w0, #0xff
    61004794:	f9400fe0 	ldr	x0, [sp, #24]
    61004798:	39002001 	strb	w1, [x0, #8]

    /*!< Byte 6 */
    tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
    6100479c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610047a0:	913d0000 	add	x0, x0, #0xf40
    610047a4:	b9400400 	ldr	w0, [x0, #4]
    610047a8:	53087c00 	lsr	w0, w0, #8
    610047ac:	12001c00 	and	w0, w0, #0xff
    610047b0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
    610047b4:	3940afe0 	ldrb	w0, [sp, #43]
    610047b8:	53077c00 	lsr	w0, w0, #7
    610047bc:	12001c01 	and	w1, w0, #0xff
    610047c0:	f9400fe0 	ldr	x0, [sp, #24]
    610047c4:	39002401 	strb	w1, [x0, #9]
    cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
    610047c8:	3940afe0 	ldrb	w0, [sp, #43]
    610047cc:	13067c00 	asr	w0, w0, #6
    610047d0:	12001c00 	and	w0, w0, #0xff
    610047d4:	12000000 	and	w0, w0, #0x1
    610047d8:	12001c01 	and	w1, w0, #0xff
    610047dc:	f9400fe0 	ldr	x0, [sp, #24]
    610047e0:	39002801 	strb	w1, [x0, #10]
    cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
    610047e4:	3940afe0 	ldrb	w0, [sp, #43]
    610047e8:	13057c00 	asr	w0, w0, #5
    610047ec:	12001c00 	and	w0, w0, #0xff
    610047f0:	12000000 	and	w0, w0, #0x1
    610047f4:	12001c01 	and	w1, w0, #0xff
    610047f8:	f9400fe0 	ldr	x0, [sp, #24]
    610047fc:	39002c01 	strb	w1, [x0, #11]
    cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
    61004800:	3940afe0 	ldrb	w0, [sp, #43]
    61004804:	13047c00 	asr	w0, w0, #4
    61004808:	12001c00 	and	w0, w0, #0xff
    6100480c:	12000000 	and	w0, w0, #0x1
    61004810:	12001c01 	and	w1, w0, #0xff
    61004814:	f9400fe0 	ldr	x0, [sp, #24]
    61004818:	39003001 	strb	w1, [x0, #12]
    cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
    6100481c:	f9400fe0 	ldr	x0, [sp, #24]
    61004820:	3900341f 	strb	wzr, [x0, #13]

    if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0)){
    61004824:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004828:	913a2000 	add	x0, x0, #0xe88
    6100482c:	b9400000 	ldr	w0, [x0]
    61004830:	7100001f 	cmp	w0, #0x0
    61004834:	540000c0 	b.eq	6100484c <SD_GetCardInfo+0x34c>  // b.none
    61004838:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100483c:	913a2000 	add	x0, x0, #0xe88
    61004840:	b9400000 	ldr	w0, [x0]
    61004844:	7100041f 	cmp	w0, #0x1
    61004848:	54000f81 	b.ne	61004a38 <SD_GetCardInfo+0x538>  // b.any
        MMC_PRINT("SD card STD catacity V1.1 or V2.0\r\n");
    6100484c:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004850:	91296000 	add	x0, x0, #0xa58
    61004854:	97fff8d7 	bl	61002bb0 <printf>
        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
    61004858:	3940afe0 	ldrb	w0, [sp, #43]
    6100485c:	53165400 	lsl	w0, w0, #10
    61004860:	12160401 	and	w1, w0, #0xc00
    61004864:	f9400fe0 	ldr	x0, [sp, #24]
    61004868:	b9001001 	str	w1, [x0, #16]

        /*!< Byte 7 */
        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    6100486c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004870:	913d0000 	add	x0, x0, #0xf40
    61004874:	b9400400 	ldr	w0, [x0, #4]
    61004878:	12001c00 	and	w0, w0, #0xff
    6100487c:	3900afe0 	strb	w0, [sp, #43]
        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
    61004880:	f9400fe0 	ldr	x0, [sp, #24]
    61004884:	b9401000 	ldr	w0, [x0, #16]
    61004888:	3940afe1 	ldrb	w1, [sp, #43]
    6100488c:	531e7421 	lsl	w1, w1, #2
    61004890:	2a010001 	orr	w1, w0, w1
    61004894:	f9400fe0 	ldr	x0, [sp, #24]
    61004898:	b9001001 	str	w1, [x0, #16]

        /*!< Byte 8 */
        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
    6100489c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    610048a0:	913d0000 	add	x0, x0, #0xf40
    610048a4:	b9400800 	ldr	w0, [x0, #8]
    610048a8:	53187c00 	lsr	w0, w0, #24
    610048ac:	12001c00 	and	w0, w0, #0xff
    610048b0:	3900afe0 	strb	w0, [sp, #43]
        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
    610048b4:	f9400fe0 	ldr	x0, [sp, #24]
    610048b8:	b9401000 	ldr	w0, [x0, #16]
    610048bc:	3940afe1 	ldrb	w1, [sp, #43]
    610048c0:	53067c21 	lsr	w1, w1, #6
    610048c4:	12001c21 	and	w1, w1, #0xff
    610048c8:	2a010001 	orr	w1, w0, w1
    610048cc:	f9400fe0 	ldr	x0, [sp, #24]
    610048d0:	b9001001 	str	w1, [x0, #16]

        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
    610048d4:	3940afe0 	ldrb	w0, [sp, #43]
    610048d8:	13037c00 	asr	w0, w0, #3
    610048dc:	12001c00 	and	w0, w0, #0xff
    610048e0:	12000800 	and	w0, w0, #0x7
    610048e4:	12001c01 	and	w1, w0, #0xff
    610048e8:	f9400fe0 	ldr	x0, [sp, #24]
    610048ec:	39005001 	strb	w1, [x0, #20]
        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
    610048f0:	3940afe0 	ldrb	w0, [sp, #43]
    610048f4:	12000800 	and	w0, w0, #0x7
    610048f8:	12001c01 	and	w1, w0, #0xff
    610048fc:	f9400fe0 	ldr	x0, [sp, #24]
    61004900:	39005401 	strb	w1, [x0, #21]

        /*!< Byte 9 */
        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    61004904:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004908:	913d0000 	add	x0, x0, #0xf40
    6100490c:	b9400800 	ldr	w0, [x0, #8]
    61004910:	53107c00 	lsr	w0, w0, #16
    61004914:	12001c00 	and	w0, w0, #0xff
    61004918:	3900afe0 	strb	w0, [sp, #43]
        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    6100491c:	3940afe0 	ldrb	w0, [sp, #43]
    61004920:	53057c00 	lsr	w0, w0, #5
    61004924:	12001c01 	and	w1, w0, #0xff
    61004928:	f9400fe0 	ldr	x0, [sp, #24]
    6100492c:	39005801 	strb	w1, [x0, #22]
        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
    61004930:	3940afe0 	ldrb	w0, [sp, #43]
    61004934:	13027c00 	asr	w0, w0, #2
    61004938:	12001c00 	and	w0, w0, #0xff
    6100493c:	12000800 	and	w0, w0, #0x7
    61004940:	12001c01 	and	w1, w0, #0xff
    61004944:	f9400fe0 	ldr	x0, [sp, #24]
    61004948:	39005c01 	strb	w1, [x0, #23]
        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
    6100494c:	3940afe0 	ldrb	w0, [sp, #43]
    61004950:	0b000000 	add	w0, w0, w0
    61004954:	12001c00 	and	w0, w0, #0xff
    61004958:	121f0400 	and	w0, w0, #0x6
    6100495c:	12001c01 	and	w1, w0, #0xff
    61004960:	f9400fe0 	ldr	x0, [sp, #24]
    61004964:	39006001 	strb	w1, [x0, #24]
        /*!< Byte 10 */
        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    61004968:	f0000000 	adrp	x0, 61007000 <_bss_start>
    6100496c:	913d0000 	add	x0, x0, #0xf40
    61004970:	b9400800 	ldr	w0, [x0, #8]
    61004974:	53087c00 	lsr	w0, w0, #8
    61004978:	12001c00 	and	w0, w0, #0xff
    6100497c:	3900afe0 	strb	w0, [sp, #43]
        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    61004980:	f9400fe0 	ldr	x0, [sp, #24]
    61004984:	39406000 	ldrb	w0, [x0, #24]
    61004988:	12001c01 	and	w1, w0, #0xff
    6100498c:	3940afe0 	ldrb	w0, [sp, #43]
    61004990:	53077c00 	lsr	w0, w0, #7
    61004994:	12001c00 	and	w0, w0, #0xff
    61004998:	2a000020 	orr	w0, w1, w0
    6100499c:	12001c01 	and	w1, w0, #0xff
    610049a0:	f9400fe0 	ldr	x0, [sp, #24]
    610049a4:	39006001 	strb	w1, [x0, #24]

        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
    610049a8:	f9400fe0 	ldr	x0, [sp, #24]
    610049ac:	b9401000 	ldr	w0, [x0, #16]
    610049b0:	11000400 	add	w0, w0, #0x1
    610049b4:	2a0003e1 	mov	w1, w0
    610049b8:	f9400fe0 	ldr	x0, [sp, #24]
    610049bc:	f9002401 	str	x1, [x0, #72]
        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
    610049c0:	f9400fe0 	ldr	x0, [sp, #24]
    610049c4:	39406000 	ldrb	w0, [x0, #24]
    610049c8:	12001c00 	and	w0, w0, #0xff
    610049cc:	11000800 	add	w0, w0, #0x2
    610049d0:	52800021 	mov	w1, #0x1                   	// #1
    610049d4:	1ac02022 	lsl	w2, w1, w0
    610049d8:	f9400fe0 	ldr	x0, [sp, #24]
    610049dc:	f9402401 	ldr	x1, [x0, #72]
    610049e0:	93407c40 	sxtw	x0, w2
    610049e4:	9b007c21 	mul	x1, x1, x0
    610049e8:	f9400fe0 	ldr	x0, [sp, #24]
    610049ec:	f9002401 	str	x1, [x0, #72]
        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
    610049f0:	f9400fe0 	ldr	x0, [sp, #24]
    610049f4:	39402000 	ldrb	w0, [x0, #8]
    610049f8:	12001c00 	and	w0, w0, #0xff
    610049fc:	2a0003e1 	mov	w1, w0
    61004a00:	52800020 	mov	w0, #0x1                   	// #1
    61004a04:	1ac12000 	lsl	w0, w0, w1
    61004a08:	2a0003e1 	mov	w1, w0
    61004a0c:	f9400fe0 	ldr	x0, [sp, #24]
    61004a10:	b9005001 	str	w1, [x0, #80]
        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
    61004a14:	f9400fe0 	ldr	x0, [sp, #24]
    61004a18:	f9402401 	ldr	x1, [x0, #72]
    61004a1c:	f9400fe0 	ldr	x0, [sp, #24]
    61004a20:	b9405000 	ldr	w0, [x0, #80]
    61004a24:	2a0003e0 	mov	w0, w0
    61004a28:	9b007c21 	mul	x1, x1, x0
    61004a2c:	f9400fe0 	ldr	x0, [sp, #24]
    61004a30:	f9002401 	str	x1, [x0, #72]
    61004a34:	1400003c 	b	61004b24 <SD_GetCardInfo+0x624>
    }else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD){
    61004a38:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004a3c:	913a2000 	add	x0, x0, #0xe88
    61004a40:	b9400000 	ldr	w0, [x0]
    61004a44:	7100081f 	cmp	w0, #0x2
    61004a48:	540006e1 	b.ne	61004b24 <SD_GetCardInfo+0x624>  // b.any
        MMC_PRINT("SD card high capacity\r\n");
    61004a4c:	d0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61004a50:	912a0000 	add	x0, x0, #0xa80
    61004a54:	97fff857 	bl	61002bb0 <printf>
        /*!< Byte 7 */
        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    61004a58:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004a5c:	913d0000 	add	x0, x0, #0xf40
    61004a60:	b9400400 	ldr	w0, [x0, #4]
    61004a64:	12001c00 	and	w0, w0, #0xff
    61004a68:	3900afe0 	strb	w0, [sp, #43]
        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
    61004a6c:	3940afe0 	ldrb	w0, [sp, #43]
    61004a70:	53103c00 	lsl	w0, w0, #16
    61004a74:	12101401 	and	w1, w0, #0x3f0000
    61004a78:	f9400fe0 	ldr	x0, [sp, #24]
    61004a7c:	b9001001 	str	w1, [x0, #16]

        /*!< Byte 8 */
        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
    61004a80:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004a84:	913d0000 	add	x0, x0, #0xf40
    61004a88:	b9400800 	ldr	w0, [x0, #8]
    61004a8c:	53187c00 	lsr	w0, w0, #24
    61004a90:	12001c00 	and	w0, w0, #0xff
    61004a94:	3900afe0 	strb	w0, [sp, #43]

        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
    61004a98:	f9400fe0 	ldr	x0, [sp, #24]
    61004a9c:	b9401000 	ldr	w0, [x0, #16]
    61004aa0:	3940afe1 	ldrb	w1, [sp, #43]
    61004aa4:	53185c21 	lsl	w1, w1, #8
    61004aa8:	2a010001 	orr	w1, w0, w1
    61004aac:	f9400fe0 	ldr	x0, [sp, #24]
    61004ab0:	b9001001 	str	w1, [x0, #16]

        /*!< Byte 9 */
        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    61004ab4:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004ab8:	913d0000 	add	x0, x0, #0xf40
    61004abc:	b9400800 	ldr	w0, [x0, #8]
    61004ac0:	53107c00 	lsr	w0, w0, #16
    61004ac4:	12001c00 	and	w0, w0, #0xff
    61004ac8:	3900afe0 	strb	w0, [sp, #43]

        cardinfo->SD_csd.DeviceSize |= (tmp);
    61004acc:	f9400fe0 	ldr	x0, [sp, #24]
    61004ad0:	b9401000 	ldr	w0, [x0, #16]
    61004ad4:	3940afe1 	ldrb	w1, [sp, #43]
    61004ad8:	2a010001 	orr	w1, w0, w1
    61004adc:	f9400fe0 	ldr	x0, [sp, #24]
    61004ae0:	b9001001 	str	w1, [x0, #16]

        /*!< Byte 10 */
        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    61004ae4:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004ae8:	913d0000 	add	x0, x0, #0xf40
    61004aec:	b9400800 	ldr	w0, [x0, #8]
    61004af0:	53087c00 	lsr	w0, w0, #8
    61004af4:	12001c00 	and	w0, w0, #0xff
    61004af8:	3900afe0 	strb	w0, [sp, #43]

        cardinfo->CardCapacity = ((uint64_t)cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
    61004afc:	f9400fe0 	ldr	x0, [sp, #24]
    61004b00:	b9401000 	ldr	w0, [x0, #16]
    61004b04:	2a0003e0 	mov	w0, w0
    61004b08:	91000400 	add	x0, x0, #0x1
    61004b0c:	d36db001 	lsl	x1, x0, #19
    61004b10:	f9400fe0 	ldr	x0, [sp, #24]
    61004b14:	f9002401 	str	x1, [x0, #72]
        cardinfo->CardBlockSize = 512;
    61004b18:	f9400fe0 	ldr	x0, [sp, #24]
    61004b1c:	52804001 	mov	w1, #0x200                 	// #512
    61004b20:	b9005001 	str	w1, [x0, #80]
    }

    cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
    61004b24:	3940afe0 	ldrb	w0, [sp, #43]
    61004b28:	13067c00 	asr	w0, w0, #6
    61004b2c:	12001c00 	and	w0, w0, #0xff
    61004b30:	12000000 	and	w0, w0, #0x1
    61004b34:	12001c01 	and	w1, w0, #0xff
    61004b38:	f9400fe0 	ldr	x0, [sp, #24]
    61004b3c:	39006401 	strb	w1, [x0, #25]
    cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
    61004b40:	3940afe0 	ldrb	w0, [sp, #43]
    61004b44:	0b000000 	add	w0, w0, w0
    61004b48:	12001c00 	and	w0, w0, #0xff
    61004b4c:	121f1400 	and	w0, w0, #0x7e
    61004b50:	12001c01 	and	w1, w0, #0xff
    61004b54:	f9400fe0 	ldr	x0, [sp, #24]
    61004b58:	39006801 	strb	w1, [x0, #26]

    /*!< Byte 11 */
    tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
    61004b5c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004b60:	913d0000 	add	x0, x0, #0xf40
    61004b64:	b9400800 	ldr	w0, [x0, #8]
    61004b68:	12001c00 	and	w0, w0, #0xff
    61004b6c:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
    61004b70:	f9400fe0 	ldr	x0, [sp, #24]
    61004b74:	39406800 	ldrb	w0, [x0, #26]
    61004b78:	12001c01 	and	w1, w0, #0xff
    61004b7c:	3940afe0 	ldrb	w0, [sp, #43]
    61004b80:	53077c00 	lsr	w0, w0, #7
    61004b84:	12001c00 	and	w0, w0, #0xff
    61004b88:	2a000020 	orr	w0, w1, w0
    61004b8c:	12001c01 	and	w1, w0, #0xff
    61004b90:	f9400fe0 	ldr	x0, [sp, #24]
    61004b94:	39006801 	strb	w1, [x0, #26]
    cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
    61004b98:	3940afe0 	ldrb	w0, [sp, #43]
    61004b9c:	12001800 	and	w0, w0, #0x7f
    61004ba0:	12001c01 	and	w1, w0, #0xff
    61004ba4:	f9400fe0 	ldr	x0, [sp, #24]
    61004ba8:	39006c01 	strb	w1, [x0, #27]

    /*!< Byte 12 */
    tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
    61004bac:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004bb0:	913d0000 	add	x0, x0, #0xf40
    61004bb4:	b9400c00 	ldr	w0, [x0, #12]
    61004bb8:	53187c00 	lsr	w0, w0, #24
    61004bbc:	12001c00 	and	w0, w0, #0xff
    61004bc0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
    61004bc4:	3940afe0 	ldrb	w0, [sp, #43]
    61004bc8:	53077c00 	lsr	w0, w0, #7
    61004bcc:	12001c01 	and	w1, w0, #0xff
    61004bd0:	f9400fe0 	ldr	x0, [sp, #24]
    61004bd4:	39007001 	strb	w1, [x0, #28]
    cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
    61004bd8:	3940afe0 	ldrb	w0, [sp, #43]
    61004bdc:	13057c00 	asr	w0, w0, #5
    61004be0:	12001c00 	and	w0, w0, #0xff
    61004be4:	12000400 	and	w0, w0, #0x3
    61004be8:	12001c01 	and	w1, w0, #0xff
    61004bec:	f9400fe0 	ldr	x0, [sp, #24]
    61004bf0:	39007401 	strb	w1, [x0, #29]
    cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
    61004bf4:	3940afe0 	ldrb	w0, [sp, #43]
    61004bf8:	13027c00 	asr	w0, w0, #2
    61004bfc:	12001c00 	and	w0, w0, #0xff
    61004c00:	12000800 	and	w0, w0, #0x7
    61004c04:	12001c01 	and	w1, w0, #0xff
    61004c08:	f9400fe0 	ldr	x0, [sp, #24]
    61004c0c:	39007801 	strb	w1, [x0, #30]
    cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
    61004c10:	3940afe0 	ldrb	w0, [sp, #43]
    61004c14:	531e7400 	lsl	w0, w0, #2
    61004c18:	12001c00 	and	w0, w0, #0xff
    61004c1c:	121e0400 	and	w0, w0, #0xc
    61004c20:	12001c01 	and	w1, w0, #0xff
    61004c24:	f9400fe0 	ldr	x0, [sp, #24]
    61004c28:	39007c01 	strb	w1, [x0, #31]

    /*!< Byte 13 */
    tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
    61004c2c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004c30:	913d0000 	add	x0, x0, #0xf40
    61004c34:	b9400c00 	ldr	w0, [x0, #12]
    61004c38:	53107c00 	lsr	w0, w0, #16
    61004c3c:	12001c00 	and	w0, w0, #0xff
    61004c40:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
    61004c44:	f9400fe0 	ldr	x0, [sp, #24]
    61004c48:	39407c00 	ldrb	w0, [x0, #31]
    61004c4c:	12001c01 	and	w1, w0, #0xff
    61004c50:	3940afe0 	ldrb	w0, [sp, #43]
    61004c54:	53067c00 	lsr	w0, w0, #6
    61004c58:	12001c00 	and	w0, w0, #0xff
    61004c5c:	2a000020 	orr	w0, w1, w0
    61004c60:	12001c01 	and	w1, w0, #0xff
    61004c64:	f9400fe0 	ldr	x0, [sp, #24]
    61004c68:	39007c01 	strb	w1, [x0, #31]
    cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
    61004c6c:	3940afe0 	ldrb	w0, [sp, #43]
    61004c70:	13057c00 	asr	w0, w0, #5
    61004c74:	12001c00 	and	w0, w0, #0xff
    61004c78:	12000000 	and	w0, w0, #0x1
    61004c7c:	12001c01 	and	w1, w0, #0xff
    61004c80:	f9400fe0 	ldr	x0, [sp, #24]
    61004c84:	39008001 	strb	w1, [x0, #32]
    cardinfo->SD_csd.Reserved3 = 0;
    61004c88:	f9400fe0 	ldr	x0, [sp, #24]
    61004c8c:	3900841f 	strb	wzr, [x0, #33]
    cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
    61004c90:	3940afe0 	ldrb	w0, [sp, #43]
    61004c94:	12000000 	and	w0, w0, #0x1
    61004c98:	12001c01 	and	w1, w0, #0xff
    61004c9c:	f9400fe0 	ldr	x0, [sp, #24]
    61004ca0:	39008801 	strb	w1, [x0, #34]

    /*!< Byte 14 */
    tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
    61004ca4:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004ca8:	913d0000 	add	x0, x0, #0xf40
    61004cac:	b9400c00 	ldr	w0, [x0, #12]
    61004cb0:	53087c00 	lsr	w0, w0, #8
    61004cb4:	12001c00 	and	w0, w0, #0xff
    61004cb8:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
    61004cbc:	3940afe0 	ldrb	w0, [sp, #43]
    61004cc0:	53077c00 	lsr	w0, w0, #7
    61004cc4:	12001c01 	and	w1, w0, #0xff
    61004cc8:	f9400fe0 	ldr	x0, [sp, #24]
    61004ccc:	39008c01 	strb	w1, [x0, #35]
    cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
    61004cd0:	3940afe0 	ldrb	w0, [sp, #43]
    61004cd4:	13067c00 	asr	w0, w0, #6
    61004cd8:	12001c00 	and	w0, w0, #0xff
    61004cdc:	12000000 	and	w0, w0, #0x1
    61004ce0:	12001c01 	and	w1, w0, #0xff
    61004ce4:	f9400fe0 	ldr	x0, [sp, #24]
    61004ce8:	39009001 	strb	w1, [x0, #36]
    cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
    61004cec:	3940afe0 	ldrb	w0, [sp, #43]
    61004cf0:	13057c00 	asr	w0, w0, #5
    61004cf4:	12001c00 	and	w0, w0, #0xff
    61004cf8:	12000000 	and	w0, w0, #0x1
    61004cfc:	12001c01 	and	w1, w0, #0xff
    61004d00:	f9400fe0 	ldr	x0, [sp, #24]
    61004d04:	39009401 	strb	w1, [x0, #37]
    cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
    61004d08:	3940afe0 	ldrb	w0, [sp, #43]
    61004d0c:	13047c00 	asr	w0, w0, #4
    61004d10:	12001c00 	and	w0, w0, #0xff
    61004d14:	12000000 	and	w0, w0, #0x1
    61004d18:	12001c01 	and	w1, w0, #0xff
    61004d1c:	f9400fe0 	ldr	x0, [sp, #24]
    61004d20:	39009801 	strb	w1, [x0, #38]
    cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
    61004d24:	3940afe0 	ldrb	w0, [sp, #43]
    61004d28:	13027c00 	asr	w0, w0, #2
    61004d2c:	12001c00 	and	w0, w0, #0xff
    61004d30:	12000400 	and	w0, w0, #0x3
    61004d34:	12001c01 	and	w1, w0, #0xff
    61004d38:	f9400fe0 	ldr	x0, [sp, #24]
    61004d3c:	39009c01 	strb	w1, [x0, #39]
    cardinfo->SD_csd.ECC = (tmp & 0x03);
    61004d40:	3940afe0 	ldrb	w0, [sp, #43]
    61004d44:	12000400 	and	w0, w0, #0x3
    61004d48:	12001c01 	and	w1, w0, #0xff
    61004d4c:	f9400fe0 	ldr	x0, [sp, #24]
    61004d50:	3900a001 	strb	w1, [x0, #40]

    /*!< Byte 15 */
    tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
    61004d54:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004d58:	913d0000 	add	x0, x0, #0xf40
    61004d5c:	b9400c00 	ldr	w0, [x0, #12]
    61004d60:	12001c00 	and	w0, w0, #0xff
    61004d64:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
    61004d68:	3940afe0 	ldrb	w0, [sp, #43]
    61004d6c:	53017c00 	lsr	w0, w0, #1
    61004d70:	12001c01 	and	w1, w0, #0xff
    61004d74:	f9400fe0 	ldr	x0, [sp, #24]
    61004d78:	3900a401 	strb	w1, [x0, #41]
    cardinfo->SD_csd.Reserved4 = 1;
    61004d7c:	f9400fe0 	ldr	x0, [sp, #24]
    61004d80:	52800021 	mov	w1, #0x1                   	// #1
    61004d84:	3900a801 	strb	w1, [x0, #42]

    /*!< Byte 0 */
    tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
    61004d88:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004d8c:	913d4000 	add	x0, x0, #0xf50
    61004d90:	b9400000 	ldr	w0, [x0]
    61004d94:	53187c00 	lsr	w0, w0, #24
    61004d98:	12001c00 	and	w0, w0, #0xff
    61004d9c:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ManufacturerID = tmp;
    61004da0:	3940afe1 	ldrb	w1, [sp, #43]
    61004da4:	f9400fe0 	ldr	x0, [sp, #24]
    61004da8:	3900b001 	strb	w1, [x0, #44]

    /*!< Byte 1 */
    tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
    61004dac:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004db0:	913d4000 	add	x0, x0, #0xf50
    61004db4:	b9400000 	ldr	w0, [x0]
    61004db8:	53107c00 	lsr	w0, w0, #16
    61004dbc:	12001c00 	and	w0, w0, #0xff
    61004dc0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.OEM_AppliID = tmp << 8;
    61004dc4:	3940afe0 	ldrb	w0, [sp, #43]
    61004dc8:	12003c00 	and	w0, w0, #0xffff
    61004dcc:	53181c00 	ubfiz	w0, w0, #8, #8
    61004dd0:	12003c01 	and	w1, w0, #0xffff
    61004dd4:	f9400fe0 	ldr	x0, [sp, #24]
    61004dd8:	79005c01 	strh	w1, [x0, #46]

    /*!< Byte 2 */
    tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
    61004ddc:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004de0:	913d4000 	add	x0, x0, #0xf50
    61004de4:	b9400000 	ldr	w0, [x0]
    61004de8:	53087c00 	lsr	w0, w0, #8
    61004dec:	12001c00 	and	w0, w0, #0xff
    61004df0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.OEM_AppliID |= tmp;
    61004df4:	f9400fe0 	ldr	x0, [sp, #24]
    61004df8:	79405c00 	ldrh	w0, [x0, #46]
    61004dfc:	12003c01 	and	w1, w0, #0xffff
    61004e00:	3940afe0 	ldrb	w0, [sp, #43]
    61004e04:	12003c00 	and	w0, w0, #0xffff
    61004e08:	2a000020 	orr	w0, w1, w0
    61004e0c:	12003c01 	and	w1, w0, #0xffff
    61004e10:	f9400fe0 	ldr	x0, [sp, #24]
    61004e14:	79005c01 	strh	w1, [x0, #46]

    /*!< Byte 3 */
    tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
    61004e18:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004e1c:	913d4000 	add	x0, x0, #0xf50
    61004e20:	b9400000 	ldr	w0, [x0]
    61004e24:	12001c00 	and	w0, w0, #0xff
    61004e28:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdName1 = tmp << 24;
    61004e2c:	3940afe0 	ldrb	w0, [sp, #43]
    61004e30:	53081c00 	lsl	w0, w0, #24
    61004e34:	2a0003e1 	mov	w1, w0
    61004e38:	f9400fe0 	ldr	x0, [sp, #24]
    61004e3c:	b9003001 	str	w1, [x0, #48]

    /*!< Byte 4 */
    tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
    61004e40:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004e44:	913d4000 	add	x0, x0, #0xf50
    61004e48:	b9400400 	ldr	w0, [x0, #4]
    61004e4c:	53187c00 	lsr	w0, w0, #24
    61004e50:	12001c00 	and	w0, w0, #0xff
    61004e54:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdName1 |= tmp << 16;
    61004e58:	f9400fe0 	ldr	x0, [sp, #24]
    61004e5c:	b9403000 	ldr	w0, [x0, #48]
    61004e60:	3940afe1 	ldrb	w1, [sp, #43]
    61004e64:	53103c21 	lsl	w1, w1, #16
    61004e68:	2a010001 	orr	w1, w0, w1
    61004e6c:	f9400fe0 	ldr	x0, [sp, #24]
    61004e70:	b9003001 	str	w1, [x0, #48]

    /*!< Byte 5 */
    tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
    61004e74:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004e78:	913d4000 	add	x0, x0, #0xf50
    61004e7c:	b9400400 	ldr	w0, [x0, #4]
    61004e80:	53107c00 	lsr	w0, w0, #16
    61004e84:	12001c00 	and	w0, w0, #0xff
    61004e88:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdName1 |= tmp << 8;
    61004e8c:	f9400fe0 	ldr	x0, [sp, #24]
    61004e90:	b9403000 	ldr	w0, [x0, #48]
    61004e94:	3940afe1 	ldrb	w1, [sp, #43]
    61004e98:	53185c21 	lsl	w1, w1, #8
    61004e9c:	2a010001 	orr	w1, w0, w1
    61004ea0:	f9400fe0 	ldr	x0, [sp, #24]
    61004ea4:	b9003001 	str	w1, [x0, #48]

    /*!< Byte 6 */
    tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
    61004ea8:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004eac:	913d4000 	add	x0, x0, #0xf50
    61004eb0:	b9400400 	ldr	w0, [x0, #4]
    61004eb4:	53087c00 	lsr	w0, w0, #8
    61004eb8:	12001c00 	and	w0, w0, #0xff
    61004ebc:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdName1 |= tmp;
    61004ec0:	f9400fe0 	ldr	x0, [sp, #24]
    61004ec4:	b9403000 	ldr	w0, [x0, #48]
    61004ec8:	3940afe1 	ldrb	w1, [sp, #43]
    61004ecc:	2a010001 	orr	w1, w0, w1
    61004ed0:	f9400fe0 	ldr	x0, [sp, #24]
    61004ed4:	b9003001 	str	w1, [x0, #48]

    /*!< Byte 7 */
    tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
    61004ed8:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004edc:	913d4000 	add	x0, x0, #0xf50
    61004ee0:	b9400400 	ldr	w0, [x0, #4]
    61004ee4:	12001c00 	and	w0, w0, #0xff
    61004ee8:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdName2 = tmp;
    61004eec:	3940afe1 	ldrb	w1, [sp, #43]
    61004ef0:	f9400fe0 	ldr	x0, [sp, #24]
    61004ef4:	3900d001 	strb	w1, [x0, #52]

    /*!< Byte 8 */
    tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
    61004ef8:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004efc:	913d4000 	add	x0, x0, #0xf50
    61004f00:	b9400800 	ldr	w0, [x0, #8]
    61004f04:	53187c00 	lsr	w0, w0, #24
    61004f08:	12001c00 	and	w0, w0, #0xff
    61004f0c:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdRev = tmp;
    61004f10:	3940afe1 	ldrb	w1, [sp, #43]
    61004f14:	f9400fe0 	ldr	x0, [sp, #24]
    61004f18:	3900d401 	strb	w1, [x0, #53]

    /*!< Byte 9 */
    tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
    61004f1c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004f20:	913d4000 	add	x0, x0, #0xf50
    61004f24:	b9400800 	ldr	w0, [x0, #8]
    61004f28:	53107c00 	lsr	w0, w0, #16
    61004f2c:	12001c00 	and	w0, w0, #0xff
    61004f30:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdSN = tmp << 24;
    61004f34:	3940afe0 	ldrb	w0, [sp, #43]
    61004f38:	53081c00 	lsl	w0, w0, #24
    61004f3c:	2a0003e1 	mov	w1, w0
    61004f40:	f9400fe0 	ldr	x0, [sp, #24]
    61004f44:	b9003801 	str	w1, [x0, #56]

    /*!< Byte 10 */
    tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
    61004f48:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004f4c:	913d4000 	add	x0, x0, #0xf50
    61004f50:	b9400800 	ldr	w0, [x0, #8]
    61004f54:	53087c00 	lsr	w0, w0, #8
    61004f58:	12001c00 	and	w0, w0, #0xff
    61004f5c:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdSN |= tmp << 16;
    61004f60:	f9400fe0 	ldr	x0, [sp, #24]
    61004f64:	b9403800 	ldr	w0, [x0, #56]
    61004f68:	3940afe1 	ldrb	w1, [sp, #43]
    61004f6c:	53103c21 	lsl	w1, w1, #16
    61004f70:	2a010001 	orr	w1, w0, w1
    61004f74:	f9400fe0 	ldr	x0, [sp, #24]
    61004f78:	b9003801 	str	w1, [x0, #56]

    /*!< Byte 11 */
    tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
    61004f7c:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004f80:	913d4000 	add	x0, x0, #0xf50
    61004f84:	b9400800 	ldr	w0, [x0, #8]
    61004f88:	12001c00 	and	w0, w0, #0xff
    61004f8c:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdSN |= tmp << 8;
    61004f90:	f9400fe0 	ldr	x0, [sp, #24]
    61004f94:	b9403800 	ldr	w0, [x0, #56]
    61004f98:	3940afe1 	ldrb	w1, [sp, #43]
    61004f9c:	53185c21 	lsl	w1, w1, #8
    61004fa0:	2a010001 	orr	w1, w0, w1
    61004fa4:	f9400fe0 	ldr	x0, [sp, #24]
    61004fa8:	b9003801 	str	w1, [x0, #56]

    /*!< Byte 12 */
    tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
    61004fac:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004fb0:	913d4000 	add	x0, x0, #0xf50
    61004fb4:	b9400c00 	ldr	w0, [x0, #12]
    61004fb8:	53187c00 	lsr	w0, w0, #24
    61004fbc:	12001c00 	and	w0, w0, #0xff
    61004fc0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ProdSN |= tmp;
    61004fc4:	f9400fe0 	ldr	x0, [sp, #24]
    61004fc8:	b9403800 	ldr	w0, [x0, #56]
    61004fcc:	3940afe1 	ldrb	w1, [sp, #43]
    61004fd0:	2a010001 	orr	w1, w0, w1
    61004fd4:	f9400fe0 	ldr	x0, [sp, #24]
    61004fd8:	b9003801 	str	w1, [x0, #56]

    /*!< Byte 13 */
    tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
    61004fdc:	f0000000 	adrp	x0, 61007000 <_bss_start>
    61004fe0:	913d4000 	add	x0, x0, #0xf50
    61004fe4:	b9400c00 	ldr	w0, [x0, #12]
    61004fe8:	53107c00 	lsr	w0, w0, #16
    61004fec:	12001c00 	and	w0, w0, #0xff
    61004ff0:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
    61004ff4:	f9400fe0 	ldr	x0, [sp, #24]
    61004ff8:	3940f000 	ldrb	w0, [x0, #60]
    61004ffc:	12001c01 	and	w1, w0, #0xff
    61005000:	3940afe0 	ldrb	w0, [sp, #43]
    61005004:	53047c00 	lsr	w0, w0, #4
    61005008:	12001c00 	and	w0, w0, #0xff
    6100500c:	2a000020 	orr	w0, w1, w0
    61005010:	12001c01 	and	w1, w0, #0xff
    61005014:	f9400fe0 	ldr	x0, [sp, #24]
    61005018:	3900f001 	strb	w1, [x0, #60]
    cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
    6100501c:	3940afe0 	ldrb	w0, [sp, #43]
    61005020:	53185c00 	lsl	w0, w0, #8
    61005024:	12003c00 	and	w0, w0, #0xffff
    61005028:	12180c00 	and	w0, w0, #0xf00
    6100502c:	12003c01 	and	w1, w0, #0xffff
    61005030:	f9400fe0 	ldr	x0, [sp, #24]
    61005034:	79007c01 	strh	w1, [x0, #62]

    /*!< Byte 14 */
    tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
    61005038:	d0000000 	adrp	x0, 61007000 <_bss_start>
    6100503c:	913d4000 	add	x0, x0, #0xf50
    61005040:	b9400c00 	ldr	w0, [x0, #12]
    61005044:	53087c00 	lsr	w0, w0, #8
    61005048:	12001c00 	and	w0, w0, #0xff
    6100504c:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.ManufactDate |= tmp;
    61005050:	f9400fe0 	ldr	x0, [sp, #24]
    61005054:	79407c00 	ldrh	w0, [x0, #62]
    61005058:	12003c01 	and	w1, w0, #0xffff
    6100505c:	3940afe0 	ldrb	w0, [sp, #43]
    61005060:	12003c00 	and	w0, w0, #0xffff
    61005064:	2a000020 	orr	w0, w1, w0
    61005068:	12003c01 	and	w1, w0, #0xffff
    6100506c:	f9400fe0 	ldr	x0, [sp, #24]
    61005070:	79007c01 	strh	w1, [x0, #62]

    /*!< Byte 15 */
    tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
    61005074:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005078:	913d4000 	add	x0, x0, #0xf50
    6100507c:	b9400c00 	ldr	w0, [x0, #12]
    61005080:	12001c00 	and	w0, w0, #0xff
    61005084:	3900afe0 	strb	w0, [sp, #43]
    cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
    61005088:	3940afe0 	ldrb	w0, [sp, #43]
    6100508c:	53017c00 	lsr	w0, w0, #1
    61005090:	12001c01 	and	w1, w0, #0xff
    61005094:	f9400fe0 	ldr	x0, [sp, #24]
    61005098:	39010001 	strb	w1, [x0, #64]
    cardinfo->SD_cid.Reserved2 = 1;
    6100509c:	f9400fe0 	ldr	x0, [sp, #24]
    610050a0:	52800021 	mov	w1, #0x1                   	// #1
    610050a4:	39010401 	strb	w1, [x0, #65]

    return status;
    610050a8:	b9402fe0 	ldr	w0, [sp, #44]
}
    610050ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
    610050b0:	d65f03c0 	ret

Disassembly of section .text.CardDetection:

00000000610050b4 <CardDetection>:
 * @param	None
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 CardDetection()
{
    610050b4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    610050b8:	910003fd 	mov	x29, sp
    u32 status = MMC_SUCCESS;
    610050bc:	b9003fff 	str	wzr, [sp, #60]
    u32 CardStatus = 0;
    610050c0:	b9003bff 	str	wzr, [sp, #56]
    ERROR_INT_SIGNAL_EN_R__NORMAL_INT_SIGNAL_EN_R r2;
    ERROR_INT_STAT_R__NORMAL_INT_STAT_R r3;
    PSTATE_REG_R r4;
    
    //  Card Detection
    r1.d32 = 0;
    610050c4:	b90033ff 	str	wzr, [sp, #48]
    r1.bit.cmd_complete_stat_en = 0x1;
    610050c8:	b94033e0 	ldr	w0, [sp, #48]
    610050cc:	32000000 	orr	w0, w0, #0x1
    610050d0:	b90033e0 	str	w0, [sp, #48]
    r1.bit.xfer_complete_stat_en = 0x1;
    610050d4:	b94033e0 	ldr	w0, [sp, #48]
    610050d8:	321f0000 	orr	w0, w0, #0x2
    610050dc:	b90033e0 	str	w0, [sp, #48]
    r1.bit.bgap_event_stat_en = 0x1;
    610050e0:	b94033e0 	ldr	w0, [sp, #48]
    610050e4:	321e0000 	orr	w0, w0, #0x4
    610050e8:	b90033e0 	str	w0, [sp, #48]
    r1.bit.dma_interrupt_stat_en = 0x1;
    610050ec:	b94033e0 	ldr	w0, [sp, #48]
    610050f0:	321d0000 	orr	w0, w0, #0x8
    610050f4:	b90033e0 	str	w0, [sp, #48]
    r1.bit.buf_wr_ready_stat_en = 0x1;
    610050f8:	b94033e0 	ldr	w0, [sp, #48]
    610050fc:	321c0000 	orr	w0, w0, #0x10
    61005100:	b90033e0 	str	w0, [sp, #48]
    r1.bit.buf_rd_ready_stat_en = 0x1;
    61005104:	b94033e0 	ldr	w0, [sp, #48]
    61005108:	321b0000 	orr	w0, w0, #0x20
    6100510c:	b90033e0 	str	w0, [sp, #48]
    r1.bit.card_insertion_stat_en = 0x1;
    61005110:	b94033e0 	ldr	w0, [sp, #48]
    61005114:	321a0000 	orr	w0, w0, #0x40
    61005118:	b90033e0 	str	w0, [sp, #48]
    r1.bit.card_removal_stat_en = 0x1;
    6100511c:	b94033e0 	ldr	w0, [sp, #48]
    61005120:	32190000 	orr	w0, w0, #0x80
    61005124:	b90033e0 	str	w0, [sp, #48]
    r1.bit.int_a_stat_en = 0x1;
    61005128:	b94033e0 	ldr	w0, [sp, #48]
    6100512c:	32170000 	orr	w0, w0, #0x200
    61005130:	b90033e0 	str	w0, [sp, #48]
    REG_WRITE(&(SDIO->error_int_stat_en_r__normal_int_stat_en.d32), r1.d32);
    61005134:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005138:	913a4000 	add	x0, x0, #0xe90
    6100513c:	f9400000 	ldr	x0, [x0]
    61005140:	9100d000 	add	x0, x0, #0x34
    61005144:	aa0003e2 	mov	x2, x0
    61005148:	b94033e0 	ldr	w0, [sp, #48]
    6100514c:	2a0003e1 	mov	w1, w0
    61005150:	aa0203e0 	mov	x0, x2
    61005154:	97fff9b0 	bl	61003814 <reg_write>
    r2.d32 = 0;
    61005158:	b9002bff 	str	wzr, [sp, #40]
    r2.bit.card_insertion_signal_en = 0x1;
    6100515c:	b9402be0 	ldr	w0, [sp, #40]
    61005160:	321a0000 	orr	w0, w0, #0x40
    61005164:	b9002be0 	str	w0, [sp, #40]
    r2.bit.card_removal_signal_en = 0x1;
    61005168:	b9402be0 	ldr	w0, [sp, #40]
    6100516c:	32190000 	orr	w0, w0, #0x80
    61005170:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(SDIO->error_int_signal_en_r__normal_int_signal_en.d32), r2.d32);
    61005174:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005178:	913a4000 	add	x0, x0, #0xe90
    6100517c:	f9400000 	ldr	x0, [x0]
    61005180:	9100e000 	add	x0, x0, #0x38
    61005184:	aa0003e2 	mov	x2, x0
    61005188:	b9402be0 	ldr	w0, [sp, #40]
    6100518c:	2a0003e1 	mov	w1, w0
    61005190:	aa0203e0 	mov	x0, x2
    61005194:	97fff9a0 	bl	61003814 <reg_write>

    r3.d32 = 0;
    61005198:	b90023ff 	str	wzr, [sp, #32]
    r3.bit.card_insertion = 0x1;
    6100519c:	b94023e0 	ldr	w0, [sp, #32]
    610051a0:	321a0000 	orr	w0, w0, #0x40
    610051a4:	b90023e0 	str	w0, [sp, #32]
    r3.bit.card_removal = 0x1;
    610051a8:	b94023e0 	ldr	w0, [sp, #32]
    610051ac:	32190000 	orr	w0, w0, #0x80
    610051b0:	b90023e0 	str	w0, [sp, #32]
    REG_WRITE(&(SDIO->error_int_stat_r__normal_int_stat.d32), r3.d32);
    610051b4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610051b8:	913a4000 	add	x0, x0, #0xe90
    610051bc:	f9400000 	ldr	x0, [x0]
    610051c0:	9100c000 	add	x0, x0, #0x30
    610051c4:	aa0003e2 	mov	x2, x0
    610051c8:	b94023e0 	ldr	w0, [sp, #32]
    610051cc:	2a0003e1 	mov	w1, w0
    610051d0:	aa0203e0 	mov	x0, x2
    610051d4:	97fff990 	bl	61003814 <reg_write>

    while (!CardStatus)
    610051d8:	14000010 	b	61005218 <CardDetection+0x164>
    {
        r4.d32 = REG_READ(&(SDIO->pstate_reg));
    610051dc:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610051e0:	913a4000 	add	x0, x0, #0xe90
    610051e4:	f9400000 	ldr	x0, [x0]
    610051e8:	91009000 	add	x0, x0, #0x24
    610051ec:	97fff984 	bl	610037fc <reg_read>
    610051f0:	b9001be0 	str	w0, [sp, #24]
        CardStatus = (((r4.bit.card_inserted) == 1) ? 1:0);
    610051f4:	b9401be0 	ldr	w0, [sp, #24]
    610051f8:	d3504000 	ubfx	x0, x0, #16, #1
    610051fc:	12001c00 	and	w0, w0, #0xff
    61005200:	b9003be0 	str	w0, [sp, #56]
    	if (CardStatus == 1)
    61005204:	b9403be0 	ldr	w0, [sp, #56]
    61005208:	7100041f 	cmp	w0, #0x1
    6100520c:	54000061 	b.ne	61005218 <CardDetection+0x164>  // b.any
    	{
            status = MMC_SUCCESS;
    61005210:	b9003fff 	str	wzr, [sp, #60]
    	    break;
    61005214:	14000004 	b	61005224 <CardDetection+0x170>
    while (!CardStatus)
    61005218:	b9403be0 	ldr	w0, [sp, #56]
    6100521c:	7100001f 	cmp	w0, #0x0
    61005220:	54fffde0 	b.eq	610051dc <CardDetection+0x128>  // b.none
    	}
    }
    	
    return status;
    61005224:	b9403fe0 	ldr	w0, [sp, #60]
}
    61005228:	a8c47bfd 	ldp	x29, x30, [sp], #64
    6100522c:	d65f03c0 	ret

Disassembly of section .text.SendInitCmdSD:

0000000061005230 <SendInitCmdSD>:
 * @param	None
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 SendInitCmdSD()
{
    61005230:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61005234:	910003fd 	mov	x29, sp
    uint32_t status = MMC_SUCCESS;
    61005238:	b9002fff 	str	wzr, [sp, #44]
    volatile unsigned int response01;
    volatile unsigned int validvoltage;
    CMD_R__XFER_MODE_R reg;
    uint32_t arg_r;
    
    MMC_PRINT("SendInitCmdSD\r\n");
    6100523c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005240:	912a6000 	add	x0, x0, #0xa98
    61005244:	97fff65b 	bl	61002bb0 <printf>
    // send command 0
    MMC_PRINT("send command 0\r\n");
    61005248:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100524c:	912aa000 	add	x0, x0, #0xaa8
    61005250:	97fff658 	bl	61002bb0 <printf>
    arg_r = 0;
    61005254:	b9002bff 	str	wzr, [sp, #40]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005258:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100525c:	913a4000 	add	x0, x0, #0xe90
    61005260:	f9400000 	ldr	x0, [x0]
    61005264:	91002000 	add	x0, x0, #0x8
    61005268:	b9402be1 	ldr	w1, [sp, #40]
    6100526c:	97fff96a 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.d32 = 0;
    61005270:	b9001bff 	str	wzr, [sp, #24]
    reg.bit.cmd_index = SD_CMD_GO_IDLE_STATE;
    61005274:	b9401be0 	ldr	w0, [sp, #24]
    61005278:	12026400 	and	w0, w0, #0xc0ffffff
    6100527c:	b9001be0 	str	w0, [sp, #24]
    reg.bit.data_xfer_dir = DATA_READ;
    61005280:	b9401be0 	ldr	w0, [sp, #24]
    61005284:	321c0000 	orr	w0, w0, #0x10
    61005288:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    6100528c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005290:	913a4000 	add	x0, x0, #0xe90
    61005294:	f9400000 	ldr	x0, [x0]
    61005298:	91003000 	add	x0, x0, #0xc
    6100529c:	aa0003e2 	mov	x2, x0
    610052a0:	b9401be0 	ldr	w0, [sp, #24]
    610052a4:	2a0003e1 	mov	w1, w0
    610052a8:	aa0203e0 	mov	x0, x2
    610052ac:	97fff95a 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    610052b0:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610052b4:	913a4000 	add	x0, x0, #0xe90
    610052b8:	f9400000 	ldr	x0, [x0]
    610052bc:	97fffa03 	bl	61003ac8 <wait_command_complete>
    610052c0:	b9002fe0 	str	w0, [sp, #44]
    610052c4:	b9402fe0 	ldr	w0, [sp, #44]
    610052c8:	7100001f 	cmp	w0, #0x0
    610052cc:	54000060 	b.eq	610052d8 <SendInitCmdSD+0xa8>  // b.none
    610052d0:	b9402fe0 	ldr	w0, [sp, #44]
    610052d4:	14000218 	b	61005b34 <SendInitCmdSD+0x904>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    610052d8:	b9401be0 	ldr	w0, [sp, #24]
    610052dc:	b9401be1 	ldr	w1, [sp, #24]
    610052e0:	2a0103e2 	mov	w2, w1
    610052e4:	2a0003e1 	mov	w1, w0
    610052e8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610052ec:	912b0000 	add	x0, x0, #0xac0
    610052f0:	97fff630 	bl	61002bb0 <printf>

    // send command 8
    MMC_PRINT("send command 8\r\n");
    610052f4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610052f8:	912b6000 	add	x0, x0, #0xad8
    610052fc:	97fff62d 	bl	61002bb0 <printf>
    arg_r = 0x100;//0x1AA;  //1:2v7~3v6 AA:check pattern (any 8 bit pattern is ok)   
    61005300:	52802000 	mov	w0, #0x100                 	// #256
    61005304:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005308:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100530c:	913a4000 	add	x0, x0, #0xe90
    61005310:	f9400000 	ldr	x0, [x0]
    61005314:	91002000 	add	x0, x0, #0x8
    61005318:	b9402be1 	ldr	w1, [sp, #40]
    6100531c:	97fff93e 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.d32 = 0;
    61005320:	b9001bff 	str	wzr, [sp, #24]
    reg.bit.cmd_index = SD_CMD_HS_SEND_EXT_CSD;
    61005324:	b9401be0 	ldr	w0, [sp, #24]
    61005328:	52800101 	mov	w1, #0x8                   	// #8
    6100532c:	33081420 	bfi	w0, w1, #24, #6
    61005330:	b9001be0 	str	w0, [sp, #24]
    reg.bit.data_xfer_dir = DATA_READ;
    61005334:	b9401be0 	ldr	w0, [sp, #24]
    61005338:	321c0000 	orr	w0, w0, #0x10
    6100533c:	b9001be0 	str	w0, [sp, #24]
    reg.bit.resp_type_select = MMC_Response_Short;
    61005340:	b9401be0 	ldr	w0, [sp, #24]
    61005344:	52800041 	mov	w1, #0x2                   	// #2
    61005348:	33100420 	bfi	w0, w1, #16, #2
    6100534c:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    61005350:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005354:	913a4000 	add	x0, x0, #0xe90
    61005358:	f9400000 	ldr	x0, [x0]
    6100535c:	91003000 	add	x0, x0, #0xc
    61005360:	aa0003e2 	mov	x2, x0
    61005364:	b9401be0 	ldr	w0, [sp, #24]
    61005368:	2a0003e1 	mov	w1, w0
    6100536c:	aa0203e0 	mov	x0, x2
    61005370:	97fff929 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    61005374:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005378:	913a4000 	add	x0, x0, #0xe90
    6100537c:	f9400000 	ldr	x0, [x0]
    61005380:	97fff9d2 	bl	61003ac8 <wait_command_complete>
    61005384:	b9002fe0 	str	w0, [sp, #44]
    61005388:	b9402fe0 	ldr	w0, [sp, #44]
    6100538c:	7100001f 	cmp	w0, #0x0
    61005390:	54000060 	b.eq	6100539c <SendInitCmdSD+0x16c>  // b.none
    61005394:	b9402fe0 	ldr	w0, [sp, #44]
    61005398:	140001e7 	b	61005b34 <SendInitCmdSD+0x904>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    6100539c:	b9401be0 	ldr	w0, [sp, #24]
    610053a0:	b9401be1 	ldr	w1, [sp, #24]
    610053a4:	2a0103e2 	mov	w2, w1
    610053a8:	2a0003e1 	mov	w1, w0
    610053ac:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610053b0:	912b0000 	add	x0, x0, #0xac0
    610053b4:	97fff5ff 	bl	61002bb0 <printf>
    
    validvoltage = 0;
    610053b8:	b90023ff 	str	wzr, [sp, #32]
    MTIMER_OUT_CONDITION(SD_GET_VALID_VOLTAGE_TIMEOUT_VAL, &sd_mtimer, validvoltage != 1){
    610053bc:	d2884801 	mov	x1, #0x4240                	// #16960
    610053c0:	f2a001e1 	movk	x1, #0xf, lsl #16
    610053c4:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610053c8:	913e2000 	add	x0, x0, #0xf88
    610053cc:	97fff8d1 	bl	61003710 <Mtimer_Start>
    610053d0:	14000080 	b	610055d0 <SendInitCmdSD+0x3a0>
    	// CMD55
        MMC_PRINT("send command 55\r\n");
    610053d4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610053d8:	912bc000 	add	x0, x0, #0xaf0
    610053dc:	97fff5f5 	bl	61002bb0 <printf>
        arg_r = 0;
    610053e0:	b9002bff 	str	wzr, [sp, #40]
        REG_WRITE(&(SDIO->argument_r), arg_r);
    610053e4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610053e8:	913a4000 	add	x0, x0, #0xe90
    610053ec:	f9400000 	ldr	x0, [x0]
    610053f0:	91002000 	add	x0, x0, #0x8
    610053f4:	b9402be1 	ldr	w1, [sp, #40]
    610053f8:	97fff907 	bl	61003814 <reg_write>
        //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
        reg.d32 = 0;
    610053fc:	b9001bff 	str	wzr, [sp, #24]
        reg.bit.cmd_index = SD_CMD_APP_CMD;
    61005400:	b9401be0 	ldr	w0, [sp, #24]
    61005404:	528006e1 	mov	w1, #0x37                  	// #55
    61005408:	33081420 	bfi	w0, w1, #24, #6
    6100540c:	b9001be0 	str	w0, [sp, #24]
        reg.bit.resp_type_select = MMC_Response_Short;
    61005410:	b9401be0 	ldr	w0, [sp, #24]
    61005414:	52800041 	mov	w1, #0x2                   	// #2
    61005418:	33100420 	bfi	w0, w1, #16, #2
    6100541c:	b9001be0 	str	w0, [sp, #24]
        reg.bit.block_count_enable = 0x1;
    61005420:	b9401be0 	ldr	w0, [sp, #24]
    61005424:	321f0000 	orr	w0, w0, #0x2
    61005428:	b9001be0 	str	w0, [sp, #24]
        reg.bit.data_xfer_dir = DATA_READ;
    6100542c:	b9401be0 	ldr	w0, [sp, #24]
    61005430:	321c0000 	orr	w0, w0, #0x10
    61005434:	b9001be0 	str	w0, [sp, #24]
        reg.bit.multi_blk_sel = 0x1;
    61005438:	b9401be0 	ldr	w0, [sp, #24]
    6100543c:	321b0000 	orr	w0, w0, #0x20
    61005440:	b9001be0 	str	w0, [sp, #24]
        reg.bit.resp_err_chk_enable = 0x1;
    61005444:	b9401be0 	ldr	w0, [sp, #24]
    61005448:	32190000 	orr	w0, w0, #0x80
    6100544c:	b9001be0 	str	w0, [sp, #24]
        REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    61005450:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005454:	913a4000 	add	x0, x0, #0xe90
    61005458:	f9400000 	ldr	x0, [x0]
    6100545c:	91003000 	add	x0, x0, #0xc
    61005460:	aa0003e2 	mov	x2, x0
    61005464:	b9401be0 	ldr	w0, [sp, #24]
    61005468:	2a0003e1 	mov	w1, w0
    6100546c:	aa0203e0 	mov	x0, x2
    61005470:	97fff8e9 	bl	61003814 <reg_write>
        MMC_WAIT_CMD_COMPLETE(SDIO);
    61005474:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005478:	913a4000 	add	x0, x0, #0xe90
    6100547c:	f9400000 	ldr	x0, [x0]
    61005480:	97fff992 	bl	61003ac8 <wait_command_complete>
    61005484:	b9002fe0 	str	w0, [sp, #44]
    61005488:	b9402fe0 	ldr	w0, [sp, #44]
    6100548c:	7100001f 	cmp	w0, #0x0
    61005490:	54000060 	b.eq	6100549c <SendInitCmdSD+0x26c>  // b.none
    61005494:	b9402fe0 	ldr	w0, [sp, #44]
    61005498:	140001a7 	b	61005b34 <SendInitCmdSD+0x904>
        MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    6100549c:	b9401be0 	ldr	w0, [sp, #24]
    610054a0:	b9401be1 	ldr	w1, [sp, #24]
    610054a4:	2a0103e2 	mov	w2, w1
    610054a8:	2a0003e1 	mov	w1, w0
    610054ac:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610054b0:	912b0000 	add	x0, x0, #0xac0
    610054b4:	97fff5bf 	bl	61002bb0 <printf>

    	//ACMD41
        MMC_PRINT("send command 41\r\n");
    610054b8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610054bc:	912c2000 	add	x0, x0, #0xb08
    610054c0:	97fff5bc 	bl	61002bb0 <printf>
        arg_r = 0x40100000;//0xC0100000; //[31]reserved,[30]HCS=1,voltage window 3.5~3.6
    610054c4:	52a80200 	mov	w0, #0x40100000            	// #1074790400
    610054c8:	b9002be0 	str	w0, [sp, #40]
        REG_WRITE(&(SDIO->argument_r), arg_r);
    610054cc:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610054d0:	913a4000 	add	x0, x0, #0xe90
    610054d4:	f9400000 	ldr	x0, [x0]
    610054d8:	91002000 	add	x0, x0, #0x8
    610054dc:	b9402be1 	ldr	w1, [sp, #40]
    610054e0:	97fff8cd 	bl	61003814 <reg_write>
        //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
        reg.d32 = 0;
    610054e4:	b9001bff 	str	wzr, [sp, #24]
        reg.bit.cmd_index = SD_CMD_SD_APP_OP_COND;
    610054e8:	b9401be0 	ldr	w0, [sp, #24]
    610054ec:	52800521 	mov	w1, #0x29                  	// #41
    610054f0:	33081420 	bfi	w0, w1, #24, #6
    610054f4:	b9001be0 	str	w0, [sp, #24]
        reg.bit.resp_type_select = MMC_Response_Short;
    610054f8:	b9401be0 	ldr	w0, [sp, #24]
    610054fc:	52800041 	mov	w1, #0x2                   	// #2
    61005500:	33100420 	bfi	w0, w1, #16, #2
    61005504:	b9001be0 	str	w0, [sp, #24]
        reg.bit.block_count_enable = 0x1;
    61005508:	b9401be0 	ldr	w0, [sp, #24]
    6100550c:	321f0000 	orr	w0, w0, #0x2
    61005510:	b9001be0 	str	w0, [sp, #24]
        reg.bit.data_xfer_dir = DATA_READ;
    61005514:	b9401be0 	ldr	w0, [sp, #24]
    61005518:	321c0000 	orr	w0, w0, #0x10
    6100551c:	b9001be0 	str	w0, [sp, #24]
        reg.bit.multi_blk_sel = 0x1;
    61005520:	b9401be0 	ldr	w0, [sp, #24]
    61005524:	321b0000 	orr	w0, w0, #0x20
    61005528:	b9001be0 	str	w0, [sp, #24]
        reg.bit.resp_err_chk_enable = 0x1;
    6100552c:	b9401be0 	ldr	w0, [sp, #24]
    61005530:	32190000 	orr	w0, w0, #0x80
    61005534:	b9001be0 	str	w0, [sp, #24]
        REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    61005538:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100553c:	913a4000 	add	x0, x0, #0xe90
    61005540:	f9400000 	ldr	x0, [x0]
    61005544:	91003000 	add	x0, x0, #0xc
    61005548:	aa0003e2 	mov	x2, x0
    6100554c:	b9401be0 	ldr	w0, [sp, #24]
    61005550:	2a0003e1 	mov	w1, w0
    61005554:	aa0203e0 	mov	x0, x2
    61005558:	97fff8af 	bl	61003814 <reg_write>
        MMC_WAIT_CMD_COMPLETE(SDIO);
    6100555c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005560:	913a4000 	add	x0, x0, #0xe90
    61005564:	f9400000 	ldr	x0, [x0]
    61005568:	97fff958 	bl	61003ac8 <wait_command_complete>
    6100556c:	b9002fe0 	str	w0, [sp, #44]
    61005570:	b9402fe0 	ldr	w0, [sp, #44]
    61005574:	7100001f 	cmp	w0, #0x0
    61005578:	54000060 	b.eq	61005584 <SendInitCmdSD+0x354>  // b.none
    6100557c:	b9402fe0 	ldr	w0, [sp, #44]
    61005580:	1400016d 	b	61005b34 <SendInitCmdSD+0x904>
        MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    61005584:	b9401be0 	ldr	w0, [sp, #24]
    61005588:	b9401be1 	ldr	w1, [sp, #24]
    6100558c:	2a0103e2 	mov	w2, w1
    61005590:	2a0003e1 	mov	w1, w0
    61005594:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005598:	912b0000 	add	x0, x0, #0xac0
    6100559c:	97fff585 	bl	61002bb0 <printf>

        response01 = REG_READ(&(SDIO->resp01));
    610055a0:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610055a4:	913a4000 	add	x0, x0, #0xe90
    610055a8:	f9400000 	ldr	x0, [x0]
    610055ac:	91004000 	add	x0, x0, #0x10
    610055b0:	97fff893 	bl	610037fc <reg_read>
    610055b4:	b90027e0 	str	w0, [sp, #36]
    	validvoltage = (((response01 >> 31) == 1) ? 1:0);
    610055b8:	b94027e0 	ldr	w0, [sp, #36]
    610055bc:	531f7c00 	lsr	w0, w0, #31
    610055c0:	7100041f 	cmp	w0, #0x1
    610055c4:	1a9f17e0 	cset	w0, eq  // eq = none
    610055c8:	12001c00 	and	w0, w0, #0xff
    610055cc:	b90023e0 	str	w0, [sp, #32]
    MTIMER_OUT_CONDITION(SD_GET_VALID_VOLTAGE_TIMEOUT_VAL, &sd_mtimer, validvoltage != 1){
    610055d0:	b94023e0 	ldr	w0, [sp, #32]
    610055d4:	7100041f 	cmp	w0, #0x1
    610055d8:	540000c0 	b.eq	610055f0 <SendInitCmdSD+0x3c0>  // b.none
    610055dc:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610055e0:	913e2000 	add	x0, x0, #0xf88
    610055e4:	97fff861 	bl	61003768 <Mtimer_TimerOut>
    610055e8:	7100001f 	cmp	w0, #0x0
    610055ec:	54ffef40 	b.eq	610053d4 <SendInitCmdSD+0x1a4>  // b.none
    }
    if(Mtimer_IsTimerOut(&mtimer)){
    610055f0:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610055f4:	913d8000 	add	x0, x0, #0xf60
    610055f8:	97fff87b 	bl	610037e4 <Mtimer_IsTimerOut>
    610055fc:	7100001f 	cmp	w0, #0x0
    61005600:	540000a0 	b.eq	61005614 <SendInitCmdSD+0x3e4>  // b.none
        status = SD_GET_VALID_VOLTAGE_TIMEOUT_ERROR;
    61005604:	52801920 	mov	w0, #0xc9                  	// #201
    61005608:	b9002fe0 	str	w0, [sp, #44]
        return status;
    6100560c:	b9402fe0 	ldr	w0, [sp, #44]
    61005610:	14000149 	b	61005b34 <SendInitCmdSD+0x904>
    }

    // send command 2
    MMC_PRINT("send command 2\r\n");
    61005614:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005618:	912c8000 	add	x0, x0, #0xb20
    6100561c:	97fff565 	bl	61002bb0 <printf>
    arg_r = 0;
    61005620:	b9002bff 	str	wzr, [sp, #40]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005624:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005628:	913a4000 	add	x0, x0, #0xe90
    6100562c:	f9400000 	ldr	x0, [x0]
    61005630:	91002000 	add	x0, x0, #0x8
    61005634:	b9402be1 	ldr	w1, [sp, #40]
    61005638:	97fff877 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.bit.cmd_index = SD_CMD_ALL_SEND_CID;
    6100563c:	b9401be0 	ldr	w0, [sp, #24]
    61005640:	52800041 	mov	w1, #0x2                   	// #2
    61005644:	33081420 	bfi	w0, w1, #24, #6
    61005648:	b9001be0 	str	w0, [sp, #24]
    reg.bit.resp_type_select = MMC_Response_Long;
    6100564c:	b9401be0 	ldr	w0, [sp, #24]
    61005650:	52800021 	mov	w1, #0x1                   	// #1
    61005654:	33100420 	bfi	w0, w1, #16, #2
    61005658:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    6100565c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005660:	913a4000 	add	x0, x0, #0xe90
    61005664:	f9400000 	ldr	x0, [x0]
    61005668:	91003000 	add	x0, x0, #0xc
    6100566c:	aa0003e2 	mov	x2, x0
    61005670:	b9401be0 	ldr	w0, [sp, #24]
    61005674:	2a0003e1 	mov	w1, w0
    61005678:	aa0203e0 	mov	x0, x2
    6100567c:	97fff866 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    61005680:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005684:	913a4000 	add	x0, x0, #0xe90
    61005688:	f9400000 	ldr	x0, [x0]
    6100568c:	97fff90f 	bl	61003ac8 <wait_command_complete>
    61005690:	b9002fe0 	str	w0, [sp, #44]
    61005694:	b9402fe0 	ldr	w0, [sp, #44]
    61005698:	7100001f 	cmp	w0, #0x0
    6100569c:	54000060 	b.eq	610056a8 <SendInitCmdSD+0x478>  // b.none
    610056a0:	b9402fe0 	ldr	w0, [sp, #44]
    610056a4:	14000124 	b	61005b34 <SendInitCmdSD+0x904>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    610056a8:	b9401be0 	ldr	w0, [sp, #24]
    610056ac:	b9401be1 	ldr	w1, [sp, #24]
    610056b0:	2a0103e2 	mov	w2, w1
    610056b4:	2a0003e1 	mov	w1, w0
    610056b8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610056bc:	912b0000 	add	x0, x0, #0xac0
    610056c0:	97fff53c 	bl	61002bb0 <printf>
    CID_Tab[0] = REG_READ(&(SDIO->resp01));
    610056c4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610056c8:	913a4000 	add	x0, x0, #0xe90
    610056cc:	f9400000 	ldr	x0, [x0]
    610056d0:	91004000 	add	x0, x0, #0x10
    610056d4:	97fff84a 	bl	610037fc <reg_read>
    610056d8:	2a0003e1 	mov	w1, w0
    610056dc:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610056e0:	913d4000 	add	x0, x0, #0xf50
    610056e4:	b9000001 	str	w1, [x0]
    CID_Tab[1] = REG_READ(&(SDIO->resp23));
    610056e8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610056ec:	913a4000 	add	x0, x0, #0xe90
    610056f0:	f9400000 	ldr	x0, [x0]
    610056f4:	91005000 	add	x0, x0, #0x14
    610056f8:	97fff841 	bl	610037fc <reg_read>
    610056fc:	2a0003e1 	mov	w1, w0
    61005700:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005704:	913d4000 	add	x0, x0, #0xf50
    61005708:	b9000401 	str	w1, [x0, #4]
    CID_Tab[2] = REG_READ(&(SDIO->resp45));
    6100570c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005710:	913a4000 	add	x0, x0, #0xe90
    61005714:	f9400000 	ldr	x0, [x0]
    61005718:	91006000 	add	x0, x0, #0x18
    6100571c:	97fff838 	bl	610037fc <reg_read>
    61005720:	2a0003e1 	mov	w1, w0
    61005724:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005728:	913d4000 	add	x0, x0, #0xf50
    6100572c:	b9000801 	str	w1, [x0, #8]
    CID_Tab[3] = REG_READ(&(SDIO->resp67));
    61005730:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005734:	913a4000 	add	x0, x0, #0xe90
    61005738:	f9400000 	ldr	x0, [x0]
    6100573c:	91007000 	add	x0, x0, #0x1c
    61005740:	97fff82f 	bl	610037fc <reg_read>
    61005744:	2a0003e1 	mov	w1, w0
    61005748:	d0000000 	adrp	x0, 61007000 <_bss_start>
    6100574c:	913d4000 	add	x0, x0, #0xf50
    61005750:	b9000c01 	str	w1, [x0, #12]
    MMC_PRINT("CID_Tab 0~4 is %x, %x, %x, %x\r\n", CID_Tab[0], CID_Tab[1], CID_Tab[2], CID_Tab[3]);
    61005754:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005758:	913d4000 	add	x0, x0, #0xf50
    6100575c:	b9400001 	ldr	w1, [x0]
    61005760:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005764:	913d4000 	add	x0, x0, #0xf50
    61005768:	b9400402 	ldr	w2, [x0, #4]
    6100576c:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005770:	913d4000 	add	x0, x0, #0xf50
    61005774:	b9400803 	ldr	w3, [x0, #8]
    61005778:	d0000000 	adrp	x0, 61007000 <_bss_start>
    6100577c:	913d4000 	add	x0, x0, #0xf50
    61005780:	b9400c00 	ldr	w0, [x0, #12]
    61005784:	2a0003e4 	mov	w4, w0
    61005788:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100578c:	912ce000 	add	x0, x0, #0xb38
    61005790:	97fff508 	bl	61002bb0 <printf>
    
    // send command 3
    MMC_PRINT("send command 3\r\n");
    61005794:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005798:	912d6000 	add	x0, x0, #0xb58
    6100579c:	97fff505 	bl	61002bb0 <printf>
    arg_r = 0x0;    //0x10000;Stuff bits
    610057a0:	b9002bff 	str	wzr, [sp, #40]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    610057a4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610057a8:	913a4000 	add	x0, x0, #0xe90
    610057ac:	f9400000 	ldr	x0, [x0]
    610057b0:	91002000 	add	x0, x0, #0x8
    610057b4:	b9402be1 	ldr	w1, [sp, #40]
    610057b8:	97fff817 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.bit.cmd_index = SD_CMD_SET_REL_ADDR;
    610057bc:	b9401be0 	ldr	w0, [sp, #24]
    610057c0:	52800061 	mov	w1, #0x3                   	// #3
    610057c4:	33081420 	bfi	w0, w1, #24, #6
    610057c8:	b9001be0 	str	w0, [sp, #24]
    reg.bit.resp_type_select = MMC_Response_Short;
    610057cc:	b9401be0 	ldr	w0, [sp, #24]
    610057d0:	52800041 	mov	w1, #0x2                   	// #2
    610057d4:	33100420 	bfi	w0, w1, #16, #2
    610057d8:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    610057dc:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610057e0:	913a4000 	add	x0, x0, #0xe90
    610057e4:	f9400000 	ldr	x0, [x0]
    610057e8:	91003000 	add	x0, x0, #0xc
    610057ec:	aa0003e2 	mov	x2, x0
    610057f0:	b9401be0 	ldr	w0, [sp, #24]
    610057f4:	2a0003e1 	mov	w1, w0
    610057f8:	aa0203e0 	mov	x0, x2
    610057fc:	97fff806 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    61005800:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005804:	913a4000 	add	x0, x0, #0xe90
    61005808:	f9400000 	ldr	x0, [x0]
    6100580c:	97fff8af 	bl	61003ac8 <wait_command_complete>
    61005810:	b9002fe0 	str	w0, [sp, #44]
    61005814:	b9402fe0 	ldr	w0, [sp, #44]
    61005818:	7100001f 	cmp	w0, #0x0
    6100581c:	54000060 	b.eq	61005828 <SendInitCmdSD+0x5f8>  // b.none
    61005820:	b9402fe0 	ldr	w0, [sp, #44]
    61005824:	140000c4 	b	61005b34 <SendInitCmdSD+0x904>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    61005828:	b9401be0 	ldr	w0, [sp, #24]
    6100582c:	b9401be1 	ldr	w1, [sp, #24]
    61005830:	2a0103e2 	mov	w2, w1
    61005834:	2a0003e1 	mov	w1, w0
    61005838:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100583c:	912b0000 	add	x0, x0, #0xac0
    61005840:	97fff4dc 	bl	61002bb0 <printf>
    rca = REG_READ(&(SDIO->resp01)) & 0xFFFF0000;
    61005844:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005848:	913a4000 	add	x0, x0, #0xe90
    6100584c:	f9400000 	ldr	x0, [x0]
    61005850:	91004000 	add	x0, x0, #0x10
    61005854:	97fff7ea 	bl	610037fc <reg_read>
    61005858:	12103c01 	and	w1, w0, #0xffff0000
    6100585c:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005860:	913e0000 	add	x0, x0, #0xf80
    61005864:	b9000001 	str	w1, [x0]
    MMC_PRINT("rca is %x\r\n", rca);
    61005868:	d0000000 	adrp	x0, 61007000 <_bss_start>
    6100586c:	913e0000 	add	x0, x0, #0xf80
    61005870:	b9400000 	ldr	w0, [x0]
    61005874:	2a0003e1 	mov	w1, w0
    61005878:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100587c:	912dc000 	add	x0, x0, #0xb70
    61005880:	97fff4cc 	bl	61002bb0 <printf>

    // send command 9
    MMC_PRINT("send command 9\r\n");
    61005884:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005888:	912e0000 	add	x0, x0, #0xb80
    6100588c:	97fff4c9 	bl	61002bb0 <printf>
    arg_r = rca;
    61005890:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005894:	913e0000 	add	x0, x0, #0xf80
    61005898:	b9400000 	ldr	w0, [x0]
    6100589c:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    610058a0:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610058a4:	913a4000 	add	x0, x0, #0xe90
    610058a8:	f9400000 	ldr	x0, [x0]
    610058ac:	91002000 	add	x0, x0, #0x8
    610058b0:	b9402be1 	ldr	w1, [sp, #40]
    610058b4:	97fff7d8 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.bit.cmd_index = SD_CMD_SEND_CSD;
    610058b8:	b9401be0 	ldr	w0, [sp, #24]
    610058bc:	52800121 	mov	w1, #0x9                   	// #9
    610058c0:	33081420 	bfi	w0, w1, #24, #6
    610058c4:	b9001be0 	str	w0, [sp, #24]
    reg.bit.resp_type_select = MMC_Response_Long;
    610058c8:	b9401be0 	ldr	w0, [sp, #24]
    610058cc:	52800021 	mov	w1, #0x1                   	// #1
    610058d0:	33100420 	bfi	w0, w1, #16, #2
    610058d4:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    610058d8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610058dc:	913a4000 	add	x0, x0, #0xe90
    610058e0:	f9400000 	ldr	x0, [x0]
    610058e4:	91003000 	add	x0, x0, #0xc
    610058e8:	aa0003e2 	mov	x2, x0
    610058ec:	b9401be0 	ldr	w0, [sp, #24]
    610058f0:	2a0003e1 	mov	w1, w0
    610058f4:	aa0203e0 	mov	x0, x2
    610058f8:	97fff7c7 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    610058fc:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005900:	913a4000 	add	x0, x0, #0xe90
    61005904:	f9400000 	ldr	x0, [x0]
    61005908:	97fff870 	bl	61003ac8 <wait_command_complete>
    6100590c:	b9002fe0 	str	w0, [sp, #44]
    61005910:	b9402fe0 	ldr	w0, [sp, #44]
    61005914:	7100001f 	cmp	w0, #0x0
    61005918:	54000060 	b.eq	61005924 <SendInitCmdSD+0x6f4>  // b.none
    6100591c:	b9402fe0 	ldr	w0, [sp, #44]
    61005920:	14000085 	b	61005b34 <SendInitCmdSD+0x904>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    61005924:	b9401be0 	ldr	w0, [sp, #24]
    61005928:	b9401be1 	ldr	w1, [sp, #24]
    6100592c:	2a0103e2 	mov	w2, w1
    61005930:	2a0003e1 	mov	w1, w0
    61005934:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005938:	912b0000 	add	x0, x0, #0xac0
    6100593c:	97fff49d 	bl	61002bb0 <printf>

    CSD_Tab[3] = REG_READ(&(SDIO->resp01));
    61005940:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005944:	913a4000 	add	x0, x0, #0xe90
    61005948:	f9400000 	ldr	x0, [x0]
    6100594c:	91004000 	add	x0, x0, #0x10
    61005950:	97fff7ab 	bl	610037fc <reg_read>
    61005954:	2a0003e1 	mov	w1, w0
    61005958:	d0000000 	adrp	x0, 61007000 <_bss_start>
    6100595c:	913d0000 	add	x0, x0, #0xf40
    61005960:	b9000c01 	str	w1, [x0, #12]
    CSD_Tab[2] = REG_READ(&(SDIO->resp23));
    61005964:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005968:	913a4000 	add	x0, x0, #0xe90
    6100596c:	f9400000 	ldr	x0, [x0]
    61005970:	91005000 	add	x0, x0, #0x14
    61005974:	97fff7a2 	bl	610037fc <reg_read>
    61005978:	2a0003e1 	mov	w1, w0
    6100597c:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005980:	913d0000 	add	x0, x0, #0xf40
    61005984:	b9000801 	str	w1, [x0, #8]
    CSD_Tab[1] = REG_READ(&(SDIO->resp45));
    61005988:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100598c:	913a4000 	add	x0, x0, #0xe90
    61005990:	f9400000 	ldr	x0, [x0]
    61005994:	91006000 	add	x0, x0, #0x18
    61005998:	97fff799 	bl	610037fc <reg_read>
    6100599c:	2a0003e1 	mov	w1, w0
    610059a0:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610059a4:	913d0000 	add	x0, x0, #0xf40
    610059a8:	b9000401 	str	w1, [x0, #4]
    CSD_Tab[0] = REG_READ(&(SDIO->resp67));
    610059ac:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610059b0:	913a4000 	add	x0, x0, #0xe90
    610059b4:	f9400000 	ldr	x0, [x0]
    610059b8:	91007000 	add	x0, x0, #0x1c
    610059bc:	97fff790 	bl	610037fc <reg_read>
    610059c0:	2a0003e1 	mov	w1, w0
    610059c4:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610059c8:	913d0000 	add	x0, x0, #0xf40
    610059cc:	b9000001 	str	w1, [x0]
    MMC_PRINT("CSD_Tab 0~4 is %x, %x, %x, %x\r\n", CSD_Tab[0], CSD_Tab[1], CSD_Tab[2], CSD_Tab[3]);
    610059d0:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610059d4:	913d0000 	add	x0, x0, #0xf40
    610059d8:	b9400001 	ldr	w1, [x0]
    610059dc:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610059e0:	913d0000 	add	x0, x0, #0xf40
    610059e4:	b9400402 	ldr	w2, [x0, #4]
    610059e8:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610059ec:	913d0000 	add	x0, x0, #0xf40
    610059f0:	b9400803 	ldr	w3, [x0, #8]
    610059f4:	d0000000 	adrp	x0, 61007000 <_bss_start>
    610059f8:	913d0000 	add	x0, x0, #0xf40
    610059fc:	b9400c00 	ldr	w0, [x0, #12]
    61005a00:	2a0003e4 	mov	w4, w0
    61005a04:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005a08:	912e6000 	add	x0, x0, #0xb98
    61005a0c:	97fff469 	bl	61002bb0 <printf>

    //set card infomation
    MMC_PRINT("set card infomation\r\n");
    61005a10:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005a14:	912ee000 	add	x0, x0, #0xbb8
    61005a18:	97fff466 	bl	61002bb0 <printf>
    status = SD_GetCardInfo(&SDCardInfo);
    61005a1c:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005a20:	913ba000 	add	x0, x0, #0xee8
    61005a24:	97fffab7 	bl	61004500 <SD_GetCardInfo>
    61005a28:	b9002fe0 	str	w0, [sp, #44]
    if(status != MMC_SUCCESS){
    61005a2c:	b9402fe0 	ldr	w0, [sp, #44]
    61005a30:	7100001f 	cmp	w0, #0x0
    61005a34:	54000060 	b.eq	61005a40 <SendInitCmdSD+0x810>  // b.none
        return status;
    61005a38:	b9402fe0 	ldr	w0, [sp, #44]
    61005a3c:	1400003e 	b	61005b34 <SendInitCmdSD+0x904>
    }
    //Set Freq 10M
    MMC_PRINT("Set Freq 10M\r\n");
    61005a40:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005a44:	912f4000 	add	x0, x0, #0xbd0
    61005a48:	97fff45a 	bl	61002bb0 <printf>
    status = HostControllerClockSetup(SDIO, MMC_FREQ_10M);
    61005a4c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005a50:	913a4000 	add	x0, x0, #0xe90
    61005a54:	f9400000 	ldr	x0, [x0]
    61005a58:	52800021 	mov	w1, #0x1                   	// #1
    61005a5c:	97fff8fd 	bl	61003e50 <HostControllerClockSetup>
    61005a60:	b9002fe0 	str	w0, [sp, #44]
    if(status != MMC_SUCCESS){
    61005a64:	b9402fe0 	ldr	w0, [sp, #44]
    61005a68:	7100001f 	cmp	w0, #0x0
    61005a6c:	54000060 	b.eq	61005a78 <SendInitCmdSD+0x848>  // b.none
        return status;
    61005a70:	b9402fe0 	ldr	w0, [sp, #44]
    61005a74:	14000030 	b	61005b34 <SendInitCmdSD+0x904>
    }
    
    // send command 7
    MMC_PRINT("send command 7\r\n");
    61005a78:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005a7c:	912f8000 	add	x0, x0, #0xbe0
    61005a80:	97fff44c 	bl	61002bb0 <printf>
    arg_r = rca;
    61005a84:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005a88:	913e0000 	add	x0, x0, #0xf80
    61005a8c:	b9400000 	ldr	w0, [x0]
    61005a90:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005a94:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005a98:	913a4000 	add	x0, x0, #0xe90
    61005a9c:	f9400000 	ldr	x0, [x0]
    61005aa0:	91002000 	add	x0, x0, #0x8
    61005aa4:	b9402be1 	ldr	w1, [sp, #40]
    61005aa8:	97fff75b 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.bit.cmd_index = SD_CMD_SEL_DESEL_CARD;
    61005aac:	b9401be0 	ldr	w0, [sp, #24]
    61005ab0:	528000e1 	mov	w1, #0x7                   	// #7
    61005ab4:	33081420 	bfi	w0, w1, #24, #6
    61005ab8:	b9001be0 	str	w0, [sp, #24]
    reg.bit.resp_type_select = MMC_Response_Short_48B;
    61005abc:	b9401be0 	ldr	w0, [sp, #24]
    61005ac0:	32100400 	orr	w0, w0, #0x30000
    61005ac4:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    61005ac8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005acc:	913a4000 	add	x0, x0, #0xe90
    61005ad0:	f9400000 	ldr	x0, [x0]
    61005ad4:	91003000 	add	x0, x0, #0xc
    61005ad8:	aa0003e2 	mov	x2, x0
    61005adc:	b9401be0 	ldr	w0, [sp, #24]
    61005ae0:	2a0003e1 	mov	w1, w0
    61005ae4:	aa0203e0 	mov	x0, x2
    61005ae8:	97fff74b 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    61005aec:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005af0:	913a4000 	add	x0, x0, #0xe90
    61005af4:	f9400000 	ldr	x0, [x0]
    61005af8:	97fff7f4 	bl	61003ac8 <wait_command_complete>
    61005afc:	b9002fe0 	str	w0, [sp, #44]
    61005b00:	b9402fe0 	ldr	w0, [sp, #44]
    61005b04:	7100001f 	cmp	w0, #0x0
    61005b08:	54000060 	b.eq	61005b14 <SendInitCmdSD+0x8e4>  // b.none
    61005b0c:	b9402fe0 	ldr	w0, [sp, #44]
    61005b10:	14000009 	b	61005b34 <SendInitCmdSD+0x904>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    61005b14:	b9401be0 	ldr	w0, [sp, #24]
    61005b18:	b9401be1 	ldr	w1, [sp, #24]
    61005b1c:	2a0103e2 	mov	w2, w1
    61005b20:	2a0003e1 	mov	w1, w0
    61005b24:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005b28:	912b0000 	add	x0, x0, #0xac0
    61005b2c:	97fff421 	bl	61002bb0 <printf>

    return status;
    61005b30:	b9402fe0 	ldr	w0, [sp, #44]
}
    61005b34:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61005b38:	d65f03c0 	ret

Disassembly of section .text.SwitchDataWidthSD:

0000000061005b3c <SwitchDataWidthSD>:
 * @param	None
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 SwitchDataWidthSD()
{
    61005b3c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61005b40:	910003fd 	mov	x29, sp
    uint32_t status = MMC_SUCCESS;
    61005b44:	b9001fff 	str	wzr, [sp, #28]
    CMD_R__XFER_MODE_R reg;
    uint32_t arg_r;

    MMC_PRINT("SwitchDataWidthSD\r\n");
    61005b48:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005b4c:	912fe000 	add	x0, x0, #0xbf8
    61005b50:	97fff418 	bl	61002bb0 <printf>
    // send command 55  SET BUSWITHD TO 4 bit
    MMC_PRINT("send command 55\r\n");
    61005b54:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005b58:	912bc000 	add	x0, x0, #0xaf0
    61005b5c:	97fff415 	bl	61002bb0 <printf>
    arg_r = rca;
    61005b60:	d0000000 	adrp	x0, 61007000 <_bss_start>
    61005b64:	913e0000 	add	x0, x0, #0xf80
    61005b68:	b9400000 	ldr	w0, [x0]
    61005b6c:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005b70:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005b74:	913a4000 	add	x0, x0, #0xe90
    61005b78:	f9400000 	ldr	x0, [x0]
    61005b7c:	91002000 	add	x0, x0, #0x8
    61005b80:	b9401be1 	ldr	w1, [sp, #24]
    61005b84:	97fff724 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.d32 = 0;
    61005b88:	b90013ff 	str	wzr, [sp, #16]
    reg.bit.cmd_index = SD_CMD_APP_CMD;
    61005b8c:	b94013e0 	ldr	w0, [sp, #16]
    61005b90:	528006e1 	mov	w1, #0x37                  	// #55
    61005b94:	33081420 	bfi	w0, w1, #24, #6
    61005b98:	b90013e0 	str	w0, [sp, #16]
    reg.bit.resp_type_select = MMC_Response_Short;
    61005b9c:	b94013e0 	ldr	w0, [sp, #16]
    61005ba0:	52800041 	mov	w1, #0x2                   	// #2
    61005ba4:	33100420 	bfi	w0, w1, #16, #2
    61005ba8:	b90013e0 	str	w0, [sp, #16]
    reg.bit.block_count_enable = 0x1;
    61005bac:	b94013e0 	ldr	w0, [sp, #16]
    61005bb0:	321f0000 	orr	w0, w0, #0x2
    61005bb4:	b90013e0 	str	w0, [sp, #16]
    reg.bit.data_xfer_dir = DATA_READ;
    61005bb8:	b94013e0 	ldr	w0, [sp, #16]
    61005bbc:	321c0000 	orr	w0, w0, #0x10
    61005bc0:	b90013e0 	str	w0, [sp, #16]
    reg.bit.multi_blk_sel = 0x1;
    61005bc4:	b94013e0 	ldr	w0, [sp, #16]
    61005bc8:	321b0000 	orr	w0, w0, #0x20
    61005bcc:	b90013e0 	str	w0, [sp, #16]
    reg.bit.resp_err_chk_enable = 0x1;
    61005bd0:	b94013e0 	ldr	w0, [sp, #16]
    61005bd4:	32190000 	orr	w0, w0, #0x80
    61005bd8:	b90013e0 	str	w0, [sp, #16]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    61005bdc:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005be0:	913a4000 	add	x0, x0, #0xe90
    61005be4:	f9400000 	ldr	x0, [x0]
    61005be8:	91003000 	add	x0, x0, #0xc
    61005bec:	aa0003e2 	mov	x2, x0
    61005bf0:	b94013e0 	ldr	w0, [sp, #16]
    61005bf4:	2a0003e1 	mov	w1, w0
    61005bf8:	aa0203e0 	mov	x0, x2
    61005bfc:	97fff706 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    61005c00:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005c04:	913a4000 	add	x0, x0, #0xe90
    61005c08:	f9400000 	ldr	x0, [x0]
    61005c0c:	97fff7af 	bl	61003ac8 <wait_command_complete>
    61005c10:	b9001fe0 	str	w0, [sp, #28]
    61005c14:	b9401fe0 	ldr	w0, [sp, #28]
    61005c18:	7100001f 	cmp	w0, #0x0
    61005c1c:	54000060 	b.eq	61005c28 <SwitchDataWidthSD+0xec>  // b.none
    61005c20:	b9401fe0 	ldr	w0, [sp, #28]
    61005c24:	14000036 	b	61005cfc <SwitchDataWidthSD+0x1c0>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    61005c28:	b94013e0 	ldr	w0, [sp, #16]
    61005c2c:	b94013e1 	ldr	w1, [sp, #16]
    61005c30:	2a0103e2 	mov	w2, w1
    61005c34:	2a0003e1 	mov	w1, w0
    61005c38:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005c3c:	912b0000 	add	x0, x0, #0xac0
    61005c40:	97fff3dc 	bl	61002bb0 <printf>

    // send command 6
    MMC_PRINT("send command 6\r\n");
    61005c44:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005c48:	91304000 	add	x0, x0, #0xc10
    61005c4c:	97fff3d9 	bl	61002bb0 <printf>
    arg_r = 0x2;
    61005c50:	52800040 	mov	w0, #0x2                   	// #2
    61005c54:	b9001be0 	str	w0, [sp, #24]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005c58:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005c5c:	913a4000 	add	x0, x0, #0xe90
    61005c60:	f9400000 	ldr	x0, [x0]
    61005c64:	91002000 	add	x0, x0, #0x8
    61005c68:	b9401be1 	ldr	w1, [sp, #24]
    61005c6c:	97fff6ea 	bl	61003814 <reg_write>
    //reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    reg.bit.cmd_index = SD_CMD_HS_SWITCH;
    61005c70:	b94013e0 	ldr	w0, [sp, #16]
    61005c74:	528000c1 	mov	w1, #0x6                   	// #6
    61005c78:	33081420 	bfi	w0, w1, #24, #6
    61005c7c:	b90013e0 	str	w0, [sp, #16]
    reg.bit.resp_type_select = MMC_Response_Short;
    61005c80:	b94013e0 	ldr	w0, [sp, #16]
    61005c84:	52800041 	mov	w1, #0x2                   	// #2
    61005c88:	33100420 	bfi	w0, w1, #16, #2
    61005c8c:	b90013e0 	str	w0, [sp, #16]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    61005c90:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005c94:	913a4000 	add	x0, x0, #0xe90
    61005c98:	f9400000 	ldr	x0, [x0]
    61005c9c:	91003000 	add	x0, x0, #0xc
    61005ca0:	aa0003e2 	mov	x2, x0
    61005ca4:	b94013e0 	ldr	w0, [sp, #16]
    61005ca8:	2a0003e1 	mov	w1, w0
    61005cac:	aa0203e0 	mov	x0, x2
    61005cb0:	97fff6d9 	bl	61003814 <reg_write>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    61005cb4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005cb8:	913a4000 	add	x0, x0, #0xe90
    61005cbc:	f9400000 	ldr	x0, [x0]
    61005cc0:	97fff782 	bl	61003ac8 <wait_command_complete>
    61005cc4:	b9001fe0 	str	w0, [sp, #28]
    61005cc8:	b9401fe0 	ldr	w0, [sp, #28]
    61005ccc:	7100001f 	cmp	w0, #0x0
    61005cd0:	54000060 	b.eq	61005cdc <SwitchDataWidthSD+0x1a0>  // b.none
    61005cd4:	b9401fe0 	ldr	w0, [sp, #28]
    61005cd8:	14000009 	b	61005cfc <SwitchDataWidthSD+0x1c0>
    MMC_PRINT("reg.d32 is %x, %d\r\n", reg.d32, reg.d32);
    61005cdc:	b94013e0 	ldr	w0, [sp, #16]
    61005ce0:	b94013e1 	ldr	w1, [sp, #16]
    61005ce4:	2a0103e2 	mov	w2, w1
    61005ce8:	2a0003e1 	mov	w1, w0
    61005cec:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005cf0:	912b0000 	add	x0, x0, #0xac0
    61005cf4:	97fff3af 	bl	61002bb0 <printf>

    return status;
    61005cf8:	b9401fe0 	ldr	w0, [sp, #28]
}
    61005cfc:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61005d00:	d65f03c0 	ret

Disassembly of section .text.SD_Init:

0000000061005d04 <SD_Init>:
 * @param	None
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 SD_Init(void)
{
    61005d04:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61005d08:	910003fd 	mov	x29, sp
    int status = MMC_FAILURE;
    61005d0c:	52800020 	mov	w0, #0x1                   	// #1
    61005d10:	b9001fe0 	str	w0, [sp, #28]

    status = CardDetection();
    61005d14:	97fffce8 	bl	610050b4 <CardDetection>
    61005d18:	b9001fe0 	str	w0, [sp, #28]
    if (status != MMC_SUCCESS) {
    61005d1c:	b9401fe0 	ldr	w0, [sp, #28]
    61005d20:	7100001f 	cmp	w0, #0x0
    61005d24:	540004c1 	b.ne	61005dbc <SD_Init+0xb8>  // b.any
		goto END;
	}
    status = HostControllerSetup(SDIO);
    61005d28:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005d2c:	913a4000 	add	x0, x0, #0xe90
    61005d30:	f9400000 	ldr	x0, [x0]
    61005d34:	97fff7e8 	bl	61003cd4 <HostControllerSetup>
    61005d38:	b9001fe0 	str	w0, [sp, #28]
    if (status != MMC_SUCCESS) {
    61005d3c:	b9401fe0 	ldr	w0, [sp, #28]
    61005d40:	7100001f 	cmp	w0, #0x0
    61005d44:	54000401 	b.ne	61005dc4 <SD_Init+0xc0>  // b.any
		goto END;
	}
    status = HostControllerClockSetup(SDIO, MMC_FREQ_400K);
    61005d48:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005d4c:	913a4000 	add	x0, x0, #0xe90
    61005d50:	f9400000 	ldr	x0, [x0]
    61005d54:	52800001 	mov	w1, #0x0                   	// #0
    61005d58:	97fff83e 	bl	61003e50 <HostControllerClockSetup>
    61005d5c:	b9001fe0 	str	w0, [sp, #28]
    if (status != MMC_SUCCESS) {
    61005d60:	b9401fe0 	ldr	w0, [sp, #28]
    61005d64:	7100001f 	cmp	w0, #0x0
    61005d68:	54000321 	b.ne	61005dcc <SD_Init+0xc8>  // b.any
		goto END;
	}
    status = InitInterruptSetting(SDIO);
    61005d6c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005d70:	913a4000 	add	x0, x0, #0xe90
    61005d74:	f9400000 	ldr	x0, [x0]
    61005d78:	97fff939 	bl	6100425c <InitInterruptSetting>
    61005d7c:	b9001fe0 	str	w0, [sp, #28]
    if (status != MMC_SUCCESS) {
    61005d80:	b9401fe0 	ldr	w0, [sp, #28]
    61005d84:	7100001f 	cmp	w0, #0x0
    61005d88:	54000261 	b.ne	61005dd4 <SD_Init+0xd0>  // b.any
		goto END;
	}
    status = SendInitCmdSD();
    61005d8c:	97fffd29 	bl	61005230 <SendInitCmdSD>
    61005d90:	b9001fe0 	str	w0, [sp, #28]
    if (status != MMC_SUCCESS) {
    61005d94:	b9401fe0 	ldr	w0, [sp, #28]
    61005d98:	7100001f 	cmp	w0, #0x0
    61005d9c:	54000201 	b.ne	61005ddc <SD_Init+0xd8>  // b.any
		goto END;
	}
    status = SwitchDataWidthSD();
    61005da0:	97ffff67 	bl	61005b3c <SwitchDataWidthSD>
    61005da4:	b9001fe0 	str	w0, [sp, #28]
    if (status != MMC_SUCCESS) {
    61005da8:	b9401fe0 	ldr	w0, [sp, #28]
    61005dac:	7100001f 	cmp	w0, #0x0
    61005db0:	540001a1 	b.ne	61005de4 <SD_Init+0xe0>  // b.any
		goto END;
	}
    
    status = MMC_SUCCESS;
    61005db4:	b9001fff 	str	wzr, [sp, #28]
    61005db8:	1400000c 	b	61005de8 <SD_Init+0xe4>
		goto END;
    61005dbc:	d503201f 	nop
    61005dc0:	1400000a 	b	61005de8 <SD_Init+0xe4>
		goto END;
    61005dc4:	d503201f 	nop
    61005dc8:	14000008 	b	61005de8 <SD_Init+0xe4>
		goto END;
    61005dcc:	d503201f 	nop
    61005dd0:	14000006 	b	61005de8 <SD_Init+0xe4>
		goto END;
    61005dd4:	d503201f 	nop
    61005dd8:	14000004 	b	61005de8 <SD_Init+0xe4>
		goto END;
    61005ddc:	d503201f 	nop
    61005de0:	14000002 	b	61005de8 <SD_Init+0xe4>
		goto END;
    61005de4:	d503201f 	nop
END:
	return status;
    61005de8:	b9401fe0 	ldr	w0, [sp, #28]
}
    61005dec:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61005df0:	d65f03c0 	ret

Disassembly of section .text.SD_ReadSingleBlock:

0000000061005df4 <SD_ReadSingleBlock>:
 * @param	BlockSize read data block size
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 SD_ReadSingleBlock(uint8_t *readbuff, uint32_t ReadAddr, uint16_t BlockSize)
{
    61005df4:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    61005df8:	910003fd 	mov	x29, sp
    61005dfc:	f9000fe0 	str	x0, [sp, #24]
    61005e00:	b90017e1 	str	w1, [sp, #20]
    61005e04:	790027e2 	strh	w2, [sp, #18]
    uint32_t status = MMC_SUCCESS;
    61005e08:	b9005fff 	str	wzr, [sp, #92]
    volatile unsigned int value = 0;
    61005e0c:	b9004bff 	str	wzr, [sp, #72]
	uint32_t* Buffer_SingleBlock = (uint32_t* )readbuff;
    61005e10:	f9400fe0 	ldr	x0, [sp, #24]
    61005e14:	f9002be0 	str	x0, [sp, #80]
    WUP_CTRL_R__BGAP_CTRL_R__PWR_CTRL_R__HOST_CTRL1_R r1;
    HOST_CTRL2_R__AUTO_CMD_STAT_R r2;
    uint32_t arg_r;
    BLOCKCOUNT_R__BLOCKSIZE_R block;

    r1.d32 = 0;
    61005e18:	b9003bff 	str	wzr, [sp, #56]
    r1.bit.dma_sel = MMC_HC1_DMA_SEL_SDMA;
    61005e1c:	b9403be0 	ldr	w0, [sp, #56]
    61005e20:	121b7400 	and	w0, w0, #0xffffffe7
    61005e24:	b9003be0 	str	w0, [sp, #56]
    r1.bit.dat_xfer_width = MMC_HC1_DAT_XFER_WIDTH_4BIT;   //4-bit mode
    61005e28:	b9403be0 	ldr	w0, [sp, #56]
    61005e2c:	321f0000 	orr	w0, w0, #0x2
    61005e30:	b9003be0 	str	w0, [sp, #56]
    r1.bit.sd_bus_pwr_vdd1 = MMC_PC_SBP_VDD1_ON;   //PWR ON
    61005e34:	b9403be0 	ldr	w0, [sp, #56]
    61005e38:	32180000 	orr	w0, w0, #0x100
    61005e3c:	b9003be0 	str	w0, [sp, #56]
    r1.bit.sd_bus_vol_vdd1 = MMC_PC_SBV_VDD1_3V3;   //3V
    61005e40:	b9403be0 	ldr	w0, [sp, #56]
    61005e44:	32170800 	orr	w0, w0, #0xe00
    61005e48:	b9003be0 	str	w0, [sp, #56]
    REG_WRITE(&(eMMC->wup_ctrl_r__bgap_ctrl_r__pwr_ctrl_r__host_ctrl1), r1.d32);
    61005e4c:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005e50:	913a6000 	add	x0, x0, #0xe98
    61005e54:	f9400000 	ldr	x0, [x0]
    61005e58:	9100a000 	add	x0, x0, #0x28
    61005e5c:	aa0003e2 	mov	x2, x0
    61005e60:	b9403be0 	ldr	w0, [sp, #56]
    61005e64:	2a0003e1 	mov	w1, w0
    61005e68:	aa0203e0 	mov	x0, x2
    61005e6c:	97fff66a 	bl	61003814 <reg_write>
    REG_WRITE(&(eMMC->sdmasa_r), Buffer_SingleBlock);
    61005e70:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005e74:	913a6000 	add	x0, x0, #0xe98
    61005e78:	f9400000 	ldr	x0, [x0]
    61005e7c:	aa0003e2 	mov	x2, x0
    61005e80:	f9402be0 	ldr	x0, [sp, #80]
    61005e84:	2a0003e1 	mov	w1, w0
    61005e88:	aa0203e0 	mov	x0, x2
    61005e8c:	97fff662 	bl	61003814 <reg_write>
    REG_WRITE(&(eMMC->adma_sa_low_r), Buffer_SingleBlock);
    61005e90:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005e94:	913a6000 	add	x0, x0, #0xe98
    61005e98:	f9400000 	ldr	x0, [x0]
    61005e9c:	9101c000 	add	x0, x0, #0x70
    61005ea0:	aa0003e2 	mov	x2, x0
    61005ea4:	f9402be0 	ldr	x0, [sp, #80]
    61005ea8:	2a0003e1 	mov	w1, w0
    61005eac:	aa0203e0 	mov	x0, x2
    61005eb0:	97fff659 	bl	61003814 <reg_write>
    r2.d32 = 0;
    61005eb4:	b90033ff 	str	wzr, [sp, #48]
    REG_WRITE(&(eMMC->host_ctrl2_r__auto_cmd_stat), r2.d32);
    61005eb8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005ebc:	913a6000 	add	x0, x0, #0xe98
    61005ec0:	f9400000 	ldr	x0, [x0]
    61005ec4:	9100f000 	add	x0, x0, #0x3c
    61005ec8:	aa0003e2 	mov	x2, x0
    61005ecc:	b94033e0 	ldr	w0, [sp, #48]
    61005ed0:	2a0003e1 	mov	w1, w0
    61005ed4:	aa0203e0 	mov	x0, x2
    61005ed8:	97fff64f 	bl	61003814 <reg_write>
    MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    61005edc:	b9403be0 	ldr	w0, [sp, #56]
    61005ee0:	2a0003e1 	mov	w1, w0
    61005ee4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005ee8:	9130a000 	add	x0, x0, #0xc28
    61005eec:	97fff331 	bl	61002bb0 <printf>
    MMC_PRINT("r2.d32 is %x\r\n", r2.d32);
    61005ef0:	b94033e0 	ldr	w0, [sp, #48]
    61005ef4:	2a0003e1 	mov	w1, w0
    61005ef8:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005efc:	9130e000 	add	x0, x0, #0xc38
    61005f00:	97fff32c 	bl	61002bb0 <printf>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);*/

	// send command 17 read single block
    MMC_PRINT("send command 17\r\n");
    61005f04:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005f08:	91312000 	add	x0, x0, #0xc48
    61005f0c:	97fff329 	bl	61002bb0 <printf>
    arg_r = ReadAddr;
    61005f10:	b94017e0 	ldr	w0, [sp, #20]
    61005f14:	b9004fe0 	str	w0, [sp, #76]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    61005f18:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005f1c:	913a4000 	add	x0, x0, #0xe90
    61005f20:	f9400000 	ldr	x0, [x0]
    61005f24:	91002000 	add	x0, x0, #0x8
    61005f28:	b9404fe1 	ldr	w1, [sp, #76]
    61005f2c:	97fff63a 	bl	61003814 <reg_write>
    reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    61005f30:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005f34:	913a4000 	add	x0, x0, #0xe90
    61005f38:	f9400000 	ldr	x0, [x0]
    61005f3c:	91003000 	add	x0, x0, #0xc
    61005f40:	97fff62f 	bl	610037fc <reg_read>
    61005f44:	b90043e0 	str	w0, [sp, #64]
    reg.bit.dma_en = MMC_XM_DMA_ENABLE;
    61005f48:	b94043e0 	ldr	w0, [sp, #64]
    61005f4c:	32000000 	orr	w0, w0, #0x1
    61005f50:	b90043e0 	str	w0, [sp, #64]
    reg.bit.data_xfer_dir = MMC_XM_DATA_XFER_DIR_READ;
    61005f54:	b94043e0 	ldr	w0, [sp, #64]
    61005f58:	321c0000 	orr	w0, w0, #0x10
    61005f5c:	b90043e0 	str	w0, [sp, #64]
    reg.bit.multi_blk_sel = MMC_XM_SEL_SINGLE_BLOCK;
    61005f60:	b94043e0 	ldr	w0, [sp, #64]
    61005f64:	121a7800 	and	w0, w0, #0xffffffdf
    61005f68:	b90043e0 	str	w0, [sp, #64]
    reg.bit.resp_err_chk_enable = MMC_XM_RESP_ERR_CHK_ENABLE;
    61005f6c:	b94043e0 	ldr	w0, [sp, #64]
    61005f70:	32190000 	orr	w0, w0, #0x80
    61005f74:	b90043e0 	str	w0, [sp, #64]
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
    61005f78:	b94043e0 	ldr	w0, [sp, #64]
    61005f7c:	52800041 	mov	w1, #0x2                   	// #2
    61005f80:	33100420 	bfi	w0, w1, #16, #2
    61005f84:	b90043e0 	str	w0, [sp, #64]
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
    61005f88:	b94043e0 	ldr	w0, [sp, #64]
    61005f8c:	320b0000 	orr	w0, w0, #0x200000
    61005f90:	b90043e0 	str	w0, [sp, #64]
    reg.bit.cmd_index = SD_CMD_READ_SINGLE_BLOCK;
    61005f94:	b94043e0 	ldr	w0, [sp, #64]
    61005f98:	52800221 	mov	w1, #0x11                  	// #17
    61005f9c:	33081420 	bfi	w0, w1, #24, #6
    61005fa0:	b90043e0 	str	w0, [sp, #64]
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
    61005fa4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005fa8:	913a4000 	add	x0, x0, #0xe90
    61005fac:	f9400000 	ldr	x0, [x0]
    61005fb0:	91001000 	add	x0, x0, #0x4
    61005fb4:	97fff612 	bl	610037fc <reg_read>
    61005fb8:	b9002be0 	str	w0, [sp, #40]
    block.bit.xfer_block_size = BlockSize;
    61005fbc:	794027e0 	ldrh	w0, [sp, #18]
    61005fc0:	12002c00 	and	w0, w0, #0xfff
    61005fc4:	12003c01 	and	w1, w0, #0xffff
    61005fc8:	b9402be0 	ldr	w0, [sp, #40]
    61005fcc:	33002c20 	bfxil	w0, w1, #0, #12
    61005fd0:	b9002be0 	str	w0, [sp, #40]
    block.bit.blockcount_r = 1;
    61005fd4:	b9402be0 	ldr	w0, [sp, #40]
    61005fd8:	12003c00 	and	w0, w0, #0xffff
    61005fdc:	32100000 	orr	w0, w0, #0x10000
    61005fe0:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(SDIO->blockcount_r__blocksize), block.d32);
    61005fe4:	b0000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61005fe8:	913a4000 	add	x0, x0, #0xe90
    61005fec:	f9400000 	ldr	x0, [x0]
    61005ff0:	91001000 	add	x0, x0, #0x4
    61005ff4:	aa0003e2 	mov	x2, x0
    61005ff8:	b9402be0 	ldr	w0, [sp, #40]
    61005ffc:	2a0003e1 	mov	w1, w0
    61006000:	aa0203e0 	mov	x0, x2
    61006004:	97fff604 	bl	61003814 <reg_write>
    REG_WRITE(&(SDIO->cmd_r__xfer_mode), reg.d32);
    61006008:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100600c:	913a4000 	add	x0, x0, #0xe90
    61006010:	f9400000 	ldr	x0, [x0]
    61006014:	91003000 	add	x0, x0, #0xc
    61006018:	aa0003e2 	mov	x2, x0
    6100601c:	b94043e0 	ldr	w0, [sp, #64]
    61006020:	2a0003e1 	mov	w1, w0
    61006024:	aa0203e0 	mov	x0, x2
    61006028:	97fff5fb 	bl	61003814 <reg_write>
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
    6100602c:	b9402be0 	ldr	w0, [sp, #40]
    61006030:	2a0003e1 	mov	w1, w0
    61006034:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006038:	91318000 	add	x0, x0, #0xc60
    6100603c:	97fff2dd 	bl	61002bb0 <printf>
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
    61006040:	b94043e0 	ldr	w0, [sp, #64]
    61006044:	2a0003e1 	mov	w1, w0
    61006048:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100604c:	9131e000 	add	x0, x0, #0xc78
    61006050:	97fff2d8 	bl	61002bb0 <printf>
	MMC_WAIT_CMD_COMPLETE(SDIO);
    61006054:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006058:	913a4000 	add	x0, x0, #0xe90
    6100605c:	f9400000 	ldr	x0, [x0]
    61006060:	97fff69a 	bl	61003ac8 <wait_command_complete>
    61006064:	b9005fe0 	str	w0, [sp, #92]
    61006068:	b9405fe0 	ldr	w0, [sp, #92]
    6100606c:	7100001f 	cmp	w0, #0x0
    61006070:	54000060 	b.eq	6100607c <SD_ReadSingleBlock+0x288>  // b.none
    61006074:	b9405fe0 	ldr	w0, [sp, #92]
    61006078:	1400000c 	b	610060a8 <SD_ReadSingleBlock+0x2b4>
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
    6100607c:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006080:	913a4000 	add	x0, x0, #0xe90
    61006084:	f9400000 	ldr	x0, [x0]
    61006088:	97fff6c1 	bl	61003b8c <wait_transfer_complete>
    6100608c:	b9005fe0 	str	w0, [sp, #92]
    61006090:	b9405fe0 	ldr	w0, [sp, #92]
    61006094:	7100001f 	cmp	w0, #0x0
    61006098:	54000060 	b.eq	610060a4 <SD_ReadSingleBlock+0x2b0>  // b.none
    6100609c:	b9405fe0 	ldr	w0, [sp, #92]
    610060a0:	14000002 	b	610060a8 <SD_ReadSingleBlock+0x2b4>

	return MMC_SUCCESS;
    610060a4:	52800000 	mov	w0, #0x0                   	// #0
}
    610060a8:	a8c67bfd 	ldp	x29, x30, [sp], #96
    610060ac:	d65f03c0 	ret

Disassembly of section .text.SD_WriteSingleBlock:

00000000610060b0 <SD_WriteSingleBlock>:
 * @param	BlockSize read data block size
 * @return	MMC_SUCCESS
 *
 ******************************************************************************/
u32 SD_WriteSingleBlock(uint8_t *writebuff, uint32_t WriteAddr, uint16_t BlockSize)
{
    610060b0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
    610060b4:	910003fd 	mov	x29, sp
    610060b8:	f9000fe0 	str	x0, [sp, #24]
    610060bc:	b90017e1 	str	w1, [sp, #20]
    610060c0:	790027e2 	strh	w2, [sp, #18]
    uint32_t status = MMC_SUCCESS;
    610060c4:	b9005fff 	str	wzr, [sp, #92]
	volatile unsigned int value = 0;
    610060c8:	b9004bff 	str	wzr, [sp, #72]
	uint32_t* Buffer_SingleBlock = (uint32_t* )writebuff;
    610060cc:	f9400fe0 	ldr	x0, [sp, #24]
    610060d0:	f9002be0 	str	x0, [sp, #80]
    WUP_CTRL_R__BGAP_CTRL_R__PWR_CTRL_R__HOST_CTRL1_R r1;
    HOST_CTRL2_R__AUTO_CMD_STAT_R r2;
    uint32_t arg_r;
    BLOCKCOUNT_R__BLOCKSIZE_R block;

    MMC_PRINT("SD_WriteMultiBlocks\r\n");
    610060d4:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610060d8:	91322000 	add	x0, x0, #0xc88
    610060dc:	97fff2b5 	bl	61002bb0 <printf>
    r1.d32 = 0;
    610060e0:	b9003bff 	str	wzr, [sp, #56]
    r1.bit.dma_sel = MMC_HC1_DMA_SEL_SDMA;
    610060e4:	b9403be0 	ldr	w0, [sp, #56]
    610060e8:	121b7400 	and	w0, w0, #0xffffffe7
    610060ec:	b9003be0 	str	w0, [sp, #56]
    r1.bit.dat_xfer_width = MMC_HC1_DAT_XFER_WIDTH_4BIT;   //4-bit mode
    610060f0:	b9403be0 	ldr	w0, [sp, #56]
    610060f4:	321f0000 	orr	w0, w0, #0x2
    610060f8:	b9003be0 	str	w0, [sp, #56]
    r1.bit.sd_bus_pwr_vdd1 = MMC_PC_SBP_VDD1_ON;   //PWR ON
    610060fc:	b9403be0 	ldr	w0, [sp, #56]
    61006100:	32180000 	orr	w0, w0, #0x100
    61006104:	b9003be0 	str	w0, [sp, #56]
    r1.bit.sd_bus_vol_vdd1 = MMC_PC_SBV_VDD1_3V3;   //3V
    61006108:	b9403be0 	ldr	w0, [sp, #56]
    6100610c:	32170800 	orr	w0, w0, #0xe00
    61006110:	b9003be0 	str	w0, [sp, #56]
    REG_WRITE(&(eMMC->wup_ctrl_r__bgap_ctrl_r__pwr_ctrl_r__host_ctrl1.d32), r1.d32);
    61006114:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006118:	913a6000 	add	x0, x0, #0xe98
    6100611c:	f9400000 	ldr	x0, [x0]
    61006120:	9100a000 	add	x0, x0, #0x28
    61006124:	aa0003e2 	mov	x2, x0
    61006128:	b9403be0 	ldr	w0, [sp, #56]
    6100612c:	2a0003e1 	mov	w1, w0
    61006130:	aa0203e0 	mov	x0, x2
    61006134:	97fff5b8 	bl	61003814 <reg_write>
    REG_WRITE(&(eMMC->sdmasa_r), Buffer_SingleBlock);
    61006138:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100613c:	913a6000 	add	x0, x0, #0xe98
    61006140:	f9400000 	ldr	x0, [x0]
    61006144:	aa0003e2 	mov	x2, x0
    61006148:	f9402be0 	ldr	x0, [sp, #80]
    6100614c:	2a0003e1 	mov	w1, w0
    61006150:	aa0203e0 	mov	x0, x2
    61006154:	97fff5b0 	bl	61003814 <reg_write>
    REG_WRITE(&(eMMC->adma_sa_low_r), Buffer_SingleBlock);
    61006158:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100615c:	913a6000 	add	x0, x0, #0xe98
    61006160:	f9400000 	ldr	x0, [x0]
    61006164:	9101c000 	add	x0, x0, #0x70
    61006168:	aa0003e2 	mov	x2, x0
    6100616c:	f9402be0 	ldr	x0, [sp, #80]
    61006170:	2a0003e1 	mov	w1, w0
    61006174:	aa0203e0 	mov	x0, x2
    61006178:	97fff5a7 	bl	61003814 <reg_write>
    MMC_PRINT("r1.d32 is %x\r\n", r1.d32);
    6100617c:	b9403be0 	ldr	w0, [sp, #56]
    61006180:	2a0003e1 	mov	w1, w0
    61006184:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006188:	9130a000 	add	x0, x0, #0xc28
    6100618c:	97fff289 	bl	61002bb0 <printf>
    r2.d32 = 0;
    61006190:	b90033ff 	str	wzr, [sp, #48]
    REG_WRITE(&(eMMC->host_ctrl2_r__auto_cmd_stat.d32), r2.d32);
    61006194:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006198:	913a6000 	add	x0, x0, #0xe98
    6100619c:	f9400000 	ldr	x0, [x0]
    610061a0:	9100f000 	add	x0, x0, #0x3c
    610061a4:	aa0003e2 	mov	x2, x0
    610061a8:	b94033e0 	ldr	w0, [sp, #48]
    610061ac:	2a0003e1 	mov	w1, w0
    610061b0:	aa0203e0 	mov	x0, x2
    610061b4:	97fff598 	bl	61003814 <reg_write>
    MMC_PRINT("r2.d32 is %x\r\n", r2.d32);
    610061b8:	b94033e0 	ldr	w0, [sp, #48]
    610061bc:	2a0003e1 	mov	w1, w0
    610061c0:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610061c4:	9130e000 	add	x0, x0, #0xc38
    610061c8:	97fff27a 	bl	61002bb0 <printf>
    MMC_WAIT_CMD_COMPLETE(SDIO);
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);*/

	// send command 24
    MMC_PRINT("send command 24\r\n");
    610061cc:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610061d0:	91328000 	add	x0, x0, #0xca0
    610061d4:	97fff277 	bl	61002bb0 <printf>
    arg_r = WriteAddr;
    610061d8:	b94017e0 	ldr	w0, [sp, #20]
    610061dc:	b9004fe0 	str	w0, [sp, #76]
    REG_WRITE(&(SDIO->argument_r), arg_r);
    610061e0:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610061e4:	913a4000 	add	x0, x0, #0xe90
    610061e8:	f9400000 	ldr	x0, [x0]
    610061ec:	91002000 	add	x0, x0, #0x8
    610061f0:	b9404fe1 	ldr	w1, [sp, #76]
    610061f4:	97fff588 	bl	61003814 <reg_write>
    reg.d32 = REG_READ(&(SDIO->cmd_r__xfer_mode));
    610061f8:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610061fc:	913a4000 	add	x0, x0, #0xe90
    61006200:	f9400000 	ldr	x0, [x0]
    61006204:	91003000 	add	x0, x0, #0xc
    61006208:	97fff57d 	bl	610037fc <reg_read>
    6100620c:	b90043e0 	str	w0, [sp, #64]
    reg.bit.dma_en = MMC_XM_DMA_ENABLE;
    61006210:	b94043e0 	ldr	w0, [sp, #64]
    61006214:	32000000 	orr	w0, w0, #0x1
    61006218:	b90043e0 	str	w0, [sp, #64]
    reg.bit.block_count_enable = MMC_XM_BLOCK_COUNT_ENABLE;
    6100621c:	b94043e0 	ldr	w0, [sp, #64]
    61006220:	321f0000 	orr	w0, w0, #0x2
    61006224:	b90043e0 	str	w0, [sp, #64]
    reg.bit.data_xfer_dir = MMC_XM_DATA_XFER_DIR_WRITE;
    61006228:	b94043e0 	ldr	w0, [sp, #64]
    6100622c:	121b7800 	and	w0, w0, #0xffffffef
    61006230:	b90043e0 	str	w0, [sp, #64]
    reg.bit.multi_blk_sel = MMC_XM_SEL_SINGLE_BLOCK;
    61006234:	b94043e0 	ldr	w0, [sp, #64]
    61006238:	121a7800 	and	w0, w0, #0xffffffdf
    6100623c:	b90043e0 	str	w0, [sp, #64]
    reg.bit.resp_err_chk_enable = MMC_XM_RESP_ERR_CHK_ENABLE;
    61006240:	b94043e0 	ldr	w0, [sp, #64]
    61006244:	32190000 	orr	w0, w0, #0x80
    61006248:	b90043e0 	str	w0, [sp, #64]
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
    6100624c:	b94043e0 	ldr	w0, [sp, #64]
    61006250:	52800041 	mov	w1, #0x2                   	// #2
    61006254:	33100420 	bfi	w0, w1, #16, #2
    61006258:	b90043e0 	str	w0, [sp, #64]
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
    6100625c:	b94043e0 	ldr	w0, [sp, #64]
    61006260:	320b0000 	orr	w0, w0, #0x200000
    61006264:	b90043e0 	str	w0, [sp, #64]
    reg.bit.cmd_index = SD_CMD_WRITE_SINGLE_BLOCK;
    61006268:	b94043e0 	ldr	w0, [sp, #64]
    6100626c:	52800301 	mov	w1, #0x18                  	// #24
    61006270:	33081420 	bfi	w0, w1, #24, #6
    61006274:	b90043e0 	str	w0, [sp, #64]
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
    61006278:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100627c:	913a4000 	add	x0, x0, #0xe90
    61006280:	f9400000 	ldr	x0, [x0]
    61006284:	91001000 	add	x0, x0, #0x4
    61006288:	97fff55d 	bl	610037fc <reg_read>
    6100628c:	b9002be0 	str	w0, [sp, #40]
    block.bit.xfer_block_size = BlockSize;
    61006290:	794027e0 	ldrh	w0, [sp, #18]
    61006294:	12002c00 	and	w0, w0, #0xfff
    61006298:	12003c01 	and	w1, w0, #0xffff
    6100629c:	b9402be0 	ldr	w0, [sp, #40]
    610062a0:	33002c20 	bfxil	w0, w1, #0, #12
    610062a4:	b9002be0 	str	w0, [sp, #40]
    block.bit.blockcount_r = 0x1;
    610062a8:	b9402be0 	ldr	w0, [sp, #40]
    610062ac:	12003c00 	and	w0, w0, #0xffff
    610062b0:	32100000 	orr	w0, w0, #0x10000
    610062b4:	b9002be0 	str	w0, [sp, #40]
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
    610062b8:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610062bc:	913a4000 	add	x0, x0, #0xe90
    610062c0:	f9400000 	ldr	x0, [x0]
    610062c4:	91001000 	add	x0, x0, #0x4
    610062c8:	aa0003e2 	mov	x2, x0
    610062cc:	b9402be0 	ldr	w0, [sp, #40]
    610062d0:	2a0003e1 	mov	w1, w0
    610062d4:	aa0203e0 	mov	x0, x2
    610062d8:	97fff54f 	bl	61003814 <reg_write>
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
    610062dc:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610062e0:	913a4000 	add	x0, x0, #0xe90
    610062e4:	f9400000 	ldr	x0, [x0]
    610062e8:	91003000 	add	x0, x0, #0xc
    610062ec:	aa0003e2 	mov	x2, x0
    610062f0:	b94043e0 	ldr	w0, [sp, #64]
    610062f4:	2a0003e1 	mov	w1, w0
    610062f8:	aa0203e0 	mov	x0, x2
    610062fc:	97fff546 	bl	61003814 <reg_write>
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
    61006300:	b9402be0 	ldr	w0, [sp, #40]
    61006304:	2a0003e1 	mov	w1, w0
    61006308:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100630c:	91318000 	add	x0, x0, #0xc60
    61006310:	97fff228 	bl	61002bb0 <printf>
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
    61006314:	b94043e0 	ldr	w0, [sp, #64]
    61006318:	2a0003e1 	mov	w1, w0
    6100631c:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006320:	9131e000 	add	x0, x0, #0xc78
    61006324:	97fff223 	bl	61002bb0 <printf>
	MMC_WAIT_CMD_COMPLETE(SDIO);
    61006328:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100632c:	913a4000 	add	x0, x0, #0xe90
    61006330:	f9400000 	ldr	x0, [x0]
    61006334:	97fff5e5 	bl	61003ac8 <wait_command_complete>
    61006338:	b9005fe0 	str	w0, [sp, #92]
    6100633c:	b9405fe0 	ldr	w0, [sp, #92]
    61006340:	7100001f 	cmp	w0, #0x0
    61006344:	54000060 	b.eq	61006350 <SD_WriteSingleBlock+0x2a0>  // b.none
    61006348:	b9405fe0 	ldr	w0, [sp, #92]
    6100634c:	1400000c 	b	6100637c <SD_WriteSingleBlock+0x2cc>
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
    61006350:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006354:	913a4000 	add	x0, x0, #0xe90
    61006358:	f9400000 	ldr	x0, [x0]
    6100635c:	97fff60c 	bl	61003b8c <wait_transfer_complete>
    61006360:	b9005fe0 	str	w0, [sp, #92]
    61006364:	b9405fe0 	ldr	w0, [sp, #92]
    61006368:	7100001f 	cmp	w0, #0x0
    6100636c:	54000060 	b.eq	61006378 <SD_WriteSingleBlock+0x2c8>  // b.none
    61006370:	b9405fe0 	ldr	w0, [sp, #92]
    61006374:	14000002 	b	6100637c <SD_WriteSingleBlock+0x2cc>

	return MMC_SUCCESS;
    61006378:	52800000 	mov	w0, #0x0                   	// #0
}
    6100637c:	a8c67bfd 	ldp	x29, x30, [sp], #96
    61006380:	d65f03c0 	ret

Disassembly of section .text.main:

0000000061006384 <main>:

//uint32_t Buffer_MultiBlock_Tx[MULTI_BUFFER_SIZE], Buffer_MultiBlock_Rx[MULTI_BUFFER_SIZE];
//volatile TestStatus EraseStatus = FAILED, TransferStatus1 = FAILED, TransferStatus2 = FAILED;


uint32_t main(){
    61006384:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61006388:	910003fd 	mov	x29, sp
		printf("_delay_ms(1000)\r\n");
		_delay_ms(1000);
	}
#endif 
    //EMMC_Test();
	SD_Test();
    6100638c:	9400005e 	bl	61006504 <SD_Test>
#endif

	//plps_test();
	//usb_test();
	
}
    61006390:	d503201f 	nop
    61006394:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61006398:	d65f03c0 	ret

Disassembly of section .text.RawReadWriteTestSD:

000000006100639c <RawReadWriteTestSD>:
	return MMC_SUCCESS;
}


u32 RawReadWriteTestSD()
{
    6100639c:	d12083ff 	sub	sp, sp, #0x820
    610063a0:	a9007bfd 	stp	x29, x30, [sp]
    610063a4:	910003fd 	mov	x29, sp
    int status;
    BYTE WriteBuffer[BUF_SIZE];
    BYTE ReadBuffer[BUF_SIZE];
    int result;
    MMC_PRINT("[SD]:Read/Write Buf Set!\r\n");
    610063a8:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610063ac:	91358000 	add	x0, x0, #0xd60
    610063b0:	97fff200 	bl	61002bb0 <printf>
    for(int i = 0; i < BUF_SIZE; i++){
    610063b4:	b9081fff 	str	wzr, [sp, #2076]
    610063b8:	1400000d 	b	610063ec <RawReadWriteTestSD+0x50>
        WriteBuffer[i] = i%256;
    610063bc:	b9481fe0 	ldr	w0, [sp, #2076]
    610063c0:	6b0003e1 	negs	w1, w0
    610063c4:	12001c00 	and	w0, w0, #0xff
    610063c8:	12001c21 	and	w1, w1, #0xff
    610063cc:	5a814400 	csneg	w0, w0, w1, mi  // mi = first
    610063d0:	12001c02 	and	w2, w0, #0xff
    610063d4:	b9881fe0 	ldrsw	x0, [sp, #2076]
    610063d8:	911063e1 	add	x1, sp, #0x418
    610063dc:	38206822 	strb	w2, [x1, x0]
    for(int i = 0; i < BUF_SIZE; i++){
    610063e0:	b9481fe0 	ldr	w0, [sp, #2076]
    610063e4:	11000400 	add	w0, w0, #0x1
    610063e8:	b9081fe0 	str	w0, [sp, #2076]
    610063ec:	b9481fe0 	ldr	w0, [sp, #2076]
    610063f0:	710ffc1f 	cmp	w0, #0x3ff
    610063f4:	54fffe4d 	b.le	610063bc <RawReadWriteTestSD+0x20>
    }
    memset(ReadBuffer, 0, BUF_SIZE);
    610063f8:	910063e0 	add	x0, sp, #0x18
    610063fc:	d2808002 	mov	x2, #0x400                 	// #1024
    61006400:	52800001 	mov	w1, #0x0                   	// #0
    61006404:	97ffef66 	bl	6100219c <memset>
    MMC_PRINT("[SD]:Init!\r\n");
    61006408:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100640c:	91360000 	add	x0, x0, #0xd80
    61006410:	97fff1e8 	bl	61002bb0 <printf>
    status = SD_Init();
    61006414:	97fffe3c 	bl	61005d04 <SD_Init>
    61006418:	b9081be0 	str	w0, [sp, #2072]
    if(status != MMC_SUCCESS){
    6100641c:	b9481be0 	ldr	w0, [sp, #2072]
    61006420:	7100001f 	cmp	w0, #0x0
    61006424:	54000060 	b.eq	61006430 <RawReadWriteTestSD+0x94>  // b.none
        return status;
    61006428:	b9481be0 	ldr	w0, [sp, #2072]
    6100642c:	14000033 	b	610064f8 <RawReadWriteTestSD+0x15c>
    }
    MMC_PRINT("[SD]:Single Block Write!\r\n");
    61006430:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006434:	91364000 	add	x0, x0, #0xd90
    61006438:	97fff1de 	bl	61002bb0 <printf>
    status = SD_WriteSingleBlock(WriteBuffer,0,SDCardInfo.CardBlockSize);
    6100643c:	b0000000 	adrp	x0, 61007000 <_bss_start>
    61006440:	913ba000 	add	x0, x0, #0xee8
    61006444:	b9405000 	ldr	w0, [x0, #80]
    61006448:	12003c01 	and	w1, w0, #0xffff
    6100644c:	911063e0 	add	x0, sp, #0x418
    61006450:	2a0103e2 	mov	w2, w1
    61006454:	52800001 	mov	w1, #0x0                   	// #0
    61006458:	97ffff16 	bl	610060b0 <SD_WriteSingleBlock>
    6100645c:	b9081be0 	str	w0, [sp, #2072]
    if(status != MMC_SUCCESS){
    61006460:	b9481be0 	ldr	w0, [sp, #2072]
    61006464:	7100001f 	cmp	w0, #0x0
    61006468:	54000060 	b.eq	61006474 <RawReadWriteTestSD+0xd8>  // b.none
        return status;
    6100646c:	b9481be0 	ldr	w0, [sp, #2072]
    61006470:	14000022 	b	610064f8 <RawReadWriteTestSD+0x15c>
    }
    MMC_PRINT("[SD]:Single Block Read!\r\n");
    61006474:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006478:	9136c000 	add	x0, x0, #0xdb0
    6100647c:	97fff1cd 	bl	61002bb0 <printf>
    status = SD_ReadSingleBlock(ReadBuffer, 0, SDCardInfo.CardBlockSize);
    61006480:	b0000000 	adrp	x0, 61007000 <_bss_start>
    61006484:	913ba000 	add	x0, x0, #0xee8
    61006488:	b9405000 	ldr	w0, [x0, #80]
    6100648c:	12003c01 	and	w1, w0, #0xffff
    61006490:	910063e0 	add	x0, sp, #0x18
    61006494:	2a0103e2 	mov	w2, w1
    61006498:	52800001 	mov	w1, #0x0                   	// #0
    6100649c:	97fffe56 	bl	61005df4 <SD_ReadSingleBlock>
    610064a0:	b9081be0 	str	w0, [sp, #2072]
    if(status != MMC_SUCCESS){
    610064a4:	b9481be0 	ldr	w0, [sp, #2072]
    610064a8:	7100001f 	cmp	w0, #0x0
    610064ac:	54000060 	b.eq	610064b8 <RawReadWriteTestSD+0x11c>  // b.none
        return status;
    610064b0:	b9481be0 	ldr	w0, [sp, #2072]
    610064b4:	14000011 	b	610064f8 <RawReadWriteTestSD+0x15c>
    }
    status = strcmp(WriteBuffer, ReadBuffer);
    610064b8:	910063e1 	add	x1, sp, #0x18
    610064bc:	911063e0 	add	x0, sp, #0x418
    610064c0:	97fff1f2 	bl	61002c88 <strcmp>
    610064c4:	b9081be0 	str	w0, [sp, #2072]
    if (status != MMC_SUCCESS)
    610064c8:	b9481be0 	ldr	w0, [sp, #2072]
    610064cc:	7100001f 	cmp	w0, #0x0
    610064d0:	540000c0 	b.eq	610064e8 <RawReadWriteTestSD+0x14c>  // b.none
    {
        MMC_PRINT("[SD]:Single Block Read/Write Data Not Match!\r\n");
    610064d4:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610064d8:	91374000 	add	x0, x0, #0xdd0
    610064dc:	97fff1b5 	bl	61002bb0 <printf>
        return status;
    610064e0:	b9481be0 	ldr	w0, [sp, #2072]
    610064e4:	14000005 	b	610064f8 <RawReadWriteTestSD+0x15c>
    }else{
        MMC_PRINT("[SD]:Single Block Read/Write Success!\r\n");
    610064e8:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610064ec:	91380000 	add	x0, x0, #0xe00
    610064f0:	97fff1b0 	bl	61002bb0 <printf>
    }

    return status;
    610064f4:	b9481be0 	ldr	w0, [sp, #2072]
}
    610064f8:	a9407bfd 	ldp	x29, x30, [sp]
    610064fc:	912083ff 	add	sp, sp, #0x820
    61006500:	d65f03c0 	ret

Disassembly of section .text.SD_Test:

0000000061006504 <SD_Test>:
 * @param  None
 * @return MMC_SUCCESS
 *
 ******************************************************************************/
u32 SD_Test(void)
{
    61006504:	d282900c 	mov	x12, #0x1480                	// #5248
    61006508:	cb2c63ff 	sub	sp, sp, x12
    6100650c:	a9007bfd 	stp	x29, x30, [sp]
    61006510:	910003fd 	mov	x29, sp
	u32 fnum;            			  
	char ReadBuffer[1024]={0};
    61006514:	f9083fff 	str	xzr, [sp, #4216]
    61006518:	f90843ff 	str	xzr, [sp, #4224]
    6100651c:	914007e0 	add	x0, sp, #0x1, lsl #12
    61006520:	91022000 	add	x0, x0, #0x88
    61006524:	d2807e01 	mov	x1, #0x3f0                 	// #1008
    61006528:	aa0103e2 	mov	x2, x1
    6100652c:	52800001 	mov	w1, #0x0                   	// #0
    61006530:	97ffef1b 	bl	6100219c <memset>
	char WriteBuffer[] = "welcome777777777777777\r\n";
    61006534:	d28caee0 	mov	x0, #0x6577                	// #25975
    61006538:	f2ac6d80 	movk	x0, #0x636c, lsl #16
    6100653c:	f2cdade0 	movk	x0, #0x6d6f, lsl #32
    61006540:	f2e6eca0 	movk	x0, #0x3765, lsl #48
    61006544:	f9082fe0 	str	x0, [sp, #4184]
    61006548:	5286e6e0 	mov	w0, #0x3737                	// #14135
    6100654c:	72a6e6e0 	movk	w0, #0x3737, lsl #16
    61006550:	b91063e0 	str	w0, [sp, #4192]
    61006554:	b91067e0 	str	w0, [sp, #4196]
    61006558:	d286e6e0 	mov	x0, #0x3737                	// #14135
    6100655c:	f2a6e6e0 	movk	x0, #0x3737, lsl #16
    61006560:	f2c6e6e0 	movk	x0, #0x3737, lsl #32
    61006564:	f2e141a0 	movk	x0, #0xa0d, lsl #48
    61006568:	f90837e0 	str	x0, [sp, #4200]
    6100656c:	914007e0 	add	x0, sp, #0x1, lsl #12
    61006570:	3901c01f 	strb	wzr, [x0, #112]
	FIL fnew;
	u32 status;
    printf("[START]:<SD>\r\n");
    61006574:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    61006578:	9138a000 	add	x0, x0, #0xe28
    6100657c:	97fff18d 	bl	61002bb0 <printf>
    status = RawReadWriteTestSD();
    61006580:	97ffff87 	bl	6100639c <RawReadWriteTestSD>
    61006584:	b9147fe0 	str	w0, [sp, #5244]
    if(status != MMC_SUCCESS){
    61006588:	b9547fe0 	ldr	w0, [sp, #5244]
    6100658c:	7100001f 	cmp	w0, #0x0
    61006590:	540000e0 	b.eq	610065ac <SD_Test+0xa8>  // b.none
        printf("[FAIL]:<SD>, [ERRORCODE]:<%d>\r\n", status);
    61006594:	b9547fe1 	ldr	w1, [sp, #5244]
    61006598:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    6100659c:	9138e000 	add	x0, x0, #0xe38
    610065a0:	97fff184 	bl	61002bb0 <printf>
        return status;
    610065a4:	b9547fe0 	ldr	w0, [sp, #5244]
    610065a8:	14000008 	b	610065c8 <SD_Test+0xc4>
    }else{
        printf("[SUCCESS]:<SD>\r\n");   //方括号[]内为关键词，尖括号<>内为参数
    610065ac:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610065b0:	91396000 	add	x0, x0, #0xe58
    610065b4:	97fff17f 	bl	61002bb0 <printf>
    }
    printf("[DONE]:<SD>\r\n");
    610065b8:	90000000 	adrp	x0, 61006000 <SD_ReadSingleBlock+0x20c>
    610065bc:	9139c000 	add	x0, x0, #0xe70
    610065c0:	97fff17c 	bl	61002bb0 <printf>
        printf("File open fail!\r\n");
    }
    f_close(&fnew);
    f_mount(NULL,"0:",1);
#endif
    return status;
    610065c4:	b9547fe0 	ldr	w0, [sp, #5244]
}
    610065c8:	a9407bfd 	ldp	x29, x30, [sp]
    610065cc:	d282900c 	mov	x12, #0x1480                	// #5248
    610065d0:	8b2c63ff 	add	sp, sp, x12
    610065d4:	d65f03c0 	ret

Disassembly of section .rodata:

00000000610065d8 <.rodata>:
    610065d8:	3a434947 	ccmn	w10, #0x3, #0x7, mi  // mi = first
    610065dc:	616e7520 	.inst	0x616e7520 ; undefined
    610065e0:	20656c62 	.inst	0x20656c62 ; undefined
    610065e4:	69206f74 	stgp	x20, x27, [x27, #-1024]
    610065e8:	2074696e 	.inst	0x2074696e ; undefined
    610065ec:	20636967 	.inst	0x20636967 ; undefined
    610065f0:	20757063 	.inst	0x20757063 ; undefined
    610065f4:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
    610065f8:	63616672 	.inst	0x63616672 ; undefined
    610065fc:	79622065 	ldrh	w5, [x3, #4368]
    61006600:	74657320 	.inst	0x74657320 ; undefined
    61006604:	676e6974 	.inst	0x676e6974 ; undefined
    61006608:	73797320 	.inst	0x73797320 ; undefined
    6100660c:	206d6574 	.inst	0x206d6574 ; undefined
    61006610:	69676572 	ldpsw	x18, x25, [x11, #-200]
    61006614:	72657473 	.inst	0x72657473 ; undefined
    61006618:	00000a2e 	udf	#2606
    6100661c:	00000000 	udf	#0
    61006620:	20797274 	.inst	0x20797274 ; undefined
    61006624:	69206f74 	stgp	x20, x27, [x27, #-1024]
    61006628:	2074696e 	.inst	0x2074696e ; undefined
    6100662c:	20636967 	.inst	0x20636967 ; undefined
    61006630:	20757063 	.inst	0x20757063 ; undefined
    61006634:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
    61006638:	63616672 	.inst	0x63616672 ; undefined
    6100663c:	73752065 	.inst	0x73752065 ; undefined
    61006640:	20676e69 	.inst	0x20676e69 ; undefined
    61006644:	6f6d656d 	sqshlu	v13.2d, v11.2d, #45
    61006648:	6d2d7972 	stp	d18, d30, [x11, #-304]
    6100664c:	65707061 	fnmls	z1.h, p4/m, z3.h, z16.h
    61006650:	65722064 	fmls	z4.h, p0/m, z3.h, z18.h
    61006654:	74736967 	.inst	0x74736967 ; undefined
    61006658:	0a2e7265 	bic	w5, w19, w14, lsl #28
    6100665c:	00000000 	udf	#0
    61006660:	74696e69 	.inst	0x74696e69 ; undefined
    61006664:	63696720 	.inst	0x63696720 ; undefined
    61006668:	75706320 	.inst	0x75706320 ; undefined
    6100666c:	746e6920 	.inst	0x746e6920 ; undefined
    61006670:	61667265 	.inst	0x61667265 ; undefined
    61006674:	75206563 	.inst	0x75206563 ; undefined
    61006678:	676e6973 	.inst	0x676e6973 ; undefined
    6100667c:	73797320 	.inst	0x73797320 ; undefined
    61006680:	206d6574 	.inst	0x206d6574 ; undefined
    61006684:	69676572 	ldpsw	x18, x25, [x11, #-200]
    61006688:	72657473 	.inst	0x72657473 ; undefined
    6100668c:	00000a2e 	udf	#2606
    61006690:	45535341 	ssubwb	z1.h, z26.h, z19.b
    61006694:	203a5452 	.inst	0x203a5452 ; undefined
    61006698:	253a7325 	.inst	0x253a7325 ; undefined
    6100669c:	73253a64 	.inst	0x73253a64 ; undefined
    610066a0:	0000000a 	udf	#10
    610066a4:	00000000 	udf	#0
    610066a8:	20727473 	.inst	0x20727473 ; undefined
    610066ac:	4e203d21 	cmge	v1.16b, v9.16b, v0.16b
    610066b0:	004c4c55 	.inst	0x004c4c55 ; undefined
    610066b4:	00000000 	udf	#0
    610066b8:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    610066bc:	6f532f2e 	.inst	0x6f532f2e ; undefined
    610066c0:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    610066c4:	70616f6d 	adr	x13, 610c94b3 <_sp+0x894b3>
    610066c8:	6f432f75 	.inst	0x6f432f75 ; undefined
    610066cc:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    610066d0:	756f532f 	.inst	0x756f532f ; undefined
    610066d4:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    610066d8:	6362694c 	.inst	0x6362694c ; undefined
    610066dc:	6972702f 	ldpsw	x15, x28, [x1, #-112]
    610066e0:	2e66746e 	uabd	v14.4h, v3.4h, v6.4h
    610066e4:	00000063 	udf	#99
    610066e8:	00007830 	udf	#30768
    610066ec:	00000000 	udf	#0
    610066f0:	53414c46 	.inst	0x53414c46 ; undefined
    610066f4:	50495848 	adr	x8, 610991fe <_sp+0x591fe>
	...
    61006700:	53414c46 	.inst	0x53414c46 ; undefined
    61006704:	00000048 	udf	#72
    61006708:	004d4c49 	.inst	0x004d4c49 ; undefined
    6100670c:	00000000 	udf	#0
    61006710:	00524444 	.inst	0x00524444 ; undefined
    61006714:	00000000 	udf	#0
    61006718:	353a3631 	cbnz	w17, 6107addc <_sp+0x3addc>
    6100671c:	33323a32 	.inst	0x33323a32 ; undefined
	...
    61006728:	20677541 	.inst	0x20677541 ; undefined
    6100672c:	32203520 	orr	w0, w9, #0x3fff
    61006730:	00323230 	.inst	0x00323230 ; NYI
    61006734:	00000000 	udf	#0
    61006738:	6f6c6e41 	.inst	0x6f6c6e41 ; undefined
    6100673c:	20636967 	.inst	0x20636967 ; undefined
    61006740:	20555041 	.inst	0x20555041 ; undefined
    61006744:	204b4453 	.inst	0x204b4453 ; undefined
    61006748:	6c697542 	ldnp	d2, d29, [x10, #-368]
    6100674c:	69542064 	ldpsw	x4, x8, [x3, #160]
    61006750:	203a656d 	.inst	0x203a656d ; undefined
    61006754:	202c7325 	.inst	0x202c7325 ; undefined
    61006758:	0a0d7325 	and	w5, w25, w13, lsl #28
    6100675c:	00000000 	udf	#0
    61006760:	6e776f44 	umin	v4.8h, v26.8h, v23.8h
    61006764:	64616f6c 	.inst	0x64616f6c ; undefined
    61006768:	646f4d20 	.inst	0x646f4d20 ; undefined
    6100676c:	25203a65 	.inst	0x25203a65 ; undefined
    61006770:	000a0d73 	.inst	0x000a0d73 ; undefined
    61006774:	00000000 	udf	#0
    61006778:	20555043 	.inst	0x20555043 ; undefined
    6100677c:	71657246 	subs	w6, w18, #0x95c, lsl #12
    61006780:	636e6575 	.inst	0x636e6575 ; undefined
    61006784:	6c252079 	stnp	d25, d8, [x3, #-432]
    61006788:	7a482075 	.inst	0x7a482075 ; undefined
    6100678c:	00000a0d 	udf	#2573
    61006790:	6f727265 	fcmla	v5.8h, v19.8h, v18.h[1], #270
    61006794:	74732072 	.inst	0x74732072 ; undefined
    61006798:	70207461 	adr	x1, 61047627 <_sp+0x7627>
    6100679c:	746e6972 	.inst	0x746e6972 ; undefined
    610067a0:	0000203a 	udf	#8250
    610067a4:	00000000 	udf	#0
    610067a8:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610067ac:	5f444d43 	.inst	0x5f444d43 ; undefined
    610067b0:	54554f54 	.inst	0x54554f54 ; undefined
    610067b4:	5252455f 	.inst	0x5252455f ; undefined
    610067b8:	00000a0d 	udf	#2573
    610067bc:	00000000 	udf	#0
    610067c0:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610067c4:	5f444d43 	.inst	0x5f444d43 ; undefined
    610067c8:	5f435243 	.inst	0x5f435243 ; undefined
    610067cc:	0d525245 	.inst	0x0d525245 ; undefined
    610067d0:	0000000a 	udf	#10
    610067d4:	00000000 	udf	#0
    610067d8:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610067dc:	5f444d43 	.inst	0x5f444d43 ; undefined
    610067e0:	5f444e45 	.inst	0x5f444e45 ; undefined
    610067e4:	5f544942 	.inst	0x5f544942 ; undefined
    610067e8:	0d525245 	.inst	0x0d525245 ; undefined
    610067ec:	0000000a 	udf	#10
    610067f0:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610067f4:	5f444d43 	.inst	0x5f444d43 ; undefined
    610067f8:	5f584449 	.inst	0x5f584449 ; undefined
    610067fc:	0d525245 	.inst	0x0d525245 ; undefined
    61006800:	0000000a 	udf	#10
    61006804:	00000000 	udf	#0
    61006808:	5f434d4d 	.inst	0x5f434d4d ; undefined
    6100680c:	41544144 	.inst	0x41544144 ; undefined
    61006810:	554f545f 	.inst	0x554f545f ; undefined
    61006814:	52455f54 	.inst	0x52455f54 ; undefined
    61006818:	000a0d52 	.inst	0x000a0d52 ; undefined
    6100681c:	00000000 	udf	#0
    61006820:	5f434d4d 	.inst	0x5f434d4d ; undefined
    61006824:	41544144 	.inst	0x41544144 ; undefined
    61006828:	4352435f 	.inst	0x4352435f ; undefined
    6100682c:	5252455f 	.inst	0x5252455f ; undefined
    61006830:	00000a0d 	udf	#2573
    61006834:	00000000 	udf	#0
    61006838:	5f434d4d 	.inst	0x5f434d4d ; undefined
    6100683c:	41544144 	.inst	0x41544144 ; undefined
    61006840:	444e455f 	smlalt	z31.h, z10.b, z14.b
    61006844:	5449425f 	.inst	0x5449425f ; undefined
    61006848:	5252455f 	.inst	0x5252455f ; undefined
    6100684c:	00000a0d 	udf	#2573
    61006850:	5f434d4d 	.inst	0x5f434d4d ; undefined
    61006854:	5f525543 	shl	d3, d10, #18
    61006858:	5f544d4c 	.inst	0x5f544d4c ; undefined
    6100685c:	0d525245 	.inst	0x0d525245 ; undefined
    61006860:	0000000a 	udf	#10
    61006864:	00000000 	udf	#0
    61006868:	5f434d4d 	.inst	0x5f434d4d ; undefined
    6100686c:	4f545541 	shl	v1.2d, v10.2d, #20
    61006870:	444d435f 	smlalb	z31.h, z26.b, z13.b
    61006874:	5252455f 	.inst	0x5252455f ; undefined
    61006878:	00000a0d 	udf	#2573
    6100687c:	00000000 	udf	#0
    61006880:	5f434d4d 	.inst	0x5f434d4d ; undefined
    61006884:	414d4441 	.inst	0x414d4441 ; undefined
    61006888:	5252455f 	.inst	0x5252455f ; undefined
    6100688c:	00000a0d 	udf	#2573
    61006890:	5f434d4d 	.inst	0x5f434d4d ; undefined
    61006894:	494e5554 	.inst	0x494e5554 ; undefined
    61006898:	455f474e 	saddwt	z14.h, z26.h, z31.b
    6100689c:	0a0d5252 	and	w18, w18, w13, lsl #20
	...
    610068a8:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610068ac:	50534552 	adr	x18, 610ad156 <_sp+0x6d156>
    610068b0:	5252455f 	.inst	0x5252455f ; undefined
    610068b4:	00000a0d 	udf	#2573
    610068b8:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610068bc:	544f4f42 	b.cs	610a52a4 <_sp+0x652a4>  // b.hs, b.nlast
    610068c0:	4b43415f 	sub	wzr, w10, w3, lsr #16
    610068c4:	5252455f 	.inst	0x5252455f ; undefined
    610068c8:	00000a0d 	udf	#2573
    610068cc:	00000000 	udf	#0
    610068d0:	6e6b6e75 	umin	v21.8h, v19.8h, v11.8h
    610068d4:	206e776f 	.inst	0x206e776f ; undefined
    610068d8:	6f727265 	fcmla	v5.8h, v19.8h, v18.h[1], #270
    610068dc:	74732072 	.inst	0x74732072 ; undefined
    610068e0:	0d657461 	.inst	0x0d657461 ; undefined
    610068e4:	0000000a 	udf	#10
    610068e8:	5f746573 	.inst	0x5f746573 ; undefined
    610068ec:	636f6c63 	.inst	0x636f6c63 ; undefined
    610068f0:	72665f6b 	.inst	0x72665f6b ; undefined
    610068f4:	65757165 	fnmls	z5.h, p4/m, z11.h, z21.h
    610068f8:	0d79636e 	.inst	0x0d79636e ; undefined
    610068fc:	0000000a 	udf	#10
    61006900:	20746547 	.inst	0x20746547 ; undefined
    61006904:	65736162 	fnmls	z2.h, p0/m, z11.h, z19.h
    61006908:	6b6c6320 	.inst	0x6b6c6320 ; undefined
    6100690c:	65726620 	fnmls	z0.h, p1/m, z17.h, z18.h
    61006910:	6e692071 	usubl2	v17.4s, v3.8h, v9.8h
    61006914:	6d726f66 	ldp	d6, d27, [x27, #-224]
    61006918:	6f697461 	uqshl	v1.2d, v3.2d, #41
    6100691c:	6874206e 	.inst	0x6874206e ; undefined
    61006920:	67756f72 	.inst	0x67756f72 ; undefined
    61006924:	6e612068 	usubl2	v8.4s, v3.8h, v1.8h
    61006928:	6568746f 	fnmls	z15.h, p5/m, z3.h, z8.h
    6100692c:	656d2072 	fmls	z18.h, p0/m, z3.h, z13.h
    61006930:	646f6874 	.inst	0x646f6874 ; undefined
    61006934:	00000a0d 	udf	#2573
    61006938:	65736162 	fnmls	z2.h, p0/m, z11.h, z19.h
    6100693c:	6b6c6320 	.inst	0x6b6c6320 ; undefined
    61006940:	65726620 	fnmls	z0.h, p1/m, z17.h, z18.h
    61006944:	73692071 	.inst	0x73692071 ; undefined
    61006948:	0d642520 	.inst	0x0d642520 ; undefined
    6100694c:	0000000a 	udf	#10
    61006950:	636f6c43 	.inst	0x636f6c43 ; undefined
    61006954:	754d206b 	.inst	0x754d206b ; undefined
    61006958:	7069746c 	adr	x12, 610d97e7 <_sp+0x997e7>
    6100695c:	7265696c 	.inst	0x7265696c ; undefined
    61006960:	20736920 	.inst	0x20736920 ; undefined
    61006964:	20746f6e 	.inst	0x20746f6e ; undefined
    61006968:	70707553 	adr	x19, 610e7813 <_sp+0xa7813>
    6100696c:	6574726f 	fnmls	z15.h, p4/m, z19.h, z20.h
    61006970:	00000064 	udf	#100
    61006974:	00000000 	udf	#0
    61006978:	636f6c63 	.inst	0x636f6c63 ; undefined
    6100697c:	756d206b 	.inst	0x756d206b ; undefined
    61006980:	7069746c 	adr	x12, 610d980f <_sp+0x9980f>
    61006984:	7265696c 	.inst	0x7265696c ; undefined
    61006988:	20736920 	.inst	0x20736920 ; undefined
    6100698c:	00006425 	udf	#25637
    61006990:	74736f48 	.inst	0x74736f48 ; undefined
    61006994:	746e6f43 	.inst	0x746e6f43 ; undefined
    61006998:	6c6c6f72 	ldnp	d18, d27, [x27, #-320]
    6100699c:	65537265 	fcmeq	p5.h, p4/z, z19.h, z19.h
    610069a0:	0d707574 	.inst	0x0d707574 ; undefined
    610069a4:	0000000a 	udf	#10
    610069a8:	642e3172 	.inst	0x642e3172 ; undefined
    610069ac:	69203233 	stgp	x19, x12, [x17, #-1024]
    610069b0:	78252073 	ldeorh	w5, w19, [x3]
    610069b4:	00000a0d 	udf	#2573
    610069b8:	642e3272 	.inst	0x642e3272 ; undefined
    610069bc:	69203233 	stgp	x19, x12, [x17, #-1024]
    610069c0:	78252073 	ldeorh	w5, w19, [x3]
    610069c4:	00000a0d 	udf	#2573
    610069c8:	642e3372 	.inst	0x642e3372 ; undefined
    610069cc:	69203233 	stgp	x19, x12, [x17, #-1024]
    610069d0:	78252073 	ldeorh	w5, w19, [x3]
    610069d4:	00000a0d 	udf	#2573
    610069d8:	74736f48 	.inst	0x74736f48 ; undefined
    610069dc:	746e6f43 	.inst	0x746e6f43 ; undefined
    610069e0:	6c6c6f72 	ldnp	d18, d27, [x27, #-320]
    610069e4:	6c437265 	ldnp	d5, d28, [x19, #48]
    610069e8:	536b636f 	.inst	0x536b636f ; undefined
    610069ec:	70757465 	adr	x5, 610f187b <_sp+0xb187b>
    610069f0:	00000a0d 	udf	#2573
    610069f4:	00000000 	udf	#0
    610069f8:	5f434d4d 	.inst	0x5f434d4d ; undefined
    610069fc:	51455246 	sub	w6, w18, #0x154, lsl #12
    61006a00:	4d30315f 	.inst	0x4d30315f ; undefined
    61006a04:	00000a0d 	udf	#2573
    61006a08:	5f434d4d 	.inst	0x5f434d4d ; undefined
    61006a0c:	51455246 	sub	w6, w18, #0x154, lsl #12
    61006a10:	3030345f 	adr	xzr, 61067099 <_sp+0x27099>
    61006a14:	000a0d4b 	.inst	0x000a0d4b ; undefined
    61006a18:	74696e49 	.inst	0x74696e49 ; undefined
    61006a1c:	65746e49 	fnmls	z9.h, p3/m, z18.h, z20.h
    61006a20:	70757272 	adr	x18, 610f186f <_sp+0xb186f>
    61006a24:	74655374 	.inst	0x74655374 ; undefined
    61006a28:	676e6974 	.inst	0x676e6974 ; undefined
    61006a2c:	00000a0d 	udf	#2573
    61006a30:	642e3472 	.inst	0x642e3472 ; undefined
    61006a34:	69203233 	stgp	x19, x12, [x17, #-1024]
    61006a38:	78252073 	ldeorh	w5, w19, [x3]
    61006a3c:	00000a0d 	udf	#2573
    61006a40:	475f4453 	.inst	0x475f4453 ; undefined
    61006a44:	61437465 	.inst	0x61437465 ; undefined
    61006a48:	6e496472 	.inst	0x6e496472 ; undefined
    61006a4c:	0a0d6f66 	and	w6, w27, w13, lsl #27
	...
    61006a58:	63204453 	.inst	0x63204453 ; undefined
    61006a5c:	20647261 	.inst	0x20647261 ; undefined
    61006a60:	20445453 	.inst	0x20445453 ; undefined
    61006a64:	61746163 	.inst	0x61746163 ; undefined
    61006a68:	79746963 	ldrh	w3, [x11, #6708]
    61006a6c:	2e315620 	urshl	v0.8b, v17.8b, v17.8b
    61006a70:	726f2031 	.inst	0x726f2031 ; undefined
    61006a74:	2e325620 	urshl	v0.8b, v17.8b, v18.8b
    61006a78:	000a0d30 	.inst	0x000a0d30 ; undefined
    61006a7c:	00000000 	udf	#0
    61006a80:	63204453 	.inst	0x63204453 ; undefined
    61006a84:	20647261 	.inst	0x20647261 ; undefined
    61006a88:	68676968 	.inst	0x68676968 ; undefined
    61006a8c:	70616320 	adr	x0, 610c96f3 <_sp+0x896f3>
    61006a90:	74696361 	.inst	0x74696361 ; undefined
    61006a94:	000a0d79 	.inst	0x000a0d79 ; undefined
    61006a98:	646e6553 	.inst	0x646e6553 ; undefined
    61006a9c:	74696e49 	.inst	0x74696e49 ; undefined
    61006aa0:	53646d43 	.inst	0x53646d43 ; undefined
    61006aa4:	000a0d44 	.inst	0x000a0d44 ; undefined
    61006aa8:	646e6573 	.inst	0x646e6573 ; undefined
    61006aac:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006ab0:	646e616d 	.inst	0x646e616d ; undefined
    61006ab4:	0a0d3020 	and	w0, w1, w13, lsl #12
	...
    61006ac0:	2e676572 	umax	v18.4h, v11.4h, v7.4h
    61006ac4:	20323364 	.inst	0x20323364 ; undefined
    61006ac8:	25207369 	.inst	0x25207369 ; undefined
    61006acc:	25202c78 	.inst	0x25202c78 ; undefined
    61006ad0:	000a0d64 	.inst	0x000a0d64 ; undefined
    61006ad4:	00000000 	udf	#0
    61006ad8:	646e6573 	.inst	0x646e6573 ; undefined
    61006adc:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006ae0:	646e616d 	.inst	0x646e616d ; undefined
    61006ae4:	0a0d3820 	and	w0, w1, w13, lsl #14
	...
    61006af0:	646e6573 	.inst	0x646e6573 ; undefined
    61006af4:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006af8:	646e616d 	.inst	0x646e616d ; undefined
    61006afc:	0d353520 	.inst	0x0d353520 ; undefined
    61006b00:	0000000a 	udf	#10
    61006b04:	00000000 	udf	#0
    61006b08:	646e6573 	.inst	0x646e6573 ; undefined
    61006b0c:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006b10:	646e616d 	.inst	0x646e616d ; undefined
    61006b14:	0d313420 	.inst	0x0d313420 ; undefined
    61006b18:	0000000a 	udf	#10
    61006b1c:	00000000 	udf	#0
    61006b20:	646e6573 	.inst	0x646e6573 ; undefined
    61006b24:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006b28:	646e616d 	.inst	0x646e616d ; undefined
    61006b2c:	0a0d3220 	and	w0, w17, w13, lsl #12
	...
    61006b38:	5f444943 	.inst	0x5f444943 ; undefined
    61006b3c:	20626154 	.inst	0x20626154 ; undefined
    61006b40:	20347e30 	.inst	0x20347e30 ; undefined
    61006b44:	25207369 	.inst	0x25207369 ; undefined
    61006b48:	25202c78 	.inst	0x25202c78 ; undefined
    61006b4c:	25202c78 	.inst	0x25202c78 ; undefined
    61006b50:	25202c78 	.inst	0x25202c78 ; undefined
    61006b54:	000a0d78 	.inst	0x000a0d78 ; undefined
    61006b58:	646e6573 	.inst	0x646e6573 ; undefined
    61006b5c:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006b60:	646e616d 	.inst	0x646e616d ; undefined
    61006b64:	0a0d3320 	and	w0, w25, w13, lsl #12
	...
    61006b70:	20616372 	.inst	0x20616372 ; undefined
    61006b74:	25207369 	.inst	0x25207369 ; undefined
    61006b78:	000a0d78 	.inst	0x000a0d78 ; undefined
    61006b7c:	00000000 	udf	#0
    61006b80:	646e6573 	.inst	0x646e6573 ; undefined
    61006b84:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006b88:	646e616d 	.inst	0x646e616d ; undefined
    61006b8c:	0a0d3920 	and	w0, w9, w13, lsl #14
	...
    61006b98:	5f445343 	.inst	0x5f445343 ; undefined
    61006b9c:	20626154 	.inst	0x20626154 ; undefined
    61006ba0:	20347e30 	.inst	0x20347e30 ; undefined
    61006ba4:	25207369 	.inst	0x25207369 ; undefined
    61006ba8:	25202c78 	.inst	0x25202c78 ; undefined
    61006bac:	25202c78 	.inst	0x25202c78 ; undefined
    61006bb0:	25202c78 	.inst	0x25202c78 ; undefined
    61006bb4:	000a0d78 	.inst	0x000a0d78 ; undefined
    61006bb8:	20746573 	.inst	0x20746573 ; undefined
    61006bbc:	64726163 	.inst	0x64726163 ; undefined
    61006bc0:	666e6920 	.inst	0x666e6920 ; undefined
    61006bc4:	74616d6f 	.inst	0x74616d6f ; undefined
    61006bc8:	0d6e6f69 	.inst	0x0d6e6f69 ; undefined
    61006bcc:	0000000a 	udf	#10
    61006bd0:	20746553 	.inst	0x20746553 ; undefined
    61006bd4:	71657246 	subs	w6, w18, #0x95c, lsl #12
    61006bd8:	4d303120 	.inst	0x4d303120 ; undefined
    61006bdc:	00000a0d 	udf	#2573
    61006be0:	646e6573 	.inst	0x646e6573 ; undefined
    61006be4:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006be8:	646e616d 	.inst	0x646e616d ; undefined
    61006bec:	0a0d3720 	and	w0, w25, w13, lsl #13
	...
    61006bf8:	74697753 	.inst	0x74697753 ; undefined
    61006bfc:	61446863 	.inst	0x61446863 ; undefined
    61006c00:	69576174 	ldpsw	x20, x24, [x11, #184]
    61006c04:	53687464 	.inst	0x53687464 ; undefined
    61006c08:	000a0d44 	.inst	0x000a0d44 ; undefined
    61006c0c:	00000000 	udf	#0
    61006c10:	646e6573 	.inst	0x646e6573 ; undefined
    61006c14:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006c18:	646e616d 	.inst	0x646e616d ; undefined
    61006c1c:	0a0d3620 	and	w0, w17, w13, lsl #13
	...
    61006c28:	642e3172 	.inst	0x642e3172 ; undefined
    61006c2c:	69203233 	stgp	x19, x12, [x17, #-1024]
    61006c30:	78252073 	ldeorh	w5, w19, [x3]
    61006c34:	00000a0d 	udf	#2573
    61006c38:	642e3272 	.inst	0x642e3272 ; undefined
    61006c3c:	69203233 	stgp	x19, x12, [x17, #-1024]
    61006c40:	78252073 	ldeorh	w5, w19, [x3]
    61006c44:	00000a0d 	udf	#2573
    61006c48:	646e6573 	.inst	0x646e6573 ; undefined
    61006c4c:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006c50:	646e616d 	.inst	0x646e616d ; undefined
    61006c54:	0d373120 	.inst	0x0d373120 ; undefined
    61006c58:	0000000a 	udf	#10
    61006c5c:	00000000 	udf	#0
    61006c60:	636f6c62 	.inst	0x636f6c62 ; undefined
    61006c64:	33642e6b 	.inst	0x33642e6b ; undefined
    61006c68:	73692032 	.inst	0x73692032 ; undefined
    61006c6c:	0d782520 	.inst	0x0d782520 ; undefined
    61006c70:	0000000a 	udf	#10
    61006c74:	00000000 	udf	#0
    61006c78:	2e676572 	umax	v18.4h, v11.4h, v7.4h
    61006c7c:	20323364 	.inst	0x20323364 ; undefined
    61006c80:	25207369 	.inst	0x25207369 ; undefined
    61006c84:	000a0d78 	.inst	0x000a0d78 ; undefined
    61006c88:	575f4453 	.inst	0x575f4453 ; undefined
    61006c8c:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
    61006c90:	746c754d 	.inst	0x746c754d ; undefined
    61006c94:	6f6c4269 	mls	v9.8h, v19.8h, v12.h[2]
    61006c98:	0d736b63 	.inst	0x0d736b63 ; undefined
    61006c9c:	0000000a 	udf	#10
    61006ca0:	646e6573 	.inst	0x646e6573 ; undefined
    61006ca4:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006ca8:	646e616d 	.inst	0x646e616d ; undefined
    61006cac:	0d343220 	.inst	0x0d343220 ; undefined
    61006cb0:	0000000a 	udf	#10
    61006cb4:	00000000 	udf	#0
    61006cb8:	642e3172 	.inst	0x642e3172 ; undefined
    61006cbc:	69203233 	stgp	x19, x12, [x17, #-1024]
    61006cc0:	78252073 	ldeorh	w5, w19, [x3]
    61006cc4:	00000a0d 	udf	#2573
    61006cc8:	642e3272 	.inst	0x642e3272 ; undefined
    61006ccc:	69203233 	stgp	x19, x12, [x17, #-1024]
    61006cd0:	78252073 	ldeorh	w5, w19, [x3]
    61006cd4:	00000a0d 	udf	#2573
    61006cd8:	646e6573 	.inst	0x646e6573 ; undefined
    61006cdc:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006ce0:	646e616d 	.inst	0x646e616d ; undefined
    61006ce4:	0d363120 	.inst	0x0d363120 ; undefined
    61006ce8:	0000000a 	udf	#10
    61006cec:	00000000 	udf	#0
    61006cf0:	636f6c62 	.inst	0x636f6c62 ; undefined
    61006cf4:	33642e6b 	.inst	0x33642e6b ; undefined
    61006cf8:	73692032 	.inst	0x73692032 ; undefined
    61006cfc:	0d782520 	.inst	0x0d782520 ; undefined
    61006d00:	0000000a 	udf	#10
    61006d04:	00000000 	udf	#0
    61006d08:	2e676572 	umax	v18.4h, v11.4h, v7.4h
    61006d0c:	20323364 	.inst	0x20323364 ; undefined
    61006d10:	25207369 	.inst	0x25207369 ; undefined
    61006d14:	000a0d78 	.inst	0x000a0d78 ; undefined
    61006d18:	646e6573 	.inst	0x646e6573 ; undefined
    61006d1c:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006d20:	646e616d 	.inst	0x646e616d ; undefined
    61006d24:	0d373120 	.inst	0x0d373120 ; undefined
    61006d28:	0000000a 	udf	#10
    61006d2c:	00000000 	udf	#0
    61006d30:	575f4453 	.inst	0x575f4453 ; undefined
    61006d34:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
    61006d38:	746c754d 	.inst	0x746c754d ; undefined
    61006d3c:	6f6c4269 	mls	v9.8h, v19.8h, v12.h[2]
    61006d40:	0d736b63 	.inst	0x0d736b63 ; undefined
    61006d44:	0000000a 	udf	#10
    61006d48:	646e6573 	.inst	0x646e6573 ; undefined
    61006d4c:	6d6f6320 	ldp	d0, d24, [x25, #-272]
    61006d50:	646e616d 	.inst	0x646e616d ; undefined
    61006d54:	0d343220 	.inst	0x0d343220 ; undefined
    61006d58:	0000000a 	udf	#10
    61006d5c:	00000000 	udf	#0
    61006d60:	5d44535b 	.inst	0x5d44535b ; undefined
    61006d64:	6165523a 	.inst	0x6165523a ; undefined
    61006d68:	72572f64 	.inst	0x72572f64 ; undefined
    61006d6c:	20657469 	.inst	0x20657469 ; undefined
    61006d70:	20667542 	.inst	0x20667542 ; undefined
    61006d74:	21746553 	.inst	0x21746553 ; undefined
    61006d78:	00000a0d 	udf	#2573
    61006d7c:	00000000 	udf	#0
    61006d80:	5d44535b 	.inst	0x5d44535b ; undefined
    61006d84:	696e493a 	ldpsw	x26, x18, [x9, #-144]
    61006d88:	0a0d2174 	and	w20, w11, w13, lsl #8
    61006d8c:	00000000 	udf	#0
    61006d90:	5d44535b 	.inst	0x5d44535b ; undefined
    61006d94:	6e69533a 	uabal2	v26.4s, v25.8h, v9.8h
    61006d98:	20656c67 	.inst	0x20656c67 ; undefined
    61006d9c:	636f6c42 	.inst	0x636f6c42 ; undefined
    61006da0:	7257206b 	.inst	0x7257206b ; undefined
    61006da4:	21657469 	.inst	0x21657469 ; undefined
    61006da8:	00000a0d 	udf	#2573
    61006dac:	00000000 	udf	#0
    61006db0:	5d44535b 	.inst	0x5d44535b ; undefined
    61006db4:	6e69533a 	uabal2	v26.4s, v25.8h, v9.8h
    61006db8:	20656c67 	.inst	0x20656c67 ; undefined
    61006dbc:	636f6c42 	.inst	0x636f6c42 ; undefined
    61006dc0:	6552206b 	fcmeq	p11.h, p0/z, z3.h, #0.0
    61006dc4:	0d216461 	.inst	0x0d216461 ; undefined
    61006dc8:	0000000a 	udf	#10
    61006dcc:	00000000 	udf	#0
    61006dd0:	5d44535b 	.inst	0x5d44535b ; undefined
    61006dd4:	6e69533a 	uabal2	v26.4s, v25.8h, v9.8h
    61006dd8:	20656c67 	.inst	0x20656c67 ; undefined
    61006ddc:	636f6c42 	.inst	0x636f6c42 ; undefined
    61006de0:	6552206b 	fcmeq	p11.h, p0/z, z3.h, #0.0
    61006de4:	572f6461 	.inst	0x572f6461 ; undefined
    61006de8:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
    61006dec:	74614420 	.inst	0x74614420 ; undefined
    61006df0:	6f4e2061 	umlal2	v1.4s, v3.8h, v14.h[0]
    61006df4:	614d2074 	.inst	0x614d2074 ; undefined
    61006df8:	21686374 	.inst	0x21686374 ; undefined
    61006dfc:	00000a0d 	udf	#2573
    61006e00:	5d44535b 	.inst	0x5d44535b ; undefined
    61006e04:	6e69533a 	uabal2	v26.4s, v25.8h, v9.8h
    61006e08:	20656c67 	.inst	0x20656c67 ; undefined
    61006e0c:	636f6c42 	.inst	0x636f6c42 ; undefined
    61006e10:	6552206b 	fcmeq	p11.h, p0/z, z3.h, #0.0
    61006e14:	572f6461 	.inst	0x572f6461 ; undefined
    61006e18:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
    61006e1c:	63755320 	.inst	0x63755320 ; undefined
    61006e20:	73736563 	.inst	0x73736563 ; undefined
    61006e24:	000a0d21 	.inst	0x000a0d21 ; undefined
    61006e28:	4154535b 	.inst	0x4154535b ; undefined
    61006e2c:	3a5d5452 	.inst	0x3a5d5452 ; undefined
    61006e30:	3e44533c 	.inst	0x3e44533c ; undefined
    61006e34:	00000a0d 	udf	#2573
    61006e38:	4941465b 	.inst	0x4941465b ; undefined
    61006e3c:	3c3a5d4c 	.inst	0x3c3a5d4c ; undefined
    61006e40:	2c3e4453 	stnp	s19, s17, [x2, #-16]
    61006e44:	52455b20 	.inst	0x52455b20 ; undefined
    61006e48:	43524f52 	.inst	0x43524f52 ; undefined
    61006e4c:	5d45444f 	.inst	0x5d45444f ; undefined
    61006e50:	64253c3a 	.inst	0x64253c3a ; undefined
    61006e54:	000a0d3e 	.inst	0x000a0d3e ; undefined
    61006e58:	4355535b 	.inst	0x4355535b ; undefined
    61006e5c:	53534543 	.inst	0x53534543 ; undefined
    61006e60:	533c3a5d 	.inst	0x533c3a5d ; undefined
    61006e64:	0a0d3e44 	and	w4, w18, w13, lsl #15
	...
    61006e70:	4e4f445b 	.inst	0x4e4f445b ; undefined
    61006e74:	3c3a5d45 	.inst	0x3c3a5d45 ; undefined
    61006e78:	0d3e4453 	.inst	0x0d3e4453 ; undefined
    61006e7c:	Address 0x0000000061006e7c is out of bounds.


Disassembly of section .data:

0000000061006e80 <SystemCoreClock>:
uint32_t SystemCoreClock = SYSTEM_CLOCK;  /* System Clock Frequency (Core Clock) */
    61006e80:	02faf080 	.inst	0x02faf080 ; undefined

0000000061006e84 <RCA>:
uint32_t CSD_Tab[4], CID_Tab[4], RCA = 1;
    61006e84:	00000001 	udf	#1

0000000061006e88 <CardType>:
static uint32_t CardType =  SDIO_HIGH_CAPACITY_SD_CARD;
    61006e88:	00000002 	udf	#2
    61006e8c:	00000000 	udf	#0

0000000061006e90 <SDIO>:
volatile DWC_mshc_block_registers* SDIO = (DWC_mshc_block_registers*)SDIO_WRAP__SDIO0__BASE_ADDR;
    61006e90:	f8049000 	stur	x0, [x0, #73]
    61006e94:	00000000 	udf	#0

0000000061006e98 <eMMC>:
volatile DWC_mshc_block_registers* eMMC = (DWC_mshc_block_registers*)SDIO_WRAP__SDIO0__BASE_ADDR;
    61006e98:	f8049000 	stur	x0, [x0, #73]
    61006e9c:	00000000 	udf	#0

Disassembly of section .bss:

0000000061006ea0 <generic_timer_rate>:
	...

0000000061006ea8 <irq_handler_list>:
	...

0000000061007000 <_bss_start>:
	...

00000000610076c8 <fiq_handler_list>:
	...

0000000061007ee8 <SDCardInfo>:
	...

0000000061007f40 <CSD_Tab>:
	...

0000000061007f50 <CID_Tab>:
	...

0000000061007f60 <mtimer>:
	...

0000000061007f80 <rca>:
	...

0000000061007f88 <sd_mtimer>:
	...

Disassembly of section .stack:

000000006103c000 <_heap_end>:
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
{
       0:	00000060 	udf	#96
       4:	00460004 	.inst	0x00460004 ; undefined
       8:	01040000 	.inst	0x01040000 ; undefined
       c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
	panic();
      10:	01010100 	.inst	0x01010100 ; undefined
}
      14:	00000001 	udf	#1
      18:	01000001 	.inst	0x01000001 ; undefined
      1c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	6f532f2e 	.inst	0x6f532f2e ; undefined
      24:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
      28:	70616f6d 	adr	x13, c2e17 <__stack_size+0xbee17>
      2c:	6f432f75 	.inst	0x6f432f75 ; undefined
	return 0;
      30:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
}
      34:	756f532f 	.inst	0x756f532f ; undefined
      38:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    __delay(delay_cnt);
      3c:	00434347 	.inst	0x00434347 ; undefined
      40:	776f6c00 	.inst	0x776f6c00 ; undefined
}
      44:	6576656c 	fnmls	z12.h, p1/m, z11.h, z22.h
      48:	00532e6c 	.inst	0x00532e6c ; undefined
      4c:	00000001 	udf	#1
    } while(Tconsumed < DelayCnt);
      50:	50020900 	adr	x0, 4172 <__stack_size+0x172>
    return 0;
      54:	00610009 	.inst	0x00610009 ; undefined
}
      58:	18000000 	ldr	w0, 58 <__stack_size-0x3fa8>
      5c:	02222323 	.inst	0x02222323 ; undefined
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
      60:	01010001 	.inst	0x01010001 ; undefined
      64:	00000062 	udf	#98
      68:	00410004 	.inst	0x00410004 ; undefined
      6c:	01040000 	.inst	0x01040000 ; undefined
    if(Mtimer_IsTimerOut(&mtimer)){
      70:	0d0efb01 	.inst	0x0d0efb01 ; undefined
      74:	01010100 	.inst	0x01010100 ; undefined
      78:	00000001 	udf	#1
      7c:	01000001 	.inst	0x01000001 ; undefined
      80:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
        error_stat_check(r);
      84:	6f532f2e 	.inst	0x6f532f2e ; undefined
      88:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
        return MMC_XFER_TIMEOUT;
      8c:	70616f6d 	adr	x13, c2e7b <__stack_size+0xbee7b>
      90:	6f432f75 	.inst	0x6f432f75 ; undefined
        if(r.bit.xfer_complete == 1){
      94:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
      98:	756f532f 	.inst	0x756f532f ; undefined
        r.bit.dma_interrupt = 0x1;
      9c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
      a0:	00434347 	.inst	0x00434347 ; undefined
      a4:	6d656d00 	ldp	d0, d27, [x8, #-432]
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
      a8:	0100532e 	.inst	0x0100532e ; undefined
      ac:	00000000 	udf	#0
      b0:	09600209 	.inst	0x09600209 ; undefined
      b4:	00006100 	udf	#24832
      b8:	21190000 	.inst	0x21190000 ; undefined
      bc:	22262121 	.inst	0x22262121 ; undefined
      c0:	23212121 	.inst	0x23212121 ; undefined
        return MMC_SUCCESS;
      c4:	00060221 	.inst	0x00060221 ; undefined
}
      c8:	00980101 	.inst	0x00980101 ; undefined
      cc:	00040000 	.inst	0x00040000 ; undefined
    switch(event) {
        case Uart_event_none:
            // no interrupt has occurred
            retval = FALSE;
            retval = Uart_event_none;
            break;
      d0:	0000004d 	udf	#77
        case Uart_event_modem:
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d4:	fb010104 	.inst	0xfb010104 ; undefined
      d8:	01000d0e 	.inst	0x01000d0e ; undefined
      dc:	00010101 	.inst	0x00010101 ; undefined
            retval = Uart_event_modem;
      e0:	00010000 	.inst	0x00010000 ; undefined
            break;
      e4:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
        case Uart_event_thre:
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
      ec:	2f436f53 	.inst	0x2f436f53 ; undefined
      f0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
        	retval =Uart_event_thre;
      f4:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
      f8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
        	break;
      fc:	532f6e6f 	.inst	0x532f6e6f ; undefined
        case Uart_event_timeout:
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	6372756f 	.inst	0x6372756f ; undefined
     104:	43472f65 	.inst	0x43472f65 ; undefined
     108:	73000043 	.inst	0x73000043 ; undefined
        	retval = Uart_event_timeout;
     10c:	74726174 	.inst	0x74726174 ; undefined
     110:	615f7075 	.inst	0x615f7075 ; undefined
        	break;
     114:	68637261 	.inst	0x68637261 ; undefined
        case Received_data_available:
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	532e3436 	.inst	0x532e3436 ; undefined
     11c:	00000100 	udf	#256
     120:	02090000 	.inst	0x02090000 ; undefined
        	retval = Received_data_available;
     124:	61000800 	.inst	0x61000800 ; undefined
     128:	00000000 	udf	#0
            break;
     12c:	03012203 	.inst	0x03012203 ; undefined
        case Receiver_line_status:
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	2177200b 	.inst	0x2177200b ; undefined
     134:	23232121 	.inst	0x23232121 ; undefined
     138:	21232125 	.inst	0x21232125 ; undefined
        	retval = Receiver_line_status;
     13c:	22212121 	.inst	0x22212121 ; undefined
     140:	21222121 	.inst	0x21222121 ; undefined
            break;
     144:	22212221 	.inst	0x22212221 ; undefined
        case Uart_event_busy:
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	33922421 	.inst	0x33922421 ; undefined
     14c:	22212121 	.inst	0x22212121 ; undefined
     150:	21342121 	.inst	0x21342121 ; undefined
        	retval = Uart_event_busy;
     154:	21212121 	.inst	0x21212121 ; undefined
     158:	21212122 	.inst	0x21212122 ; undefined
            break;
     15c:	25232623 	.inst	0x25232623 ; undefined
        default:
            // If we've reached this point, the value read from the
            // iir_fcr register is unrecognized.
            retval = 0;
     160:	00140223 	.inst	0x00140223 ; undefined
            break;
     164:	00bf0101 	.inst	0x00bf0101 ; undefined
    }

    // If an interrupt has occurred, pass it to the user listener
    // function.
    return retval;
     168:	00040000 	.inst	0x00040000 ; undefined
}
     16c:	00000045 	udf	#69
     170:	fb010104 	.inst	0xfb010104 ; undefined
		writel_relaxed(sgi_igroup, GICR_SGI_IGROUPR0);
		writel_relaxed(sgi_igrpmod, GICR_SGI_IGRPMOD0);

		gic_redist_wait();
	} else {
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
     174:	01000d0e 	.inst	0x01000d0e ; undefined
     178:	00010101 	.inst	0x00010101 ; undefined
     17c:	00010000 	.inst	0x00010000 ; undefined
     180:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
     184:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     188:	2f436f53 	.inst	0x2f436f53 ; undefined
     18c:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
     190:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     194:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     198:	532f6e6f 	.inst	0x532f6e6f ; undefined
     19c:	6372756f 	.inst	0x6372756f ; undefined
     1a0:	43472f65 	.inst	0x43472f65 ; undefined
     1a4:	76000043 	.inst	0x76000043 ; undefined
     1a8:	6f746365 	umlsl2	v5.4s, v27.8h, v4.h[3]
     1ac:	532e7372 	.inst	0x532e7372 ; undefined
     1b0:	00000100 	udf	#256
     1b4:	02090000 	.inst	0x02090000 ; undefined
     1b8:	61001000 	.inst	0x61001000 ; undefined
     1bc:	00000000 	udf	#0
     1c0:	21010c03 	.inst	0x21010c03 ; undefined

		writel_relaxed(0, GICD_CTLR);
     1c4:	bf082121 	.inst	0xbf082121 ; undefined
     1c8:	08212121 	.inst	0x08212121 ; undefined
     1cc:	212121bf 	.inst	0x212121bf ; undefined
		gic_dist_wait();
     1d0:	2121bf08 	.inst	0x2121bf08 ; undefined

		if (int_group == GROUP_1_NONSECURE) {
     1d4:	21bf0821 	.inst	0x21bf0821 ; undefined
     1d8:	bf082121 	.inst	0xbf082121 ; undefined
     1dc:	08212121 	.inst	0x08212121 ; undefined
			gicd_igroup  |= (0x01 << int_id);
     1e0:	212121bf 	.inst	0x212121bf ; undefined
     1e4:	2121bf08 	.inst	0x2121bf08 ; undefined
     1e8:	080a0321 	stxrb	w10, w1, [x25]
     1ec:	212121ba 	.inst	0x212121ba ; undefined
     1f0:	21212121 	.inst	0x21212121 ; undefined
     1f4:	21212121 	.inst	0x21212121 ; undefined
     1f8:	27212121 	.inst	0x27212121 ; undefined
			gicd_igrpmod &= (~(0x01 << int_id));
     1fc:	21212175 	.inst	0x21212175 ; undefined
     200:	21212121 	.inst	0x21212121 ; undefined
     204:	22212121 	.inst	0x22212121 ; undefined
     208:	28212121 	stnp	w1, w8, [x9, #-248]
     20c:	21752121 	.inst	0x21752121 ; undefined
     210:	21212121 	.inst	0x21212121 ; undefined
     214:	21212127 	.inst	0x21212127 ; undefined
     218:	21212121 	.inst	0x21212121 ; undefined
     21c:	21212121 	.inst	0x21212121 ; undefined
		} else if (int_group == GROUP_1_SECURE) {
     220:	21212121 	.inst	0x21212121 ; undefined
     224:	01000102 	.inst	0x01000102 ; undefined
     228:	00013601 	.inst	0x00013601 ; undefined
			gicd_igroup  &= (~(0x01 << int_id));
     22c:	8c000400 	.inst	0x8c000400 ; undefined
     230:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     234:	0efb0101 	.inst	0x0efb0101 ; undefined
     238:	0101000d 	.inst	0x0101000d ; undefined
     23c:	00000101 	udf	#257
     240:	00000100 	udf	#256
     244:	2f2e2e01 	.inst	0x2f2e2e01 ; undefined
     248:	532f2e2e 	.inst	0x532f2e2e ; undefined
			gicd_igrpmod |= (0x01 << int_id);
     24c:	642f436f 	.inst	0x642f436f ; undefined
     250:	616f6d65 	.inst	0x616f6d65 ; undefined
     254:	432f7570 	.inst	0x432f7570 ; undefined
     258:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     25c:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
     260:	64756c63 	.inst	0x64756c63 ; undefined
     264:	2e2e0065 	uaddl	v5.8h, v3.8b, v14.8b
     268:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
		} else if(int_group == GROUP_0) {
     26c:	2f436f53 	.inst	0x2f436f53 ; undefined
     270:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     274:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
			gicd_igroup  &= (~(0x01 << int_id));
     278:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     27c:	532f6e6f 	.inst	0x532f6e6f ; undefined
     280:	6372756f 	.inst	0x6372756f ; undefined
     284:	65472f65 	fminv	h5, p3, z27.h
     288:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     28c:	69745f63 	ldpsw	x3, x23, [x27, #-96]
     290:	2f72656d 	.inst	0x2f72656d ; undefined
     294:	00637273 	.inst	0x00637273 ; undefined
			gicd_igrpmod &= (0x01 << int_id);
     298:	2e6f6900 	.inst	0x2e6f6900 ; undefined
     29c:	00010068 	.inst	0x00010068 ; undefined
     2a0:	6e656700 	umax	v0.8h, v24.8h, v5.8h
     2a4:	63697265 	.inst	0x63697265 ; undefined
     2a8:	6d69745f 	ldp	d31, d29, [x2, #-368]
     2ac:	632e7265 	.inst	0x632e7265 ; undefined
     2b0:	00000200 	udf	#512
		}

		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
     2b4:	65707974 	fnmls	z20.h, p6/m, z11.h, z16.h
     2b8:	0100682e 	.inst	0x0100682e ; undefined
     2bc:	05000000 	orr	z0.s, z0.s, #0x1
     2c0:	02090001 	.inst	0x02090001 ; undefined
     2c4:	61001510 	.inst	0x61001510 ; undefined
     2c8:	00000000 	udf	#0
     2cc:	05011803 	orr	z3.s, z3.s, #0x20000000
     2d0:	01053d02 	.inst	0x01053d02 ; undefined
     2d4:	0003023d 	.inst	0x0003023d ; undefined
     2d8:	02040101 	.inst	0x02040101 ; undefined
     2dc:	09000105 	.inst	0x09000105 ; undefined
     2e0:	00155802 	.inst	0x00155802 ; undefined
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
     2e4:	00000061 	udf	#97
     2e8:	01170300 	.inst	0x01170300 ; undefined
     2ec:	05210f05 	ext	z5.b, z5.b, z24.b, #11
     2f0:	09052f02 	.inst	0x09052f02 ; undefined
     2f4:	21010533 	.inst	0x21010533 ; undefined
     2f8:	01000202 	.inst	0x01000202 ; undefined
     2fc:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
     300:	02090001 	.inst	0x02090001 ; undefined
     304:	61001578 	.inst	0x61001578 ; undefined
     308:	00000000 	udf	#0
     30c:	05012703 	orr	z3.b, z3.b, #0x11
     310:	09052f02 	.inst	0x09052f02 ; undefined

		gic_dist_wait();
     314:	21010534 	.inst	0x21010534 ; undefined
	}
}
     318:	01000202 	.inst	0x01000202 ; undefined
     31c:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
     320:	02090001 	.inst	0x02090001 ; undefined
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
     324:	61001594 	.inst	0x61001594 ; undefined
     328:	00000000 	udf	#0
     32c:	05013203 	orr	z3.s, z3.s, #0xfc0007ff
     330:	09052302 	.inst	0x09052302 ; undefined
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
     334:	21010534 	.inst	0x21010534 ; undefined
     338:	01000202 	.inst	0x01000202 ; undefined
     33c:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
     340:	02090001 	.inst	0x02090001 ; undefined
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
     344:	610015ac 	.inst	0x610015ac ; undefined
     348:	00000000 	udf	#0
     34c:	0100c003 	.inst	0x0100c003 ; undefined
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
     350:	052f1705 	ext	z5.b, z5.b, z24.b, #125
     354:	02052e15 	.inst	0x02052e15 ; undefined
     358:	05214c41 	uzp2	p1.b, p2.b, p1.b
     35c:	03024e01 	.inst	0x03024e01 ; undefined
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
     360:	85010100 	.inst	0x85010100 ; undefined
     364:	04000008 	add	z8.b, p0/m, z8.b, z0.b
     368:	0000f100 	udf	#61696
     36c:	01010400 	.inst	0x01010400 ; undefined
     370:	000d0efb 	.inst	0x000d0efb ; undefined
     374:	01010101 	.inst	0x01010101 ; undefined
    block.bit.xfer_block_size = BlockSize;
     378:	01000000 	.inst	0x01000000 ; undefined
     37c:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
     380:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     384:	436f532f 	.inst	0x436f532f ; undefined
     388:	6d65642f 	ldp	d15, d25, [x1, #-432]
     38c:	7570616f 	.inst	0x7570616f ; undefined
    block.bit.blockcount_r = BlockNum;
     390:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     394:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     398:	72756f53 	.inst	0x72756f53 ; undefined
     39c:	472f6563 	.inst	0x472f6563 ; undefined
     3a0:	355f6369 	cbnz	w9, bf00c <__stack_size+0xbb00c>
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
     3a4:	692f3030 	stgp	x16, x12, [x1, #-544]
     3a8:	2e00636e 	.inst	0x2e00636e ; undefined
     3ac:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     3b0:	436f532f 	.inst	0x436f532f ; undefined
     3b4:	6d65642f 	ldp	d15, d25, [x1, #-432]
     3b8:	7570616f 	.inst	0x7570616f ; undefined
     3bc:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     3c0:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     3c4:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
     3c8:	00656475 	.inst	0x00656475 ; undefined
     3cc:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     3d0:	6f532f2e 	.inst	0x6f532f2e ; undefined
     3d4:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     3d8:	70616f6d 	adr	x13, c31c7 <__stack_size+0xbf1c7>
     3dc:	6f432f75 	.inst	0x6f432f75 ; undefined
     3e0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     3e4:	756f532f 	.inst	0x756f532f ; undefined
     3e8:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
     3ec:	5f636947 	.inst	0x5f636947 ; undefined
     3f0:	2f303035 	.inst	0x2f303035 ; undefined
     3f4:	00637273 	.inst	0x00637273 ; undefined
     3f8:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     3fc:	6f532f2e 	.inst	0x6f532f2e ; undefined
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
     400:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     404:	70616f6d 	adr	x13, c31f3 <__stack_size+0xbf1f3>
     408:	6f432f75 	.inst	0x6f432f75 ; undefined
     40c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     410:	636e492f 	.inst	0x636e492f ; undefined
	MMC_WAIT_CMD_COMPLETE(SDIO);
     414:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
     418:	62696c2f 	.inst	0x62696c2f ; undefined
     41c:	67000063 	.inst	0x67000063 ; undefined
     420:	765f6369 	.inst	0x765f6369 ; undefined
     424:	00682e33 	.inst	0x00682e33 ; undefined
     428:	69000001 	stgp	x1, x0, [x0]
     42c:	00682e6f 	.inst	0x00682e6f ; undefined
     430:	63000002 	.inst	0x63000002 ; undefined
     434:	682e7570 	.inst	0x682e7570 ; undefined
     438:	00000200 	udf	#512
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
     43c:	5f636967 	.inst	0x5f636967 ; undefined
     440:	632e3376 	.inst	0x632e3376 ; undefined
     444:	00000300 	udf	#768
     448:	65707974 	fnmls	z20.h, p6/m, z11.h, z16.h
     44c:	0200682e 	.inst	0x0200682e ; undefined
     450:	74730000 	.inst	0x74730000 ; undefined
     454:	2e6f6964 	.inst	0x2e6f6964 ; undefined
     458:	00040068 	.inst	0x00040068 ; undefined
     45c:	01050000 	.inst	0x01050000 ; undefined
     460:	f8020900 	sttr	x0, [x8, #32]
	return MMC_SUCCESS;
     464:	00610015 	.inst	0x00610015 ; undefined
}
     468:	03000000 	.inst	0x03000000 ; undefined
     46c:	0205011c 	.inst	0x0205011c ; undefined
     470:	01054b2f 	.inst	0x01054b2f ; undefined
     474:	00030221 	.inst	0x00030221 ; undefined
     478:	01050101 	.inst	0x01050101 ; undefined
     47c:	20020900 	.inst	0x20020900 ; undefined
     480:	00610016 	.inst	0x00610016 ; undefined
     484:	03000000 	.inst	0x03000000 ; undefined
     488:	0c050128 	.inst	0x0c050128 ; undefined
     48c:	2e0a0531 	.inst	0x2e0a0531 ; undefined
     490:	05220205 	ext	z5.b, z5.b, z16.b, #16
     494:	01052209 	.inst	0x01052209 ; undefined
     498:	00020221 	.inst	0x00020221 ; undefined
     49c:	01050101 	.inst	0x01050101 ; undefined
     4a0:	44020900 	.inst	0x44020900 ; undefined
     4a4:	00610016 	.inst	0x00610016 ; undefined
     4a8:	03000000 	.inst	0x03000000 ; undefined
     4ac:	050100d1 	orr	z17.s, z17.s, #0x7f
     4b0:	054b2f02 	.inst	0x054b2f02 ; undefined
     4b4:	03022101 	.inst	0x03022101 ; undefined
     4b8:	05010100 	orr	z0.s, z0.s, #0x1ff
     4bc:	02090001 	.inst	0x02090001 ; undefined
	...
     4c8:	0100d703 	.inst	0x0100d703 ; undefined
     4cc:	052f0905 	ext	z5.b, z5.b, z8.b, #122
     4d0:	02022f01 	.inst	0x02022f01 ; undefined
     4d4:	05010100 	orr	z0.s, z0.s, #0x1ff
     4d8:	02090001 	.inst	0x02090001 ; undefined
     4dc:	6100166c 	.inst	0x6100166c ; undefined
     4e0:	00000000 	udf	#0
     4e4:	0100dc03 	.inst	0x0100dc03 ; undefined
     4e8:	4b2f0205 	sub	w5, w16, w15, uxtb
     4ec:	02210105 	.inst	0x02210105 ; undefined
     4f0:	01010003 	.inst	0x01010003 ; undefined
     4f4:	09000105 	.inst	0x09000105 ; undefined
     4f8:	00169402 	.inst	0x00169402 ; undefined
     4fc:	00000061 	udf	#97
     500:	00e70300 	.inst	0x00e70300 ; undefined
     504:	2f090501 	ushr	v1.8b, v8.8b, #7
     508:	022f0105 	.inst	0x022f0105 ; undefined
     50c:	01010002 	.inst	0x01010002 ; undefined
     510:	09000105 	.inst	0x09000105 ; undefined
     514:	0016ac02 	.inst	0x0016ac02 ; undefined
     518:	00000061 	udf	#97
     51c:	00ec0300 	.inst	0x00ec0300 ; undefined
     520:	2f020501 	mvni	v1.2s, #0x48
     524:	2101054b 	.inst	0x2101054b ; undefined
     528:	01000302 	.inst	0x01000302 ; undefined
     52c:	00010501 	.inst	0x00010501 ; undefined
     530:	16d40209 	b	fffffffffb500d54 <_sp+0xffffffff9a4c0d54>
     534:	00006100 	udf	#24832
     538:	f2030000 	ands	x0, x0, #0x2000000020000000
     53c:	02050100 	.inst	0x02050100 ; undefined
     540:	4b01052f 	sub	w15, w9, w1, lsl #1
     544:	01000302 	.inst	0x01000302 ; undefined
     548:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
     54c:	02090001 	.inst	0x02090001 ; undefined
     550:	61001534 	.inst	0x61001534 ; undefined
     554:	00000000 	udf	#0
     558:	05011803 	orr	z3.s, z3.s, #0x20000000
     55c:	01053d02 	.inst	0x01053d02 ; undefined
     560:	0003023d 	.inst	0x0003023d ; undefined
     564:	02040101 	.inst	0x02040101 ; undefined
     568:	09000105 	.inst	0x09000105 ; undefined
     56c:	0016f802 	.inst	0x0016f802 ; undefined
     570:	00000061 	udf	#97
     574:	011e0300 	.inst	0x011e0300 ; undefined
     578:	053d0205 	ext	z5.b, z5.b, z16.b, #232
     57c:	03023d01 	.inst	0x03023d01 ; undefined
     580:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     584:	00010502 	.inst	0x00010502 ; undefined
     588:	171c0209 	b	fffffffffc700dac <_sp+0xffffffff9b6c0dac>
     58c:	00006100 	udf	#24832
     590:	38030000 	sturb	w0, [x0, #48]
     594:	30020501 	adr	x1, 4635 <__stack_size+0x635>
     598:	053e0905 	ext	z5.b, z5.b, z8.b, #242
     59c:	02022101 	.inst	0x02022101 ; undefined
     5a0:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     5a4:	00010503 	.inst	0x00010503 ; undefined
     5a8:	173c0209 	b	fffffffffcf00dcc <_sp+0xffffffff9bec0dcc>
     5ac:	00006100 	udf	#24832
     5b0:	05180000 	mov	z0.b, p8/z, #0
     5b4:	01051302 	.inst	0x01051302 ; undefined
     5b8:	00020221 	.inst	0x00020221 ; undefined
     5bc:	04040101 	.inst	0x04040101 ; undefined
     5c0:	09000105 	.inst	0x09000105 ; undefined
     5c4:	00000002 	udf	#2
     5c8:	00000000 	udf	#0
     5cc:	01280300 	.inst	0x01280300 ; undefined
     5d0:	055c0505 	mov	z5.h, p12/z, #40
     5d4:	0402001c 	.inst	0x0402001c ; undefined
     5d8:	3d053c01 	str	b1, [x0, #335]
     5dc:	02040200 	.inst	0x02040200 ; undefined
     5e0:	4105053c 	.inst	0x4105053c ; undefined
     5e4:	4a0e053d 	eor	w29, w9, w14, lsl #1
     5e8:	052f0305 	ext	z5.b, z5.b, z24.b, #120
     5ec:	05053e23 	.inst	0x05053e23 ; undefined
     5f0:	3c32053c 	.inst	0x3c32053c ; undefined
     5f4:	79030305 	strh	w5, [x24, #384]
     5f8:	0301053c 	.inst	0x0301053c ; undefined
     5fc:	02022009 	.inst	0x02022009 ; undefined
     600:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     604:	00010504 	.inst	0x00010504 ; undefined
     608:	00000209 	udf	#521
     60c:	00000000 	udf	#0
     610:	3a030000 	adcs	w0, w0, w3
     614:	4b020501 	sub	w1, w8, w2, lsl #1
     618:	02590105 	.inst	0x02590105 ; undefined
     61c:	01010003 	.inst	0x01010003 ; undefined
     620:	01050404 	.inst	0x01050404 ; undefined
     624:	00020900 	.inst	0x00020900 ; undefined
     628:	00000000 	udf	#0
     62c:	03000000 	.inst	0x03000000 ; undefined
     630:	0205013f 	.inst	0x0205013f ; undefined
     634:	5901054b 	.inst	0x5901054b ; undefined
     638:	01000302 	.inst	0x01000302 ; undefined
     63c:	05040401 	.inst	0x05040401 ; undefined
     640:	02090001 	.inst	0x02090001 ; undefined
     644:	61001748 	.inst	0x61001748 ; undefined
     648:	00000000 	udf	#0
     64c:	0100c503 	.inst	0x0100c503 ; undefined
     650:	3e3d0805 	.inst	0x3e3d0805 ; undefined
     654:	3d060521 	str	b1, [x9, #385]
     658:	21400305 	.inst	0x21400305 ; undefined
     65c:	79030905 	strh	w5, [x8, #388]
     660:	da04052e 	.inst	0xda04052e ; undefined
     664:	02250105 	.inst	0x02250105 ; undefined
     668:	01010002 	.inst	0x01010002 ; undefined
     66c:	01050404 	.inst	0x01050404 ; undefined
     670:	cc020900 	.inst	0xcc020900 ; undefined
     674:	00610017 	.inst	0x00610017 ; undefined
     678:	03000000 	.inst	0x03000000 ; undefined
     67c:	050100d4 	orr	z20.s, z20.s, #0x7f
     680:	01052f02 	.inst	0x01052f02 ; undefined
     684:	0003022f 	.inst	0x0003022f ; undefined
     688:	04040101 	.inst	0x04040101 ; undefined
     68c:	09000105 	.inst	0x09000105 ; undefined
     690:	0017e802 	.inst	0x0017e802 ; undefined
     694:	00000061 	udf	#97
     698:	00d90300 	.inst	0x00d90300 ; undefined
     69c:	2f020501 	mvni	v1.2s, #0x48
     6a0:	022f0105 	.inst	0x022f0105 ; undefined
     6a4:	01010003 	.inst	0x01010003 ; undefined
     6a8:	01050404 	.inst	0x01050404 ; undefined
     6ac:	04020900 	.inst	0x04020900 ; undefined
     6b0:	00610018 	.inst	0x00610018 ; undefined
     6b4:	03000000 	.inst	0x03000000 ; undefined
     6b8:	050100de 	orr	z30.s, z30.s, #0x7f
     6bc:	09053006 	.inst	0x09053006 ; undefined
     6c0:	2101055d 	.inst	0x2101055d ; undefined
     6c4:	01000202 	.inst	0x01000202 ; undefined
     6c8:	05040401 	.inst	0x05040401 ; undefined
     6cc:	02090001 	.inst	0x02090001 ; undefined
     6d0:	6100182c 	.inst	0x6100182c ; undefined
     6d4:	00000000 	udf	#0
     6d8:	0100e903 	.inst	0x0100e903 ; undefined
     6dc:	3d430205 	ldr	b5, [x16, #192]
     6e0:	05220f05 	ext	z5.b, z5.b, z24.b, #19
     6e4:	1205580d 	and	w13, w0, #0xf803ffff
     6e8:	3d0d0521 	str	b1, [x9, #833]
     6ec:	053c0b05 	ext	z5.b, z5.b, z24.b, #226
     6f0:	02055109 	.inst	0x02055109 ; undefined
     6f4:	0003052e 	.inst	0x0003052e ; undefined
     6f8:	21030402 	.inst	0x21030402 ; undefined
     6fc:	02001f05 	.inst	0x02001f05 ; undefined
     700:	058f0304 	.inst	0x058f0304 ; undefined
     704:	04020011 	.inst	0x04020011 ; undefined
     708:	09053c01 	.inst	0x09053c01 ; undefined
     70c:	2e020550 	.inst	0x2e020550 ; undefined
     710:	02000305 	.inst	0x02000305 ; undefined
     714:	05210304 	ext	z4.b, z4.b, z24.b, #8
     718:	0402001f 	.inst	0x0402001f ; undefined
     71c:	11058103 	add	w3, w8, #0x160
     720:	01040200 	.inst	0x01040200 ; undefined
     724:	5109053c 	sub	w28, w9, #0x241
     728:	052e0205 	ext	z5.b, z5.b, z16.b, #112
     72c:	04020003 	.inst	0x04020003 ; undefined
     730:	02002103 	.inst	0x02002103 ; undefined
     734:	05910304 	mov	z4.s, p1/z, #24
     738:	0402001f 	.inst	0x0402001f ; undefined
     73c:	11058e03 	add	w3, w16, #0x163
     740:	01040200 	.inst	0x01040200 ; undefined
     744:	4e02053c 	dup	v28.8h, v9.h[0]
     748:	05220505 	ext	z5.b, z5.b, z8.b, #17
     74c:	03053f0a 	.inst	0x03053f0a ; undefined
     750:	0004052e 	.inst	0x0004052e ; undefined
     754:	21030402 	.inst	0x21030402 ; undefined
     758:	03040200 	.inst	0x03040200 ; undefined
     75c:	00200591 	.inst	0x00200591 ; NYI
     760:	8e030402 	.inst	0x8e030402 ; undefined
     764:	02001205 	.inst	0x02001205 ; undefined
     768:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     76c:	0a055c0c 	and	w12, w0, w5, lsl #23
     770:	2e03053f 	.inst	0x2e03053f ; undefined
     774:	02000405 	.inst	0x02000405 ; undefined
     778:	00210304 	.inst	0x00210304 ; NYI
     77c:	91030402 	add	x2, x0, #0xc1
     780:	02002005 	.inst	0x02002005 ; undefined
     784:	058e0304 	.inst	0x058e0304 ; undefined
     788:	04020012 	.inst	0x04020012 ; undefined
     78c:	0a053c01 	and	w1, w0, w5, lsl #15
     790:	2e03055d 	.inst	0x2e03055d ; undefined
     794:	02000405 	.inst	0x02000405 ; undefined
     798:	00210304 	.inst	0x00210304 ; NYI
     79c:	91030402 	add	x2, x0, #0xc1
     7a0:	02002005 	.inst	0x02002005 ; undefined
     7a4:	058e0304 	.inst	0x058e0304 ; undefined
     7a8:	04020012 	.inst	0x04020012 ; undefined
     7ac:	02053c01 	.inst	0x02053c01 ; undefined
     7b0:	0d053d50 	.inst	0x0d053d50 ; undefined
     7b4:	3d090524 	str	b4, [x9, #577]
     7b8:	052e0205 	ext	z5.b, z5.b, z16.b, #112
     7bc:	04020003 	.inst	0x04020003 ; undefined
     7c0:	1e052103 	.inst	0x1e052103 ; undefined
     7c4:	03040200 	.inst	0x03040200 ; undefined
     7c8:	0011058f 	.inst	0x0011058f ; undefined
     7cc:	3c010402 	str	b2, [x0], #16
     7d0:	054d0205 	.inst	0x054d0205 ; undefined
     7d4:	03022101 	.inst	0x03022101 ; undefined
     7d8:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     7dc:	00010504 	.inst	0x00010504 ; undefined
     7e0:	1b780209 	.inst	0x1b780209 ; undefined
     7e4:	00006100 	udf	#24832
     7e8:	b1030000 	adds	x0, x0, #0xc0
     7ec:	06050101 	.inst	0x06050101 ; undefined
     7f0:	3f08053d 	.inst	0x3f08053d ; undefined
     7f4:	05580605 	mov	z5.h, p8/z, #48
     7f8:	07052105 	.inst	0x07052105 ; undefined
     7fc:	02054c3e 	.inst	0x02054c3e ; undefined
     800:	4c06053d 	.inst	0x4c06053d ; undefined
     804:	053c0505 	ext	z5.b, z5.b, z8.b, #225
     808:	07052f09 	.inst	0x07052f09 ; undefined
     80c:	210d0558 	.inst	0x210d0558 ; undefined
     810:	052e0605 	ext	z5.b, z5.b, z16.b, #113
     814:	09053208 	.inst	0x09053208 ; undefined
     818:	58070521 	ldr	x1, e8bc <__stack_size+0xa8bc>
     81c:	201b0521 	.inst	0x201b0521 ; undefined
     820:	052e1005 	ext	z5.b, z5.b, z0.b, #116
     824:	03053c06 	.inst	0x03053c06 ; undefined
     828:	09052130 	.inst	0x09052130 ; undefined
     82c:	71040529 	subs	w9, w9, #0x101
     830:	27010534 	.inst	0x27010534 ; undefined
     834:	01000202 	.inst	0x01000202 ; undefined
     838:	05040401 	.inst	0x05040401 ; undefined
     83c:	02090001 	.inst	0x02090001 ; undefined
     840:	61001c94 	.inst	0x61001c94 ; undefined
     844:	00000000 	udf	#0
     848:	0101d003 	.inst	0x0101d003 ; undefined
     84c:	053e0605 	ext	z5.b, z5.b, z16.b, #241
     850:	05052f02 	.inst	0x05052f02 ; undefined
     854:	3e030530 	.inst	0x3e030530 ; undefined
     858:	590c054b 	.inst	0x590c054b ; undefined
     85c:	4b3e0305 	sub	w5, w24, w30, uxtb
     860:	02054b5b 	.inst	0x02054b5b ; undefined
     864:	09054b51 	.inst	0x09054b51 ; undefined
     868:	2002054f 	.inst	0x2002054f ; undefined
     86c:	02000305 	.inst	0x02000305 ; undefined
     870:	05210304 	ext	z4.b, z4.b, z24.b, #8
     874:	04020017 	.inst	0x04020017 ; undefined
     878:	10059d03 	adr	x3, bc18 <__stack_size+0x7c18>
     87c:	01040200 	.inst	0x01040200 ; undefined
     880:	4002053c 	.inst	0x4002053c ; undefined
     884:	01054c4c 	.inst	0x01054c4c ; undefined
     888:	00030221 	.inst	0x00030221 ; undefined
     88c:	04040101 	.inst	0x04040101 ; undefined
     890:	09000105 	.inst	0x09000105 ; undefined
     894:	001dc802 	.inst	0x001dc802 ; undefined
     898:	00000061 	udf	#97
     89c:	01fa0300 	.inst	0x01fa0300 ; undefined
     8a0:	30080501 	adr	x1, 10941 <__stack_size+0xc941>
     8a4:	052f0a05 	ext	z5.b, z5.b, z16.b, #122
     8a8:	0a052e05 	and	w5, w16, w5, lsl #11
     8ac:	3006052f 	adr	x15, c951 <__stack_size+0x8951>
     8b0:	053d0205 	ext	z5.b, z5.b, z16.b, #232
     8b4:	10052f08 	adr	x8, ae94 <__stack_size+0x6e94>
     8b8:	2e090530 	.inst	0x2e090530 ; undefined
     8bc:	023d0105 	.inst	0x023d0105 ; undefined
     8c0:	01010002 	.inst	0x01010002 ; undefined
     8c4:	01050404 	.inst	0x01050404 ; undefined
     8c8:	00020900 	.inst	0x00020900 ; undefined
     8cc:	00000000 	udf	#0
     8d0:	03000000 	.inst	0x03000000 ; undefined
     8d4:	05010288 	orr	z8.s, z8.s, #0x1fffff
     8d8:	0a05310c 	and	w12, w8, w5, lsl #12
     8dc:	09053d2f 	.inst	0x09053d2f ; undefined
     8e0:	01053e3d 	.inst	0x01053e3d ; undefined
     8e4:	00020221 	.inst	0x00020221 ; undefined
     8e8:	04040101 	.inst	0x04040101 ; undefined
     8ec:	09000105 	.inst	0x09000105 ; undefined
     8f0:	001e2802 	.inst	0x001e2802 ; undefined
     8f4:	00000061 	udf	#97
     8f8:	02940300 	.inst	0x02940300 ; undefined
     8fc:	32020501 	orr	w1, w8, #0xc0000000
     900:	2230304c 	.inst	0x2230304c ; undefined
     904:	02300105 	.inst	0x02300105 ; undefined
     908:	01010003 	.inst	0x01010003 ; undefined
     90c:	01050404 	.inst	0x01050404 ; undefined
     910:	68020900 	.inst	0x68020900 ; undefined
     914:	0061001e 	.inst	0x0061001e ; undefined
     918:	03000000 	.inst	0x03000000 ; undefined
     91c:	050102a5 	orr	z5.s, z5.s, #0x3fffff
     920:	4c4c3002 	.inst	0x4c4c3002 ; undefined
     924:	023e0105 	.inst	0x023e0105 ; undefined
     928:	01010003 	.inst	0x01010003 ; undefined
     92c:	01050404 	.inst	0x01050404 ; undefined
     930:	a8020900 	stnp	x0, x2, [x8, #32]
     934:	0061001e 	.inst	0x0061001e ; undefined
     938:	03000000 	.inst	0x03000000 ; undefined
     93c:	050102af 	orr	z15.s, z15.s, #0x3fffff
     940:	06053307 	.inst	0x06053307 ; undefined
     944:	2e05052e 	.inst	0x2e05052e ; undefined
     948:	3d2f0305 	str	b5, [x24, #3008]
     94c:	2701053d 	.inst	0x2701053d ; undefined
     950:	3d1b0305 	str	b5, [x24, #1728]
     954:	02240105 	.inst	0x02240105 ; undefined
     958:	01010003 	.inst	0x01010003 ; undefined
     95c:	01050404 	.inst	0x01050404 ; undefined
     960:	04020900 	.inst	0x04020900 ; undefined
     964:	0061001f 	.inst	0x0061001f ; undefined
     968:	03000000 	.inst	0x03000000 ; undefined
     96c:	050102c1 	orr	z1.s, z1.s, #0x7fffff
     970:	302f2f05 	adr	x5, 5ef51 <__stack_size+0x5af51>
     974:	02230105 	.inst	0x02230105 ; undefined
     978:	01010003 	.inst	0x01010003 ; undefined
     97c:	01050404 	.inst	0x01050404 ; undefined
     980:	00020900 	.inst	0x00020900 ; undefined
     984:	00000000 	udf	#0
     988:	03000000 	.inst	0x03000000 ; undefined
     98c:	050102cc 	orr	z12.s, z12.s, #0x7fffff
     990:	06054b0f 	.inst	0x06054b0f ; undefined
     994:	2128054a 	.inst	0x2128054a ; undefined
     998:	05582e05 	mov	z5.h, p8/z, #28672
     99c:	02052e11 	.inst	0x02052e11 ; undefined
     9a0:	3d01053d 	str	b29, [x9, #65]
     9a4:	01000302 	.inst	0x01000302 ; undefined
     9a8:	05040401 	.inst	0x05040401 ; undefined
     9ac:	02090001 	.inst	0x02090001 ; undefined
	...
     9b8:	0102d803 	.inst	0x0102d803 ; undefined
     9bc:	053e0505 	ext	z5.b, z5.b, z8.b, #241
     9c0:	054c3d08 	.inst	0x054c3d08 ; undefined
     9c4:	01053e02 	.inst	0x01053e02 ; undefined
     9c8:	0003023d 	.inst	0x0003023d ; undefined
     9cc:	04040101 	.inst	0x04040101 ; undefined
     9d0:	09000105 	.inst	0x09000105 ; undefined
     9d4:	00000002 	udf	#2
     9d8:	00000000 	udf	#0
     9dc:	02e80300 	.inst	0x02e80300 ; undefined
     9e0:	3f050501 	.inst	0x3f050501 ; undefined
     9e4:	4c3d0805 	.inst	0x4c3d0805 ; undefined
     9e8:	053e0205 	ext	z5.b, z5.b, z16.b, #240
     9ec:	03023d01 	.inst	0x03023d01 ; undefined
     9f0:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     9f4:	00010504 	.inst	0x00010504 ; undefined
     9f8:	1f2c0209 	fnmadd	s9, s16, s12, s0
     9fc:	00006100 	udf	#24832
     a00:	f8030000 	stur	x0, [x0, #48]
     a04:	07050102 	.inst	0x07050102 ; undefined
     a08:	2e060532 	.inst	0x2e060532 ; undefined
     a0c:	052e0505 	ext	z5.b, z5.b, z8.b, #113
     a10:	0a05300c 	and	w12, w0, w5, lsl #12
     a14:	3f0c0558 	.inst	0x3f0c0558 ; undefined
     a18:	05200a05 	ext	z5.b, z5.b, z16.b, #2
     a1c:	0a053305 	and	w5, w24, w5, lsl #12
     a20:	6839053d 	.inst	0x6839053d ; undefined
     a24:	052e0a05 	ext	z5.b, z5.b, z16.b, #114
     a28:	03055b05 	.inst	0x03055b05 ; undefined
     a2c:	3207053f 	orr	wsp, w9, #0x6000000
     a30:	052e0605 	ext	z5.b, z5.b, z16.b, #113
     a34:	03052e05 	.inst	0x03052e05 ; undefined
     a38:	4e01052f 	dup	v15.16b, v9.b[0]
     a3c:	051e0305 	mov	z5.b, p14/z, #24
     a40:	03023001 	.inst	0x03023001 ; undefined
     a44:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     a48:	00010504 	.inst	0x00010504 ; undefined
     a4c:	200c0209 	.inst	0x200c0209 ; undefined
     a50:	00006100 	udf	#24832
     a54:	9b030000 	madd	x0, x0, x3, x0
     a58:	07050103 	.inst	0x07050103 ; undefined
     a5c:	2e060532 	.inst	0x2e060532 ; undefined
     a60:	052e0505 	ext	z5.b, z5.b, z8.b, #113
     a64:	0a05300c 	and	w12, w0, w5, lsl #12
     a68:	3f0c0558 	.inst	0x3f0c0558 ; undefined
     a6c:	05200a05 	ext	z5.b, z5.b, z16.b, #2
     a70:	03023001 	.inst	0x03023001 ; undefined
     a74:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     a78:	00010504 	.inst	0x00010504 ; undefined
     a7c:	20640209 	.inst	0x20640209 ; undefined
     a80:	00006100 	udf	#24832
     a84:	ad030000 	stp	q0, q0, [x0, #96]
     a88:	0b050103 	add	w3, w8, w5
     a8c:	31050532 	adds	w18, w9, #0x141
     a90:	053d0a05 	ext	z5.b, z5.b, z16.b, #234
     a94:	0a05683a 	and	w26, w1, w5, lsl #26
     a98:	5a05052e 	.inst	0x5a05052e ; undefined
     a9c:	053f0305 	ext	z5.b, z5.b, z24.b, #248
     aa0:	06053207 	.inst	0x06053207 ; undefined
     aa4:	2e05052e 	.inst	0x2e05052e ; undefined
     aa8:	052f0305 	ext	z5.b, z5.b, z24.b, #120
     aac:	03054e01 	.inst	0x03054e01 ; undefined
     ab0:	3001051e 	adr	x30, 2b51 <__stack_size-0x14af>
     ab4:	01000302 	.inst	0x01000302 ; undefined
     ab8:	05040401 	.inst	0x05040401 ; undefined
     abc:	02090001 	.inst	0x02090001 ; undefined
	...
     ac8:	0103c903 	.inst	0x0103c903 ; undefined
     acc:	05130205 	mov	z5.b, p3/z, #16
     ad0:	02022501 	.inst	0x02022501 ; undefined
     ad4:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     ad8:	00010504 	.inst	0x00010504 ; undefined
     adc:	00000209 	udf	#521
     ae0:	00000000 	udf	#0
     ae4:	d2030000 	eor	x0, x0, #0x2000000020000000
     ae8:	02050103 	.inst	0x02050103 ; undefined
     aec:	25010513 	cmpgt	p3.b, p1/z, z8.b, #1
     af0:	01000202 	.inst	0x01000202 ; undefined
     af4:	05040401 	.inst	0x05040401 ; undefined
     af8:	02090001 	.inst	0x02090001 ; undefined
	...
     b04:	0103de03 	.inst	0x0103de03 ; undefined
     b08:	054e0505 	.inst	0x054e0505 ; undefined
     b0c:	05053e0a 	.inst	0x05053e0a ; undefined
     b10:	3d080531 	str	b17, [x9, #513]
     b14:	06053e4c 	.inst	0x06053e4c ; undefined
     b18:	222c0582 	.inst	0x222c0582 ; undefined
     b1c:	053c1805 	ext	z5.b, z5.b, z0.b, #230
     b20:	54052e0c 	b.gt	b0e0 <__stack_size+0x70e0>
     b24:	3c40053c 	ldr	b28, [x9], #0
     b28:	052e0605 	ext	z5.b, z5.b, z16.b, #113
     b2c:	09053002 	.inst	0x09053002 ; undefined
     b30:	21010584 	.inst	0x21010584 ; undefined
     b34:	01000202 	.inst	0x01000202 ; undefined
     b38:	05040401 	.inst	0x05040401 ; undefined
     b3c:	02090001 	.inst	0x02090001 ; undefined
	...
     b48:	0103fa03 	.inst	0x0103fa03 ; undefined
     b4c:	054c0505 	.inst	0x054c0505 ; undefined
     b50:	07053d15 	.inst	0x07053d15 ; undefined
     b54:	21150558 	.inst	0x21150558 ; undefined
     b58:	05580705 	mov	z5.h, p8/z, #56
     b5c:	06052203 	.inst	0x06052203 ; undefined
     b60:	3d190530 	str	b16, [x9, #1601]
     b64:	054a1005 	.inst	0x054a1005 ; undefined
     b68:	14053d1b 	b	14ffd4 <__stack_size+0x14bfd4>
     b6c:	2e10053c 	.inst	0x2e10053c ; undefined
     b70:	054b0d05 	.inst	0x054b0d05 ; undefined
     b74:	14053d1b 	b	14ffe0 <__stack_size+0x14bfe0>
     b78:	2e10053c 	.inst	0x2e10053c ; undefined
     b7c:	053d1905 	ext	z5.b, z5.b, z8.b, #238
     b80:	0c054a10 	.inst	0x0c054a10 ; undefined
     b84:	3d1b054b 	str	b11, [x10, #1729]
     b88:	053c1405 	ext	z5.b, z5.b, z0.b, #229
     b8c:	19052e10 	.inst	0x19052e10 ; undefined
     b90:	4a10053d 	eor	w29, w9, w16, lsl #1
     b94:	4b3f0305 	sub	w5, w24, wzr, uxtb
     b98:	3016054c 	adr	x12, 2cc41 <__stack_size+0x28c41>
     b9c:	05ba0705 	zip2	z5.q, z24.q, z26.q
     ba0:	07052116 	.inst	0x07052116 ; undefined
     ba4:	220305ba 	.inst	0x220305ba ; undefined
     ba8:	2206053d 	.inst	0x2206053d ; undefined
     bac:	053d1a05 	ext	z5.b, z5.b, z16.b, #238
     bb0:	1c054a11 	ldr	s17, b4f0 <__stack_size+0x74f0>
     bb4:	3c15053d 	str	b29, [x9], #-176
     bb8:	052e1105 	ext	z5.b, z5.b, z8.b, #116
     bbc:	1c054b0d 	ldr	s13, b51c <__stack_size+0x751c>
     bc0:	3c15053d 	str	b29, [x9], #-176
     bc4:	052e1105 	ext	z5.b, z5.b, z8.b, #116
     bc8:	11053d1a 	add	w26, w8, #0x14f
     bcc:	4b0c054a 	sub	w10, w10, w12, lsl #1
     bd0:	053d1c05 	ext	z5.b, z5.b, z0.b, #239
     bd4:	11053c15 	add	w21, w0, #0x14f
     bd8:	3d1a052e 	str	b14, [x9, #1665]
     bdc:	054a1105 	.inst	0x054a1105 ; undefined
     be0:	bcbb3f03 	.inst	0xbcbb3f03 ; undefined
     be4:	02220105 	.inst	0x02220105 ; undefined
     be8:	01010003 	.inst	0x01010003 ; undefined
     bec:	0000009b 	udf	#155
     bf0:	00760004 	.inst	0x00760004 ; undefined
     bf4:	01040000 	.inst	0x01040000 ; undefined
     bf8:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     bfc:	01010100 	.inst	0x01010100 ; undefined
     c00:	00000001 	udf	#1
     c04:	01000001 	.inst	0x01000001 ; undefined
     c08:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     c0c:	6f532f2e 	.inst	0x6f532f2e ; undefined
     c10:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     c14:	70616f6d 	adr	x13, c3a03 <__stack_size+0xbfa03>
     c18:	6f432f75 	.inst	0x6f432f75 ; undefined
     c1c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     c20:	756f532f 	.inst	0x756f532f ; undefined
     c24:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     c28:	6362694c 	.inst	0x6362694c ; undefined
     c2c:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     c30:	532f2e2e 	.inst	0x532f2e2e ; undefined
     c34:	642f436f 	.inst	0x642f436f ; undefined
     c38:	616f6d65 	.inst	0x616f6d65 ; undefined
     c3c:	432f7570 	.inst	0x432f7570 ; undefined
     c40:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     c44:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
     c48:	64756c63 	.inst	0x64756c63 ; undefined
     c4c:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
     c50:	00006362 	udf	#25442
     c54:	65737361 	fnmls	z1.h, p4/m, z27.h, z19.h
     c58:	632e7472 	.inst	0x632e7472 ; undefined
     c5c:	00000100 	udf	#256
     c60:	69647473 	ldpsw	x19, x29, [x3, #-224]
     c64:	00682e6f 	.inst	0x00682e6f ; undefined
     c68:	00000002 	udf	#2
     c6c:	09000105 	.inst	0x09000105 ; undefined
     c70:	00210802 	.inst	0x00210802 ; NYI
     c74:	00000061 	udf	#97
     c78:	010c0300 	.inst	0x010c0300 ; undefined
     c7c:	05590205 	mov	z5.h, p9/z, #16
     c80:	04020008 	.inst	0x04020008 ; undefined
     c84:	01026701 	.inst	0x01026701 ; undefined
     c88:	b8010100 	stur	w0, [x8, #16]
     c8c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     c90:	00008000 	udf	#32768
     c94:	01010400 	.inst	0x01010400 ; undefined
     c98:	000d0efb 	.inst	0x000d0efb ; undefined
     c9c:	01010101 	.inst	0x01010101 ; undefined
     ca0:	01000000 	.inst	0x01000000 ; undefined
     ca4:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
     ca8:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     cac:	436f532f 	.inst	0x436f532f ; undefined
     cb0:	6d65642f 	ldp	d15, d25, [x1, #-432]
     cb4:	7570616f 	.inst	0x7570616f ; undefined
     cb8:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     cbc:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     cc0:	72756f53 	.inst	0x72756f53 ; undefined
     cc4:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     cc8:	00636269 	.inst	0x00636269 ; undefined
     ccc:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     cd0:	6f532f2e 	.inst	0x6f532f2e ; undefined
     cd4:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     cd8:	70616f6d 	adr	x13, c3ac7 <__stack_size+0xbfac7>
     cdc:	6f432f75 	.inst	0x6f432f75 ; undefined
     ce0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     ce4:	636e492f 	.inst	0x636e492f ; undefined
     ce8:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
     cec:	62696c2f 	.inst	0x62696c2f ; undefined
     cf0:	61612f63 	.inst	0x61612f63 ; undefined
     cf4:	36686372 	tbz	w18, #13, 1960 <__stack_size-0x26a0>
     cf8:	6d000034 	stp	d20, d0, [x1]
     cfc:	70636d65 	adr	x5, c7aab <__stack_size+0xc3aab>
     d00:	00632e79 	.inst	0x00632e79 ; undefined
     d04:	73000001 	.inst	0x73000001 ; undefined
     d08:	65646474 	fnmls	z20.h, p1/m, z3.h, z4.h
     d0c:	682e5f66 	.inst	0x682e5f66 ; undefined
     d10:	00000200 	udf	#512
     d14:	00010500 	.inst	0x00010500 ; undefined
     d18:	21380209 	.inst	0x21380209 ; undefined
     d1c:	00006100 	udf	#24832
     d20:	0a030000 	and	w0, w0, w3
     d24:	4b0e0501 	sub	w1, w8, w14, lsl #1
     d28:	302f0805 	adr	x5, 5ee29 <__stack_size+0x5ae29>
     d2c:	05210c05 	ext	z5.b, z5.b, z0.b, #11
     d30:	0a053c05 	and	w5, w0, w5, lsl #15
     d34:	2008053c 	.inst	0x2008053c ; undefined
     d38:	051f0c05 	mov	z5.b, p15/z, #96
     d3c:	05313c09 	.inst	0x05313c09 ; undefined
     d40:	02022101 	.inst	0x02022101 ; undefined
     d44:	4e010100 	tbl	v0.16b, {v8.16b}, v1.16b
     d48:	04000001 	add	z1.b, p0/m, z1.b, z0.b
     d4c:	0000bf00 	udf	#48896
     d50:	01010400 	.inst	0x01010400 ; undefined
     d54:	000d0efb 	.inst	0x000d0efb ; undefined
     d58:	01010101 	.inst	0x01010101 ; undefined
     d5c:	01000000 	.inst	0x01000000 ; undefined
     d60:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
     d64:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     d68:	436f532f 	.inst	0x436f532f ; undefined
     d6c:	6d65642f 	ldp	d15, d25, [x1, #-432]
     d70:	7570616f 	.inst	0x7570616f ; undefined
     d74:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     d78:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     d7c:	72756f53 	.inst	0x72756f53 ; undefined
     d80:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     d84:	00636269 	.inst	0x00636269 ; undefined
     d88:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     d8c:	6f532f2e 	.inst	0x6f532f2e ; undefined
     d90:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     d94:	70616f6d 	adr	x13, c3b83 <__stack_size+0xbfb83>
     d98:	6f432f75 	.inst	0x6f432f75 ; undefined
     d9c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     da0:	636e492f 	.inst	0x636e492f ; undefined
     da4:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
     da8:	62696c2f 	.inst	0x62696c2f ; undefined
     dac:	61612f63 	.inst	0x61612f63 ; undefined
     db0:	36686372 	tbz	w18, #13, 1a1c <__stack_size-0x25e4>
     db4:	2e2e0034 	uaddl	v20.8h, v1.8b, v14.8b
     db8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     dbc:	2f436f53 	.inst	0x2f436f53 ; undefined
     dc0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     dc4:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     dc8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     dcc:	492f6e6f 	.inst	0x492f6e6f ; undefined
     dd0:	756c636e 	.inst	0x756c636e ; undefined
     dd4:	6c2f6564 	stnp	d4, d25, [x11, #-272]
     dd8:	00636269 	.inst	0x00636269 ; undefined
     ddc:	6d656d00 	ldp	d0, d27, [x8, #-432]
     de0:	2e746573 	umax	v19.4h, v11.4h, v20.4h
     de4:	00010063 	.inst	0x00010063 ; undefined
     de8:	64747300 	.inst	0x64747300 ; undefined
     dec:	5f666564 	.inst	0x5f666564 ; undefined
     df0:	0200682e 	.inst	0x0200682e ; undefined
     df4:	74730000 	.inst	0x74730000 ; undefined
     df8:	746e6964 	.inst	0x746e6964 ; undefined
     dfc:	00682e5f 	.inst	0x00682e5f ; undefined
     e00:	73000002 	.inst	0x73000002 ; undefined
     e04:	6e696474 	umax	v20.8h, v3.8h, v9.8h
     e08:	00682e74 	.inst	0x00682e74 ; undefined
     e0c:	00000003 	udf	#3
     e10:	09000105 	.inst	0x09000105 ; undefined
     e14:	00219c02 	.inst	0x00219c02 ; NYI
     e18:	00000061 	udf	#97
     e1c:	010b0300 	.inst	0x010b0300 ; undefined
     e20:	054b0b05 	.inst	0x054b0b05 ; undefined
     e24:	0b053012 	add	w18, w0, w5, lsl #12
     e28:	3105052e 	adds	w14, w9, #0x141
     e2c:	333d0a05 	.inst	0x333d0a05 ; undefined
     e30:	052e0805 	ext	z5.b, z5.b, z0.b, #114
     e34:	053d2f06 	tbx	z6.b, z24.b, z29.b
     e38:	0a05670b 	and	w11, w24, w5, lsl #25
     e3c:	2019052a 	.inst	0x2019052a ; undefined
     e40:	05201f05 	ext	z5.b, z5.b, z24.b, #7
     e44:	2e09030f 	ext	v15.8b, v24.8b, v9.8b, #0
     e48:	052e0705 	ext	z5.b, z5.b, z24.b, #113
     e4c:	07053d0f 	.inst	0x07053d0f ; undefined
     e50:	3d0f052e 	str	b14, [x9, #961]
     e54:	052e0705 	ext	z5.b, z5.b, z24.b, #113
     e58:	02053f08 	.inst	0x02053f08 ; undefined
     e5c:	000a052f 	.inst	0x000a052f ; undefined
     e60:	21020402 	.inst	0x21020402 ; undefined
     e64:	02000805 	.inst	0x02000805 ; undefined
     e68:	053d0204 	ext	z4.b, z4.b, z16.b, #232
     e6c:	0402001c 	.inst	0x0402001c ; undefined
     e70:	0f053a02 	.inst	0x0f053a02 ; undefined
     e74:	01040200 	.inst	0x01040200 ; undefined
     e78:	4206053c 	.inst	0x4206053c ; undefined
     e7c:	052f0805 	ext	z5.b, z5.b, z0.b, #122
     e80:	0805210a 	stxrb	w5, w10, [x8]
     e84:	2f06052e 	mvni	v14.2s, #0xc9
     e88:	053a0e05 	ext	z5.b, z5.b, z16.b, #211
     e8c:	09053c11 	.inst	0x09053c11 ; undefined
     e90:	21010533 	.inst	0x21010533 ; undefined
     e94:	01000202 	.inst	0x01000202 ; undefined
     e98:	0002c701 	.inst	0x0002c701 ; undefined
     e9c:	9c000400 	ldr	q0, f1c <__stack_size-0x30e4>
     ea0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     ea4:	0efb0101 	.inst	0x0efb0101 ; undefined
     ea8:	0101000d 	.inst	0x0101000d ; undefined
     eac:	00000101 	udf	#257
     eb0:	00000100 	udf	#256
     eb4:	2f2e2e01 	.inst	0x2f2e2e01 ; undefined
     eb8:	532f2e2e 	.inst	0x532f2e2e ; undefined
     ebc:	642f436f 	.inst	0x642f436f ; undefined
     ec0:	616f6d65 	.inst	0x616f6d65 ; undefined
     ec4:	432f7570 	.inst	0x432f7570 ; undefined
     ec8:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     ecc:	6f532f6e 	.inst	0x6f532f6e ; undefined
     ed0:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     ed4:	62694c2f 	.inst	0x62694c2f ; undefined
     ed8:	2e2e0063 	uaddl	v3.8h, v3.8b, v14.8b
     edc:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     ee0:	2f436f53 	.inst	0x2f436f53 ; undefined
     ee4:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     ee8:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     eec:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     ef0:	492f6e6f 	.inst	0x492f6e6f ; undefined
     ef4:	756c636e 	.inst	0x756c636e ; undefined
     ef8:	6c2f6564 	stnp	d4, d25, [x11, #-272]
     efc:	00636269 	.inst	0x00636269 ; undefined
     f00:	69727000 	ldpsw	x0, x28, [x0, #-112]
     f04:	2e66746e 	uabd	v14.4h, v3.4h, v6.4h
     f08:	00010063 	.inst	0x00010063 ; undefined
     f0c:	64747300 	.inst	0x64747300 ; undefined
     f10:	682e6f69 	.inst	0x682e6f69 ; undefined
     f14:	00000200 	udf	#512
     f18:	65737361 	fnmls	z1.h, p4/m, z27.h, z19.h
     f1c:	682e7472 	.inst	0x682e7472 ; undefined
     f20:	00000200 	udf	#512
     f24:	69647473 	ldpsw	x19, x29, [x3, #-224]
     f28:	682e746e 	.inst	0x682e746e ; undefined
     f2c:	00000200 	udf	#512
     f30:	6975623c 	ldpsw	x28, x24, [x17, #-88]
     f34:	692d746c 	stgp	x12, x29, [x3, #-608]
     f38:	00003e6e 	udf	#15982
     f3c:	05000000 	orr	z0.s, z0.s, #0x1
     f40:	02090001 	.inst	0x02090001 ; undefined
     f44:	610022e4 	.inst	0x610022e4 ; undefined
     f48:	00000000 	udf	#0
     f4c:	05011a03 	orr	z3.s, z3.s, #0xe0003fff
     f50:	02053d06 	.inst	0x02053d06 ; undefined
     f54:	04020022 	.inst	0x04020022 ; undefined
     f58:	053c0601 	ext	z1.b, z1.b, z16.b, #225
     f5c:	04020011 	.inst	0x04020011 ; undefined
     f60:	05690602 	ext	z2.b, {z16.b, z17.b}, #73
     f64:	04020009 	.inst	0x04020009 ; undefined
     f68:	08052e02 	stxrb	w5, w2, [x16]
     f6c:	02040200 	.inst	0x02040200 ; undefined
     f70:	001b0521 	.inst	0x001b0521 ; undefined
     f74:	3a020402 	.inst	0x3a020402 ; undefined
     f78:	02000a05 	.inst	0x02000a05 ; undefined
     f7c:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     f80:	0402000f 	.inst	0x0402000f ; undefined
     f84:	09052e01 	.inst	0x09052e01 ; undefined
     f88:	21010533 	.inst	0x21010533 ; undefined
     f8c:	01000202 	.inst	0x01000202 ; undefined
     f90:	00010501 	.inst	0x00010501 ; undefined
     f94:	23580209 	.inst	0x23580209 ; undefined
     f98:	00006100 	udf	#24832
     f9c:	29030000 	stp	w0, w0, [x0, #24]
     fa0:	69060501 	stgp	x1, x1, [x8, #192]
     fa4:	05200d05 	ext	z5.b, z5.b, z8.b, #3
     fa8:	0705240e 	.inst	0x0705240e ; undefined
     fac:	21060558 	.inst	0x21060558 ; undefined
     fb0:	053d1505 	ext	z5.b, z5.b, z8.b, #237
     fb4:	15054a0f 	b	41537f0 <__stack_size+0x414f7f0>
     fb8:	4a0f054c 	eor	w12, w10, w15, lsl #1
     fbc:	053d0405 	ext	z5.b, z5.b, z0.b, #233
     fc0:	10053d08 	adr	x8, b760 <__stack_size+0x7760>
     fc4:	3e05054b 	.inst	0x3e05054b ; undefined
     fc8:	053d0905 	ext	z5.b, z5.b, z8.b, #234
     fcc:	0905210a 	.inst	0x0905210a ; undefined
     fd0:	3d08052f 	str	b15, [x9, #513]
     fd4:	05390c05 	ext	z5.b, z5.b, z0.b, #203
     fd8:	18055108 	ldr	w8, b9f8 <__stack_size+0x79f8>
     fdc:	3c090521 	str	b1, [x9], #144
     fe0:	05210805 	ext	z5.b, z5.b, z0.b, #10
     fe4:	09053a0d 	.inst	0x09053a0d ; undefined
     fe8:	2101056b 	.inst	0x2101056b ; undefined
     fec:	01000202 	.inst	0x01000202 ; undefined
     ff0:	00010501 	.inst	0x00010501 ; undefined
     ff4:	24840209 	cmphs	p9.s, p0/z, z16.s, z4.s
     ff8:	00006100 	udf	#24832
     ffc:	de030000 	.inst	0xde030000 ; undefined
    1000:	07050100 	.inst	0x07050100 ; undefined
    1004:	2206055d 	.inst	0x2206055d ; undefined
    1008:	05220805 	ext	z5.b, z5.b, z0.b, #18
    100c:	0805210b 	stxrb	w5, w11, [x8]
    1010:	22070521 	.inst	0x22070521 ; undefined
    1014:	052e0605 	ext	z5.b, z5.b, z16.b, #113
    1018:	0c052f07 	.inst	0x0c052f07 ; undefined
    101c:	2e04053f 	.inst	0x2e04053f ; undefined
    1020:	25020b05 	cmpge	p5.b, p2/z, z24.b, #2
    1024:	2f050514 	mvni	v20.2s, #0xa8
    1028:	00230b05 	.inst	0x00230b05 ; NYI
    102c:	06020402 	.inst	0x06020402 ; undefined
    1030:	053c8208 	.inst	0x053c8208 ; undefined
    1034:	04020009 	.inst	0x04020009 ; undefined
    1038:	2c020608 	stnp	s8, s1, [x16, #16]
    103c:	00080512 	.inst	0x00080512 ; undefined
    1040:	21080402 	.inst	0x21080402 ; undefined
    1044:	053d0c05 	ext	z5.b, z5.b, z0.b, #235
    1048:	0b052f25 	add	w5, w25, w5, lsl #11
    104c:	210a052e 	.inst	0x210a052e ; undefined
    1050:	054c0b05 	.inst	0x054c0b05 ; undefined
    1054:	0b05300e 	add	w14, w0, w5, lsl #12
    1058:	3e050566 	.inst	0x3e050566 ; undefined
    105c:	05220905 	ext	z5.b, z5.b, z8.b, #18
    1060:	0559080e 	mov	z14.h, p9/z, #64
    1064:	05053c0b 	.inst	0x05053c0b ; undefined
    1068:	2217053d 	.inst	0x2217053d ; undefined
    106c:	4a080a05 	eor	w5, w16, w8, lsl #2
    1070:	05210805 	ext	z5.b, z5.b, z0.b, #10
    1074:	0c053d0f 	.inst	0x0c053d0f ; undefined
    1078:	3d0b054a 	str	b10, [x10, #705]
    107c:	053f0e05 	ext	z5.b, z5.b, z16.b, #251
    1080:	0505660b 	.inst	0x0505660b ; undefined
    1084:	220c053e 	.inst	0x220c053e ; undefined
    1088:	02040200 	.inst	0x02040200 ; undefined
    108c:	3c820806 	.inst	0x3c820806 ; undefined
    1090:	02000a05 	.inst	0x02000a05 ; undefined
    1094:	02060804 	.inst	0x02060804 ; undefined
    1098:	0e05122c 	tbx	v12.8b, {v17.16b}, v5.8b
    109c:	08040200 	stxrb	w4, w0, [x16]
    10a0:	000b0521 	.inst	0x000b0521 ; undefined
    10a4:	66080402 	.inst	0x66080402 ; undefined
    10a8:	02000505 	.inst	0x02000505 ; undefined
    10ac:	053e0804 	ext	z4.b, z4.b, z0.b, #242
    10b0:	0805230e 	stxrb	w5, w14, [x24]
    10b4:	3d050530 	str	b16, [x9, #321]
    10b8:	05220c05 	ext	z5.b, z5.b, z0.b, #19
    10bc:	05053d08 	.inst	0x05053d08 ; undefined
    10c0:	220c053d 	.inst	0x220c053d ; undefined
    10c4:	02040200 	.inst	0x02040200 ; undefined
    10c8:	3c820806 	.inst	0x3c820806 ; undefined
    10cc:	02000a05 	.inst	0x02000a05 ; undefined
    10d0:	02060804 	.inst	0x02060804 ; undefined
    10d4:	0e05122c 	tbx	v12.8b, {v17.16b}, v5.8b
    10d8:	08040200 	stxrb	w4, w0, [x16]
    10dc:	000b0521 	.inst	0x000b0521 ; undefined
    10e0:	66080402 	.inst	0x66080402 ; undefined
    10e4:	02000505 	.inst	0x02000505 ; undefined
    10e8:	053e0804 	ext	z4.b, z4.b, z0.b, #242
    10ec:	052f220a 	mov	z10.b, z16.b[7]
    10f0:	0b052108 	add	w8, w8, w5, lsl #8
    10f4:	3d09053f 	str	b31, [x9, #577]
    10f8:	02001505 	.inst	0x02001505 ; undefined
    10fc:	053c0104 	ext	z4.b, z4.b, z8.b, #224
    1100:	13053d07 	sbfx	w7, w8, #5, #11
    1104:	3c1f0522 	str	b2, [x9], #-16
    1108:	052e0b05 	ext	z5.b, z5.b, z24.b, #114
    110c:	0e052f09 	smov	w9, v24.b[2]
    1110:	053c7a03 	.inst	0x053c7a03 ; undefined
    1114:	200b030c 	.inst	0x200b030c ; undefined
    1118:	05300705 	ext	z5.b, z5.b, z24.b, #129
    111c:	11053d04 	add	w4, w8, #0x14f
    1120:	2e090522 	.inst	0x2e090522 ; undefined
    1124:	05210605 	ext	z5.b, z5.b, z16.b, #9
    1128:	09053d08 	.inst	0x09053d08 ; undefined
    112c:	3c7fae03 	.inst	0x3c7fae03 ; undefined
    1130:	052e0e05 	ext	z5.b, z5.b, z16.b, #115
    1134:	00d50309 	.inst	0x00d50309 ; undefined
    1138:	2101052e 	.inst	0x2101052e ; undefined
    113c:	01000302 	.inst	0x01000302 ; undefined
    1140:	00010501 	.inst	0x00010501 ; undefined
    1144:	2bb00209 	.inst	0x2bb00209 ; undefined
    1148:	00006100 	udf	#24832
    114c:	c0030000 	.inst	0xc0030000 ; undefined
    1150:	02050101 	.inst	0x02050101 ; undefined
    1154:	0a052408 	and	w8, w0, w5, lsl #9
    1158:	cb09059f 	sub	xzr, x12, x9, lsl #1
    115c:	02210105 	.inst	0x02210105 ; undefined
    1160:	01010002 	.inst	0x01010002 ; undefined
    1164:	000000d4 	udf	#212
    1168:	00b30004 	.inst	0x00b30004 ; undefined
    116c:	01040000 	.inst	0x01040000 ; undefined
    1170:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    1174:	01010100 	.inst	0x01010100 ; undefined
    1178:	00000001 	udf	#1
    117c:	01000001 	.inst	0x01000001 ; undefined
    1180:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    1184:	6f532f2e 	.inst	0x6f532f2e ; undefined
    1188:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    118c:	70616f6d 	adr	x13, c3f7b <__stack_size+0xbff7b>
    1190:	6f432f75 	.inst	0x6f432f75 ; undefined
    1194:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    1198:	756f532f 	.inst	0x756f532f ; undefined
    119c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    11a0:	6362694c 	.inst	0x6362694c ; undefined
    11a4:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    11a8:	532f2e2e 	.inst	0x532f2e2e ; undefined
    11ac:	642f436f 	.inst	0x642f436f ; undefined
    11b0:	616f6d65 	.inst	0x616f6d65 ; undefined
    11b4:	432f7570 	.inst	0x432f7570 ; undefined
    11b8:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    11bc:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    11c0:	64756c63 	.inst	0x64756c63 ; undefined
    11c4:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
    11c8:	2e006362 	.inst	0x2e006362 ; undefined
    11cc:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    11d0:	436f532f 	.inst	0x436f532f ; undefined
    11d4:	6d65642f 	ldp	d15, d25, [x1, #-432]
    11d8:	636f736f 	.inst	0x636f736f ; undefined
    11dc:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    11e0:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    11e4:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    11e8:	00656475 	.inst	0x00656475 ; undefined
    11ec:	74757000 	.inst	0x74757000 ; undefined
    11f0:	72616863 	.inst	0x72616863 ; undefined
    11f4:	0100632e 	.inst	0x0100632e ; undefined
    11f8:	74730000 	.inst	0x74730000 ; undefined
    11fc:	746e6964 	.inst	0x746e6964 ; undefined
    1200:	0200682e 	.inst	0x0200682e ; undefined
    1204:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
    1208:	6f736f6d 	.inst	0x6f736f6d ; undefined
    120c:	00682e63 	.inst	0x00682e63 ; undefined
    1210:	41000003 	.inst	0x41000003 ; undefined
    1214:	61755f4c 	.inst	0x61755f4c ; undefined
    1218:	682e7472 	.inst	0x682e7472 ; undefined
    121c:	00000300 	udf	#768
    1220:	00010500 	.inst	0x00010500 ; undefined
    1224:	2c600209 	ldnp	s9, s0, [x16, #-256]
    1228:	00006100 	udf	#24832
    122c:	0a030000 	and	w0, w0, w3
    1230:	3d090501 	str	b1, [x8, #577]
    1234:	02590105 	.inst	0x02590105 ; undefined
    1238:	01010002 	.inst	0x01010002 ; undefined
    123c:	0000008a 	udf	#138
    1240:	00450004 	.inst	0x00450004 ; undefined
    1244:	01040000 	.inst	0x01040000 ; undefined
    1248:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    124c:	01010100 	.inst	0x01010100 ; undefined
    1250:	00000001 	udf	#1
    1254:	01000001 	.inst	0x01000001 ; undefined
    1258:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    125c:	6f532f2e 	.inst	0x6f532f2e ; undefined
    1260:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1264:	70616f6d 	adr	x13, c4053 <__stack_size+0xc0053>
    1268:	6f432f75 	.inst	0x6f432f75 ; undefined
    126c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    1270:	756f532f 	.inst	0x756f532f ; undefined
    1274:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    1278:	6362694c 	.inst	0x6362694c ; undefined
    127c:	74730000 	.inst	0x74730000 ; undefined
    1280:	706d6372 	adr	x18, dbeef <__stack_size+0xd7eef>
    1284:	0100632e 	.inst	0x0100632e ; undefined
    1288:	05000000 	orr	z0.s, z0.s, #0x1
    128c:	02090001 	.inst	0x02090001 ; undefined
    1290:	61002c88 	.inst	0x61002c88 ; undefined
    1294:	00000000 	udf	#0
    1298:	05012e03 	orr	z3.b, z3.b, #0x8
    129c:	0a053d08 	and	w8, w8, w5, lsl #15
    12a0:	3c070521 	str	b1, [x9], #112
    12a4:	05200605 	ext	z5.b, z5.b, z16.b, #1
    12a8:	09052f0b 	.inst	0x09052f0b ; undefined
    12ac:	2e13052c 	.inst	0x2e13052c ; undefined
    12b0:	053c1005 	ext	z5.b, z5.b, z0.b, #228
    12b4:	0a05200d 	and	w13, w0, w5, lsl #8
    12b8:	3c430531 	ldr	b17, [x9], #48
    12bc:	052e2705 	.inst	0x052e2705 ; undefined
    12c0:	01052025 	.inst	0x01052025 ; undefined
    12c4:	00020221 	.inst	0x00020221 ; undefined
    12c8:	01a80101 	.inst	0x01a80101 ; undefined
    12cc:	00040000 	.inst	0x00040000 ; undefined
    12d0:	000000a5 	udf	#165
    12d4:	fb010104 	.inst	0xfb010104 ; undefined
    12d8:	01000d0e 	.inst	0x01000d0e ; undefined
    12dc:	00010101 	.inst	0x00010101 ; undefined
    12e0:	00010000 	.inst	0x00010000 ; undefined
    12e4:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    12e8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    12ec:	2f436f53 	.inst	0x2f436f53 ; undefined
    12f0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    12f4:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    12f8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    12fc:	532f6e6f 	.inst	0x532f6e6f ; undefined
    1300:	6372756f 	.inst	0x6372756f ; undefined
    1304:	2e2e0065 	uaddl	v5.8h, v3.8b, v14.8b
    1308:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    130c:	2f436f53 	.inst	0x2f436f53 ; undefined
    1310:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    1314:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    1318:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    131c:	492f6e6f 	.inst	0x492f6e6f ; undefined
    1320:	756c636e 	.inst	0x756c636e ; undefined
    1324:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    1328:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
    132c:	63726161 	.inst	0x63726161 ; undefined
    1330:	00343668 	.inst	0x00343668 ; NYI
    1334:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    1338:	6f532f2e 	.inst	0x6f532f2e ; undefined
    133c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1340:	70616f6d 	adr	x13, c412f <__stack_size+0xc012f>
    1344:	6f432f75 	.inst	0x6f432f75 ; undefined
    1348:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    134c:	636e492f 	.inst	0x636e492f ; undefined
    1350:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    1354:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
    1358:	2e79616c 	rsubhn	v12.4h, v11.4s, v25.4s
    135c:	00010063 	.inst	0x00010063 ; undefined
    1360:	64747300 	.inst	0x64747300 ; undefined
    1364:	5f746e69 	.inst	0x5f746e69 ; undefined
    1368:	0200682e 	.inst	0x0200682e ; undefined
    136c:	79740000 	ldrh	w0, [x0, #6656]
    1370:	682e6570 	.inst	0x682e6570 ; undefined
    1374:	00000300 	udf	#768
    1378:	00010500 	.inst	0x00010500 ; undefined
    137c:	2cfc0209 	ldp	s9, s0, [x16], #-32
    1380:	00006100 	udf	#24832
    1384:	1a030000 	adc	w0, w0, w3
    1388:	30090501 	adr	x1, 13429 <__stack_size+0xf429>
    138c:	213c0705 	.inst	0x213c0705 ; undefined
    1390:	02000a05 	.inst	0x02000a05 ; undefined
    1394:	054c0104 	.inst	0x054c0104 ; undefined
    1398:	04020008 	.inst	0x04020008 ; undefined
    139c:	10053c01 	adr	x1, bb1c <__stack_size+0x7b1c>
    13a0:	01040200 	.inst	0x01040200 ; undefined
    13a4:	4b010521 	sub	w1, w9, w1, lsl #1
    13a8:	01000402 	.inst	0x01000402 ; undefined
    13ac:	00010501 	.inst	0x00010501 ; undefined
    13b0:	2d540209 	ldp	s9, s0, [x16, #160]
    13b4:	00006100 	udf	#24832
    13b8:	29030000 	stp	w0, w0, [x0, #24]
    13bc:	23020501 	.inst	0x23020501 ; undefined
    13c0:	05340905 	ext	z5.b, z5.b, z8.b, #162
    13c4:	02022101 	.inst	0x02022101 ; undefined
    13c8:	05010100 	orr	z0.s, z0.s, #0x1ff
    13cc:	02090001 	.inst	0x02090001 ; undefined
    13d0:	61002d6c 	.inst	0x61002d6c ; undefined
    13d4:	00000000 	udf	#0
    13d8:	05013603 	orr	z3.b, z3.b, #0x4
    13dc:	01052109 	.inst	0x01052109 ; undefined
    13e0:	0002023d 	.inst	0x0002023d ; undefined
    13e4:	01050101 	.inst	0x01050101 ; undefined
    13e8:	84020900 	ld1sb	{z0.s}, p2/z, [x8, z2.s, uxtw]
    13ec:	0061002d 	.inst	0x0061002d ; undefined
    13f0:	03000000 	.inst	0x03000000 ; undefined
    13f4:	0f05013b 	.inst	0x0f05013b ; undefined
    13f8:	2f18053d 	ushr	v29.4h, v9.4h, #8
    13fc:	05741205 	ext	z5.b, {z16.b, z17.b}, #164
    1400:	02022f01 	.inst	0x02022f01 ; undefined
    1404:	05010100 	orr	z0.s, z0.s, #0x1ff
    1408:	02090001 	.inst	0x02090001 ; undefined
	...
    1414:	0100c103 	.inst	0x0100c103 ; undefined
    1418:	053d1205 	ext	z5.b, z5.b, z16.b, #236
    141c:	0b052f2a 	add	w10, w25, w5, lsl #11
    1420:	3d050574 	str	b20, [x11, #321]
    1424:	022f0105 	.inst	0x022f0105 ; undefined
    1428:	01010003 	.inst	0x01010003 ; undefined
    142c:	09000105 	.inst	0x09000105 ; undefined
    1430:	002dc402 	.inst	0x002dc402 ; NYI
    1434:	00000061 	udf	#97
    1438:	00c80300 	.inst	0x00c80300 ; undefined
    143c:	3d120501 	str	b1, [x8, #1153]
    1440:	052f2a05 	tbl	z5.b, {z16.b, z17.b}, z15.b
    1444:	0505820b 	.inst	0x0505820b ; undefined
    1448:	2f01053d 	mvni	v29.2s, #0x29
    144c:	01000302 	.inst	0x01000302 ; undefined
    1450:	00010501 	.inst	0x00010501 ; undefined
    1454:	00000209 	udf	#521
    1458:	00000000 	udf	#0
    145c:	cf030000 	.inst	0xcf030000 ; undefined
    1460:	12050100 	and	w0, w8, #0x8000000
    1464:	2f24053d 	ushr	v29.2s, v9.2s, #28
    1468:	053c0b05 	ext	z5.b, z5.b, z24.b, #226
    146c:	01052f05 	.inst	0x01052f05 ; undefined
    1470:	0003022f 	.inst	0x0003022f ; undefined
    1474:	01750101 	.inst	0x01750101 ; undefined
    1478:	00040000 	.inst	0x00040000 ; undefined
    147c:	00000076 	udf	#118
    1480:	fb010104 	.inst	0xfb010104 ; undefined
    1484:	01000d0e 	.inst	0x01000d0e ; undefined
    1488:	00010101 	.inst	0x00010101 ; undefined
    148c:	00010000 	.inst	0x00010000 ; undefined
    1490:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    1494:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1498:	2f436f53 	.inst	0x2f436f53 ; undefined
    149c:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    14a0:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    14a4:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    14a8:	532f6e6f 	.inst	0x532f6e6f ; undefined
    14ac:	6372756f 	.inst	0x6372756f ; undefined
    14b0:	2e2e0065 	uaddl	v5.8h, v3.8b, v14.8b
    14b4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    14b8:	2f436f53 	.inst	0x2f436f53 ; undefined
    14bc:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    14c0:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    14c4:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    14c8:	492f6e6f 	.inst	0x492f6e6f ; undefined
    14cc:	756c636e 	.inst	0x756c636e ; undefined
    14d0:	00006564 	udf	#25956
    14d4:	65637865 	fnmls	z5.h, p6/m, z3.h, z3.h
    14d8:	6f697470 	uqshl	v16.2d, v3.2d, #41
    14dc:	34365f6e 	cbz	w14, 6e0c8 <__stack_size+0x6a0c8>
    14e0:	0100632e 	.inst	0x0100632e ; undefined
    14e4:	78650000 	ldaddlh	w5, w0, [x0]
    14e8:	74706563 	.inst	0x74706563 ; undefined
    14ec:	2e6e6f69 	umin	v9.4h, v27.4h, v14.4h
    14f0:	00020068 	.inst	0x00020068 ; undefined
    14f4:	01050000 	.inst	0x01050000 ; undefined
    14f8:	18020900 	ldr	w0, 5618 <__stack_size+0x1618>
    14fc:	0061002e 	.inst	0x0061002e ; undefined
    1500:	03000000 	.inst	0x03000000 ; undefined
    1504:	08050114 	stxrb	w5, w20, [x8]
    1508:	01040200 	.inst	0x01040200 ; undefined
    150c:	00010215 	.inst	0x00010215 ; undefined
    1510:	01050101 	.inst	0x01050101 ; undefined
    1514:	1c020900 	ldr	s0, 5634 <__stack_size+0x1634>
    1518:	0061002e 	.inst	0x0061002e ; undefined
    151c:	03000000 	.inst	0x03000000 ; undefined
    1520:	02050123 	.inst	0x02050123 ; undefined
    1524:	2101054c 	.inst	0x2101054c ; undefined
    1528:	01000302 	.inst	0x01000302 ; undefined
    152c:	00010501 	.inst	0x00010501 ; undefined
    1530:	2e3c0209 	uaddl	v9.8h, v16.8b, v28.8b
    1534:	00006100 	udf	#24832
    1538:	30030000 	adr	x0, 7539 <__stack_size+0x3539>
    153c:	4c020501 	.inst	0x4c020501 ; undefined
    1540:	02210105 	.inst	0x02210105 ; undefined
    1544:	01010003 	.inst	0x01010003 ; undefined
    1548:	09000105 	.inst	0x09000105 ; undefined
    154c:	002e5c02 	.inst	0x002e5c02 ; NYI
    1550:	00000061 	udf	#97
    1554:	013d0300 	.inst	0x013d0300 ; undefined
    1558:	054c0205 	.inst	0x054c0205 ; undefined
    155c:	03022101 	.inst	0x03022101 ; undefined
    1560:	05010100 	orr	z0.s, z0.s, #0x1ff
    1564:	02090001 	.inst	0x02090001 ; undefined
    1568:	61002e7c 	.inst	0x61002e7c ; undefined
    156c:	00000000 	udf	#0
    1570:	0100ca03 	.inst	0x0100ca03 ; undefined
    1574:	054c0205 	.inst	0x054c0205 ; undefined
    1578:	03022101 	.inst	0x03022101 ; undefined
    157c:	05010100 	orr	z0.s, z0.s, #0x1ff
    1580:	02090001 	.inst	0x02090001 ; undefined
    1584:	61002e9c 	.inst	0x61002e9c ; undefined
    1588:	00000000 	udf	#0
    158c:	0100d703 	.inst	0x0100d703 ; undefined
    1590:	054c0205 	.inst	0x054c0205 ; undefined
    1594:	03022101 	.inst	0x03022101 ; undefined
    1598:	05010100 	orr	z0.s, z0.s, #0x1ff
    159c:	02090001 	.inst	0x02090001 ; undefined
	...
    15a8:	0100e403 	.inst	0x0100e403 ; undefined
    15ac:	05300205 	ext	z5.b, z5.b, z16.b, #128
    15b0:	03022101 	.inst	0x03022101 ; undefined
    15b4:	05010100 	orr	z0.s, z0.s, #0x1ff
    15b8:	02090001 	.inst	0x02090001 ; undefined
	...
    15c4:	0100f003 	.inst	0x0100f003 ; undefined
    15c8:	054c0205 	.inst	0x054c0205 ; undefined
    15cc:	03022101 	.inst	0x03022101 ; undefined
    15d0:	05010100 	orr	z0.s, z0.s, #0x1ff
    15d4:	02090001 	.inst	0x02090001 ; undefined
    15d8:	61002ebc 	.inst	0x61002ebc ; undefined
    15dc:	00000000 	udf	#0
    15e0:	0100fd03 	.inst	0x0100fd03 ; undefined
    15e4:	054c0205 	.inst	0x054c0205 ; undefined
    15e8:	03022101 	.inst	0x03022101 ; undefined
    15ec:	a7010100 	.inst	0xa7010100 ; undefined
    15f0:	04000001 	add	z1.b, p0/m, z1.b, z0.b
    15f4:	00010500 	.inst	0x00010500 ; undefined
    15f8:	01010400 	.inst	0x01010400 ; undefined
    15fc:	000d0efb 	.inst	0x000d0efb ; undefined
    1600:	01010101 	.inst	0x01010101 ; undefined
    1604:	01000000 	.inst	0x01000000 ; undefined
    1608:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
    160c:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1610:	436f532f 	.inst	0x436f532f ; undefined
    1614:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1618:	7570616f 	.inst	0x7570616f ; undefined
    161c:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1620:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1624:	72756f53 	.inst	0x72756f53 ; undefined
    1628:	2e006563 	.inst	0x2e006563 ; undefined
    162c:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1630:	436f532f 	.inst	0x436f532f ; undefined
    1634:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1638:	7570616f 	.inst	0x7570616f ; undefined
    163c:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1640:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1644:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    1648:	2f656475 	.inst	0x2f656475 ; undefined
    164c:	6362696c 	.inst	0x6362696c ; undefined
    1650:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    1654:	532f2e2e 	.inst	0x532f2e2e ; undefined
    1658:	642f436f 	.inst	0x642f436f ; undefined
    165c:	736f6d65 	.inst	0x736f6d65 ; undefined
    1660:	432f636f 	.inst	0x432f636f ; undefined
    1664:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    1668:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    166c:	64756c63 	.inst	0x64756c63 ; undefined
    1670:	2e2e0065 	uaddl	v5.8h, v3.8b, v14.8b
    1674:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1678:	49534d4e 	.inst	0x49534d4e ; undefined
    167c:	6f432f53 	.inst	0x6f432f53 ; undefined
    1680:	492f6572 	.inst	0x492f6572 ; undefined
    1684:	756c636e 	.inst	0x756c636e ; undefined
    1688:	00006564 	udf	#25956
    168c:	74737973 	.inst	0x74737973 ; undefined
    1690:	645f6d65 	fcmla	z5.h, p3/m, z11.h, z31.h, #270
    1694:	616f6d65 	.inst	0x616f6d65 ; undefined
    1698:	632e7570 	.inst	0x632e7570 ; undefined
    169c:	00000100 	udf	#256
    16a0:	69647473 	ldpsw	x19, x29, [x3, #-224]
    16a4:	682e746e 	.inst	0x682e746e ; undefined
    16a8:	00000200 	udf	#512
    16ac:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    16b0:	2e636f73 	umin	v19.4h, v27.4h, v3.4h
    16b4:	00030068 	.inst	0x00030068 ; undefined
    16b8:	726f6300 	.inst	0x726f6300 ; undefined
    16bc:	65665f65 	fnmla	z5.h, p7/m, z27.h, z6.h
    16c0:	72757461 	.inst	0x72757461 ; undefined
    16c4:	63655f65 	.inst	0x63655f65 ; undefined
    16c8:	2e63696c 	.inst	0x2e63696c ; undefined
    16cc:	00040068 	.inst	0x00040068 ; undefined
    16d0:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    16d4:	74726175 	.inst	0x74726175 ; undefined
    16d8:	0300682e 	.inst	0x0300682e ; undefined
    16dc:	74730000 	.inst	0x74730000 ; undefined
    16e0:	2e6f6964 	.inst	0x2e6f6964 ; undefined
    16e4:	00020068 	.inst	0x00020068 ; undefined
    16e8:	73797300 	.inst	0x73797300 ; undefined
    16ec:	5f6d6574 	.inst	0x5f6d6574 ; undefined
    16f0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    16f4:	2e636f73 	umin	v19.4h, v27.4h, v3.4h
    16f8:	00030068 	.inst	0x00030068 ; undefined
    16fc:	01050000 	.inst	0x01050000 ; undefined
    1700:	00020900 	.inst	0x00020900 ; undefined
    1704:	00000000 	udf	#0
    1708:	03000000 	.inst	0x03000000 ; undefined
    170c:	050100e7 	orr	z7.s, z7.s, #0xff
    1710:	01051815 	.inst	0x01051815 ; undefined
    1714:	00020259 	.inst	0x00020259 ; undefined
    1718:	01050101 	.inst	0x01050101 ; undefined
    171c:	00020900 	.inst	0x00020900 ; undefined
    1720:	00000000 	udf	#0
    1724:	03000000 	.inst	0x03000000 ; undefined
    1728:	050100f9 	orr	z25.s, z25.s, #0xff
    172c:	01051715 	.inst	0x01051715 ; undefined
    1730:	00020259 	.inst	0x00020259 ; undefined
    1734:	01050101 	.inst	0x01050101 ; undefined
    1738:	dc020900 	.inst	0xdc020900 ; undefined
    173c:	0061002e 	.inst	0x0061002e ; undefined
    1740:	03000000 	.inst	0x03000000 ; undefined
    1744:	05010186 	orr	z6.s, z6.s, #0x1fff
    1748:	05053311 	.inst	0x05053311 ; undefined
    174c:	055975bb 	mov	z27.h, p9/m, #-21248
    1750:	03027601 	.inst	0x03027601 ; undefined
    1754:	05010100 	orr	z0.s, z0.s, #0x1ff
    1758:	02090001 	.inst	0x02090001 ; undefined
	...
    1764:	0101a503 	.inst	0x0101a503 ; undefined
    1768:	05880205 	.inst	0x05880205 ; undefined
    176c:	01054b09 	.inst	0x01054b09 ; undefined
    1770:	00020221 	.inst	0x00020221 ; undefined
    1774:	01050101 	.inst	0x01050101 ; undefined
    1778:	6c020900 	stnp	d0, d2, [x8, #32]
    177c:	0061002f 	.inst	0x0061002f ; undefined
    1780:	03000000 	.inst	0x03000000 ; undefined
    1784:	050101ba 	orr	z26.s, z26.s, #0x3fff
    1788:	2e0e0305 	ext	v5.8b, v24.8b, v14.8b, #0
    178c:	68210205 	.inst	0x68210205 ; undefined
    1790:	01052121 	.inst	0x01052121 ; undefined
    1794:	00030223 	.inst	0x00030223 ; undefined
    1798:	02100101 	.inst	0x02100101 ; undefined
    179c:	00040000 	.inst	0x00040000 ; undefined
    17a0:	0000007e 	udf	#126
    17a4:	fb010104 	.inst	0xfb010104 ; undefined
    17a8:	01000d0e 	.inst	0x01000d0e ; undefined
    17ac:	00010101 	.inst	0x00010101 ; undefined
    17b0:	00010000 	.inst	0x00010000 ; undefined
    17b4:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    17b8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    17bc:	2f436f53 	.inst	0x2f436f53 ; undefined
    17c0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    17c4:	2f636f73 	.inst	0x2f636f73 ; undefined
    17c8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    17cc:	532f6e6f 	.inst	0x532f6e6f ; undefined
    17d0:	6372756f 	.inst	0x6372756f ; undefined
    17d4:	72442f65 	.inst	0x72442f65 ; undefined
    17d8:	72657669 	.inst	0x72657669 ; undefined
    17dc:	2e002f73 	.inst	0x2e002f73 ; undefined
    17e0:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    17e4:	436f532f 	.inst	0x436f532f ; undefined
    17e8:	6d65642f 	ldp	d15, d25, [x1, #-432]
    17ec:	7570616f 	.inst	0x7570616f ; undefined
    17f0:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    17f4:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    17f8:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    17fc:	2f656475 	.inst	0x2f656475 ; undefined
    1800:	6362696c 	.inst	0x6362696c ; undefined
    1804:	4c410000 	.inst	0x4c410000 ; undefined
    1808:	6e69705f 	uabdl2	v31.4s, v2.8h, v9.8h
    180c:	2e78756d 	uabd	v13.4h, v11.4h, v24.4h
    1810:	00010063 	.inst	0x00010063 ; undefined
    1814:	64747300 	.inst	0x64747300 ; undefined
    1818:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    181c:	00020068 	.inst	0x00020068 ; undefined
    1820:	01050000 	.inst	0x01050000 ; undefined
    1824:	a8020900 	stnp	x0, x2, [x8, #32]
    1828:	0061002f 	.inst	0x0061002f ; undefined
    182c:	03000000 	.inst	0x03000000 ; undefined
    1830:	0605010f 	.inst	0x0605010f ; undefined
    1834:	2e210513 	uhadd	v19.8b, v8.8b, v1.8b
    1838:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    183c:	06052e21 	.inst	0x06052e21 ; undefined
    1840:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1844:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1848:	06052e21 	.inst	0x06052e21 ; undefined
    184c:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1850:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1854:	06052e21 	.inst	0x06052e21 ; undefined
    1858:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    185c:	05300605 	ext	z5.b, z5.b, z16.b, #129
    1860:	06052e21 	.inst	0x06052e21 ; undefined
    1864:	2e210530 	uhadd	v16.8b, v9.8b, v1.8b
    1868:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    186c:	03052e21 	.inst	0x03052e21 ; undefined
    1870:	2e1e052f 	.inst	0x2e1e052f ; undefined
    1874:	05300605 	ext	z5.b, z5.b, z16.b, #129
    1878:	06052e21 	.inst	0x06052e21 ; undefined
    187c:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1880:	05300605 	ext	z5.b, z5.b, z16.b, #129
    1884:	06052e21 	.inst	0x06052e21 ; undefined
    1888:	2e210521 	uhadd	v1.8b, v9.8b, v1.8b
    188c:	05210605 	ext	z5.b, z5.b, z16.b, #9
    1890:	06052e21 	.inst	0x06052e21 ; undefined
    1894:	2e210531 	uhadd	v17.8b, v9.8b, v1.8b
    1898:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    189c:	06052e21 	.inst	0x06052e21 ; undefined
    18a0:	2e210530 	uhadd	v16.8b, v9.8b, v1.8b
    18a4:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    18a8:	06052e21 	.inst	0x06052e21 ; undefined
    18ac:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    18b0:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    18b4:	06052e21 	.inst	0x06052e21 ; undefined
    18b8:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    18bc:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    18c0:	06052e21 	.inst	0x06052e21 ; undefined
    18c4:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    18c8:	05310605 	ext	z5.b, z5.b, z16.b, #137
    18cc:	06052e21 	.inst	0x06052e21 ; undefined
    18d0:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    18d4:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    18d8:	06052e21 	.inst	0x06052e21 ; undefined
    18dc:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    18e0:	05310305 	ext	z5.b, z5.b, z24.b, #136
    18e4:	03052e1e 	.inst	0x03052e1e ; undefined
    18e8:	2e1e052f 	.inst	0x2e1e052f ; undefined
    18ec:	052f0305 	ext	z5.b, z5.b, z24.b, #120
    18f0:	02052e1e 	.inst	0x02052e1e ; undefined
    18f4:	2e1d0530 	.inst	0x2e1d0530 ; undefined
    18f8:	052f0205 	ext	z5.b, z5.b, z16.b, #120
    18fc:	05052e1d 	.inst	0x05052e1d ; undefined
    1900:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1904:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1908:	05052e20 	.inst	0x05052e20 ; undefined
    190c:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1910:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1914:	05052e20 	.inst	0x05052e20 ; undefined
    1918:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    191c:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1920:	05052e20 	.inst	0x05052e20 ; undefined
    1924:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1928:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    192c:	05052e20 	.inst	0x05052e20 ; undefined
    1930:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1934:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1938:	05052e20 	.inst	0x05052e20 ; undefined
    193c:	2e200531 	uhadd	v17.8b, v9.8b, v0.8b
    1940:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1944:	05052e20 	.inst	0x05052e20 ; undefined
    1948:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    194c:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1950:	05052e20 	.inst	0x05052e20 ; undefined
    1954:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1958:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    195c:	05052e20 	.inst	0x05052e20 ; undefined
    1960:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1964:	05300505 	ext	z5.b, z5.b, z8.b, #129
    1968:	05052e20 	.inst	0x05052e20 ; undefined
    196c:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1970:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1974:	05052e20 	.inst	0x05052e20 ; undefined
    1978:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    197c:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1980:	05052e20 	.inst	0x05052e20 ; undefined
    1984:	2e200530 	uhadd	v16.8b, v9.8b, v0.8b
    1988:	05210505 	ext	z5.b, z5.b, z8.b, #9
    198c:	05052e20 	.inst	0x05052e20 ; undefined
    1990:	2e200521 	uhadd	v1.8b, v9.8b, v0.8b
    1994:	05300505 	ext	z5.b, z5.b, z8.b, #129
    1998:	05052e20 	.inst	0x05052e20 ; undefined
    199c:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    19a0:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    19a4:	01052e20 	.inst	0x01052e20 ; undefined
    19a8:	00020230 	.inst	0x00020230 ; undefined
    19ac:	06d20101 	.inst	0x06d20101 ; undefined
    19b0:	00040000 	.inst	0x00040000 ; undefined
    19b4:	00000109 	udf	#265
    19b8:	fb010104 	.inst	0xfb010104 ; undefined
    19bc:	01000d0e 	.inst	0x01000d0e ; undefined
    19c0:	00010101 	.inst	0x00010101 ; undefined
    19c4:	00010000 	.inst	0x00010000 ; undefined
    19c8:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    19cc:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    19d0:	2f436f53 	.inst	0x2f436f53 ; undefined
    19d4:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    19d8:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    19dc:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    19e0:	492f6e6f 	.inst	0x492f6e6f ; undefined
    19e4:	756c636e 	.inst	0x756c636e ; undefined
    19e8:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    19ec:	00636269 	.inst	0x00636269 ; undefined
    19f0:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    19f4:	6f532f2e 	.inst	0x6f532f2e ; undefined
    19f8:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    19fc:	6f736f6d 	.inst	0x6f736f6d ; undefined
    1a00:	6f432f63 	.inst	0x6f432f63 ; undefined
    1a04:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    1a08:	756f532f 	.inst	0x756f532f ; undefined
    1a0c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    1a10:	76697244 	.inst	0x76697244 ; undefined
    1a14:	2f737265 	fcmla	v5.4h, v19.4h, v19.h[1], #270
    1a18:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    1a1c:	532f2e2e 	.inst	0x532f2e2e ; undefined
    1a20:	642f436f 	.inst	0x642f436f ; undefined
    1a24:	616f6d65 	.inst	0x616f6d65 ; undefined
    1a28:	432f7570 	.inst	0x432f7570 ; undefined
    1a2c:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    1a30:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    1a34:	64756c63 	.inst	0x64756c63 ; undefined
    1a38:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
    1a3c:	612f6362 	.inst	0x612f6362 ; undefined
    1a40:	68637261 	.inst	0x68637261 ; undefined
    1a44:	2e003436 	.inst	0x2e003436 ; undefined
    1a48:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1a4c:	436f532f 	.inst	0x436f532f ; undefined
    1a50:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1a54:	636f736f 	.inst	0x636f736f ; undefined
    1a58:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1a5c:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1a60:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    1a64:	00656475 	.inst	0x00656475 ; undefined
    1a68:	64747300 	.inst	0x64747300 ; undefined
    1a6c:	2e62696c 	.inst	0x2e62696c ; undefined
    1a70:	00010068 	.inst	0x00010068 ; undefined
    1a74:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    1a78:	74726175 	.inst	0x74726175 ; undefined
    1a7c:	0200632e 	.inst	0x0200632e ; undefined
    1a80:	74730000 	.inst	0x74730000 ; undefined
    1a84:	66656464 	.inst	0x66656464 ; undefined
    1a88:	00682e5f 	.inst	0x00682e5f ; undefined
    1a8c:	73000003 	.inst	0x73000003 ; undefined
    1a90:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    1a94:	00682e74 	.inst	0x00682e74 ; undefined
    1a98:	64000001 	.inst	0x64000001 ; undefined
    1a9c:	736f6d65 	.inst	0x736f6d65 ; undefined
    1aa0:	682e636f 	.inst	0x682e636f ; undefined
    1aa4:	00000400 	udf	#1024
    1aa8:	755f4c41 	.inst	0x755f4c41 ; undefined
    1aac:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    1ab0:	00040068 	.inst	0x00040068 ; undefined
    1ab4:	64747300 	.inst	0x64747300 ; undefined
    1ab8:	682e6f69 	.inst	0x682e6f69 ; undefined
    1abc:	00000100 	udf	#256
    1ac0:	00160500 	.inst	0x00160500 ; undefined
    1ac4:	33800209 	.inst	0x33800209 ; undefined
    1ac8:	00006100 	udf	#24832
    1acc:	30030000 	adr	x0, 7acd <__stack_size+0x3acd>
    1ad0:	59010501 	.inst	0x59010501 ; undefined
    1ad4:	01000302 	.inst	0x01000302 ; undefined
    1ad8:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1adc:	02090001 	.inst	0x02090001 ; undefined
    1ae0:	610033a0 	.inst	0x610033a0 ; undefined
    1ae4:	00000000 	udf	#0
    1ae8:	05011303 	orr	z3.s, z3.s, #0xc07fffff
    1aec:	08056709 	stxrb	w5, w9, [x24]
    1af0:	2f100558 	ushr	v24.4h, v10.4h, #16
    1af4:	5a300505 	.inst	0x5a300505 ; undefined
    1af8:	052e2005 	mov	z5.h, z0.h[3]
    1afc:	1d052f02 	.inst	0x1d052f02 ; undefined
    1b00:	2f02052e 	mvni	v14.2s, #0x49
    1b04:	052e1d05 	ext	z5.b, z5.b, z8.b, #119
    1b08:	3d3d2f05 	str	b5, [x24, #3915]
    1b0c:	2f0c053d 	ushr	v29.8b, v9.8b, #4
    1b10:	02210105 	.inst	0x02210105 ; undefined
    1b14:	01010002 	.inst	0x01010002 ; undefined
    1b18:	45050204 	.inst	0x45050204 ; undefined
    1b1c:	58020900 	ldr	x0, 5c3c <__stack_size+0x1c3c>
    1b20:	00610034 	.inst	0x00610034 ; undefined
    1b24:	03000000 	.inst	0x03000000 ; undefined
    1b28:	12050122 	and	w2, w9, #0x8000000
    1b2c:	593a053d 	.inst	0x593a053d ; undefined
    1b30:	052e1905 	ext	z5.b, z5.b, z8.b, #118
    1b34:	16054a41 	b	fffffffff8154438 <_sp+0xffffffff97114438>
    1b38:	2f3a053c 	ushr	v28.2s, v9.2s, #6
    1b3c:	052e1a05 	ext	z5.b, z5.b, z16.b, #118
    1b40:	12055817 	and	w23, w0, #0xf803ffff
    1b44:	0559592f 	mov	z15.h, p9/m, #-55
    1b48:	0105590c 	.inst	0x0105590c ; undefined
    1b4c:	00020221 	.inst	0x00020221 ; undefined
    1b50:	02040101 	.inst	0x02040101 ; undefined
    1b54:	09005305 	.inst	0x09005305 ; undefined
    1b58:	00351002 	.inst	0x00351002 ; NYI
    1b5c:	00000061 	udf	#97
    1b60:	012b0300 	.inst	0x012b0300 ; undefined
    1b64:	053d0205 	ext	z5.b, z5.b, z16.b, #232
    1b68:	0705cb11 	.inst	0x0705cb11 ; undefined
    1b6c:	2211054b 	.inst	0x2211054b ; undefined
    1b70:	05590705 	mov	z5.h, p9/z, #56
    1b74:	0a052214 	and	w20, w16, w5, lsl #8
    1b78:	22110559 	.inst	0x22110559 ; undefined
    1b7c:	05590705 	mov	z5.h, p9/z, #56
    1b80:	01052209 	.inst	0x01052209 ; undefined
    1b84:	00020221 	.inst	0x00020221 ; undefined
    1b88:	02040101 	.inst	0x02040101 ; undefined
    1b8c:	09000105 	.inst	0x09000105 ; undefined
    1b90:	0035b802 	.inst	0x0035b802 ; NYI
    1b94:	00000061 	udf	#97
    1b98:	00c40300 	.inst	0x00c40300 ; undefined
    1b9c:	3d080501 	str	b1, [x8, #513]
    1ba0:	05580705 	mov	z5.h, p8/z, #56
    1ba4:	04052f10 	.inst	0x04052f10 ; undefined
    1ba8:	77120530 	.inst	0x77120530 ; undefined
    1bac:	054b0805 	.inst	0x054b0805 ; undefined
    1bb0:	054b2212 	.inst	0x054b2212 ; undefined
    1bb4:	12055908 	and	w8, w8, #0xf803ffff
    1bb8:	59080522 	.inst	0x59080522 ; undefined
    1bbc:	05220c05 	ext	z5.b, z5.b, z0.b, #19
    1bc0:	02022101 	.inst	0x02022101 ; undefined
    1bc4:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1bc8:	00010502 	.inst	0x00010502 ; undefined
    1bcc:	36640209 	tbz	w9, #12, ffffffffffff9c0c <_sp+0xffffffff9efb9c0c>
    1bd0:	00006100 	udf	#24832
    1bd4:	dd030000 	.inst	0xdd030000 ; undefined
    1bd8:	09050100 	.inst	0x09050100 ; undefined
    1bdc:	58080530 	ldr	x16, 11c80 <__stack_size+0xdc80>
    1be0:	052f1005 	ext	z5.b, z5.b, z0.b, #124
    1be4:	0c053014 	.inst	0x0c053014 ; undefined
    1be8:	2101053d 	.inst	0x2101053d ; undefined
    1bec:	01000202 	.inst	0x01000202 ; undefined
    1bf0:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1bf4:	02090001 	.inst	0x02090001 ; undefined
    1bf8:	610036a8 	.inst	0x610036a8 ; undefined
    1bfc:	00000000 	udf	#0
    1c00:	0100ec03 	.inst	0x0100ec03 ; undefined
    1c04:	053d0805 	ext	z5.b, z5.b, z0.b, #234
    1c08:	10055807 	adr	x7, c708 <__stack_size+0x8708>
    1c0c:	300b052f 	adr	x15, 17cb1 <__stack_size+0x13cb1>
    1c10:	02001405 	.inst	0x02001405 ; undefined
    1c14:	05200104 	ext	z4.b, z4.b, z8.b, #0
    1c18:	0402001a 	.inst	0x0402001a ; undefined
    1c1c:	0d052e01 	.inst	0x0d052e01 ; undefined
    1c20:	01040200 	.inst	0x01040200 ; undefined
    1c24:	2f1e0520 	ushr	v0.4h, v9.4h, #2
    1c28:	053c1805 	ext	z5.b, z5.b, z0.b, #230
    1c2c:	01052f0c 	.inst	0x01052f0c ; undefined
    1c30:	00020221 	.inst	0x00020221 ; undefined
    1c34:	02040101 	.inst	0x02040101 ; undefined
    1c38:	09000105 	.inst	0x09000105 ; undefined
    1c3c:	00000002 	udf	#2
    1c40:	00000000 	udf	#0
    1c44:	00f50300 	.inst	0x00f50300 ; undefined
    1c48:	3d080501 	str	b1, [x8, #513]
    1c4c:	05580705 	mov	z5.h, p8/z, #56
    1c50:	0b052f10 	add	w16, w24, w5, lsl #11
    1c54:	00160530 	.inst	0x00160530 ; undefined
    1c58:	20010402 	.inst	0x20010402 ; undefined
    1c5c:	02001c05 	.inst	0x02001c05 ; undefined
    1c60:	052e0104 	ext	z4.b, z4.b, z8.b, #112
    1c64:	0402000e 	.inst	0x0402000e ; undefined
    1c68:	1e052001 	.inst	0x1e052001 ; undefined
    1c6c:	3c18052f 	str	b15, [x9], #-128
    1c70:	052f0c05 	ext	z5.b, z5.b, z0.b, #123
    1c74:	02022101 	.inst	0x02022101 ; undefined
    1c78:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1c7c:	00010502 	.inst	0x00010502 ; undefined
    1c80:	00000209 	udf	#521
    1c84:	00000000 	udf	#0
    1c88:	83030000 	.inst	0x83030000 ; undefined
    1c8c:	09050101 	.inst	0x09050101 ; undefined
    1c90:	58080530 	ldr	x16, 11d34 <__stack_size+0xdd34>
    1c94:	052f1005 	ext	z5.b, z5.b, z0.b, #124
    1c98:	1905300b 	stlurb	w11, [x0, #83]
    1c9c:	01040200 	.inst	0x01040200 ; undefined
    1ca0:	00200520 	.inst	0x00200520 ; NYI
    1ca4:	2e010402 	.inst	0x2e010402 ; undefined
    1ca8:	02000f05 	.inst	0x02000f05 ; undefined
    1cac:	05200104 	ext	z4.b, z4.b, z8.b, #0
    1cb0:	0c052f09 	.inst	0x0c052f09 ; undefined
    1cb4:	2f01053e 	mvni	v30.2s, #0x29
    1cb8:	01000202 	.inst	0x01000202 ; undefined
    1cbc:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1cc0:	02090032 	.inst	0x02090032 ; undefined
	...
    1ccc:	0101b303 	.inst	0x0101b303 ; undefined
    1cd0:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    1cd4:	10055808 	adr	x8, c7d4 <__stack_size+0x87d4>
    1cd8:	3015052f 	adr	x15, 2bd7d <__stack_size+0x27d7d>
    1cdc:	05590c05 	mov	z5.h, p9/z, #96
    1ce0:	02022101 	.inst	0x02022101 ; undefined
    1ce4:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1ce8:	00010502 	.inst	0x00010502 ; undefined
    1cec:	00000209 	udf	#521
    1cf0:	00000000 	udf	#0
    1cf4:	bb030000 	.inst	0xbb030000 ; undefined
    1cf8:	12050101 	and	w1, w8, #0x8000000
    1cfc:	0105592f 	.inst	0x0105592f ; undefined
    1d00:	00030259 	.inst	0x00030259 ; undefined
    1d04:	02040101 	.inst	0x02040101 ; undefined
    1d08:	09000105 	.inst	0x09000105 ; undefined
    1d0c:	00000002 	udf	#2
    1d10:	00000000 	udf	#0
    1d14:	01c10300 	.inst	0x01c10300 ; undefined
    1d18:	2f050501 	mvni	v1.2s, #0xa8
    1d1c:	052e1b05 	ext	z5.b, z5.b, z24.b, #118
    1d20:	0e052004 	tbl	v4.8b, {v0.16b, v1.16b}, v5.8b
    1d24:	5a010530 	.inst	0x5a010530 ; undefined
    1d28:	01000302 	.inst	0x01000302 ; undefined
    1d2c:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1d30:	02090001 	.inst	0x02090001 ; undefined
	...
    1d3c:	0101ca03 	.inst	0x0101ca03 ; undefined
    1d40:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1d44:	11055805 	add	w5, w0, #0x156
    1d48:	0c05302f 	.inst	0x0c05302f ; undefined
    1d4c:	21010559 	.inst	0x21010559 ; undefined
    1d50:	01000202 	.inst	0x01000202 ; undefined
    1d54:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1d58:	02090001 	.inst	0x02090001 ; undefined
	...
    1d64:	0101d503 	.inst	0x0101d503 ; undefined
    1d68:	053d0805 	ext	z5.b, z5.b, z0.b, #234
    1d6c:	15054a07 	b	4154588 <__stack_size+0x4150588>
    1d70:	6906052f 	stgp	x15, x1, [x9, #192]
    1d74:	053f0c05 	ext	z5.b, z5.b, z0.b, #251
    1d78:	02022101 	.inst	0x02022101 ; undefined
    1d7c:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1d80:	00010502 	.inst	0x00010502 ; undefined
    1d84:	00000209 	udf	#521
    1d88:	00000000 	udf	#0
    1d8c:	f8030000 	stur	x0, [x0, #48]
    1d90:	08050101 	stxrb	w5, w1, [x8]
    1d94:	2e1e052f 	.inst	0x2e1e052f ; undefined
    1d98:	05200705 	ext	z5.b, z5.b, z24.b, #1
    1d9c:	01052f11 	.inst	0x01052f11 ; undefined
    1da0:	0003025a 	.inst	0x0003025a ; undefined
    1da4:	02040101 	.inst	0x02040101 ; undefined
    1da8:	09000105 	.inst	0x09000105 ; undefined
    1dac:	00000002 	udf	#2
    1db0:	00000000 	udf	#0
    1db4:	02810300 	.inst	0x02810300 ; undefined
    1db8:	2f080501 	ushr	v1.8b, v8.8b, #8
    1dbc:	054a0705 	.inst	0x054a0705 ; undefined
    1dc0:	01052f11 	.inst	0x01052f11 ; undefined
    1dc4:	0003025a 	.inst	0x0003025a ; undefined
    1dc8:	02040101 	.inst	0x02040101 ; undefined
    1dcc:	09000105 	.inst	0x09000105 ; undefined
    1dd0:	00000002 	udf	#2
    1dd4:	00000000 	udf	#0
    1dd8:	02890300 	.inst	0x02890300 ; undefined
    1ddc:	2f080501 	ushr	v1.8b, v8.8b, #8
    1de0:	052e1e05 	ext	z5.b, z5.b, z16.b, #119
    1de4:	11052007 	add	w7, w0, #0x148
    1de8:	5a0c052f 	.inst	0x5a0c052f ; undefined
    1dec:	02210105 	.inst	0x02210105 ; undefined
    1df0:	01010002 	.inst	0x01010002 ; undefined
    1df4:	01050204 	.inst	0x01050204 ; undefined
    1df8:	00020900 	.inst	0x00020900 ; undefined
    1dfc:	00000000 	udf	#0
    1e00:	03000000 	.inst	0x03000000 ; undefined
    1e04:	05010293 	orr	z19.s, z19.s, #0x1fffff
    1e08:	05052f06 	.inst	0x05052f06 ; undefined
    1e0c:	2f12054a 	ushr	v10.4h, v10.4h, #14
    1e10:	055a0d05 	mov	z5.h, p10/z, #104
    1e14:	02022101 	.inst	0x02022101 ; undefined
    1e18:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1e1c:	00010502 	.inst	0x00010502 ; undefined
    1e20:	00000209 	udf	#521
    1e24:	00000000 	udf	#0
    1e28:	9d030000 	.inst	0x9d030000 ; undefined
    1e2c:	05050102 	.inst	0x05050102 ; undefined
    1e30:	2e1e0532 	.inst	0x2e1e0532 ; undefined
    1e34:	05200405 	ext	z5.b, z5.b, z0.b, #1
    1e38:	01052f12 	.inst	0x01052f12 ; undefined
    1e3c:	0003025a 	.inst	0x0003025a ; undefined
    1e40:	02040101 	.inst	0x02040101 ; undefined
    1e44:	09000105 	.inst	0x09000105 ; undefined
    1e48:	00000002 	udf	#2
    1e4c:	00000000 	udf	#0
    1e50:	02a90300 	.inst	0x02a90300 ; undefined
    1e54:	3d0a0501 	str	b1, [x8, #641]
    1e58:	05230b05 	ext	z5.b, z5.b, z24.b, #26
    1e5c:	05222e09 	tbx	z9.b, z16.b, z2.b
    1e60:	01055a14 	.inst	0x01055a14 ; undefined
    1e64:	00030267 	.inst	0x00030267 ; undefined
    1e68:	02040101 	.inst	0x02040101 ; undefined
    1e6c:	09000105 	.inst	0x09000105 ; undefined
    1e70:	00000002 	udf	#2
    1e74:	00000000 	udf	#0
    1e78:	02b70300 	.inst	0x02b70300 ; undefined
    1e7c:	4b0a0501 	sub	w1, w8, w10, lsl #1
    1e80:	05220c05 	ext	z5.b, z5.b, z0.b, #19
    1e84:	05222e0a 	tbx	z10.b, z16.b, z2.b
    1e88:	15055906 	b	41582a0 <__stack_size+0x41542a0>
    1e8c:	2e17055a 	.inst	0x2e17055a ; undefined
    1e90:	052e1505 	ext	z5.b, z5.b, z8.b, #117
    1e94:	03023d01 	.inst	0x03023d01 ; undefined
    1e98:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1e9c:	00010502 	.inst	0x00010502 ; undefined
    1ea0:	00000209 	udf	#521
    1ea4:	00000000 	udf	#0
    1ea8:	c4030000 	ld1sb	{z0.d}, p0/z, [x0, z3.d, uxtw]
    1eac:	02050102 	.inst	0x02050102 ; undefined
    1eb0:	0812053d 	stxrb	w18, w29, [x9]
    1eb4:	4b030530 	sub	w16, w9, w3, lsl #1
    1eb8:	05221205 	ext	z5.b, z5.b, z16.b, #20
    1ebc:	12055903 	and	w3, w8, #0xf803ffff
    1ec0:	59030522 	.inst	0x59030522 ; undefined
    1ec4:	05221205 	ext	z5.b, z5.b, z16.b, #20
    1ec8:	12055903 	and	w3, w8, #0xf803ffff
    1ecc:	59030522 	.inst	0x59030522 ; undefined
    1ed0:	02220105 	.inst	0x02220105 ; undefined
    1ed4:	01010003 	.inst	0x01010003 ; undefined
    1ed8:	01050204 	.inst	0x01050204 ; undefined
    1edc:	00020900 	.inst	0x00020900 ; undefined
    1ee0:	00000000 	udf	#0
    1ee4:	03000000 	.inst	0x03000000 ; undefined
    1ee8:	050102da 	orr	z26.s, z26.s, #0x7fffff
    1eec:	12053d02 	and	w2, w8, #0xf80007ff
    1ef0:	03053008 	.inst	0x03053008 ; undefined
    1ef4:	2212054b 	.inst	0x2212054b ; undefined
    1ef8:	05590305 	mov	z5.h, p9/z, #24
    1efc:	03052212 	.inst	0x03052212 ; undefined
    1f00:	22120559 	.inst	0x22120559 ; undefined
    1f04:	05590305 	mov	z5.h, p9/z, #24
    1f08:	03052212 	.inst	0x03052212 ; undefined
    1f0c:	22010559 	.inst	0x22010559 ; undefined
    1f10:	01000302 	.inst	0x01000302 ; undefined
    1f14:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1f18:	02090001 	.inst	0x02090001 ; undefined
	...
    1f24:	0102f103 	.inst	0x0102f103 ; undefined
    1f28:	05411105 	eor	z5.s, z5.s, #0xc000007f
    1f2c:	0905230b 	.inst	0x0905230b ; undefined
    1f30:	2f0b052e 	ushr	v14.8b, v9.8b, #5
    1f34:	053e0c05 	ext	z5.b, z5.b, z0.b, #243
    1f38:	14053105 	b	14e34c <__stack_size+0x14a34c>
    1f3c:	21152402 	.inst	0x21152402 ; undefined
    1f40:	222f0d05 	.inst	0x222f0d05 ; undefined
    1f44:	053d1405 	ext	z5.b, z5.b, z0.b, #237
    1f48:	0a05210d 	and	w13, w8, w5, lsl #8
    1f4c:	3d110522 	str	b2, [x9, #1089]
    1f50:	222f0a05 	.inst	0x222f0a05 ; undefined
    1f54:	053d1105 	ext	z5.b, z5.b, z8.b, #236
    1f58:	05222f0a 	tbx	z10.b, z24.b, z2.b
    1f5c:	0d053d11 	.inst	0x0d053d11 ; undefined
    1f60:	220a052f 	.inst	0x220a052f ; undefined
    1f64:	053d1105 	ext	z5.b, z5.b, z8.b, #236
    1f68:	0a052f0d 	and	w13, w24, w5, lsl #11
    1f6c:	3d110522 	str	b2, [x9, #1089]
    1f70:	052f0d05 	ext	z5.b, z5.b, z8.b, #123
    1f74:	0d052414 	.inst	0x0d052414 ; undefined
    1f78:	250c0521 	cmpge	p1.b, p1/z, z9.b, #12
    1f7c:	02210105 	.inst	0x02210105 ; undefined
    1f80:	01010002 	.inst	0x01010002 ; undefined
    1f84:	01050204 	.inst	0x01050204 ; undefined
    1f88:	00020900 	.inst	0x00020900 ; undefined
    1f8c:	00000000 	udf	#0
    1f90:	03000000 	.inst	0x03000000 ; undefined
    1f94:	050103ac 	orr	z12.s, z12.s, #0x3fffffff
    1f98:	07053008 	.inst	0x07053008 ; undefined
    1f9c:	2f11054a 	ushr	v10.4h, v10.4h, #15
    1fa0:	590c0569 	.inst	0x590c0569 ; undefined
    1fa4:	02210105 	.inst	0x02210105 ; undefined
    1fa8:	01010002 	.inst	0x01010002 ; undefined
    1fac:	01050204 	.inst	0x01050204 ; undefined
    1fb0:	00020900 	.inst	0x00020900 ; undefined
    1fb4:	00000000 	udf	#0
    1fb8:	03000000 	.inst	0x03000000 ; undefined
    1fbc:	050103b9 	orr	z25.s, z25.s, #0x3fffffff
    1fc0:	07053e08 	.inst	0x07053e08 ; undefined
    1fc4:	2f15054a 	ushr	v10.4h, v10.4h, #11
    1fc8:	05690a05 	ext	z5.b, {z16.b, z17.b}, #74
    1fcc:	01053e0c 	.inst	0x01053e0c ; undefined
    1fd0:	00020221 	.inst	0x00020221 ; undefined
    1fd4:	02040101 	.inst	0x02040101 ; undefined
    1fd8:	09000105 	.inst	0x09000105 ; undefined
    1fdc:	00000002 	udf	#2
    1fe0:	00000000 	udf	#0
    1fe4:	03c70300 	.inst	0x03c70300 ; undefined
    1fe8:	3e090501 	.inst	0x3e090501 ; undefined
    1fec:	054a0805 	.inst	0x054a0805 ; undefined
    1ff0:	0b052f16 	add	w22, w24, w5, lsl #11
    1ff4:	3e0d0569 	.inst	0x3e0d0569 ; undefined
    1ff8:	02210105 	.inst	0x02210105 ; undefined
    1ffc:	01010002 	.inst	0x01010002 ; undefined
    2000:	01050204 	.inst	0x01050204 ; undefined
    2004:	00020900 	.inst	0x00020900 ; undefined
    2008:	00000000 	udf	#0
    200c:	03000000 	.inst	0x03000000 ; undefined
    2010:	050103d4 	orr	z20.s, z20.s, #0x7fffffff
    2014:	09052f0d 	.inst	0x09052f0d ; undefined
    2018:	21010559 	.inst	0x21010559 ; undefined
    201c:	01000202 	.inst	0x01000202 ; undefined
    2020:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    2024:	02090001 	.inst	0x02090001 ; undefined
	...
    2030:	0103db03 	.inst	0x0103db03 ; undefined
    2034:	052f0f05 	ext	z5.b, z5.b, z24.b, #123
    2038:	01055909 	.inst	0x01055909 ; undefined
    203c:	00020221 	.inst	0x00020221 ; undefined
    2040:	02040101 	.inst	0x02040101 ; undefined
    2044:	09000105 	.inst	0x09000105 ; undefined
    2048:	00000002 	udf	#2
    204c:	00000000 	udf	#0
    2050:	03e20300 	.inst	0x03e20300 ; undefined
    2054:	2f0f0501 	ushr	v1.8b, v8.8b, #1
    2058:	05590905 	mov	z5.h, p9/z, #72
    205c:	02022101 	.inst	0x02022101 ; undefined
    2060:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    2064:	002a0502 	.inst	0x002a0502 ; NYI
    2068:	00000209 	udf	#521
    206c:	00000000 	udf	#0
    2070:	e6030000 	.inst	0xe6030000 ; undefined
    2074:	0d050103 	.inst	0x0d050103 ; undefined
    2078:	5909052f 	.inst	0x5909052f ; undefined
    207c:	02210105 	.inst	0x02210105 ; undefined
    2080:	01010002 	.inst	0x01010002 ; undefined
    2084:	0000019e 	udf	#414
    2088:	00a80004 	.inst	0x00a80004 ; undefined
    208c:	01040000 	.inst	0x01040000 ; undefined
    2090:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    2094:	01010100 	.inst	0x01010100 ; undefined
    2098:	00000001 	udf	#1
    209c:	01000001 	.inst	0x01000001 ; undefined
    20a0:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    20a4:	6f532f2e 	.inst	0x6f532f2e ; undefined
    20a8:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    20ac:	6f736f6d 	.inst	0x6f736f6d ; undefined
    20b0:	6f432f63 	.inst	0x6f432f63 ; undefined
    20b4:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    20b8:	756f532f 	.inst	0x756f532f ; undefined
    20bc:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    20c0:	76697244 	.inst	0x76697244 ; undefined
    20c4:	2f737265 	fcmla	v5.4h, v19.4h, v19.h[1], #270
    20c8:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    20cc:	532f2e2e 	.inst	0x532f2e2e ; undefined
    20d0:	642f436f 	.inst	0x642f436f ; undefined
    20d4:	736f6d65 	.inst	0x736f6d65 ; undefined
    20d8:	432f636f 	.inst	0x432f636f ; undefined
    20dc:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    20e0:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    20e4:	64756c63 	.inst	0x64756c63 ; undefined
    20e8:	2e2e0065 	uaddl	v5.8h, v3.8b, v14.8b
    20ec:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    20f0:	2f436f53 	.inst	0x2f436f53 ; undefined
    20f4:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    20f8:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    20fc:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    2100:	492f6e6f 	.inst	0x492f6e6f ; undefined
    2104:	756c636e 	.inst	0x756c636e ; undefined
    2108:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    210c:	00636269 	.inst	0x00636269 ; undefined
    2110:	69746d00 	ldpsw	x0, x27, [x8, #-96]
    2114:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    2118:	00010063 	.inst	0x00010063 ; undefined
    211c:	69746d00 	ldpsw	x0, x27, [x8, #-96]
    2120:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    2124:	00020068 	.inst	0x00020068 ; undefined
    2128:	64747300 	.inst	0x64747300 ; undefined
    212c:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    2130:	00030068 	.inst	0x00030068 ; undefined
    2134:	01050000 	.inst	0x01050000 ; undefined
    2138:	00020900 	.inst	0x00020900 ; undefined
    213c:	00000000 	udf	#0
    2140:	18000000 	ldr	w0, 2140 <__stack_size-0x1ec0>
    2144:	05421005 	eor	z5.d, z5.d, #0x4000000000000000
    2148:	0d052e0e 	.inst	0x0d052e0e ; undefined
    214c:	200b052f 	.inst	0x200b052f ; undefined
    2150:	02000f05 	.inst	0x02000f05 ; undefined
    2154:	05310104 	ext	z4.b, z4.b, z8.b, #136
    2158:	0402000d 	.inst	0x0402000d ; undefined
    215c:	13052001 	sbfx	w1, w0, #5, #4
    2160:	01040200 	.inst	0x01040200 ; undefined
    2164:	0017052f 	.inst	0x0017052f ; undefined
    2168:	4b010402 	sub	w2, w0, w1, lsl #1
    216c:	054c0c05 	.inst	0x054c0c05 ; undefined
    2170:	02022101 	.inst	0x02022101 ; undefined
    2174:	05010100 	orr	z0.s, z0.s, #0x1ff
    2178:	02090001 	.inst	0x02090001 ; undefined
	...
    2184:	05011803 	orr	z3.s, z3.s, #0x20000000
    2188:	16052f18 	b	fffffffff814dde8 <_sp+0xffffffff9710dde8>
    218c:	18052f2f 	ldr	w15, c770 <__stack_size+0x8770>
    2190:	2f0c052f 	ushr	v15.8b, v9.8b, #4
    2194:	02210105 	.inst	0x02210105 ; undefined
    2198:	01010002 	.inst	0x01010002 ; undefined
    219c:	09000105 	.inst	0x09000105 ; undefined
    21a0:	00371002 	.inst	0x00371002 ; NYI
    21a4:	00000061 	udf	#97
    21a8:	01210300 	.inst	0x01210300 ; undefined
    21ac:	054b1a05 	.inst	0x054b1a05 ; undefined
    21b0:	1e052e18 	.inst	0x1e052e18 ; undefined
    21b4:	2e16052f 	.inst	0x2e16052f ; undefined
    21b8:	052f1805 	ext	z5.b, z5.b, z0.b, #126
    21bc:	18053c16 	ldr	w22, c93c <__stack_size+0x893c>
    21c0:	2f0c052f 	ushr	v15.8b, v9.8b, #4
    21c4:	02210105 	.inst	0x02210105 ; undefined
    21c8:	01010002 	.inst	0x01010002 ; undefined
    21cc:	09000105 	.inst	0x09000105 ; undefined
    21d0:	00376802 	.inst	0x00376802 ; NYI
    21d4:	00000061 	udf	#97
    21d8:	012a0300 	.inst	0x012a0300 ; undefined
    21dc:	053e0e05 	ext	z5.b, z5.b, z16.b, #243
    21e0:	16052118 	b	fffffffff814a640 <_sp+0xffffffff9710a640>
    21e4:	2f17052e 	ushr	v14.4h, v9.4h, #9
    21e8:	052e2a05 	tbl	z5.b, {z16.b, z17.b}, z14.b
    21ec:	1b052e0f 	madd	w15, w16, w5, w11
    21f0:	2e07052f 	.inst	0x2e07052f ; undefined
    21f4:	053d1c05 	ext	z5.b, z5.b, z0.b, #239
    21f8:	1c053d0d 	ldr	s13, c998 <__stack_size+0x8998>
    21fc:	2f0d053e 	ushr	v30.8b, v9.8b, #3
    2200:	05220c05 	ext	z5.b, z5.b, z0.b, #19
    2204:	02022101 	.inst	0x02022101 ; undefined
    2208:	05010100 	orr	z0.s, z0.s, #0x1ff
    220c:	02090001 	.inst	0x02090001 ; undefined
    2210:	610037e4 	.inst	0x610037e4 ; undefined
    2214:	00000000 	udf	#0
    2218:	05013a03 	orr	z3.s, z3.s, #0xfe0003ff
    221c:	01052f12 	.inst	0x01052f12 ; undefined
    2220:	0002022f 	.inst	0x0002022f ; undefined
    2224:	0a180101 	and	w1, w8, w24
    2228:	00040000 	.inst	0x00040000 ; undefined
    222c:	0000013d 	udf	#317
    2230:	fb010104 	.inst	0xfb010104 ; undefined
    2234:	01000d0e 	.inst	0x01000d0e ; undefined
    2238:	00010101 	.inst	0x00010101 ; undefined
    223c:	00010000 	.inst	0x00010000 ; undefined
    2240:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    2244:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2248:	2f436f53 	.inst	0x2f436f53 ; undefined
    224c:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    2250:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    2254:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    2258:	492f6e6f 	.inst	0x492f6e6f ; undefined
    225c:	756c636e 	.inst	0x756c636e ; undefined
    2260:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    2264:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
    2268:	63726161 	.inst	0x63726161 ; undefined
    226c:	00343668 	.inst	0x00343668 ; NYI
    2270:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    2274:	6f532f2e 	.inst	0x6f532f2e ; undefined
    2278:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    227c:	70616f6d 	adr	x13, c506b <__stack_size+0xc106b>
    2280:	6f432f75 	.inst	0x6f432f75 ; undefined
    2284:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    2288:	636e492f 	.inst	0x636e492f ; undefined
    228c:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    2290:	62696c2f 	.inst	0x62696c2f ; undefined
    2294:	2e2e0063 	uaddl	v3.8h, v3.8b, v14.8b
    2298:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    229c:	2f436f53 	.inst	0x2f436f53 ; undefined
    22a0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    22a4:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    22a8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    22ac:	492f6e6f 	.inst	0x492f6e6f ; undefined
    22b0:	756c636e 	.inst	0x756c636e ; undefined
    22b4:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    22b8:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
    22bc:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    22c0:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    22c4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    22c8:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    22cc:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    22d0:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    22d4:	492f6e6f 	.inst	0x492f6e6f ; undefined
    22d8:	756c636e 	.inst	0x756c636e ; undefined
    22dc:	2e006564 	.inst	0x2e006564 ; undefined
    22e0:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    22e4:	436f532f 	.inst	0x436f532f ; undefined
    22e8:	6d65642f 	ldp	d15, d25, [x1, #-432]
    22ec:	636f736f 	.inst	0x636f736f ; undefined
    22f0:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    22f4:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    22f8:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    22fc:	00656475 	.inst	0x00656475 ; undefined
    2300:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    2304:	2e636d6d 	umin	v13.4h, v11.4h, v3.4h
    2308:	00000063 	udf	#99
    230c:	64747300 	.inst	0x64747300 ; undefined
    2310:	5f666564 	.inst	0x5f666564 ; undefined
    2314:	0100682e 	.inst	0x0100682e ; undefined
    2318:	74730000 	.inst	0x74730000 ; undefined
    231c:	746e6964 	.inst	0x746e6964 ; undefined
    2320:	00682e5f 	.inst	0x00682e5f ; undefined
    2324:	73000001 	.inst	0x73000001 ; undefined
    2328:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    232c:	00682e74 	.inst	0x00682e74 ; undefined
    2330:	74000002 	.inst	0x74000002 ; undefined
    2334:	2e657079 	uabdl	v25.4s, v3.4h, v5.4h
    2338:	00030068 	.inst	0x00030068 ; undefined
    233c:	69746d00 	ldpsw	x0, x27, [x8, #-96]
    2340:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    2344:	00040068 	.inst	0x00040068 ; undefined
    2348:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    234c:	2e636d6d 	umin	v13.4h, v11.4h, v3.4h
    2350:	00000068 	udf	#104
    2354:	72747300 	.inst	0x72747300 ; undefined
    2358:	2e676e69 	umin	v9.4h, v19.4h, v7.4h
    235c:	00020068 	.inst	0x00020068 ; undefined
    2360:	64747300 	.inst	0x64747300 ; undefined
    2364:	682e6f69 	.inst	0x682e6f69 ; undefined
    2368:	00000200 	udf	#512
    236c:	00010500 	.inst	0x00010500 ; undefined
    2370:	37fc0209 	tbnz	w9, #31, ffffffffffffa3b0 <_sp+0xffffffff9efba3b0>
    2374:	00006100 	udf	#24832
    2378:	33030000 	bfi	w0, w0, #29, #1
    237c:	2f0e0501 	ushr	v1.8b, v8.8b, #2
    2380:	05200c05 	ext	z5.b, z5.b, z0.b, #3
    2384:	02022101 	.inst	0x02022101 ; undefined
    2388:	05010100 	orr	z0.s, z0.s, #0x1ff
    238c:	02090001 	.inst	0x02090001 ; undefined
    2390:	61003814 	.inst	0x61003814 ; undefined
    2394:	00000000 	udf	#0
    2398:	05013803 	orr	z3.s, z3.s, #0x2000000
    239c:	2d053d07 	stp	s7, s15, [x8, #40]
    23a0:	2f010520 	mvni	v0.2s, #0x29
    23a4:	01000302 	.inst	0x01000302 ; undefined
    23a8:	00010501 	.inst	0x00010501 ; undefined
    23ac:	38380209 	ldaddb	w24, w9, [x16]
    23b0:	00006100 	udf	#24832
    23b4:	3d030000 	str	b0, [x0, #192]
    23b8:	3d050501 	str	b1, [x8, #321]
    23bc:	020d053d 	.inst	0x020d053d ; undefined
    23c0:	223d1449 	.inst	0x223d1449 ; undefined
    23c4:	223d223d 	.inst	0x223d223d ; undefined
    23c8:	223d223d 	.inst	0x223d223d ; undefined
    23cc:	223d223d 	.inst	0x223d223d ; undefined
    23d0:	223d223d 	.inst	0x223d223d ; undefined
    23d4:	223d223d 	.inst	0x223d223d ; undefined
    23d8:	223d223d 	.inst	0x223d223d ; undefined
    23dc:	2201053d 	.inst	0x2201053d ; undefined
    23e0:	01000302 	.inst	0x01000302 ; undefined
    23e4:	00010501 	.inst	0x00010501 ; undefined
    23e8:	3a600209 	.inst	0x3a600209 ; undefined
    23ec:	00006100 	udf	#24832
    23f0:	ee030000 	.inst	0xee030000 ; undefined
    23f4:	0e050100 	tbl	v0.8b, {v8.16b}, v5.8b
    23f8:	211b053d 	.inst	0x211b053d ; undefined
    23fc:	05200e05 	ext	z5.b, z5.b, z16.b, #3
    2400:	17052f05 	b	fffffffffc14e014 <_sp+0xffffffff9b10e014>
    2404:	3c1b0521 	str	b1, [x9], #-80
    2408:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    240c:	2a052f0d 	orr	w13, w24, w5, lsl #11
    2410:	000c052c 	.inst	0x000c052c ; undefined
    2414:	3c010402 	str	b2, [x0], #16
    2418:	02400105 	.inst	0x02400105 ; undefined
    241c:	01010004 	.inst	0x01010004 ; undefined
    2420:	09000105 	.inst	0x09000105 ; undefined
    2424:	003ac802 	.inst	0x003ac802 ; NYI
    2428:	00000061 	udf	#97
    242c:	00f80300 	.inst	0x00f80300 ; undefined
    2430:	3e050501 	.inst	0x3e050501 ; undefined
    2434:	05671105 	ext	z5.b, {z8.b, z9.b}, #60
    2438:	05053c0f 	.inst	0x05053c0f ; undefined
    243c:	01040200 	.inst	0x01040200 ; undefined
    2440:	0402001f 	.inst	0x0402001f ; undefined
    2444:	05580602 	mov	z2.h, p8/z, #48
    2448:	055b0608 	mov	z8.h, p11/z, #48
    244c:	09053c07 	.inst	0x09053c07 ; undefined
    2450:	2f10052f 	ushr	v15.4h, v9.4h, #16
    2454:	05301105 	ext	z5.b, z5.b, z8.b, #132
    2458:	1c053c0f 	ldr	s15, cbd8 <__stack_size+0x8bd8>
    245c:	3d090521 	str	b1, [x9, #577]
    2460:	05751005 	ext	z5.b, {z0.b, z1.b}, #172
    2464:	02022201 	.inst	0x02022201 ; undefined
    2468:	05010100 	orr	z0.s, z0.s, #0x1ff
    246c:	02090001 	.inst	0x02090001 ; undefined
    2470:	61003b8c 	.inst	0x61003b8c ; undefined
    2474:	00000000 	udf	#0
    2478:	01018903 	.inst	0x01018903 ; undefined
    247c:	053e0505 	ext	z5.b, z5.b, z8.b, #241
    2480:	0f056711 	movi	v17.2s, #0xb8, lsl #24
    2484:	0005053c 	.inst	0x0005053c ; undefined
    2488:	1f010402 	fmadd	s2, s0, s1, s1
    248c:	02040200 	.inst	0x02040200 ; undefined
    2490:	08055806 	stxrb	w5, w6, [x0]
    2494:	07055b06 	.inst	0x07055b06 ; undefined
    2498:	2f09053c 	ushr	v28.8b, v9.8b, #7
    249c:	052f1005 	ext	z5.b, z5.b, z0.b, #124
    24a0:	0f053011 	.inst	0x0f053011 ; undefined
    24a4:	211d053c 	.inst	0x211d053c ; undefined
    24a8:	053d0905 	ext	z5.b, z5.b, z8.b, #234
    24ac:	01057510 	.inst	0x01057510 ; undefined
    24b0:	00020222 	.inst	0x00020222 ; undefined
    24b4:	01050101 	.inst	0x01050101 ; undefined
    24b8:	00020900 	.inst	0x00020900 ; undefined
    24bc:	00000000 	udf	#0
    24c0:	03000000 	.inst	0x03000000 ; undefined
    24c4:	0501019a 	orr	z26.s, z26.s, #0x1fff
    24c8:	11053e05 	add	w5, w16, #0x14f
    24cc:	3c0f0567 	str	b7, [x11], #240
    24d0:	02000505 	.inst	0x02000505 ; undefined
    24d4:	001f0104 	.inst	0x001f0104 ; undefined
    24d8:	06020402 	.inst	0x06020402 ; undefined
    24dc:	06080558 	.inst	0x06080558 ; undefined
    24e0:	3c07055b 	str	b27, [x10], #112
    24e4:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    24e8:	11052f10 	add	w16, w24, #0x14b
    24ec:	3c0f0530 	str	b16, [x9], #240
    24f0:	05211d05 	ext	z5.b, z5.b, z8.b, #15
    24f4:	10053d09 	adr	x9, cc94 <__stack_size+0x8c94>
    24f8:	22010575 	.inst	0x22010575 ; undefined
    24fc:	01000202 	.inst	0x01000202 ; undefined
    2500:	00010501 	.inst	0x00010501 ; undefined
    2504:	00000209 	udf	#521
    2508:	00000000 	udf	#0
    250c:	ab030000 	adds	x0, x0, x3
    2510:	05050101 	.inst	0x05050101 ; undefined
    2514:	6811053e 	.inst	0x6811053e ; undefined
    2518:	053c0f05 	ext	z5.b, z5.b, z24.b, #227
    251c:	04020005 	.inst	0x04020005 ; undefined
    2520:	02001e01 	.inst	0x02001e01 ; undefined
    2524:	58060304 	ldr	x4, e584 <__stack_size+0xa584>
    2528:	04040200 	.inst	0x04040200 ; undefined
    252c:	06080558 	.inst	0x06080558 ; undefined
    2530:	3c07055c 	str	b28, [x10], #112
    2534:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    2538:	11052f10 	add	w16, w24, #0x14b
    253c:	311d0530 	adds	w16, w9, #0x741
    2540:	053d0905 	ext	z5.b, z5.b, z8.b, #234
    2544:	01057510 	.inst	0x01057510 ; undefined
    2548:	00020222 	.inst	0x00020222 ; undefined
    254c:	01050101 	.inst	0x01050101 ; undefined
    2550:	00020900 	.inst	0x00020900 ; undefined
    2554:	00000000 	udf	#0
    2558:	03000000 	.inst	0x03000000 ; undefined
    255c:	050101bf 	orr	z31.s, z31.s, #0x3fff
    2560:	11053e05 	add	w5, w16, #0x14f
    2564:	3c0f0567 	str	b7, [x11], #240
    2568:	02000505 	.inst	0x02000505 ; undefined
    256c:	001f0104 	.inst	0x001f0104 ; undefined
    2570:	06020402 	.inst	0x06020402 ; undefined
    2574:	06080558 	.inst	0x06080558 ; undefined
    2578:	3c07055b 	str	b27, [x10], #112
    257c:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    2580:	11052f10 	add	w16, w24, #0x14b
    2584:	3c0f0530 	str	b16, [x9], #240
    2588:	05211c05 	ext	z5.b, z5.b, z0.b, #15
    258c:	10053d09 	adr	x9, cd2c <__stack_size+0x8d2c>
    2590:	22010575 	.inst	0x22010575 ; undefined
    2594:	01000202 	.inst	0x01000202 ; undefined
    2598:	00010501 	.inst	0x00010501 ; undefined
    259c:	3c500209 	ldur	b9, [x16, #-256]
    25a0:	00006100 	udf	#24832
    25a4:	d0030000 	adrp	x0, 6004000 <__stack_size+0x6000000>
    25a8:	05050101 	.inst	0x05050101 ; undefined
    25ac:	6711053e 	.inst	0x6711053e ; undefined
    25b0:	053c0f05 	ext	z5.b, z5.b, z24.b, #227
    25b4:	04020005 	.inst	0x04020005 ; undefined
    25b8:	02001f01 	.inst	0x02001f01 ; undefined
    25bc:	58060204 	ldr	x4, e5fc <__stack_size+0xa5fc>
    25c0:	5b060805 	.inst	0x5b060805 ; undefined
    25c4:	053c0705 	ext	z5.b, z5.b, z24.b, #225
    25c8:	05302f10 	tbx	z16.b, z24.b, z16.b
    25cc:	02022201 	.inst	0x02022201 ; undefined
    25d0:	05010100 	orr	z0.s, z0.s, #0x1ff
    25d4:	02090001 	.inst	0x02090001 ; undefined
	...
    25e0:	0101dd03 	.inst	0x0101dd03 ; undefined
    25e4:	053e0d05 	ext	z5.b, z5.b, z8.b, #243
    25e8:	19053c0b 	.inst	0x19053c0b ; undefined
    25ec:	3d050521 	str	b1, [x9, #321]
    25f0:	02750105 	.inst	0x02750105 ; undefined
    25f4:	01010003 	.inst	0x01010003 ; undefined
    25f8:	09000105 	.inst	0x09000105 ; undefined
    25fc:	00000002 	udf	#2
    2600:	00000000 	udf	#0
    2604:	01e50300 	.inst	0x01e50300 ; undefined
    2608:	3d090501 	str	b1, [x8, #577]
    260c:	05230505 	ext	z5.b, z5.b, z8.b, #25
    2610:	0c053e0e 	.inst	0x0c053e0e ; undefined
    2614:	220e053c 	.inst	0x220e053c ; undefined
    2618:	053c0705 	ext	z5.b, z5.b, z24.b, #225
    261c:	31052f09 	adds	w9, w24, #0x14b
    2620:	3c09054c 	str	b12, [x10], #144
    2624:	054d0e05 	.inst	0x054d0e05 ; undefined
    2628:	0e053c0c 	umov	w12, v0.b[2]
    262c:	3c070521 	str	b1, [x9], #112
    2630:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    2634:	09054c30 	.inst	0x09054c30 ; undefined
    2638:	5c0c053c 	ldr	d28, 1a6dc <__stack_size+0x166dc>
    263c:	02210105 	.inst	0x02210105 ; undefined
    2640:	01010002 	.inst	0x01010002 ; undefined
    2644:	09000105 	.inst	0x09000105 ; undefined
    2648:	003cd402 	.inst	0x003cd402 ; NYI
    264c:	00000061 	udf	#97
    2650:	02870300 	.inst	0x02870300 ; undefined
    2654:	3d090501 	str	b1, [x8, #577]
    2658:	05240505 	ext	z5.b, z5.b, z8.b, #33
    265c:	14053e0c 	b	151e8c <__stack_size+0x14de8c>
    2660:	4b1c0521 	sub	w1, w9, w28, lsl #1
    2664:	3d05053d 	str	b29, [x9, #321]
    2668:	05752505 	.inst	0x05752505 ; undefined
    266c:	0c052005 	.inst	0x0c052005 ; undefined
    2670:	211c0550 	.inst	0x211c0550 ; undefined
    2674:	053d1b05 	ext	z5.b, z5.b, z24.b, #238
    2678:	00753d05 	.inst	0x00753d05 ; undefined
    267c:	06010402 	.inst	0x06010402 ; undefined
    2680:	060e0566 	.inst	0x060e0566 ; undefined
    2684:	3c0c052f 	str	b15, [x9], #192
    2688:	05211705 	ext	z5.b, z5.b, z24.b, #13
    268c:	00753d05 	.inst	0x00753d05 ; undefined
    2690:	06010402 	.inst	0x06010402 ; undefined
    2694:	06250566 	.inst	0x06250566 ; undefined
    2698:	2005052f 	.inst	0x2005052f ; undefined
    269c:	054c0c05 	.inst	0x054c0c05 ; undefined
    26a0:	25052105 	cmplt	p5.b, p0/z, z8.b, #5
    26a4:	20050575 	.inst	0x20050575 ; undefined
    26a8:	054b0c05 	.inst	0x054b0c05 ; undefined
    26ac:	04020001 	.inst	0x04020001 ; undefined
    26b0:	02022101 	.inst	0x02022101 ; undefined
    26b4:	05010100 	orr	z0.s, z0.s, #0x1ff
    26b8:	02090001 	.inst	0x02090001 ; undefined
    26bc:	61003e50 	.inst	0x61003e50 ; undefined
    26c0:	00000000 	udf	#0
    26c4:	0102b303 	.inst	0x0102b303 ; undefined
    26c8:	054b0905 	.inst	0x054b0905 ; undefined
    26cc:	08052205 	stxrb	w5, w5, [x16]
    26d0:	3e09053f 	.inst	0x3e09053f ; undefined
    26d4:	053d1005 	ext	z5.b, z5.b, z0.b, #236
    26d8:	1f052120 	fmadd	s0, s9, s5, s8
    26dc:	3d09053d 	str	b29, [x9, #577]
    26e0:	04020075 	.inst	0x04020075 ; undefined
    26e4:	05660601 	ext	z1.b, {z16.b, z17.b}, #49
    26e8:	052f0612 	ext	z18.b, z18.b, z16.b, #121
    26ec:	1b053c10 	madd	w16, w0, w5, w15
    26f0:	3d090521 	str	b1, [x9, #577]
    26f4:	04020075 	.inst	0x04020075 ; undefined
    26f8:	05660601 	ext	z1.b, {z16.b, z17.b}, #49
    26fc:	052f0629 	ext	z9.b, z9.b, z17.b, #121
    2700:	4b4c2009 	sub	w9, w0, w12, lsr #8
    2704:	054c1005 	.inst	0x054c1005 ; undefined
    2708:	1f052120 	fmadd	s0, s9, s5, s8
    270c:	3d09053d 	str	b29, [x9, #577]
    2710:	04020075 	.inst	0x04020075 ; undefined
    2714:	05660601 	ext	z1.b, {z16.b, z17.b}, #49
    2718:	052f0612 	ext	z18.b, z18.b, z16.b, #121
    271c:	1b053c10 	madd	w16, w0, w5, w15
    2720:	3d090521 	str	b1, [x9, #577]
    2724:	04020075 	.inst	0x04020075 ; undefined
    2728:	05660601 	ext	z1.b, {z16.b, z17.b}, #49
    272c:	052f0612 	ext	z18.b, z18.b, z16.b, #121
    2730:	1a053c10 	.inst	0x1a053c10 ; undefined
    2734:	3d090521 	str	b1, [x9, #577]
    2738:	05752905 	tbl	z5.h, {z8.h, z9.h}, z21.h
    273c:	055a2009 	mov	z9.h, p10/z, #0, lsl #8
    2740:	20053d10 	.inst	0x20053d10 ; undefined
    2744:	3d090521 	str	b1, [x9, #577]
    2748:	04020075 	.inst	0x04020075 ; undefined
    274c:	05660601 	ext	z1.b, {z16.b, z17.b}, #49
    2750:	052f0612 	ext	z18.b, z18.b, z16.b, #121
    2754:	1b053c10 	madd	w16, w0, w5, w15
    2758:	3d090521 	str	b1, [x9, #577]
    275c:	04020075 	.inst	0x04020075 ; undefined
    2760:	05660601 	ext	z1.b, {z16.b, z17.b}, #49
    2764:	052f0629 	ext	z9.b, z9.b, z17.b, #121
    2768:	4b4d2009 	sub	w9, w0, w13, lsr #8
    276c:	4c10054b 	.inst	0x4c10054b ; undefined
    2770:	05212005 	mov	z5.b, b0
    2774:	00753d09 	.inst	0x00753d09 ; undefined
    2778:	06010402 	.inst	0x06010402 ; undefined
    277c:	06120566 	.inst	0x06120566 ; undefined
    2780:	3c10052f 	str	b15, [x9], #-256
    2784:	05211b05 	ext	z5.b, z5.b, z24.b, #14
    2788:	00753d09 	.inst	0x00753d09 ; undefined
    278c:	06010402 	.inst	0x06010402 ; undefined
    2790:	06120566 	.inst	0x06120566 ; undefined
    2794:	3c10052f 	str	b15, [x9], #-256
    2798:	05211a05 	ext	z5.b, z5.b, z16.b, #14
    279c:	29053d09 	stp	w9, w15, [x8, #40]
    27a0:	20090575 	.inst	0x20090575 ; undefined
    27a4:	054c0c05 	.inst	0x054c0c05 ; undefined
    27a8:	04020001 	.inst	0x04020001 ; undefined
    27ac:	02022101 	.inst	0x02022101 ; undefined
    27b0:	05010100 	orr	z0.s, z0.s, #0x1ff
    27b4:	02090001 	.inst	0x02090001 ; undefined
    27b8:	6100425c 	.inst	0x6100425c ; undefined
    27bc:	00000000 	udf	#0
    27c0:	01038103 	.inst	0x01038103 ; undefined
    27c4:	053d0e05 	ext	z5.b, z5.b, z16.b, #235
    27c8:	0c052605 	.inst	0x0c052605 ; undefined
    27cc:	2121053d 	.inst	0x2121053d ; undefined
    27d0:	053d2205 	mov	z5.b, z16.b[14]
    27d4:	22053d1f 	.inst	0x22053d1f ; undefined
    27d8:	3d21053d 	str	b29, [x9, #2113]
    27dc:	3d23053d 	str	b29, [x9, #2241]
    27e0:	053d2105 	mov	z5.b, z8.b[14]
    27e4:	05053d1a 	.inst	0x05053d1a ; undefined
    27e8:	7525053d 	.inst	0x7525053d ; undefined
    27ec:	05200505 	ext	z5.b, z5.b, z8.b, #1
    27f0:	23054c0c 	.inst	0x23054c0c ; undefined
    27f4:	3d240521 	str	b1, [x9, #2305]
    27f8:	053d2105 	mov	z5.b, z8.b[14]
    27fc:	23053d24 	.inst	0x23053d24 ; undefined
    2800:	25053d3d 	cmple	p13.b, p7/z, z9.b, #5
    2804:	3d23053d 	str	b29, [x9, #2241]
    2808:	053d0505 	ext	z5.b, z5.b, z8.b, #233
    280c:	05057525 	.inst	0x05057525 ; undefined
    2810:	4c0c0520 	.inst	0x4c0c0520 ; undefined
    2814:	05212105 	mov	z5.b, b8
    2818:	1f053d22 	fmadd	s2, s9, s5, s15
    281c:	3d22053d 	str	b29, [x9, #2177]
    2820:	3d3d2105 	str	b5, [x8, #3912]
    2824:	053d2305 	mov	z5.b, z24.b[14]
    2828:	1a053d21 	.inst	0x1a053d21 ; undefined
    282c:	3d21053d 	str	b29, [x9, #2113]
    2830:	053d2005 	mov	z5.b, z0.b[14]
    2834:	20053d24 	.inst	0x20053d24 ; undefined
    2838:	3d22053d 	str	b29, [x9, #2177]
    283c:	053d2105 	mov	z5.b, z8.b[14]
    2840:	20053d25 	.inst	0x20053d25 ; undefined
    2844:	3d05053d 	str	b29, [x9, #321]
    2848:	05752505 	.inst	0x05752505 ; undefined
    284c:	0c052005 	.inst	0x0c052005 ; undefined
    2850:	2105054c 	.inst	0x2105054c ; undefined
    2854:	05752505 	.inst	0x05752505 ; undefined
    2858:	054c2005 	.inst	0x054c2005 ; undefined
    285c:	0105590c 	.inst	0x0105590c ; undefined
    2860:	00020221 	.inst	0x00020221 ; undefined
    2864:	01050101 	.inst	0x01050101 ; undefined
    2868:	00020900 	.inst	0x00020900 ; undefined
    286c:	00610045 	.inst	0x00610045 ; undefined
    2870:	03000000 	.inst	0x03000000 ; undefined
    2874:	050103c9 	orr	z9.s, z9.s, #0x7fffffff
    2878:	0d053d09 	.inst	0x0d053d09 ; undefined
    287c:	22050521 	.inst	0x22050521 ; undefined
    2880:	053d1a05 	ext	z5.b, z5.b, z16.b, #238
    2884:	15054a18 	b	41550e4 <__stack_size+0x41510e4>
    2888:	4a13052f 	eor	w15, w9, w19, lsl #1
    288c:	05311905 	ext	z5.b, z5.b, z8.b, #142
    2890:	10053c1d 	adr	x29, d010 <__stack_size+0x9010>
    2894:	3d130520 	str	b0, [x9, #1217]
    2898:	053c2505 	.inst	0x053c2505 ; undefined
    289c:	05052009 	.inst	0x05052009 ; undefined
    28a0:	6719052f 	.inst	0x6719052f ; undefined
    28a4:	053c1d05 	ext	z5.b, z5.b, z8.b, #231
    28a8:	13052010 	sbfx	w16, w0, #5, #4
    28ac:	3c25053d 	.inst	0x3c25053d ; undefined
    28b0:	05200905 	ext	z5.b, z5.b, z8.b, #2
    28b4:	19052f05 	.inst	0x19052f05 ; undefined
    28b8:	3c1d0567 	str	b7, [x11], #-48
    28bc:	05201005 	ext	z5.b, z5.b, z0.b, #4
    28c0:	25053d13 	cmple	p3.b, p7/z, z8.b, #5
    28c4:	2009053c 	.inst	0x2009053c ; undefined
    28c8:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    28cc:	1d056719 	.inst	0x1d056719 ; undefined
    28d0:	2010053c 	.inst	0x2010053c ; undefined
    28d4:	053f1d05 	ext	z5.b, z5.b, z8.b, #255
    28d8:	0b053c2f 	add	w15, w1, w5, lsl #15
    28dc:	20090520 	.inst	0x20090520 ; undefined
    28e0:	05212f05 	tbx	z5.b, z24.b, z1.b
    28e4:	34053c20 	cbz	w0, d068 <__stack_size+0x9068>
    28e8:	5825052f 	ldr	x15, 4c98c <__stack_size+0x4898c>
    28ec:	052f2605 	.inst	0x052f2605 ; undefined
    28f0:	1d053c20 	.inst	0x1d053c20 ; undefined
    28f4:	3c2f0531 	.inst	0x3c2f0531 ; undefined
    28f8:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    28fc:	1b052009 	madd	w9, w0, w5, w8
    2900:	3f1d0521 	.inst	0x3f1d0521 ; undefined
    2904:	053c2f05 	tbx	z5.b, z24.b, z28.b
    2908:	0905200b 	.inst	0x0905200b ; undefined
    290c:	211b0520 	.inst	0x211b0520 ; undefined
    2910:	053f1c05 	ext	z5.b, z5.b, z0.b, #255
    2914:	09053c0b 	.inst	0x09053c0b ; undefined
    2918:	21240520 	.inst	0x21240520 ; undefined
    291c:	053f1d05 	ext	z5.b, z5.b, z8.b, #255
    2920:	0b053c2f 	add	w15, w1, w5, lsl #15
    2924:	20090520 	.inst	0x20090520 ; undefined
    2928:	05212c05 	tbx	z5.b, z0.b, z1.b
    292c:	1d054a26 	.inst	0x1d054a26 ; undefined
    2930:	3c2f0531 	.inst	0x3c2f0531 ; undefined
    2934:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2938:	26052009 	.inst	0x26052009 ; undefined
    293c:	3c360521 	.inst	0x3c360521 ; undefined
    2940:	054a2605 	.inst	0x054a2605 ; undefined
    2944:	21054b27 	.inst	0x21054b27 ; undefined
    2948:	311d053c 	adds	w28, w9, #0x741
    294c:	053c2f05 	tbx	z5.b, z24.b, z28.b
    2950:	0905200b 	.inst	0x0905200b ; undefined
    2954:	21330520 	.inst	0x21330520 ; undefined
    2958:	053c2405 	.inst	0x053c2405 ; undefined
    295c:	26052f35 	.inst	0x26052f35 ; undefined
    2960:	2f350558 	ushr	v24.2s, v10.2s, #11
    2964:	05582605 	mov	z5.h, p8/z, #12288
    2968:	1e052f2d 	.inst	0x1e052f2d ; undefined
    296c:	2f200558 	ushr	v24.2s, v10.2s, #32
    2970:	05301305 	ext	z5.b, z5.b, z24.b, #132
    2974:	43053c08 	.inst	0x43053c08 ; undefined
    2978:	01040200 	.inst	0x01040200 ; undefined
    297c:	0036052e 	.inst	0x0036052e ; NYI
    2980:	3c010402 	str	b2, [x0], #16
    2984:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    2988:	25053d34 	cmple	p4.b, p7/z, z9.b, #5
    298c:	3120053c 	adds	w28, w9, #0x801
    2990:	053c0f05 	ext	z5.b, z5.b, z24.b, #227
    2994:	2505200d 	cmplt	p13.b, p0/z, z0.b, #5
    2998:	2e2e0521 	uhadd	v1.8b, v9.8b, v14.8b
    299c:	052e2505 	.inst	0x052e2505 ; undefined
    29a0:	33053f21 	bfxil	w1, w25, #5, #11
    29a4:	200f053c 	.inst	0x200f053c ; undefined
    29a8:	05200d05 	ext	z5.b, z5.b, z8.b, #3
    29ac:	35052125 	cbnz	w5, cdd0 <__stack_size+0x8dd0>
    29b0:	3c25052e 	.inst	0x3c25052e ; undefined
    29b4:	053e3c05 	.inst	0x053e3c05 ; undefined
    29b8:	3405582d 	cbz	w13, d4bc <__stack_size+0x94bc>
    29bc:	3c2d052f 	.inst	0x3c2d052f ; undefined
    29c0:	05312105 	mov	z5.b, z8.b[8]
    29c4:	0f053c33 	.inst	0x0f053c33 ; undefined
    29c8:	200d0520 	.inst	0x200d0520 ; undefined
    29cc:	05213c05 	.inst	0x05213c05 ; undefined
    29d0:	3c053c2d 	str	b13, [x1, #83]!
    29d4:	582d052f 	ldr	x15, 5ca78 <__stack_size+0x58a78>
    29d8:	052f3705 	.inst	0x052f3705 ; undefined
    29dc:	21055828 	.inst	0x21055828 ; undefined
    29e0:	3c330530 	.inst	0x3c330530 ; undefined
    29e4:	05200f05 	ext	z5.b, z5.b, z24.b, #3
    29e8:	2805200d 	stnp	w13, w8, [x0, #40]
    29ec:	4a380521 	eon	w1, w9, w24, lsl #1
    29f0:	052e2805 	tbl	z5.b, {z0.b, z1.b}, z14.b
    29f4:	3f054c33 	.inst	0x3f054c33 ; undefined
    29f8:	2e20052e 	uhadd	v14.8b, v9.8b, v0.8b
    29fc:	052f3a05 	.inst	0x052f3a05 ; undefined
    2a00:	26053c49 	.inst	0x26053c49 ; undefined
    2a04:	2e200520 	uhadd	v0.8b, v9.8b, v0.8b
    2a08:	052e2605 	.inst	0x052e2605 ; undefined
    2a0c:	39052020 	strb	w0, [x1, #328]
    2a10:	4a25053d 	eon	w29, w9, w5, lsl #1
    2a14:	053c2105 	mov	z5.s, z8.s[3]
    2a18:	2b052f20 	adds	w0, w25, w5, lsl #11
    2a1c:	3c20052e 	.inst	0x3c20052e ; undefined
    2a20:	054b1805 	.inst	0x054b1805 ; undefined
    2a24:	09053c0e 	.inst	0x09053c0e ; undefined
    2a28:	3e20052f 	.inst	0x3e20052f ; undefined
    2a2c:	053c0f05 	ext	z5.b, z5.b, z24.b, #227
    2a30:	3405200d 	cbz	w13, ce30 <__stack_size+0x8e30>
    2a34:	3c250521 	.inst	0x3c250521 ; undefined
    2a38:	05312105 	mov	z5.b, z8.b[8]
    2a3c:	0f053c33 	.inst	0x0f053c33 ; undefined
    2a40:	200d0520 	.inst	0x200d0520 ; undefined
    2a44:	05222505 	.inst	0x05222505 ; undefined
    2a48:	25052e2d 	cmplt	p13.b, p3/z, z17.b, #5
    2a4c:	3f21052e 	.inst	0x3f21052e ; undefined
    2a50:	053c3305 	tbl	z5.b, {z24.b}, z28.b
    2a54:	0d05200f 	.inst	0x0d05200f ; undefined
    2a58:	22250520 	.inst	0x22250520 ; undefined
    2a5c:	05692105 	mov	z5.b, z8.b[20]
    2a60:	0f053c33 	.inst	0x0f053c33 ; undefined
    2a64:	200d0520 	.inst	0x200d0520 ; undefined
    2a68:	05223d05 	.inst	0x05223d05 ; undefined
    2a6c:	49052e23 	.inst	0x49052e23 ; undefined
    2a70:	20540520 	.inst	0x20540520 ; undefined
    2a74:	05202005 	.inst	0x05202005 ; undefined
    2a78:	31052f21 	adds	w1, w25, #0x14b
    2a7c:	5822053f 	ldr	xzr, 46b20 <__stack_size+0x42b20>
    2a80:	052f3005 	tbl	z5.b, {z0.b}, z15.b
    2a84:	1c055821 	ldr	s1, d588 <__stack_size+0x9588>
    2a88:	3c0b0531 	str	b17, [x9], #176
    2a8c:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2a90:	31052121 	adds	w1, w9, #0x148
    2a94:	2e21054a 	uhadd	v10.8b, v10.8b, v1.8b
    2a98:	054b2d05 	.inst	0x054b2d05 ; undefined
    2a9c:	1d053c26 	.inst	0x1d053c26 ; undefined
    2aa0:	3c2f0531 	.inst	0x3c2f0531 ; undefined
    2aa4:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2aa8:	37052009 	tbnz	w9, #0, ffffffffffffcea8 <_sp+0xffffffff9efbcea8>
    2aac:	3c280521 	.inst	0x3c280521 ; undefined
    2ab0:	052f3005 	tbl	z5.b, {z0.b}, z15.b
    2ab4:	31055821 	adds	w1, w1, #0x156
    2ab8:	5822052f 	ldr	x15, 46b5c <__stack_size+0x42b5c>
    2abc:	052f3305 	tbl	z5.b, {z24.b}, z15.b
    2ac0:	1d055824 	.inst	0x1d055824 ; undefined
    2ac4:	3c2f0531 	.inst	0x3c2f0531 ; undefined
    2ac8:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2acc:	24052009 	cmpeq	p9.b, p0/z, z0.b, z5.d
    2ad0:	4a340521 	eon	w1, w9, w20, lsl #1
    2ad4:	052e2405 	.inst	0x052e2405 ; undefined
    2ad8:	2a054b39 	orr	w25, w25, w5, lsl #18
    2adc:	2f200558 	ushr	v24.2s, v10.2s, #32
    2ae0:	052f3105 	tbl	z5.b, {z8.b}, z15.b
    2ae4:	1d053c2a 	.inst	0x1d053c2a ; undefined
    2ae8:	3c2f0531 	.inst	0x3c2f0531 ; undefined
    2aec:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2af0:	36052009 	tbz	w9, #0, ffffffffffffcef0 <_sp+0xffffffff9efbcef0>
    2af4:	3c270521 	.inst	0x3c270521 ; undefined
    2af8:	052f2e05 	tbx	z5.b, z16.b, z15.b
    2afc:	3305581f 	bfxil	wzr, w0, #5, #18
    2b00:	5824052f 	ldr	x15, 4aba4 <__stack_size+0x46ba4>
    2b04:	052f3305 	tbl	z5.b, {z24.b}, z15.b
    2b08:	30055824 	adr	x4, d60d <__stack_size+0x960d>
    2b0c:	5821052f 	ldr	x15, 44bb0 <__stack_size+0x40bb0>
    2b10:	3c1a052f 	str	b15, [x9], #-96
    2b14:	05311c05 	ext	z5.b, z5.b, z0.b, #143
    2b18:	09053c0b 	.inst	0x09053c0b ; undefined
    2b1c:	212d0520 	.inst	0x212d0520 ; undefined
    2b20:	053c1e05 	ext	z5.b, z5.b, z16.b, #231
    2b24:	1d052f20 	.inst	0x1d052f20 ; undefined
    2b28:	3c2f053f 	.inst	0x3c2f053f ; undefined
    2b2c:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2b30:	25052009 	cmplt	p9.b, p0/z, z0.b, #5
    2b34:	3f1d0521 	.inst	0x3f1d0521 ; undefined
    2b38:	053c2f05 	tbx	z5.b, z24.b, z28.b
    2b3c:	0905200b 	.inst	0x0905200b ; undefined
    2b40:	21280520 	.inst	0x21280520 ; undefined
    2b44:	054a2205 	.inst	0x054a2205 ; undefined
    2b48:	3105311d 	adds	w29, w8, #0x14c
    2b4c:	200b053c 	.inst	0x200b053c ; undefined
    2b50:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2b54:	1c052122 	ldr	s2, cf78 <__stack_size+0x8f78>
    2b58:	3c0b0593 	str	b19, [x12], #176
    2b5c:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2b60:	20052126 	.inst	0x20052126 ; undefined
    2b64:	311d053c 	adds	w28, w9, #0x741
    2b68:	053c2f05 	tbx	z5.b, z24.b, z28.b
    2b6c:	0905200b 	.inst	0x0905200b ; undefined
    2b70:	21200520 	.inst	0x21200520 ; undefined
    2b74:	052e2705 	.inst	0x052e2705 ; undefined
    2b78:	1d052e20 	.inst	0x1d052e20 ; undefined
    2b7c:	3c2f053f 	.inst	0x3c2f053f ; undefined
    2b80:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2b84:	20052009 	.inst	0x20052009 ; undefined
    2b88:	2e270521 	uhadd	v1.8b, v9.8b, v7.8b
    2b8c:	052e2005 	mov	z5.h, z0.h[3]
    2b90:	2f053f1d 	.inst	0x2f053f1d ; undefined
    2b94:	200b053c 	.inst	0x200b053c ; undefined
    2b98:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2b9c:	1c052120 	ldr	s0, cfc0 <__stack_size+0x8fc0>
    2ba0:	3c0b0569 	str	b9, [x11], #176
    2ba4:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2ba8:	1d052120 	.inst	0x1d052120 ; undefined
    2bac:	3c2f053f 	.inst	0x3c2f053f ; undefined
    2bb0:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2bb4:	1e052009 	.inst	0x1e052009 ; undefined
    2bb8:	3f1d0521 	.inst	0x3f1d0521 ; undefined
    2bbc:	053c2f05 	tbx	z5.b, z24.b, z28.b
    2bc0:	0905200b 	.inst	0x0905200b ; undefined
    2bc4:	21230520 	.inst	0x21230520 ; undefined
    2bc8:	313c1d05 	adds	w5, w8, #0xf07
    2bcc:	053c2f05 	tbx	z5.b, z24.b, z28.b
    2bd0:	0905200b 	.inst	0x0905200b ; undefined
    2bd4:	211d0520 	.inst	0x211d0520 ; undefined
    2bd8:	052e2405 	.inst	0x052e2405 ; undefined
    2bdc:	1c052e1d 	ldr	s29, d19c <__stack_size+0x919c>
    2be0:	3c0b053f 	str	b31, [x9], #176
    2be4:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2be8:	2405211d 	cmpne	p13.b, p0/z, z8.b, z5.d
    2bec:	2e1d052e 	.inst	0x2e1d052e ; undefined
    2bf0:	3c2f053f 	.inst	0x3c2f053f ; undefined
    2bf4:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2bf8:	1d052009 	.inst	0x1d052009 ; undefined
    2bfc:	2f056921 	.inst	0x2f056921 ; undefined
    2c00:	200b053c 	.inst	0x200b053c ; undefined
    2c04:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2c08:	30052120 	adr	x0, d02d <__stack_size+0x902d>
    2c0c:	2e20054a 	uhadd	v10.8b, v10.8b, v0.8b
    2c10:	054b3205 	.inst	0x054b3205 ; undefined
    2c14:	1d055823 	.inst	0x1d055823 ; undefined
    2c18:	3c2f0531 	.inst	0x3c2f0531 ; undefined
    2c1c:	05200b05 	ext	z5.b, z5.b, z24.b, #2
    2c20:	23052009 	.inst	0x23052009 ; undefined
    2c24:	931c0521 	.inst	0x931c0521 ; undefined
    2c28:	053c0b05 	ext	z5.b, z5.b, z24.b, #226
    2c2c:	2d052009 	stp	s9, s8, [x0, #40]
    2c30:	3c1e0521 	str	b1, [x9], #-32
    2c34:	052f2005 	mov	z5.b, z0.b[7]
    2c38:	01053e0c 	.inst	0x01053e0c ; undefined
    2c3c:	00020221 	.inst	0x00020221 ; undefined
    2c40:	05910101 	mov	z1.s, p1/z, #8
    2c44:	00040000 	.inst	0x00040000 ; undefined
    2c48:	00000123 	udf	#291
    2c4c:	fb010104 	.inst	0xfb010104 ; undefined
    2c50:	01000d0e 	.inst	0x01000d0e ; undefined
    2c54:	00010101 	.inst	0x00010101 ; undefined
    2c58:	00010000 	.inst	0x00010000 ; undefined
    2c5c:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    2c60:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2c64:	2f436f53 	.inst	0x2f436f53 ; undefined
    2c68:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    2c6c:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    2c70:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    2c74:	492f6e6f 	.inst	0x492f6e6f ; undefined
    2c78:	756c636e 	.inst	0x756c636e ; undefined
    2c7c:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    2c80:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
    2c84:	63726161 	.inst	0x63726161 ; undefined
    2c88:	00343668 	.inst	0x00343668 ; NYI
    2c8c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    2c90:	6f532f2e 	.inst	0x6f532f2e ; undefined
    2c94:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    2c98:	70616f6d 	adr	x13, c5a87 <__stack_size+0xc1a87>
    2c9c:	6f432f75 	.inst	0x6f432f75 ; undefined
    2ca0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    2ca4:	636e492f 	.inst	0x636e492f ; undefined
    2ca8:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    2cac:	62696c2f 	.inst	0x62696c2f ; undefined
    2cb0:	2e2e0063 	uaddl	v3.8h, v3.8b, v14.8b
    2cb4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2cb8:	2f436f53 	.inst	0x2f436f53 ; undefined
    2cbc:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    2cc0:	2f636f73 	.inst	0x2f636f73 ; undefined
    2cc4:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    2cc8:	492f6e6f 	.inst	0x492f6e6f ; undefined
    2ccc:	756c636e 	.inst	0x756c636e ; undefined
    2cd0:	2e006564 	.inst	0x2e006564 ; undefined
    2cd4:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    2cd8:	436f532f 	.inst	0x436f532f ; undefined
    2cdc:	6d65642f 	ldp	d15, d25, [x1, #-432]
    2ce0:	7570616f 	.inst	0x7570616f ; undefined
    2ce4:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    2ce8:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    2cec:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    2cf0:	2f656475 	.inst	0x2f656475 ; undefined
    2cf4:	6362696c 	.inst	0x6362696c ; undefined
    2cf8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2cfc:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    2d00:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    2d04:	6d65642f 	ldp	d15, d25, [x1, #-432]
    2d08:	7570616f 	.inst	0x7570616f ; undefined
    2d0c:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    2d10:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    2d14:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    2d18:	00656475 	.inst	0x00656475 ; undefined
    2d1c:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    2d20:	632e6473 	.inst	0x632e6473 ; undefined
    2d24:	00000000 	udf	#0
    2d28:	69647473 	ldpsw	x19, x29, [x3, #-224]
    2d2c:	2e5f746e 	.inst	0x2e5f746e ; undefined
    2d30:	00010068 	.inst	0x00010068 ; undefined
    2d34:	64747300 	.inst	0x64747300 ; undefined
    2d38:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    2d3c:	00020068 	.inst	0x00020068 ; undefined
    2d40:	69746d00 	ldpsw	x0, x27, [x8, #-96]
    2d44:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    2d48:	00030068 	.inst	0x00030068 ; undefined
    2d4c:	70797400 	adr	x0, f5bcf <__stack_size+0xf1bcf>
    2d50:	00682e65 	.inst	0x00682e65 ; undefined
    2d54:	41000004 	.inst	0x41000004 ; undefined
    2d58:	6d6d5f4c 	ldp	d12, d23, [x26, #-304]
    2d5c:	00682e63 	.inst	0x00682e63 ; undefined
    2d60:	73000000 	.inst	0x73000000 ; undefined
    2d64:	6f696474 	sqshlu	v20.2d, v3.2d, #41
    2d68:	0200682e 	.inst	0x0200682e ; undefined
    2d6c:	05000000 	orr	z0.s, z0.s, #0x1
    2d70:	02090001 	.inst	0x02090001 ; undefined
    2d74:	610050b4 	.inst	0x610050b4 ; undefined
    2d78:	00000000 	udf	#0
    2d7c:	05012b03 	orr	z3.s, z3.s, #0xf80fffff
    2d80:	05212f09 	tbx	z9.b, z24.b, z1.b
    2d84:	2105270c 	.inst	0x2105270c ; undefined
    2d88:	3d220521 	str	b1, [x9, #2177]
    2d8c:	053d1f05 	ext	z5.b, z5.b, z24.b, #239
    2d90:	21053d22 	.inst	0x21053d22 ; undefined
    2d94:	23053d3d 	.inst	0x23053d3d ; undefined
    2d98:	3d21053d 	str	b29, [x9, #2113]
    2d9c:	053d1a05 	ext	z5.b, z5.b, z16.b, #238
    2da0:	0c053d05 	.inst	0x0c053d05 ; undefined
    2da4:	21250591 	.inst	0x21250591 ; undefined
    2da8:	053d2305 	mov	z5.b, z24.b[14]
    2dac:	0c053d05 	.inst	0x0c053d05 ; undefined
    2db0:	211b0592 	.inst	0x211b0592 ; undefined
    2db4:	053d1905 	ext	z5.b, z5.b, z8.b, #238
    2db8:	0b053d05 	add	w5, w8, w5, lsl #15
    2dbc:	22120592 	.inst	0x22120592 ; undefined
    2dc0:	05581005 	mov	z5.h, p8/z, #-128
    2dc4:	1405211f 	b	14b240 <__stack_size+0x147240>
    2dc8:	2109053c 	.inst	0x2109053c ; undefined
    2dcc:	053e1405 	ext	z5.b, z5.b, z0.b, #245
    2dd0:	0c05210a 	.inst	0x0c05210a ; undefined
    2dd4:	03207903 	.inst	0x03207903 ; undefined
    2dd8:	01053c0b 	.inst	0x01053c0b ; undefined
    2ddc:	00020221 	.inst	0x00020221 ; undefined
    2de0:	01050101 	.inst	0x01050101 ; undefined
    2de4:	30020900 	adr	x0, 6f05 <__stack_size+0x2f05>
    2de8:	00610052 	.inst	0x00610052 ; undefined
    2dec:	03000000 	.inst	0x03000000 ; undefined
    2df0:	050100e0 	orr	z0.s, z0.s, #0xff
    2df4:	05052f0e 	.inst	0x05052f0e ; undefined
    2df8:	0b053e26 	add	w6, w17, w5, lsl #15
    2dfc:	2105053d 	.inst	0x2105053d ; undefined
    2e00:	05680d05 	ext	z5.b, {z8.b, z9.b}, #67
    2e04:	1b052117 	madd	w23, w8, w5, w8
    2e08:	3d05053d 	str	b29, [x9, #321]
    2e0c:	04020091 	.inst	0x04020091 ; undefined
    2e10:	05820601 	and	z1.d, z1.d, #0x1ffffffffffff
    2e14:	052f062b 	ext	z11.b, z11.b, z17.b, #121
    2e18:	05052034 	.inst	0x05052034 ; undefined
    2e1c:	0b055b20 	add	w0, w25, w5, lsl #22
    2e20:	2f05053d 	mvni	v29.2s, #0xa9
    2e24:	05680d05 	ext	z5.b, {z8.b, z9.b}, #67
    2e28:	1b052117 	madd	w23, w8, w5, w8
    2e2c:	3d1e054b 	str	b11, [x10, #1921]
    2e30:	914b0505 	add	x5, x8, #0x2c1, lsl #12
    2e34:	01040200 	.inst	0x01040200 ; undefined
    2e38:	2b058206 	.inst	0x2b058206 ; undefined
    2e3c:	34052f06 	cbz	w6, d41c <__stack_size+0x941c>
    2e40:	20050520 	.inst	0x20050520 ; undefined
    2e44:	055a1205 	mov	z5.h, p10/z, #-112
    2e48:	09052105 	.inst	0x09052105 ; undefined
    2e4c:	3d0f0568 	str	b8, [x11, #961]
    2e50:	05210905 	ext	z5.b, z5.b, z8.b, #10
    2e54:	1b056811 	madd	w17, w0, w5, w26
    2e58:	4b220521 	sub	w1, w9, w2, uxtb #1
    2e5c:	054b2405 	.inst	0x054b2405 ; undefined
    2e60:	053d3d1f 	.inst	0x053d3d1f ; undefined
    2e64:	09053d25 	.inst	0x09053d25 ; undefined
    2e68:	0200913d 	.inst	0x0200913d ; undefined
    2e6c:	82060104 	.inst	0x82060104 ; undefined
    2e70:	2f062f05 	.inst	0x2f062f05 ; undefined
    2e74:	05203805 	mov	z5.b, w0
    2e78:	055b2009 	mov	z9.h, p11/z, #0, lsl #8
    2e7c:	09053d0f 	.inst	0x09053d0f ; undefined
    2e80:	6811052f 	.inst	0x6811052f ; undefined
    2e84:	05211b05 	ext	z5.b, z5.b, z24.b, #14
    2e88:	24054b22 	cmpge	p2.b, p2/z, z25.b, z5.d
    2e8c:	3d1f054b 	str	b11, [x10, #1985]
    2e90:	3d25053d 	str	b29, [x9, #2369]
    2e94:	913d0905 	add	x5, x8, #0xf42
    2e98:	01040200 	.inst	0x01040200 ; undefined
    2e9c:	2f058206 	.inst	0x2f058206 ; undefined
    2ea0:	38052f06 	strb	w6, [x24, #82]!
    2ea4:	20090520 	.inst	0x20090520 ; undefined
    2ea8:	055a1605 	mov	z5.h, p10/z, #-80
    2eac:	23055814 	.inst	0x23055814 ; undefined
    2eb0:	2e330521 	uhadd	v1.8b, v9.8b, v19.8b
    2eb4:	053c1305 	ext	z5.b, z5.b, z24.b, #228
    2eb8:	04020005 	.inst	0x04020005 ; undefined
    2ebc:	205e0301 	.inst	0x205e0301 ; undefined
    2ec0:	02040200 	.inst	0x02040200 ; undefined
    2ec4:	08053c06 	stxrb	w5, w6, [x0]
    2ec8:	58240306 	ldr	x6, 4af28 <__stack_size+0x46f28>
    2ecc:	053c0705 	ext	z5.b, z5.b, z24.b, #225
    2ed0:	052f2f10 	tbx	z16.b, z24.b, z15.b
    2ed4:	0b053205 	add	w5, w16, w5, lsl #12
    2ed8:	2105053d 	.inst	0x2105053d ; undefined
    2edc:	05681705 	ext	z5.b, {z24.b, z25.b}, #69
    2ee0:	05054b1e 	.inst	0x05054b1e ; undefined
    2ee4:	0200914b 	.inst	0x0200914b ; undefined
    2ee8:	82060104 	.inst	0x82060104 ; undefined
    2eec:	2f062b05 	.inst	0x2f062b05 ; undefined
    2ef0:	05203405 	.inst	0x05203405 ; undefined
    2ef4:	12052005 	and	w5, w0, #0xf800000f
    2ef8:	66100559 	.inst	0x66100559 ; undefined
    2efc:	053d1205 	ext	z5.b, z5.b, z16.b, #236
    2f00:	12056610 	and	w16, w16, #0xf81fffff
    2f04:	6610053d 	.inst	0x6610053d ; undefined
    2f08:	053d1205 	ext	z5.b, z5.b, z16.b, #236
    2f0c:	05056610 	.inst	0x05056610 ; undefined
    2f10:	0b05f53d 	.inst	0x0b05f53d ; undefined
    2f14:	2105053d 	.inst	0x2105053d ; undefined
    2f18:	05681705 	ext	z5.b, {z24.b, z25.b}, #69
    2f1c:	05054b1e 	.inst	0x05054b1e ; undefined
    2f20:	0200914b 	.inst	0x0200914b ; undefined
    2f24:	82060104 	.inst	0x82060104 ; undefined
    2f28:	2f062b05 	.inst	0x2f062b05 ; undefined
    2f2c:	05203405 	.inst	0x05203405 ; undefined
    2f30:	0b052005 	add	w5, w0, w5, lsl #8
    2f34:	58250559 	ldr	x25, 4cfdc <__stack_size+0x48fdc>
    2f38:	05200905 	ext	z5.b, z5.b, z8.b, #2
    2f3c:	05773d05 	.inst	0x05773d05 ; undefined
    2f40:	05053d0b 	.inst	0x05053d0b ; undefined
    2f44:	6817054b 	.inst	0x6817054b ; undefined
    2f48:	054b1e05 	.inst	0x054b1e05 ; undefined
    2f4c:	00914b05 	.inst	0x00914b05 ; undefined
    2f50:	06010402 	.inst	0x06010402 ; undefined
    2f54:	062b0582 	.inst	0x062b0582 ; undefined
    2f58:	2034052f 	.inst	0x2034052f ; undefined
    2f5c:	05200505 	ext	z5.b, z5.b, z8.b, #1
    2f60:	10055a12 	adr	x18, daa0 <__stack_size+0x9aa0>
    2f64:	3d120566 	str	b6, [x11, #1153]
    2f68:	05661005 	ext	z5.b, {z0.b, z1.b}, #52
    2f6c:	10053d12 	adr	x18, d70c <__stack_size+0x970c>
    2f70:	3d120566 	str	b6, [x11, #1153]
    2f74:	05661005 	ext	z5.b, {z0.b, z1.b}, #52
    2f78:	05f53d05 	.inst	0x05f53d05 ; undefined
    2f7c:	07053d0e 	.inst	0x07053d0e ; undefined
    2f80:	3d10054b 	str	b11, [x10, #1025]
    2f84:	05310505 	ext	z5.b, z5.b, z8.b, #137
    2f88:	07053d0e 	.inst	0x07053d0e ; undefined
    2f8c:	3d100567 	str	b7, [x11, #1025]
    2f90:	05320505 	ext	z5.b, z5.b, z8.b, #145
    2f94:	05053d0b 	.inst	0x05053d0b ; undefined
    2f98:	6817054b 	.inst	0x6817054b ; undefined
    2f9c:	054b1e05 	.inst	0x054b1e05 ; undefined
    2fa0:	00913d05 	.inst	0x00913d05 ; undefined
    2fa4:	06010402 	.inst	0x06010402 ; undefined
    2fa8:	062b0582 	.inst	0x062b0582 ; undefined
    2fac:	2034052f 	.inst	0x2034052f ; undefined
    2fb0:	05200505 	ext	z5.b, z5.b, z8.b, #1
    2fb4:	01055a0c 	.inst	0x01055a0c ; undefined
    2fb8:	01040200 	.inst	0x01040200 ; undefined
    2fbc:	00020221 	.inst	0x00020221 ; undefined
    2fc0:	01050101 	.inst	0x01050101 ; undefined
    2fc4:	3c020900 	.inst	0x3c020900 ; undefined
    2fc8:	0061005b 	.inst	0x0061005b ; undefined
    2fcc:	03000000 	.inst	0x03000000 ; undefined
    2fd0:	050101fd 	orr	z29.s, z29.s, #0xffff
    2fd4:	05052f0e 	.inst	0x05052f0e ; undefined
    2fd8:	0b053e24 	add	w4, w17, w5, lsl #15
    2fdc:	4b05053d 	sub	w29, w9, w5, lsl #1
    2fe0:	05680d05 	ext	z5.b, {z8.b, z9.b}, #67
    2fe4:	1e052117 	.inst	0x1e052117 ; undefined
    2fe8:	4b20054b 	sub	w11, w10, w0, uxtb #1
    2fec:	3d3d1b05 	str	b5, [x24, #3910]
    2ff0:	053d2105 	mov	z5.b, z8.b[14]
    2ff4:	00913d05 	.inst	0x00913d05 ; undefined
    2ff8:	06010402 	.inst	0x06010402 ; undefined
    2ffc:	062b0582 	.inst	0x062b0582 ; undefined
    3000:	2034052f 	.inst	0x2034052f ; undefined
    3004:	5b200505 	.inst	0x5b200505 ; undefined
    3008:	053d0b05 	ext	z5.b, z5.b, z24.b, #234
    300c:	17052f05 	b	fffffffffc14ec20 <_sp+0xffffffff9b10ec20>
    3010:	4b1e0568 	sub	w8, w11, w30, lsl #1
    3014:	914b0505 	add	x5, x8, #0x2c1, lsl #12
    3018:	01040200 	.inst	0x01040200 ; undefined
    301c:	2b058206 	.inst	0x2b058206 ; undefined
    3020:	34052f06 	cbz	w6, d600 <__stack_size+0x9600>
    3024:	20050520 	.inst	0x20050520 ; undefined
    3028:	055a0c05 	mov	z5.h, p10/z, #96
    302c:	04020001 	.inst	0x04020001 ; undefined
    3030:	02022101 	.inst	0x02022101 ; undefined
    3034:	05010100 	orr	z0.s, z0.s, #0x1ff
    3038:	02090001 	.inst	0x02090001 ; undefined
    303c:	61005d04 	.inst	0x61005d04 ; undefined
    3040:	00000000 	udf	#0
    3044:	0102b903 	.inst	0x0102b903 ; undefined
    3048:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    304c:	0c05300e 	.inst	0x0c05300e ; undefined
    3050:	21080520 	.inst	0x21080520 ; undefined
    3054:	053f0e05 	ext	z5.b, z5.b, z16.b, #251
    3058:	08054a0c 	stxrb	w5, w12, [x16]
    305c:	3f0e0521 	.inst	0x3f0e0521 ; undefined
    3060:	05580c05 	mov	z5.h, p8/z, #96
    3064:	0e052108 	tbl	v8.8b, {v8.16b, v9.16b}, v5.8b
    3068:	4a0c053f 	eor	wzr, w9, w12, lsl #1
    306c:	05210805 	ext	z5.b, z5.b, z0.b, #10
    3070:	0c053f0e 	.inst	0x0c053f0e ; undefined
    3074:	21080520 	.inst	0x21080520 ; undefined
    3078:	053f0e05 	ext	z5.b, z5.b, z16.b, #251
    307c:	0805200c 	stxrb	w5, w12, [x0]
    3080:	400c0521 	.inst	0x400c0521 ; undefined
    3084:	69030305 	stgp	x5, x0, [x24, #96]
    3088:	3232322e 	orr	w14, w17, #0x7ffc000
    308c:	09053232 	.inst	0x09053232 ; undefined
    3090:	21010525 	.inst	0x21010525 ; undefined
    3094:	01000202 	.inst	0x01000202 ; undefined
    3098:	00010501 	.inst	0x00010501 ; undefined
    309c:	5df40209 	.inst	0x5df40209 ; undefined
    30a0:	00006100 	udf	#24832
    30a4:	e5030000 	.inst	0xe5030000 ; undefined
    30a8:	0e050102 	tbl	v2.8b, {v8.16b}, v5.8b
    30ac:	211b0559 	.inst	0x211b0559 ; undefined
    30b0:	35210c05 	cbnz	w5, 45230 <__stack_size+0x41230>
    30b4:	05211405 	ext	z5.b, z5.b, z0.b, #13
    30b8:	1c053d1b 	ldr	s27, d858 <__stack_size+0x9858>
    30bc:	05053d3d 	.inst	0x05053d3d ; undefined
    30c0:	0583913d 	and	z29.d, z29.d, #0xffc000
    30c4:	0505910c 	.inst	0x0505910c ; undefined
    30c8:	91250521 	add	x1, x9, #0x941
    30cc:	05200505 	ext	z5.b, z5.b, z8.b, #1
    30d0:	05054b25 	.inst	0x05054b25 ; undefined
    30d4:	4a170320 	eor	w0, w25, w23
    30d8:	053d0b05 	ext	z5.b, z5.b, z24.b, #234
    30dc:	0f052f05 	.inst	0x0f052f05 ; undefined
    30e0:	580d0567 	ldr	x7, 1d18c <__stack_size+0x1918c>
    30e4:	05211405 	ext	z5.b, z5.b, z0.b, #13
    30e8:	053d3d1b 	.inst	0x053d3d1b ; undefined
    30ec:	1e053d21 	.inst	0x1e053d21 ; undefined
    30f0:	17054b3d 	b	fffffffffc155de4 <_sp+0xffffffff9b115de4>
    30f4:	4b11053d 	sub	w29, w9, w17, lsl #1
    30f8:	05580f05 	mov	z5.h, p8/z, #120
    30fc:	1c05211f 	ldr	s31, d51c <__stack_size+0x951c>
    3100:	4b050567 	sub	w7, w11, w5, lsl #1
    3104:	912b0591 	add	x17, x12, #0xac1
    3108:	05200505 	ext	z5.b, z5.b, z8.b, #1
    310c:	05054b27 	.inst	0x05054b27 ; undefined
    3110:	4b020520 	sub	w0, w9, w2, lsl #1
    3114:	01040200 	.inst	0x01040200 ; undefined
    3118:	05058206 	.inst	0x05058206 ; undefined
    311c:	02002f06 	.inst	0x02002f06 ; undefined
    3120:	82060104 	.inst	0x82060104 ; undefined
    3124:	30060905 	adr	x5, f245 <__stack_size+0xb245>
    3128:	02000105 	.inst	0x02000105 ; undefined
    312c:	02210104 	.inst	0x02210104 ; undefined
    3130:	01010002 	.inst	0x01010002 ; undefined
    3134:	09000105 	.inst	0x09000105 ; undefined
    3138:	0060b002 	.inst	0x0060b002 ; undefined
    313c:	00000061 	udf	#97
    3140:	03b30300 	.inst	0x03b30300 ; undefined
    3144:	590e0501 	.inst	0x590e0501 ; undefined
    3148:	05211805 	ext	z5.b, z5.b, z0.b, #14
    314c:	0505210c 	.inst	0x0505210c ; undefined
    3150:	3d0c0535 	str	b21, [x9, #769]
    3154:	05211405 	ext	z5.b, z5.b, z0.b, #13
    3158:	1c053d1b 	ldr	s27, d8f8 <__stack_size+0x98f8>
    315c:	05053d3d 	.inst	0x05053d3d ; undefined
    3160:	0583913d 	and	z29.d, z29.d, #0xffc000
    3164:	05059125 	.inst	0x05059125 ; undefined
    3168:	4b0c0520 	sub	w0, w9, w12, lsl #1
    316c:	05210505 	ext	z5.b, z5.b, z8.b, #9
    3170:	05059125 	.inst	0x05059125 ; undefined
    3174:	4a170320 	eor	w0, w25, w23
    3178:	053d0b05 	ext	z5.b, z5.b, z24.b, #234
    317c:	0f052f05 	.inst	0x0f052f05 ; undefined
    3180:	580d0567 	ldr	x7, 1d22c <__stack_size+0x1922c>
    3184:	05211405 	ext	z5.b, z5.b, z0.b, #13
    3188:	1b053d20 	madd	w0, w9, w5, w15
    318c:	21053d3d 	.inst	0x21053d3d ; undefined
    3190:	3d1e053d 	str	b29, [x9, #1921]
    3194:	3d17054b 	str	b11, [x10, #1473]
    3198:	054b1105 	.inst	0x054b1105 ; undefined
    319c:	1f05580f 	fmadd	s15, s0, s5, s22
    31a0:	671c0521 	.inst	0x671c0521 ; undefined
    31a4:	914b0505 	add	x5, x8, #0x2c1, lsl #12
    31a8:	05912b05 	mov	z5.s, p1/z, #22528
    31ac:	27052005 	.inst	0x27052005 ; undefined
    31b0:	2005054b 	.inst	0x2005054b ; undefined
    31b4:	004b0205 	.inst	0x004b0205 ; undefined
    31b8:	06010402 	.inst	0x06010402 ; undefined
    31bc:	06050582 	.inst	0x06050582 ; undefined
    31c0:	0402002f 	.inst	0x0402002f ; undefined
    31c4:	05820601 	and	z1.d, z1.d, #0x1ffffffffffff
    31c8:	05300609 	ext	z9.b, z9.b, z16.b, #129
    31cc:	04020001 	.inst	0x04020001 ; undefined
    31d0:	02022101 	.inst	0x02022101 ; undefined
    31d4:	75010100 	.inst	0x75010100 ; undefined
    31d8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    31dc:	00005000 	udf	#20480
    31e0:	01010400 	.inst	0x01010400 ; undefined
    31e4:	000d0efb 	.inst	0x000d0efb ; undefined
    31e8:	01010101 	.inst	0x01010101 ; undefined
    31ec:	01000000 	.inst	0x01000000 ; undefined
    31f0:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
    31f4:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    31f8:	436f532f 	.inst	0x436f532f ; undefined
    31fc:	6d65642f 	ldp	d15, d25, [x1, #-432]
    3200:	7570616f 	.inst	0x7570616f ; undefined
    3204:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    3208:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    320c:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    3210:	2f656475 	.inst	0x2f656475 ; undefined
    3214:	6362696c 	.inst	0x6362696c ; undefined
    3218:	616d0000 	.inst	0x616d0000 ; undefined
    321c:	632e6e69 	.inst	0x632e6e69 ; undefined
    3220:	00000000 	udf	#0
    3224:	69647473 	ldpsw	x19, x29, [x3, #-224]
    3228:	682e746e 	.inst	0x682e746e ; undefined
    322c:	00000100 	udf	#256
    3230:	00100500 	.inst	0x00100500 ; undefined
    3234:	63840209 	.inst	0x63840209 ; undefined
    3238:	00006100 	udf	#24832
    323c:	21030000 	.inst	0x21030000 ; undefined
    3240:	03020501 	.inst	0x03020501 ; undefined
    3244:	01052e10 	.inst	0x01052e10 ; undefined
    3248:	02201003 	.inst	0x02201003 ; undefined
    324c:	01010003 	.inst	0x01010003 ; undefined
    3250:	000003c4 	udf	#964
    3254:	01390004 	.inst	0x01390004 ; undefined
    3258:	01040000 	.inst	0x01040000 ; undefined
    325c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    3260:	01010100 	.inst	0x01010100 ; undefined
    3264:	00000001 	udf	#1
    3268:	01000001 	.inst	0x01000001 ; undefined
    326c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    3270:	6f532f2e 	.inst	0x6f532f2e ; undefined
    3274:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    3278:	70616f6d 	adr	x13, c6067 <__stack_size+0xc2067>
    327c:	6f432f75 	.inst	0x6f432f75 ; undefined
    3280:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    3284:	636e492f 	.inst	0x636e492f ; undefined
    3288:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    328c:	62696c2f 	.inst	0x62696c2f ; undefined
    3290:	61612f63 	.inst	0x61612f63 ; undefined
    3294:	36686372 	tbz	w18, #13, 3f00 <__stack_size-0x100>
    3298:	2e2e0034 	uaddl	v20.8h, v1.8b, v14.8b
    329c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    32a0:	2f436f53 	.inst	0x2f436f53 ; undefined
    32a4:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    32a8:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    32ac:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    32b0:	492f6e6f 	.inst	0x492f6e6f ; undefined
    32b4:	756c636e 	.inst	0x756c636e ; undefined
    32b8:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    32bc:	00636269 	.inst	0x00636269 ; undefined
    32c0:	46544146 	.inst	0x46544146 ; undefined
    32c4:	2e2e0053 	uaddl	v19.8h, v2.8b, v14.8b
    32c8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    32cc:	2f436f53 	.inst	0x2f436f53 ; undefined
    32d0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    32d4:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    32d8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    32dc:	492f6e6f 	.inst	0x492f6e6f ; undefined
    32e0:	756c636e 	.inst	0x756c636e ; undefined
    32e4:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    32e8:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
    32ec:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    32f0:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    32f4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    32f8:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    32fc:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    3300:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    3304:	492f6e6f 	.inst	0x492f6e6f ; undefined
    3308:	756c636e 	.inst	0x756c636e ; undefined
    330c:	00006564 	udf	#25956
    3310:	6f696473 	sqshlu	v19.2d, v3.2d, #41
    3314:	7365745f 	.inst	0x7365745f ; undefined
    3318:	00632e74 	.inst	0x00632e74 ; undefined
    331c:	73000000 	.inst	0x73000000 ; undefined
    3320:	65646474 	fnmls	z20.h, p1/m, z3.h, z4.h
    3324:	682e5f66 	.inst	0x682e5f66 ; undefined
    3328:	00000100 	udf	#256
    332c:	69647473 	ldpsw	x19, x29, [x3, #-224]
    3330:	2e5f746e 	.inst	0x2e5f746e ; undefined
    3334:	00010068 	.inst	0x00010068 ; undefined
    3338:	64747300 	.inst	0x64747300 ; undefined
    333c:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    3340:	00020068 	.inst	0x00020068 ; undefined
    3344:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    3348:	2e636d6d 	umin	v13.4h, v11.4h, v3.4h
    334c:	00000068 	udf	#104
    3350:	746e6900 	.inst	0x746e6900 ; undefined
    3354:	72656765 	.inst	0x72656765 ; undefined
    3358:	0300682e 	.inst	0x0300682e ; undefined
    335c:	66660000 	.inst	0x66660000 ; undefined
    3360:	0300682e 	.inst	0x0300682e ; undefined
    3364:	79740000 	ldrh	w0, [x0, #6656]
    3368:	682e6570 	.inst	0x682e6570 ; undefined
    336c:	00000400 	udf	#1024
    3370:	69727473 	ldpsw	x19, x29, [x3, #-112]
    3374:	682e676e 	.inst	0x682e676e ; undefined
    3378:	00000200 	udf	#512
    337c:	735f4c41 	.inst	0x735f4c41 ; undefined
    3380:	00682e64 	.inst	0x00682e64 ; undefined
    3384:	73000000 	.inst	0x73000000 ; undefined
    3388:	6f696474 	sqshlu	v20.2d, v3.2d, #41
    338c:	0200682e 	.inst	0x0200682e ; undefined
    3390:	05000000 	orr	z0.s, z0.s, #0x1
    3394:	02090001 	.inst	0x02090001 ; undefined
	...
    33a0:	05013203 	orr	z3.s, z3.s, #0xfc0007ff
    33a4:	1b05670e 	madd	w14, w24, w5, w25
    33a8:	220c0521 	.inst	0x220c0521 ; undefined
    33ac:	21140535 	.inst	0x21140535 ; undefined
    33b0:	053d1b05 	ext	z5.b, z5.b, z24.b, #238
    33b4:	053d3d1c 	.inst	0x053d3d1c ; undefined
    33b8:	83913d05 	.inst	0x83913d05 ; undefined
    33bc:	05910c05 	mov	z5.s, p1/z, #96
    33c0:	25052105 	cmplt	p5.b, p0/z, z8.b, #5
    33c4:	20050591 	.inst	0x20050591 ; undefined
    33c8:	054b2505 	.inst	0x054b2505 ; undefined
    33cc:	054d2005 	.inst	0x054d2005 ; undefined
    33d0:	05053d0b 	.inst	0x05053d0b ; undefined
    33d4:	6711052f 	.inst	0x6711052f ; undefined
    33d8:	05580f05 	mov	z5.h, p8/z, #120
    33dc:	1c05211f 	ldr	s31, d7fc <__stack_size+0x97fc>
    33e0:	5a0d0567 	.inst	0x5a0d0567 ; undefined
    33e4:	05212005 	mov	z5.b, b0
    33e8:	1e053d21 	.inst	0x1e053d21 ; undefined
    33ec:	4b17053d 	sub	w29, w9, w23, lsl #1
    33f0:	3d4b1b05 	ldr	b5, [x24, #710]
    33f4:	913d0505 	add	x5, x8, #0xf41
    33f8:	04020091 	.inst	0x04020091 ; undefined
    33fc:	05820601 	and	z1.d, z1.d, #0x1ffffffffffff
    3400:	052f062b 	ext	z11.b, z11.b, z17.b, #121
    3404:	27052005 	.inst	0x27052005 ; undefined
    3408:	2005054b 	.inst	0x2005054b ; undefined
    340c:	3d0b054d 	str	b13, [x10, #705]
    3410:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    3414:	1405680d 	b	15d448 <__stack_size+0x159448>
    3418:	3d200521 	str	b1, [x9, #2049]
    341c:	3d3d1b05 	str	b5, [x24, #3910]
    3420:	053d2105 	mov	z5.b, z8.b[14]
    3424:	054b3d1e 	.inst	0x054b3d1e ; undefined
    3428:	11053d17 	add	w23, w8, #0x14f
    342c:	580f054c 	ldr	x12, 214d4 <__stack_size+0x1d4d4>
    3430:	05211f05 	ext	z5.b, z5.b, z24.b, #15
    3434:	0505671c 	.inst	0x0505671c ; undefined
    3438:	2b059159 	.inst	0x2b059159 ; undefined
    343c:	20050591 	.inst	0x20050591 ; undefined
    3440:	054b2705 	.inst	0x054b2705 ; undefined
    3444:	02052005 	.inst	0x02052005 ; undefined
    3448:	0402004b 	.inst	0x0402004b ; undefined
    344c:	05820601 	and	z1.d, z1.d, #0x1ffffffffffff
    3450:	0a030605 	and	w5, w16, w3, lsl #1
    3454:	0402002e 	.inst	0x0402002e ; undefined
    3458:	05820601 	and	z1.d, z1.d, #0x1ffffffffffff
    345c:	05310609 	ext	z9.b, z9.b, z16.b, #137
    3460:	04020001 	.inst	0x04020001 ; undefined
    3464:	02022101 	.inst	0x02022101 ; undefined
    3468:	05010100 	orr	z0.s, z0.s, #0x1ff
    346c:	02090001 	.inst	0x02090001 ; undefined
	...
    3478:	01019003 	.inst	0x01019003 ; undefined
    347c:	05670e05 	ext	z5.b, {z16.b, z17.b}, #59
    3480:	0c052118 	.inst	0x0c052118 ; undefined
    3484:	35050522 	cbnz	w2, d528 <__stack_size+0x9528>
    3488:	053d0c05 	ext	z5.b, z5.b, z0.b, #235
    348c:	1b052114 	madd	w20, w8, w5, w8
    3490:	3d1c054b 	str	b11, [x10, #1793]
    3494:	3d05053d 	str	b29, [x9, #321]
    3498:	25059191 	cmpne	p1.b, p4/z, z12.b, #5
    349c:	20050591 	.inst	0x20050591 ; undefined
    34a0:	054b0c05 	.inst	0x054b0c05 ; undefined
    34a4:	25052105 	cmplt	p5.b, p0/z, z8.b, #5
    34a8:	20050591 	.inst	0x20050591 ; undefined
    34ac:	3d0b054d 	str	b13, [x10, #705]
    34b0:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    34b4:	0f056711 	movi	v17.2s, #0xb8, lsl #24
    34b8:	221f0558 	.inst	0x221f0558 ; undefined
    34bc:	05671c05 	ext	z5.b, {z0.b, z1.b}, #63
    34c0:	0d05590f 	.inst	0x0d05590f ; undefined
    34c4:	22200558 	.inst	0x22200558 ; undefined
    34c8:	053d2105 	mov	z5.b, z8.b[14]
    34cc:	17053d1e 	b	fffffffffc152944 <_sp+0xffffffff9b112944>
    34d0:	4b1b054b 	sub	w11, w10, w27, lsl #1
    34d4:	3d05053d 	str	b29, [x9, #321]
    34d8:	02009191 	.inst	0x02009191 ; undefined
    34dc:	82060104 	.inst	0x82060104 ; undefined
    34e0:	2f062b05 	.inst	0x2f062b05 ; undefined
    34e4:	05200505 	ext	z5.b, z5.b, z8.b, #1
    34e8:	05054b27 	.inst	0x05054b27 ; undefined
    34ec:	0b054d20 	add	w0, w9, w5, lsl #19
    34f0:	2f05053d 	mvni	v29.2s, #0xa9
    34f4:	05670f05 	ext	z5.b, {z24.b, z25.b}, #59
    34f8:	1405580d 	b	15952c <__stack_size+0x15552c>
    34fc:	3d200522 	str	b2, [x9, #2049]
    3500:	3d3d1b05 	str	b5, [x24, #3910]
    3504:	053d2105 	mov	z5.b, z8.b[14]
    3508:	1d053d1e 	.inst	0x1d053d1e ; undefined
    350c:	4b1e053d 	sub	w29, w9, w30, lsl #1
    3510:	3d17054b 	str	b11, [x10, #1473]
    3514:	054b1105 	.inst	0x054b1105 ; undefined
    3518:	1f05580f 	fmadd	s15, s0, s5, s22
    351c:	671c0522 	.inst	0x671c0522 ; undefined
    3520:	91590505 	add	x5, x8, #0x641, lsl #12
    3524:	05912b05 	mov	z5.s, p1/z, #22528
    3528:	27052005 	.inst	0x27052005 ; undefined
    352c:	2005054b 	.inst	0x2005054b ; undefined
    3530:	004b0205 	.inst	0x004b0205 ; undefined
    3534:	06010402 	.inst	0x06010402 ; undefined
    3538:	06050582 	.inst	0x06050582 ; undefined
    353c:	002e0c03 	.inst	0x002e0c03 ; NYI
    3540:	06010402 	.inst	0x06010402 ; undefined
    3544:	06090582 	.inst	0x06090582 ; undefined
    3548:	00010531 	.inst	0x00010531 ; undefined
    354c:	21010402 	.inst	0x21010402 ; undefined
    3550:	01000202 	.inst	0x01000202 ; undefined
    3554:	00010501 	.inst	0x00010501 ; undefined
    3558:	639c0209 	.inst	0x639c0209 ; undefined
    355c:	00006100 	udf	#24832
    3560:	eb030000 	subs	x0, x0, x3
    3564:	05050101 	.inst	0x05050101 ; undefined
    3568:	3d0d0541 	str	b1, [x10, #833]
    356c:	05200505 	ext	z5.b, z5.b, z8.b, #1
    3570:	0402001b 	.inst	0x0402001b ; undefined
    3574:	18052103 	ldr	w3, d994 <__stack_size+0x9994>
    3578:	03040200 	.inst	0x03040200 ; undefined
    357c:	00230558 	.inst	0x00230558 ; NYI
    3580:	49030402 	.inst	0x49030402 ; undefined
    3584:	02001605 	.inst	0x02001605 ; undefined
    3588:	053c0104 	ext	z4.b, z4.b, z8.b, #224
    358c:	054b3f05 	.inst	0x054b3f05 ; undefined
    3590:	0c053d0e 	.inst	0x0c053d0e ; undefined
    3594:	21070520 	.inst	0x21070520 ; undefined
    3598:	053d1005 	ext	z5.b, z5.b, z0.b, #236
    359c:	3a053005 	.inst	0x3a053005 ; undefined
    35a0:	3c0e053d 	str	b29, [x9], #224
    35a4:	05580c05 	mov	z5.h, p8/z, #96
    35a8:	10052107 	adr	x7, d9c8 <__stack_size+0x99c8>
    35ac:	3005053d 	adr	x29, d651 <__stack_size+0x9651>
    35b0:	053d3a05 	.inst	0x053d3a05 ; undefined
    35b4:	0c053c0e 	.inst	0x0c053c0e ; undefined
    35b8:	21070558 	.inst	0x21070558 ; undefined
    35bc:	053d1005 	ext	z5.b, z5.b, z0.b, #236
    35c0:	0805300e 	stxrb	w5, w14, [x0]
    35c4:	3e09054b 	.inst	0x3e09054b ; undefined
    35c8:	053d1005 	ext	z5.b, z5.b, z0.b, #236
    35cc:	0c053009 	.inst	0x0c053009 ; undefined
    35d0:	0001053f 	.inst	0x0001053f ; undefined
    35d4:	21010402 	.inst	0x21010402 ; undefined
    35d8:	01000302 	.inst	0x01000302 ; undefined
    35dc:	00010501 	.inst	0x00010501 ; undefined
    35e0:	65040209 	.inst	0x65040209 ; undefined
    35e4:	00006100 	udf	#24832
    35e8:	99030000 	stlur	w0, [x0, #48]
    35ec:	07050102 	.inst	0x07050102 ; undefined
    35f0:	0505834c 	.inst	0x0505834c ; undefined
    35f4:	3d0e05f5 	str	b21, [x15, #897]
    35f8:	052f0705 	ext	z5.b, z5.b, z24.b, #121
    35fc:	10053d09 	adr	x9, dd9c <__stack_size+0x9d9c>
    3600:	3009054b 	adr	x11, 156a9 <__stack_size+0x116a9>
    3604:	053e0505 	ext	z5.b, z5.b, z8.b, #241
    3608:	3c33030c 	.inst	0x3c33030c ; undefined
    360c:	02000105 	.inst	0x02000105 ; undefined
    3610:	02210104 	.inst	0x02210104 ; undefined
    3614:	01010004 	.inst	0x01010004 ; undefined

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
{
       0:	00000023 	udf	#35
       4:	00000004 	udf	#4
       8:	01080000 	.inst	0x01080000 ; undefined
       c:	00000000 	udf	#0
	panic();
      10:	61000950 	.inst	0x61000950 ; undefined
}
      14:	00000000 	udf	#0
      18:	00000010 	udf	#16
      1c:	00002f00 	udf	#12032
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	00006600 	udf	#26112
      24:	23800100 	.inst	0x23800100 ; undefined
      28:	04000000 	add	z0.b, p0/m, z0.b, z0.b
      2c:	00001400 	udf	#5120
	return 0;
      30:	64010800 	.inst	0x64010800 ; undefined
}
      34:	60000000 	.inst	0x60000000 ; undefined
      38:	00610009 	.inst	0x00610009 ; undefined
    __delay(delay_cnt);
      3c:	40000000 	.inst	0x40000000 ; undefined
      40:	00000072 	udf	#114
}
      44:	0000002f 	udf	#47
      48:	00000066 	udf	#102
      4c:	00248001 	.inst	0x00248001 ; NYI
    } while(Tconsumed < DelayCnt);
      50:	00040000 	.inst	0x00040000 ; undefined
    return 0;
      54:	00000028 	udf	#40
}
      58:	00ca0108 	.inst	0x00ca0108 ; undefined
      5c:	08000000 	stxrb	w0, w0, [x0]
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
      60:	00006100 	udf	#24832
      64:	02d00000 	.inst	0x02d00000 ; undefined
      68:	0000009c 	udf	#156
      6c:	0000002f 	udf	#47
    if(Mtimer_IsTimerOut(&mtimer)){
      70:	00000066 	udf	#102
      74:	00248001 	.inst	0x00248001 ; NYI
      78:	00040000 	.inst	0x00040000 ; undefined
      7c:	0000003c 	udf	#60
      80:	01660108 	.inst	0x01660108 ; undefined
        error_stat_check(r);
      84:	10000000 	adr	x0, 84 <__stack_size-0x3f7c>
      88:	00006100 	udf	#24832
        return MMC_XFER_TIMEOUT;
      8c:	0a900000 	and	w0, w0, w16, asr #0
      90:	000000d2 	udf	#210
        if(r.bit.xfer_complete == 1){
      94:	0000002f 	udf	#47
      98:	00000066 	udf	#102
        r.bit.dma_interrupt = 0x1;
      9c:	01958001 	.inst	0x01958001 ; undefined
      a0:	00040000 	.inst	0x00040000 ; undefined
      a4:	00000050 	udf	#80
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
      a8:	02200108 	.inst	0x02200108 ; undefined
      ac:	de0c0000 	.inst	0xde0c0000 ; undefined
      b0:	2f000001 	.inst	0x2f000001 ; undefined
	...
      c0:	29000000 	stp	w0, w0, [x0]
        return MMC_SUCCESS;
      c4:	02000002 	.inst	0x02000002 ; undefined
}
      c8:	01cb0508 	.inst	0x01cb0508 ; undefined
      cc:	08020000 	stxrb	w2, w0, [x0]
            break;
      d0:	00017c07 	.inst	0x00017c07 ; undefined
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d4:	05100200 	mov	z0.b, p0/z, #16
      d8:	00000146 	udf	#326
      dc:	00071002 	.inst	0x00071002 ; undefined
            retval = Uart_event_modem;
      e0:	02000001 	.inst	0x02000001 ; undefined
            break;
      e4:	01140601 	.inst	0x01140601 ; undefined
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	02020000 	.inst	0x02020000 ; undefined
      ec:	0001d405 	.inst	0x0001d405 ; undefined
      f0:	05040300 	.inst	0x05040300 ; undefined
        	retval =Uart_event_thre;
      f4:	00746e69 	.inst	0x00746e69 ; undefined
      f8:	12080102 	and	w2, w8, #0x1000000
        	break;
      fc:	02000001 	.inst	0x02000001 ; undefined
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	01330702 	.inst	0x01330702 ; undefined
     104:	04020000 	.inst	0x04020000 ; undefined
     108:	00018107 	.inst	0x00018107 ; undefined
        	retval = Uart_event_timeout;
     10c:	05080200 	.inst	0x05080200 ; undefined
     110:	000001c6 	udf	#454
        	break;
     114:	77070802 	.inst	0x77070802 ; undefined
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	02000001 	.inst	0x02000001 ; undefined
     11c:	011b0801 	.inst	0x011b0801 ; undefined
     120:	75040000 	.inst	0x75040000 ; undefined
        	retval = Received_data_available;
     124:	03003233 	.inst	0x03003233 ; undefined
     128:	00681634 	.inst	0x00681634 ; undefined
            break;
     12c:	4f050000 	.inst	0x4f050000 ; undefined
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	02000001 	.inst	0x02000001 ; undefined
     134:	00681510 	.inst	0x00681510 ; undefined
     138:	03090000 	.inst	0x03090000 ; undefined
        	retval = Receiver_line_status;
     13c:	61006ea0 	.inst	0x61006ea0 ; undefined
     140:	00000000 	udf	#0
            break;
     144:	00012006 	.inst	0x00012006 ; undefined
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	06400200 	.inst	0x06400200 ; undefined
     14c:	610015ac 	.inst	0x610015ac ; undefined
     150:	00000000 	udf	#0
        	retval = Uart_event_busy;
     154:	0000004c 	udf	#76
     158:	00000000 	udf	#0
            break;
     15c:	8e079c01 	.inst	0x8e079c01 ; undefined
            retval = 0;
     160:	02000001 	.inst	0x02000001 ; undefined
            break;
     164:	00680e32 	.inst	0x00680e32 ; undefined
    return retval;
     168:	15940000 	b	6500168 <__stack_size+0x64fc168>
}
     16c:	00006100 	udf	#24832
     170:	00180000 	.inst	0x00180000 ; undefined
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
     174:	00000000 	udf	#0
     178:	9c010000 	ldr	q0, 2178 <__stack_size-0x1e88>
     17c:	000000f2 	udf	#242
     180:	0029d405 	.inst	0x0029d405 ; NYI
     184:	0f340200 	.inst	0x0f340200 ; undefined
     188:	00000068 	udf	#104
     18c:	007c9102 	.inst	0x007c9102 ; undefined
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
     190:	0001a507 	.inst	0x0001a507 ; undefined
     194:	05270200 	ext	z0.b, z0.b, z16.b, #56
     198:	00000053 	udf	#83
     19c:	61001578 	.inst	0x61001578 ; undefined
     1a0:	00000000 	udf	#0
     1a4:	0000001c 	udf	#28
     1a8:	00000000 	udf	#0
     1ac:	01249c01 	.inst	0x01249c01 ; undefined
     1b0:	76080000 	.inst	0x76080000 ; undefined
     1b4:	02006c61 	.inst	0x02006c61 ; undefined
     1b8:	00682627 	.inst	0x00682627 ; undefined
     1bc:	91020000 	add	x0, x0, #0x80
     1c0:	6209007c 	.inst	0x6209007c ; undefined
		writel_relaxed(0, GICD_CTLR);
     1c4:	02000001 	.inst	0x02000001 ; undefined
     1c8:	00530c17 	.inst	0x00530c17 ; undefined
     1cc:	15580000 	b	56001cc <__stack_size+0x55fc1cc>
		gic_dist_wait();
     1d0:	00006100 	udf	#24832
		if (int_group == GROUP_1_NONSECURE) {
     1d4:	00200000 	.inst	0x00200000 ; NYI
     1d8:	00000000 	udf	#0
     1dc:	9c010000 	ldr	q0, 21dc <__stack_size-0x1e24>
			gicd_igroup  |= (0x01 << int_id);
     1e0:	00000154 	udf	#340
     1e4:	0200760a 	.inst	0x0200760a ; undefined
     1e8:	00680f19 	.inst	0x00680f19 ; undefined
     1ec:	91020000 	add	x0, x0, #0x80
     1f0:	b90b007c 	str	w28, [x3, #2816]
     1f4:	01000001 	.inst	0x01000001 ; undefined
     1f8:	15101d18 	b	4407658 <__stack_size+0x4403658>
			gicd_igrpmod &= (~(0x01 << int_id));
     1fc:	00006100 	udf	#24832
     200:	00240000 	.inst	0x00240000 ; NYI
     204:	00000000 	udf	#0
     208:	9c010000 	ldr	q0, 2208 <__stack_size-0x1df8>
     20c:	00000191 	udf	#401
     210:	6c617608 	ldnp	d8, d29, [x16, #-496]
     214:	2e180100 	ext	v0.8b, v8.8b, v24.8b, #0
     218:	00000084 	udf	#132
     21c:	0c7c9102 	.inst	0x0c7c9102 ; undefined
		} else if (int_group == GROUP_1_SECURE) {
     220:	00000532 	udf	#1330
     224:	914a1801 	add	x1, x0, #0x286, lsl #12
     228:	02000001 	.inst	0x02000001 ; undefined
			gicd_igroup  &= (~(0x01 << int_id));
     22c:	0d007091 	st3	{v17.h-v19.h}[2], [x4]
     230:	00019708 	.inst	0x00019708 ; undefined
     234:	40000e00 	.inst	0x40000e00 ; undefined
     238:	0400000d 	add	z13.b, p0/m, z13.b, z0.b
     23c:	00014900 	.inst	0x00014900 ; undefined
     240:	20010800 	.inst	0x20010800 ; undefined
     244:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
     248:	00000356 	udf	#854
			gicd_igrpmod |= (0x01 << int_id);
     24c:	0000002f 	udf	#47
     250:	000000c0 	udf	#192
	...
     25c:	00000363 	udf	#867
     260:	cb050802 	sub	x2, x0, x5, lsl #2
     264:	02000001 	.inst	0x02000001 ; undefined
     268:	017c0708 	.inst	0x017c0708 ; undefined
		} else if(int_group == GROUP_0) {
     26c:	10020000 	adr	x0, 426c <__stack_size+0x26c>
     270:	00014605 	.inst	0x00014605 ; undefined
     274:	07100200 	.inst	0x07100200 ; undefined
			gicd_igroup  &= (~(0x01 << int_id));
     278:	00000100 	udf	#256
     27c:	14060102 	b	180684 <__stack_size+0x17c684>
     280:	02000001 	.inst	0x02000001 ; undefined
     284:	01d40502 	.inst	0x01d40502 ; undefined
     288:	04030000 	subr	z0.b, p0/m, z0.b, z0.b
     28c:	746e6905 	.inst	0x746e6905 ; undefined
     290:	08010200 	stxrb	w1, w0, [x16]
     294:	00000112 	udf	#274
			gicd_igrpmod &= (0x01 << int_id);
     298:	33070202 	bfi	w2, w16, #25, #1
     29c:	02000001 	.inst	0x02000001 ; undefined
     2a0:	01810704 	.inst	0x01810704 ; undefined
     2a4:	08020000 	stxrb	w2, w0, [x0]
     2a8:	0001c605 	.inst	0x0001c605 ; undefined
     2ac:	07080200 	.inst	0x07080200 ; undefined
     2b0:	00000177 	udf	#375
		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
     2b4:	1b080102 	madd	w2, w8, w8, w0
     2b8:	04000001 	add	z1.b, p0/m, z1.b, z0.b
     2bc:	0000007d 	udf	#125
     2c0:	32337505 	orr	w5, w8, #0xffffe7ff
     2c4:	16340500 	b	fffffffff8d016c4 <_sp+0xffffffff97cc16c4>
     2c8:	00000068 	udf	#104
     2cc:	00062206 	.inst	0x00062206 ; undefined
     2d0:	16360500 	b	fffffffff8d816d0 <_sp+0xffffffff97d416d0>
     2d4:	00000068 	udf	#104
     2d8:	34367505 	cbz	w5, 6d178 <__stack_size+0x69178>
     2dc:	1c3a0500 	ldr	s0, 7437c <__stack_size+0x7037c>
     2e0:	00000076 	udf	#118
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
     2e4:	68040707 	.inst	0x68040707 ; undefined
     2e8:	01000000 	.inst	0x01000000 ; undefined
     2ec:	00ce0e0f 	.inst	0x00ce0e0f ; undefined
     2f0:	fb080000 	.inst	0xfb080000 ; undefined
     2f4:	00000002 	udf	#2
     2f8:	00049108 	.inst	0x00049108 ; undefined
     2fc:	0f080100 	.inst	0x0f080100 ; undefined
     300:	02000003 	.inst	0x02000003 ; undefined
     304:	05da0600 	mov	z0.d, p10/z, #48
     308:	23040000 	.inst	0x23040000 ; undefined
     30c:	0000da10 	udf	#55824
     310:	e0080900 	.inst	0xe0080900 ; undefined
		gic_dist_wait();
     314:	0a000000 	and	w0, w0, w0
}
     318:	000000e7 	udf	#231
     31c:	ce0c000b 	eor3	v11.16b, v0.16b, v12.16b, v0.16b
     320:	f8000000 	stur	x0, [x0]
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
     324:	0d000000 	st1	{v0.b}[0], [x0]
     328:	00000030 	udf	#48
     32c:	0e000103 	tbl	v3.8b, {v8.16b}, v0.8b
     330:	000004f7 	udf	#1271
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
     334:	e7152504 	.inst	0xe7152504 ; undefined
     338:	09000000 	.inst	0x09000000 ; undefined
     33c:	006ea803 	.inst	0x006ea803 ; undefined
     340:	00000061 	udf	#97
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
     344:	06350e00 	.inst	0x06350e00 ; undefined
     348:	26040000 	.inst	0x26040000 ; undefined
     34c:	0000e715 	udf	#59157
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
     350:	c8030900 	stxr	w3, x0, [x8]
     354:	00610076 	.inst	0x00610076 ; undefined
     358:	0f000000 	.inst	0x0f000000 ; undefined
     35c:	00000791 	udf	#1937
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
     360:	53051406 	ubfx	w6, w0, #5, #1
     364:	3b000000 	.inst	0x3b000000 ; undefined
     368:	10000001 	adr	x1, 368 <__stack_size-0x3c98>
     36c:	0000013b 	udf	#315
     370:	0809000b 	stxrb	w9, w11, [x0]
     374:	00000084 	udf	#132
    block.bit.xfer_block_size = BlockSize;
     378:	0004ae11 	.inst	0x0004ae11 ; undefined
     37c:	03500400 	.inst	0x03500400 ; undefined
     380:	00000053 	udf	#83
     384:	00000153 	udf	#339
     388:	7f12000b 	.inst	0x7f12000b ; undefined
     38c:	04000005 	add	z5.b, p0/m, z5.b, z0.b
    block.bit.blockcount_r = BlockNum;
     390:	530501fa 	ubfiz	w26, w15, #27, #1
	...
     39c:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
     3a0:	00000003 	udf	#3
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
     3a4:	01000000 	.inst	0x01000000 ; undefined
     3a8:	00028f9c 	.inst	0x00028f9c ; undefined
     3ac:	05431300 	eor	z0.d, z0.d, #0x7fffffc0000000
     3b0:	fa040000 	sbcs	x0, x0, x4
     3b4:	00531901 	.inst	0x00531901 ; undefined
     3b8:	91020000 	add	x0, x0, #0x80
     3bc:	0524135c 	ext	z28.b, z28.b, z26.b, #36
     3c0:	fa040000 	sbcs	x0, x0, x4
     3c4:	00532501 	.inst	0x00532501 ; undefined
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
     3c8:	91020000 	add	x0, x0, #0x80
     3cc:	00001458 	udf	#5208
     3d0:	00000000 	udf	#0
     3d4:	013c0000 	.inst	0x013c0000 ; undefined
     3d8:	00000000 	udf	#0
     3dc:	02140000 	.inst	0x02140000 ; undefined
     3e0:	ea150000 	ands	x0, x0, x21
     3e4:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     3e8:	890701fe 	.inst	0x890701fe ; undefined
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
     3ec:	02000000 	.inst	0x02000000 ; undefined
     3f0:	61157c91 	.inst	0x61157c91 ; undefined
     3f4:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     3f8:	890701ff 	.inst	0x890701ff ; undefined
     3fc:	02000000 	.inst	0x02000000 ; undefined
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
     400:	00147891 	.inst	0x00147891 ; undefined
     404:	00000000 	udf	#0
     408:	14000000 	b	408 <__stack_size-0x3bf8>
     40c:	00000000 	udf	#0
     410:	f1000000 	subs	x0, x0, #0x0
	MMC_WAIT_CMD_COMPLETE(SDIO);
     414:	16000001 	b	fffffffff8000418 <_sp+0xffffffff96fc0418>
     418:	00725f5f 	.inst	0x00725f5f ; undefined
     41c:	1501fe04 	b	407fc2c <__stack_size+0x407bc2c>
     420:	00000089 	udf	#137
     424:	00649102 	.inst	0x00649102 ; undefined
     428:	00000017 	udf	#23
     42c:	00000000 	udf	#0
     430:	00001400 	udf	#5120
     434:	00000000 	udf	#0
     438:	5f5f1600 	ssra	d0, d16, #33
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
     43c:	ff040072 	.inst	0xff040072 ; undefined
     440:	00891501 	.inst	0x00891501 ; undefined
     444:	91020000 	add	x0, x0, #0x80
     448:	17000060 	b	fffffffffc0005c8 <_sp+0xffffffff9afc05c8>
	...
     454:	000001bc 	udf	#444
     458:	00000000 	udf	#0
     45c:	00039b15 	.inst	0x00039b15 ; undefined
     460:	02130400 	.inst	0x02130400 ; undefined
	return MMC_SUCCESS;
     464:	00008907 	udf	#35079
}
     468:	74910200 	.inst	0x74910200 ; undefined
     46c:	00062815 	.inst	0x00062815 ; undefined
     470:	02140400 	.inst	0x02140400 ; undefined
     474:	00008907 	udf	#35079
     478:	70910200 	adr	x0, fffffffffff224bb <_sp+0xffffffff9eee24bb>
     47c:	00000014 	udf	#20
     480:	00000000 	udf	#0
     484:	00003000 	udf	#12288
     488:	00000000 	udf	#0
     48c:	00026b00 	.inst	0x00026b00 ; undefined
     490:	5f5f1600 	ssra	d0, d16, #33
     494:	13040072 	sbfiz	w18, w3, #28, #1
     498:	00891602 	.inst	0x00891602 ; undefined
     49c:	91020000 	add	x0, x0, #0x80
     4a0:	0017006c 	.inst	0x0017006c ; undefined
     4a4:	00000000 	udf	#0
     4a8:	30000000 	adr	x0, 4a9 <__stack_size-0x3b57>
     4ac:	00000000 	udf	#0
     4b0:	16000000 	b	fffffffff80004b0 <_sp+0xffffffff96fc04b0>
     4b4:	00725f5f 	.inst	0x00725f5f ; undefined
     4b8:	16021404 	b	fffffffff80854c8 <_sp+0xffffffff970454c8>
     4bc:	00000089 	udf	#137
     4c0:	00689102 	.inst	0x00689102 ; undefined
     4c4:	ab120000 	adds	x0, x0, x18
     4c8:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     4cc:	530501de 	ubfiz	w30, w14, #27, #1
	...
     4d8:	d8000000 	prfm	pldl1keep, 4d8 <__stack_size-0x3b28>
     4dc:	00000000 	udf	#0
     4e0:	01000000 	.inst	0x01000000 ; undefined
     4e4:	0003159c 	.inst	0x0003159c ; undefined
     4e8:	05431300 	eor	z0.d, z0.d, #0x7fffffc0000000
     4ec:	de040000 	.inst	0xde040000 ; undefined
     4f0:	00532001 	.inst	0x00532001 ; undefined
     4f4:	91020000 	add	x0, x0, #0x80
     4f8:	05b9136c 	.inst	0x05b9136c ; undefined
     4fc:	de040000 	.inst	0xde040000 ; undefined
     500:	00532c01 	.inst	0x00532c01 ; undefined
     504:	91020000 	add	x0, x0, #0x80
     508:	05321568 	ext	z8.b, z8.b, z11.b, #149
     50c:	e0040000 	.inst	0xe0040000 ; undefined
     510:	03151101 	.inst	0x03151101 ; undefined
     514:	91020000 	add	x0, x0, #0x80
     518:	72701678 	.inst	0x72701678 ; undefined
     51c:	e1040069 	.inst	0xe1040069 ; undefined
     520:	00890601 	.inst	0x00890601 ; undefined
     524:	91020000 	add	x0, x0, #0x80
     528:	00001770 	udf	#6000
     52c:	00000000 	udf	#0
     530:	00200000 	.inst	0x00200000 ; NYI
     534:	00000000 	udf	#0
     538:	5f160000 	.inst	0x5f160000 ; undefined
     53c:	0400725f 	mls	z31.b, p4/m, z18.b, z0.b
     540:	890801ed 	.inst	0x890801ed ; undefined
     544:	02000000 	.inst	0x02000000 ; undefined
     548:	00007491 	udf	#29841
     54c:	e9190818 	.inst	0xe9190818 ; undefined
     550:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     554:	000601d2 	.inst	0x000601d2 ; undefined
     558:	00000000 	udf	#0
     55c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     560:	00000000 	udf	#0
     564:	01000000 	.inst	0x01000000 ; undefined
     568:	04cc199c 	sabd	z28.d, p6/m, z28.d, z12.d
     56c:	c9040000 	.inst	0xc9040000 ; undefined
     570:	00000601 	udf	#1537
     574:	00000000 	udf	#0
     578:	000c0000 	.inst	0x000c0000 ; undefined
     57c:	00000000 	udf	#0
     580:	9c010000 	ldr	q0, 2580 <__stack_size-0x1a80>
     584:	00065e1a 	.inst	0x00065e1a ; undefined
     588:	01ad0400 	.inst	0x01ad0400 ; undefined
     58c:	00206406 	.inst	0x00206406 ; NYI
     590:	00000061 	udf	#97
     594:	0000a400 	udf	#41984
     598:	00000000 	udf	#0
     59c:	8d9c0100 	.inst	0x8d9c0100 ; undefined
     5a0:	15000003 	b	40005ac <__stack_size+0x3ffc5ac>
     5a4:	00000543 	udf	#1347
     5a8:	0601af04 	.inst	0x0601af04 ; undefined
     5ac:	00000089 	udf	#137
     5b0:	15749102 	b	5d249b8 <__stack_size+0x5d209b8>
     5b4:	00000678 	udf	#1656
     5b8:	0901b004 	.inst	0x0901b004 ; undefined
     5bc:	000000da 	udf	#218
     5c0:	00789102 	.inst	0x00789102 ; undefined
     5c4:	00053712 	.inst	0x00053712 ; undefined
     5c8:	019b0400 	.inst	0x019b0400 ; undefined
     5cc:	00006824 	udf	#26660
     5d0:	00200c00 	.inst	0x00200c00 ; NYI
     5d4:	00000061 	udf	#97
     5d8:	00005800 	udf	#22528
     5dc:	00000000 	udf	#0
     5e0:	e39c0100 	.inst	0xe39c0100 ; undefined
     5e4:	15000003 	b	40005f0 <__stack_size+0x3ffc5f0>
     5e8:	00000543 	udf	#1347
     5ec:	0f019d04 	.inst	0x0f019d04 ; undefined
     5f0:	00000068 	udf	#104
     5f4:	177c9102 	b	fffffffffdf249fc <_sp+0xffffffff9cee49fc>
     5f8:	6100202c 	.inst	0x6100202c ; undefined
     5fc:	00000000 	udf	#0
     600:	00000014 	udf	#20
     604:	00000000 	udf	#0
     608:	725f5f16 	.inst	0x725f5f16 ; undefined
     60c:	01a20400 	.inst	0x01a20400 ; undefined
     610:	0000890c 	udf	#35084
     614:	78910200 	ldursh	x0, [x16, #-240]
     618:	2b1a0000 	adds	w0, w0, w26
     61c:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     620:	2c060178 	stnp	s24, s0, [x11, #48]
     624:	0061001f 	.inst	0x0061001f ; undefined
     628:	e0000000 	.inst	0xe0000000 ; undefined
     62c:	00000000 	udf	#0
     630:	01000000 	.inst	0x01000000 ; undefined
     634:	0004459c 	.inst	0x0004459c ; undefined
     638:	05431500 	eor	z0.d, z0.d, #0xffffffffc000007f
     63c:	7a040000 	sbcs	w0, w0, w4
     640:	00890601 	.inst	0x00890601 ; undefined
     644:	91020000 	add	x0, x0, #0x80
     648:	0678157c 	.inst	0x0678157c ; undefined
     64c:	86040000 	.inst	0x86040000 ; undefined
     650:	00da0901 	.inst	0x00da0901 ; undefined
     654:	91020000 	add	x0, x0, #0x80
     658:	1f4c1770 	fmadd	d16, d27, d12, d5
     65c:	00006100 	udf	#24832
     660:	00140000 	.inst	0x00140000 ; undefined
     664:	00000000 	udf	#0
     668:	5f160000 	.inst	0x5f160000 ; undefined
     66c:	0400725f 	mls	z31.b, p4/m, z18.b, z0.b
     670:	890c017f 	.inst	0x890c017f ; undefined
     674:	02000000 	.inst	0x02000000 ; undefined
     678:	00006c91 	udf	#27793
     67c:	0004731a 	.inst	0x0004731a ; undefined
     680:	01680400 	.inst	0x01680400 ; undefined
     684:	00000006 	udf	#6
     688:	00000000 	udf	#0
     68c:	00004c00 	udf	#19456
     690:	00000000 	udf	#0
     694:	859c0100 	ldr	p0, [x8, #224, mul vl]
     698:	13000004 	sbfx	w4, w0, #0, #1
     69c:	00000543 	udf	#1347
     6a0:	1b016804 	madd	w4, w0, w1, w26
     6a4:	00000053 	udf	#83
     6a8:	156c9102 	b	5b24ab0 <__stack_size+0x5b20ab0>
     6ac:	00000532 	udf	#1330
     6b0:	11016a04 	add	w4, w16, #0x5a
     6b4:	00000315 	udf	#789
     6b8:	00789102 	.inst	0x00789102 ; undefined
     6bc:	0004041a 	.inst	0x0004041a ; undefined
     6c0:	01580400 	.inst	0x01580400 ; undefined
     6c4:	00000006 	udf	#6
     6c8:	00000000 	udf	#0
     6cc:	00004c00 	udf	#19456
     6d0:	00000000 	udf	#0
     6d4:	c59c0100 	.inst	0xc59c0100 ; undefined
     6d8:	13000004 	sbfx	w4, w0, #0, #1
     6dc:	00000543 	udf	#1347
     6e0:	1c015804 	ldr	s4, 31e0 <__stack_size-0xe20>
     6e4:	00000053 	udf	#83
     6e8:	156c9102 	b	5b24af0 <__stack_size+0x5b20af0>
     6ec:	00000532 	udf	#1330
     6f0:	11015a04 	add	w4, w16, #0x56
     6f4:	00000315 	udf	#789
     6f8:	00789102 	.inst	0x00789102 ; undefined
     6fc:	0004161b 	.inst	0x0004161b ; undefined
     700:	014c0400 	.inst	0x014c0400 ; undefined
     704:	0000000d 	udf	#13
     708:	00000000 	udf	#0
     70c:	00006400 	udf	#25600
     710:	00000000 	udf	#0
     714:	259c0100 	cmpge	p0.s, p0/z, z8.s, #-4
     718:	1c000005 	ldr	s5, 718 <__stack_size-0x38e8>
     71c:	00717269 	.inst	0x00717269 ; undefined
     720:	1f014c04 	fmadd	s4, s0, s1, s19
     724:	00000053 	udf	#83
     728:	136c9102 	.inst	0x136c9102 ; undefined
     72c:	0000052e 	udf	#1326
     730:	33014c04 	bfxil	w4, w0, #1, #19
     734:	00000315 	udf	#789
     738:	15609102 	b	5824b40 <__stack_size+0x5820b40>
     73c:	000024cf 	udf	#9423
     740:	06014e04 	.inst	0x06014e04 ; undefined
     744:	00000089 	udf	#137
     748:	157c9102 	b	5f24b50 <__stack_size+0x5f20b50>
     74c:	00000532 	udf	#1330
     750:	11014f04 	add	w4, w24, #0x53
     754:	00000315 	udf	#789
     758:	00709102 	.inst	0x00709102 ; undefined
     75c:	0004681d 	.inst	0x0004681d ; undefined
     760:	01410400 	.inst	0x01410400 ; undefined
     764:	001f041c 	.inst	0x001f041c ; undefined
     768:	00000061 	udf	#97
     76c:	00002800 	udf	#10240
     770:	00000000 	udf	#0
     774:	1a9c0100 	csel	w0, w8, w28, eq  // eq = none
     778:	00000424 	udf	#1060
     77c:	06012f04 	.inst	0x06012f04 ; undefined
     780:	61001ea8 	.inst	0x61001ea8 ; undefined
     784:	00000000 	udf	#0
     788:	0000005c 	udf	#92
     78c:	00000000 	udf	#0
     790:	05789c01 	.inst	0x05789c01 ; undefined
     794:	691e0000 	stgp	x0, x0, [x0, #960]
     798:	01310400 	.inst	0x01310400 ; undefined
     79c:	00005306 	udf	#21254
     7a0:	04e11f00 	uqsub	z0.d, z24.d, z1.d
     7a4:	32040000 	orr	w0, w0, #0x10000000
     7a8:	00890601 	.inst	0x00890601 ; undefined
     7ac:	20000000 	.inst	0x20000000 ; undefined
     7b0:	000003c8 	udf	#968
     7b4:	0d012504 	.inst	0x0d012504 ; undefined
     7b8:	61001e68 	.inst	0x61001e68 ; undefined
     7bc:	00000000 	udf	#0
     7c0:	00000040 	udf	#64
     7c4:	00000000 	udf	#0
     7c8:	fb1b9c01 	.inst	0xfb1b9c01 ; undefined
     7cc:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     7d0:	280d0114 	stnp	w20, w0, [x8, #104]
     7d4:	0061001e 	.inst	0x0061001e ; undefined
     7d8:	40000000 	.inst	0x40000000 ; undefined
     7dc:	00000000 	udf	#0
     7e0:	01000000 	.inst	0x01000000 ; undefined
     7e4:	0005d59c 	.inst	0x0005d59c ; undefined
     7e8:	1e301700 	fccmp	s24, s16, #0x0, ne  // ne = any
     7ec:	00006100 	udf	#24832
     7f0:	00100000 	.inst	0x00100000 ; undefined
     7f4:	00000000 	udf	#0
     7f8:	a5150000 	ld1rqw	{z0.s}, p0/z, [x0, x21, lsl #2]
     7fc:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     800:	a1020119 	.inst	0xa1020119 ; undefined
     804:	02000000 	.inst	0x02000000 ; undefined
     808:	00007891 	udf	#30865
     80c:	0004d921 	.inst	0x0004d921 ; undefined
     810:	01080400 	.inst	0x01080400 ; undefined
     814:	0000890c 	udf	#35084
	...
     820:	00004000 	udf	#16384
     824:	00000000 	udf	#0
     828:	099c0100 	.inst	0x099c0100 ; undefined
     82c:	15000006 	b	4000844 <__stack_size+0x3ffc844>
     830:	000004e1 	udf	#1249
     834:	06010a04 	.inst	0x06010a04 ; undefined
     838:	00000089 	udf	#137
     83c:	007c9102 	.inst	0x007c9102 ; undefined
     840:	0003a722 	.inst	0x0003a722 ; undefined
     844:	0dfa0400 	ld2	{v0.b, v1.b}[1], [x0], x26
     848:	0000063b 	udf	#1595
     84c:	61001dc8 	.inst	0x61001dc8 ; undefined
     850:	00000000 	udf	#0
     854:	00000060 	udf	#96
     858:	00000000 	udf	#0
     85c:	063b9c01 	.inst	0x063b9c01 ; undefined
     860:	76230000 	.inst	0x76230000 ; undefined
     864:	04006c61 	mls	z1.b, p3/m, z3.b, z0.b
     868:	008906fc 	.inst	0x008906fc ; undefined
     86c:	91020000 	add	x0, x0, #0x80
     870:	0102007c 	.inst	0x0102007c ; undefined
     874:	0005d402 	.inst	0x0005d402 ; undefined
     878:	05c22400 	mov	z0.d, #0xf00000001fffffff
     87c:	d0040000 	adrp	x0, 8002000 <__stack_size+0x7ffe000>
     880:	001c9406 	.inst	0x001c9406 ; undefined
     884:	00000061 	udf	#97
     888:	00013400 	.inst	0x00013400 ; undefined
     88c:	00000000 	udf	#0
     890:	8b9c0100 	add	x0, x8, x28, asr #0
     894:	25000006 	cmpge	p6.b, p0/z, z0.b, #0
     898:	00000524 	udf	#1316
     89c:	891cd004 	.inst	0x891cd004 ; undefined
     8a0:	02000000 	.inst	0x02000000 ; undefined
     8a4:	69236c91 	stgp	x17, x27, [x4, #-928]
     8a8:	06d20400 	.inst	0x06d20400 ; undefined
     8ac:	00000089 	udf	#137
     8b0:	237c9102 	.inst	0x237c9102 ; undefined
     8b4:	0400726e 	mls	z14.b, p4/m, z19.b, z0.b
     8b8:	008906d3 	.inst	0x008906d3 ; undefined
     8bc:	91020000 	add	x0, x0, #0x80
     8c0:	b6240078 	tbz	x24, #36, ffffffffffff88cc <_sp+0xffffffff9efb88cc>
     8c4:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     8c8:	1b7806b1 	.inst	0x1b7806b1 ; undefined
     8cc:	00006100 	udf	#24832
     8d0:	011c0000 	.inst	0x011c0000 ; undefined
     8d4:	00000000 	udf	#0
     8d8:	9c010000 	ldr	q0, 28d8 <__stack_size-0x1728>
     8dc:	0000075a 	udf	#1882
     8e0:	00216425 	.inst	0x00216425 ; NYI
     8e4:	1db10400 	.inst	0x1db10400 ; undefined
     8e8:	0000063b 	udf	#1595
     8ec:	0e5f9102 	.inst	0x0e5f9102 ; undefined
     8f0:	00000776 	udf	#1910
     8f4:	8906b304 	.inst	0x8906b304 ; undefined
     8f8:	02000000 	.inst	0x02000000 ; undefined
     8fc:	76237c91 	.inst	0x76237c91 ; undefined
     900:	04006c61 	mls	z1.b, p3/m, z3.b, z0.b
     904:	008906b4 	.inst	0x008906b4 ; undefined
     908:	91020000 	add	x0, x0, #0x80
     90c:	1b901478 	.inst	0x1b901478 ; undefined
     910:	00006100 	udf	#24832
     914:	00140000 	.inst	0x00140000 ; undefined
     918:	00000000 	udf	#0
     91c:	06fb0000 	.inst	0x06fb0000 ; undefined
     920:	5f230000 	.inst	0x5f230000 ; undefined
     924:	0400725f 	mls	z31.b, p4/m, z18.b, z0.b
     928:	008908b6 	.inst	0x008908b6 ; undefined
     92c:	91020000 	add	x0, x0, #0x80
     930:	f4140074 	.inst	0xf4140074 ; undefined
     934:	0061001b 	.inst	0x0061001b ; undefined
     938:	14000000 	b	938 <__stack_size-0x36c8>
     93c:	00000000 	udf	#0
     940:	20000000 	.inst	0x20000000 ; undefined
     944:	23000007 	.inst	0x23000007 ; undefined
     948:	00725f5f 	.inst	0x00725f5f ; undefined
     94c:	8909bf04 	.inst	0x8909bf04 ; undefined
     950:	02000000 	.inst	0x02000000 ; undefined
     954:	26007091 	.inst	0x26007091 ; undefined
     958:	00000090 	udf	#144
     95c:	0004ae11 	.inst	0x0004ae11 ; undefined
     960:	03500400 	.inst	0x03500400 ; undefined
     964:	00000053 	udf	#83
     968:	00000737 	udf	#1847
     96c:	2017000b 	.inst	0x2017000b ; undefined
     970:	0061001c 	.inst	0x0061001c ; undefined
     974:	14000000 	b	974 <__stack_size-0x368c>
     978:	00000000 	udf	#0
     97c:	23000000 	.inst	0x23000000 ; undefined
     980:	00725f5f 	.inst	0x00725f5f ; undefined
     984:	8909c504 	.inst	0x8909c504 ; undefined
     988:	02000000 	.inst	0x02000000 ; undefined
     98c:	00006c91 	udf	#27793
     990:	04582400 	orv	h0, p1, z0.h
     994:	69040000 	stgp	x0, x0, [x0, #128]
     998:	00182c06 	.inst	0x00182c06 ; undefined
     99c:	00000061 	udf	#97
     9a0:	00034c00 	.inst	0x00034c00 ; undefined
     9a4:	00000000 	udf	#0
     9a8:	fe9c0100 	.inst	0xfe9c0100 ; undefined
     9ac:	25000007 	cmpge	p7.b, p0/z, z0.b, #0
     9b0:	00000524 	udf	#1316
     9b4:	891a6904 	.inst	0x891a6904 ; undefined
     9b8:	02000000 	.inst	0x02000000 ; undefined
     9bc:	69235c91 	stgp	x17, x23, [x4, #-928]
     9c0:	066b0400 	.inst	0x066b0400 ; undefined
     9c4:	00000089 	udf	#137
     9c8:	0e7c9102 	sqdmlal	v2.4s, v8.4h, v28.4h
     9cc:	00000612 	udf	#1554
     9d0:	89066c04 	.inst	0x89066c04 ; undefined
     9d4:	02000000 	.inst	0x02000000 ; undefined
     9d8:	58277091 	ldr	x17, 4f7e8 <__stack_size+0x4b7e8>
     9dc:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     9e0:	0089176c 	.inst	0x0089176c ; undefined
     9e4:	390e0000 	strb	w0, [x0, #896]
     9e8:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     9ec:	0089216c 	.inst	0x0089216c ; undefined
     9f0:	91020000 	add	x0, x0, #0x80
     9f4:	067f0e6c 	.inst	0x067f0e6c ; undefined
     9f8:	6d040000 	stp	d0, d0, [x0, #64]
     9fc:	00008906 	udf	#35078
     a00:	74910200 	.inst	0x74910200 ; undefined
     a04:	00044f0e 	.inst	0x00044f0e ; undefined
     a08:	066e0400 	.inst	0x066e0400 ; undefined
     a0c:	000000a1 	udf	#161
     a10:	17609102 	b	fffffffffd824e18 <_sp+0xffffffff9c7e4e18>
     a14:	61001848 	.inst	0x61001848 ; undefined
     a18:	00000000 	udf	#0
     a1c:	00000014 	udf	#20
     a20:	00000000 	udf	#0
     a24:	725f5f23 	.inst	0x725f5f23 ; undefined
     a28:	0f740400 	.inst	0x0f740400 ; undefined
     a2c:	00000089 	udf	#137
     a30:	00789102 	.inst	0x00789102 ; undefined
     a34:	04422800 	.inst	0x04422800 ; undefined
     a38:	5e040000 	sha1c	q0, s0, v4.4s
     a3c:	0000a10c 	udf	#41228
     a40:	00180400 	.inst	0x00180400 ; undefined
     a44:	00000061 	udf	#97
     a48:	00002800 	udf	#10240
     a4c:	00000000 	udf	#0
     a50:	3f9c0100 	.inst	0x3f9c0100 ; undefined
     a54:	25000008 	cmpge	p8.b, p0/z, z0.b, #0
     a58:	00000433 	udf	#1075
     a5c:	30305e04 	adr	x4, 6161d <__stack_size+0x5d61d>
     a60:	02000000 	.inst	0x02000000 ; undefined
     a64:	61236891 	.inst	0x61236891 ; undefined
     a68:	04006666 	mls	z6.b, p1/m, z19.b, z0.b
     a6c:	00a10660 	.inst	0x00a10660 ; undefined
     a70:	91020000 	add	x0, x0, #0x80
     a74:	8b290078 	add	x24, x3, w9, uxtb
     a78:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     a7c:	17e80d59 	b	ffffffffffa03fe0 <_sp+0xffffffff9e9c3fe0>
     a80:	00006100 	udf	#24832
     a84:	001c0000 	.inst	0x001c0000 ; undefined
     a88:	00000000 	udf	#0
     a8c:	9c010000 	ldr	q0, 2a8c <__stack_size-0x1574>
     a90:	00059729 	.inst	0x00059729 ; undefined
     a94:	0d540400 	.inst	0x0d540400 ; undefined
     a98:	610017cc 	.inst	0x610017cc ; undefined
     a9c:	00000000 	udf	#0
     aa0:	0000001c 	udf	#28
     aa4:	00000000 	udf	#0
     aa8:	b82a9c01 	.inst	0xb82a9c01 ; undefined
     aac:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     ab0:	17480d45 	b	fffffffffd203fc4 <_sp+0xffffffff9c1c3fc4>
     ab4:	00006100 	udf	#24832
     ab8:	00840000 	.inst	0x00840000 ; undefined
     abc:	00000000 	udf	#0
     ac0:	9c010000 	ldr	q0, 2ac0 <__stack_size-0x1540>
     ac4:	0000092f 	udf	#2351
     ac8:	00065525 	.inst	0x00065525 ; undefined
     acc:	2f450400 	.inst	0x2f450400 ; undefined
     ad0:	00000315 	udf	#789
     ad4:	0e589102 	.inst	0x0e589102 ; undefined
     ad8:	00000776 	udf	#1910
     adc:	95084704 	bl	42126ec <__stack_size+0x420e6ec>
     ae0:	02000000 	.inst	0x02000000 ; undefined
     ae4:	602b7c91 	.inst	0x602b7c91 ; undefined
     ae8:	c7000000 	.inst	0xc7000000 ; undefined
     aec:	2c000008 	stnp	s8, s0, [x0]
     af0:	000004ae 	udf	#1198
     af4:	53035004 	ubfx	w4, w0, #3, #18
     af8:	0b000000 	add	w0, w0, w0
     afc:	88170000 	stxr	w23, w0, [x0]
     b00:	00610017 	.inst	0x00610017 ; undefined
     b04:	2c000000 	stnp	s0, s0, [x0]
     b08:	00000000 	udf	#0
     b0c:	23000000 	.inst	0x23000000 ; undefined
     b10:	00765f5f 	.inst	0x00765f5f ; undefined
     b14:	89094904 	.inst	0x89094904 ; undefined
     b18:	02000000 	.inst	0x02000000 ; undefined
     b1c:	88147491 	stxr	w20, w17, [x4]
     b20:	00610017 	.inst	0x00610017 ; undefined
     b24:	10000000 	adr	x0, b24 <__stack_size-0x34dc>
     b28:	00000000 	udf	#0
     b2c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     b30:	23000009 	.inst	0x23000009 ; undefined
     b34:	00725f5f 	.inst	0x00725f5f ; undefined
     b38:	89094904 	.inst	0x89094904 ; undefined
     b3c:	02000000 	.inst	0x02000000 ; undefined
     b40:	17007891 	b	fffffffffc01ed84 <_sp+0xffffffff9afded84>
     b44:	6100179c 	.inst	0x6100179c ; undefined
     b48:	00000000 	udf	#0
     b4c:	00000014 	udf	#20
     b50:	00000000 	udf	#0
     b54:	706d7423 	adr	x3, db9db <__stack_size+0xd79db>
     b58:	09490400 	.inst	0x09490400 ; undefined
     b5c:	00000030 	udf	#48
     b60:	00689102 	.inst	0x00689102 ; undefined
     b64:	03240000 	.inst	0x03240000 ; undefined
     b68:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     b6c:	0000063f 	udf	#1599
     b70:	00000000 	udf	#0
     b74:	00300000 	.inst	0x00300000 ; NYI
     b78:	00000000 	udf	#0
     b7c:	9c010000 	ldr	q0, 2b7c <__stack_size-0x1484>
     b80:	0000096c 	udf	#2412
     b84:	00054325 	.inst	0x00054325 ; undefined
     b88:	163f0400 	b	fffffffff8fc1b88 <_sp+0xffffffff97f81b88>
     b8c:	00000089 	udf	#137
     b90:	257c9102 	.inst	0x257c9102 ; undefined
     b94:	000003e2 	udf	#994
     b98:	15243f04 	b	49107a8 <__stack_size+0x490c7a8>
     b9c:	02000003 	.inst	0x02000003 ; undefined
     ba0:	24007091 	cmple	p1.b, p4/z, z4.b, z0.d
     ba4:	0000066c 	udf	#1644
     ba8:	00063a04 	.inst	0x00063a04 ; undefined
     bac:	00000000 	udf	#0
     bb0:	30000000 	adr	x0, bb1 <__stack_size-0x344f>
     bb4:	00000000 	udf	#0
     bb8:	01000000 	.inst	0x01000000 ; undefined
     bbc:	0009a99c 	.inst	0x0009a99c ; undefined
     bc0:	05432500 	eor	z0.d, z0.d, #0xfffffffff000001f
     bc4:	3a040000 	adcs	w0, w0, w4
     bc8:	00008916 	udf	#35094
     bcc:	7c910200 	.inst	0x7c910200 ; undefined
     bd0:	0003e225 	.inst	0x0003e225 ; undefined
     bd4:	243a0400 	cmphs	p0.b, p1/z, z0.b, #104
     bd8:	00000315 	udf	#789
     bdc:	00709102 	.inst	0x00709102 ; undefined
     be0:	00056d2a 	.inst	0x00056d2a ; undefined
     be4:	0d280400 	.inst	0x0d280400 ; undefined
	...
     bf0:	00000098 	udf	#152
     bf4:	00000000 	udf	#0
     bf8:	09f49c01 	.inst	0x09f49c01 ; undefined
     bfc:	43250000 	.inst	0x43250000 ; undefined
     c00:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     c04:	00892328 	.inst	0x00892328 ; undefined
     c08:	91020000 	add	x0, x0, #0x80
     c0c:	03e2257c 	.inst	0x03e2257c ; undefined
     c10:	28040000 	stnp	w0, w0, [x0, #32]
     c14:	00031531 	.inst	0x00031531 ; undefined
     c18:	70910200 	adr	x0, fffffffffff22c5b <_sp+0xffffffff9eee2c5b>
     c1c:	006e662d 	.inst	0x006e662d ; undefined
     c20:	f4482804 	.inst	0xf4482804 ; undefined
     c24:	02000009 	.inst	0x02000009 ; undefined
     c28:	09006891 	.inst	0x09006891 ; undefined
     c2c:	0000ce08 	udf	#52744
     c30:	03212e00 	.inst	0x03212e00 ; undefined
     c34:	06030000 	.inst	0x06030000 ; undefined
     c38:	00173c14 	.inst	0x00173c14 ; undefined
     c3c:	00000061 	udf	#97
     c40:	00000c00 	udf	#3072
     c44:	00000000 	udf	#0
     c48:	289c0100 	stp	w0, w0, [x8], #224
     c4c:	0000034a 	udf	#842
     c50:	891c3802 	.inst	0x891c3802 ; undefined
     c54:	1c000000 	ldr	s0, c54 <__stack_size-0x33ac>
     c58:	00610017 	.inst	0x00610017 ; undefined
     c5c:	20000000 	.inst	0x20000000 ; undefined
     c60:	00000000 	udf	#0
     c64:	01000000 	.inst	0x01000000 ; undefined
     c68:	000a559c 	.inst	0x000a559c ; undefined
     c6c:	05322500 	.inst	0x05322500 ; undefined
     c70:	38020000 	sturb	w0, [x0, #32]
     c74:	000a5545 	.inst	0x000a5545 ; undefined
     c78:	68910200 	stgp	x0, x0, [x16], #544
     c7c:	6c617623 	ldnp	d3, d29, [x17, #-496]
     c80:	063a0200 	.inst	0x063a0200 ; undefined
     c84:	00000089 	udf	#137
     c88:	007c9102 	.inst	0x007c9102 ; undefined
     c8c:	0a5c0809 	and	w9, w0, w28, lsr #2
     c90:	042f0000 	add	z0.b, z0.b, z15.b
     c94:	00000a5b 	udf	#2651
     c98:	00050830 	.inst	0x00050830 ; undefined
     c9c:	141e0200 	b	78149c <__stack_size+0x77d49c>
     ca0:	610016f8 	.inst	0x610016f8 ; undefined
     ca4:	00000000 	udf	#0
     ca8:	00000024 	udf	#36
     cac:	00000000 	udf	#0
     cb0:	0a9e9c01 	.inst	0x0a9e9c01 ; undefined
     cb4:	762d0000 	.inst	0x762d0000 ; undefined
     cb8:	02006c61 	.inst	0x02006c61 ; undefined
     cbc:	00a1251e 	.inst	0x00a1251e ; undefined
     cc0:	91020000 	add	x0, x0, #0x80
     cc4:	05322578 	.inst	0x05322578 ; undefined
     cc8:	1e020000 	.inst	0x1e020000 ; undefined
     ccc:	000a9e41 	.inst	0x000a9e41 ; undefined
     cd0:	70910200 	adr	x0, fffffffffff22d13 <_sp+0xffffffff9eee2d13>
     cd4:	5b080900 	.inst	0x5b080900 ; undefined
     cd8:	3000000a 	adr	x10, cd9 <__stack_size-0x3327>
     cdc:	000001b9 	udf	#441
     ce0:	341d1802 	cbz	w2, 3afe0 <__stack_size+0x36fe0>
     ce4:	00610015 	.inst	0x00610015 ; undefined
     ce8:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
     cec:	00000000 	udf	#0
     cf0:	01000000 	.inst	0x01000000 ; undefined
     cf4:	000ae19c 	.inst	0x000ae19c ; undefined
     cf8:	61762d00 	.inst	0x61762d00 ; undefined
     cfc:	1802006c 	ldr	w12, 4d08 <__stack_size+0xd08>
     d00:	0000892e 	udf	#35118
     d04:	7c910200 	.inst	0x7c910200 ; undefined
     d08:	00053225 	.inst	0x00053225 ; undefined
     d0c:	4a180200 	eor	w0, w16, w24
     d10:	00000a9e 	udf	#2718
     d14:	00709102 	.inst	0x00709102 ; undefined
     d18:	0003f530 	.inst	0x0003f530 ; undefined
     d1c:	14720100 	b	1c8111c <__stack_size+0x1c7d11c>
     d20:	610016d4 	.inst	0x610016d4 ; undefined
     d24:	00000000 	udf	#0
     d28:	00000024 	udf	#36
     d2c:	00000000 	udf	#0
     d30:	0b309c01 	.inst	0x0b309c01 ; undefined
     d34:	762d0000 	.inst	0x762d0000 ; undefined
     d38:	01006c61 	.inst	0x01006c61 ; undefined
     d3c:	00892772 	.inst	0x00892772 ; undefined
     d40:	91020000 	add	x0, x0, #0x80
     d44:	16dc176c 	b	fffffffffb706af4 <_sp+0xffffffff9a6c6af4>
     d48:	00006100 	udf	#24832
     d4c:	00100000 	.inst	0x00100000 ; undefined
     d50:	00000000 	udf	#0
     d54:	a50e0000 	ld1rqw	{z0.s}, p0/z, [x0, x14, lsl #2]
     d58:	01000005 	.inst	0x01000005 ; undefined
     d5c:	00a10274 	.inst	0x00a10274 ; undefined
     d60:	91020000 	add	x0, x0, #0x80
     d64:	30000078 	adr	x24, d71 <__stack_size-0x328f>
     d68:	0000054a 	udf	#1354
     d6c:	ac146c01 	stnp	q1, q27, [x0, #640]
     d70:	00610016 	.inst	0x00610016 ; undefined
     d74:	28000000 	stnp	w0, w0, [x0]
     d78:	00000000 	udf	#0
     d7c:	01000000 	.inst	0x01000000 ; undefined
     d80:	000b7f9c 	.inst	0x000b7f9c ; undefined
     d84:	61762d00 	.inst	0x61762d00 ; undefined
     d88:	6c01006c 	stnp	d12, d0, [x3, #16]
     d8c:	00008926 	udf	#35110
     d90:	6c910200 	stp	d0, d0, [x16], #272
     d94:	0016b417 	.inst	0x0016b417 ; undefined
     d98:	00000061 	udf	#97
     d9c:	00001000 	udf	#4096
     da0:	00000000 	udf	#0
     da4:	05a50e00 	uzp2	z0.q, z16.q, z5.q
     da8:	6e010000 	ext	v0.16b, v0.16b, v1.16b, #0
     dac:	0000a102 	udf	#41218
     db0:	78910200 	ldursh	x0, [x16, #-240]
     db4:	84280000 	prfb	pldl1keep, p0, [x0, z8.s, uxtw]
     db8:	01000004 	.inst	0x01000004 ; undefined
     dbc:	00891367 	.inst	0x00891367 ; undefined
     dc0:	16940000 	b	fffffffffa500dc0 <_sp+0xffffffff994c0dc0>
     dc4:	00006100 	udf	#24832
     dc8:	00180000 	.inst	0x00180000 ; undefined
     dcc:	00000000 	udf	#0
     dd0:	9c010000 	ldr	q0, 2dd0 <__stack_size-0x1230>
     dd4:	00000bc3 	udf	#3011
     dd8:	00169817 	.inst	0x00169817 ; undefined
     ddc:	00000061 	udf	#97
     de0:	00000c00 	udf	#3072
     de4:	00000000 	udf	#0
     de8:	05a50e00 	uzp2	z0.q, z16.q, z5.q
     dec:	69010000 	stgp	x0, x0, [x0, #32]
     df0:	0000a109 	udf	#41225
     df4:	78910200 	ldursh	x0, [x16, #-240]
     df8:	39300000 	strb	w0, [x0, #3072]
     dfc:	01000003 	.inst	0x01000003 ; undefined
     e00:	166c145c 	b	fffffffff9b05f70 <_sp+0xffffffff98ac5f70>
     e04:	00006100 	udf	#24832
     e08:	00280000 	.inst	0x00280000 ; NYI
     e0c:	00000000 	udf	#0
     e10:	9c010000 	ldr	q0, 2e10 <__stack_size-0x11f0>
     e14:	00000c12 	udf	#3090
     e18:	6c61762d 	ldnp	d13, d29, [x17, #-496]
     e1c:	295c0100 	ldp	w0, w0, [x8, #224]
     e20:	00000089 	udf	#137
     e24:	176c9102 	b	fffffffffdb2522c <_sp+0xffffffff9cae522c>
     e28:	61001674 	.inst	0x61001674 ; undefined
     e2c:	00000000 	udf	#0
     e30:	00000010 	udf	#16
     e34:	00000000 	udf	#0
     e38:	0005a50e 	.inst	0x0005a50e ; undefined
     e3c:	025e0100 	.inst	0x025e0100 ; undefined
     e40:	000000a1 	udf	#161
     e44:	00789102 	.inst	0x00789102 ; undefined
     e48:	04a02800 	.inst	0x04a02800 ; undefined
     e4c:	57010000 	.inst	0x57010000 ; undefined
     e50:	00008913 	udf	#35091
	...
     e5c:	00001800 	udf	#6144
     e60:	00000000 	udf	#0
     e64:	569c0100 	.inst	0x569c0100 ; undefined
     e68:	1700000c 	b	fffffffffc000e98 <_sp+0xffffffff9afc0e98>
	...
     e74:	0000000c 	udf	#12
     e78:	00000000 	udf	#0
     e7c:	0005a50e 	.inst	0x0005a50e ; undefined
     e80:	09590100 	.inst	0x09590100 ; undefined
     e84:	000000a1 	udf	#161
     e88:	00789102 	.inst	0x00789102 ; undefined
     e8c:	06463000 	.inst	0x06463000 ; undefined
     e90:	51010000 	sub	w0, w0, #0x40
     e94:	00164414 	.inst	0x00164414 ; undefined
     e98:	00000061 	udf	#97
     e9c:	00002800 	udf	#10240
     ea0:	00000000 	udf	#0
     ea4:	a59c0100 	ld1rqd	{z0.d}, p0/z, [x8, x28, lsl #3]
     ea8:	2d00000c 	stp	s12, s0, [x0]
     eac:	006c6176 	.inst	0x006c6176 ; undefined
     eb0:	89275101 	.inst	0x89275101 ; undefined
     eb4:	02000000 	.inst	0x02000000 ; undefined
     eb8:	4c176c91 	.inst	0x4c176c91 ; undefined
     ebc:	00610016 	.inst	0x00610016 ; undefined
     ec0:	10000000 	adr	x0, ec0 <__stack_size-0x3140>
     ec4:	00000000 	udf	#0
     ec8:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
     ecc:	000005a5 	udf	#1445
     ed0:	a1025301 	.inst	0xa1025301 ; undefined
     ed4:	02000000 	.inst	0x02000000 ; undefined
     ed8:	00007891 	udf	#30865
     edc:	0005e728 	.inst	0x0005e728 ; undefined
     ee0:	13280100 	.inst	0x13280100 ; undefined
     ee4:	000000a1 	udf	#161
     ee8:	61001620 	.inst	0x61001620 ; undefined
     eec:	00000000 	udf	#0
     ef0:	00000024 	udf	#36
     ef4:	00000000 	udf	#0
     ef8:	0cf89c01 	.inst	0x0cf89c01 ; undefined
     efc:	8f0e0000 	.inst	0x8f0e0000 ; undefined
     f00:	01000005 	.inst	0x01000005 ; undefined
     f04:	00a1062a 	.inst	0x00a1062a ; undefined
     f08:	91020000 	add	x0, x0, #0x80
     f0c:	16241770 	b	fffffffff8906ccc <_sp+0xffffffff978c6ccc>
     f10:	00006100 	udf	#24832
     f14:	000c0000 	.inst	0x000c0000 ; undefined
     f18:	00000000 	udf	#0
     f1c:	a50e0000 	ld1rqw	{z0.s}, p0/z, [x0, x14, lsl #2]
     f20:	01000005 	.inst	0x01000005 ; undefined
     f24:	00a10c2c 	.inst	0x00a10c2c ; undefined
     f28:	91020000 	add	x0, x0, #0x80
     f2c:	31000078 	adds	w24, w3, #0x0
     f30:	00000515 	udf	#1301
     f34:	f8141c01 	str	x1, [x0, #-191]!
     f38:	00610015 	.inst	0x00610015 ; undefined
     f3c:	28000000 	stnp	w0, w0, [x0]
     f40:	00000000 	udf	#0
     f44:	01000000 	.inst	0x01000000 ; undefined
     f48:	72692d9c 	.inst	0x72692d9c ; undefined
     f4c:	1c010071 	ldr	s17, 2f58 <__stack_size-0x10a8>
     f50:	00008927 	udf	#35111
     f54:	6c910200 	stp	d0, d0, [x16], #272
     f58:	00160017 	.inst	0x00160017 ; undefined
     f5c:	00000061 	udf	#97
     f60:	00001000 	udf	#4096
     f64:	00000000 	udf	#0
     f68:	05a50e00 	uzp2	z0.q, z16.q, z5.q
     f6c:	1e010000 	.inst	0x1e010000 ; undefined
     f70:	0000a102 	udf	#41218
     f74:	78910200 	ldursh	x0, [x16, #-240]
     f78:	b7000000 	tbnz	x0, #32, f78 <__stack_size-0x3088>
     f7c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     f80:	00049200 	.inst	0x00049200 ; undefined
     f84:	20010800 	.inst	0x20010800 ; undefined
     f88:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
     f8c:	0000068f 	udf	#1679
     f90:	0000002f 	udf	#47
     f94:	00000330 	udf	#816
	...
     fa0:	00000bec 	udf	#3052
     fa4:	7c070802 	.inst	0x7c070802 ; undefined
     fa8:	02000001 	.inst	0x02000001 ; undefined
     fac:	01cb0508 	.inst	0x01cb0508 ; undefined
     fb0:	91030000 	add	x0, x0, #0xc0
     fb4:	02000007 	.inst	0x02000007 ; undefined
     fb8:	004e0514 	.inst	0x004e0514 ; undefined
     fbc:	004e0000 	.inst	0x004e0000 ; undefined
     fc0:	55040000 	.inst	0x55040000 ; undefined
     fc4:	05000000 	orr	z0.s, z0.s, #0x1
     fc8:	05040600 	.inst	0x05040600 ; undefined
     fcc:	00746e69 	.inst	0x00746e69 ; undefined
     fd0:	00620807 	.inst	0x00620807 ; undefined
     fd4:	01020000 	.inst	0x01020000 ; undefined
     fd8:	00011b08 	.inst	0x00011b08 ; undefined
     fdc:	005b0800 	.inst	0x005b0800 ; undefined
     fe0:	c7090000 	.inst	0xc7090000 ; undefined
     fe4:	01000006 	.inst	0x01000006 ; undefined
     fe8:	2108250b 	.inst	0x2108250b ; undefined
     fec:	00006100 	udf	#24832
     ff0:	00300000 	.inst	0x00300000 ; NYI
     ff4:	00000000 	udf	#0
     ff8:	9c010000 	ldr	q0, 2ff8 <__stack_size-0x1008>
     ffc:	000000b3 	udf	#179
    1000:	00068a0a 	.inst	0x00068a0a ; undefined
    1004:	3a0b0100 	adcs	w0, w8, w11
    1008:	00000055 	udf	#85
    100c:	0a789102 	.inst	0x0a789102 ; undefined
    1010:	000006d0 	udf	#1744
    1014:	b34d0b01 	bfi	x1, x24, #51, #3
    1018:	02000000 	.inst	0x02000000 ; undefined
    101c:	bd0a7491 	str	s17, [x4, #2676]
    1020:	01000006 	.inst	0x01000006 ; undefined
    1024:	0055150c 	.inst	0x0055150c ; undefined
    1028:	91020000 	add	x0, x0, #0x80
    102c:	04020068 	.inst	0x04020068 ; undefined
    1030:	00018107 	.inst	0x00018107 ; undefined
    1034:	00cb0000 	.inst	0x00cb0000 ; undefined
    1038:	00040000 	.inst	0x00040000 ; undefined
    103c:	0000051f 	udf	#1311
    1040:	02200108 	.inst	0x02200108 ; undefined
    1044:	dc0c0000 	.inst	0xdc0c0000 ; undefined
    1048:	2f000006 	.inst	0x2f000006 ; undefined
    104c:	50000000 	adr	x0, 104e <__stack_size-0x2fb2>
    1050:	00000003 	udf	#3
    1054:	00000000 	udf	#0
    1058:	8b000000 	add	x0, x0, x0
    105c:	0200000c 	.inst	0x0200000c ; undefined
    1060:	000006d5 	udf	#1749
    1064:	35170b02 	cbnz	w2, 2f1c4 <__stack_size+0x2b1c4>
    1068:	03000000 	.inst	0x03000000 ; undefined
    106c:	017c0708 	.inst	0x017c0708 ; undefined
    1070:	08030000 	stxrb	w3, w0, [x0]
    1074:	0001cb05 	.inst	0x0001cb05 ; undefined
    1078:	070a0400 	.inst	0x070a0400 ; undefined
    107c:	0a010000 	and	w0, w0, w1
    1080:	0000ad07 	udf	#44295
    1084:	00213800 	.inst	0x00213800 ; NYI
    1088:	00000061 	udf	#97
    108c:	00006400 	udf	#25600
    1090:	00000000 	udf	#0
    1094:	ad9c0100 	stp	q0, q0, [x8, #896]!
    1098:	05000000 	orr	z0.s, z0.s, #0x1
    109c:	00747364 	.inst	0x00747364 ; undefined
    10a0:	ad140a01 	stp	q1, q2, [x16, #640]
    10a4:	02000000 	.inst	0x02000000 ; undefined
    10a8:	73056891 	.inst	0x73056891 ; undefined
    10ac:	01006372 	.inst	0x01006372 ; undefined
    10b0:	00af250a 	.inst	0x00af250a ; undefined
    10b4:	91020000 	add	x0, x0, #0x80
    10b8:	656c0560 	fmla	z0.h, p1/m, z11.h, z12.h
    10bc:	0a01006e 	and	w14, w3, w1
    10c0:	00002931 	udf	#10545
    10c4:	58910200 	ldr	x0, fffffffffff23104 <_sp+0xffffffff9eee3104>
    10c8:	01007306 	.inst	0x01007306 ; undefined
    10cc:	00b60e0c 	.inst	0x00b60e0c ; undefined
    10d0:	91020000 	add	x0, x0, #0x80
    10d4:	00640678 	.inst	0x00640678 ; undefined
    10d8:	c8080d01 	stxr	w8, x1, [x8]
    10dc:	02000000 	.inst	0x02000000 ; undefined
    10e0:	07007091 	.inst	0x07007091 ; undefined
    10e4:	b5080808 	cbnz	x8, 111e4 <__stack_size+0xd1e4>
    10e8:	09000000 	.inst	0x09000000 ; undefined
    10ec:	00c30808 	.inst	0x00c30808 ; undefined
    10f0:	01030000 	.inst	0x01030000 ; undefined
    10f4:	00011b08 	.inst	0x00011b08 ; undefined
    10f8:	00bc0a00 	.inst	0x00bc0a00 ; undefined
    10fc:	08080000 	stxrb	w8, w0, [x0]
    1100:	000000bc 	udf	#188
    1104:	00013500 	.inst	0x00013500 ; undefined
    1108:	a9000400 	stp	x0, x1, [x0]
    110c:	08000005 	stxrb	w0, w5, [x0]
    1110:	00022001 	.inst	0x00022001 ; undefined
    1114:	07240c00 	.inst	0x07240c00 ; undefined
    1118:	002f0000 	.inst	0x002f0000 ; NYI
    111c:	03700000 	.inst	0x03700000 ; undefined
	...
    1128:	0d470000 	.inst	0x0d470000 ; undefined
    112c:	d5020000 	msr	s0_2_c0_c0_0, x0
    1130:	02000006 	.inst	0x02000006 ; undefined
    1134:	0035170b 	.inst	0x0035170b ; NYI
    1138:	08030000 	stxrb	w3, w0, [x0]
    113c:	00017c07 	.inst	0x00017c07 ; undefined
    1140:	05080300 	.inst	0x05080300 ; undefined
    1144:	000001cb 	udf	#459
    1148:	00071b02 	.inst	0x00071b02 ; undefined
    114c:	17160300 	b	fffffffffc581d4c <_sp+0xffffffff9b541d4c>
    1150:	00000035 	udf	#53
    1154:	46051003 	.inst	0x46051003 ; undefined
    1158:	03000001 	.inst	0x03000001 ; undefined
    115c:	01000710 	.inst	0x01000710 ; undefined
    1160:	01030000 	.inst	0x01030000 ; undefined
    1164:	00011406 	.inst	0x00011406 ; undefined
    1168:	05020300 	orr	z0.d, z0.d, #0x1ffffff
    116c:	000001d4 	udf	#468
    1170:	69050404 	stgp	x4, x1, [x0, #160]
    1174:	0200746e 	.inst	0x0200746e ; undefined
    1178:	00000764 	udf	#1892
    117c:	7e175904 	.inst	0x7e175904 ; undefined
    1180:	03000000 	.inst	0x03000000 ; undefined
    1184:	01120801 	.inst	0x01120801 ; undefined
    1188:	02030000 	.inst	0x02030000 ; undefined
    118c:	00013307 	.inst	0x00013307 ; undefined
    1190:	07040300 	.inst	0x07040300 ; undefined
    1194:	00000181 	udf	#385
    1198:	00071102 	.inst	0x00071102 ; undefined
    119c:	176e0400 	b	fffffffffdb8219c <_sp+0xffffffff9cb4219c>
    11a0:	00000035 	udf	#53
    11a4:	c6050803 	.inst	0xc6050803 ; undefined
    11a8:	03000001 	.inst	0x03000001 ; undefined
    11ac:	01770708 	.inst	0x01770708 ; undefined
    11b0:	5d050000 	.inst	0x5d050000 ; undefined
    11b4:	01000007 	.inst	0x01000007 ; undefined
    11b8:	012a070b 	.inst	0x012a070b ; undefined
    11bc:	219c0000 	.inst	0x219c0000 ; undefined
    11c0:	00006100 	udf	#24832
    11c4:	01480000 	.inst	0x01480000 ; undefined
    11c8:	00000000 	udf	#0
    11cc:	9c010000 	ldr	q0, 31cc <__stack_size-0xe34>
    11d0:	0000012a 	udf	#298
    11d4:	74736406 	.inst	0x74736406 ; undefined
    11d8:	140b0100 	b	2c15d8 <__stack_size+0x2bd5d8>
    11dc:	0000012a 	udf	#298
    11e0:	06589102 	.inst	0x06589102 ; undefined
    11e4:	006c6176 	.inst	0x006c6176 ; undefined
    11e8:	6b1d0b01 	subs	w1, w24, w29, lsl #2
    11ec:	02000000 	.inst	0x02000000 ; undefined
    11f0:	76075491 	.inst	0x76075491 ; undefined
    11f4:	01000007 	.inst	0x01000007 ; undefined
    11f8:	0029290b 	.inst	0x0029290b ; NYI
    11fc:	91020000 	add	x0, x0, #0x80
    1200:	74700848 	.inst	0x74700848 ; undefined
    1204:	0d010072 	.inst	0x0d010072 ; undefined
    1208:	00012c0b 	.inst	0x00012c0b ; undefined
    120c:	78910200 	ldursh	x0, [x16, #-240]
    1210:	00075209 	.inst	0x00075209 ; undefined
    1214:	0c0e0100 	.inst	0x0c0e0100 ; undefined
    1218:	00000132 	udf	#306
    121c:	09709102 	.inst	0x09709102 ; undefined
    1220:	00000758 	udf	#1880
    1224:	430b0f01 	.inst	0x430b0f01 ; undefined
    1228:	02000000 	.inst	0x02000000 ; undefined
    122c:	0a006891 	and	w17, w4, w0, lsl #26
    1230:	72080b08 	ands	w8, w24, #0x7000000
    1234:	0b000000 	add	w0, w0, w0
    1238:	00004308 	udf	#17160
    123c:	03250000 	.inst	0x03250000 ; undefined
    1240:	00040000 	.inst	0x00040000 ; undefined
    1244:	00000654 	udf	#1620
    1248:	02200108 	.inst	0x02200108 ; undefined
    124c:	d40c0000 	.inst	0xd40c0000 ; undefined
    1250:	2f000007 	.inst	0x2f000007 ; undefined
    1254:	90000000 	adrp	x0, 1000 <__stack_size-0x3000>
    1258:	00000003 	udf	#3
    125c:	00000000 	udf	#0
    1260:	99000000 	stlur	w0, [x0]
    1264:	0200000e 	.inst	0x0200000e ; undefined
    1268:	017c0708 	.inst	0x017c0708 ; undefined
    126c:	08020000 	stxrb	w2, w0, [x0]
    1270:	0001cb05 	.inst	0x0001cb05 ; undefined
    1274:	05100200 	mov	z0.b, p0/z, #16
    1278:	00000146 	udf	#326
    127c:	00071002 	.inst	0x00071002 ; undefined
    1280:	02000001 	.inst	0x02000001 ; undefined
    1284:	01140601 	.inst	0x01140601 ; undefined
    1288:	02020000 	.inst	0x02020000 ; undefined
    128c:	0001d405 	.inst	0x0001d405 ; undefined
    1290:	05040300 	.inst	0x05040300 ; undefined
    1294:	00746e69 	.inst	0x00746e69 ; undefined
    1298:	12080102 	and	w2, w8, #0x1000000
    129c:	02000001 	.inst	0x02000001 ; undefined
    12a0:	01330702 	.inst	0x01330702 ; undefined
    12a4:	04020000 	.inst	0x04020000 ; undefined
    12a8:	00018107 	.inst	0x00018107 ; undefined
    12ac:	07110400 	.inst	0x07110400 ; undefined
    12b0:	6e040000 	ext	v0.16b, v0.16b, v4.16b, #0
    12b4:	00002917 	udf	#10519
    12b8:	05080200 	.inst	0x05080200 ; undefined
    12bc:	000001c6 	udf	#454
    12c0:	77070802 	.inst	0x77070802 ; undefined
    12c4:	05000001 	orr	z1.s, z1.s, #0x1
    12c8:	000007a5 	udf	#1957
    12cc:	53051c02 	ubfx	w2, w0, #5, #3
    12d0:	9f000000 	.inst	0x9f000000 ; undefined
    12d4:	06000000 	.inst	0x06000000 ; undefined
    12d8:	00000053 	udf	#83
    12dc:	06c70700 	.inst	0x06c70700 ; undefined
    12e0:	0f030000 	.inst	0x0f030000 ; undefined
    12e4:	0000bb0e 	udf	#47886
    12e8:	00bb0600 	.inst	0x00bb0600 ; undefined
    12ec:	68060000 	.inst	0x68060000 ; undefined
    12f0:	06000000 	.inst	0x06000000 ; undefined
    12f4:	000000bb 	udf	#187
    12f8:	c8080800 	stxr	w8, x0, [x0]
    12fc:	02000000 	.inst	0x02000000 ; undefined
    1300:	011b0801 	.inst	0x011b0801 ; undefined
    1304:	c1090000 	.inst	0xc1090000 ; undefined
    1308:	0a000000 	and	w0, w0, w0
    130c:	00000791 	udf	#1937
    1310:	5305c001 	.inst	0x5305c001 ; undefined
    1314:	b0000000 	adrp	x0, 2000 <__stack_size-0x2000>
    1318:	0061002b 	.inst	0x0061002b ; undefined
    131c:	b0000000 	adrp	x0, 2000 <__stack_size-0x2000>
    1320:	00000000 	udf	#0
    1324:	01000000 	.inst	0x01000000 ; undefined
    1328:	0001209c 	.inst	0x0001209c ; undefined
    132c:	6d660b00 	ldp	d0, d2, [x24, #-416]
    1330:	c0010074 	.inst	0xc0010074 ; undefined
    1334:	0000bb18 	udf	#47896
    1338:	88910300 	stllr	w0, [x24]
    133c:	760d0c7e 	.inst	0x760d0c7e ; undefined
    1340:	01000007 	.inst	0x01000007 ; undefined
    1344:	005306c2 	.inst	0x005306c2 ; undefined
    1348:	91030000 	add	x0, x0, #0xc0
    134c:	760e7ebc 	.inst	0x760e7ebc ; undefined
    1350:	c3010061 	.inst	0xc3010061 ; undefined
    1354:	0001200a 	.inst	0x0001200a ; undefined
    1358:	98910300 	ldrsw	x0, fffffffffff233b8 <_sp+0xffffffff9eee33b8>
    135c:	020f007e 	.inst	0x020f007e ; undefined
    1360:	20000008 	.inst	0x20000008 ; undefined
    1364:	015f0005 	.inst	0x015f0005 ; undefined
    1368:	29100000 	stp	w0, w0, [x0, #128]
    136c:	5f000008 	.inst	0x5f000008 ; undefined
    1370:	00000001 	udf	#1
    1374:	00077c10 	.inst	0x00077c10 ; undefined
    1378:	00015f00 	.inst	0x00015f00 ; undefined
    137c:	1b100800 	madd	w0, w0, w16, w2
    1380:	5f000008 	.inst	0x5f000008 ; undefined
    1384:	10000001 	adr	x1, 1384 <__stack_size-0x2c7c>
    1388:	0007c510 	.inst	0x0007c510 ; undefined
    138c:	00005300 	udf	#21248
    1390:	0c101800 	.inst	0x0c101800 ; undefined
    1394:	53000008 	ubfx	w8, w0, #0, #1
    1398:	1c000000 	ldr	s0, 1398 <__stack_size-0x2c68>
    139c:	0a081100 	and	w0, w8, w8, lsl #4
    13a0:	00000790 	udf	#1936
    13a4:	53055e01 	ubfx	w1, w16, #5, #19
    13a8:	84000000 	ld1sb	{z0.s}, p0/z, [x0, z0.s, uxtw]
    13ac:	00610024 	.inst	0x00610024 ; undefined
    13b0:	2c000000 	stnp	s0, s0, [x0]
    13b4:	00000007 	udf	#7
    13b8:	01000000 	.inst	0x01000000 ; undefined
    13bc:	00023c9c 	.inst	0x00023c9c ; undefined
    13c0:	6d660b00 	ldp	d0, d2, [x24, #-416]
    13c4:	5e010074 	sha1c	q20, s3, v1.4s
    13c8:	0000bb19 	udf	#47897
    13cc:	b8910300 	ldursw	x0, [x24, #-240]
    13d0:	0816127f 	stxrb	w22, wzr, [x19]
    13d4:	5e010000 	sha1c	q0, s0, v1.4s
    13d8:	00012026 	.inst	0x00012026 ; undefined
    13dc:	00830200 	.inst	0x00830200 ; undefined
    13e0:	0007740d 	.inst	0x0007740d ; undefined
    13e4:	06600100 	.inst	0x06600100 ; undefined
    13e8:	00000053 	udf	#83
    13ec:	0e7c9102 	sqdmlal	v2.4s, v8.4h, v28.4h
    13f0:	006d756e 	.inst	0x006d756e ; undefined
    13f4:	7b106101 	.inst	0x7b106101 ; undefined
    13f8:	02000000 	.inst	0x02000000 ; undefined
    13fc:	240d5091 	cmpgt	p1.b, p4/z, z4.b, z13.d
    1400:	01000008 	.inst	0x01000008 ; undefined
    1404:	00821962 	.inst	0x00821962 ; undefined
    1408:	91020000 	add	x0, x0, #0x80
    140c:	74730e70 	.inst	0x74730e70 ; undefined
    1410:	63010072 	.inst	0x63010072 ; undefined
    1414:	00023c08 	.inst	0x00023c08 ; undefined
    1418:	58910200 	ldr	x0, fffffffffff23458 <_sp+0xffffffff9eee3458>
    141c:	0007cf0d 	.inst	0x0007cf0d ; undefined
    1420:	07640100 	.inst	0x07640100 ; undefined
    1424:	000000c1 	udf	#193
    1428:	0d6f9102 	.inst	0x0d6f9102 ; undefined
    142c:	000007c0 	udf	#1984
    1430:	53066501 	ubfx	w1, w8, #6, #20
    1434:	02000000 	.inst	0x02000000 ; undefined
    1438:	760d6891 	.inst	0x760d6891 ; undefined
    143c:	01000007 	.inst	0x01000007 ; undefined
    1440:	00530666 	.inst	0x00530666 ; undefined
    1444:	91020000 	add	x0, x0, #0x80
    1448:	078b1364 	.inst	0x078b1364 ; undefined
    144c:	6f010000 	.inst	0x6f010000 ; undefined
    1450:	0024c801 	.inst	0x0024c801 ; NYI
    1454:	00000061 	udf	#97
    1458:	2b001400 	adds	w0, w0, w0, lsl #5
    145c:	00006100 	udf	#24832
    1460:	00500000 	.inst	0x00500000 ; undefined
    1464:	00000000 	udf	#0
    1468:	630e0000 	.inst	0x630e0000 ; undefined
    146c:	a9010068 	stp	x8, x0, [x3, #16]
    1470:	0000c10b 	udf	#49419
    1474:	4f910200 	fmlal	v0.4s, v16.4h, v1.h[1]
    1478:	08080000 	stxrb	w8, w0, [x0]
    147c:	000000c1 	udf	#193
    1480:	0007ad15 	.inst	0x0007ad15 ; undefined
    1484:	0c280100 	.inst	0x0c280100 ; undefined
    1488:	00000053 	udf	#83
    148c:	61002358 	.inst	0x61002358 ; undefined
    1490:	00000000 	udf	#0
    1494:	0000012c 	udf	#300
    1498:	00000000 	udf	#0
    149c:	02db9c01 	.inst	0x02db9c01 ; undefined
    14a0:	24120000 	cmphs	p0.b, p0/z, z0.b, z18.b
    14a4:	01000008 	.inst	0x01000008 ; undefined
    14a8:	00823628 	.inst	0x00823628 ; undefined
    14ac:	91020000 	add	x0, x0, #0x80
    14b0:	07851258 	.inst	0x07851258 ; undefined
    14b4:	28010000 	stnp	w0, w0, [x0, #8]
    14b8:	00006849 	udf	#26697
    14bc:	54910200 	b.eq	fffffffffff234fc <_sp+0xffffffff9eee34fc>  // b.none
    14c0:	0007cf12 	.inst	0x0007cf12 ; undefined
    14c4:	0f290100 	.inst	0x0f290100 ; undefined
    14c8:	000000c1 	udf	#193
    14cc:	12539102 	.inst	0x12539102 ; undefined
    14d0:	000007c0 	udf	#1984
    14d4:	53192901 	ubfiz	w1, w8, #7, #11
    14d8:	02000000 	.inst	0x02000000 ; undefined
    14dc:	6c0d4c91 	stnp	d17, d19, [x4, #208]
    14e0:	01000007 	.inst	0x01000007 ; undefined
    14e4:	02db072c 	.inst	0x02db072c ; undefined
    14e8:	91020000 	add	x0, x0, #0x80
    14ec:	00690e60 	.inst	0x00690e60 ; undefined
    14f0:	53062d01 	ubfx	w1, w8, #6, #6
    14f4:	02000000 	.inst	0x02000000 ; undefined
    14f8:	760d7c91 	.inst	0x760d7c91 ; undefined
    14fc:	01000007 	.inst	0x01000007 ; undefined
    1500:	00530d2d 	.inst	0x00530d2d ; undefined
    1504:	91020000 	add	x0, x0, #0x80
    1508:	65720e78 	fmla	z24.h, p3/m, z19.h, z18.h
    150c:	2e01006d 	ext	v13.8b, v3.8b, v1.8b, #0
    1510:	0000680f 	udf	#26639
    1514:	74910200 	.inst	0x74910200 ; undefined
    1518:	00c11600 	.inst	0x00c11600 ; undefined
    151c:	02eb0000 	.inst	0x02eb0000 ; undefined
    1520:	29170000 	stp	w0, w0, [x0, #184]
    1524:	13000000 	sbfx	w0, w0, #0, #1
    1528:	07981800 	.inst	0x07981800 ; undefined
    152c:	1a010000 	adc	w0, w0, w1
    1530:	0000530c 	udf	#21260
    1534:	0022e400 	.inst	0x0022e400 ; NYI
    1538:	00000061 	udf	#97
    153c:	00007400 	udf	#29696
    1540:	00000000 	udf	#0
    1544:	0b9c0100 	add	w0, w8, w28, asr #0
    1548:	00727473 	.inst	0x00727473 ; undefined
    154c:	bb251a01 	.inst	0xbb251a01 ; undefined
    1550:	02000000 	.inst	0x02000000 ; undefined
    1554:	760d6891 	.inst	0x760d6891 ; undefined
    1558:	01000007 	.inst	0x01000007 ; undefined
    155c:	0053061c 	.inst	0x0053061c ; undefined
    1560:	91020000 	add	x0, x0, #0x80
    1564:	b900007c 	str	w28, [x3]
    1568:	04000002 	add	z2.b, p0/m, z2.b, z0.b
    156c:	0007bd00 	.inst	0x0007bd00 ; undefined
    1570:	20010800 	.inst	0x20010800 ; undefined
    1574:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    1578:	0000086e 	udf	#2158
    157c:	0000002f 	udf	#47
    1580:	000003e0 	udf	#992
	...
    158c:	00001164 	udf	#4452
    1590:	7c070802 	.inst	0x7c070802 ; undefined
    1594:	02000001 	.inst	0x02000001 ; undefined
    1598:	01cb0508 	.inst	0x01cb0508 ; undefined
    159c:	04020000 	.inst	0x04020000 ; undefined
    15a0:	00018107 	.inst	0x00018107 ; undefined
    15a4:	05100200 	mov	z0.b, p0/z, #16
    15a8:	00000146 	udf	#326
    15ac:	00071002 	.inst	0x00071002 ; undefined
    15b0:	02000001 	.inst	0x02000001 ; undefined
    15b4:	01140601 	.inst	0x01140601 ; undefined
    15b8:	02020000 	.inst	0x02020000 ; undefined
    15bc:	0001d405 	.inst	0x0001d405 ; undefined
    15c0:	08dc0300 	ldlarb	w0, [x24]
    15c4:	57020000 	.inst	0x57020000 ; undefined
    15c8:	0000660d 	udf	#26125
    15cc:	05040400 	.inst	0x05040400 ; undefined
    15d0:	00746e69 	.inst	0x00746e69 ; undefined
    15d4:	00076403 	.inst	0x00076403 ; undefined
    15d8:	17590200 	b	fffffffffd641dd8 <_sp+0xffffffff9c601dd8>
    15dc:	0000007e 	udf	#126
    15e0:	00006d05 	udf	#27909
    15e4:	08010200 	stxrb	w1, w0, [x16]
    15e8:	00000112 	udf	#274
    15ec:	33070202 	bfi	w2, w16, #25, #1
    15f0:	03000001 	.inst	0x03000001 ; undefined
    15f4:	000008db 	udf	#2267
    15f8:	37165b02 	tbnz	w2, #2, ffffffffffffe158 <_sp+0xffffffff9efbe158>
    15fc:	05000000 	orr	z0.s, z0.s, #0x1
    1600:	0000008c 	udf	#140
    1604:	c6050802 	.inst	0xc6050802 ; undefined
    1608:	02000001 	.inst	0x02000001 ; undefined
    160c:	01770708 	.inst	0x01770708 ; undefined
    1610:	98060000 	ldrsw	x0, d610 <__stack_size+0x9610>
    1614:	bb000000 	.inst	0xbb000000 ; undefined
    1618:	07000000 	.inst	0x07000000 ; undefined
    161c:	00000029 	udf	#41
    1620:	ab050001 	adds	x1, x0, x5
    1624:	08000000 	stxrb	w0, w0, [x0]
    1628:	030203c8 	.inst	0x030203c8 ; undefined
    162c:	00023709 	.inst	0x00023709 ; undefined
    1630:	085c0900 	ldxrb	w0, [x8]
    1634:	03030000 	.inst	0x03030000 ; undefined
    1638:	00981403 	.inst	0x00981403 ; undefined
    163c:	09000000 	.inst	0x09000000 ; undefined
    1640:	0000084a 	udf	#2122
    1644:	14030403 	b	c2650 <__stack_size+0xbe650>
    1648:	00000098 	udf	#152
    164c:	08420904 	ldxrb	w4, [x8]
    1650:	05030000 	orr	z0.d, z0.d, #0x100000000
    1654:	00981403 	.inst	0x00981403 ; undefined
    1658:	0a080000 	and	w0, w0, w8
    165c:	0052434c 	.inst	0x0052434c ; undefined
    1660:	14030603 	b	c2e6c <__stack_size+0xbee6c>
    1664:	00000098 	udf	#152
    1668:	434d0a0c 	.inst	0x434d0a0c ; undefined
    166c:	07030052 	.inst	0x07030052 ; undefined
    1670:	00981403 	.inst	0x00981403 ; undefined
    1674:	0a100000 	and	w0, w0, w16
    1678:	0052534c 	.inst	0x0052534c ; undefined
    167c:	14030803 	b	c3688 <__stack_size+0xbf688>
    1680:	00000098 	udf	#152
    1684:	534d0a14 	.inst	0x534d0a14 ; undefined
    1688:	09030052 	.inst	0x09030052 ; undefined
    168c:	00981403 	.inst	0x00981403 ; undefined
    1690:	0a180000 	and	w0, w0, w24
    1694:	00524353 	.inst	0x00524353 ; undefined
    1698:	14030a03 	b	c3ea4 <__stack_size+0xbfea4>
    169c:	00000098 	udf	#152
    16a0:	08c5091c 	ldlarb	w28, [x8]
    16a4:	0b030000 	add	w0, w0, w3
    16a8:	00981403 	.inst	0x00981403 ; undefined
    16ac:	09200000 	.inst	0x09200000 ; undefined
    16b0:	000008b9 	udf	#2233
    16b4:	14030c03 	b	c46c0 <__stack_size+0xc06c0>
    16b8:	00000098 	udf	#152
    16bc:	089d0924 	stllrb	w4, [x9]
    16c0:	0d030000 	.inst	0x0d030000 ; undefined
    16c4:	00bb1403 	.inst	0x00bb1403 ; undefined
    16c8:	09280000 	.inst	0x09280000 ; undefined
    16cc:	000008ab 	udf	#2219
    16d0:	14030e03 	b	c4edc <__stack_size+0xc0edc>
    16d4:	00000247 	udf	#583
    16d8:	41460a30 	.inst	0x41460a30 ; undefined
    16dc:	0f030052 	.inst	0x0f030052 ; undefined
    16e0:	00981403 	.inst	0x00981403 ; undefined
    16e4:	0a700000 	bic	w0, w0, w16, lsr #0
    16e8:	00524654 	.inst	0x00524654 ; undefined
    16ec:	14031003 	b	c56f8 <__stack_size+0xc16f8>
    16f0:	00000098 	udf	#152
    16f4:	46520a74 	.inst	0x46520a74 ; undefined
    16f8:	11030057 	add	w23, w2, #0xc0
    16fc:	00981403 	.inst	0x00981403 ; undefined
    1700:	0a780000 	bic	w0, w0, w24, lsr #0
    1704:	00525355 	.inst	0x00525355 ; undefined
    1708:	14031203 	b	c5f14 <__stack_size+0xc1f14>
    170c:	00000098 	udf	#152
    1710:	46540a7c 	.inst	0x46540a7c ; undefined
    1714:	1303004c 	sbfiz	w12, w2, #29, #1
    1718:	00981403 	.inst	0x00981403 ; undefined
    171c:	0a800000 	and	w0, w0, w0, asr #0
    1720:	004c4652 	.inst	0x004c4652 ; undefined
    1724:	14031403 	b	c6730 <__stack_size+0xc2730>
    1728:	00000098 	udf	#152
    172c:	08520984 	ldxrb	w4, [x12]
    1730:	15030000 	b	40c1730 <__stack_size+0x40bd730>
    1734:	025c1403 	.inst	0x025c1403 ; undefined
    1738:	0a880000 	and	w0, w0, w8, asr #0
    173c:	00524354 	.inst	0x00524354 ; undefined
    1740:	14031603 	b	c6f4c <__stack_size+0xc2f4c>
    1744:	00000098 	udf	#152
    1748:	083109ac 	.inst	0x083109ac ; undefined
    174c:	17030000 	b	fffffffffc0c174c <_sp+0xffffffff9b08174c>
    1750:	00981403 	.inst	0x00981403 ; undefined
    1754:	09b00000 	.inst	0x09b00000 ; undefined
    1758:	00000868 	udf	#2152
    175c:	14031803 	b	c7768 <__stack_size+0xc3768>
    1760:	00000098 	udf	#152
    1764:	41540ab4 	.inst	0x41540ab4 ; undefined
    1768:	19030054 	stlurb	w20, [x2, #48]
    176c:	00981403 	.inst	0x00981403 ; undefined
    1770:	0ab80000 	bic	w0, w0, w24, asr #0
    1774:	00585448 	.inst	0x00585448 ; undefined
    1778:	14031a03 	b	c7f84 <__stack_size+0xc3f84>
    177c:	00000098 	udf	#152
    1780:	08bf09bc 	.inst	0x08bf09bc ; undefined
    1784:	1b030000 	madd	w0, w0, w3, w0
    1788:	00981403 	.inst	0x00981403 ; undefined
    178c:	0ac00000 	and	w0, w0, w0, ror #0
    1790:	00525043 	.inst	0x00525043 ; undefined
    1794:	14031c03 	b	c87a0 <__stack_size+0xc47a0>
    1798:	00000098 	udf	#152
    179c:	980600c4 	ldrsw	x4, d7b4 <__stack_size+0x97b4>
    17a0:	47000000 	.inst	0x47000000 ; undefined
    17a4:	07000002 	.inst	0x07000002 ; undefined
    17a8:	00000029 	udf	#41
    17ac:	3705000f 	tbnz	w15, #0, ffffffffffffb7ac <_sp+0xffffffff9efbb7ac>
    17b0:	06000002 	.inst	0x06000002 ; undefined
    17b4:	00000098 	udf	#152
    17b8:	0000025c 	udf	#604
    17bc:	00002907 	udf	#10503
    17c0:	05000800 	orr	z0.s, z0.s, #0x80000000
    17c4:	0000024c 	udf	#588
    17c8:	0008cb0b 	.inst	0x0008cb0b ; undefined
    17cc:	031d0300 	.inst	0x031d0300 ; undefined
    17d0:	0000c002 	udf	#49154
    17d4:	08370c00 	.inst	0x08370c00 ; undefined
    17d8:	82040000 	.inst	0x82040000 ; undefined
    17dc:	005a0901 	.inst	0x005a0901 ; undefined
    17e0:	028a0000 	.inst	0x028a0000 ; undefined
    17e4:	8a0d0000 	and	x0, x0, x13
    17e8:	0d000002 	st1	{v2.b}[0], [x0]
    17ec:	00000079 	udf	#121
    17f0:	61080e00 	.inst	0x61080e00 ; undefined
    17f4:	0f000002 	.inst	0x0f000002 ; undefined
    17f8:	000007a5 	udf	#1957
    17fc:	66050a01 	.inst	0x66050a01 ; undefined
    1800:	60000000 	.inst	0x60000000 ; undefined
    1804:	0061002c 	.inst	0x0061002c ; undefined
    1808:	28000000 	stnp	w0, w0, [x0]
    180c:	00000000 	udf	#0
    1810:	01000000 	.inst	0x01000000 ; undefined
    1814:	0063109c 	.inst	0x0063109c ; undefined
    1818:	66110a01 	.inst	0x66110a01 ; undefined
    181c:	02000000 	.inst	0x02000000 ; undefined
    1820:	00007c91 	udf	#31889
    1824:	0000008c 	udf	#140
    1828:	08a30004 	.inst	0x08a30004 ; undefined
    182c:	01080000 	.inst	0x01080000 ; undefined
    1830:	00000220 	udf	#544
    1834:	0008eb0c 	.inst	0x0008eb0c ; undefined
    1838:	00002f00 	udf	#12032
    183c:	00040000 	.inst	0x00040000 ; undefined
	...
    1848:	00123c00 	.inst	0x00123c00 ; undefined
    184c:	07080200 	.inst	0x07080200 ; undefined
    1850:	0000017c 	udf	#380
    1854:	cb050802 	sub	x2, x0, x5, lsl #2
    1858:	03000001 	.inst	0x03000001 ; undefined
    185c:	000008e4 	udf	#2276
    1860:	76012e01 	.inst	0x76012e01 ; undefined
    1864:	88000000 	stxr	w0, w0, [x0]
    1868:	0061002c 	.inst	0x0061002c ; undefined
    186c:	74000000 	.inst	0x74000000 ; undefined
    1870:	00000000 	udf	#0
    1874:	01000000 	.inst	0x01000000 ; undefined
    1878:	0000769c 	udf	#30364
    187c:	31730400 	adds	w0, w0, #0xcc1, lsl #12
    1880:	142e0100 	b	b81c80 <__stack_size+0xb7dc80>
    1884:	0000007d 	udf	#125
    1888:	04789102 	asr	z2.s, z8.s, #8
    188c:	01003273 	.inst	0x01003273 ; undefined
    1890:	007d242e 	.inst	0x007d242e ; undefined
    1894:	91020000 	add	x0, x0, #0x80
    1898:	04050070 	.inst	0x04050070 ; undefined
    189c:	746e6905 	.inst	0x746e6905 ; undefined
    18a0:	8a080600 	and	x0, x16, x8, lsl #1
    18a4:	02000000 	.inst	0x02000000 ; undefined
    18a8:	011b0801 	.inst	0x011b0801 ; undefined
    18ac:	83070000 	.inst	0x83070000 ; undefined
    18b0:	00000000 	udf	#0
    18b4:	000002ce 	udf	#718
    18b8:	090c0004 	.inst	0x090c0004 ; undefined
    18bc:	01080000 	.inst	0x01080000 ; undefined
    18c0:	00000220 	udf	#544
    18c4:	00092a0c 	.inst	0x00092a0c ; undefined
    18c8:	00002f00 	udf	#12032
    18cc:	00042000 	.inst	0x00042000 ; undefined
	...
    18d8:	0012ca00 	.inst	0x0012ca00 ; undefined
    18dc:	05080200 	.inst	0x05080200 ; undefined
    18e0:	000001cb 	udf	#459
    18e4:	00071b03 	.inst	0x00071b03 ; undefined
    18e8:	17160200 	b	fffffffffc5820e8 <_sp+0xffffffff9b5420e8>
    18ec:	0000003c 	udf	#60
    18f0:	7c070802 	.inst	0x7c070802 ; undefined
    18f4:	02000001 	.inst	0x02000001 ; undefined
    18f8:	01460510 	.inst	0x01460510 ; undefined
    18fc:	10020000 	adr	x0, 58fc <__stack_size+0x18fc>
    1900:	00010007 	.inst	0x00010007 ; undefined
    1904:	06010200 	.inst	0x06010200 ; undefined
    1908:	00000114 	udf	#276
    190c:	d4050202 	hvc	#0x2810
    1910:	04000001 	add	z1.b, p0/m, z1.b, z0.b
    1914:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    1918:	01020074 	.inst	0x01020074 ; undefined
    191c:	00011208 	.inst	0x00011208 ; undefined
    1920:	07020200 	.inst	0x07020200 ; undefined
    1924:	00000133 	udf	#307
    1928:	81070402 	.inst	0x81070402 ; undefined
    192c:	02000001 	.inst	0x02000001 ; undefined
    1930:	01c60508 	.inst	0x01c60508 ; undefined
    1934:	08020000 	stxrb	w2, w0, [x0]
    1938:	00017707 	.inst	0x00017707 ; undefined
    193c:	08010200 	stxrb	w1, w0, [x16]
    1940:	0000011b 	udf	#283
    1944:	34367505 	cbz	w5, 6e7e4 <__stack_size+0x6a7e4>
    1948:	1c3a0300 	ldr	s0, 759a8 <__stack_size+0x719a8>
    194c:	00000082 	udf	#130
    1950:	00099c03 	.inst	0x00099c03 ; undefined
    1954:	1c3c0300 	ldr	s0, 799b4 <__stack_size+0x759b4>
    1958:	00000082 	udf	#130
    195c:	00097506 	.inst	0x00097506 ; undefined
    1960:	064f0100 	.inst	0x064f0100 ; undefined
	...
    196c:	0000003c 	udf	#60
    1970:	00000000 	udf	#0
    1974:	00f49c01 	.inst	0x00f49c01 ; undefined
    1978:	76070000 	.inst	0x76070000 ; undefined
    197c:	01000007 	.inst	0x01000007 ; undefined
    1980:	009c154f 	.inst	0x009c154f ; undefined
    1984:	91020000 	add	x0, x0, #0x80
    1988:	29d40868 	ldp	w8, w2, [x3, #160]!
    198c:	51010000 	sub	w0, w0, #0x40
    1990:	00009c0b 	udf	#39947
    1994:	78910200 	ldursh	x0, [x16, #-240]
    1998:	00097e08 	.inst	0x00097e08 ; undefined
    199c:	0b520100 	add	w0, w8, w18, lsr #0
    19a0:	0000009c 	udf	#156
    19a4:	00709102 	.inst	0x00709102 ; undefined
    19a8:	0004ae06 	.inst	0x0004ae06 ; undefined
    19ac:	06480100 	.inst	0x06480100 ; undefined
    19b0:	61002dc4 	.inst	0x61002dc4 ; undefined
    19b4:	00000000 	udf	#0
    19b8:	00000054 	udf	#84
    19bc:	00000000 	udf	#0
    19c0:	01409c01 	.inst	0x01409c01 ; undefined
    19c4:	76070000 	.inst	0x76070000 ; undefined
    19c8:	01000007 	.inst	0x01000007 ; undefined
    19cc:	009c1648 	.inst	0x009c1648 ; undefined
    19d0:	91020000 	add	x0, x0, #0x80
    19d4:	29d40868 	ldp	w8, w2, [x3, #160]!
    19d8:	4a010000 	eor	w0, w0, w1
    19dc:	00009c0b 	udf	#39947
    19e0:	78910200 	ldursh	x0, [x16, #-240]
    19e4:	00097e08 	.inst	0x00097e08 ; undefined
    19e8:	0b4b0100 	add	w0, w8, w11, lsr #0
    19ec:	0000009c 	udf	#156
    19f0:	00709102 	.inst	0x00709102 ; undefined
    19f4:	00098806 	.inst	0x00098806 ; undefined
    19f8:	06410100 	.inst	0x06410100 ; undefined
	...
    1a04:	00000050 	udf	#80
    1a08:	00000000 	udf	#0
    1a0c:	018c9c01 	.inst	0x018c9c01 ; undefined
    1a10:	76070000 	.inst	0x76070000 ; undefined
    1a14:	01000007 	.inst	0x01000007 ; undefined
    1a18:	009c1641 	.inst	0x009c1641 ; undefined
    1a1c:	91020000 	add	x0, x0, #0x80
    1a20:	29d40868 	ldp	w8, w2, [x3, #160]!
    1a24:	43010000 	.inst	0x43010000 ; undefined
    1a28:	00009c0b 	udf	#39947
    1a2c:	78910200 	ldursh	x0, [x16, #-240]
    1a30:	00097e08 	.inst	0x00097e08 ; undefined
    1a34:	0b440100 	add	w0, w8, w4, lsr #0
    1a38:	0000009c 	udf	#156
    1a3c:	00709102 	.inst	0x00709102 ; undefined
    1a40:	00096209 	.inst	0x00096209 ; undefined
    1a44:	0a3b0100 	bic	w0, w8, w27
    1a48:	00000030 	udf	#48
    1a4c:	61002d84 	.inst	0x61002d84 ; undefined
    1a50:	00000000 	udf	#0
    1a54:	00000040 	udf	#64
    1a58:	00000000 	udf	#0
    1a5c:	01cd9c01 	.inst	0x01cd9c01 ; undefined
    1a60:	76070000 	.inst	0x76070000 ; undefined
    1a64:	01000007 	.inst	0x01000007 ; undefined
    1a68:	0030263b 	.inst	0x0030263b ; NYI
    1a6c:	91020000 	add	x0, x0, #0x80
    1a70:	29d40868 	ldp	w8, w2, [x3, #160]!
    1a74:	3d010000 	str	b0, [x0, #64]
    1a78:	00009c08 	udf	#39944
    1a7c:	78910200 	ldursh	x0, [x16, #-240]
    1a80:	09190a00 	.inst	0x09190a00 ; undefined
    1a84:	36010000 	tbz	w0, #0, 3a84 <__stack_size-0x57c>
    1a88:	00009005 	udf	#36869
    1a8c:	002d6c00 	.inst	0x002d6c00 ; NYI
    1a90:	00000061 	udf	#97
    1a94:	00001800 	udf	#6144
    1a98:	00000000 	udf	#0
    1a9c:	119c0100 	.inst	0x119c0100 ; undefined
    1aa0:	0b000002 	add	w2, w0, w0
    1aa4:	61002d70 	.inst	0x61002d70 ; undefined
    1aa8:	00000000 	udf	#0
    1aac:	0000000c 	udf	#12
    1ab0:	00000000 	udf	#0
    1ab4:	0005a508 	.inst	0x0005a508 ; undefined
    1ab8:	09380100 	.inst	0x09380100 ; undefined
    1abc:	00000090 	udf	#144
    1ac0:	00789102 	.inst	0x00789102 ; undefined
    1ac4:	09520c00 	.inst	0x09520c00 ; undefined
    1ac8:	29010000 	stp	w0, w0, [x0, #8]
    1acc:	00009c0e 	udf	#39950
    1ad0:	002d5400 	.inst	0x002d5400 ; NYI
    1ad4:	00000061 	udf	#97
    1ad8:	00001800 	udf	#6144
    1adc:	00000000 	udf	#0
    1ae0:	439c0100 	.inst	0x439c0100 ; undefined
    1ae4:	08000002 	stxrb	w0, w2, [x0]
    1ae8:	000029d4 	udf	#10708
    1aec:	740f2b01 	.inst	0x740f2b01 ; undefined
    1af0:	02000000 	.inst	0x02000000 ; undefined
    1af4:	0d007c91 	.inst	0x0d007c91 ; undefined
    1af8:	000009a2 	udf	#2466
    1afc:	fc0d1a01 	.inst	0xfc0d1a01 ; undefined
    1b00:	0061002c 	.inst	0x0061002c ; undefined
    1b04:	58000000 	ldr	x0, 1b04 <__stack_size-0x24fc>
    1b08:	00000000 	udf	#0
    1b0c:	01000000 	.inst	0x01000000 ; undefined
    1b10:	0776079c 	.inst	0x0776079c ; undefined
    1b14:	1a010000 	adc	w0, w0, w1
    1b18:	00009c1b 	udf	#39963
    1b1c:	58910200 	ldr	x0, fffffffffff23b5c <_sp+0xffffffff9eee3b5c>
    1b20:	00099208 	.inst	0x00099208 ; undefined
    1b24:	081c0100 	stxrb	w28, w0, [x8]
    1b28:	0000009c 	udf	#156
    1b2c:	08689102 	.inst	0x08689102 ; undefined
    1b30:	00000997 	udf	#2455
    1b34:	9c0e1c01 	ldr	q1, 1deb4 <__stack_size+0x19eb4>
    1b38:	02000000 	.inst	0x02000000 ; undefined
    1b3c:	040e7091 	mls	z17.b, p4/m, z4.b, z14.b
    1b40:	0061002d 	.inst	0x0061002d ; undefined
    1b44:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    1b48:	00000000 	udf	#0
    1b4c:	af000000 	.inst	0xaf000000 ; undefined
    1b50:	08000002 	stxrb	w0, w2, [x0]
    1b54:	000005a5 	udf	#1445
    1b58:	90091d01 	adrp	x1, 123a1000 <__stack_size+0x1239d000>
    1b5c:	02000000 	.inst	0x02000000 ; undefined
    1b60:	0b007891 	add	w17, w4, w0, lsl #30
    1b64:	61002d24 	.inst	0x61002d24 ; undefined
    1b68:	00000000 	udf	#0
    1b6c:	0000000c 	udf	#12
    1b70:	00000000 	udf	#0
    1b74:	0005a508 	.inst	0x0005a508 ; undefined
    1b78:	0a200100 	bic	w0, w8, w0
    1b7c:	00000090 	udf	#144
    1b80:	00609102 	.inst	0x00609102 ; undefined
    1b84:	026e0000 	.inst	0x026e0000 ; undefined
    1b88:	00040000 	.inst	0x00040000 ; undefined
    1b8c:	00000a16 	udf	#2582
    1b90:	02200108 	.inst	0x02200108 ; undefined
    1b94:	dd0c0000 	.inst	0xdd0c0000 ; undefined
    1b98:	2f000009 	.inst	0x2f000009 ; undefined
    1b9c:	a0000000 	.inst	0xa0000000 ; undefined
    1ba0:	00000004 	udf	#4
    1ba4:	00000000 	udf	#0
    1ba8:	76000000 	.inst	0x76000000 ; undefined
    1bac:	02000014 	.inst	0x02000014 ; undefined
    1bb0:	000009aa 	udf	#2474
    1bb4:	03020110 	.inst	0x03020110 ; undefined
    1bb8:	00006e08 	udf	#28168
    1bbc:	09ad0300 	.inst	0x09ad0300 ; undefined
    1bc0:	04020000 	.inst	0x04020000 ; undefined
    1bc4:	00006e10 	udf	#28176
    1bc8:	65040000 	.inst	0x65040000 ; undefined
    1bcc:	0200726c 	.inst	0x0200726c ; undefined
    1bd0:	007e1005 	.inst	0x007e1005 ; undefined
    1bd4:	05f80000 	.inst	0x05f80000 ; undefined
    1bd8:	00727365 	.inst	0x00727365 ; undefined
    1bdc:	7e100602 	.inst	0x7e100602 ; undefined
    1be0:	00000000 	udf	#0
    1be4:	0a210601 	bic	w1, w16, w1, lsl #1
    1be8:	07020000 	.inst	0x07020000 ; undefined
    1bec:	00007e10 	udf	#32272
    1bf0:	00010800 	.inst	0x00010800 ; undefined
    1bf4:	00007e07 	udf	#32263
    1bf8:	00007e00 	udf	#32256
    1bfc:	007e0800 	.inst	0x007e0800 ; undefined
    1c00:	001e0000 	.inst	0x001e0000 ; undefined
    1c04:	7c070809 	.inst	0x7c070809 ; undefined
    1c08:	0a000001 	and	w1, w0, w0
    1c0c:	00000a18 	udf	#2584
    1c10:	bc0d7d01 	str	s1, [x8, #215]!
    1c14:	0061002e 	.inst	0x0061002e ; undefined
    1c18:	20000000 	.inst	0x20000000 ; undefined
    1c1c:	00000000 	udf	#0
    1c20:	01000000 	.inst	0x01000000 ; undefined
    1c24:	0000c29c 	udf	#49820
    1c28:	09aa0b00 	.inst	0x09aa0b00 ; undefined
    1c2c:	7d010000 	str	h0, [x0, #128]
    1c30:	0000c226 	udf	#49702
    1c34:	78910200 	ldursh	x0, [x16, #-240]
    1c38:	7273650c 	.inst	0x7273650c ; undefined
    1c3c:	3c7d0100 	.inst	0x3c7d0100 ; undefined
    1c40:	000000c8 	udf	#200
    1c44:	00749102 	.inst	0x00749102 ; undefined
    1c48:	0029080d 	.inst	0x0029080d ; NYI
    1c4c:	04090000 	umax	z0.b, p0/m, z0.b, z0.b
    1c50:	00018107 	.inst	0x00018107 ; undefined
    1c54:	065e0a00 	.inst	0x065e0a00 ; undefined
    1c58:	70010000 	adr	x0, 3c5b <__stack_size-0x3a5>
    1c5c:	0000000d 	udf	#13
    1c60:	00000000 	udf	#0
    1c64:	00002000 	udf	#8192
    1c68:	00000000 	udf	#0
    1c6c:	0c9c0100 	st4	{v0.8b-v3.8b}, [x8], x28
    1c70:	0b000001 	add	w1, w0, w0
    1c74:	000009aa 	udf	#2474
    1c78:	c22b7001 	.inst	0xc22b7001 ; undefined
    1c7c:	02000000 	.inst	0x02000000 ; undefined
    1c80:	650c7891 	.inst	0x650c7891 ; undefined
    1c84:	01007273 	.inst	0x01007273 ; undefined
    1c88:	00c84170 	.inst	0x00c84170 ; undefined
    1c8c:	91020000 	add	x0, x0, #0x80
    1c90:	2b0e0074 	adds	w20, w3, w14
    1c94:	01000003 	.inst	0x01000003 ; undefined
    1c98:	00000d64 	udf	#3428
    1c9c:	00000000 	udf	#0
    1ca0:	00180000 	.inst	0x00180000 ; undefined
    1ca4:	00000000 	udf	#0
    1ca8:	9c010000 	ldr	q0, 3ca8 <__stack_size-0x358>
    1cac:	0009b20a 	.inst	0x0009b20a ; undefined
    1cb0:	0d570100 	.inst	0x0d570100 ; undefined
    1cb4:	61002e9c 	.inst	0x61002e9c ; undefined
    1cb8:	00000000 	udf	#0
    1cbc:	00000020 	udf	#32
    1cc0:	00000000 	udf	#0
    1cc4:	01639c01 	.inst	0x01639c01 ; undefined
    1cc8:	aa0b0000 	orr	x0, x0, x11
    1ccc:	01000009 	.inst	0x01000009 ; undefined
    1cd0:	00c22c57 	.inst	0x00c22c57 ; undefined
    1cd4:	91020000 	add	x0, x0, #0x80
    1cd8:	73650c78 	.inst	0x73650c78 ; undefined
    1cdc:	57010072 	.inst	0x57010072 ; undefined
    1ce0:	0000c842 	udf	#51266
    1ce4:	74910200 	.inst	0x74910200 ; undefined
    1ce8:	0a280a00 	bic	w0, w16, w8, lsl #2
    1cec:	4a010000 	eor	w0, w0, w1
    1cf0:	002e7c0d 	.inst	0x002e7c0d ; NYI
    1cf4:	00000061 	udf	#97
    1cf8:	00002000 	udf	#8192
    1cfc:	00000000 	udf	#0
    1d00:	a09c0100 	.inst	0xa09c0100 ; undefined
    1d04:	0b000001 	add	w1, w0, w0
    1d08:	000009aa 	udf	#2474
    1d0c:	c22a4a01 	.inst	0xc22a4a01 ; undefined
    1d10:	02000000 	.inst	0x02000000 ; undefined
    1d14:	650c7891 	.inst	0x650c7891 ; undefined
    1d18:	01007273 	.inst	0x01007273 ; undefined
    1d1c:	00c8404a 	.inst	0x00c8404a ; undefined
    1d20:	91020000 	add	x0, x0, #0x80
    1d24:	d20a0074 	eor	x20, x3, #0x40000000400000
    1d28:	01000009 	.inst	0x01000009 ; undefined
    1d2c:	2e5c0d3d 	.inst	0x2e5c0d3d ; undefined
    1d30:	00006100 	udf	#24832
    1d34:	00200000 	.inst	0x00200000 ; NYI
    1d38:	00000000 	udf	#0
    1d3c:	9c010000 	ldr	q0, 3d3c <__stack_size-0x2c4>
    1d40:	000001dd 	udf	#477
    1d44:	0009aa0b 	.inst	0x0009aa0b ; undefined
    1d48:	283d0100 	stnp	w0, w0, [x8, #-24]
    1d4c:	000000c2 	udf	#194
    1d50:	0c789102 	.inst	0x0c789102 ; undefined
    1d54:	00727365 	.inst	0x00727365 ; undefined
    1d58:	c83e3d01 	stxp	w30, x1, x15, [x8]
    1d5c:	02000000 	.inst	0x02000000 ; undefined
    1d60:	0a007491 	and	w17, w4, w0, lsl #29
    1d64:	000009c7 	udf	#2503
    1d68:	3c0d3001 	stur	b1, [x0, #211]
    1d6c:	0061002e 	.inst	0x0061002e ; undefined
    1d70:	20000000 	.inst	0x20000000 ; undefined
    1d74:	00000000 	udf	#0
    1d78:	01000000 	.inst	0x01000000 ; undefined
    1d7c:	00021a9c 	.inst	0x00021a9c ; undefined
    1d80:	09aa0b00 	.inst	0x09aa0b00 ; undefined
    1d84:	30010000 	adr	x0, 3d85 <__stack_size-0x27b>
    1d88:	0000c228 	udf	#49704
    1d8c:	78910200 	ldursh	x0, [x16, #-240]
    1d90:	7273650c 	.inst	0x7273650c ; undefined
    1d94:	3e300100 	.inst	0x3e300100 ; undefined
    1d98:	000000c8 	udf	#200
    1d9c:	00749102 	.inst	0x00749102 ; undefined
    1da0:	000a0c0a 	.inst	0x000a0c0a ; undefined
    1da4:	0d230100 	.inst	0x0d230100 ; undefined
    1da8:	61002e1c 	.inst	0x61002e1c ; undefined
    1dac:	00000000 	udf	#0
    1db0:	00000020 	udf	#32
    1db4:	00000000 	udf	#0
    1db8:	02579c01 	.inst	0x02579c01 ; undefined
    1dbc:	aa0b0000 	orr	x0, x0, x11
    1dc0:	01000009 	.inst	0x01000009 ; undefined
    1dc4:	00c22923 	.inst	0x00c22923 ; undefined
    1dc8:	91020000 	add	x0, x0, #0x80
    1dcc:	73650c78 	.inst	0x73650c78 ; undefined
    1dd0:	23010072 	.inst	0x23010072 ; undefined
    1dd4:	0000c83f 	udf	#51263
    1dd8:	74910200 	.inst	0x74910200 ; undefined
    1ddc:	09c10f00 	.inst	0x09c10f00 ; undefined
    1de0:	14010000 	b	41de0 <__stack_size+0x3dde0>
    1de4:	002e180d 	.inst	0x002e180d ; NYI
    1de8:	00000061 	udf	#97
    1dec:	00000400 	udf	#1024
    1df0:	00000000 	udf	#0
    1df4:	009c0100 	.inst	0x009c0100 ; undefined
    1df8:	00000751 	udf	#1873
    1dfc:	0b130004 	add	w4, w0, w19
    1e00:	01080000 	.inst	0x01080000 ; undefined
    1e04:	00000220 	udf	#544
    1e08:	000d890c 	.inst	0x000d890c ; undefined
    1e0c:	00002f00 	udf	#12032
    1e10:	00054000 	.inst	0x00054000 ; undefined
	...
    1e1c:	0015ef00 	.inst	0x0015ef00 ; undefined
    1e20:	05080200 	.inst	0x05080200 ; undefined
    1e24:	000001cb 	udf	#459
    1e28:	7c070802 	.inst	0x7c070802 ; undefined
    1e2c:	02000001 	.inst	0x02000001 ; undefined
    1e30:	01460510 	.inst	0x01460510 ; undefined
    1e34:	10020000 	adr	x0, 5e34 <__stack_size+0x1e34>
    1e38:	00010007 	.inst	0x00010007 ; undefined
    1e3c:	06010200 	.inst	0x06010200 ; undefined
    1e40:	00000114 	udf	#276
    1e44:	d4050202 	hvc	#0x2810
    1e48:	03000001 	.inst	0x03000001 ; undefined
    1e4c:	000008dc 	udf	#2268
    1e50:	5f0d5702 	.inst	0x5f0d5702 ; undefined
    1e54:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    1e58:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    1e5c:	64030074 	.inst	0x64030074 ; undefined
    1e60:	02000007 	.inst	0x02000007 ; undefined
    1e64:	00721759 	.inst	0x00721759 ; undefined
    1e68:	01020000 	.inst	0x01020000 ; undefined
    1e6c:	00011208 	.inst	0x00011208 ; undefined
    1e70:	07020200 	.inst	0x07020200 ; undefined
    1e74:	00000133 	udf	#307
    1e78:	0008db03 	.inst	0x0008db03 ; undefined
    1e7c:	165b0200 	b	fffffffff96c267c <_sp+0xffffffff9868267c>
    1e80:	00000091 	udf	#145
    1e84:	00008005 	udf	#32773
    1e88:	07040200 	.inst	0x07040200 ; undefined
    1e8c:	00000181 	udf	#385
    1e90:	c6050802 	.inst	0xc6050802 ; undefined
    1e94:	02000001 	.inst	0x02000001 ; undefined
    1e98:	01770708 	.inst	0x01770708 ; undefined
    1e9c:	60060000 	.inst	0x60060000 ; undefined
    1ea0:	0700000d 	.inst	0x0700000d ; undefined
    1ea4:	00009104 	udf	#37124
    1ea8:	0e3d0300 	saddl	v0.8h, v24.8b, v29.8b
    1eac:	000002f3 	udf	#755
    1eb0:	000b1d07 	.inst	0x000b1d07 ; undefined
    1eb4:	2f070000 	.inst	0x2f070000 ; undefined
    1eb8:	01000011 	.inst	0x01000011 ; undefined
    1ebc:	000a7007 	.inst	0x000a7007 ; undefined
    1ec0:	b6070200 	tbz	x0, #32, ffffffffffffff00 <_sp+0xffffffff9efbff00>
    1ec4:	03000010 	.inst	0x03000010 ; undefined
    1ec8:	000b6807 	.inst	0x000b6807 ; undefined
    1ecc:	60070400 	.inst	0x60070400 ; undefined
    1ed0:	05000010 	orr	z16.s, z16.s, #0x1
    1ed4:	000f8d07 	.inst	0x000f8d07 ; undefined
    1ed8:	db070600 	.inst	0xdb070600 ; undefined
    1edc:	0700000c 	.inst	0x0700000c ; undefined
    1ee0:	000bdd07 	.inst	0x000bdd07 ; undefined
    1ee4:	46070800 	.inst	0x46070800 ; undefined
    1ee8:	0900000c 	.inst	0x0900000c ; undefined
    1eec:	000cf807 	.inst	0x000cf807 ; undefined
    1ef0:	ba070a00 	.inst	0xba070a00 ; undefined
    1ef4:	0b00000d 	add	w13, w0, w0
    1ef8:	000d5507 	.inst	0x000d5507 ; undefined
    1efc:	d4070c00 	.inst	0xd4070c00 ; undefined
    1f00:	0d000010 	st1	{v16.b}[0], [x0]
    1f04:	000a3507 	.inst	0x000a3507 ; undefined
    1f08:	fe070e00 	.inst	0xfe070e00 ; undefined
    1f0c:	0f00000a 	.inst	0x0f00000a ; undefined
    1f10:	000aee07 	.inst	0x000aee07 ; undefined
    1f14:	41071000 	.inst	0x41071000 ; undefined
    1f18:	1100000f 	add	w15, w0, #0x0
    1f1c:	00105007 	.inst	0x00105007 ; undefined
    1f20:	28071200 	stnp	w0, w4, [x16, #56]
    1f24:	1300000c 	sbfx	w12, w0, #0, #1
    1f28:	000ebd07 	.inst	0x000ebd07 ; undefined
    1f2c:	f7071400 	.inst	0xf7071400 ; undefined
    1f30:	1500000f 	b	4001f6c <__stack_size+0x3ffdf6c>
    1f34:	000b9507 	.inst	0x000b9507 ; undefined
    1f38:	a0071600 	.inst	0xa0071600 ; undefined
    1f3c:	1700000c 	b	fffffffffc001f6c <_sp+0xffffffff9afc1f6c>
    1f40:	000d3b07 	.inst	0x000d3b07 ; undefined
    1f44:	e4071800 	.inst	0xe4071800 ; undefined
    1f48:	19000010 	stlurb	w16, [x0]
    1f4c:	00119b07 	.inst	0x00119b07 ; undefined
    1f50:	df071a00 	.inst	0xdf071a00 ; undefined
    1f54:	1b00000a 	madd	w10, w0, w0, w0
    1f58:	000c1907 	.inst	0x000c1907 ; undefined
    1f5c:	db071c00 	.inst	0xdb071c00 ; undefined
    1f60:	1d00000e 	.inst	0x1d00000e ; undefined
    1f64:	000b3b07 	.inst	0x000b3b07 ; undefined
    1f68:	73071e00 	.inst	0x73071e00 ; undefined
    1f6c:	1f00000c 	fmadd	s12, s0, s0, s0
    1f70:	000f6f07 	.inst	0x000f6f07 ; undefined
    1f74:	99072000 	stlur	w0, [x0, #114]
    1f78:	21000010 	.inst	0x21000010 ; undefined
    1f7c:	00114d07 	.inst	0x00114d07 ; undefined
    1f80:	e9072200 	.inst	0xe9072200 ; undefined
    1f84:	2300000c 	.inst	0x2300000c ; undefined
    1f88:	000eea07 	.inst	0x000eea07 ; undefined
    1f8c:	94072400 	bl	1caf8c <__stack_size+0x1c6f8c>
    1f90:	2500000e 	cmpge	p14.b, p0/z, z0.b, #0
    1f94:	000bb307 	.inst	0x000bb307 ; undefined
    1f98:	59072600 	.inst	0x59072600 ; undefined
    1f9c:	2700000b 	.inst	0x2700000b ; undefined
    1fa0:	000f3207 	.inst	0x000f3207 ; undefined
    1fa4:	41072800 	.inst	0x41072800 ; undefined
    1fa8:	29000010 	stp	w16, w0, [x0]
    1fac:	000bfb07 	.inst	0x000bfb07 ; undefined
    1fb0:	82072a00 	.inst	0x82072a00 ; undefined
    1fb4:	2b000011 	adds	w17, w0, w0
    1fb8:	000c5507 	.inst	0x000c5507 ; undefined
    1fbc:	1f072c00 	fmadd	s0, s0, s7, s11
    1fc0:	2d000010 	stp	s16, s0, [x0]
    1fc4:	000a4507 	.inst	0x000a4507 ; undefined
    1fc8:	0e072e00 	smov	w0, v16.b[3]
    1fcc:	2f00000b 	.inst	0x2f00000b ; undefined
    1fd0:	000e1d07 	.inst	0x000e1d07 ; undefined
    1fd4:	51073000 	sub	w0, w0, #0x1cc
    1fd8:	3100000f 	adds	w15, w0, #0x0
    1fdc:	000b8607 	.inst	0x000b8607 ; undefined
    1fe0:	91073200 	add	x0, x16, #0x1cc
    1fe4:	3300000c 	bfxil	w12, w0, #0, #1
    1fe8:	000fba07 	.inst	0x000fba07 ; undefined
    1fec:	9b073400 	madd	x0, x0, x7, x13
    1ff0:	3500000a 	cbnz	w10, 1ff0 <__stack_size-0x2010>
    1ff4:	00118c07 	.inst	0x00118c07 ; undefined
    1ff8:	16073600 	b	fffffffff81cf7f8 <_sp+0xffffffff9718f7f8>
    1ffc:	3700000d 	tbnz	w13, #0, 1ffc <__stack_size-0x2004>
    2000:	000dc907 	.inst	0x000dc907 ; undefined
    2004:	cc073800 	.inst	0xcc073800 ; undefined
    2008:	3900000e 	strb	w14, [x0]
    200c:	000ab907 	.inst	0x000ab907 ; undefined
    2010:	a4073a00 	ld1rqb	{z0.b}, p6/z, [x16, #112]
    2014:	3b00000b 	.inst	0x3b00000b ; undefined
    2018:	000f6007 	.inst	0x000f6007 ; undefined
    201c:	8a073c00 	and	x0, x0, x7, lsl #15
    2020:	3d000010 	str	b16, [x0]
    2024:	000c3707 	.inst	0x000c3707 ; undefined
    2028:	ae073e00 	.inst	0xae073e00 ; undefined
    202c:	3f00000e 	.inst	0x3f00000e ; undefined
    2030:	000d7a07 	.inst	0x000d7a07 ; undefined
    2034:	20074000 	.inst	0x20074000 ; undefined
    2038:	41000011 	.inst	0x41000011 ; undefined
    203c:	000a7f07 	.inst	0x000a7f07 ; undefined
    2040:	4a074200 	eor	w0, w16, w7, lsl #16
    2044:	4300000b 	.inst	0x4300000b ; undefined
    2048:	000e5007 	.inst	0x000e5007 ; undefined
    204c:	7e074400 	.inst	0x7e074400 ; undefined
    2050:	4500000f 	.inst	0x4500000f ; undefined
    2054:	000bec07 	.inst	0x000bec07 ; undefined
    2058:	d4074600 	.inst	0xd4074600 ; undefined
    205c:	4700000a 	.inst	0x4700000a ; undefined
    2060:	0010f307 	.inst	0x0010f307 ; undefined
    2064:	65074800 	.inst	0x65074800 ; undefined
    2068:	4900000a 	.inst	0x4900000a ; undefined
    206c:	000d4a07 	.inst	0x000d4a07 ; undefined
    2070:	77074a00 	.inst	0x77074a00 ; undefined
    2074:	4b00000b 	sub	w11, w0, w0
    2078:	000e0e07 	.inst	0x000e0e07 ; undefined
    207c:	19074c00 	.inst	0x19074c00 ; undefined
    2080:	4d00000f 	st1	{v15.b}[8], [x0]
    2084:	00102807 	.inst	0x00102807 ; undefined
    2088:	0a074e00 	and	w0, w16, w7, lsl #19
    208c:	4f00000c 	.inst	0x4f00000c ; undefined
    2090:	000fab07 	.inst	0x000fab07 ; undefined
    2094:	2c075000 	stnp	s0, s20, [x0, #56]
    2098:	5100000b 	sub	w11, w0, #0x0
    209c:	000c6407 	.inst	0x000c6407 ; undefined
    20a0:	07075200 	.inst	0x07075200 ; undefined
    20a4:	5300000d 	ubfx	w13, w0, #0, #1
    20a8:	0011aa07 	.inst	0x0011aa07 ; undefined
    20ac:	3e075400 	.inst	0x3e075400 ; undefined
    20b0:	55000011 	.inst	0x55000011 ; undefined
    20b4:	000aaa07 	.inst	0x000aaa07 ; undefined
    20b8:	82075600 	.inst	0x82075600 ; undefined
    20bc:	5700000c 	.inst	0x5700000c ; undefined
    20c0:	000e8507 	.inst	0x000e8507 ; undefined
    20c4:	c9075800 	.inst	0xc9075800 ; undefined
    20c8:	5900000f 	stlurh	w15, [x0]
    20cc:	00101007 	.inst	0x00101007 ; undefined
    20d0:	23075a00 	.inst	0x23075a00 ; undefined
    20d4:	5b00000f 	.inst	0x5b00000f ; undefined
    20d8:	00103207 	.inst	0x00103207 ; undefined
    20dc:	11075c00 	add	w0, w0, #0x1d7
    20e0:	5d000011 	.inst	0x5d000011 ; undefined
    20e4:	000ac807 	.inst	0x000ac807 ; undefined
    20e8:	03005e00 	.inst	0x03005e00 ; undefined
    20ec:	00001006 	udf	#4102
    20f0:	a603a703 	.inst	0xa603a703 ; undefined
    20f4:	06000000 	.inst	0x06000000 ; undefined
    20f8:	000010c6 	udf	#4294
    20fc:	00910407 	.inst	0x00910407 ; undefined
    2100:	7e040000 	.inst	0x7e040000 ; undefined
    2104:	00032a0e 	.inst	0x00032a0e ; undefined
    2108:	0e5f0700 	fmaxnm	v0.4h, v24.4h, v31.4h
    210c:	07000000 	.inst	0x07000000 ; undefined
    2110:	0000106f 	udf	#4207
    2114:	0bc20701 	.inst	0x0bc20701 ; undefined
    2118:	07030000 	.inst	0x07030000 ; undefined
    211c:	00000ef9 	udf	#3833
    2120:	88030003 	stxr	w3, w3, [x0]
    2124:	0400000a 	add	z10.b, p0/m, z10.b, z0.b
    2128:	02ff0383 	.inst	0x02ff0383 ; undefined
    212c:	af080000 	.inst	0xaf080000 ; undefined
    2130:	0700000c 	.inst	0x0700000c ; undefined
    2134:	00801124 	.inst	0x00801124 ; undefined
    2138:	8c090000 	.inst	0x8c090000 ; undefined
    213c:	52000000 	eor	w0, w0, #0x1
    2140:	0a000003 	and	w3, w0, w0
    2144:	00000030 	udf	#48
    2148:	42050001 	.inst	0x42050001 ; undefined
    214c:	0b000003 	add	w3, w0, w0
    2150:	030203c8 	.inst	0x030203c8 ; undefined
    2154:	0004ce09 	.inst	0x0004ce09 ; undefined
    2158:	085c0c00 	ldxrb	w0, [x0]
    215c:	03030000 	.inst	0x03030000 ; undefined
    2160:	008c1403 	.inst	0x008c1403 ; undefined
    2164:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    2168:	0000084a 	udf	#2122
    216c:	14030403 	b	c3178 <__stack_size+0xbf178>
    2170:	0000008c 	udf	#140
    2174:	08420c04 	ldxrb	w4, [x0]
    2178:	05030000 	orr	z0.d, z0.d, #0x100000000
    217c:	008c1403 	.inst	0x008c1403 ; undefined
    2180:	0d080000 	.inst	0x0d080000 ; undefined
    2184:	0052434c 	.inst	0x0052434c ; undefined
    2188:	14030603 	b	c3994 <__stack_size+0xbf994>
    218c:	0000008c 	udf	#140
    2190:	434d0d0c 	.inst	0x434d0d0c ; undefined
    2194:	07030052 	.inst	0x07030052 ; undefined
    2198:	008c1403 	.inst	0x008c1403 ; undefined
    219c:	0d100000 	.inst	0x0d100000 ; undefined
    21a0:	0052534c 	.inst	0x0052534c ; undefined
    21a4:	14030803 	b	c41b0 <__stack_size+0xc01b0>
    21a8:	0000008c 	udf	#140
    21ac:	534d0d14 	.inst	0x534d0d14 ; undefined
    21b0:	09030052 	.inst	0x09030052 ; undefined
    21b4:	008c1403 	.inst	0x008c1403 ; undefined
    21b8:	0d180000 	.inst	0x0d180000 ; undefined
    21bc:	00524353 	.inst	0x00524353 ; undefined
    21c0:	14030a03 	b	c49cc <__stack_size+0xc09cc>
    21c4:	0000008c 	udf	#140
    21c8:	08c50c1c 	ldlarb	w28, [x0]
    21cc:	0b030000 	add	w0, w0, w3
    21d0:	008c1403 	.inst	0x008c1403 ; undefined
    21d4:	0c200000 	.inst	0x0c200000 ; undefined
    21d8:	000008b9 	udf	#2233
    21dc:	14030c03 	b	c51e8 <__stack_size+0xc11e8>
    21e0:	0000008c 	udf	#140
    21e4:	089d0c24 	stllrb	w4, [x1]
    21e8:	0d030000 	.inst	0x0d030000 ; undefined
    21ec:	03521403 	.inst	0x03521403 ; undefined
    21f0:	0c280000 	.inst	0x0c280000 ; undefined
    21f4:	000008ab 	udf	#2219
    21f8:	14030e03 	b	c5a04 <__stack_size+0xc1a04>
    21fc:	000004de 	udf	#1246
    2200:	41460d30 	.inst	0x41460d30 ; undefined
    2204:	0f030052 	.inst	0x0f030052 ; undefined
    2208:	008c1403 	.inst	0x008c1403 ; undefined
    220c:	0d700000 	.inst	0x0d700000 ; undefined
    2210:	00524654 	.inst	0x00524654 ; undefined
    2214:	14031003 	b	c6220 <__stack_size+0xc2220>
    2218:	0000008c 	udf	#140
    221c:	46520d74 	.inst	0x46520d74 ; undefined
    2220:	11030057 	add	w23, w2, #0xc0
    2224:	008c1403 	.inst	0x008c1403 ; undefined
    2228:	0d780000 	.inst	0x0d780000 ; undefined
    222c:	00525355 	.inst	0x00525355 ; undefined
    2230:	14031203 	b	c6a3c <__stack_size+0xc2a3c>
    2234:	0000008c 	udf	#140
    2238:	46540d7c 	.inst	0x46540d7c ; undefined
    223c:	1303004c 	sbfiz	w12, w2, #29, #1
    2240:	008c1403 	.inst	0x008c1403 ; undefined
    2244:	0d800000 	st1	{v0.b}[0], [x0], x0
    2248:	004c4652 	.inst	0x004c4652 ; undefined
    224c:	14031403 	b	c7258 <__stack_size+0xc3258>
    2250:	0000008c 	udf	#140
    2254:	08520c84 	ldxrb	w4, [x4]
    2258:	15030000 	b	40c2258 <__stack_size+0x40be258>
    225c:	04f31403 	uqadd	z3.d, z0.d, z19.d
    2260:	0d880000 	st1	{v0.b}[0], [x0], x8
    2264:	00524354 	.inst	0x00524354 ; undefined
    2268:	14031603 	b	c7a74 <__stack_size+0xc3a74>
    226c:	0000008c 	udf	#140
    2270:	08310cac 	.inst	0x08310cac ; undefined
    2274:	17030000 	b	fffffffffc0c2274 <_sp+0xffffffff9b082274>
    2278:	008c1403 	.inst	0x008c1403 ; undefined
    227c:	0cb00000 	.inst	0x0cb00000 ; undefined
    2280:	00000868 	udf	#2152
    2284:	14031803 	b	c8290 <__stack_size+0xc4290>
    2288:	0000008c 	udf	#140
    228c:	41540db4 	.inst	0x41540db4 ; undefined
    2290:	19030054 	stlurb	w20, [x2, #48]
    2294:	008c1403 	.inst	0x008c1403 ; undefined
    2298:	0db80000 	st2	{v0.b, v1.b}[0], [x0], x24
    229c:	00585448 	.inst	0x00585448 ; undefined
    22a0:	14031a03 	b	c8aac <__stack_size+0xc4aac>
    22a4:	0000008c 	udf	#140
    22a8:	08bf0cbc 	.inst	0x08bf0cbc ; undefined
    22ac:	1b030000 	madd	w0, w0, w3, w0
    22b0:	008c1403 	.inst	0x008c1403 ; undefined
    22b4:	0dc00000 	ld1	{v0.b}[0], [x0], x0
    22b8:	00525043 	.inst	0x00525043 ; undefined
    22bc:	14031c03 	b	c92c8 <__stack_size+0xc52c8>
    22c0:	0000008c 	udf	#140
    22c4:	8c0900c4 	.inst	0x8c0900c4 ; undefined
    22c8:	de000000 	.inst	0xde000000 ; undefined
    22cc:	0a000004 	and	w4, w0, w0
    22d0:	00000030 	udf	#48
    22d4:	ce05000f 	eor3	v15.16b, v0.16b, v5.16b, v0.16b
    22d8:	09000004 	.inst	0x09000004 ; undefined
    22dc:	0000008c 	udf	#140
    22e0:	000004f3 	udf	#1267
    22e4:	0000300a 	udf	#12298
    22e8:	05000800 	orr	z0.s, z0.s, #0x80000000
    22ec:	000004e3 	udf	#1251
    22f0:	0008cb0e 	.inst	0x0008cb0e ; undefined
    22f4:	031d0300 	.inst	0x031d0300 ; undefined
    22f8:	00035702 	.inst	0x00035702 ; undefined
    22fc:	0e3f0f00 	sqadd	v0.8b, v24.8b, v31.8b
    2300:	04070000 	.inst	0x04070000 ; undefined
    2304:	00000091 	udf	#145
    2308:	0e013905 	zip1	v5.8b, v8.8b, v1.8b
    230c:	0000052b 	udf	#1323
    2310:	0010fe07 	.inst	0x0010fe07 ; undefined
    2314:	65070000 	.inst	0x65070000 ; undefined
    2318:	0100000d 	.inst	0x0100000d ; undefined
    231c:	000fe407 	.inst	0x000fe407 ; undefined
    2320:	0e000200 	tbl	v0.8b, {v16.16b}, v0.8b
    2324:	00000a54 	udf	#2644
    2328:	03013d05 	.inst	0x03013d05 ; undefined
    232c:	00000505 	udf	#1285
    2330:	00116f0f 	.inst	0x00116f0f ; undefined
    2334:	91040700 	add	x0, x24, #0x101
    2338:	05000000 	orr	z0.s, z0.s, #0x1
    233c:	640e0145 	.inst	0x640e0145 ; undefined
    2340:	07000005 	.inst	0x07000005 ; undefined
    2344:	00000dd8 	udf	#3544
    2348:	0dea0700 	ld2	{v0.b, v1.b}[1], [x24], x10
    234c:	07010000 	.inst	0x07010000 ; undefined
    2350:	00000dfc 	udf	#3580
    2354:	0e730702 	shadd	v2.4h, v24.4h, v19.4h
    2358:	00030000 	.inst	0x00030000 ; undefined
    235c:	000e2c0e 	.inst	0x000e2c0e ; undefined
    2360:	014a0500 	.inst	0x014a0500 ; undefined
    2364:	00053803 	.inst	0x00053803 ; undefined
    2368:	03361000 	.inst	0x03361000 ; undefined
    236c:	5a010000 	sbc	w0, w0, w1
    2370:	8003090a 	.inst	0x8003090a ; undefined
    2374:	0061006e 	.inst	0x0061006e ; undefined
    2378:	11000000 	add	w0, w0, #0x0
    237c:	00000120 	udf	#288
    2380:	5f02ce01 	.inst	0x5f02ce01 ; undefined
    2384:	95000000 	bl	4002384 <__stack_size+0x3ffe384>
    2388:	12000005 	and	w5, w0, #0x1
    238c:	04681100 	sqadd	z0.h, z8.h, z8.h
    2390:	cd010000 	.inst	0xcd010000 ; undefined
    2394:	00005f02 	udf	#24322
    2398:	0005a700 	.inst	0x0005a700 ; undefined
    239c:	13001200 	sbfx	w0, w16, #0, #5
    23a0:	00000fd8 	udf	#4056
    23a4:	09017d05 	.inst	0x09017d05 ; undefined
    23a8:	00000053 	udf	#83
    23ac:	000005cd 	udf	#1485
    23b0:	0005cd14 	.inst	0x0005cd14 ; undefined
    23b4:	00801400 	.inst	0x00801400 ; undefined
    23b8:	64140000 	.inst	0x64140000 ; undefined
    23bc:	14000005 	b	23d0 <__stack_size-0x1c30>
    23c0:	0000052b 	udf	#1323
    23c4:	f8081500 	str	x0, [x8], #129
    23c8:	16000004 	b	fffffffff80023d8 <_sp+0xffffffff96fc23d8>
    23cc:	000010a8 	udf	#4264
    23d0:	1106f503 	add	w3, w8, #0x1bd
    23d4:	00000303 	udf	#771
    23d8:	5f02ac01 	.inst	0x5f02ac01 ; undefined
    23dc:	ed000000 	.inst	0xed000000 ; undefined
    23e0:	12000005 	and	w5, w0, #0x1
    23e4:	07911700 	.inst	0x07911700 ; undefined
    23e8:	14060000 	b	1823e8 <__stack_size+0x17e3e8>
    23ec:	00005f05 	udf	#24325
    23f0:	00060400 	.inst	0x00060400 ; undefined
    23f4:	06041400 	.inst	0x06041400 ; undefined
    23f8:	00120000 	.inst	0x00120000 ; undefined
    23fc:	06110815 	.inst	0x06110815 ; undefined
    2400:	01020000 	.inst	0x01020000 ; undefined
    2404:	00011b08 	.inst	0x00011b08 ; undefined
    2408:	060a1800 	.inst	0x060a1800 ; undefined
    240c:	0b190000 	add	w0, w0, w25
    2410:	0100000f 	.inst	0x0100000f ; undefined
    2414:	2f6c06ba 	.inst	0x2f6c06ba ; undefined
    2418:	00006100 	udf	#24832
    241c:	003c0000 	.inst	0x003c0000 ; NYI
    2420:	00000000 	udf	#0
    2424:	9c010000 	ldr	q0, 4424 <__stack_size+0x424>
    2428:	00000655 	udf	#1621
    242c:	00046811 	.inst	0x00046811 ; undefined
    2430:	02cd0100 	.inst	0x02cd0100 ; undefined
    2434:	0000005f 	udf	#95
    2438:	00000646 	udf	#1606
    243c:	201a0012 	.inst	0x201a0012 ; undefined
    2440:	01000001 	.inst	0x01000001 ; undefined
    2444:	005f02ce 	.inst	0x005f02ce ; undefined
    2448:	00120000 	.inst	0x00120000 ; undefined
    244c:	115c1b00 	add	w0, w24, #0x706, lsl #12
    2450:	a5010000 	ld1rqw	{z0.s}, p0/z, [x0, x1, lsl #2]
    2454:	00005309 	udf	#21257
	...
    2460:	00003c00 	udf	#15360
    2464:	00000000 	udf	#0
    2468:	e09c0100 	.inst	0xe09c0100 ; undefined
    246c:	1c000006 	ldr	s6, 246c <__stack_size-0x1b94>
    2470:	00000d60 	udf	#3424
    2474:	f326a501 	.inst	0xf326a501 ; undefined
    2478:	02000002 	.inst	0x02000002 ; undefined
    247c:	731d7c91 	.inst	0x731d7c91 ; undefined
    2480:	01007668 	.inst	0x01007668 ; undefined
    2484:	006634a5 	.inst	0x006634a5 ; undefined
    2488:	91020000 	add	x0, x0, #0x80
    248c:	0cd11c7b 	.inst	0x0cd11c7b ; undefined
    2490:	a5010000 	ld1rqw	{z0.s}, p0/z, [x0, x1, lsl #2]
    2494:	00032a4c 	.inst	0x00032a4c ; undefined
    2498:	74910200 	.inst	0x74910200 ; undefined
    249c:	6c766c1d 	ldnp	d29, d27, [x0, #-160]
    24a0:	5fa50100 	.inst	0x5fa50100 ; undefined
    24a4:	00000066 	udf	#102
    24a8:	1c7a9102 	ldr	s2, f76c8 <__stack_size+0xf36c8>
    24ac:	000005b9 	udf	#1465
    24b0:	666ca501 	.inst	0x666ca501 ; undefined
    24b4:	02000000 	.inst	0x02000000 ; undefined
    24b8:	e21c7991 	.inst	0xe21c7991 ; undefined
    24bc:	01000003 	.inst	0x01000003 ; undefined
    24c0:	06e07ca5 	.inst	0x06e07ca5 ; undefined
    24c4:	91020000 	add	x0, x0, #0x80
    24c8:	03031a68 	.inst	0x03031a68 ; undefined
    24cc:	ac010000 	stnp	q0, q0, [x0, #32]
    24d0:	00005f02 	udf	#24322
    24d4:	00001200 	udf	#4608
    24d8:	bf19081e 	.inst	0xbf19081e ; undefined
    24dc:	0100000c 	.inst	0x0100000c ; undefined
    24e0:	2edc0686 	fminnmp	v6.4h, v20.4h, v28.4h
    24e4:	00006100 	udf	#24832
    24e8:	00900000 	.inst	0x00900000 ; undefined
    24ec:	00000000 	udf	#0
    24f0:	9c010000 	ldr	q0, 44f0 <__stack_size+0x4f0>
    24f4:	00000710 	udf	#1808
    24f8:	000f9c1f 	.inst	0x000f9c1f ; undefined
    24fc:	118c0100 	.inst	0x118c0100 ; undefined
    2500:	00000710 	udf	#1808
    2504:	00609102 	.inst	0x00609102 ; undefined
    2508:	00060409 	.inst	0x00060409 ; undefined
    250c:	00072000 	.inst	0x00072000 ; undefined
    2510:	00300a00 	.inst	0x00300a00 ; NYI
    2514:	00030000 	.inst	0x00030000 ; undefined
    2518:	000ea320 	.inst	0x000ea320 ; undefined
    251c:	06790100 	.inst	0x06790100 ; undefined
	...
    2528:	0000001c 	udf	#28
    252c:	00000000 	udf	#0
    2530:	25209c01 	cntp	x1, p7, p0.b
    2534:	0100000d 	.inst	0x0100000d ; undefined
    2538:	00000667 	udf	#1639
    253c:	00000000 	udf	#0
    2540:	001c0000 	.inst	0x001c0000 ; undefined
    2544:	00000000 	udf	#0
    2548:	9c010000 	ldr	q0, 4548 <__stack_size+0x548>
    254c:	0000a000 	udf	#40960
    2550:	0d000400 	st1	{v0.b}[1], [x0]
    2554:	0800000d 	stxrb	w0, w13, [x0]
    2558:	00022001 	.inst	0x00022001 ; undefined
    255c:	11b90c00 	.inst	0x11b90c00 ; undefined
    2560:	002f0000 	.inst	0x002f0000 ; NYI
    2564:	05a00000 	zip1	z0.q, z0.q, z0.q
	...
    2570:	179a0000 	b	fffffffffe682570 <_sp+0xffffffff9d642570>
    2574:	08020000 	stxrb	w2, w0, [x0]
    2578:	00017c07 	.inst	0x00017c07 ; undefined
    257c:	05080200 	.inst	0x05080200 ; undefined
    2580:	000001cb 	udf	#459
    2584:	81070402 	.inst	0x81070402 ; undefined
    2588:	02000001 	.inst	0x02000001 ; undefined
    258c:	01460510 	.inst	0x01460510 ; undefined
    2590:	10020000 	adr	x0, 6590 <__stack_size+0x2590>
    2594:	00010007 	.inst	0x00010007 ; undefined
    2598:	06010200 	.inst	0x06010200 ; undefined
    259c:	00000114 	udf	#276
    25a0:	d4050202 	hvc	#0x2810
    25a4:	03000001 	.inst	0x03000001 ; undefined
    25a8:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    25ac:	01020074 	.inst	0x01020074 ; undefined
    25b0:	00011208 	.inst	0x00011208 ; undefined
    25b4:	07020200 	.inst	0x07020200 ; undefined
    25b8:	00000133 	udf	#307
    25bc:	0008db04 	.inst	0x0008db04 ; undefined
    25c0:	165b0200 	b	fffffffff96c2dc0 <_sp+0xffffffff98682dc0>
    25c4:	00000037 	udf	#55
    25c8:	c6050802 	.inst	0xc6050802 ; undefined
    25cc:	02000001 	.inst	0x02000001 ; undefined
    25d0:	01770708 	.inst	0x01770708 ; undefined
    25d4:	a8050000 	stnp	x0, x0, [x0, #80]
    25d8:	01000010 	.inst	0x01000010 ; undefined
    25dc:	2fa8070f 	.inst	0x2fa8070f ; undefined
    25e0:	00006100 	udf	#24832
    25e4:	03d80000 	.inst	0x03d80000 ; undefined
    25e8:	00000000 	udf	#0
    25ec:	9c010000 	ldr	q0, 45ec <__stack_size+0x5ec>
    25f0:	000b9800 	.inst	0x000b9800 ; undefined
    25f4:	60000400 	.inst	0x60000400 ; undefined
    25f8:	0800000d 	stxrb	w0, w13, [x0]
    25fc:	00022001 	.inst	0x00022001 ; undefined
    2600:	140e0c00 	b	385600 <__stack_size+0x381600>
    2604:	002f0000 	.inst	0x002f0000 ; NYI
    2608:	05c00000 	dupm	z0.s, #0x1
	...
    2614:	19ae0000 	.inst	0x19ae0000 ; undefined
    2618:	d5020000 	msr	s0_2_c0_c0_0, x0
    261c:	03000006 	.inst	0x03000006 ; undefined
    2620:	0035170b 	.inst	0x0035170b ; NYI
    2624:	08030000 	stxrb	w3, w0, [x0]
    2628:	00017c07 	.inst	0x00017c07 ; undefined
    262c:	05080300 	.inst	0x05080300 ; undefined
    2630:	000001cb 	udf	#459
    2634:	81070403 	.inst	0x81070403 ; undefined
    2638:	03000001 	.inst	0x03000001 ; undefined
    263c:	01460510 	.inst	0x01460510 ; undefined
    2640:	10030000 	adr	x0, 8640 <__stack_size+0x4640>
    2644:	00010007 	.inst	0x00010007 ; undefined
    2648:	06010300 	.inst	0x06010300 ; undefined
    264c:	00000114 	udf	#276
    2650:	d4050203 	smc	#0x2810
    2654:	02000001 	.inst	0x02000001 ; undefined
    2658:	000008dc 	udf	#2268
    265c:	720d5704 	ands	w4, w24, #0xfff801ff
    2660:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2664:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    2668:	64020074 	.inst	0x64020074 ; undefined
    266c:	04000007 	add	z7.b, p0/m, z7.b, z0.b
    2670:	008a1759 	.inst	0x008a1759 ; undefined
    2674:	79050000 	strh	w0, [x0, #640]
    2678:	03000000 	.inst	0x03000000 ; undefined
    267c:	01120801 	.inst	0x01120801 ; undefined
    2680:	2b020000 	adds	w0, w0, w2
    2684:	04000013 	add	z19.b, p0/m, z19.b, z0.b
    2688:	009d185a 	.inst	0x009d185a ; undefined
    268c:	02030000 	.inst	0x02030000 ; undefined
    2690:	00013307 	.inst	0x00013307 ; undefined
    2694:	08db0200 	ldlarb	w0, [x16]
    2698:	5b040000 	.inst	0x5b040000 ; undefined
    269c:	00004316 	udf	#17174
    26a0:	00a40500 	.inst	0x00a40500 ; undefined
    26a4:	08030000 	stxrb	w3, w0, [x0]
    26a8:	0001c605 	.inst	0x0001c605 ; undefined
    26ac:	07080300 	.inst	0x07080300 ; undefined
    26b0:	00000177 	udf	#375
    26b4:	43040706 	.inst	0x43040706 ; undefined
    26b8:	05000000 	orr	z0.s, z0.s, #0x1
    26bc:	df0e011d 	.inst	0xdf0e011d ; undefined
    26c0:	07000000 	.inst	0x07000000 ; undefined
    26c4:	000014a8 	udf	#5288
    26c8:	15b80700 	b	6e042c8 <__stack_size+0x6e002c8>
    26cc:	00010000 	.inst	0x00010000 ; undefined
    26d0:	0000b008 	udf	#45064
    26d4:	0000ef00 	udf	#61184
    26d8:	00350900 	.inst	0x00350900 ; NYI
    26dc:	00010000 	.inst	0x00010000 ; undefined
    26e0:	0000df05 	udf	#57093
    26e4:	05c80a00 	.inst	0x05c80a00 ; undefined
    26e8:	6b090302 	subs	w2, w24, w9
    26ec:	0b000002 	add	w2, w0, w0
    26f0:	0000085c 	udf	#2140
    26f4:	14030305 	b	c3308 <__stack_size+0xbf308>
    26f8:	000000b0 	udf	#176
    26fc:	084a0b00 	ldxrb	w0, [x24]
    2700:	04050000 	.inst	0x04050000 ; undefined
    2704:	00b01403 	.inst	0x00b01403 ; undefined
    2708:	0b040000 	add	w0, w0, w4
    270c:	00000842 	udf	#2114
    2710:	14030505 	b	c3b24 <__stack_size+0xbfb24>
    2714:	000000b0 	udf	#176
    2718:	434c0c08 	.inst	0x434c0c08 ; undefined
    271c:	06050052 	.inst	0x06050052 ; undefined
    2720:	00b01403 	.inst	0x00b01403 ; undefined
    2724:	0c0c0000 	.inst	0x0c0c0000 ; undefined
    2728:	0052434d 	.inst	0x0052434d ; undefined
    272c:	14030705 	b	c4340 <__stack_size+0xc0340>
    2730:	000000b0 	udf	#176
    2734:	534c0c10 	.inst	0x534c0c10 ; undefined
    2738:	08050052 	stxrb	w5, w18, [x2]
    273c:	00b01403 	.inst	0x00b01403 ; undefined
    2740:	0c140000 	.inst	0x0c140000 ; undefined
    2744:	0052534d 	.inst	0x0052534d ; undefined
    2748:	14030905 	b	c4b5c <__stack_size+0xc0b5c>
    274c:	000000b0 	udf	#176
    2750:	43530c18 	.inst	0x43530c18 ; undefined
    2754:	0a050052 	and	w18, w2, w5
    2758:	00b01403 	.inst	0x00b01403 ; undefined
    275c:	0b1c0000 	add	w0, w0, w28
    2760:	000008c5 	udf	#2245
    2764:	14030b05 	b	c5378 <__stack_size+0xc1378>
    2768:	000000b0 	udf	#176
    276c:	08b90b20 	.inst	0x08b90b20 ; undefined
    2770:	0c050000 	.inst	0x0c050000 ; undefined
    2774:	00b01403 	.inst	0x00b01403 ; undefined
    2778:	0b240000 	add	w0, w0, w4, uxtb
    277c:	0000089d 	udf	#2205
    2780:	14030d05 	b	c5b94 <__stack_size+0xc1b94>
    2784:	000000ef 	udf	#239
    2788:	08ab0b28 	.inst	0x08ab0b28 ; undefined
    278c:	0e050000 	tbl	v0.8b, {v0.16b}, v5.8b
    2790:	027b1403 	.inst	0x027b1403 ; undefined
    2794:	0c300000 	.inst	0x0c300000 ; undefined
    2798:	00524146 	.inst	0x00524146 ; undefined
    279c:	14030f05 	b	c63b0 <__stack_size+0xc23b0>
    27a0:	000000b0 	udf	#176
    27a4:	46540c70 	.inst	0x46540c70 ; undefined
    27a8:	10050052 	adr	x18, c7b0 <__stack_size+0x87b0>
    27ac:	00b01403 	.inst	0x00b01403 ; undefined
    27b0:	0c740000 	.inst	0x0c740000 ; undefined
    27b4:	00574652 	.inst	0x00574652 ; undefined
    27b8:	14031105 	b	c6bcc <__stack_size+0xc2bcc>
    27bc:	000000b0 	udf	#176
    27c0:	53550c78 	.inst	0x53550c78 ; undefined
    27c4:	12050052 	and	w18, w2, #0x8000000
    27c8:	00b01403 	.inst	0x00b01403 ; undefined
    27cc:	0c7c0000 	.inst	0x0c7c0000 ; undefined
    27d0:	004c4654 	.inst	0x004c4654 ; undefined
    27d4:	14031305 	b	c73e8 <__stack_size+0xc33e8>
    27d8:	000000b0 	udf	#176
    27dc:	46520c80 	.inst	0x46520c80 ; undefined
    27e0:	1405004c 	b	142910 <__stack_size+0x13e910>
    27e4:	00b01403 	.inst	0x00b01403 ; undefined
    27e8:	0b840000 	add	w0, w0, w4, asr #0
    27ec:	00000852 	udf	#2130
    27f0:	14031505 	b	c7c04 <__stack_size+0xc3c04>
    27f4:	00000290 	udf	#656
    27f8:	43540c88 	.inst	0x43540c88 ; undefined
    27fc:	16050052 	b	fffffffff8142944 <_sp+0xffffffff97102944>
    2800:	00b01403 	.inst	0x00b01403 ; undefined
    2804:	0bac0000 	.inst	0x0bac0000 ; undefined
    2808:	00000831 	udf	#2097
    280c:	14031705 	b	c8420 <__stack_size+0xc4420>
    2810:	000000b0 	udf	#176
    2814:	08680bb0 	.inst	0x08680bb0 ; undefined
    2818:	18050000 	ldr	w0, c818 <__stack_size+0x8818>
    281c:	00b01403 	.inst	0x00b01403 ; undefined
    2820:	0cb40000 	.inst	0x0cb40000 ; undefined
    2824:	00544154 	.inst	0x00544154 ; undefined
    2828:	14031905 	b	c8c3c <__stack_size+0xc4c3c>
    282c:	000000b0 	udf	#176
    2830:	54480cb8 	.inst	0x54480cb8 ; undefined
    2834:	1a050058 	adc	w24, w2, w5
    2838:	00b01403 	.inst	0x00b01403 ; undefined
    283c:	0bbc0000 	.inst	0x0bbc0000 ; undefined
    2840:	000008bf 	udf	#2239
    2844:	14031b05 	b	c9458 <__stack_size+0xc5458>
    2848:	000000b0 	udf	#176
    284c:	50430cc0 	adr	x0, 889e6 <__stack_size+0x849e6>
    2850:	1c050052 	ldr	s18, c858 <__stack_size+0x8858>
    2854:	00b01403 	.inst	0x00b01403 ; undefined
    2858:	00c40000 	.inst	0x00c40000 ; undefined
    285c:	0000b008 	udf	#45064
    2860:	00027b00 	.inst	0x00027b00 ; undefined
    2864:	00350900 	.inst	0x00350900 ; NYI
    2868:	000f0000 	.inst	0x000f0000 ; undefined
    286c:	00026b05 	.inst	0x00026b05 ; undefined
    2870:	00b00800 	.inst	0x00b00800 ; undefined
    2874:	02900000 	.inst	0x02900000 ; undefined
    2878:	35090000 	cbnz	w0, 14878 <__stack_size+0x10878>
    287c:	08000000 	stxrb	w0, w0, [x0]
    2880:	02800500 	.inst	0x02800500 ; undefined
    2884:	cb0d0000 	sub	x0, x0, x13
    2888:	05000008 	orr	z8.s, z8.s, #0x1
    288c:	f402031d 	.inst	0xf402031d ; undefined
    2890:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    2894:	00000e3f 	udf	#3647
    2898:	00430407 	.inst	0x00430407 ; undefined
    289c:	39060000 	strb	w0, [x0, #384]
    28a0:	02c80e01 	.inst	0x02c80e01 ; undefined
    28a4:	fe070000 	.inst	0xfe070000 ; undefined
    28a8:	00000010 	udf	#16
    28ac:	000d6507 	.inst	0x000d6507 ; undefined
    28b0:	e4070100 	.inst	0xe4070100 ; undefined
    28b4:	0200000f 	.inst	0x0200000f ; undefined
    28b8:	0a540d00 	and	w0, w8, w20, lsr #3
    28bc:	3d060000 	str	b0, [x0, #384]
    28c0:	02a20301 	.inst	0x02a20301 ; undefined
    28c4:	6f0e0000 	.inst	0x6f0e0000 ; undefined
    28c8:	07000011 	.inst	0x07000011 ; undefined
    28cc:	00004304 	udf	#17156
    28d0:	01450600 	.inst	0x01450600 ; undefined
    28d4:	0003010e 	.inst	0x0003010e ; undefined
    28d8:	0dd80700 	ld1	{v0.b}[1], [x24], x24
    28dc:	07000000 	.inst	0x07000000 ; undefined
    28e0:	00000dea 	udf	#3562
    28e4:	0dfc0701 	ld2	{v1.b, v2.b}[1], [x24], x28
    28e8:	07020000 	.inst	0x07020000 ; undefined
    28ec:	00000e73 	udf	#3699
    28f0:	2c0d0003 	stnp	s3, s0, [x0, #104]
    28f4:	0600000e 	.inst	0x0600000e ; undefined
    28f8:	d503014a 	msr	s0_3_c0_c1_2, x10
    28fc:	0e000002 	tbl	v2.8b, {v0.16b}, v0.8b
    2900:	000012bb 	udf	#4795
    2904:	00430407 	.inst	0x00430407 ; undefined
    2908:	4b060000 	sub	w0, w0, w6
    290c:	033a0601 	.inst	0x033a0601 ; undefined
    2910:	f4070000 	.inst	0xf4070000 ; undefined
    2914:	00000014 	udf	#20
    2918:	0015ca07 	.inst	0x0015ca07 ; undefined
    291c:	5e070100 	sha1c	q0, s8, v7.4s
    2920:	02000013 	.inst	0x02000013 ; undefined
    2924:	00144407 	.inst	0x00144407 ; undefined
    2928:	0e000300 	tbl	v0.8b, {v24.16b}, v0.8b
    292c:	0000147a 	udf	#5242
    2930:	00430407 	.inst	0x00430407 ; undefined
    2934:	51060000 	sub	w0, w0, #0x180
    2938:	03780601 	.inst	0x03780601 ; undefined
    293c:	84070000 	ld1sb	{z0.s}, p0/z, [x0, z7.s, uxtw]
    2940:	00000015 	udf	#21
    2944:	00152f07 	.inst	0x00152f07 ; undefined
    2948:	3f070100 	.inst	0x3f070100 ; undefined
    294c:	02000015 	.inst	0x02000015 ; undefined
    2950:	00123a07 	.inst	0x00123a07 ; undefined
    2954:	4f070400 	movi	v0.4s, #0xe0
    2958:	06000015 	.inst	0x06000015 ; undefined
    295c:	0014ae07 	.inst	0x0014ae07 ; undefined
    2960:	11070700 	add	w0, w24, #0x1c1
    2964:	0c000013 	st4	{v19.8b-v22.8b}, [x0]
    2968:	14670e00 	b	19c6168 <__stack_size+0x19c2168>
    296c:	04070000 	.inst	0x04070000 ; undefined
    2970:	00000043 	udf	#67
    2974:	06015a06 	.inst	0x06015a06 ; undefined
    2978:	000003a4 	udf	#932
    297c:	0014da07 	.inst	0x0014da07 ; undefined
    2980:	5b070000 	.inst	0x5b070000 ; undefined
    2984:	01000013 	.inst	0x01000013 ; undefined
    2988:	00144107 	.inst	0x00144107 ; undefined
    298c:	f3070200 	.inst	0xf3070200 ; undefined
    2990:	03000012 	.inst	0x03000012 ; undefined
    2994:	12730e00 	.inst	0x12730e00 ; undefined
    2998:	04070000 	.inst	0x04070000 ; undefined
    299c:	00000043 	udf	#67
    29a0:	06017006 	.inst	0x06017006 ; undefined
    29a4:	000003d6 	udf	#982
    29a8:	0014ff07 	.inst	0x0014ff07 ; undefined
    29ac:	8f070100 	.inst	0x8f070100 ; undefined
    29b0:	02000013 	.inst	0x02000013 ; undefined
    29b4:	00150e07 	.inst	0x00150e07 ; undefined
    29b8:	64070400 	.inst	0x64070400 ; undefined
    29bc:	08000015 	stxrb	w0, w21, [x0]
    29c0:	00125207 	.inst	0x00125207 ; undefined
    29c4:	0f000f00 	.inst	0x0f000f00 ; undefined
    29c8:	00000791 	udf	#1937
    29cc:	72051407 	ands	w7, w0, #0xf8000001
    29d0:	ed000000 	.inst	0xed000000 ; undefined
    29d4:	10000003 	adr	x3, 29d4 <__stack_size-0x162c>
    29d8:	000003ed 	udf	#1005
    29dc:	08120011 	stxrb	w18, w17, [x0]
    29e0:	000003fa 	udf	#1018
    29e4:	1b080103 	madd	w3, w8, w8, w0
    29e8:	13000001 	sbfx	w1, w0, #0, #1
    29ec:	000003f3 	udf	#1011
    29f0:	00136c14 	.inst	0x00136c14 ; undefined
    29f4:	01e70200 	.inst	0x01e70200 ; undefined
    29f8:	00007205 	udf	#29189
	...
    2a04:	00002800 	udf	#10240
    2a08:	00000000 	udf	#0
    2a0c:	339c0100 	.inst	0x339c0100 ; undefined
    2a10:	15000004 	b	4002a20 <__stack_size+0x3ffea20>
    2a14:	000015bd 	udf	#5565
    2a18:	2501e702 	.inst	0x2501e702 ; undefined
    2a1c:	00000433 	udf	#1075
    2a20:	00789102 	.inst	0x00789102 ; undefined
    2a24:	02950812 	.inst	0x02950812 ; undefined
    2a28:	ce140000 	eor3	v0.16b, v0.16b, v20.16b, v0.16b
    2a2c:	02000012 	.inst	0x02000012 ; undefined
    2a30:	720501e2 	ands	w2, w15, #0x8000000
	...
    2a3c:	28000000 	stnp	w0, w0, [x0]
    2a40:	00000000 	udf	#0
    2a44:	01000000 	.inst	0x01000000 ; undefined
    2a48:	00046d9c 	.inst	0x00046d9c ; undefined
    2a4c:	15bd1500 	b	6f47e4c <__stack_size+0x6f43e4c>
    2a50:	e2020000 	.inst	0xe2020000 ; undefined
    2a54:	04332901 	.inst	0x04332901 ; undefined
    2a58:	91020000 	add	x0, x0, #0x80
    2a5c:	be140078 	.inst	0xbe140078 ; undefined
    2a60:	02000014 	.inst	0x02000014 ; undefined
    2a64:	720501db 	ands	w27, w14, #0x8000000
	...
    2a70:	28000000 	stnp	w0, w0, [x0]
    2a74:	00000000 	udf	#0
    2a78:	01000000 	.inst	0x01000000 ; undefined
    2a7c:	0004a19c 	.inst	0x0004a19c ; undefined
    2a80:	15bd1500 	b	6f47e80 <__stack_size+0x6f43e80>
    2a84:	db020000 	.inst	0xdb020000 ; undefined
    2a88:	04332801 	.inst	0x04332801 ; undefined
    2a8c:	91020000 	add	x0, x0, #0x80
    2a90:	34140078 	cbz	w24, 2aa9c <__stack_size+0x26a9c>
    2a94:	02000013 	.inst	0x02000013 ; undefined
    2a98:	720501d4 	ands	w20, w14, #0x8000000
	...
    2aa4:	28000000 	stnp	w0, w0, [x0]
    2aa8:	00000000 	udf	#0
    2aac:	01000000 	.inst	0x01000000 ; undefined
    2ab0:	0004d59c 	.inst	0x0004d59c ; undefined
    2ab4:	15bd1500 	b	6f47eb4 <__stack_size+0x6f43eb4>
    2ab8:	d4020000 	.inst	0xd4020000 ; undefined
    2abc:	04332701 	.inst	0x04332701 ; undefined
    2ac0:	91020000 	add	x0, x0, #0x80
    2ac4:	98160078 	ldrsw	x24, 2ead0 <__stack_size+0x2aad0>
    2ac8:	02000014 	.inst	0x02000014 ; undefined
    2acc:	720501c7 	ands	w7, w14, #0x8000000
	...
    2ad8:	54000000 	b.eq	2ad8 <__stack_size-0x1528>  // b.none
    2adc:	00000000 	udf	#0
    2ae0:	01000000 	.inst	0x01000000 ; undefined
    2ae4:	0005199c 	.inst	0x0005199c ; undefined
    2ae8:	15bd1500 	b	6f47ee8 <__stack_size+0x6f43ee8>
    2aec:	c7020000 	.inst	0xc7020000 ; undefined
    2af0:	04332601 	.inst	0x04332601 ; undefined
    2af4:	91020000 	add	x0, x0, #0x80
    2af8:	13241768 	.inst	0x13241768 ; undefined
    2afc:	c9020000 	.inst	0xc9020000 ; undefined
    2b00:	00720601 	.inst	0x00720601 ; undefined
    2b04:	91020000 	add	x0, x0, #0x80
    2b08:	9e16007c 	.inst	0x9e16007c ; undefined
    2b0c:	02000013 	.inst	0x02000013 ; undefined
    2b10:	720501b9 	ands	w25, w13, #0x8000000
	...
    2b1c:	54000000 	b.eq	2b1c <__stack_size-0x14e4>  // b.none
    2b20:	00000000 	udf	#0
    2b24:	01000000 	.inst	0x01000000 ; undefined
    2b28:	00055d9c 	.inst	0x00055d9c ; undefined
    2b2c:	15bd1500 	b	6f47f2c <__stack_size+0x6f43f2c>
    2b30:	b9020000 	str	w0, [x0, #512]
    2b34:	04332401 	.inst	0x04332401 ; undefined
    2b38:	91020000 	add	x0, x0, #0x80
    2b3c:	13241768 	.inst	0x13241768 ; undefined
    2b40:	bb020000 	.inst	0xbb020000 ; undefined
    2b44:	00720901 	.inst	0x00720901 ; undefined
    2b48:	91020000 	add	x0, x0, #0x80
    2b4c:	ee14007c 	.inst	0xee14007c ; undefined
    2b50:	02000011 	.inst	0x02000011 ; undefined
    2b54:	720501ac 	ands	w12, w13, #0x8000000
	...
    2b60:	58000000 	ldr	x0, 2b60 <__stack_size-0x14a0>
    2b64:	00000000 	udf	#0
    2b68:	01000000 	.inst	0x01000000 ; undefined
    2b6c:	0005a19c 	.inst	0x0005a19c ; undefined
    2b70:	15bd1500 	b	6f47f70 <__stack_size+0x6f43f70>
    2b74:	ac020000 	stnp	q0, q0, [x0, #64]
    2b78:	04332e01 	.inst	0x04332e01 ; undefined
    2b7c:	91020000 	add	x0, x0, #0x80
    2b80:	13241768 	.inst	0x13241768 ; undefined
    2b84:	ae020000 	.inst	0xae020000 ; undefined
    2b88:	00720901 	.inst	0x00720901 ; undefined
    2b8c:	91020000 	add	x0, x0, #0x80
    2b90:	5116007c 	sub	w28, w3, #0x580
    2b94:	02000014 	.inst	0x02000014 ; undefined
    2b98:	72050171 	ands	w17, w11, #0x8000000
	...
    2ba4:	74000000 	.inst	0x74000000 ; undefined
    2ba8:	00000001 	udf	#1
    2bac:	01000000 	.inst	0x01000000 ; undefined
    2bb0:	0006159c 	.inst	0x0006159c ; undefined
    2bb4:	15bd1500 	b	6f47fb4 <__stack_size+0x6f43fb4>
    2bb8:	71020000 	subs	w0, w0, #0x80
    2bbc:	04332c01 	.inst	0x04332c01 ; undefined
    2bc0:	91020000 	add	x0, x0, #0x80
    2bc4:	13241768 	.inst	0x13241768 ; undefined
    2bc8:	73020000 	.inst	0x73020000 ; undefined
    2bcc:	00720901 	.inst	0x00720901 ; undefined
    2bd0:	91020000 	add	x0, x0, #0x80
    2bd4:	13ee177c 	.inst	0x13ee177c ; undefined
    2bd8:	74020000 	.inst	0x74020000 ; undefined
    2bdc:	00720901 	.inst	0x00720901 ; undefined
    2be0:	91020000 	add	x0, x0, #0x80
    2be4:	65721878 	fmla	z24.h, p6/m, z3.h, z18.h
    2be8:	75020067 	.inst	0x75020067 ; undefined
    2bec:	00a40e01 	.inst	0x00a40e01 ; undefined
    2bf0:	91020000 	add	x0, x0, #0x80
    2bf4:	28c61774 	ldp	w20, w5, [x27], #48
    2bf8:	76020000 	.inst	0x76020000 ; undefined
    2bfc:	033a1801 	.inst	0x033a1801 ; undefined
    2c00:	91020000 	add	x0, x0, #0x80
    2c04:	5f190070 	.inst	0x5f190070 ; undefined
    2c08:	02000012 	.inst	0x02000012 ; undefined
    2c0c:	0006015a 	.inst	0x0006015a ; undefined
    2c10:	00000000 	udf	#0
    2c14:	d8000000 	prfm	pldl1keep, 2c14 <__stack_size-0x13ec>
    2c18:	00000000 	udf	#0
    2c1c:	01000000 	.inst	0x01000000 ; undefined
    2c20:	0006559c 	.inst	0x0006559c ; undefined
    2c24:	15bd1500 	b	6f48024 <__stack_size+0x6f44024>
    2c28:	5a020000 	sbc	w0, w0, w2
    2c2c:	04332b01 	.inst	0x04332b01 ; undefined
    2c30:	91020000 	add	x0, x0, #0x80
    2c34:	14721578 	b	1c88214 <__stack_size+0x1c84214>
    2c38:	5a020000 	sbc	w0, w0, w2
    2c3c:	03784901 	.inst	0x03784901 ; undefined
    2c40:	91020000 	add	x0, x0, #0x80
    2c44:	fa190074 	sbcs	x20, x3, x25
    2c48:	02000013 	.inst	0x02000013 ; undefined
    2c4c:	00060144 	.inst	0x00060144 ; undefined
    2c50:	00000000 	udf	#0
    2c54:	d8000000 	prfm	pldl1keep, 2c54 <__stack_size-0x13ac>
    2c58:	00000000 	udf	#0
    2c5c:	01000000 	.inst	0x01000000 ; undefined
    2c60:	0006959c 	.inst	0x0006959c ; undefined
    2c64:	15bd1500 	b	6f48064 <__stack_size+0x6f44064>
    2c68:	44020000 	.inst	0x44020000 ; undefined
    2c6c:	04332b01 	.inst	0x04332b01 ; undefined
    2c70:	91020000 	add	x0, x0, #0x80
    2c74:	14721578 	b	1c88254 <__stack_size+0x1c84254>
    2c78:	44020000 	.inst	0x44020000 ; undefined
    2c7c:	030e4901 	.inst	0x030e4901 ; undefined
    2c80:	91020000 	add	x0, x0, #0x80
    2c84:	dc1a0074 	.inst	0xdc1a0074 ; undefined
    2c88:	02000013 	.inst	0x02000013 ; undefined
    2c8c:	00060137 	.inst	0x00060137 ; undefined
    2c90:	00000000 	udf	#0
    2c94:	70000000 	adr	x0, 2c97 <__stack_size-0x1369>
    2c98:	00000000 	udf	#0
    2c9c:	01000000 	.inst	0x01000000 ; undefined
    2ca0:	0006e59c 	.inst	0x0006e59c ; undefined
    2ca4:	15bd1500 	b	6f480a4 <__stack_size+0x6f440a4>
    2ca8:	37020000 	tbnz	w0, #0, 6ca8 <__stack_size+0x2ca8>
    2cac:	04332901 	.inst	0x04332901 ; undefined
    2cb0:	91020000 	add	x0, x0, #0x80
    2cb4:	13be1568 	.inst	0x13be1568 ; undefined
    2cb8:	37020000 	tbnz	w0, #0, 6cb8 <__stack_size+0x2cb8>
    2cbc:	03a43f01 	.inst	0x03a43f01 ; undefined
    2cc0:	91020000 	add	x0, x0, #0x80
    2cc4:	65721864 	fmla	z4.h, p6/m, z3.h, z18.h
    2cc8:	39020067 	strb	w7, [x3, #128]
    2ccc:	00790a01 	.inst	0x00790a01 ; undefined
    2cd0:	91020000 	add	x0, x0, #0x80
    2cd4:	aa19007f 	orr	xzr, x3, x25
    2cd8:	02000012 	.inst	0x02000012 ; undefined
    2cdc:	00060129 	.inst	0x00060129 ; undefined
    2ce0:	00000000 	udf	#0
    2ce4:	54000000 	b.eq	2ce4 <__stack_size-0x131c>  // b.none
    2ce8:	00000000 	udf	#0
    2cec:	01000000 	.inst	0x01000000 ; undefined
    2cf0:	0007359c 	.inst	0x0007359c ; undefined
    2cf4:	15bd1500 	b	6f480f4 <__stack_size+0x6f440f4>
    2cf8:	29020000 	stp	w0, w0, [x0, #16]
    2cfc:	04332801 	.inst	0x04332801 ; undefined
    2d00:	91020000 	add	x0, x0, #0x80
    2d04:	13be1568 	.inst	0x13be1568 ; undefined
    2d08:	29020000 	stp	w0, w0, [x0, #16]
    2d0c:	03a43f01 	.inst	0x03a43f01 ; undefined
    2d10:	91020000 	add	x0, x0, #0x80
    2d14:	65721864 	fmla	z4.h, p6/m, z3.h, z18.h
    2d18:	2b020067 	adds	w7, w3, w2
    2d1c:	00790a01 	.inst	0x00790a01 ; undefined
    2d20:	91020000 	add	x0, x0, #0x80
    2d24:	a619007f 	.inst	0xa619007f ; undefined
    2d28:	02000015 	.inst	0x02000015 ; undefined
    2d2c:	0006011d 	.inst	0x0006011d ; undefined
    2d30:	00000000 	udf	#0
    2d34:	3c000000 	stur	b0, [x0]
    2d38:	00000000 	udf	#0
    2d3c:	01000000 	.inst	0x01000000 ; undefined
    2d40:	0007659c 	.inst	0x0007659c ; undefined
    2d44:	15bd1500 	b	6f48144 <__stack_size+0x6f44144>
    2d48:	1d020000 	.inst	0x1d020000 ; undefined
    2d4c:	04332901 	.inst	0x04332901 ; undefined
    2d50:	91020000 	add	x0, x0, #0x80
    2d54:	e1140078 	.inst	0xe1140078 ; undefined
    2d58:	02000012 	.inst	0x02000012 ; undefined
    2d5c:	72050113 	ands	w19, w8, #0x8000000
	...
    2d68:	40000000 	.inst	0x40000000 ; undefined
    2d6c:	00000000 	udf	#0
    2d70:	01000000 	.inst	0x01000000 ; undefined
    2d74:	0007999c 	.inst	0x0007999c ; undefined
    2d78:	15bd1500 	b	6f48178 <__stack_size+0x6f44178>
    2d7c:	13020000 	sbfiz	w0, w0, #30, #1
    2d80:	04332801 	.inst	0x04332801 ; undefined
    2d84:	91020000 	add	x0, x0, #0x80
    2d88:	0f140078 	.inst	0x0f140078 ; undefined
    2d8c:	02000012 	.inst	0x02000012 ; undefined
    2d90:	72050109 	ands	w9, w8, #0x8000000
	...
    2d9c:	3c000000 	stur	b0, [x0]
    2da0:	00000000 	udf	#0
    2da4:	01000000 	.inst	0x01000000 ; undefined
    2da8:	0007cd9c 	.inst	0x0007cd9c ; undefined
    2dac:	15bd1500 	b	6f481ac <__stack_size+0x6f441ac>
    2db0:	09020000 	.inst	0x09020000 ; undefined
    2db4:	04332701 	.inst	0x04332701 ; undefined
    2db8:	91020000 	add	x0, x0, #0x80
    2dbc:	e6190078 	.inst	0xe6190078 ; undefined
    2dc0:	02000015 	.inst	0x02000015 ; undefined
    2dc4:	00060101 	.inst	0x00060101 ; undefined
    2dc8:	00000000 	udf	#0
    2dcc:	40000000 	.inst	0x40000000 ; undefined
    2dd0:	00000000 	udf	#0
    2dd4:	01000000 	.inst	0x01000000 ; undefined
    2dd8:	0007fd9c 	.inst	0x0007fd9c ; undefined
    2ddc:	15bd1500 	b	6f481dc <__stack_size+0x6f441dc>
    2de0:	01020000 	.inst	0x01020000 ; undefined
    2de4:	04332e01 	.inst	0x04332e01 ; undefined
    2de8:	91020000 	add	x0, x0, #0x80
    2dec:	451b0078 	.inst	0x451b0078 ; undefined
    2df0:	02000013 	.inst	0x02000013 ; undefined
    2df4:	000006f8 	udf	#1784
    2df8:	00000000 	udf	#0
    2dfc:	003c0000 	.inst	0x003c0000 ; NYI
    2e00:	00000000 	udf	#0
    2e04:	9c010000 	ldr	q0, 4e04 <__stack_size+0xe04>
    2e08:	0000082b 	udf	#2091
    2e0c:	0015bd1c 	.inst	0x0015bd1c ; undefined
    2e10:	2df80200 	ldp	s0, s0, [x16, #-64]!
    2e14:	00000433 	udf	#1075
    2e18:	00789102 	.inst	0x00789102 ; undefined
    2e1c:	00137b1d 	.inst	0x00137b1d ; undefined
    2e20:	05d50200 	mov	z0.d, p5/z, #16
    2e24:	00000072 	udf	#114
	...
    2e30:	00000054 	udf	#84
    2e34:	00000000 	udf	#0
    2e38:	085d9c01 	ldaxrb	w1, [x0]
    2e3c:	bd1c0000 	str	s0, [x0, #7168]
    2e40:	02000015 	.inst	0x02000015 ; undefined
    2e44:	04332ad5 	.inst	0x04332ad5 ; undefined
    2e48:	91020000 	add	x0, x0, #0x80
    2e4c:	c91e0078 	.inst	0xc91e0078 ; undefined
    2e50:	02000013 	.inst	0x02000013 ; undefined
    2e54:	007205ca 	.inst	0x007205ca ; undefined
	...
    2e60:	004c0000 	.inst	0x004c0000 ; undefined
    2e64:	00000000 	udf	#0
    2e68:	9c010000 	ldr	q0, 4e68 <__stack_size+0xe68>
    2e6c:	0000088f 	udf	#2191
    2e70:	0015bd1c 	.inst	0x0015bd1c ; undefined
    2e74:	29ca0200 	ldp	w0, w0, [x16, #80]!
    2e78:	00000433 	udf	#1075
    2e7c:	00789102 	.inst	0x00789102 ; undefined
    2e80:	0015951b 	.inst	0x0015951b ; undefined
    2e84:	06c10200 	.inst	0x06c10200 ; undefined
	...
    2e90:	0000003c 	udf	#60
    2e94:	00000000 	udf	#0
    2e98:	08bd9c01 	.inst	0x08bd9c01 ; undefined
    2e9c:	bd1c0000 	str	s0, [x0, #7168]
    2ea0:	02000015 	.inst	0x02000015 ; undefined
    2ea4:	043328c1 	.inst	0x043328c1 ; undefined
    2ea8:	91020000 	add	x0, x0, #0x80
    2eac:	731b0078 	.inst	0x731b0078 ; undefined
    2eb0:	02000015 	.inst	0x02000015 ; undefined
    2eb4:	000006bb 	udf	#1723
    2eb8:	00000000 	udf	#0
    2ebc:	003c0000 	.inst	0x003c0000 ; NYI
    2ec0:	00000000 	udf	#0
    2ec4:	9c010000 	ldr	q0, 4ec4 <__stack_size+0xec4>
    2ec8:	000008eb 	udf	#2283
    2ecc:	0015bd1c 	.inst	0x0015bd1c ; undefined
    2ed0:	28bb0200 	stp	w0, w0, [x16], #-40
    2ed4:	00000433 	udf	#1075
    2ed8:	00789102 	.inst	0x00789102 ; undefined
    2edc:	00151c1e 	.inst	0x00151c1e ; undefined
    2ee0:	09b40200 	.inst	0x09b40200 ; undefined
    2ee4:	00000079 	udf	#121
	...
    2ef0:	0000004c 	udf	#76
    2ef4:	00000000 	udf	#0
    2ef8:	091d9c01 	.inst	0x091d9c01 ; undefined
    2efc:	bd1c0000 	str	s0, [x0, #7168]
    2f00:	02000015 	.inst	0x02000015 ; undefined
    2f04:	04332db4 	.inst	0x04332db4 ; undefined
    2f08:	91020000 	add	x0, x0, #0x80
    2f0c:	d01e0078 	adrp	x24, 3c010000 <__stack_size+0x3c00c000>
    2f10:	02000014 	.inst	0x02000014 ; undefined
    2f14:	00790983 	.inst	0x00790983 ; undefined
	...
    2f20:	00600000 	.inst	0x00600000 ; undefined
    2f24:	00000000 	udf	#0
    2f28:	9c010000 	ldr	q0, 4f28 <__stack_size+0xf28>
    2f2c:	0000095e 	udf	#2398
    2f30:	0015bd1c 	.inst	0x0015bd1c ; undefined
    2f34:	24830200 	cmphs	p0.s, p0/z, z16.s, z3.s
    2f38:	00000433 	udf	#1075
    2f3c:	1f689102 	fnmsub	d2, d8, d8, d4
    2f40:	00676572 	.inst	0x00676572 ; undefined
    2f44:	a40e8502 	.inst	0xa40e8502 ; undefined
    2f48:	02000000 	.inst	0x02000000 ; undefined
    2f4c:	1e007c91 	.inst	0x1e007c91 ; undefined
    2f50:	00001488 	udf	#5256
    2f54:	66097502 	.inst	0x66097502 ; undefined
	...
    2f60:	68000000 	.inst	0x68000000 ; undefined
    2f64:	00000000 	udf	#0
    2f68:	01000000 	.inst	0x01000000 ; undefined
    2f6c:	00099f9c 	.inst	0x00099f9c ; undefined
    2f70:	15bd1c00 	b	6f49f70 <__stack_size+0x6f45f70>
    2f74:	75020000 	.inst	0x75020000 ; undefined
    2f78:	0004332a 	.inst	0x0004332a ; undefined
    2f7c:	78910200 	ldursh	x0, [x16, #-240]
    2f80:	6c617620 	ldnp	d0, d29, [x17, #-496]
    2f84:	41750200 	.inst	0x41750200 ; undefined
    2f88:	00000085 	udf	#133
    2f8c:	00779102 	.inst	0x00779102 ; undefined
    2f90:	0008371e 	.inst	0x0008371e ; undefined
    2f94:	096c0200 	.inst	0x096c0200 ; undefined
    2f98:	00000066 	udf	#102
    2f9c:	610036a8 	.inst	0x610036a8 ; undefined
    2fa0:	00000000 	udf	#0
    2fa4:	00000068 	udf	#104
    2fa8:	00000000 	udf	#0
    2fac:	09e09c01 	.inst	0x09e09c01 ; undefined
    2fb0:	bd1c0000 	str	s0, [x0, #7168]
    2fb4:	02000015 	.inst	0x02000015 ; undefined
    2fb8:	0433256c 	.inst	0x0433256c ; undefined
    2fbc:	91020000 	add	x0, x0, #0x80
    2fc0:	61762078 	.inst	0x61762078 ; undefined
    2fc4:	6c02006c 	stnp	d12, d0, [x3, #32]
    2fc8:	0000853c 	udf	#34108
    2fcc:	77910200 	.inst	0x77910200 ; undefined
    2fd0:	13ac1e00 	.inst	0x13ac1e00 ; undefined
    2fd4:	5d020000 	.inst	0x5d020000 ; undefined
    2fd8:	00007909 	udf	#30985
    2fdc:	00366400 	.inst	0x00366400 ; NYI
    2fe0:	00000061 	udf	#97
    2fe4:	00004400 	udf	#17408
    2fe8:	00000000 	udf	#0
    2fec:	129c0100 	mov	w0, #0xffff1ff7            	// #-57353
    2ff0:	1c00000a 	ldr	s10, 2ff0 <__stack_size-0x1010>
    2ff4:	000015bd 	udf	#5565
    2ff8:	332c5d02 	.inst	0x332c5d02 ; undefined
    2ffc:	02000004 	.inst	0x02000004 ; undefined
    3000:	1e007891 	.inst	0x1e007891 ; undefined
    3004:	0000127f 	udf	#4735
    3008:	66094402 	.inst	0x66094402 ; undefined
    300c:	b8000000 	stur	w0, [x0]
    3010:	00610035 	.inst	0x00610035 ; undefined
    3014:	ac000000 	stnp	q0, q0, [x0]
    3018:	00000000 	udf	#0
    301c:	01000000 	.inst	0x01000000 ; undefined
    3020:	000a539c 	.inst	0x000a539c ; undefined
    3024:	15bd1c00 	b	6f4a024 <__stack_size+0x6f46024>
    3028:	44020000 	.inst	0x44020000 ; undefined
    302c:	0004332f 	.inst	0x0004332f ; undefined
    3030:	78910200 	ldursh	x0, [x16, #-240]
    3034:	0013091c 	.inst	0x0013091c ; undefined
    3038:	46440200 	.inst	0x46440200 ; undefined
    303c:	000002c8 	udf	#712
    3040:	00749102 	.inst	0x00749102 ; undefined
    3044:	0012941e 	.inst	0x0012941e ; undefined
    3048:	092c0200 	.inst	0x092c0200 ; undefined
    304c:	00000079 	udf	#121
    3050:	61003510 	.inst	0x61003510 ; undefined
    3054:	00000000 	udf	#0
    3058:	000000a8 	udf	#168
    305c:	00000000 	udf	#0
    3060:	0a949c01 	.inst	0x0a949c01 ; undefined
    3064:	bd1c0000 	str	s0, [x0, #7168]
    3068:	02000015 	.inst	0x02000015 ; undefined
    306c:	0433302c 	and	z12.d, z1.d, z19.d
    3070:	91020000 	add	x0, x0, #0x80
    3074:	11771c78 	add	w24, w3, #0xdc7, lsl #12
    3078:	2c020000 	stnp	s0, s0, [x0, #16]
    307c:	00030148 	.inst	0x00030148 ; undefined
    3080:	74910200 	.inst	0x74910200 ; undefined
    3084:	12201e00 	and	w0, w16, #0xff
    3088:	23020000 	.inst	0x23020000 ; undefined
    308c:	00007909 	udf	#30985
    3090:	00345800 	.inst	0x00345800 ; NYI
    3094:	00000061 	udf	#97
    3098:	0000b800 	udf	#47104
    309c:	00000000 	udf	#0
    30a0:	d59c0100 	.inst	0xd59c0100 ; undefined
    30a4:	1c00000a 	ldr	s10, 30a4 <__stack_size-0xf5c>
    30a8:	000015bd 	udf	#5565
    30ac:	332d2302 	.inst	0x332d2302 ; undefined
    30b0:	02000004 	.inst	0x02000004 ; undefined
    30b4:	061c7891 	.inst	0x061c7891 ; undefined
    30b8:	02000012 	.inst	0x02000012 ; undefined
    30bc:	00a43c23 	.inst	0x00a43c23 ; undefined
    30c0:	91020000 	add	x0, x0, #0x80
    30c4:	d81d0074 	prfm	pstl3keep, 3d0d0 <__stack_size+0x390d0>
    30c8:	0200000f 	.inst	0x0200000f ; undefined
    30cc:	00660913 	.inst	0x00660913 ; undefined
    30d0:	33a00000 	.inst	0x33a00000 ; undefined
    30d4:	00006100 	udf	#24832
    30d8:	00b80000 	.inst	0x00b80000 ; undefined
    30dc:	00000000 	udf	#0
    30e0:	9c010000 	ldr	q0, 50e0 <__stack_size+0x10e0>
    30e4:	00000b34 	udf	#2868
    30e8:	0015bd1c 	.inst	0x0015bd1c ; undefined
    30ec:	26130200 	.inst	0x26130200 ; undefined
    30f0:	00000433 	udf	#1075
    30f4:	1c789102 	ldr	s2, f4314 <__stack_size+0xf0314>
    30f8:	00001206 	udf	#4614
    30fc:	a4351302 	ld1rob	{z2.b}, p4/z, [x24, x21]
    3100:	02000000 	.inst	0x02000000 ; undefined
    3104:	771c7491 	.inst	0x771c7491 ; undefined
    3108:	02000011 	.inst	0x02000011 ; undefined
    310c:	03015113 	.inst	0x03015113 ; undefined
    3110:	91020000 	add	x0, x0, #0x80
    3114:	13091c70 	sbfiz	w16, w3, #23, #8
    3118:	13020000 	sbfiz	w0, w0, #30, #1
    311c:	0002c86e 	.inst	0x0002c86e ; undefined
    3120:	6c910200 	stp	d0, d0, [x16], #272
    3124:	15c22100 	b	708b524 <__stack_size+0x7087524>
    3128:	30010000 	adr	x0, 5129 <__stack_size+0x1129>
    312c:	00007213 	udf	#29203
    3130:	00338000 	.inst	0x00338000 ; NYI
    3134:	00000061 	udf	#97
    3138:	00002000 	udf	#8192
    313c:	00000000 	udf	#0
    3140:	939c0100 	.inst	0x939c0100 ; undefined
    3144:	1c00000b 	ldr	s11, 3144 <__stack_size-0xebc>
    3148:	00001233 	udf	#4659
    314c:	93223001 	.inst	0x93223001 ; undefined
    3150:	0200000b 	.inst	0x0200000b ; undefined
    3154:	62207891 	.inst	0x62207891 ; undefined
    3158:	01006675 	.inst	0x01006675 ; undefined
    315c:	0b953130 	add	w16, w9, w21, asr #12
    3160:	91020000 	add	x0, x0, #0x80
    3164:	0cd61c70 	.inst	0x0cd61c70 ; undefined
    3168:	30010000 	adr	x0, 5169 <__stack_size+0x1169>
    316c:	0000723a 	udf	#29242
    3170:	6c910200 	stp	d0, d0, [x16], #272
    3174:	00189e1c 	.inst	0x00189e1c ; undefined
    3178:	11310100 	add	w0, w8, #0xc40
    317c:	00000029 	udf	#41
    3180:	00609102 	.inst	0x00609102 ; undefined
    3184:	08120822 	stxrb	w18, w2, [x1]
    3188:	000003f3 	udf	#1011
    318c:	0002b500 	.inst	0x0002b500 ; undefined
    3190:	ab000400 	adds	x0, x0, x0, lsl #1
    3194:	0800000f 	stxrb	w0, w15, [x0]
    3198:	00022001 	.inst	0x00022001 ; undefined
    319c:	16280c00 	b	fffffffff8a0619c <_sp+0xffffffff979c619c>
    31a0:	002f0000 	.inst	0x002f0000 ; NYI
    31a4:	07c00000 	.inst	0x07c00000 ; undefined
	...
    31b0:	20840000 	.inst	0x20840000 ; undefined
    31b4:	08020000 	stxrb	w2, w0, [x0]
    31b8:	0001cb05 	.inst	0x0001cb05 ; undefined
    31bc:	07080200 	.inst	0x07080200 ; undefined
    31c0:	0000017c 	udf	#380
    31c4:	46051002 	.inst	0x46051002 ; undefined
    31c8:	02000001 	.inst	0x02000001 ; undefined
    31cc:	01000710 	.inst	0x01000710 ; undefined
    31d0:	01020000 	.inst	0x01020000 ; undefined
    31d4:	00011406 	.inst	0x00011406 ; undefined
    31d8:	05020200 	orr	z0.d, z0.d, #0x1ffff
    31dc:	000001d4 	udf	#468
    31e0:	69050403 	stgp	x3, x1, [x0, #160]
    31e4:	0200746e 	.inst	0x0200746e ; undefined
    31e8:	01120801 	.inst	0x01120801 ; undefined
    31ec:	02020000 	.inst	0x02020000 ; undefined
    31f0:	00013307 	.inst	0x00013307 ; undefined
    31f4:	08db0400 	ldlarb	w0, [x0]
    31f8:	5b030000 	.inst	0x5b030000 ; undefined
    31fc:	00007416 	udf	#29718
    3200:	07040200 	.inst	0x07040200 ; undefined
    3204:	00000181 	udf	#385
    3208:	c6050802 	.inst	0xc6050802 ; undefined
    320c:	02000001 	.inst	0x02000001 ; undefined
    3210:	01770708 	.inst	0x01770708 ; undefined
    3214:	75050000 	.inst	0x75050000 ; undefined
    3218:	02003436 	.inst	0x02003436 ; undefined
    321c:	00821c08 	.inst	0x00821c08 ; undefined
    3220:	5a060000 	sbc	w0, w0, w6
    3224:	20000016 	.inst	0x20000016 ; undefined
    3228:	d7100a02 	.inst	0xd7100a02 ; undefined
    322c:	07000000 	.inst	0x07000000 ; undefined
    3230:	00001674 	udf	#5748
    3234:	890d0b02 	.inst	0x890d0b02 ; undefined
    3238:	00000000 	udf	#0
    323c:	00167f07 	.inst	0x00167f07 ; undefined
    3240:	0d0c0200 	.inst	0x0d0c0200 ; undefined
    3244:	00000089 	udf	#137
    3248:	161f0708 	b	fffffffff87c4e68 <_sp+0xffffffff97784e68>
    324c:	0d020000 	.inst	0x0d020000 ; undefined
    3250:	0000890d 	udf	#35085
    3254:	0d071000 	.inst	0x0d071000 ; undefined
    3258:	02000016 	.inst	0x02000016 ; undefined
    325c:	0068120e 	.inst	0x0068120e ; undefined
    3260:	00180000 	.inst	0x00180000 ; undefined
    3264:	00165b04 	.inst	0x00165b04 ; undefined
    3268:	020f0200 	.inst	0x020f0200 ; undefined
    326c:	00000095 	udf	#149
    3270:	00091908 	.inst	0x00091908 ; undefined
    3274:	0d0e0100 	.inst	0x0d0e0100 ; undefined
    3278:	00000053 	udf	#83
    327c:	000000f5 	udf	#245
    3280:	62080009 	.inst	0x62080009 ; undefined
    3284:	01000009 	.inst	0x01000009 ; undefined
    3288:	0053100d 	.inst	0x0053100d ; undefined
    328c:	01070000 	.inst	0x01070000 ; undefined
    3290:	00090000 	.inst	0x00090000 ; undefined
    3294:	0016060a 	.inst	0x0016060a ; undefined
    3298:	0a3a0100 	bic	w0, w8, w26
    329c:	00000068 	udf	#104
    32a0:	610037e4 	.inst	0x610037e4 ; undefined
    32a4:	00000000 	udf	#0
    32a8:	00000018 	udf	#24
    32ac:	00000000 	udf	#0
    32b0:	01399c01 	.inst	0x01399c01 ; undefined
    32b4:	880b0000 	stxr	w11, w0, [x0]
    32b8:	01000016 	.inst	0x01000016 ; undefined
    32bc:	01392a3a 	.inst	0x01392a3a ; undefined
    32c0:	91020000 	add	x0, x0, #0x80
    32c4:	080c0078 	stxrb	w12, w24, [x3]
    32c8:	000000d7 	udf	#215
    32cc:	0016180d 	.inst	0x0016180d ; undefined
    32d0:	0a2a0100 	bic	w0, w8, w10
    32d4:	00000068 	udf	#104
    32d8:	61003768 	.inst	0x61003768 ; undefined
    32dc:	00000000 	udf	#0
    32e0:	0000007c 	udf	#124
    32e4:	00000000 	udf	#0
    32e8:	019d9c01 	.inst	0x019d9c01 ; undefined
    32ec:	880b0000 	stxr	w11, w0, [x0]
    32f0:	01000016 	.inst	0x01000016 ; undefined
    32f4:	0139282a 	.inst	0x0139282a ; undefined
    32f8:	91020000 	add	x0, x0, #0x80
    32fc:	16a90e68 	b	fffffffffaa46c9c <_sp+0xffffffff99a06c9c>
    3300:	2c010000 	stnp	s0, s0, [x0, #8]
    3304:	00008909 	udf	#35081
    3308:	70910200 	adr	x0, fffffffffff2534b <_sp+0xffffffff9eee534b>
    330c:	7465520f 	.inst	0x7465520f ; undefined
    3310:	0e2d0100 	saddl	v0.8h, v8.8b, v13.8b
    3314:	00000068 	udf	#104
    3318:	107c9102 	adr	x2, fc538 <__stack_size+0xf8538>
    331c:	00000919 	udf	#2329
    3320:	530d0e01 	ubfiz	w1, w16, #19, #4
    3324:	09000000 	.inst	0x09000000 ; undefined
    3328:	8f0d0000 	.inst	0x8f0d0000 ; undefined
    332c:	01000016 	.inst	0x01000016 ; undefined
    3330:	00680a21 	.inst	0x00680a21 ; undefined
    3334:	37100000 	tbnz	w0, #2, 3334 <__stack_size-0xccc>
    3338:	00006100 	udf	#24832
    333c:	00580000 	.inst	0x00580000 ; undefined
    3340:	00000000 	udf	#0
    3344:	9c010000 	ldr	q0, 5344 <__stack_size+0x1344>
    3348:	000001fd 	udf	#509
    334c:	0016880b 	.inst	0x0016880b ; undefined
    3350:	25210100 	whilege	p0.b, w8, w1
    3354:	00000139 	udf	#313
    3358:	11789102 	add	w2, w8, #0xe24, lsl #12
    335c:	01007355 	.inst	0x01007355 ; undefined
    3360:	00893121 	.inst	0x00893121 ; undefined
    3364:	91020000 	add	x0, x0, #0x80
    3368:	09190870 	.inst	0x09190870 ; undefined
    336c:	0e010000 	tbl	v0.8b, {v0.16b}, v1.8b
    3370:	0000530d 	udf	#21261
    3374:	0001ee00 	.inst	0x0001ee00 ; undefined
    3378:	10000900 	adr	x0, 3498 <__stack_size-0xb68>
    337c:	00000962 	udf	#2402
    3380:	53100d01 	ubfiz	w1, w8, #16, #4
    3384:	09000000 	.inst	0x09000000 ; undefined
    3388:	680a0000 	.inst	0x680a0000 ; undefined
    338c:	01000016 	.inst	0x01000016 ; undefined
    3390:	00680a18 	.inst	0x00680a18 ; undefined
	...
    339c:	00340000 	.inst	0x00340000 ; NYI
    33a0:	00000000 	udf	#0
    33a4:	9c010000 	ldr	q0, 53a4 <__stack_size+0x13a4>
    33a8:	0000022f 	udf	#559
    33ac:	0016880b 	.inst	0x0016880b ; undefined
    33b0:	24180100 	cmphs	p0.b, p0/z, z8.b, z24.b
    33b4:	00000139 	udf	#313
    33b8:	00789102 	.inst	0x00789102 ; undefined
    33bc:	00169c12 	.inst	0x00169c12 ; undefined
    33c0:	0a060100 	and	w0, w8, w6
    33c4:	00000068 	udf	#104
	...
    33d0:	00000060 	udf	#96
    33d4:	00000000 	udf	#0
    33d8:	55119c01 	.inst	0x55119c01 ; undefined
    33dc:	06010073 	.inst	0x06010073 ; undefined
    33e0:	0000891b 	udf	#35099
    33e4:	58910200 	ldr	x0, fffffffffff25424 <_sp+0xffffffff9eee5424>
    33e8:	0015fd0e 	.inst	0x0015fd0e ; undefined
    33ec:	09080100 	.inst	0x09080100 ; undefined
    33f0:	00000089 	udf	#137
    33f4:	0e789102 	sqdmlal	v2.4s, v8.4h, v24.4h
    33f8:	00001696 	udf	#5782
    33fc:	89090901 	.inst	0x89090901 ; undefined
    3400:	02000000 	.inst	0x02000000 ; undefined
    3404:	450f7091 	.inst	0x450f7091 ; undefined
    3408:	0100646e 	.inst	0x0100646e ; undefined
    340c:	0089090a 	.inst	0x0089090a ; undefined
    3410:	91020000 	add	x0, x0, #0x80
    3414:	16a90e68 	b	fffffffffaa46db4 <_sp+0xffffffff99a06db4>
    3418:	0b010000 	add	w0, w0, w1
    341c:	00008909 	udf	#35081
    3420:	60910200 	.inst	0x60910200 ; undefined
    3424:	00096208 	.inst	0x00096208 ; undefined
    3428:	100d0100 	adr	x0, 1d448 <__stack_size+0x19448>
    342c:	00000053 	udf	#83
    3430:	000002a9 	udf	#681
    3434:	19100009 	stlurb	w9, [x0, #-256]
    3438:	01000009 	.inst	0x01000009 ; undefined
    343c:	00530d0e 	.inst	0x00530d0e ; undefined
    3440:	00090000 	.inst	0x00090000 ; undefined
    3444:	24f20000 	cmphs	p0.d, p0/z, z0.d, #72
    3448:	00040000 	.inst	0x00040000 ; undefined
    344c:	000010e7 	udf	#4327
    3450:	02200108 	.inst	0x02200108 ; undefined
    3454:	ec0c0000 	.inst	0xec0c0000 ; undefined
    3458:	2f00001b 	.inst	0x2f00001b ; undefined
    345c:	20000000 	.inst	0x20000000 ; undefined
    3460:	00000008 	udf	#8
    3464:	00000000 	udf	#0
    3468:	26000000 	.inst	0x26000000 ; undefined
    346c:	02000022 	.inst	0x02000022 ; undefined
    3470:	000006d5 	udf	#1749
    3474:	35170b02 	cbnz	w2, 315d4 <__stack_size+0x2d5d4>
    3478:	03000000 	.inst	0x03000000 ; undefined
    347c:	017c0708 	.inst	0x017c0708 ; undefined
    3480:	08030000 	stxrb	w3, w0, [x0]
    3484:	0001cb05 	.inst	0x0001cb05 ; undefined
    3488:	071b0200 	.inst	0x071b0200 ; undefined
    348c:	16030000 	b	fffffffff80c348c <_sp+0xffffffff9708348c>
    3490:	00003517 	udf	#13591
    3494:	05100300 	mov	z0.b, p0/z, #24
    3498:	00000146 	udf	#326
    349c:	00071003 	.inst	0x00071003 ; undefined
    34a0:	03000001 	.inst	0x03000001 ; undefined
    34a4:	01140601 	.inst	0x01140601 ; undefined
    34a8:	02030000 	.inst	0x02030000 ; undefined
    34ac:	0001d405 	.inst	0x0001d405 ; undefined
    34b0:	05040400 	.inst	0x05040400 ; undefined
    34b4:	00746e69 	.inst	0x00746e69 ; undefined
    34b8:	00076402 	.inst	0x00076402 ; undefined
    34bc:	17590400 	b	fffffffffd6444bc <_sp+0xffffffff9c6044bc>
    34c0:	00000083 	udf	#131
    34c4:	00007205 	udf	#29189
    34c8:	08010300 	stxrb	w1, w0, [x24]
    34cc:	00000112 	udf	#274
    34d0:	00132b02 	.inst	0x00132b02 ; undefined
    34d4:	185a0400 	ldr	w0, b7554 <__stack_size+0xb3554>
    34d8:	0000009b 	udf	#155
    34dc:	00008a05 	udf	#35333
    34e0:	07020300 	.inst	0x07020300 ; undefined
    34e4:	00000133 	udf	#307
    34e8:	0008db02 	.inst	0x0008db02 ; undefined
    34ec:	165b0400 	b	fffffffff96c44ec <_sp+0xffffffff986844ec>
    34f0:	000000b3 	udf	#179
    34f4:	0000a205 	udf	#41477
    34f8:	07040300 	.inst	0x07040300 ; undefined
    34fc:	00000181 	udf	#385
    3500:	c6050803 	.inst	0xc6050803 ; undefined
    3504:	03000001 	.inst	0x03000001 ; undefined
    3508:	01770708 	.inst	0x01770708 ; undefined
    350c:	01030000 	.inst	0x01030000 ; undefined
    3510:	00011b08 	.inst	0x00011b08 ; undefined
    3514:	00c80600 	.inst	0x00c80600 ; undefined
    3518:	75070000 	.inst	0x75070000 ; undefined
    351c:	05003233 	orr	z19.s, z19.s, #0xfc000fff
    3520:	00b31634 	.inst	0x00b31634 ; undefined
    3524:	75070000 	.inst	0x75070000 ; undefined
    3528:	05003436 	orr	z22.h, z22.h, #0xc00
    352c:	00c11c3a 	.inst	0x00c11c3a ; undefined
    3530:	5a080000 	sbc	w0, w0, w8
    3534:	20000016 	.inst	0x20000016 ; undefined
    3538:	2e100a06 	ext	v6.8b, v16.8b, v16.8b, #1
    353c:	09000001 	.inst	0x09000001 ; undefined
    3540:	00001674 	udf	#5748
    3544:	e00d0b06 	.inst	0xe00d0b06 ; undefined
    3548:	00000000 	udf	#0
    354c:	00167f09 	.inst	0x00167f09 ; undefined
    3550:	0d0c0600 	.inst	0x0d0c0600 ; undefined
    3554:	000000e0 	udf	#224
    3558:	161f0908 	b	fffffffff87c5978 <_sp+0xffffffff97785978>
    355c:	0d060000 	.inst	0x0d060000 ; undefined
    3560:	0000e00d 	udf	#57357
    3564:	0d091000 	.inst	0x0d091000 ; undefined
    3568:	06000016 	.inst	0x06000016 ; undefined
    356c:	00a2120e 	.inst	0x00a2120e ; undefined
    3570:	00180000 	.inst	0x00180000 ; undefined
    3574:	00165b02 	.inst	0x00165b02 ; undefined
    3578:	020f0600 	.inst	0x020f0600 ; undefined
    357c:	000000ec 	udf	#236
    3580:	00012e05 	.inst	0x00012e05 ; undefined
    3584:	04070a00 	.inst	0x04070a00 ; undefined
    3588:	000000b3 	udf	#179
    358c:	c00d0807 	.inst	0xc00d0807 ; undefined
    3590:	0b000001 	add	w1, w0, w0
    3594:	000023ba 	udf	#9146
    3598:	23cd0b00 	.inst	0x23cd0b00 ; undefined
    359c:	0b010000 	add	w0, w0, w1
    35a0:	000019a9 	udf	#6569
    35a4:	24e20b02 	cmphs	p2.d, p2/z, z24.d, #8
    35a8:	0b030000 	add	w0, w0, w3
    35ac:	00001e65 	udf	#7781
    35b0:	2e350b04 	.inst	0x2e350b04 ; undefined
    35b4:	0b050000 	add	w0, w0, w5
    35b8:	00001e8a 	udf	#7818
    35bc:	234c0b06 	.inst	0x234c0b06 ; undefined
    35c0:	0b070000 	add	w0, w0, w7
    35c4:	00002bfc 	udf	#11260
    35c8:	17960b08 	b	fffffffffe5861e8 <_sp+0xffffffff9d5461e8>
    35cc:	0b090000 	add	w0, w0, w9
    35d0:	00001eaa 	udf	#7850
    35d4:	1fe10b0a 	fnmadd	h10, h24, h1, h2
    35d8:	0b0b0000 	add	w0, w0, w11
    35dc:	00001907 	udf	#6407
    35e0:	1b2f0b0c 	.inst	0x1b2f0b0c ; undefined
    35e4:	0b0d0000 	add	w0, w0, w13
    35e8:	0000235c 	udf	#9052
    35ec:	1ab50b0e 	.inst	0x1ab50b0e ; undefined
    35f0:	0b0f0000 	add	w0, w0, w15
    35f4:	000026fa 	udf	#9978
    35f8:	1e2f0b10 	fmul	s16, s24, s15
    35fc:	0b110000 	add	w0, w0, w17
    3600:	0000202e 	udf	#8238
    3604:	040c0012 	sabd	z18.b, p0/m, z18.b, z0.b
    3608:	0a026d07 	and	w7, w8, w2, lsl #27
    360c:	0d000002 	st1	{v2.b}[0], [x0]
    3610:	00001893 	udf	#6291
    3614:	ae116e07 	.inst	0xae116e07 ; undefined
    3618:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    361c:	0d00140c 	st1	{v12.b}[5], [x0]
    3620:	00001ebc 	udf	#7868
    3624:	ae116f07 	.inst	0xae116f07 ; undefined
    3628:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    362c:	0d001103 	st1	{v3.b}[4], [x8]
    3630:	00001701 	udf	#5889
    3634:	ae117007 	.inst	0xae117007 ; undefined
    3638:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    363c:	0d001001 	st1	{v1.b}[4], [x0]
    3640:	00002bef 	udf	#11247
    3644:	ae117107 	.inst	0xae117107 ; undefined
    3648:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    364c:	00000010 	udf	#16
    3650:	6a07040e 	ands	w14, w0, w7, lsl #1
    3654:	00022c09 	.inst	0x00022c09 ; undefined
    3658:	33640f00 	.inst	0x33640f00 ; undefined
    365c:	6c070032 	stnp	d18, d0, [x1, #112]
    3660:	0000ae10 	udf	#44560
    3664:	69620f00 	ldpsw	x0, x3, [x24, #-240]
    3668:	72070074 	ands	w20, w3, #0x2000000
    366c:	0001c003 	.inst	0x0001c003 ; undefined
    3670:	df020000 	.inst	0xdf020000 ; undefined
    3674:	07000019 	.inst	0x07000019 ; undefined
    3678:	020a0273 	.inst	0x020a0273 ; undefined
    367c:	2c050000 	stnp	s0, s0, [x0, #40]
    3680:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    3684:	05780704 	ext	z4.b, {z24.b, z25.b}, #193
    3688:	00000357 	udf	#855
    368c:	00227b0d 	.inst	0x00227b0d ; NYI
    3690:	14790700 	b	1e45290 <__stack_size+0x1e41290>
    3694:	000000ae 	udf	#174
    3698:	001f0104 	.inst	0x001f0104 ; undefined
    369c:	0019570d 	.inst	0x0019570d ; undefined
    36a0:	147a0700 	b	1e852a0 <__stack_size+0x1e812a0>
    36a4:	000000ae 	udf	#174
    36a8:	001e0104 	.inst	0x001e0104 ; undefined
    36ac:	002b020d 	.inst	0x002b020d ; NYI
    36b0:	147b0700 	b	1ec52b0 <__stack_size+0x1ec12b0>
    36b4:	000000ae 	udf	#174
    36b8:	001c0204 	.inst	0x001c0204 ; undefined
    36bc:	001de10d 	.inst	0x001de10d ; undefined
    36c0:	147c0700 	b	1f052c0 <__stack_size+0x1f012c0>
    36c4:	000000ae 	udf	#174
    36c8:	001b0104 	.inst	0x001b0104 ; undefined
    36cc:	002cc50d 	.inst	0x002cc50d ; NYI
    36d0:	147d0700 	b	1f452d0 <__stack_size+0x1f412d0>
    36d4:	000000ae 	udf	#174
    36d8:	001a0104 	.inst	0x001a0104 ; undefined
    36dc:	0025d40d 	.inst	0x0025d40d ; NYI
    36e0:	147e0700 	b	1f852e0 <__stack_size+0x1f812e0>
    36e4:	000000ae 	udf	#174
    36e8:	00190104 	.inst	0x00190104 ; undefined
    36ec:	002c700d 	.inst	0x002c700d ; NYI
    36f0:	147f0700 	b	1fc52f0 <__stack_size+0x1fc12f0>
    36f4:	000000ae 	udf	#174
    36f8:	00180104 	.inst	0x00180104 ; undefined
    36fc:	002c5f0d 	.inst	0x002c5f0d ; NYI
    3700:	14800700 	b	2005300 <__stack_size+0x2001300>
    3704:	000000ae 	udf	#174
    3708:	00170104 	.inst	0x00170104 ; undefined
    370c:	0027ca0d 	.inst	0x0027ca0d ; NYI
    3710:	14810700 	b	2045310 <__stack_size+0x2041310>
    3714:	000000ae 	udf	#174
    3718:	00100704 	.inst	0x00100704 ; undefined
    371c:	0027fd0d 	.inst	0x0027fd0d ; NYI
    3720:	17820700 	b	fffffffffe085320 <_sp+0xffffffff9d045320>
    3724:	000000ae 	udf	#174
    3728:	000e0204 	.inst	0x000e0204 ; undefined
    372c:	0017200d 	.inst	0x0017200d ; undefined
    3730:	14830700 	b	20c5330 <__stack_size+0x20c1330>
    3734:	000000ae 	udf	#174
    3738:	000d0104 	.inst	0x000d0104 ; undefined
    373c:	002a4c0d 	.inst	0x002a4c0d ; NYI
    3740:	14840700 	b	2105340 <__stack_size+0x2101340>
    3744:	000000ae 	udf	#174
    3748:	000c0104 	.inst	0x000c0104 ; undefined
    374c:	0019440d 	.inst	0x0019440d ; undefined
    3750:	14850700 	b	2145350 <__stack_size+0x2141350>
    3754:	000000ae 	udf	#174
    3758:	000b0104 	.inst	0x000b0104 ; undefined
    375c:	001d550d 	.inst	0x001d550d ; undefined
    3760:	14860700 	b	2185360 <__stack_size+0x2181360>
    3764:	000000ae 	udf	#174
    3768:	000a0104 	.inst	0x000a0104 ; undefined
    376c:	0017780d 	.inst	0x0017780d ; undefined
    3770:	14870700 	b	21c5370 <__stack_size+0x21c1370>
    3774:	000000ae 	udf	#174
    3778:	00080204 	.inst	0x00080204 ; undefined
    377c:	0023a50d 	.inst	0x0023a50d ; NYI
    3780:	14880700 	b	2205380 <__stack_size+0x2201380>
    3784:	000000ae 	udf	#174
    3788:	00020604 	.inst	0x00020604 ; undefined
    378c:	0021820d 	.inst	0x0021820d ; NYI
    3790:	14890700 	b	2245390 <__stack_size+0x2241390>
    3794:	000000ae 	udf	#174
    3798:	00000204 	udf	#516
    379c:	07040e00 	.inst	0x07040e00 ; undefined
    37a0:	03790975 	.inst	0x03790975 ; undefined
    37a4:	640f0000 	.inst	0x640f0000 ; undefined
    37a8:	07003233 	.inst	0x07003233 ; undefined
    37ac:	00ae1377 	.inst	0x00ae1377 ; undefined
    37b0:	620f0000 	.inst	0x620f0000 ; undefined
    37b4:	07007469 	.inst	0x07007469 ; undefined
    37b8:	023d068a 	.inst	0x023d068a ; undefined
    37bc:	02000000 	.inst	0x02000000 ; undefined
    37c0:	00001ca3 	udf	#7331
    37c4:	57028b07 	.inst	0x57028b07 ; undefined
    37c8:	05000003 	orr	z3.s, z3.s, #0x1
    37cc:	00000379 	udf	#889
    37d0:	9007040c 	adrp	x12, e083000 <__stack_size+0xe07f000>
    37d4:	00050402 	.inst	0x00050402 ; undefined
    37d8:	17b70d00 	b	fffffffffedc6bd8 <_sp+0xffffffff9dd86bd8>
    37dc:	91070000 	add	x0, x0, #0x1c0
    37e0:	0000ae10 	udf	#44560
    37e4:	1f010400 	fmadd	s0, s0, s1, s1
    37e8:	24b70d00 	cmphs	p0.s, p3/z, z8.s, #92
    37ec:	92070000 	and	x0, x0, #0x200000002000000
    37f0:	0000ae10 	udf	#44560
    37f4:	1e010400 	.inst	0x1e010400 ; undefined
    37f8:	2efa0d00 	.inst	0x2efa0d00 ; undefined
    37fc:	93070000 	.inst	0x93070000 ; undefined
    3800:	0000ae10 	udf	#44560
    3804:	1d010400 	.inst	0x1d010400 ; undefined
    3808:	2b9e0d00 	adds	w0, w8, w30, asr #3
    380c:	94070000 	bl	1c380c <__stack_size+0x1bf80c>
    3810:	0000ae10 	udf	#44560
    3814:	1c010400 	ldr	s0, 5894 <__stack_size+0x1894>
    3818:	24c70d00 	cmphs	p0.d, p3/z, z8.d, z7.d
    381c:	95070000 	bl	41c381c <__stack_size+0x41bf81c>
    3820:	0000ae10 	udf	#44560
    3824:	18040400 	ldr	w0, b8a4 <__stack_size+0x78a4>
    3828:	1e9b0d00 	.inst	0x1e9b0d00 ; undefined
    382c:	96070000 	bl	fffffffff81c382c <_sp+0xffffffff9718382c>
    3830:	0000ae10 	udf	#44560
    3834:	17010400 	b	fffffffffc044834 <_sp+0xffffffff9b004834>
    3838:	236d0d00 	.inst	0x236d0d00 ; undefined
    383c:	97070000 	bl	fffffffffc1c383c <_sp+0xffffffff9b18383c>
    3840:	0000ae10 	udf	#44560
    3844:	16010400 	b	fffffffff8044844 <_sp+0xffffffff97004844>
    3848:	16f30d00 	b	fffffffffbcc6c48 <_sp+0xffffffff9ac86c48>
    384c:	98070000 	ldrsw	x0, 1184c <__stack_size+0xd84c>
    3850:	0000ae10 	udf	#44560
    3854:	15010400 	b	4044854 <__stack_size+0x4040854>
    3858:	24500d00 	cmphs	p0.h, p3/z, z8.h, z16.h
    385c:	99070000 	stlur	w0, [x0, #112]
    3860:	0000ae10 	udf	#44560
    3864:	14010400 	b	44864 <__stack_size+0x40864>
    3868:	2cba0d00 	stp	s0, s3, [x8], #-48
    386c:	9a070000 	adc	x0, x0, x7
    3870:	0000ae10 	udf	#44560
    3874:	10040400 	adr	x0, b8f4 <__stack_size+0x78f4>
    3878:	2cff0d00 	ldp	s0, s3, [x8], #-8
    387c:	9b070000 	madd	x0, x0, x7, x0
    3880:	0000ae10 	udf	#44560
    3884:	0f010400 	movi	v0.2s, #0x20
    3888:	2e150d00 	.inst	0x2e150d00 ; undefined
    388c:	9c070000 	ldr	q0, 1188c <__stack_size+0xd88c>
    3890:	0000ae10 	udf	#44560
    3894:	0e010400 	dup	v0.8b, v0.b[0]
    3898:	1e3c0d00 	fcsel	s0, s8, s28, eq  // eq = none
    389c:	9d070000 	.inst	0x9d070000 ; undefined
    38a0:	0000ae10 	udf	#44560
    38a4:	0d010400 	.inst	0x0d010400 ; undefined
    38a8:	200d0d00 	.inst	0x200d0d00 ; undefined
    38ac:	9e070000 	.inst	0x9e070000 ; undefined
    38b0:	0000ae10 	udf	#44560
    38b4:	0c010400 	.inst	0x0c010400 ; undefined
    38b8:	2ad00d00 	orr	w0, w8, w16, ror #3
    38bc:	9f070000 	.inst	0x9f070000 ; undefined
    38c0:	0000ae10 	udf	#44560
    38c4:	08040400 	stxrb	w4, w0, [x0]
    38c8:	29be0d00 	stp	w0, w3, [x8, #-16]!
    38cc:	a0070000 	.inst	0xa0070000 ; undefined
    38d0:	0000ae10 	udf	#44560
    38d4:	07010400 	.inst	0x07010400 ; undefined
    38d8:	1d400d00 	.inst	0x1d400d00 ; undefined
    38dc:	a1070000 	.inst	0xa1070000 ; undefined
    38e0:	0000ae10 	udf	#44560
    38e4:	06010400 	.inst	0x06010400 ; undefined
    38e8:	1d4d0d00 	.inst	0x1d4d0d00 ; undefined
    38ec:	a2070000 	.inst	0xa2070000 ; undefined
    38f0:	0000ae10 	udf	#44560
    38f4:	05010400 	orr	z0.h, z0.h, #0x1
    38f8:	2cac0d00 	stp	s0, s3, [x8], #-160
    38fc:	a3070000 	.inst	0xa3070000 ; undefined
    3900:	0000ae10 	udf	#44560
    3904:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    3908:	282e0d00 	stnp	w0, w3, [x8, #-144]
    390c:	a4070000 	ld1rqb	{z0.b}, p0/z, [x0, x7]
    3910:	0000ae10 	udf	#44560
    3914:	03010400 	.inst	0x03010400 ; undefined
    3918:	289a0d00 	stp	w0, w3, [x8], #208
    391c:	a5070000 	ld1rqw	{z0.s}, p0/z, [x0, x7, lsl #2]
    3920:	0000ae10 	udf	#44560
    3924:	02010400 	.inst	0x02010400 ; undefined
    3928:	1c340d00 	ldr	s0, 6bac8 <__stack_size+0x67ac8>
    392c:	a6070000 	.inst	0xa6070000 ; undefined
    3930:	0000ae10 	udf	#44560
    3934:	01010400 	.inst	0x01010400 ; undefined
    3938:	2ed00d00 	.inst	0x2ed00d00 ; undefined
    393c:	a7070000 	.inst	0xa7070000 ; undefined
    3940:	0000ae10 	udf	#44560
    3944:	00010400 	.inst	0x00010400 ; undefined
    3948:	040e0000 	.inst	0x040e0000 ; undefined
    394c:	26098d07 	.inst	0x26098d07 ; undefined
    3950:	0f000005 	.inst	0x0f000005 ; undefined
    3954:	00323364 	.inst	0x00323364 ; NYI
    3958:	ae108f07 	.inst	0xae108f07 ; undefined
    395c:	0f000000 	.inst	0x0f000000 ; undefined
    3960:	00746962 	.inst	0x00746962 ; undefined
    3964:	8a03a807 	and	x7, x0, x3, lsl #42
    3968:	00000003 	udf	#3
    396c:	0028e502 	.inst	0x0028e502 ; NYI
    3970:	02a90700 	.inst	0x02a90700 ; undefined
    3974:	00000504 	udf	#1284
    3978:	00052605 	.inst	0x00052605 ; undefined
    397c:	07040c00 	.inst	0x07040c00 ; undefined
    3980:	068102ae 	.inst	0x068102ae ; undefined
    3984:	b90d0000 	str	w0, [x0, #3328]
    3988:	07000019 	.inst	0x07000019 ; undefined
    398c:	00ae11af 	.inst	0x00ae11af ; undefined
    3990:	01040000 	.inst	0x01040000 ; undefined
    3994:	450d001f 	.inst	0x450d001f ; undefined
    3998:	07000027 	.inst	0x07000027 ; undefined
    399c:	00ae11b0 	.inst	0x00ae11b0 ; undefined
    39a0:	01040000 	.inst	0x01040000 ; undefined
    39a4:	b40d001e 	cbz	x30, 1d9a4 <__stack_size+0x199a4>
    39a8:	0700002d 	.inst	0x0700002d ; undefined
    39ac:	00ae11b1 	.inst	0x00ae11b1 ; undefined
    39b0:	01040000 	.inst	0x01040000 ; undefined
    39b4:	ca0d001d 	eor	x29, x0, x13
    39b8:	07000026 	.inst	0x07000026 ; undefined
    39bc:	00ae11b2 	.inst	0x00ae11b2 ; undefined
    39c0:	02040000 	.inst	0x02040000 ; undefined
    39c4:	880d001b 	stxr	w13, w27, [x0]
    39c8:	0700002e 	.inst	0x0700002e ; undefined
    39cc:	00ae11b3 	.inst	0x00ae11b3 ; undefined
    39d0:	01040000 	.inst	0x01040000 ; undefined
    39d4:	150d001a 	b	4343a3c <__stack_size+0x433fa3c>
    39d8:	0700001d 	.inst	0x0700001d ; undefined
    39dc:	00ae11b4 	.inst	0x00ae11b4 ; undefined
    39e0:	01040000 	.inst	0x01040000 ; undefined
    39e4:	990d0019 	stlur	w25, [x0, #208]
    39e8:	0700001a 	.inst	0x0700001a ; undefined
    39ec:	00ae11b5 	.inst	0x00ae11b5 ; undefined
    39f0:	01040000 	.inst	0x01040000 ; undefined
    39f4:	ee0d0018 	.inst	0xee0d0018 ; undefined
    39f8:	0700001e 	.inst	0x0700001e ; undefined
    39fc:	00ae17b6 	.inst	0x00ae17b6 ; undefined
    3a00:	01040000 	.inst	0x01040000 ; undefined
    3a04:	5a0d0017 	sbc	w23, w0, w13
    3a08:	0700001f 	.inst	0x0700001f ; undefined
    3a0c:	00ae14b7 	.inst	0x00ae14b7 ; undefined
    3a10:	03040000 	.inst	0x03040000 ; undefined
    3a14:	fe0d0014 	.inst	0xfe0d0014 ; undefined
    3a18:	0700001e 	.inst	0x0700001e ; undefined
    3a1c:	00ae14b8 	.inst	0x00ae14b8 ; undefined
    3a20:	01040000 	.inst	0x01040000 ; undefined
    3a24:	6a0d0013 	ands	w19, w0, w13
    3a28:	0700001f 	.inst	0x0700001f ; undefined
    3a2c:	00ae14b9 	.inst	0x00ae14b9 ; undefined
    3a30:	03040000 	.inst	0x03040000 ; undefined
    3a34:	fb0d0010 	.inst	0xfb0d0010 ; undefined
    3a38:	07000017 	.inst	0x07000017 ; undefined
    3a3c:	00ae17ba 	.inst	0x00ae17ba ; undefined
    3a40:	01040000 	.inst	0x01040000 ; undefined
    3a44:	9c0d000f 	ldr	q15, 1da44 <__stack_size+0x19a44>
    3a48:	0700002d 	.inst	0x0700002d ; undefined
    3a4c:	00ae14bb 	.inst	0x00ae14bb ; undefined
    3a50:	01040000 	.inst	0x01040000 ; undefined
    3a54:	8c0d000e 	.inst	0x8c0d000e ; undefined
    3a58:	0700001a 	.inst	0x0700001a ; undefined
    3a5c:	00ae14bc 	.inst	0x00ae14bc ; undefined
    3a60:	01040000 	.inst	0x01040000 ; undefined
    3a64:	b40d000d 	cbz	x13, 1da64 <__stack_size+0x19a64>
    3a68:	07000025 	.inst	0x07000025 ; undefined
    3a6c:	00ae14bd 	.inst	0x00ae14bd ; undefined
    3a70:	01040000 	.inst	0x01040000 ; undefined
    3a74:	040d000c 	uabd	z12.b, p0/m, z12.b, z0.b
    3a78:	07000022 	.inst	0x07000022 ; undefined
    3a7c:	00ae14be 	.inst	0x00ae14be ; undefined
    3a80:	04040000 	.inst	0x04040000 ; undefined
    3a84:	720d0008 	ands	w8, w0, #0x80000
    3a88:	07000022 	.inst	0x07000022 ; undefined
    3a8c:	00ae17bf 	.inst	0x00ae17bf ; undefined
    3a90:	01040000 	.inst	0x01040000 ; undefined
    3a94:	4c0d0007 	.inst	0x4c0d0007 ; undefined
    3a98:	0700002e 	.inst	0x0700002e ; undefined
    3a9c:	00ae14c0 	.inst	0x00ae14c0 ; undefined
    3aa0:	01040000 	.inst	0x01040000 ; undefined
    3aa4:	220d0006 	.inst	0x220d0006 ; undefined
    3aa8:	07000021 	.inst	0x07000021 ; undefined
    3aac:	00ae14c1 	.inst	0x00ae14c1 ; undefined
    3ab0:	01040000 	.inst	0x01040000 ; undefined
    3ab4:	7d0d0005 	str	h5, [x0, #1664]
    3ab8:	0700002e 	.inst	0x0700002e ; undefined
    3abc:	00ae14c2 	.inst	0x00ae14c2 ; undefined
    3ac0:	05040000 	.inst	0x05040000 ; undefined
    3ac4:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    3ac8:	09ab0704 	.inst	0x09ab0704 ; undefined
    3acc:	000006a3 	udf	#1699
    3ad0:	3233640f 	orr	w15, w0, #0xffffe07f
    3ad4:	10ad0700 	adr	x0, fffffffffff5dbb4 <_sp+0xffffffff9ef1dbb4>
    3ad8:	000000ae 	udf	#174
    3adc:	7469620f 	.inst	0x7469620f ; undefined
    3ae0:	03c30700 	.inst	0x03c30700 ; undefined
    3ae4:	00000537 	udf	#1335
    3ae8:	22400200 	.inst	0x22400200 ; undefined
    3aec:	c4070000 	ld1sb	{z0.d}, p0/z, [x0, z7.d, uxtw]
    3af0:	00068102 	.inst	0x00068102 ; undefined
    3af4:	06a30500 	.inst	0x06a30500 ; undefined
    3af8:	040c0000 	sabd	z0.b, p0/m, z0.b, z0.b
    3afc:	9e02c907 	scvtf	s7, x8, #14
    3b00:	0d000007 	st1	{v7.b}[0], [x0]
    3b04:	00001f4a 	udf	#8010
    3b08:	ae10ca07 	.inst	0xae10ca07 ; undefined
    3b0c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b10:	0d001f01 	st1	{v1.b}[7], [x24]
    3b14:	000029f4 	udf	#10740
    3b18:	ae10cb07 	.inst	0xae10cb07 ; undefined
    3b1c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b20:	0d001e01 	st1	{v1.b}[7], [x16]
    3b24:	00002a5f 	udf	#10847
    3b28:	ae10cc07 	.inst	0xae10cc07 ; undefined
    3b2c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b30:	0d001d01 	st1	{v1.b}[7], [x8]
    3b34:	00002a78 	udf	#10872
    3b38:	ae10cd07 	.inst	0xae10cd07 ; undefined
    3b3c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b40:	0d001c01 	st1	{v1.b}[7], [x0]
    3b44:	00002150 	udf	#8528
    3b48:	ae12ce07 	.inst	0xae12ce07 ; undefined
    3b4c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b50:	0d001b01 	st1	{v1.b}[6], [x24]
    3b54:	00002973 	udf	#10611
    3b58:	ae10cf07 	.inst	0xae10cf07 ; undefined
    3b5c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b60:	0d001a01 	st1	{v1.b}[6], [x16]
    3b64:	00002a69 	udf	#10857
    3b68:	ae12d007 	.inst	0xae12d007 ; undefined
    3b6c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b70:	0d001802 	st1	{v2.b}[6], [x0]
    3b74:	00002a6f 	udf	#10863
    3b78:	ae12d107 	.inst	0xae12d107 ; undefined
    3b7c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b80:	0d001008 	st1	{v8.b}[4], [x0]
    3b84:	00001d66 	udf	#7526
    3b88:	ae15d207 	.inst	0xae15d207 ; undefined
    3b8c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3b90:	0d000c04 	st1	{v4.b}[3], [x0]
    3b94:	00002204 	udf	#8708
    3b98:	ae12d307 	.inst	0xae12d307 ; undefined
    3b9c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3ba0:	0d000804 	st1	{v4.b}[2], [x0]
    3ba4:	00001ff2 	udf	#8178
    3ba8:	ae13d407 	.inst	0xae13d407 ; undefined
    3bac:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3bb0:	0d000701 	st1	{v1.b}[1], [x24]
    3bb4:	00001b5a 	udf	#7002
    3bb8:	ae12d507 	.inst	0xae12d507 ; undefined
    3bbc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3bc0:	0d000601 	st1	{v1.b}[1], [x16]
    3bc4:	00002baa 	udf	#11178
    3bc8:	ae10d607 	.inst	0xae10d607 ; undefined
    3bcc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3bd0:	0d000501 	st1	{v1.b}[1], [x8]
    3bd4:	00002e7d 	udf	#11901
    3bd8:	ae12d707 	.inst	0xae12d707 ; undefined
    3bdc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3be0:	00000005 	udf	#5
    3be4:	c607040e 	.inst	0xc607040e ; undefined
    3be8:	0007c009 	.inst	0x0007c009 ; undefined
    3bec:	33640f00 	.inst	0x33640f00 ; undefined
    3bf0:	c8070032 	stxr	w7, x18, [x1]
    3bf4:	0000ae10 	udf	#44560
    3bf8:	69620f00 	ldpsw	x0, x3, [x24, #-240]
    3bfc:	d8070074 	prfm	pstl3keep, 11c08 <__stack_size+0xdc08>
    3c00:	0006b406 	.inst	0x0006b406 ; undefined
    3c04:	12020000 	and	w0, w0, #0x40000000
    3c08:	0700002b 	.inst	0x0700002b ; undefined
    3c0c:	079e02d9 	.inst	0x079e02d9 ; undefined
    3c10:	c0050000 	.inst	0xc0050000 ; undefined
    3c14:	0c000007 	st4	{v7.8b-v10.8b}, [x0]
    3c18:	05df0704 	mov	z4.d, p15/z, #56
    3c1c:	000009db 	udf	#2523
    3c20:	002d0d0d 	.inst	0x002d0d0d ; NYI
    3c24:	15e00700 	b	7805824 <__stack_size+0x7801824>
    3c28:	000000ae 	udf	#174
    3c2c:	001f0104 	.inst	0x001f0104 ; undefined
    3c30:	0023e50d 	.inst	0x0023e50d ; NYI
    3c34:	15e10700 	b	7845834 <__stack_size+0x7841834>
    3c38:	000000ae 	udf	#174
    3c3c:	001e0104 	.inst	0x001e0104 ; undefined
    3c40:	0023af0d 	.inst	0x0023af0d ; NYI
    3c44:	15e20700 	b	7885844 <__stack_size+0x7881844>
    3c48:	000000ae 	udf	#174
    3c4c:	001d0104 	.inst	0x001d0104 ; undefined
    3c50:	0025ef0d 	.inst	0x0025ef0d ; NYI
    3c54:	15e30700 	b	78c5854 <__stack_size+0x78c1854>
    3c58:	000000ae 	udf	#174
    3c5c:	001c0104 	.inst	0x001c0104 ; undefined
    3c60:	001b1a0d 	.inst	0x001b1a0d ; undefined
    3c64:	17e40700 	b	ffffffffff905864 <_sp+0xffffffff9e8c5864>
    3c68:	000000ae 	udf	#174
    3c6c:	001b0104 	.inst	0x001b0104 ; undefined
    3c70:	00198e0d 	.inst	0x00198e0d ; undefined
    3c74:	15e50700 	b	7945874 <__stack_size+0x7941874>
    3c78:	000000ae 	udf	#174
    3c7c:	001a0104 	.inst	0x001a0104 ; undefined
    3c80:	001df60d 	.inst	0x001df60d ; undefined
    3c84:	17e60700 	b	ffffffffff985884 <_sp+0xffffffff9e945884>
    3c88:	000000ae 	udf	#174
    3c8c:	00190104 	.inst	0x00190104 ; undefined
    3c90:	0021220d 	.inst	0x0021220d ; NYI
    3c94:	17e70700 	b	ffffffffff9c5894 <_sp+0xffffffff9e985894>
    3c98:	000000ae 	udf	#174
    3c9c:	00180104 	.inst	0x00180104 ; undefined
    3ca0:	0024410d 	.inst	0x0024410d ; NYI
    3ca4:	17e80700 	b	ffffffffffa058a4 <_sp+0xffffffff9e9c58a4>
    3ca8:	000000ae 	udf	#174
    3cac:	00170104 	.inst	0x00170104 ; undefined
    3cb0:	001a430d 	.inst	0x001a430d ; undefined
    3cb4:	17e90700 	b	ffffffffffa458b4 <_sp+0xffffffff9ea058b4>
    3cb8:	000000ae 	udf	#174
    3cbc:	00160104 	.inst	0x00160104 ; undefined
    3cc0:	001a490d 	.inst	0x001a490d ; undefined
    3cc4:	17ea0700 	b	ffffffffffa858c4 <_sp+0xffffffff9ea458c4>
    3cc8:	000000ae 	udf	#174
    3ccc:	00150104 	.inst	0x00150104 ; undefined
    3cd0:	001a4f0d 	.inst	0x001a4f0d ; undefined
    3cd4:	17eb0700 	b	ffffffffffac58d4 <_sp+0xffffffff9ea858d4>
    3cd8:	000000ae 	udf	#174
    3cdc:	00140104 	.inst	0x00140104 ; undefined
    3ce0:	0028be0d 	.inst	0x0028be0d ; NYI
    3ce4:	17ec0700 	b	ffffffffffb058e4 <_sp+0xffffffff9eac58e4>
    3ce8:	000000ae 	udf	#174
    3cec:	00130104 	.inst	0x00130104 ; undefined
    3cf0:	001ad00d 	.inst	0x001ad00d ; undefined
    3cf4:	17ed0700 	b	ffffffffffb458f4 <_sp+0xffffffff9eb058f4>
    3cf8:	000000ae 	udf	#174
    3cfc:	00120104 	.inst	0x00120104 ; undefined
    3d00:	00257b0d 	.inst	0x00257b0d ; NYI
    3d04:	17ee0700 	b	ffffffffffb85904 <_sp+0xffffffff9eb45904>
    3d08:	000000ae 	udf	#174
    3d0c:	00110104 	.inst	0x00110104 ; undefined
    3d10:	002b900d 	.inst	0x002b900d ; NYI
    3d14:	17ef0700 	b	ffffffffffbc5914 <_sp+0xffffffff9eb85914>
    3d18:	000000ae 	udf	#174
    3d1c:	00100104 	.inst	0x00100104 ; undefined
    3d20:	002b6d0d 	.inst	0x002b6d0d ; NYI
    3d24:	18f00700 	ldr	w0, fffffffffffe3e04 <_sp+0xffffffff9efa3e04>
    3d28:	000000ae 	udf	#174
    3d2c:	000f0104 	.inst	0x000f0104 ; undefined
    3d30:	0025270d 	.inst	0x0025270d ; NYI
    3d34:	15f10700 	b	7c45934 <__stack_size+0x7c41934>
    3d38:	000000ae 	udf	#174
    3d3c:	000e0104 	.inst	0x000e0104 ; undefined
    3d40:	001f9d0d 	.inst	0x001f9d0d ; undefined
    3d44:	15f20700 	b	7c85944 <__stack_size+0x7c81944>
    3d48:	000000ae 	udf	#174
    3d4c:	000d0104 	.inst	0x000d0104 ; undefined
    3d50:	0018d90d 	.inst	0x0018d90d ; undefined
    3d54:	15f30700 	b	7cc5954 <__stack_size+0x7cc1954>
    3d58:	000000ae 	udf	#174
    3d5c:	000c0104 	.inst	0x000c0104 ; undefined
    3d60:	0026030d 	.inst	0x0026030d ; NYI
    3d64:	17f40700 	b	ffffffffffd05964 <_sp+0xffffffff9ecc5964>
    3d68:	000000ae 	udf	#174
    3d6c:	000b0104 	.inst	0x000b0104 ; undefined
    3d70:	0017e00d 	.inst	0x0017e00d ; undefined
    3d74:	15f50700 	b	7d45974 <__stack_size+0x7d41974>
    3d78:	000000ae 	udf	#174
    3d7c:	000a0104 	.inst	0x000a0104 ; undefined
    3d80:	0023820d 	.inst	0x0023820d ; NYI
    3d84:	17f60700 	b	ffffffffffd85984 <_sp+0xffffffff9ed45984>
    3d88:	000000ae 	udf	#174
    3d8c:	00090104 	.inst	0x00090104 ; undefined
    3d90:	0025640d 	.inst	0x0025640d ; NYI
    3d94:	17f70700 	b	ffffffffffdc5994 <_sp+0xffffffff9ed85994>
    3d98:	000000ae 	udf	#174
    3d9c:	00080104 	.inst	0x00080104 ; undefined
    3da0:	0026bd0d 	.inst	0x0026bd0d ; NYI
    3da4:	17f80700 	b	ffffffffffe059a4 <_sp+0xffffffff9edc59a4>
    3da8:	000000ae 	udf	#174
    3dac:	00070104 	.inst	0x00070104 ; undefined
    3db0:	0019220d 	.inst	0x0019220d ; undefined
    3db4:	17f90700 	b	ffffffffffe459b4 <_sp+0xffffffff9ee059b4>
    3db8:	000000ae 	udf	#174
    3dbc:	00060104 	.inst	0x00060104 ; undefined
    3dc0:	0023f90d 	.inst	0x0023f90d ; NYI
    3dc4:	17fa0700 	b	ffffffffffe859c4 <_sp+0xffffffff9ee459c4>
    3dc8:	000000ae 	udf	#174
    3dcc:	00050104 	.inst	0x00050104 ; undefined
    3dd0:	001d0c0d 	.inst	0x001d0c0d ; undefined
    3dd4:	17fb0700 	b	ffffffffffec59d4 <_sp+0xffffffff9ee859d4>
    3dd8:	000000ae 	udf	#174
    3ddc:	00040104 	.inst	0x00040104 ; undefined
    3de0:	0027920d 	.inst	0x0027920d ; NYI
    3de4:	17fc0700 	b	fffffffffff059e4 <_sp+0xffffffff9eec59e4>
    3de8:	000000ae 	udf	#174
    3dec:	00030104 	.inst	0x00030104 ; undefined
    3df0:	0027ac0d 	.inst	0x0027ac0d ; NYI
    3df4:	17fd0700 	b	fffffffffff459f4 <_sp+0xffffffff9ef059f4>
    3df8:	000000ae 	udf	#174
    3dfc:	00020104 	.inst	0x00020104 ; undefined
    3e00:	0027be0d 	.inst	0x0027be0d ; NYI
    3e04:	17fe0700 	b	fffffffffff85a04 <_sp+0xffffffff9ef45a04>
    3e08:	000000ae 	udf	#174
    3e0c:	00010104 	.inst	0x00010104 ; undefined
    3e10:	002c250d 	.inst	0x002c250d ; NYI
    3e14:	17ff0700 	b	fffffffffffc5a14 <_sp+0xffffffff9ef85a14>
    3e18:	000000ae 	udf	#174
    3e1c:	00000104 	udf	#260
    3e20:	07040e00 	.inst	0x07040e00 ; undefined
    3e24:	09fe09dc 	.inst	0x09fe09dc ; undefined
    3e28:	640f0000 	.inst	0x640f0000 ; undefined
    3e2c:	07003233 	.inst	0x07003233 ; undefined
    3e30:	00ae13de 	.inst	0x00ae13de ; undefined
    3e34:	62100000 	.inst	0x62100000 ; undefined
    3e38:	07007469 	.inst	0x07007469 ; undefined
    3e3c:	d1060100 	sub	x0, x8, #0x180
    3e40:	00000007 	udf	#7
    3e44:	002b4311 	.inst	0x002b4311 ; NYI
    3e48:	01010700 	.inst	0x01010700 ; undefined
    3e4c:	0009db02 	.inst	0x0009db02 ; undefined
    3e50:	09fe0500 	.inst	0x09fe0500 ; undefined
    3e54:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    3e58:	05010607 	orr	z7.b, z7.b, #0x1
    3e5c:	00000c3b 	udf	#3131
    3e60:	0021a813 	.inst	0x0021a813 ; NYI
    3e64:	01070700 	.inst	0x01070700 ; undefined
    3e68:	0000ae14 	udf	#44564
    3e6c:	1f010400 	fmadd	s0, s0, s1, s1
    3e70:	222a1300 	.inst	0x222a1300 ; undefined
    3e74:	08070000 	stxrb	w7, w0, [x0]
    3e78:	00ae1701 	.inst	0x00ae1701 ; undefined
    3e7c:	01040000 	.inst	0x01040000 ; undefined
    3e80:	ab13001e 	adds	x30, x0, x19
    3e84:	07000029 	.inst	0x07000029 ; undefined
    3e88:	ae170109 	.inst	0xae170109 ; undefined
    3e8c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3e90:	13001d01 	sxtb	w1, w8
    3e94:	00002884 	udf	#10372
    3e98:	14010a07 	b	466b4 <__stack_size+0x426b4>
    3e9c:	000000ae 	udf	#174
    3ea0:	001c0104 	.inst	0x001c0104 ; undefined
    3ea4:	0026a213 	.inst	0x0026a213 ; NYI
    3ea8:	010b0700 	.inst	0x010b0700 ; undefined
    3eac:	0000ae14 	udf	#44564
    3eb0:	1b010400 	madd	w0, w0, w1, w1
    3eb4:	1af91300 	.inst	0x1af91300 ; undefined
    3eb8:	0c070000 	.inst	0x0c070000 ; undefined
    3ebc:	00ae1701 	.inst	0x00ae1701 ; undefined
    3ec0:	01040000 	.inst	0x01040000 ; undefined
    3ec4:	8c13001a 	.inst	0x8c13001a ; undefined
    3ec8:	0700001c 	.inst	0x0700001c ; undefined
    3ecc:	ae14010d 	.inst	0xae14010d ; undefined
    3ed0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3ed4:	13001901 	sbfx	w1, w8, #0, #7
    3ed8:	00002936 	udf	#10550
    3edc:	14010e07 	b	476f8 <__stack_size+0x436f8>
    3ee0:	000000ae 	udf	#174
    3ee4:	00180104 	.inst	0x00180104 ; undefined
    3ee8:	0020cc13 	.inst	0x0020cc13 ; NYI
    3eec:	010f0700 	.inst	0x010f0700 ; undefined
    3ef0:	0000ae17 	udf	#44567
    3ef4:	17010400 	b	fffffffffc044ef4 <_sp+0xffffffff9b004ef4>
    3ef8:	21cc1300 	.inst	0x21cc1300 ; undefined
    3efc:	10070000 	adr	x0, 11efc <__stack_size+0xdefc>
    3f00:	00ae1401 	.inst	0x00ae1401 ; undefined
    3f04:	01040000 	.inst	0x01040000 ; undefined
    3f08:	cc130016 	.inst	0xcc130016 ; undefined
    3f0c:	07000028 	.inst	0x07000028 ; undefined
    3f10:	ae140111 	.inst	0xae140111 ; undefined
    3f14:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3f18:	13001501 	sbfx	w1, w8, #0, #6
    3f1c:	00001712 	udf	#5906
    3f20:	14011207 	b	4873c <__stack_size+0x4473c>
    3f24:	000000ae 	udf	#174
    3f28:	00140104 	.inst	0x00140104 ; undefined
    3f2c:	0024a113 	.inst	0x0024a113 ; NYI
    3f30:	01130700 	.inst	0x01130700 ; undefined
    3f34:	0000ae14 	udf	#44564
    3f38:	13010400 	sbfx	w0, w0, #1, #1
    3f3c:	1a551300 	.inst	0x1a551300 ; undefined
    3f40:	14070000 	b	1c3f40 <__stack_size+0x1bff40>
    3f44:	00ae1401 	.inst	0x00ae1401 ; undefined
    3f48:	01040000 	.inst	0x01040000 ; undefined
    3f4c:	dc130012 	.inst	0xdc130012 ; undefined
    3f50:	0700001e 	.inst	0x0700001e ; undefined
    3f54:	ae170115 	.inst	0xae170115 ; undefined
    3f58:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3f5c:	13001101 	sbfx	w1, w8, #0, #5
    3f60:	00001b27 	udf	#6951
    3f64:	11011607 	add	w7, w16, #0x45
    3f68:	000000ae 	udf	#174
    3f6c:	00100104 	.inst	0x00100104 ; undefined
    3f70:	00178113 	.inst	0x00178113 ; undefined
    3f74:	01170700 	.inst	0x01170700 ; undefined
    3f78:	0000ae14 	udf	#44564
    3f7c:	0f010400 	movi	v0.2s, #0x20
    3f80:	17411300 	b	fffffffffd048b80 <_sp+0xffffffff9c008b80>
    3f84:	18070000 	ldr	w0, 11f84 <__stack_size+0xdf84>
    3f88:	00ae1401 	.inst	0x00ae1401 ; undefined
    3f8c:	01040000 	.inst	0x01040000 ; undefined
    3f90:	6313000e 	.inst	0x6313000e ; undefined
    3f94:	07000018 	.inst	0x07000018 ; undefined
    3f98:	ae140119 	.inst	0xae140119 ; undefined
    3f9c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3fa0:	13000d01 	sbfx	w1, w8, #0, #4
    3fa4:	0000206d 	udf	#8301
    3fa8:	14011a07 	b	4a7c4 <__stack_size+0x467c4>
    3fac:	000000ae 	udf	#174
    3fb0:	000c0104 	.inst	0x000c0104 ; undefined
    3fb4:	00248b13 	.inst	0x00248b13 ; NYI
    3fb8:	011b0700 	.inst	0x011b0700 ; undefined
    3fbc:	0000ae17 	udf	#44567
    3fc0:	0b010400 	add	w0, w0, w1, lsl #1
    3fc4:	2dd41300 	ldp	s0, s4, [x24, #160]!
    3fc8:	1c070000 	ldr	s0, 11fc8 <__stack_size+0xdfc8>
    3fcc:	00ae1701 	.inst	0x00ae1701 ; undefined
    3fd0:	01040000 	.inst	0x01040000 ; undefined
    3fd4:	b713000a 	tbnz	x10, #34, 9fd4 <__stack_size+0x5fd4>
    3fd8:	0700002e 	.inst	0x0700002e ; undefined
    3fdc:	ae17011d 	.inst	0xae17011d ; undefined
    3fe0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3fe4:	13000901 	sbfx	w1, w8, #0, #3
    3fe8:	00001764 	udf	#5988
    3fec:	14011e07 	b	4b808 <__stack_size+0x47808>
    3ff0:	000000ae 	udf	#174
    3ff4:	00080104 	.inst	0x00080104 ; undefined
    3ff8:	00208113 	.inst	0x00208113 ; NYI
    3ffc:	011f0700 	.inst	0x011f0700 ; undefined
    4000:	0000ae17 	udf	#44567
    4004:	07010400 	.inst	0x07010400 ; undefined
    4008:	19f91300 	.inst	0x19f91300 ; undefined
    400c:	20070000 	.inst	0x20070000 ; undefined
    4010:	00ae1401 	.inst	0x00ae1401 ; undefined
    4014:	01040000 	.inst	0x01040000 ; undefined
    4018:	bd130006 	str	s6, [x0, #4864]
    401c:	0700002a 	.inst	0x0700002a ; undefined
    4020:	ae140121 	.inst	0xae140121 ; undefined
    4024:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4028:	13000501 	sbfx	w1, w8, #0, #2
    402c:	00002585 	udf	#9605
    4030:	14012207 	b	4c84c <__stack_size+0x4884c>
    4034:	000000ae 	udf	#174
    4038:	00040104 	.inst	0x00040104 ; undefined
    403c:	00197913 	.inst	0x00197913 ; undefined
    4040:	01230700 	.inst	0x01230700 ; undefined
    4044:	0000ae17 	udf	#44567
    4048:	03010400 	.inst	0x03010400 ; undefined
    404c:	2e011300 	ext	v0.8b, v24.8b, v1.8b, #2
    4050:	24070000 	cmphs	p0.b, p0/z, z0.b, z7.b
    4054:	00ae1701 	.inst	0x00ae1701 ; undefined
    4058:	01040000 	.inst	0x01040000 ; undefined
    405c:	db130002 	.inst	0xdb130002 ; undefined
    4060:	0700002b 	.inst	0x0700002b ; undefined
    4064:	ae140125 	.inst	0xae140125 ; undefined
    4068:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    406c:	13000101 	sbfx	w1, w8, #0, #1
    4070:	00002e21 	udf	#11809
    4074:	14012607 	b	4d890 <__stack_size+0x49890>
    4078:	000000ae 	udf	#174
    407c:	00000104 	udf	#260
    4080:	07041400 	.inst	0x07041400 ; undefined
    4084:	60090103 	.inst	0x60090103 ; undefined
    4088:	1000000c 	adr	x12, 4088 <__stack_size+0x88>
    408c:	00323364 	.inst	0x00323364 ; NYI
    4090:	13010507 	sbfx	w7, w8, #1, #1
    4094:	000000ae 	udf	#174
    4098:	74696210 	.inst	0x74696210 ; undefined
    409c:	01270700 	.inst	0x01270700 ; undefined
    40a0:	000a1007 	.inst	0x000a1007 ; undefined
    40a4:	5e110000 	sha1c	q0, s0, v17.4s
    40a8:	0700002d 	.inst	0x0700002d ; undefined
    40ac:	3b020128 	.inst	0x3b020128 ; undefined
    40b0:	0500000c 	orr	z12.s, z12.s, #0x1
    40b4:	00000c60 	udf	#3168
    40b8:	2d070412 	stp	s18, s1, [x0, #56]
    40bc:	0e8c0501 	.inst	0x0e8c0501 ; undefined
    40c0:	33130000 	bfi	w0, w0, #13, #1
    40c4:	07000025 	.inst	0x07000025 ; undefined
    40c8:	ae10012e 	.inst	0xae10012e ; undefined
    40cc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    40d0:	13001f01 	sxtb	w1, w24
    40d4:	0000210a 	udf	#8458
    40d8:	13012f07 	sbfx	w7, w24, #1, #11
    40dc:	000000ae 	udf	#174
    40e0:	001e0104 	.inst	0x001e0104 ; undefined
    40e4:	00261113 	.inst	0x00261113 ; NYI
    40e8:	01300700 	.inst	0x01300700 ; undefined
    40ec:	0000ae13 	udf	#44563
    40f0:	1d010400 	.inst	0x1d010400 ; undefined
    40f4:	1b7b1300 	.inst	0x1b7b1300 ; undefined
    40f8:	31070000 	adds	w0, w0, #0x1c0
    40fc:	00ae1001 	.inst	0x00ae1001 ; undefined
    4100:	01040000 	.inst	0x01040000 ; undefined
    4104:	3513001c 	cbnz	w28, 2a104 <__stack_size+0x26104>
    4108:	0700002a 	.inst	0x0700002a ; undefined
    410c:	ae100132 	.inst	0xae100132 ; undefined
    4110:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4114:	13001b01 	sbfx	w1, w24, #0, #7
    4118:	00001c0e 	udf	#7182
    411c:	13013307 	sbfx	w7, w24, #1, #12
    4120:	000000ae 	udf	#174
    4124:	001a0104 	.inst	0x001a0104 ; undefined
    4128:	00192b13 	.inst	0x00192b13 ; undefined
    412c:	01340700 	.inst	0x01340700 ; undefined
    4130:	0000ae10 	udf	#44560
    4134:	19010400 	.inst	0x19010400 ; undefined
    4138:	2ad81300 	orr	w0, w24, w24, ror #4
    413c:	35070000 	cbnz	w0, 1213c <__stack_size+0xe13c>
    4140:	00ae1001 	.inst	0x00ae1001 ; undefined
    4144:	01040000 	.inst	0x01040000 ; undefined
    4148:	7a130018 	sbcs	w24, w0, w19
    414c:	07000026 	.inst	0x07000026 ; undefined
    4150:	ae130136 	.inst	0xae130136 ; undefined
    4154:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4158:	13001701 	sbfx	w1, w24, #0, #6
    415c:	00001cb6 	udf	#7350
    4160:	10013707 	adr	x7, 6840 <__stack_size+0x2840>
    4164:	000000ae 	udf	#174
    4168:	00160104 	.inst	0x00160104 ; undefined
    416c:	0018e513 	.inst	0x0018e513 ; undefined
    4170:	01380700 	.inst	0x01380700 ; undefined
    4174:	0000ae10 	udf	#44560
    4178:	15010400 	b	4045178 <__stack_size+0x4041178>
    417c:	2edf1300 	.inst	0x2edf1300 ; undefined
    4180:	39070000 	strb	w0, [x0, #448]
    4184:	00ae1001 	.inst	0x00ae1001 ; undefined
    4188:	01040000 	.inst	0x01040000 ; undefined
    418c:	e9130014 	.inst	0xe9130014 ; undefined
    4190:	0700002d 	.inst	0x0700002d ; undefined
    4194:	ae10013a 	.inst	0xae10013a ; undefined
    4198:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    419c:	13001301 	sbfx	w1, w24, #0, #5
    41a0:	0000242e 	udf	#9262
    41a4:	10013b07 	adr	x7, 6904 <__stack_size+0x2904>
    41a8:	000000ae 	udf	#174
    41ac:	00120104 	.inst	0x00120104 ; undefined
    41b0:	002d8813 	.inst	0x002d8813 ; NYI
    41b4:	013c0700 	.inst	0x013c0700 ; undefined
    41b8:	0000ae13 	udf	#44563
    41bc:	11010400 	add	w0, w0, #0x41
    41c0:	26d21300 	.inst	0x26d21300 ; undefined
    41c4:	3d070000 	str	b0, [x0, #448]
    41c8:	00ae1001 	.inst	0x00ae1001 ; undefined
    41cc:	01040000 	.inst	0x01040000 ; undefined
    41d0:	c5130010 	ld1sw	{z16.d}, p0/z, [x0, z19.d, uxtw]
    41d4:	0700002b 	.inst	0x0700002b ; undefined
    41d8:	ae10013e 	.inst	0xae10013e ; undefined
    41dc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    41e0:	13000f01 	sbfx	w1, w24, #0, #4
    41e4:	00001c72 	udf	#7282
    41e8:	10013f07 	adr	x7, 69c8 <__stack_size+0x29c8>
    41ec:	000000ae 	udf	#174
    41f0:	000e0104 	.inst	0x000e0104 ; undefined
    41f4:	002a0813 	.inst	0x002a0813 ; NYI
    41f8:	01400700 	.inst	0x01400700 ; undefined
    41fc:	0000ae10 	udf	#44560
    4200:	0d010400 	.inst	0x0d010400 ; undefined
    4204:	272d1300 	.inst	0x272d1300 ; undefined
    4208:	41070000 	.inst	0x41070000 ; undefined
    420c:	00ae1301 	.inst	0x00ae1301 ; undefined
    4210:	01040000 	.inst	0x01040000 ; undefined
    4214:	c313000c 	.inst	0xc313000c ; undefined
    4218:	07000017 	.inst	0x07000017 ; undefined
    421c:	ae130142 	.inst	0xae130142 ; undefined
    4220:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4224:	13000b01 	sbfx	w1, w24, #0, #3
    4228:	00002647 	udf	#9799
    422c:	13014307 	sbfx	w7, w24, #1, #16
    4230:	000000ae 	udf	#174
    4234:	000a0104 	.inst	0x000a0104 ; undefined
    4238:	00283b13 	.inst	0x00283b13 ; NYI
    423c:	01440700 	.inst	0x01440700 ; undefined
    4240:	0000ae10 	udf	#44560
    4244:	09010400 	.inst	0x09010400 ; undefined
    4248:	2d2b1300 	stp	s0, s4, [x24, #-168]
    424c:	45070000 	.inst	0x45070000 ; undefined
    4250:	00ae1301 	.inst	0x00ae1301 ; undefined
    4254:	01040000 	.inst	0x01040000 ; undefined
    4258:	d9130008 	stlur	x8, [x0, #-208]
    425c:	0700001b 	.inst	0x0700001b ; undefined
    4260:	ae100146 	.inst	0xae100146 ; undefined
    4264:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4268:	13000701 	sbfx	w1, w24, #0, #2
    426c:	00001dcc 	udf	#7628
    4270:	10014707 	adr	x7, 6b50 <__stack_size+0x2b50>
    4274:	000000ae 	udf	#174
    4278:	00060104 	.inst	0x00060104 ; undefined
    427c:	00280e13 	.inst	0x00280e13 ; NYI
    4280:	01480700 	.inst	0x01480700 ; undefined
    4284:	0000ae10 	udf	#44560
    4288:	05010400 	orr	z0.h, z0.h, #0x1
    428c:	18261300 	ldr	w0, 504ec <__stack_size+0x4c4ec>
    4290:	49070000 	.inst	0x49070000 ; undefined
    4294:	00ae1301 	.inst	0x00ae1301 ; undefined
    4298:	01040000 	.inst	0x01040000 ; undefined
    429c:	08130004 	stxrb	w19, w4, [x0]
    42a0:	07000023 	.inst	0x07000023 ; undefined
    42a4:	ae13014a 	.inst	0xae13014a ; undefined
    42a8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    42ac:	13000301 	sbfx	w1, w24, #0, #1
    42b0:	0000231e 	udf	#8990
    42b4:	10014b07 	adr	x7, 6c14 <__stack_size+0x2c14>
    42b8:	000000ae 	udf	#174
    42bc:	00020104 	.inst	0x00020104 ; undefined
    42c0:	001b6513 	.inst	0x001b6513 ; undefined
    42c4:	014c0700 	.inst	0x014c0700 ; undefined
    42c8:	0000ae10 	udf	#44560
    42cc:	01010400 	.inst	0x01010400 ; undefined
    42d0:	04140000 	.inst	0x04140000 ; undefined
    42d4:	09012a07 	.inst	0x09012a07 ; undefined
    42d8:	00000eb1 	udf	#3761
    42dc:	32336410 	orr	w16, w0, #0xffffe07f
    42e0:	012c0700 	.inst	0x012c0700 ; undefined
    42e4:	0000ae13 	udf	#44563
    42e8:	69621000 	ldpsw	x0, x4, [x0, #-240]
    42ec:	4d070074 	.inst	0x4d070074 ; undefined
    42f0:	0c720601 	.inst	0x0c720601 ; undefined
    42f4:	11000000 	add	w0, w0, #0x0
    42f8:	000027cf 	udf	#10191
    42fc:	02014e07 	.inst	0x02014e07 ; undefined
    4300:	00000e8c 	udf	#3724
    4304:	000eb105 	.inst	0x000eb105 ; undefined
    4308:	07041200 	.inst	0x07041200 ; undefined
    430c:	44050153 	.inst	0x44050153 ; undefined
    4310:	13000010 	sbfx	w16, w0, #0, #1
    4314:	00002aa9 	udf	#10921
    4318:	11015407 	add	w7, w0, #0x55
    431c:	000000ae 	udf	#174
    4320:	001f0104 	.inst	0x001f0104 ; undefined
    4324:	00188113 	.inst	0x00188113 ; undefined
    4328:	01550700 	.inst	0x01550700 ; undefined
    432c:	0000ae11 	udf	#44561
    4330:	1e010400 	.inst	0x1e010400 ; undefined
    4334:	2e9a1300 	.inst	0x2e9a1300 ; undefined
    4338:	56070000 	.inst	0x56070000 ; undefined
    433c:	00ae1101 	.inst	0x00ae1101 ; undefined
    4340:	01040000 	.inst	0x01040000 ; undefined
    4344:	b713001d 	tbnz	x29, #34, a344 <__stack_size+0x6344>
    4348:	07000018 	.inst	0x07000018 ; undefined
    434c:	ae110157 	.inst	0xae110157 ; undefined
    4350:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4354:	13001c01 	sxtb	w1, w0
    4358:	00002a24 	udf	#10788
    435c:	14015807 	b	5a378 <__stack_size+0x56378>
    4360:	000000ae 	udf	#174
    4364:	001b0104 	.inst	0x001b0104 ; undefined
    4368:	001d0313 	.inst	0x001d0313 ; undefined
    436c:	01590700 	.inst	0x01590700 ; undefined
    4370:	0000ae11 	udf	#44561
    4374:	1a010400 	.inst	0x1a010400 ; undefined
    4378:	21571300 	.inst	0x21571300 ; undefined
    437c:	5a070000 	sbc	w0, w0, w7
    4380:	00ae1401 	.inst	0x00ae1401 ; undefined
    4384:	01040000 	.inst	0x01040000 ; undefined
    4388:	a1130019 	.inst	0xa1130019 ; undefined
    438c:	07000022 	.inst	0x07000022 ; undefined
    4390:	ae14015b 	.inst	0xae14015b ; undefined
    4394:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4398:	13001801 	sbfx	w1, w0, #0, #7
    439c:	00001e25 	udf	#7717
    43a0:	14015c07 	b	5b3bc <__stack_size+0x573bc>
    43a4:	000000ae 	udf	#174
    43a8:	00100804 	.inst	0x00100804 ; undefined
    43ac:	00282113 	.inst	0x00282113 ; NYI
    43b0:	015d0700 	.inst	0x015d0700 ; undefined
    43b4:	0000ae11 	udf	#44561
    43b8:	0d030400 	.inst	0x0d030400 ; undefined
    43bc:	2a961300 	orr	w0, w24, w22, asr #4
    43c0:	5e070000 	sha1c	q0, s0, v7.4s
    43c4:	00ae1101 	.inst	0x00ae1101 ; undefined
    43c8:	01040000 	.inst	0x01040000 ; undefined
    43cc:	e313000c 	.inst	0xe313000c ; undefined
    43d0:	07000029 	.inst	0x07000029 ; undefined
    43d4:	ae11015f 	.inst	0xae11015f ; undefined
    43d8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    43dc:	13000a02 	sbfx	w2, w16, #0, #3
    43e0:	000025c8 	udf	#9672
    43e4:	11016007 	add	w7, w0, #0x58
    43e8:	000000ae 	udf	#174
    43ec:	00090104 	.inst	0x00090104 ; undefined
    43f0:	00269313 	.inst	0x00269313 ; NYI
    43f4:	01610700 	.inst	0x01610700 ; undefined
    43f8:	0000ae14 	udf	#44564
    43fc:	08010400 	stxrb	w1, w0, [x0]
    4400:	201f1300 	.inst	0x201f1300 ; undefined
    4404:	62070000 	.inst	0x62070000 ; undefined
    4408:	00ae1101 	.inst	0x00ae1101 ; undefined
    440c:	01040000 	.inst	0x01040000 ; undefined
    4410:	6b130007 	subs	w7, w0, w19
    4414:	07000021 	.inst	0x07000021 ; undefined
    4418:	ae140163 	.inst	0xae140163 ; undefined
    441c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4420:	13000601 	sbfx	w1, w16, #0, #2
    4424:	00001c25 	udf	#7205
    4428:	14016407 	b	5d444 <__stack_size+0x59444>
    442c:	000000ae 	udf	#174
    4430:	00050104 	.inst	0x00050104 ; undefined
    4434:	00215e13 	.inst	0x00215e13 ; NYI
    4438:	01650700 	.inst	0x01650700 ; undefined
    443c:	0000ae14 	udf	#44564
    4440:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    4444:	1a7b1300 	.inst	0x1a7b1300 ; undefined
    4448:	66070000 	.inst	0x66070000 ; undefined
    444c:	00ae1401 	.inst	0x00ae1401 ; undefined
    4450:	01040000 	.inst	0x01040000 ; undefined
    4454:	41130003 	.inst	0x41130003 ; undefined
    4458:	07000023 	.inst	0x07000023 ; undefined
    445c:	ae140167 	.inst	0xae140167 ; undefined
    4460:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4464:	13000201 	sbfx	w1, w16, #0, #1
    4468:	00001b3f 	udf	#6975
    446c:	14016807 	b	5e488 <__stack_size+0x5a488>
    4470:	000000ae 	udf	#174
    4474:	00010104 	.inst	0x00010104 ; undefined
    4478:	002dc213 	.inst	0x002dc213 ; NYI
    447c:	01690700 	.inst	0x01690700 ; undefined
    4480:	0000ae14 	udf	#44564
    4484:	00010400 	.inst	0x00010400 ; undefined
    4488:	04140000 	.inst	0x04140000 ; undefined
    448c:	09015007 	.inst	0x09015007 ; undefined
    4490:	00001069 	udf	#4201
    4494:	32336410 	orr	w16, w0, #0xffffe07f
    4498:	01520700 	.inst	0x01520700 ; undefined
    449c:	0000ae13 	udf	#44563
    44a0:	69621000 	ldpsw	x0, x4, [x0, #-240]
    44a4:	6a070074 	ands	w20, w3, w7
    44a8:	0ec30601 	fminnm	v1.4h, v16.4h, v3.4h
    44ac:	11000000 	add	w0, w0, #0x0
    44b0:	00002596 	udf	#9622
    44b4:	02016b07 	.inst	0x02016b07 ; undefined
    44b8:	00001044 	udf	#4164
    44bc:	00106905 	.inst	0x00106905 ; undefined
    44c0:	07041200 	.inst	0x07041200 ; undefined
    44c4:	b8020170 	stur	w16, [x11, #32]
    44c8:	13000011 	sbfx	w17, w0, #0, #1
    44cc:	000022ee 	udf	#8942
    44d0:	10017107 	adr	x7, 72f0 <__stack_size+0x32f0>
    44d4:	000000ae 	udf	#174
    44d8:	001f0104 	.inst	0x001f0104 ; undefined
    44dc:	001ba313 	.inst	0x001ba313 ; undefined
    44e0:	01720700 	.inst	0x01720700 ; undefined
    44e4:	0000ae11 	udf	#44561
    44e8:	1e010400 	.inst	0x1e010400 ; undefined
    44ec:	24d41300 	cmphs	p0.d, p4/z, z24.d, z20.d
    44f0:	73070000 	.inst	0x73070000 ; undefined
    44f4:	00ae1101 	.inst	0x00ae1101 ; undefined
    44f8:	01040000 	.inst	0x01040000 ; undefined
    44fc:	8e13001d 	.inst	0x8e13001d ; undefined
    4500:	07000022 	.inst	0x07000022 ; undefined
    4504:	ae100174 	.inst	0xae100174 ; undefined
    4508:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    450c:	13001c01 	sxtb	w1, w0
    4510:	00002f13 	udf	#12051
    4514:	10017507 	adr	x7, 73b4 <__stack_size+0x33b4>
    4518:	000000ae 	udf	#174
    451c:	001b0104 	.inst	0x001b0104 ; undefined
    4520:	002f1d13 	.inst	0x002f1d13 ; NYI
    4524:	01760700 	.inst	0x01760700 ; undefined
    4528:	0000ae11 	udf	#44561
    452c:	1a010400 	.inst	0x1a010400 ; undefined
    4530:	2f271300 	.inst	0x2f271300 ; undefined
    4534:	77070000 	.inst	0x77070000 ; undefined
    4538:	00ae1001 	.inst	0x00ae1001 ; undefined
    453c:	01040000 	.inst	0x01040000 ; undefined
    4540:	d4130019 	.inst	0xd4130019 ; undefined
    4544:	0700001e 	.inst	0x0700001e ; undefined
    4548:	ae100178 	.inst	0xae100178 ; undefined
    454c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4550:	13001801 	sbfx	w1, w0, #0, #7
    4554:	000020c1 	udf	#8385
    4558:	11017907 	add	w7, w8, #0x5e
    455c:	000000ae 	udf	#174
    4560:	00140404 	.inst	0x00140404 ; undefined
    4564:	00209613 	.inst	0x00209613 ; NYI
    4568:	017a0700 	.inst	0x017a0700 ; undefined
    456c:	0000ae10 	udf	#44560
    4570:	13010400 	sbfx	w0, w0, #1, #1
    4574:	1da41300 	.inst	0x1da41300 ; undefined
    4578:	7b070000 	.inst	0x7b070000 ; undefined
    457c:	00ae1001 	.inst	0x00ae1001 ; undefined
    4580:	01040000 	.inst	0x01040000 ; undefined
    4584:	72130012 	ands	w18, w0, #0x2000
    4588:	07000021 	.inst	0x07000021 ; undefined
    458c:	ae10017c 	.inst	0xae10017c ; undefined
    4590:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4594:	13001002 	sbfx	w2, w0, #0, #5
    4598:	0000263f 	udf	#9791
    459c:	10017d07 	adr	x7, 753c <__stack_size+0x353c>
    45a0:	000000ae 	udf	#174
    45a4:	00080804 	.inst	0x00080804 ; undefined
    45a8:	002b8513 	.inst	0x002b8513 ; NYI
    45ac:	017e0700 	.inst	0x017e0700 ; undefined
    45b0:	0000ae13 	udf	#44563
    45b4:	05030400 	orr	z0.d, z0.d, #0xffffffff00000001
    45b8:	2c841300 	stp	s0, s4, [x24], #32
    45bc:	7f070000 	.inst	0x7f070000 ; undefined
    45c0:	00ae1001 	.inst	0x00ae1001 ; undefined
    45c4:	01040000 	.inst	0x01040000 ; undefined
    45c8:	3f130004 	.inst	0x3f130004 ; undefined
    45cc:	0700002f 	.inst	0x0700002f ; undefined
    45d0:	ae100180 	.inst	0xae100180 ; undefined
    45d4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    45d8:	13000301 	sbfx	w1, w24, #0, #1
    45dc:	00002404 	udf	#9220
    45e0:	10018107 	adr	x7, 7600 <__stack_size+0x3600>
    45e4:	000000ae 	udf	#174
    45e8:	00020104 	.inst	0x00020104 ; undefined
    45ec:	00290313 	.inst	0x00290313 ; NYI
    45f0:	01820700 	.inst	0x01820700 ; undefined
    45f4:	0000ae10 	udf	#44560
    45f8:	00020400 	.inst	0x00020400 ; undefined
    45fc:	08120000 	stxrb	w18, w0, [x0]
    4600:	09016d07 	.inst	0x09016d07 ; undefined
    4604:	000011df 	udf	#4575
    4608:	32336415 	orr	w21, w0, #0xffffe07f
    460c:	016f0700 	.inst	0x016f0700 ; undefined
    4610:	0000ae10 	udf	#44560
    4614:	62150000 	.inst	0x62150000 ; undefined
    4618:	07007469 	.inst	0x07007469 ; undefined
    461c:	7b030183 	.inst	0x7b030183 ; undefined
    4620:	04000010 	add	z16.b, p0/m, z16.b, z0.b
    4624:	1a6b1100 	.inst	0x1a6b1100 ; undefined
    4628:	84070000 	ld1sb	{z0.s}, p0/z, [x0, z7.s, uxtw]
    462c:	11b80201 	.inst	0x11b80201 ; undefined
    4630:	df050000 	.inst	0xdf050000 ; undefined
    4634:	12000011 	and	w17, w0, #0x1
    4638:	01890704 	.inst	0x01890704 ; undefined
    463c:	00132e02 	.inst	0x00132e02 ; undefined
    4640:	28b01300 	stp	w0, w4, [x24], #-128
    4644:	8a070000 	and	x0, x0, x7
    4648:	00ae1101 	.inst	0x00ae1101 ; undefined
    464c:	06040000 	.inst	0x06040000 ; undefined
    4650:	5713001a 	.inst	0x5713001a ; undefined
    4654:	07000021 	.inst	0x07000021 ; undefined
    4658:	ae11018b 	.inst	0xae11018b ; undefined
    465c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4660:	13001901 	sbfx	w1, w8, #0, #7
    4664:	000017ed 	udf	#6125
    4668:	11018c07 	add	w7, w0, #0x63
    466c:	000000ae 	udf	#174
    4670:	00180104 	.inst	0x00180104 ; undefined
    4674:	0029cb13 	.inst	0x0029cb13 ; NYI
    4678:	018d0700 	.inst	0x018d0700 ; undefined
    467c:	0000ae11 	udf	#44561
    4680:	10080400 	adr	x0, 14700 <__stack_size+0x10700>
    4684:	2f5a1300 	fcmla	v0.4h, v24.4h, v26.h[0], #0
    4688:	8e070000 	.inst	0x8e070000 ; undefined
    468c:	00ae1101 	.inst	0x00ae1101 ; undefined
    4690:	02040000 	.inst	0x02040000 ; undefined
    4694:	3413000e 	cbz	w14, 2a694 <__stack_size+0x26694>
    4698:	0700002b 	.inst	0x0700002b ; undefined
    469c:	ae11018f 	.inst	0xae11018f ; undefined
    46a0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    46a4:	13000d01 	sbfx	w1, w8, #0, #4
    46a8:	00002965 	udf	#10597
    46ac:	11019007 	add	w7, w0, #0x64
    46b0:	000000ae 	udf	#174
    46b4:	000c0104 	.inst	0x000c0104 ; undefined
    46b8:	001d3813 	.inst	0x001d3813 ; undefined
    46bc:	01910700 	.inst	0x01910700 ; undefined
    46c0:	0000ae11 	udf	#44561
    46c4:	0b010400 	add	w0, w0, w1, lsl #1
    46c8:	1f841300 	.inst	0x1f841300 ; undefined
    46cc:	92070000 	and	x0, x0, #0x200000002000000
    46d0:	00ae1101 	.inst	0x00ae1101 ; undefined
    46d4:	01040000 	.inst	0x01040000 ; undefined
    46d8:	3413000a 	cbz	w10, 2a6d8 <__stack_size+0x266d8>
    46dc:	07000023 	.inst	0x07000023 ; undefined
    46e0:	ae110193 	.inst	0xae110193 ; undefined
    46e4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    46e8:	13000901 	sbfx	w1, w8, #0, #3
    46ec:	00001b93 	udf	#7059
    46f0:	11019407 	add	w7, w0, #0x65
    46f4:	000000ae 	udf	#174
    46f8:	00080104 	.inst	0x00080104 ; undefined
    46fc:	002bbd13 	.inst	0x002bbd13 ; NYI
    4700:	01950700 	.inst	0x01950700 ; undefined
    4704:	0000ae11 	udf	#44561
    4708:	07010400 	.inst	0x07010400 ; undefined
    470c:	2bb51300 	.inst	0x2bb51300 ; undefined
    4710:	96070000 	bl	fffffffff81c4710 <_sp+0xffffffff97184710>
    4714:	00ae1101 	.inst	0x00ae1101 ; undefined
    4718:	01040000 	.inst	0x01040000 ; undefined
    471c:	a8130006 	stnp	x6, x0, [x0, #304]
    4720:	07000028 	.inst	0x07000028 ; undefined
    4724:	ae110197 	.inst	0xae110197 ; undefined
    4728:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    472c:	13000501 	sbfx	w1, w8, #0, #2
    4730:	0000294b 	udf	#10571
    4734:	11019807 	add	w7, w0, #0x66
    4738:	000000ae 	udf	#174
    473c:	00040104 	.inst	0x00040104 ; undefined
    4740:	002c1013 	.inst	0x002c1013 ; NYI
    4744:	01990700 	.inst	0x01990700 ; undefined
    4748:	0000ae11 	udf	#44561
    474c:	03010400 	.inst	0x03010400 ; undefined
    4750:	241c1300 	cmphs	p0.b, p4/z, z24.b, z28.b
    4754:	9a070000 	adc	x0, x0, x7
    4758:	00ae1101 	.inst	0x00ae1101 ; undefined
    475c:	01040000 	.inst	0x01040000 ; undefined
    4760:	d8130002 	prfm	pldl2keep, 2a760 <__stack_size+0x26760>
    4764:	07000022 	.inst	0x07000022 ; undefined
    4768:	ae11019b 	.inst	0xae11019b ; undefined
    476c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4770:	00000101 	udf	#257
    4774:	86070812 	.inst	0x86070812 ; undefined
    4778:	13550901 	.inst	0x13550901 ; undefined
    477c:	64150000 	.inst	0x64150000 ; undefined
    4780:	07003233 	.inst	0x07003233 ; undefined
    4784:	ae100188 	.inst	0xae100188 ; undefined
    4788:	00000000 	udf	#0
    478c:	74696215 	.inst	0x74696215 ; undefined
    4790:	019c0700 	.inst	0x019c0700 ; undefined
    4794:	0011f103 	.inst	0x0011f103 ; undefined
    4798:	11000400 	add	w0, w0, #0x1
    479c:	00002862 	udf	#10338
    47a0:	02019d07 	.inst	0x02019d07 ; undefined
    47a4:	0000132e 	udf	#4910
    47a8:	00135505 	.inst	0x00135505 ; undefined
    47ac:	07041200 	.inst	0x07041200 ; undefined
    47b0:	b60201a2 	tbz	x2, #32, 87e4 <__stack_size+0x47e4>
    47b4:	13000013 	sbfx	w19, w0, #0, #1
    47b8:	00002754 	udf	#10068
    47bc:	1101a307 	add	w7, w24, #0x68
    47c0:	000000ae 	udf	#174
    47c4:	00180804 	.inst	0x00180804 ; undefined
    47c8:	00228213 	.inst	0x00228213 ; NYI
    47cc:	01a40700 	.inst	0x01a40700 ; undefined
    47d0:	0000ae11 	udf	#44561
    47d4:	10080400 	adr	x0, 14854 <__stack_size+0x10854>
    47d8:	1b0e1300 	madd	w0, w24, w14, w4
    47dc:	a5070000 	ld1rqw	{z0.s}, p0/z, [x0, x7, lsl #2]
    47e0:	00ae1101 	.inst	0x00ae1101 ; undefined
    47e4:	08040000 	stxrb	w4, w0, [x0]
    47e8:	72130008 	ands	w8, w0, #0x2000
    47ec:	0700002e 	.inst	0x0700002e ; undefined
    47f0:	ae1101a6 	.inst	0xae1101a6 ; undefined
    47f4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    47f8:	00000008 	udf	#8
    47fc:	9f070812 	.inst	0x9f070812 ; undefined
    4800:	13dd0901 	.inst	0x13dd0901 ; undefined
    4804:	64150000 	.inst	0x64150000 ; undefined
    4808:	07003233 	.inst	0x07003233 ; undefined
    480c:	ae1001a1 	.inst	0xae1001a1 ; undefined
    4810:	00000000 	udf	#0
    4814:	74696215 	.inst	0x74696215 ; undefined
    4818:	01a70700 	.inst	0x01a70700 ; undefined
    481c:	00136703 	.inst	0x00136703 ; undefined
    4820:	11000400 	add	w0, w0, #0x1
    4824:	0000285d 	udf	#10333
    4828:	0201a807 	.inst	0x0201a807 ; undefined
    482c:	000013b6 	udf	#5046
    4830:	0013dd05 	.inst	0x0013dd05 ; undefined
    4834:	07041200 	.inst	0x07041200 ; undefined
    4838:	1c0201ad 	ldr	s13, 886c <__stack_size+0x486c>
    483c:	13000014 	sbfx	w20, w0, #0, #1
    4840:	000026e9 	udf	#9961
    4844:	1101ae07 	add	w7, w16, #0x6b
    4848:	000000ae 	udf	#174
    484c:	00180804 	.inst	0x00180804 ; undefined
    4850:	001aee13 	.inst	0x001aee13 ; undefined
    4854:	01af0700 	.inst	0x01af0700 ; undefined
    4858:	0000ae11 	udf	#44561
    485c:	00180400 	.inst	0x00180400 ; undefined
    4860:	08120000 	stxrb	w18, w0, [x0]
    4864:	0901aa07 	.inst	0x0901aa07 ; undefined
    4868:	00001443 	udf	#5187
    486c:	32336415 	orr	w21, w0, #0xffffe07f
    4870:	01ac0700 	.inst	0x01ac0700 ; undefined
    4874:	0000ae10 	udf	#44560
    4878:	62150000 	.inst	0x62150000 ; undefined
    487c:	07007469 	.inst	0x07007469 ; undefined
    4880:	ef0301b0 	.inst	0xef0301b0 ; undefined
    4884:	04000013 	add	z19.b, p0/m, z19.b, z0.b
    4888:	1a661100 	.inst	0x1a661100 ; undefined
    488c:	b1070000 	adds	x0, x0, #0x1c0
    4890:	141c0201 	b	705094 <__stack_size+0x701094>
    4894:	43050000 	.inst	0x43050000 ; undefined
    4898:	12000014 	and	w20, w0, #0x1
    489c:	01b60704 	.inst	0x01b60704 ; undefined
    48a0:	00160902 	.inst	0x00160902 ; undefined
    48a4:	2aa31300 	orn	w0, w24, w3, asr #4
    48a8:	b7070000 	tbnz	x0, #32, 28a8 <__stack_size-0x1758>
    48ac:	00ae1101 	.inst	0x00ae1101 ; undefined
    48b0:	01040000 	.inst	0x01040000 ; undefined
    48b4:	7b13001f 	.inst	0x7b13001f ; undefined
    48b8:	07000018 	.inst	0x07000018 ; undefined
    48bc:	ae1101b8 	.inst	0xae1101b8 ; undefined
    48c0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    48c4:	13001e01 	sxtb	w1, w16
    48c8:	00002e94 	udf	#11924
    48cc:	1101b907 	add	w7, w8, #0x6e
    48d0:	000000ae 	udf	#174
    48d4:	001d0104 	.inst	0x001d0104 ; undefined
    48d8:	0018b113 	.inst	0x0018b113 ; undefined
    48dc:	01ba0700 	.inst	0x01ba0700 ; undefined
    48e0:	0000ae11 	udf	#44561
    48e4:	1c010400 	ldr	s0, 6964 <__stack_size+0x2964>
    48e8:	2a1e1300 	orr	w0, w24, w30, lsl #4
    48ec:	bb070000 	.inst	0xbb070000 ; undefined
    48f0:	00ae1101 	.inst	0x00ae1101 ; undefined
    48f4:	01040000 	.inst	0x01040000 ; undefined
    48f8:	fd13001b 	str	d27, [x0, #9728]
    48fc:	0700001c 	.inst	0x0700001c ; undefined
    4900:	ae1101bc 	.inst	0xae1101bc ; undefined
    4904:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4908:	13001a01 	sbfx	w1, w16, #0, #7
    490c:	00002157 	udf	#8535
    4910:	1101bd07 	add	w7, w8, #0x6f
    4914:	000000ae 	udf	#174
    4918:	00190104 	.inst	0x00190104 ; undefined
    491c:	00229b13 	.inst	0x00229b13 ; NYI
    4920:	01be0700 	.inst	0x01be0700 ; undefined
    4924:	0000ae11 	udf	#44561
    4928:	18010400 	ldr	w0, 69a8 <__stack_size+0x29a8>
    492c:	1e251300 	.inst	0x1e251300 ; undefined
    4930:	bf070000 	.inst	0xbf070000 ; undefined
    4934:	00ae1101 	.inst	0x00ae1101 ; undefined
    4938:	08040000 	stxrb	w4, w0, [x0]
    493c:	67130010 	.inst	0x67130010 ; undefined
    4940:	0700002b 	.inst	0x0700002b ; undefined
    4944:	ae1101c0 	.inst	0xae1101c0 ; undefined
    4948:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    494c:	13000f01 	sbfx	w1, w24, #0, #4
    4950:	00002521 	udf	#9505
    4954:	1101c107 	add	w7, w8, #0x70
    4958:	000000ae 	udf	#174
    495c:	000e0104 	.inst	0x000e0104 ; undefined
    4960:	001f9713 	.inst	0x001f9713 ; undefined
    4964:	01c20700 	.inst	0x01c20700 ; undefined
    4968:	0000ae11 	udf	#44561
    496c:	0d010400 	.inst	0x0d010400 ; undefined
    4970:	18d31300 	ldr	w0, fffffffffffaabd0 <_sp+0xffffffff9ef6abd0>
    4974:	c3070000 	.inst	0xc3070000 ; undefined
    4978:	00ae1101 	.inst	0x00ae1101 ; undefined
    497c:	01040000 	.inst	0x01040000 ; undefined
    4980:	fd13000c 	str	d12, [x0, #9728]
    4984:	07000025 	.inst	0x07000025 ; undefined
    4988:	ae1101c4 	.inst	0xae1101c4 ; undefined
    498c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4990:	13000b01 	sbfx	w1, w24, #0, #3
    4994:	000017da 	udf	#6106
    4998:	1101c507 	add	w7, w8, #0x71
    499c:	000000ae 	udf	#174
    49a0:	000a0104 	.inst	0x000a0104 ; undefined
    49a4:	00237c13 	.inst	0x00237c13 ; NYI
    49a8:	01c60700 	.inst	0x01c60700 ; undefined
    49ac:	0000ae11 	udf	#44561
    49b0:	09010400 	.inst	0x09010400 ; undefined
    49b4:	255e1300 	cmpge	p0.h, p4/z, z24.h, #-2
    49b8:	c7070000 	.inst	0xc7070000 ; undefined
    49bc:	00ae1101 	.inst	0x00ae1101 ; undefined
    49c0:	01040000 	.inst	0x01040000 ; undefined
    49c4:	b7130008 	tbnz	x8, #34, a9c4 <__stack_size+0x69c4>
    49c8:	07000026 	.inst	0x07000026 ; undefined
    49cc:	ae1101c8 	.inst	0xae1101c8 ; undefined
    49d0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    49d4:	13000701 	sbfx	w1, w24, #0, #2
    49d8:	0000191c 	udf	#6428
    49dc:	1101c907 	add	w7, w8, #0x72
    49e0:	000000ae 	udf	#174
    49e4:	00060104 	.inst	0x00060104 ; undefined
    49e8:	0023f313 	.inst	0x0023f313 ; NYI
    49ec:	01ca0700 	.inst	0x01ca0700 ; undefined
    49f0:	0000ae11 	udf	#44561
    49f4:	05010400 	orr	z0.h, z0.h, #0x1
    49f8:	196a1300 	.inst	0x196a1300 ; undefined
    49fc:	cb070000 	sub	x0, x0, x7
    4a00:	00ae1101 	.inst	0x00ae1101 ; undefined
    4a04:	01040000 	.inst	0x01040000 ; undefined
    4a08:	8c130004 	.inst	0x8c130004 ; undefined
    4a0c:	07000027 	.inst	0x07000027 ; undefined
    4a10:	ae1101cc 	.inst	0xae1101cc ; undefined
    4a14:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4a18:	13000301 	sbfx	w1, w24, #0, #1
    4a1c:	000027a6 	udf	#10150
    4a20:	1101cd07 	add	w7, w8, #0x73
    4a24:	000000ae 	udf	#174
    4a28:	00020104 	.inst	0x00020104 ; undefined
    4a2c:	0027b813 	.inst	0x0027b813 ; NYI
    4a30:	01ce0700 	.inst	0x01ce0700 ; undefined
    4a34:	0000ae11 	udf	#44561
    4a38:	01010400 	.inst	0x01010400 ; undefined
    4a3c:	2c1f1300 	stnp	s0, s4, [x24, #248]
    4a40:	cf070000 	.inst	0xcf070000 ; undefined
    4a44:	00ae1101 	.inst	0x00ae1101 ; undefined
    4a48:	01040000 	.inst	0x01040000 ; undefined
    4a4c:	12000000 	and	w0, w0, #0x1
    4a50:	01b30708 	.inst	0x01b30708 ; undefined
    4a54:	00163009 	.inst	0x00163009 ; undefined
    4a58:	33641500 	.inst	0x33641500 ; undefined
    4a5c:	b5070032 	cbnz	x18, 12a60 <__stack_size+0xea60>
    4a60:	00ae1001 	.inst	0x00ae1001 ; undefined
    4a64:	15000000 	b	4004a64 <__stack_size+0x4000a64>
    4a68:	00746962 	.inst	0x00746962 ; undefined
    4a6c:	0301d007 	.inst	0x0301d007 ; undefined
    4a70:	00001455 	udf	#5205
    4a74:	31110004 	adds	w4, w0, #0x440
    4a78:	0700002c 	.inst	0x0700002c ; undefined
    4a7c:	090201d1 	.inst	0x090201d1 ; undefined
    4a80:	05000016 	orr	z22.s, z22.s, #0x1
    4a84:	00001630 	udf	#5680
    4a88:	d7070412 	.inst	0xd7070412 ; undefined
    4a8c:	16800201 	b	fffffffffa005290 <_sp+0xffffffff98fc5290>
    4a90:	82130000 	.inst	0x82130000 ; undefined
    4a94:	07000029 	.inst	0x07000029 ; undefined
    4a98:	ae1101d8 	.inst	0xae1101d8 ; undefined
    4a9c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4aa0:	13001e02 	sxtb	w2, w16
    4aa4:	0000247e 	udf	#9342
    4aa8:	1101d907 	add	w7, w8, #0x76
    4aac:	000000ae 	udf	#174
    4ab0:	001d0104 	.inst	0x001d0104 ; undefined
    4ab4:	00220f13 	.inst	0x00220f13 ; NYI
    4ab8:	01da0700 	.inst	0x01da0700 ; undefined
    4abc:	0000ae11 	udf	#44561
    4ac0:	001d0400 	.inst	0x001d0400 ; undefined
    4ac4:	08120000 	stxrb	w18, w0, [x0]
    4ac8:	0901d407 	.inst	0x0901d407 ; undefined
    4acc:	000016a7 	udf	#5799
    4ad0:	32336415 	orr	w21, w0, #0xffffe07f
    4ad4:	01d60700 	.inst	0x01d60700 ; undefined
    4ad8:	0000ae10 	udf	#44560
    4adc:	62150000 	.inst	0x62150000 ; undefined
    4ae0:	07007469 	.inst	0x07007469 ; undefined
    4ae4:	420301db 	.inst	0x420301db ; undefined
    4ae8:	04000016 	add	z22.b, p0/m, z22.b, z0.b
    4aec:	2f6f1100 	fcmla	v0.4h, v8.4h, v15.h[1], #0
    4af0:	dc070000 	.inst	0xdc070000 ; undefined
    4af4:	16800201 	b	fffffffffa0052f8 <_sp+0xffffffff98fc52f8>
    4af8:	a7050000 	.inst	0xa7050000 ; undefined
    4afc:	12000016 	and	w22, w0, #0x1
    4b00:	01e10704 	.inst	0x01e10704 ; undefined
    4b04:	00174c02 	.inst	0x00174c02 ; undefined
    4b08:	2c9a1300 	stp	s0, s4, [x24], #208
    4b0c:	e2070000 	.inst	0xe2070000 ; undefined
    4b10:	00ae1101 	.inst	0x00ae1101 ; undefined
    4b14:	0a040000 	and	w0, w0, w4
    4b18:	d9130016 	stlur	x22, [x0, #-208]
    4b1c:	0700001a 	.inst	0x0700001a ; undefined
    4b20:	ae1101e3 	.inst	0xae1101e3 ; undefined
    4b24:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4b28:	13001501 	sbfx	w1, w8, #0, #6
    4b2c:	000028da 	udf	#10458
    4b30:	1101e407 	add	w7, w0, #0x79
    4b34:	000000ae 	udf	#174
    4b38:	00120304 	.inst	0x00120304 ; undefined
    4b3c:	0028f213 	.inst	0x0028f213 ; NYI
    4b40:	01e50700 	.inst	0x01e50700 ; undefined
    4b44:	0000ae11 	udf	#44561
    4b48:	10020400 	adr	x0, 8bc8 <__stack_size+0x4bc8>
    4b4c:	290e1300 	stp	w0, w4, [x24, #112]
    4b50:	e6070000 	.inst	0xe6070000 ; undefined
    4b54:	00ae1101 	.inst	0x00ae1101 ; undefined
    4b58:	0a040000 	and	w0, w0, w4
    4b5c:	5a130006 	sbc	w6, w0, w19
    4b60:	07000020 	.inst	0x07000020 ; undefined
    4b64:	ae1101e7 	.inst	0xae1101e7 ; undefined
    4b68:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4b6c:	13000501 	sbfx	w1, w8, #0, #2
    4b70:	00002da9 	udf	#11689
    4b74:	1101e807 	add	w7, w0, #0x7a
    4b78:	000000ae 	udf	#174
    4b7c:	00020304 	.inst	0x00020304 ; undefined
    4b80:	00175513 	.inst	0x00175513 ; undefined
    4b84:	01e90700 	.inst	0x01e90700 ; undefined
    4b88:	0000ae11 	udf	#44561
    4b8c:	00020400 	.inst	0x00020400 ; undefined
    4b90:	08120000 	stxrb	w18, w0, [x0]
    4b94:	0901de07 	.inst	0x0901de07 ; undefined
    4b98:	00001773 	udf	#6003
    4b9c:	32336415 	orr	w21, w0, #0xffffe07f
    4ba0:	01e00700 	.inst	0x01e00700 ; undefined
    4ba4:	0000ae10 	udf	#44560
    4ba8:	62150000 	.inst	0x62150000 ; undefined
    4bac:	07007469 	.inst	0x07007469 ; undefined
    4bb0:	b90301ea 	str	w10, [x15, #768]
    4bb4:	04000016 	add	z22.b, p0/m, z22.b, z0.b
    4bb8:	27601100 	.inst	0x27601100 ; undefined
    4bbc:	eb070000 	subs	x0, x0, x7
    4bc0:	174c0201 	b	fffffffffd3053c4 <_sp+0xffffffff9c2c53c4>
    4bc4:	73050000 	.inst	0x73050000 ; undefined
    4bc8:	12000017 	and	w23, w0, #0x1
    4bcc:	01f00704 	.inst	0x01f00704 ; undefined
    4bd0:	00181802 	.inst	0x00181802 ; undefined
    4bd4:	21991300 	.inst	0x21991300 ; undefined
    4bd8:	f1070000 	subs	x0, x0, #0x1c0
    4bdc:	00ae1101 	.inst	0x00ae1101 ; undefined
    4be0:	0a040000 	and	w0, w0, w4
    4be4:	af130016 	.inst	0xaf130016 ; undefined
    4be8:	07000020 	.inst	0x07000020 ; undefined
    4bec:	ae1101f2 	.inst	0xae1101f2 ; undefined
    4bf0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4bf4:	13001501 	sbfx	w1, w8, #0, #6
    4bf8:	000028da 	udf	#10458
    4bfc:	1101f307 	add	w7, w24, #0x7c
    4c00:	000000ae 	udf	#174
    4c04:	00120304 	.inst	0x00120304 ; undefined
    4c08:	001d2a13 	.inst	0x001d2a13 ; undefined
    4c0c:	01f40700 	.inst	0x01f40700 ; undefined
    4c10:	0000ae11 	udf	#44561
    4c14:	10020400 	adr	x0, 8c94 <__stack_size+0x4c94>
    4c18:	21bd1300 	.inst	0x21bd1300 ; undefined
    4c1c:	f5070000 	.inst	0xf5070000 ; undefined
    4c20:	00ae1101 	.inst	0x00ae1101 ; undefined
    4c24:	0a040000 	and	w0, w0, w4
    4c28:	0e130006 	tbl	v6.8b, {v0.16b}, v19.8b
    4c2c:	0700001f 	.inst	0x0700001f ; undefined
    4c30:	ae1101f6 	.inst	0xae1101f6 ; undefined
    4c34:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4c38:	13000501 	sbfx	w1, w8, #0, #2
    4c3c:	00002da9 	udf	#11689
    4c40:	1101f707 	add	w7, w24, #0x7d
    4c44:	000000ae 	udf	#174
    4c48:	00020304 	.inst	0x00020304 ; undefined
    4c4c:	002f3113 	.inst	0x002f3113 ; NYI
    4c50:	01f80700 	.inst	0x01f80700 ; undefined
    4c54:	0000ae11 	udf	#44561
    4c58:	00020400 	.inst	0x00020400 ; undefined
    4c5c:	08120000 	stxrb	w18, w0, [x0]
    4c60:	0901ed07 	.inst	0x0901ed07 ; undefined
    4c64:	0000183f 	udf	#6207
    4c68:	32336415 	orr	w21, w0, #0xffffe07f
    4c6c:	01ef0700 	.inst	0x01ef0700 ; undefined
    4c70:	0000ae10 	udf	#44560
    4c74:	62150000 	.inst	0x62150000 ; undefined
    4c78:	07007469 	.inst	0x07007469 ; undefined
    4c7c:	850301f9 	.inst	0x850301f9 ; undefined
    4c80:	04000017 	add	z23.b, p0/m, z23.b, z0.b
    4c84:	218d1100 	.inst	0x218d1100 ; undefined
    4c88:	fa070000 	sbcs	x0, x0, x7
    4c8c:	18180201 	ldr	w1, 34ccc <__stack_size+0x30ccc>
    4c90:	3f050000 	.inst	0x3f050000 ; undefined
    4c94:	12000018 	and	w24, w0, #0x1
    4c98:	01ff0704 	.inst	0x01ff0704 ; undefined
    4c9c:	0018e402 	.inst	0x0018e402 ; undefined
    4ca0:	21991300 	.inst	0x21991300 ; undefined
    4ca4:	00070000 	.inst	0x00070000 ; undefined
    4ca8:	00ae1102 	.inst	0x00ae1102 ; undefined
    4cac:	0a040000 	and	w0, w0, w4
    4cb0:	af130016 	.inst	0xaf130016 ; undefined
    4cb4:	07000020 	.inst	0x07000020 ; undefined
    4cb8:	ae110201 	.inst	0xae110201 ; undefined
    4cbc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4cc0:	13001501 	sbfx	w1, w8, #0, #6
    4cc4:	000028da 	udf	#10458
    4cc8:	11020207 	add	w7, w16, #0x80
    4ccc:	000000ae 	udf	#174
    4cd0:	00120304 	.inst	0x00120304 ; undefined
    4cd4:	001d2a13 	.inst	0x001d2a13 ; undefined
    4cd8:	02030700 	.inst	0x02030700 ; undefined
    4cdc:	0000ae11 	udf	#44561
    4ce0:	10020400 	adr	x0, 8d60 <__stack_size+0x4d60>
    4ce4:	21bd1300 	.inst	0x21bd1300 ; undefined
    4ce8:	04070000 	.inst	0x04070000 ; undefined
    4cec:	00ae1102 	.inst	0x00ae1102 ; undefined
    4cf0:	0a040000 	and	w0, w0, w4
    4cf4:	0e130006 	tbl	v6.8b, {v0.16b}, v19.8b
    4cf8:	0700001f 	.inst	0x0700001f ; undefined
    4cfc:	ae110205 	.inst	0xae110205 ; undefined
    4d00:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4d04:	13000501 	sbfx	w1, w8, #0, #2
    4d08:	00002da9 	udf	#11689
    4d0c:	11020607 	add	w7, w16, #0x81
    4d10:	000000ae 	udf	#174
    4d14:	00020304 	.inst	0x00020304 ; undefined
    4d18:	002f3113 	.inst	0x002f3113 ; NYI
    4d1c:	02070700 	.inst	0x02070700 ; undefined
    4d20:	0000ae11 	udf	#44561
    4d24:	00020400 	.inst	0x00020400 ; undefined
    4d28:	08120000 	stxrb	w18, w0, [x0]
    4d2c:	0901fc07 	.inst	0x0901fc07 ; undefined
    4d30:	0000190b 	udf	#6411
    4d34:	32336415 	orr	w21, w0, #0xffffe07f
    4d38:	01fe0700 	.inst	0x01fe0700 ; undefined
    4d3c:	0000ae10 	udf	#44560
    4d40:	62150000 	.inst	0x62150000 ; undefined
    4d44:	07007469 	.inst	0x07007469 ; undefined
    4d48:	51030208 	sub	w8, w16, #0xc0
    4d4c:	04000018 	add	z24.b, p0/m, z24.b, z0.b
    4d50:	25021100 	cmpge	p0.b, p4/z, z8.b, #2
    4d54:	09070000 	.inst	0x09070000 ; undefined
    4d58:	18e40202 	ldr	w2, fffffffffffccd98 <_sp+0xffffffff9ef8cd98>
    4d5c:	0b050000 	add	w0, w0, w5
    4d60:	12000019 	and	w25, w0, #0x1
    4d64:	020e0704 	.inst	0x020e0704 ; undefined
    4d68:	0019b002 	.inst	0x0019b002 ; undefined
    4d6c:	21991300 	.inst	0x21991300 ; undefined
    4d70:	0f070000 	.inst	0x0f070000 ; undefined
    4d74:	00ae1102 	.inst	0x00ae1102 ; undefined
    4d78:	0a040000 	and	w0, w0, w4
    4d7c:	af130016 	.inst	0xaf130016 ; undefined
    4d80:	07000020 	.inst	0x07000020 ; undefined
    4d84:	ae110210 	.inst	0xae110210 ; undefined
    4d88:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4d8c:	13001501 	sbfx	w1, w8, #0, #6
    4d90:	000028da 	udf	#10458
    4d94:	11021107 	add	w7, w8, #0x84
    4d98:	000000ae 	udf	#174
    4d9c:	00120304 	.inst	0x00120304 ; undefined
    4da0:	001d2a13 	.inst	0x001d2a13 ; undefined
    4da4:	02120700 	.inst	0x02120700 ; undefined
    4da8:	0000ae11 	udf	#44561
    4dac:	10020400 	adr	x0, 8e2c <__stack_size+0x4e2c>
    4db0:	21bd1300 	.inst	0x21bd1300 ; undefined
    4db4:	13070000 	sbfiz	w0, w0, #25, #1
    4db8:	00ae1102 	.inst	0x00ae1102 ; undefined
    4dbc:	0a040000 	and	w0, w0, w4
    4dc0:	0e130006 	tbl	v6.8b, {v0.16b}, v19.8b
    4dc4:	0700001f 	.inst	0x0700001f ; undefined
    4dc8:	ae110214 	.inst	0xae110214 ; undefined
    4dcc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4dd0:	13000501 	sbfx	w1, w8, #0, #2
    4dd4:	00002da9 	udf	#11689
    4dd8:	11021507 	add	w7, w8, #0x85
    4ddc:	000000ae 	udf	#174
    4de0:	00020304 	.inst	0x00020304 ; undefined
    4de4:	002f3113 	.inst	0x002f3113 ; NYI
    4de8:	02160700 	.inst	0x02160700 ; undefined
    4dec:	0000ae11 	udf	#44561
    4df0:	00020400 	.inst	0x00020400 ; undefined
    4df4:	08120000 	stxrb	w18, w0, [x0]
    4df8:	09020b07 	.inst	0x09020b07 ; undefined
    4dfc:	000019d7 	udf	#6615
    4e00:	32336415 	orr	w21, w0, #0xffffe07f
    4e04:	020d0700 	.inst	0x020d0700 ; undefined
    4e08:	0000ae10 	udf	#44560
    4e0c:	62150000 	.inst	0x62150000 ; undefined
    4e10:	07007469 	.inst	0x07007469 ; undefined
    4e14:	1d030217 	.inst	0x1d030217 ; undefined
    4e18:	04000019 	add	z25.b, p0/m, z25.b, z0.b
    4e1c:	20e31100 	.inst	0x20e31100 ; undefined
    4e20:	18070000 	ldr	w0, 12e20 <__stack_size+0xee20>
    4e24:	19b00202 	.inst	0x19b00202 ; undefined
    4e28:	d7050000 	.inst	0xd7050000 ; undefined
    4e2c:	12000019 	and	w25, w0, #0x1
    4e30:	02270798 	.inst	0x02270798 ; undefined
    4e34:	001b7c09 	.inst	0x001b7c09 ; undefined
    4e38:	1dc31600 	.inst	0x1dc31600 ; undefined
    4e3c:	29070000 	stp	w0, w0, [x0, #56]
    4e40:	00ae1302 	.inst	0x00ae1302 ; undefined
    4e44:	16000000 	b	fffffffff8004e44 <_sp+0xffffffff96fc4e44>
    4e48:	00002662 	udf	#9826
    4e4c:	24022a07 	cmpeq	p7.b, p2/z, z16.b, z2.d
    4e50:	00000238 	udf	#568
    4e54:	25701604 	whilelt	p4.h, x16, x16
    4e58:	2b070000 	adds	w0, w0, w7
    4e5c:	00ae1302 	.inst	0x00ae1302 ; undefined
    4e60:	16080000 	b	fffffffff8204e60 <_sp+0xffffffff971c4e60>
    4e64:	0000277b 	udf	#10107
    4e68:	1d022c07 	.inst	0x1d022c07 ; undefined
    4e6c:	00000385 	udf	#901
    4e70:	1cc6160c 	ldr	s12, fffffffffff91130 <_sp+0xffffffff9ef51130>
    4e74:	2d070000 	stp	s0, s0, [x0, #56]
    4e78:	00ae1302 	.inst	0x00ae1302 ; undefined
    4e7c:	16100000 	b	fffffffff8404e7c <_sp+0xffffffff973c4e7c>
    4e80:	00002053 	udf	#8275
    4e84:	10022e07 	adr	x7, 9444 <__stack_size+0x5444>
    4e88:	000000ae 	udf	#174
    4e8c:	23c61614 	.inst	0x23c61614 ; undefined
    4e90:	2f070000 	.inst	0x2f070000 ; undefined
    4e94:	00ae1002 	.inst	0x00ae1002 ; undefined
    4e98:	16180000 	b	fffffffff8604e98 <_sp+0xffffffff975c4e98>
    4e9c:	00002726 	udf	#10022
    4ea0:	10023007 	adr	x7, 94a0 <__stack_size+0x54a0>
    4ea4:	000000ae 	udf	#174
    4ea8:	1ecb161c 	.inst	0x1ecb161c ; undefined
    4eac:	31070000 	adds	w0, w0, #0x1c0
    4eb0:	00ae1002 	.inst	0x00ae1002 ; undefined
    4eb4:	16200000 	b	fffffffff8804eb4 <_sp+0xffffffff977c4eb4>
    4eb8:	0000295a 	udf	#10586
    4ebc:	14023207 	b	916d8 <__stack_size+0x8d6d8>
    4ec0:	00000532 	udf	#1330
    4ec4:	1ccd1624 	ldr	s4, fffffffffff9f188 <_sp+0xffffffff9ef5f188>
    4ec8:	33070000 	bfi	w0, w0, #25, #1
    4ecc:	06af3902 	.inst	0x06af3902 ; undefined
    4ed0:	16280000 	b	fffffffff8a04ed0 <_sp+0xffffffff979c4ed0>
    4ed4:	00001f2a 	udf	#7978
    4ed8:	2c023407 	stnp	s7, s13, [x0, #16]
    4edc:	000007cc 	udf	#1996
    4ee0:	1bb2162c 	.inst	0x1bb2162c ; undefined
    4ee4:	35070000 	cbnz	w0, 12ee4 <__stack_size+0xeee4>
    4ee8:	0a0b2b02 	and	w2, w24, w11, lsl #10
    4eec:	16300000 	b	fffffffff8c04eec <_sp+0xffffffff97bc4eec>
    4ef0:	000016cb 	udf	#5835
    4ef4:	34023607 	cbz	w7, 95b4 <__stack_size+0x55b4>
    4ef8:	00000c6d 	udf	#3181
    4efc:	2cd31634 	ldp	s20, s5, [x17], #152
    4f00:	37070000 	tbnz	w0, #0, 2f00 <__stack_size-0x1100>
    4f04:	0ebe3802 	.inst	0x0ebe3802 ; undefined
    4f08:	16380000 	b	fffffffff8e04f08 <_sp+0xffffffff97dc4f08>
    4f0c:	000021e8 	udf	#8680
    4f10:	28023807 	stnp	w7, w14, [x0, #16]
    4f14:	00001076 	udf	#4214
    4f18:	2e64163c 	urhadd	v28.4h, v17.4h, v4.4h
    4f1c:	39070000 	strb	w0, [x0, #448]
    4f20:	13621702 	.inst	0x13621702 ; undefined
    4f24:	16400000 	b	fffffffff9004f24 <_sp+0xffffffff97fc4f24>
    4f28:	00001d87 	udf	#7559
    4f2c:	17023a07 	b	fffffffffc093748 <_sp+0xffffffff9b053748>
    4f30:	000011ec 	udf	#4588
    4f34:	2e5f1648 	faddp	v8.4h, v18.4h, v31.4h
    4f38:	3b070000 	.inst	0x3b070000 ; undefined
    4f3c:	13ea1c02 	.inst	0x13ea1c02 ; undefined
    4f40:	16500000 	b	fffffffff9404f40 <_sp+0xffffffff983c4f40>
    4f44:	00001d82 	udf	#7554
    4f48:	1c023c07 	ldr	s7, 96c8 <__stack_size+0x56c8>
    4f4c:	00001450 	udf	#5200
    4f50:	1c3e1658 	ldr	s24, 81218 <__stack_size+0x7d218>
    4f54:	3d070000 	str	b0, [x0, #448]
    4f58:	163d3502 	b	fffffffff8f52360 <_sp+0xffffffff97f12360>
    4f5c:	16600000 	b	fffffffff9804f5c <_sp+0xffffffff987c4f5c>
    4f60:	00001ffd 	udf	#8189
    4f64:	1a023e07 	.inst	0x1a023e07 ; undefined
    4f68:	000016b4 	udf	#5812
    4f6c:	18a31668 	ldr	w8, fffffffffff4b238 <_sp+0xffffffff9ef0b238>
    4f70:	3f070000 	.inst	0x3f070000 ; undefined
    4f74:	00ae1002 	.inst	0x00ae1002 ; undefined
    4f78:	16700000 	b	fffffffff9c04f78 <_sp+0xffffffff98bc4f78>
    4f7c:	000024f3 	udf	#9459
    4f80:	10024007 	adr	x7, 9780 <__stack_size+0x5780>
    4f84:	000000ae 	udf	#174
    4f88:	26261674 	.inst	0x26261674 ; undefined
    4f8c:	41070000 	.inst	0x41070000 ; undefined
    4f90:	17802202 	b	fffffffffe00d798 <_sp+0xffffffff9cfcd798>
    4f94:	16780000 	b	fffffffff9e04f94 <_sp+0xffffffff98dc4f94>
    4f98:	00001f7a 	udf	#8058
    4f9c:	13024207 	sbfx	w7, w16, #2, #15
    4fa0:	0000184c 	udf	#6220
    4fa4:	27091680 	.inst	0x27091680 ; undefined
    4fa8:	43070000 	.inst	0x43070000 ; undefined
    4fac:	19182602 	.inst	0x19182602 ; undefined
    4fb0:	16880000 	b	fffffffffa204fb0 <_sp+0xffffffff991c4fb0>
    4fb4:	00001c54 	udf	#7252
    4fb8:	27024407 	.inst	0x27024407 ; undefined
    4fbc:	000019e4 	udf	#6628
    4fc0:	f5110090 	.inst	0xf5110090 ; undefined
    4fc4:	0700001b 	.inst	0x0700001b ; undefined
    4fc8:	e9020245 	.inst	0xe9020245 ; undefined
    4fcc:	05000019 	orr	z25.s, z25.s, #0x1
    4fd0:	00001b7c 	udf	#7036
    4fd4:	49072c12 	.inst	0x49072c12 ; undefined
    4fd8:	1d9f0902 	.inst	0x1d9f0902 ; undefined
    4fdc:	a5160000 	ld1rqw	{z0.s}, p0/z, [x0, x22, lsl #2]
    4fe0:	07000020 	.inst	0x07000020 ; undefined
    4fe4:	7e11024b 	.inst	0x7e11024b ; undefined
    4fe8:	00000000 	udf	#0
    4fec:	00299c16 	.inst	0x00299c16 ; NYI
    4ff0:	024c0700 	.inst	0x024c0700 ; undefined
    4ff4:	00007e11 	udf	#32273
    4ff8:	92160100 	and	x0, x8, #0x40000000400
    4ffc:	07000029 	.inst	0x07000029 ; undefined
    5000:	7e11024d 	.inst	0x7e11024d ; undefined
    5004:	02000000 	.inst	0x02000000 ; undefined
    5008:	0019c216 	.inst	0x0019c216 ; undefined
    500c:	024e0700 	.inst	0x024e0700 ; undefined
    5010:	00007e11 	udf	#32273
    5014:	ef160300 	.inst	0xef160300 ; undefined
    5018:	0700002a 	.inst	0x0700002a ; undefined
    501c:	7e11024f 	.inst	0x7e11024f ; undefined
    5020:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5024:	0022ca16 	.inst	0x0022ca16 ; NYI
    5028:	02500700 	.inst	0x02500700 ; undefined
    502c:	00007e11 	udf	#32273
    5030:	0c160500 	.inst	0x0c160500 ; undefined
    5034:	07000024 	.inst	0x07000024 ; undefined
    5038:	96110251 	bl	fffffffff844597c <_sp+0xffffffff9740597c>
    503c:	06000000 	.inst	0x06000000 ; undefined
    5040:	002eef16 	.inst	0x002eef16 ; NYI
    5044:	02520700 	.inst	0x02520700 ; undefined
    5048:	00007e11 	udf	#32273
    504c:	da160800 	.inst	0xda160800 ; undefined
    5050:	07000021 	.inst	0x07000021 ; undefined
    5054:	7e110253 	.inst	0x7e110253 ; undefined
    5058:	09000000 	.inst	0x09000000 ; undefined
    505c:	001a0a16 	.inst	0x001a0a16 ; undefined
    5060:	02540700 	.inst	0x02540700 ; undefined
    5064:	00007e11 	udf	#32273
    5068:	b3160a00 	.inst	0xb3160a00 ; undefined
    506c:	07000016 	.inst	0x07000016 ; undefined
    5070:	7e110255 	.inst	0x7e110255 ; undefined
    5074:	0b000000 	add	w0, w0, w0
    5078:	002d5616 	.inst	0x002d5616 ; NYI
    507c:	02560700 	.inst	0x02560700 ; undefined
    5080:	00007e11 	udf	#32273
    5084:	4a160c00 	eor	w0, w0, w22, lsl #3
    5088:	07000025 	.inst	0x07000025 ; undefined
    508c:	7e110257 	.inst	0x7e110257 ; undefined
    5090:	0d000000 	st1	{v0.b}[0], [x0]
    5094:	0019c716 	.inst	0x0019c716 ; undefined
    5098:	02580700 	.inst	0x02580700 ; undefined
    509c:	0000ae11 	udf	#44561
    50a0:	05161000 	mov	z0.b, p6/z, #-128
    50a4:	0700001e 	.inst	0x0700001e ; undefined
    50a8:	7e110259 	.inst	0x7e110259 ; undefined
    50ac:	14000000 	b	50ac <__stack_size+0x10ac>
    50b0:	002a8316 	.inst	0x002a8316 ; NYI
    50b4:	025a0700 	.inst	0x025a0700 ; undefined
    50b8:	00007e11 	udf	#32273
    50bc:	52161500 	eor	w0, w8, #0xfc00
    50c0:	0700001e 	.inst	0x0700001e ; undefined
    50c4:	7e11025b 	.inst	0x7e11025b ; undefined
    50c8:	16000000 	b	fffffffff80050c8 <_sp+0xffffffff96fc50c8>
    50cc:	001d6f16 	.inst	0x001d6f16 ; undefined
    50d0:	025c0700 	.inst	0x025c0700 ; undefined
    50d4:	00007e11 	udf	#32273
    50d8:	b5161700 	cbnz	x0, 313b8 <__stack_size+0x2d3b8>
    50dc:	0700001d 	.inst	0x0700001d ; undefined
    50e0:	7e11025d 	.inst	0x7e11025d ; undefined
    50e4:	18000000 	ldr	w0, 50e4 <__stack_size+0x10e4>
    50e8:	00285116 	.inst	0x00285116 ; NYI
    50ec:	025e0700 	.inst	0x025e0700 ; undefined
    50f0:	00007e11 	udf	#32273
    50f4:	26161900 	.inst	0x26161900 ; undefined
    50f8:	07000029 	.inst	0x07000029 ; undefined
    50fc:	7e11025f 	.inst	0x7e11025f ; undefined
    5100:	1a000000 	adc	w0, w0, w0
    5104:	001a1a16 	.inst	0x001a1a16 ; undefined
    5108:	02600700 	.inst	0x02600700 ; undefined
    510c:	00007e11 	udf	#32273
    5110:	93161b00 	.inst	0x93161b00 ; undefined
    5114:	07000023 	.inst	0x07000023 ; undefined
    5118:	7e110261 	.inst	0x7e110261 ; undefined
    511c:	1c000000 	ldr	s0, 511c <__stack_size+0x111c>
    5120:	002b7a16 	.inst	0x002b7a16 ; NYI
    5124:	02620700 	.inst	0x02620700 ; undefined
    5128:	00007e11 	udf	#32273
    512c:	ab161d00 	adds	x0, x8, x22, lsl #7
    5130:	0700002e 	.inst	0x0700002e ; undefined
    5134:	7e110263 	.inst	0x7e110263 ; undefined
    5138:	1e000000 	.inst	0x1e000000 ; undefined
    513c:	001ac216 	.inst	0x001ac216 ; undefined
    5140:	02640700 	.inst	0x02640700 ; undefined
    5144:	00007e11 	udf	#32273
    5148:	cd161f00 	.inst	0xcd161f00 ; undefined
    514c:	0700001f 	.inst	0x0700001f ; undefined
    5150:	7e110265 	.inst	0x7e110265 ; undefined
    5154:	20000000 	.inst	0x20000000 ; undefined
    5158:	00255416 	.inst	0x00255416 ; NYI
    515c:	02660700 	.inst	0x02660700 ; undefined
    5160:	00007e11 	udf	#32273
    5164:	42162100 	.inst	0x42162100 ; undefined
    5168:	0700002d 	.inst	0x0700002d ; undefined
    516c:	7e110267 	.inst	0x7e110267 ; undefined
    5170:	22000000 	.inst	0x22000000 ; undefined
    5174:	0017a616 	.inst	0x0017a616 ; undefined
    5178:	02680700 	.inst	0x02680700 ; undefined
    517c:	00007e11 	udf	#32273
    5180:	0a162300 	and	w0, w24, w22, lsl #8
    5184:	0700002f 	.inst	0x0700002f ; undefined
    5188:	7e110269 	.inst	0x7e110269 ; undefined
    518c:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
    5190:	00184916 	.inst	0x00184916 ; undefined
    5194:	026a0700 	.inst	0x026a0700 ; undefined
    5198:	00007e11 	udf	#32273
    519c:	9b162500 	madd	x0, x8, x22, x9
    51a0:	07000019 	.inst	0x07000019 ; undefined
    51a4:	7e11026b 	.inst	0x7e11026b ; undefined
    51a8:	26000000 	.inst	0x26000000 ; undefined
    51ac:	001fad16 	.inst	0x001fad16 ; undefined
    51b0:	026c0700 	.inst	0x026c0700 ; undefined
    51b4:	00007e11 	udf	#32273
    51b8:	45152700 	.inst	0x45152700 ; undefined
    51bc:	07004343 	.inst	0x07004343 ; undefined
    51c0:	7e11026d 	.inst	0x7e11026d ; undefined
    51c4:	28000000 	stnp	w0, w0, [x0]
    51c8:	002c9216 	.inst	0x002c9216 ; NYI
    51cc:	026e0700 	.inst	0x026e0700 ; undefined
    51d0:	00007e11 	udf	#32273
    51d4:	d9162900 	.inst	0xd9162900 ; undefined
    51d8:	07000029 	.inst	0x07000029 ; undefined
    51dc:	7e11026f 	.inst	0x7e11026f ; undefined
    51e0:	2a000000 	orr	w0, w0, w0
    51e4:	2e581100 	.inst	0x2e581100 ; undefined
    51e8:	70070000 	adr	x0, 131eb <__stack_size+0xf1eb>
    51ec:	1b8e0302 	.inst	0x1b8e0302 ; undefined
    51f0:	18120000 	ldr	w0, 291f0 <__stack_size+0x251f0>
    51f4:	09027507 	.inst	0x09027507 ; undefined
    51f8:	00001e43 	udf	#7747
    51fc:	001d9516 	.inst	0x001d9516 ; undefined
    5200:	02770700 	.inst	0x02770700 ; undefined
    5204:	00007e11 	udf	#32273
    5208:	3d160000 	str	b0, [x0, #1408]
    520c:	07000018 	.inst	0x07000018 ; undefined
    5210:	96110278 	bl	fffffffff8445bf0 <_sp+0xffffffff97405bf0>
    5214:	02000000 	.inst	0x02000000 ; undefined
    5218:	00214616 	.inst	0x00214616 ; NYI
    521c:	02790700 	.inst	0x02790700 ; undefined
    5220:	0000ae11 	udf	#44561
    5224:	e4160400 	.inst	0xe4160400 ; undefined
    5228:	07000022 	.inst	0x07000022 ; undefined
    522c:	7e11027a 	.inst	0x7e11027a ; undefined
    5230:	08000000 	stxrb	w0, w0, [x0]
    5234:	00291e16 	.inst	0x00291e16 ; NYI
    5238:	027b0700 	.inst	0x027b0700 ; undefined
    523c:	00007e11 	udf	#32273
    5240:	9e160900 	.inst	0x9e160900 ; undefined
    5244:	07000020 	.inst	0x07000020 ; undefined
    5248:	ae11027c 	.inst	0xae11027c ; undefined
    524c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    5250:	00299216 	.inst	0x00299216 ; NYI
    5254:	027d0700 	.inst	0x027d0700 ; undefined
    5258:	00007e11 	udf	#32273
    525c:	d2161000 	eor	x0, x0, #0x7c0000007c00
    5260:	07000019 	.inst	0x07000019 ; undefined
    5264:	9611027e 	bl	fffffffff8445c5c <_sp+0xffffffff97405c5c>
    5268:	12000000 	and	w0, w0, #0x1
    526c:	001aad16 	.inst	0x001aad16 ; undefined
    5270:	027f0700 	.inst	0x027f0700 ; undefined
    5274:	00007e11 	udf	#32273
    5278:	4a161400 	eor	w0, w0, w22, lsl #5
    527c:	07000025 	.inst	0x07000025 ; undefined
    5280:	7e110280 	.inst	0x7e110280 ; undefined
    5284:	15000000 	b	4005284 <__stack_size+0x4001284>
    5288:	1def1100 	.inst	0x1def1100 ; undefined
    528c:	81070000 	.inst	0x81070000 ; undefined
    5290:	1dac0302 	.inst	0x1dac0302 ; undefined
    5294:	58120000 	ldr	x0, 29294 <__stack_size+0x25294>
    5298:	09028607 	.inst	0x09028607 ; undefined
    529c:	00001eaf 	udf	#7855
    52a0:	00279f16 	.inst	0x00279f16 ; NYI
    52a4:	02880700 	.inst	0x02880700 ; undefined
    52a8:	001d9f0a 	.inst	0x001d9f0a ; undefined
    52ac:	03160000 	.inst	0x03160000 ; undefined
    52b0:	07000021 	.inst	0x07000021 ; undefined
    52b4:	430a0289 	.inst	0x430a0289 ; undefined
    52b8:	2c00001e 	stnp	s30, s0, [x0]
    52bc:	001e1816 	.inst	0x001e1816 ; undefined
    52c0:	028a0700 	.inst	0x028a0700 ; undefined
    52c4:	0000430c 	udf	#17164
    52c8:	f4164800 	.inst	0xf4164800 ; undefined
    52cc:	0700002a 	.inst	0x0700002a ; undefined
    52d0:	a20c028b 	.inst	0xa20c028b ; undefined
    52d4:	50000000 	adr	x0, 52d6 <__stack_size+0x12d6>
    52d8:	41435215 	.inst	0x41435215 ; undefined
    52dc:	028c0700 	.inst	0x028c0700 ; undefined
    52e0:	00008a0c 	udf	#35340
    52e4:	66165400 	.inst	0x66165400 ; undefined
    52e8:	0700002f 	.inst	0x0700002f ; undefined
    52ec:	720b028d 	ands	w13, w20, #0x200000
    52f0:	56000000 	.inst	0x56000000 ; undefined
    52f4:	22fc1100 	.inst	0x22fc1100 ; undefined
    52f8:	8e070000 	.inst	0x8e070000 ; undefined
    52fc:	1e500302 	.inst	0x1e500302 ; undefined
    5300:	de170000 	.inst	0xde170000 ; undefined
    5304:	07000025 	.inst	0x07000025 ; undefined
    5308:	af14033b 	.inst	0xaf14033b ; undefined
    530c:	1700001e 	b	fffffffffc005384 <_sp+0xffffffff9afc5384>
    5310:	00001bd4 	udf	#7124
    5314:	2b033c07 	adds	w7, w0, w3, lsl #15
    5318:	00001ed6 	udf	#7894
    531c:	1b890818 	.inst	0x1b890818 ; undefined
    5320:	31170000 	adds	w0, w0, #0x5c0
    5324:	07000029 	.inst	0x07000029 ; undefined
    5328:	d62b033d 	.inst	0xd62b033d ; undefined
    532c:	1700001e 	b	fffffffffc0053a4 <_sp+0xffffffff9afc53a4>
    5330:	0000303c 	udf	#12348
    5334:	1e033e07 	.inst	0x1e033e07 ; undefined
    5338:	0000013a 	udf	#314
    533c:	0000a219 	udf	#41497
    5340:	001f0600 	.inst	0x001f0600 ; undefined
    5344:	00351a00 	.inst	0x00351a00 ; NYI
    5348:	00030000 	.inst	0x00030000 ; undefined
    534c:	0016c317 	.inst	0x0016c317 ; undefined
    5350:	033f0700 	.inst	0x033f0700 ; undefined
    5354:	001ef611 	.inst	0x001ef611 ; undefined
    5358:	25c01700 	cmpge	p0.d, p5/z, z24.d, #0
    535c:	40070000 	.inst	0x40070000 ; undefined
    5360:	1ef61103 	.inst	0x1ef61103 ; undefined
    5364:	521b0000 	eor	w0, w0, #0x20
    5368:	07004143 	.inst	0x07004143 ; undefined
    536c:	a2110341 	.inst	0xa2110341 ; undefined
    5370:	1c000000 	ldr	s0, 5370 <__stack_size+0x1370>
    5374:	00001ebc 	udf	#7868
    5378:	090d2a01 	.inst	0x090d2a01 ; undefined
    537c:	007ee803 	.inst	0x007ee803 ; undefined
    5380:	00000061 	udf	#97
    5384:	1f061c00 	fmadd	s0, s0, s6, s7
    5388:	2b010000 	adds	w0, w0, w1
    538c:	4003090a 	.inst	0x4003090a ; undefined
    5390:	0061007f 	.inst	0x0061007f ; undefined
    5394:	1c000000 	ldr	s0, 5394 <__stack_size+0x1394>
    5398:	00001f13 	udf	#7955
    539c:	09162b01 	.inst	0x09162b01 ; undefined
    53a0:	007f5003 	.inst	0x007f5003 ; undefined
    53a4:	00000061 	udf	#97
    53a8:	1f201c00 	fnmadd	s0, s0, s0, s7
    53ac:	2b010000 	adds	w0, w0, w1
    53b0:	84030922 	ld1sb	{z2.s}, p2/z, [x9, z3.s, uxtw]
    53b4:	0061006e 	.inst	0x0061006e ; undefined
    53b8:	1c000000 	ldr	s0, 53b8 <__stack_size+0x13b8>
    53bc:	00001ee9 	udf	#7913
    53c0:	09172c01 	.inst	0x09172c01 ; undefined
    53c4:	007f6003 	.inst	0x007f6003 ; undefined
    53c8:	00000061 	udf	#97
    53cc:	2f661d00 	.inst	0x2f661d00 ; undefined
    53d0:	2d010000 	stp	s0, s0, [x0, #8]
    53d4:	0000a211 	udf	#41489
    53d8:	88030900 	stxr	w3, w0, [x8]
    53dc:	0061006e 	.inst	0x0061006e ; undefined
    53e0:	1c000000 	ldr	s0, 53e0 <__stack_size+0x13e0>
    53e4:	00001ec9 	udf	#7881
    53e8:	09242f01 	.inst	0x09242f01 ; undefined
    53ec:	006e9003 	.inst	0x006e9003 ; undefined
    53f0:	00000061 	udf	#97
    53f4:	1edc1c00 	.inst	0x1edc1c00 ; undefined
    53f8:	30010000 	adr	x0, 73f9 <__stack_size+0x33f9>
    53fc:	98030924 	ldrsw	x4, b520 <__stack_size+0x7520>
    5400:	0061006e 	.inst	0x0061006e ; undefined
    5404:	1e000000 	.inst	0x1e000000 ; undefined
    5408:	0000070a 	udf	#1802
    540c:	e1071008 	.inst	0xe1071008 ; undefined
    5410:	e100001f 	.inst	0xe100001f ; undefined
    5414:	1f00001f 	fmadd	s31, s0, s0, s0
    5418:	00001fe1 	udf	#8161
    541c:	001fe31f 	.inst	0x001fe31f ; undefined
    5420:	00291f00 	.inst	0x00291f00 ; NYI
    5424:	20000000 	.inst	0x20000000 ; undefined
    5428:	e9081808 	.inst	0xe9081808 ; undefined
    542c:	2100001f 	.inst	0x2100001f ; undefined
    5430:	0016061e 	.inst	0x0016061e ; undefined
    5434:	0a170600 	and	w0, w16, w23, lsl #1
    5438:	000000a2 	udf	#162
    543c:	00002000 	udf	#8192
    5440:	0020001f 	.inst	0x0020001f ; NYI
    5444:	08180000 	stxrb	w24, w0, [x0]
    5448:	0000012e 	udf	#302
    544c:	0016181e 	.inst	0x0016181e ; undefined
    5450:	0a150600 	and	w0, w16, w21, lsl #1
    5454:	000000a2 	udf	#162
    5458:	0000201c 	udf	#8220
    545c:	0020001f 	.inst	0x0020001f ; NYI
    5460:	8f1e0000 	.inst	0x8f1e0000 ; undefined
    5464:	06000016 	.inst	0x06000016 ; undefined
    5468:	00a20a14 	.inst	0x00a20a14 ; undefined
    546c:	20370000 	.inst	0x20370000 ; undefined
    5470:	001f0000 	.inst	0x001f0000 ; undefined
    5474:	1f000020 	fmadd	s0, s1, s0, s0
    5478:	000000e0 	udf	#224
    547c:	07911e00 	.inst	0x07911e00 ; undefined
    5480:	14090000 	b	245480 <__stack_size+0x241480>
    5484:	00006b05 	udf	#27397
    5488:	00204e00 	.inst	0x00204e00 ; NYI
    548c:	204e1f00 	.inst	0x204e1f00 ; undefined
    5490:	00220000 	.inst	0x00220000 ; NYI
    5494:	00cf0818 	.inst	0x00cf0818 ; undefined
    5498:	bb230000 	.inst	0xbb230000 ; undefined
    549c:	01000022 	.inst	0x01000022 ; undefined
    54a0:	d40501c9 	.inst	0xd40501c9 ; undefined
    54a4:	00000000 	udf	#0
    54a8:	00610045 	.inst	0x00610045 ; undefined
    54ac:	b4000000 	cbz	x0, 54ac <__stack_size+0x14ac>
    54b0:	0000000b 	udf	#11
    54b4:	01000000 	.inst	0x01000000 ; undefined
    54b8:	0020a89c 	.inst	0x0020a89c ; NYI
    54bc:	181d2400 	ldr	w0, 3f93c <__stack_size+0x3b93c>
    54c0:	c9010000 	.inst	0xc9010000 ; undefined
    54c4:	20a82101 	.inst	0x20a82101 ; undefined
    54c8:	91020000 	add	x0, x0, #0x80
    54cc:	155d2568 	b	574ea6c <__stack_size+0x574aa6c>
    54d0:	cb010000 	sub	x0, x0, x1
    54d4:	00d40901 	.inst	0x00d40901 ; undefined
    54d8:	91020000 	add	x0, x0, #0x80
    54dc:	6d74267c 	ldp	d28, d9, [x19, #-192]
    54e0:	cc010070 	.inst	0xcc010070 ; undefined
    54e4:	00720d01 	.inst	0x00720d01 ; undefined
    54e8:	91020000 	add	x0, x0, #0x80
    54ec:	0818007b 	stxrb	w24, w27, [x3]
    54f0:	00001eaf 	udf	#7855
    54f4:	001fb823 	.inst	0x001fb823 ; undefined
    54f8:	01810100 	.inst	0x01810100 ; undefined
    54fc:	0000d405 	udf	#54277
    5500:	00425c00 	.inst	0x00425c00 ; undefined
    5504:	00000061 	udf	#97
    5508:	0002a400 	.inst	0x0002a400 ; undefined
    550c:	00000000 	udf	#0
    5510:	2e9c0100 	.inst	0x2e9c0100 ; undefined
    5514:	27000021 	.inst	0x27000021 ; undefined
    5518:	00727470 	.inst	0x00727470 ; undefined
    551c:	3d018101 	str	b1, [x8, #96]
    5520:	00001ed6 	udf	#7894
    5524:	25589102 	cmpeq	p2.h, p4/z, z8.h, #-8
    5528:	0000155d 	udf	#5469
    552c:	0e018301 	.inst	0x0e018301 ; undefined
    5530:	000000a2 	udf	#162
    5534:	267c9102 	.inst	0x267c9102 ; undefined
    5538:	01003172 	.inst	0x01003172 ; undefined
    553c:	602f0184 	.inst	0x602f0184 ; undefined
    5540:	0200000c 	.inst	0x0200000c ; undefined
    5544:	72267891 	ands	w17, w4, #0xfdffffff
    5548:	85010032 	.inst	0x85010032 ; undefined
    554c:	0eb13301 	ssubw	v1.2d, v24.2d, v17.2s
    5550:	91020000 	add	x0, x0, #0x80
    5554:	33722670 	.inst	0x33722670 ; undefined
    5558:	01860100 	.inst	0x01860100 ; undefined
    555c:	000c602f 	.inst	0x000c602f ; undefined
    5560:	68910200 	stgp	x0, x0, [x16], #544
    5564:	00347226 	.inst	0x00347226 ; NYI
    5568:	23018701 	.inst	0x23018701 ; undefined
    556c:	00001069 	udf	#4201
    5570:	00609102 	.inst	0x00609102 ; undefined
    5574:	001a2a23 	.inst	0x001a2a23 ; undefined
    5578:	01330100 	.inst	0x01330100 ; undefined
    557c:	0000d405 	udf	#54277
    5580:	003e5000 	.inst	0x003e5000 ; NYI
    5584:	00000061 	udf	#97
    5588:	00040c00 	.inst	0x00040c00 ; undefined
    558c:	00000000 	udf	#0
    5590:	919c0100 	addg	x0, x8, #0x1c0, #0x0
    5594:	27000021 	.inst	0x27000021 ; undefined
    5598:	00727470 	.inst	0x00727470 ; undefined
    559c:	41013301 	.inst	0x41013301 ; undefined
    55a0:	00001ed6 	udf	#7894
    55a4:	24689102 	cmphs	p2.h, p4/z, z8.h, #34
    55a8:	000029d4 	udf	#10708
    55ac:	4f013301 	.inst	0x4f013301 ; undefined
    55b0:	000000a2 	udf	#162
    55b4:	25649102 	.inst	0x25649102 ; undefined
    55b8:	0000155d 	udf	#5469
    55bc:	09013501 	.inst	0x09013501 ; undefined
    55c0:	000000d4 	udf	#212
    55c4:	267c9102 	.inst	0x267c9102 ; undefined
    55c8:	01003172 	.inst	0x01003172 ; undefined
    55cc:	c0270136 	.inst	0xc0270136 ; undefined
    55d0:	02000007 	.inst	0x02000007 ; undefined
    55d4:	23007891 	.inst	0x23007891 ; undefined
    55d8:	0000172d 	udf	#5933
    55dc:	05010701 	orr	z1.b, z1.b, #0x11
    55e0:	000000d4 	udf	#212
    55e4:	61003cd4 	.inst	0x61003cd4 ; undefined
    55e8:	00000000 	udf	#0
    55ec:	0000017c 	udf	#380
    55f0:	00000000 	udf	#0
    55f4:	22029c01 	.inst	0x22029c01 ; undefined
    55f8:	70270000 	adr	x0, 535fb <__stack_size+0x4f5fb>
    55fc:	01007274 	.inst	0x01007274 ; undefined
    5600:	d63c0107 	.inst	0xd63c0107 ; undefined
    5604:	0200001e 	.inst	0x0200001e ; undefined
    5608:	5d255891 	.inst	0x5d255891 ; undefined
    560c:	01000015 	.inst	0x01000015 ; undefined
    5610:	d4090109 	.inst	0xd4090109 ; undefined
    5614:	02000000 	.inst	0x02000000 ; undefined
    5618:	72267c91 	.inst	0x72267c91 ; undefined
    561c:	0a010031 	and	w17, w1, w1
    5620:	06a33701 	.inst	0x06a33701 ; undefined
    5624:	91020000 	add	x0, x0, #0x80
    5628:	32722678 	.inst	0x32722678 ; undefined
    562c:	010b0100 	.inst	0x010b0100 ; undefined
    5630:	0007c027 	.inst	0x0007c027 ; undefined
    5634:	70910200 	adr	x0, fffffffffff27677 <_sp+0xffffffff9eee7677>
    5638:	00337226 	.inst	0x00337226 ; NYI
    563c:	23010c01 	.inst	0x23010c01 ; undefined
    5640:	00001069 	udf	#4201
    5644:	00689102 	.inst	0x00689102 ; undefined
    5648:	00203f28 	.inst	0x00203f28 ; NYI
    564c:	05e50100 	.inst	0x05e50100 ; undefined
    5650:	000000d4 	udf	#212
	...
    565c:	000000cc 	udf	#204
    5660:	00000000 	udf	#0
    5664:	225f9c01 	.inst	0x225f9c01 ; undefined
    5668:	70290000 	adr	x0, 5766b <__stack_size+0x5366b>
    566c:	01007274 	.inst	0x01007274 ; undefined
    5670:	1ed63ce5 	.inst	0x1ed63ce5 ; undefined
    5674:	91020000 	add	x0, x0, #0x80
    5678:	155d1d58 	b	574cbd8 <__stack_size+0x5748bd8>
    567c:	e7010000 	.inst	0xe7010000 ; undefined
    5680:	0000d409 	udf	#54281
    5684:	7c910200 	.inst	0x7c910200 ; undefined
    5688:	0031722a 	.inst	0x0031722a ; NYI
    568c:	5515e801 	.inst	0x5515e801 ; undefined
    5690:	02000013 	.inst	0x02000013 ; undefined
    5694:	722a7091 	ands	w17, w4, #0xffc7ffff
    5698:	e9010032 	.inst	0xe9010032 ; undefined
    569c:	0011df15 	.inst	0x0011df15 ; undefined
    56a0:	68910200 	stgp	x0, x0, [x16], #544
    56a4:	25e92b00 	.inst	0x25e92b00 ; undefined
    56a8:	dd010000 	.inst	0xdd010000 ; undefined
    56ac:	00000006 	udf	#6
    56b0:	00000000 	udf	#0
    56b4:	00005000 	udf	#20480
    56b8:	00000000 	udf	#0
    56bc:	9a9c0100 	csel	x0, x8, x28, eq  // eq = none
    56c0:	29000022 	stp	w2, w0, [x1]
    56c4:	00727470 	.inst	0x00727470 ; undefined
    56c8:	d63ddd01 	.inst	0xd63ddd01 ; undefined
    56cc:	0200001e 	.inst	0x0200001e ; undefined
    56d0:	722a6891 	ands	w17, w4, #0xffc1ffff
    56d4:	2edf0100 	.inst	0x2edf0100 ; undefined
    56d8:	00000a0b 	udf	#2571
    56dc:	00789102 	.inst	0x00789102 ; undefined
    56e0:	0018f528 	.inst	0x0018f528 ; undefined
    56e4:	05d00100 	mov	z0.d, p0/z, #8
    56e8:	000000d4 	udf	#212
    56ec:	61003c50 	.inst	0x61003c50 ; undefined
    56f0:	00000000 	udf	#0
    56f4:	00000084 	udf	#132
    56f8:	00000000 	udf	#0
    56fc:	22d99c01 	.inst	0x22d99c01 ; undefined
    5700:	70290000 	adr	x0, 57703 <__stack_size+0x53703>
    5704:	01007274 	.inst	0x01007274 ; undefined
    5708:	1ed63ad0 	.inst	0x1ed63ad0 ; undefined
    570c:	91020000 	add	x0, x0, #0x80
    5710:	00722a68 	.inst	0x00722a68 ; undefined
    5714:	cc2cd201 	.inst	0xcc2cd201 ; undefined
    5718:	02000007 	.inst	0x02000007 ; undefined
    571c:	28007891 	stnp	w17, w30, [x4]
    5720:	0000245e 	udf	#9310
    5724:	d405bf01 	svc	#0x2df8
	...
    5730:	c4000000 	ld1sb	{z0.d}, p0/z, [x0, z0.d, uxtw]
    5734:	00000000 	udf	#0
    5738:	01000000 	.inst	0x01000000 ; undefined
    573c:	0023189c 	.inst	0x0023189c ; NYI
    5740:	74702900 	.inst	0x74702900 ; undefined
    5744:	bf010072 	.inst	0xbf010072 ; undefined
    5748:	001ed648 	.inst	0x001ed648 ; undefined
    574c:	68910200 	stgp	x0, x0, [x16], #544
    5750:	0100722a 	.inst	0x0100722a ; undefined
    5754:	0a0b2ec1 	and	w1, w22, w11, lsl #11
    5758:	91020000 	add	x0, x0, #0x80
    575c:	d9280078 	.inst	0xd9280078 ; undefined
    5760:	01000023 	.inst	0x01000023 ; undefined
    5764:	00d405ab 	.inst	0x00d405ab ; undefined
	...
    5770:	00d00000 	.inst	0x00d00000 ; undefined
    5774:	00000000 	udf	#0
    5778:	9c010000 	ldr	q0, 7778 <__stack_size+0x3778>
    577c:	00002357 	udf	#9047
    5780:	72747029 	.inst	0x72747029 ; undefined
    5784:	42ab0100 	.inst	0x42ab0100 ; undefined
    5788:	00001ed6 	udf	#7894
    578c:	2a689102 	.inst	0x2a689102 ; undefined
    5790:	ad010072 	stp	q18, q0, [x3, #32]
    5794:	000a0b2e 	.inst	0x000a0b2e ; undefined
    5798:	78910200 	ldursh	x0, [x16, #-240]
    579c:	28722800 	ldnp	w0, w10, [x0, #-112]
    57a0:	9a010000 	adc	x0, x0, x1
    57a4:	0000d405 	udf	#54277
	...
    57b0:	0000c400 	udf	#50176
    57b4:	00000000 	udf	#0
    57b8:	969c0100 	bl	fffffffffa705bb8 <_sp+0xffffffff996c5bb8>
    57bc:	29000023 	stp	w3, w0, [x1]
    57c0:	00727470 	.inst	0x00727470 ; undefined
    57c4:	d63a9a01 	.inst	0xd63a9a01 ; undefined
    57c8:	0200001e 	.inst	0x0200001e ; undefined
    57cc:	722a6891 	ands	w17, w4, #0xffc1ffff
    57d0:	2e9c0100 	.inst	0x2e9c0100 ; undefined
    57d4:	00000a0b 	udf	#2571
    57d8:	00789102 	.inst	0x00789102 ; undefined
    57dc:	00212f28 	.inst	0x00212f28 ; NYI
    57e0:	05890100 	.inst	0x05890100 ; undefined
    57e4:	000000d4 	udf	#212
    57e8:	61003b8c 	.inst	0x61003b8c ; undefined
    57ec:	00000000 	udf	#0
    57f0:	000000c4 	udf	#196
    57f4:	00000000 	udf	#0
    57f8:	23d59c01 	.inst	0x23d59c01 ; undefined
    57fc:	70290000 	adr	x0, 577ff <__stack_size+0x537ff>
    5800:	01007274 	.inst	0x01007274 ; undefined
    5804:	1ed63f89 	.inst	0x1ed63f89 ; undefined
    5808:	91020000 	add	x0, x0, #0x80
    580c:	00722a68 	.inst	0x00722a68 ; undefined
    5810:	0b2e8b01 	add	w1, w24, w14, sxtb #2
    5814:	0200000a 	.inst	0x0200000a ; undefined
    5818:	28007891 	stnp	w17, w30, [x4]
    581c:	00001807 	udf	#6151
    5820:	d4057801 	svc	#0x2bc0
    5824:	c8000000 	stxr	w0, x0, [x0]
    5828:	0061003a 	.inst	0x0061003a ; undefined
    582c:	c4000000 	ld1sb	{z0.d}, p0/z, [x0, z0.d, uxtw]
    5830:	00000000 	udf	#0
    5834:	01000000 	.inst	0x01000000 ; undefined
    5838:	0024149c 	.inst	0x0024149c ; NYI
    583c:	74702900 	.inst	0x74702900 ; undefined
    5840:	78010072 	sturh	w18, [x3, #16]
    5844:	001ed63e 	.inst	0x001ed63e ; undefined
    5848:	68910200 	stgp	x0, x0, [x16], #544
    584c:	0100722a 	.inst	0x0100722a ; undefined
    5850:	0a0b2e7a 	and	w26, w19, w11, lsl #11
    5854:	91020000 	add	x0, x0, #0x80
    5858:	1a2b0078 	.inst	0x1a2b0078 ; undefined
    585c:	0100002d 	.inst	0x0100002d ; undefined
    5860:	3a60066e 	.inst	0x3a60066e ; undefined
    5864:	00006100 	udf	#24832
    5868:	00680000 	.inst	0x00680000 ; undefined
    586c:	00000000 	udf	#0
    5870:	9c010000 	ldr	q0, 7870 <__stack_size+0x3870>
    5874:	0000245c 	udf	#9308
    5878:	01007229 	.inst	0x01007229 ; undefined
    587c:	0a0b446e 	and	w14, w3, w11, lsl #17
    5880:	91020000 	add	x0, x0, #0x80
    5884:	00692a68 	.inst	0x00692a68 ; undefined
    5888:	a20e7001 	.inst	0xa20e7001 ; undefined
    588c:	02000000 	.inst	0x02000000 ; undefined
    5890:	201d7c91 	.inst	0x201d7c91 ; undefined
    5894:	0100001f 	.inst	0x0100001f ; undefined
    5898:	00a20e71 	.inst	0x00a20e71 ; undefined
    589c:	91020000 	add	x0, x0, #0x80
    58a0:	192c0078 	.inst	0x192c0078 ; undefined
    58a4:	01000022 	.inst	0x01000022 ; undefined
    58a8:	38380d3d 	.inst	0x38380d3d ; undefined
    58ac:	00006100 	udf	#24832
    58b0:	02280000 	.inst	0x02280000 ; undefined
    58b4:	00000000 	udf	#0
    58b8:	9c010000 	ldr	q0, 78b8 <__stack_size+0x38b8>
    58bc:	0000248a 	udf	#9354
    58c0:	0018c92d 	.inst	0x0018c92d ; undefined
    58c4:	273d0100 	.inst	0x273d0100 ; undefined
    58c8:	000000a2 	udf	#162
    58cc:	007c9102 	.inst	0x007c9102 ; undefined
    58d0:	002f502e 	.inst	0x002f502e ; NYI
    58d4:	0d380100 	.inst	0x0d380100 ; undefined
    58d8:	61003814 	.inst	0x61003814 ; undefined
    58dc:	00000000 	udf	#0
    58e0:	00000024 	udf	#36
    58e4:	00000000 	udf	#0
    58e8:	24c79c01 	cmpge	p1.d, p7/z, z0.d, z7.d
    58ec:	572d0000 	.inst	0x572d0000 ; undefined
    58f0:	01000018 	.inst	0x01000018 ; undefined
    58f4:	00352538 	.inst	0x00352538 ; NYI
    58f8:	91020000 	add	x0, x0, #0x80
    58fc:	1b502d78 	.inst	0x1b502d78 ; undefined
    5900:	38010000 	sturb	w0, [x0, #16]
    5904:	0000d436 	udf	#54326
    5908:	74910200 	.inst	0x74910200 ; undefined
    590c:	1e812f00 	.inst	0x1e812f00 ; undefined
    5910:	33010000 	bfi	w0, w0, #31, #1
    5914:	0000b315 	udf	#45845
    5918:	0037fc00 	.inst	0x0037fc00 ; NYI
    591c:	00000061 	udf	#97
    5920:	00001800 	udf	#6144
    5924:	00000000 	udf	#0
    5928:	2d9c0100 	stp	s0, s0, [x8, #224]!
    592c:	00001857 	udf	#6231
    5930:	352c3301 	cbnz	w1, 5df90 <__stack_size+0x59f90>
    5934:	02000000 	.inst	0x02000000 ; undefined
    5938:	00007891 	udf	#30865
    593c:	0000239e 	udf	#9118
    5940:	13e50004 	.inst	0x13e50004 ; undefined
    5944:	01080000 	.inst	0x01080000 ; undefined
    5948:	00000220 	udf	#544
    594c:	002ff70c 	.inst	0x002ff70c ; NYI
    5950:	00002f00 	udf	#12032
    5954:	00093000 	.inst	0x00093000 ; undefined
	...
    5960:	002c4200 	.inst	0x002c4200 ; NYI
    5964:	07080200 	.inst	0x07080200 ; undefined
    5968:	0000017c 	udf	#380
    596c:	cb050802 	sub	x2, x0, x5, lsl #2
    5970:	03000001 	.inst	0x03000001 ; undefined
    5974:	0000071b 	udf	#1819
    5978:	29171602 	stp	w2, w5, [x16, #184]
    597c:	02000000 	.inst	0x02000000 ; undefined
    5980:	01460510 	.inst	0x01460510 ; undefined
    5984:	10020000 	adr	x0, 9984 <__stack_size+0x5984>
    5988:	00010007 	.inst	0x00010007 ; undefined
    598c:	06010200 	.inst	0x06010200 ; undefined
    5990:	00000114 	udf	#276
    5994:	d4050202 	hvc	#0x2810
    5998:	04000001 	add	z1.b, p0/m, z1.b, z0.b
    599c:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    59a0:	64030074 	.inst	0x64030074 ; undefined
    59a4:	03000007 	.inst	0x03000007 ; undefined
    59a8:	00771759 	.inst	0x00771759 ; undefined
    59ac:	66050000 	.inst	0x66050000 ; undefined
    59b0:	02000000 	.inst	0x02000000 ; undefined
    59b4:	01120801 	.inst	0x01120801 ; undefined
    59b8:	2b030000 	adds	w0, w0, w3
    59bc:	03000013 	.inst	0x03000013 ; undefined
    59c0:	008f185a 	.inst	0x008f185a ; undefined
    59c4:	7e050000 	.inst	0x7e050000 ; undefined
    59c8:	02000000 	.inst	0x02000000 ; undefined
    59cc:	01330702 	.inst	0x01330702 ; undefined
    59d0:	db030000 	.inst	0xdb030000 ; undefined
    59d4:	03000008 	.inst	0x03000008 ; undefined
    59d8:	00a7165b 	.inst	0x00a7165b ; undefined
    59dc:	96050000 	bl	fffffffff81459dc <_sp+0xffffffff971059dc>
    59e0:	02000000 	.inst	0x02000000 ; undefined
    59e4:	01810704 	.inst	0x01810704 ; undefined
    59e8:	a7050000 	.inst	0xa7050000 ; undefined
    59ec:	02000000 	.inst	0x02000000 ; undefined
    59f0:	01c60508 	.inst	0x01c60508 ; undefined
    59f4:	08020000 	stxrb	w2, w0, [x0]
    59f8:	00017707 	.inst	0x00017707 ; undefined
    59fc:	36750600 	tbz	w0, #14, fffffffffffffabc <_sp+0xffffffff9efbfabc>
    5a00:	08040034 	stxrb	w4, w20, [x1]
    5a04:	0000ba1c 	udf	#47644
    5a08:	165a0700 	b	fffffffff9687608 <_sp+0xffffffff98647608>
    5a0c:	04200000 	add	z0.b, z0.b, z0.b
    5a10:	010f100a 	.inst	0x010f100a ; undefined
    5a14:	74080000 	.inst	0x74080000 ; undefined
    5a18:	04000016 	add	z22.b, p0/m, z22.b, z0.b
    5a1c:	00c10d0b 	.inst	0x00c10d0b ; undefined
    5a20:	08000000 	stxrb	w0, w0, [x0]
    5a24:	0000167f 	udf	#5759
    5a28:	c10d0c04 	.inst	0xc10d0c04 ; undefined
    5a2c:	08000000 	stxrb	w0, w0, [x0]
    5a30:	00161f08 	.inst	0x00161f08 ; undefined
    5a34:	0d0d0400 	.inst	0x0d0d0400 ; undefined
    5a38:	000000c1 	udf	#193
    5a3c:	160d0810 	b	fffffffff8347a7c <_sp+0xffffffff97307a7c>
    5a40:	0e040000 	tbl	v0.8b, {v0.16b}, v4.8b
    5a44:	00009612 	udf	#38418
    5a48:	03001800 	.inst	0x03001800 ; undefined
    5a4c:	0000165b 	udf	#5723
    5a50:	cd020f04 	.inst	0xcd020f04 ; undefined
    5a54:	05000000 	orr	z0.s, z0.s, #0x1
    5a58:	0000010f 	udf	#271
    5a5c:	1b080102 	madd	w2, w8, w8, w0
    5a60:	09000001 	.inst	0x09000001 ; undefined
    5a64:	00000120 	udf	#288
    5a68:	32337506 	orr	w6, w8, #0xffffe7ff
    5a6c:	16340500 	b	fffffffff8d06e6c <_sp+0xffffffff97cc6e6c>
    5a70:	000000a7 	udf	#167
    5a74:	a704070a 	.inst	0xa704070a ; undefined
    5a78:	06000000 	.inst	0x06000000 ; undefined
    5a7c:	01b90d08 	.inst	0x01b90d08 ; undefined
    5a80:	ba0b0000 	adcs	x0, x0, x11
    5a84:	00000023 	udf	#35
    5a88:	0023cd0b 	.inst	0x0023cd0b ; NYI
    5a8c:	a90b0100 	stp	x0, x0, [x8, #176]
    5a90:	02000019 	.inst	0x02000019 ; undefined
    5a94:	0024e20b 	.inst	0x0024e20b ; NYI
    5a98:	650b0300 	.inst	0x650b0300 ; undefined
    5a9c:	0400001e 	add	z30.b, p0/m, z30.b, z0.b
    5aa0:	002e350b 	.inst	0x002e350b ; NYI
    5aa4:	8a0b0500 	and	x0, x8, x11, lsl #1
    5aa8:	0600001e 	.inst	0x0600001e ; undefined
    5aac:	00234c0b 	.inst	0x00234c0b ; NYI
    5ab0:	fc0b0700 	str	d0, [x24], #176
    5ab4:	0800002b 	stxrb	w0, w11, [x1]
    5ab8:	0017960b 	.inst	0x0017960b ; undefined
    5abc:	aa0b0900 	orr	x0, x8, x11, lsl #2
    5ac0:	0a00001e 	and	w30, w0, w0
    5ac4:	001fe10b 	.inst	0x001fe10b ; undefined
    5ac8:	070b0b00 	.inst	0x070b0b00 ; undefined
    5acc:	0c000019 	st4	{v25.8b-v28.8b}, [x0]
    5ad0:	001b2f0b 	.inst	0x001b2f0b ; undefined
    5ad4:	5c0b0d00 	ldr	d0, 1bc74 <__stack_size+0x17c74>
    5ad8:	0e000023 	tbl	v3.8b, {v1.16b}, v0.8b
    5adc:	001ab50b 	.inst	0x001ab50b ; undefined
    5ae0:	fa0b0f00 	.inst	0xfa0b0f00 ; undefined
    5ae4:	10000026 	adr	x6, 5ae8 <__stack_size+0x1ae8>
    5ae8:	001e2f0b 	.inst	0x001e2f0b ; undefined
    5aec:	2e0b1100 	ext	v0.8b, v8.8b, v11.8b, #2
    5af0:	12000020 	and	w0, w1, #0x1
    5af4:	06040c00 	.inst	0x06040c00 ; undefined
    5af8:	0203026d 	.inst	0x0203026d ; undefined
    5afc:	930d0000 	.inst	0x930d0000 ; undefined
    5b00:	06000018 	.inst	0x06000018 ; undefined
    5b04:	00a2116e 	.inst	0x00a2116e ; undefined
    5b08:	0c040000 	.inst	0x0c040000 ; undefined
    5b0c:	bc0d0014 	stur	s20, [x0, #208]
    5b10:	0600001e 	.inst	0x0600001e ; undefined
    5b14:	00a2116f 	.inst	0x00a2116f ; undefined
    5b18:	03040000 	.inst	0x03040000 ; undefined
    5b1c:	010d0011 	.inst	0x010d0011 ; undefined
    5b20:	06000017 	.inst	0x06000017 ; undefined
    5b24:	00a21170 	.inst	0x00a21170 ; undefined
    5b28:	01040000 	.inst	0x01040000 ; undefined
    5b2c:	ef0d0010 	.inst	0xef0d0010 ; undefined
    5b30:	0600002b 	.inst	0x0600002b ; undefined
    5b34:	00a21171 	.inst	0x00a21171 ; undefined
    5b38:	10040000 	adr	x0, db38 <__stack_size+0x9b38>
    5b3c:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    5b40:	096a0604 	.inst	0x096a0604 ; undefined
    5b44:	00000225 	udf	#549
    5b48:	3233640f 	orr	w15, w0, #0xffffe07f
    5b4c:	106c0600 	adr	x0, ddc0c <__stack_size+0xd9c0c>
    5b50:	000000a2 	udf	#162
    5b54:	7469620f 	.inst	0x7469620f ; undefined
    5b58:	03720600 	.inst	0x03720600 ; undefined
    5b5c:	000001b9 	udf	#441
    5b60:	19df0300 	ldapursb	w0, [x24, #-16]
    5b64:	73060000 	.inst	0x73060000 ; undefined
    5b68:	00020302 	.inst	0x00020302 ; undefined
    5b6c:	02250500 	.inst	0x02250500 ; undefined
    5b70:	040c0000 	sabd	z0.b, p0/m, z0.b, z0.b
    5b74:	50057806 	adr	x6, 10a76 <__stack_size+0xca76>
    5b78:	0d000003 	st1	{v3.b}[0], [x0]
    5b7c:	0000227b 	udf	#8827
    5b80:	a2147906 	.inst	0xa2147906 ; undefined
    5b84:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5b88:	0d001f01 	st1	{v1.b}[7], [x24]
    5b8c:	00001957 	udf	#6487
    5b90:	a2147a06 	.inst	0xa2147a06 ; undefined
    5b94:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5b98:	0d001e01 	st1	{v1.b}[7], [x16]
    5b9c:	00002b02 	udf	#11010
    5ba0:	a2147b06 	.inst	0xa2147b06 ; undefined
    5ba4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5ba8:	0d001c02 	st1	{v2.b}[7], [x0]
    5bac:	00001de1 	udf	#7649
    5bb0:	a2147c06 	.inst	0xa2147c06 ; undefined
    5bb4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5bb8:	0d001b01 	st1	{v1.b}[6], [x24]
    5bbc:	00002cc5 	udf	#11461
    5bc0:	a2147d06 	.inst	0xa2147d06 ; undefined
    5bc4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5bc8:	0d001a01 	st1	{v1.b}[6], [x16]
    5bcc:	000025d4 	udf	#9684
    5bd0:	a2147e06 	.inst	0xa2147e06 ; undefined
    5bd4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5bd8:	0d001901 	st1	{v1.b}[6], [x8]
    5bdc:	00002c70 	udf	#11376
    5be0:	a2147f06 	.inst	0xa2147f06 ; undefined
    5be4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5be8:	0d001801 	st1	{v1.b}[6], [x0]
    5bec:	00002c5f 	udf	#11359
    5bf0:	a2148006 	.inst	0xa2148006 ; undefined
    5bf4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5bf8:	0d001701 	st1	{v1.b}[5], [x24]
    5bfc:	000027ca 	udf	#10186
    5c00:	a2148106 	.inst	0xa2148106 ; undefined
    5c04:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c08:	0d001007 	st1	{v7.b}[4], [x0]
    5c0c:	000027fd 	udf	#10237
    5c10:	a2178206 	.inst	0xa2178206 ; undefined
    5c14:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c18:	0d000e02 	st1	{v2.b}[3], [x16]
    5c1c:	00001720 	udf	#5920
    5c20:	a2148306 	.inst	0xa2148306 ; undefined
    5c24:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c28:	0d000d01 	st1	{v1.b}[3], [x8]
    5c2c:	00002a4c 	udf	#10828
    5c30:	a2148406 	.inst	0xa2148406 ; undefined
    5c34:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c38:	0d000c01 	st1	{v1.b}[3], [x0]
    5c3c:	00001944 	udf	#6468
    5c40:	a2148506 	.inst	0xa2148506 ; undefined
    5c44:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c48:	0d000b01 	st1	{v1.b}[2], [x24]
    5c4c:	00001d55 	udf	#7509
    5c50:	a2148606 	.inst	0xa2148606 ; undefined
    5c54:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c58:	0d000a01 	st1	{v1.b}[2], [x16]
    5c5c:	00001778 	udf	#6008
    5c60:	a2148706 	.inst	0xa2148706 ; undefined
    5c64:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c68:	0d000802 	st1	{v2.b}[2], [x0]
    5c6c:	000023a5 	udf	#9125
    5c70:	a2148806 	.inst	0xa2148806 ; undefined
    5c74:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c78:	0d000206 	st1	{v6.b}[0], [x16]
    5c7c:	00002182 	udf	#8578
    5c80:	a2148906 	.inst	0xa2148906 ; undefined
    5c84:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5c88:	00000002 	udf	#2
    5c8c:	7506040e 	.inst	0x7506040e ; undefined
    5c90:	00037209 	.inst	0x00037209 ; undefined
    5c94:	33640f00 	.inst	0x33640f00 ; undefined
    5c98:	77060032 	.inst	0x77060032 ; undefined
    5c9c:	0000a213 	udf	#41491
    5ca0:	69620f00 	ldpsw	x0, x3, [x24, #-240]
    5ca4:	8a060074 	and	x20, x3, x6
    5ca8:	00023606 	.inst	0x00023606 ; undefined
    5cac:	a3030000 	.inst	0xa3030000 ; undefined
    5cb0:	0600001c 	.inst	0x0600001c ; undefined
    5cb4:	0350028b 	.inst	0x0350028b ; undefined
    5cb8:	72050000 	ands	w0, w0, #0x8000000
    5cbc:	0c000003 	st4	{v3.8b-v6.8b}, [x0]
    5cc0:	02900604 	.inst	0x02900604 ; undefined
    5cc4:	000004fd 	udf	#1277
    5cc8:	0017b70d 	.inst	0x0017b70d ; undefined
    5ccc:	10910600 	adr	x0, fffffffffff27d8c <_sp+0xffffffff9eee7d8c>
    5cd0:	000000a2 	udf	#162
    5cd4:	001f0104 	.inst	0x001f0104 ; undefined
    5cd8:	0024b70d 	.inst	0x0024b70d ; NYI
    5cdc:	10920600 	adr	x0, fffffffffff29d9c <_sp+0xffffffff9eee9d9c>
    5ce0:	000000a2 	udf	#162
    5ce4:	001e0104 	.inst	0x001e0104 ; undefined
    5ce8:	002efa0d 	.inst	0x002efa0d ; NYI
    5cec:	10930600 	adr	x0, fffffffffff2bdac <_sp+0xffffffff9eeebdac>
    5cf0:	000000a2 	udf	#162
    5cf4:	001d0104 	.inst	0x001d0104 ; undefined
    5cf8:	002b9e0d 	.inst	0x002b9e0d ; NYI
    5cfc:	10940600 	adr	x0, fffffffffff2ddbc <_sp+0xffffffff9eeeddbc>
    5d00:	000000a2 	udf	#162
    5d04:	001c0104 	.inst	0x001c0104 ; undefined
    5d08:	0024c70d 	.inst	0x0024c70d ; NYI
    5d0c:	10950600 	adr	x0, fffffffffff2fdcc <_sp+0xffffffff9eeefdcc>
    5d10:	000000a2 	udf	#162
    5d14:	00180404 	.inst	0x00180404 ; undefined
    5d18:	001e9b0d 	.inst	0x001e9b0d ; undefined
    5d1c:	10960600 	adr	x0, fffffffffff31ddc <_sp+0xffffffff9eef1ddc>
    5d20:	000000a2 	udf	#162
    5d24:	00170104 	.inst	0x00170104 ; undefined
    5d28:	00236d0d 	.inst	0x00236d0d ; NYI
    5d2c:	10970600 	adr	x0, fffffffffff33dec <_sp+0xffffffff9eef3dec>
    5d30:	000000a2 	udf	#162
    5d34:	00160104 	.inst	0x00160104 ; undefined
    5d38:	0016f30d 	.inst	0x0016f30d ; undefined
    5d3c:	10980600 	adr	x0, fffffffffff35dfc <_sp+0xffffffff9eef5dfc>
    5d40:	000000a2 	udf	#162
    5d44:	00150104 	.inst	0x00150104 ; undefined
    5d48:	0024500d 	.inst	0x0024500d ; NYI
    5d4c:	10990600 	adr	x0, fffffffffff37e0c <_sp+0xffffffff9eef7e0c>
    5d50:	000000a2 	udf	#162
    5d54:	00140104 	.inst	0x00140104 ; undefined
    5d58:	002cba0d 	.inst	0x002cba0d ; NYI
    5d5c:	109a0600 	adr	x0, fffffffffff39e1c <_sp+0xffffffff9eef9e1c>
    5d60:	000000a2 	udf	#162
    5d64:	00100404 	.inst	0x00100404 ; undefined
    5d68:	002cff0d 	.inst	0x002cff0d ; NYI
    5d6c:	109b0600 	adr	x0, fffffffffff3be2c <_sp+0xffffffff9eefbe2c>
    5d70:	000000a2 	udf	#162
    5d74:	000f0104 	.inst	0x000f0104 ; undefined
    5d78:	002e150d 	.inst	0x002e150d ; NYI
    5d7c:	109c0600 	adr	x0, fffffffffff3de3c <_sp+0xffffffff9eefde3c>
    5d80:	000000a2 	udf	#162
    5d84:	000e0104 	.inst	0x000e0104 ; undefined
    5d88:	001e3c0d 	.inst	0x001e3c0d ; undefined
    5d8c:	109d0600 	adr	x0, fffffffffff3fe4c <_sp+0xffffffff9eeffe4c>
    5d90:	000000a2 	udf	#162
    5d94:	000d0104 	.inst	0x000d0104 ; undefined
    5d98:	00200d0d 	.inst	0x00200d0d ; NYI
    5d9c:	109e0600 	adr	x0, fffffffffff41e5c <_sp+0xffffffff9ef01e5c>
    5da0:	000000a2 	udf	#162
    5da4:	000c0104 	.inst	0x000c0104 ; undefined
    5da8:	002ad00d 	.inst	0x002ad00d ; NYI
    5dac:	109f0600 	adr	x0, fffffffffff43e6c <_sp+0xffffffff9ef03e6c>
    5db0:	000000a2 	udf	#162
    5db4:	00080404 	.inst	0x00080404 ; undefined
    5db8:	0029be0d 	.inst	0x0029be0d ; NYI
    5dbc:	10a00600 	adr	x0, fffffffffff45e7c <_sp+0xffffffff9ef05e7c>
    5dc0:	000000a2 	udf	#162
    5dc4:	00070104 	.inst	0x00070104 ; undefined
    5dc8:	001d400d 	.inst	0x001d400d ; undefined
    5dcc:	10a10600 	adr	x0, fffffffffff47e8c <_sp+0xffffffff9ef07e8c>
    5dd0:	000000a2 	udf	#162
    5dd4:	00060104 	.inst	0x00060104 ; undefined
    5dd8:	001d4d0d 	.inst	0x001d4d0d ; undefined
    5ddc:	10a20600 	adr	x0, fffffffffff49e9c <_sp+0xffffffff9ef09e9c>
    5de0:	000000a2 	udf	#162
    5de4:	00050104 	.inst	0x00050104 ; undefined
    5de8:	002cac0d 	.inst	0x002cac0d ; NYI
    5dec:	10a30600 	adr	x0, fffffffffff4beac <_sp+0xffffffff9ef0beac>
    5df0:	000000a2 	udf	#162
    5df4:	00040104 	.inst	0x00040104 ; undefined
    5df8:	00282e0d 	.inst	0x00282e0d ; NYI
    5dfc:	10a40600 	adr	x0, fffffffffff4debc <_sp+0xffffffff9ef0debc>
    5e00:	000000a2 	udf	#162
    5e04:	00030104 	.inst	0x00030104 ; undefined
    5e08:	00289a0d 	.inst	0x00289a0d ; NYI
    5e0c:	10a50600 	adr	x0, fffffffffff4fecc <_sp+0xffffffff9ef0fecc>
    5e10:	000000a2 	udf	#162
    5e14:	00020104 	.inst	0x00020104 ; undefined
    5e18:	001c340d 	.inst	0x001c340d ; undefined
    5e1c:	10a60600 	adr	x0, fffffffffff51edc <_sp+0xffffffff9ef11edc>
    5e20:	000000a2 	udf	#162
    5e24:	00010104 	.inst	0x00010104 ; undefined
    5e28:	002ed00d 	.inst	0x002ed00d ; NYI
    5e2c:	10a70600 	adr	x0, fffffffffff53eec <_sp+0xffffffff9ef13eec>
    5e30:	000000a2 	udf	#162
    5e34:	00000104 	udf	#260
    5e38:	06040e00 	.inst	0x06040e00 ; undefined
    5e3c:	051f098d 	mov	z13.b, p15/z, #76
    5e40:	640f0000 	.inst	0x640f0000 ; undefined
    5e44:	06003233 	.inst	0x06003233 ; undefined
    5e48:	00a2108f 	.inst	0x00a2108f ; undefined
    5e4c:	620f0000 	.inst	0x620f0000 ; undefined
    5e50:	06007469 	.inst	0x06007469 ; undefined
    5e54:	038303a8 	.inst	0x038303a8 ; undefined
    5e58:	03000000 	.inst	0x03000000 ; undefined
    5e5c:	000028e5 	udf	#10469
    5e60:	fd02a906 	str	d6, [x8, #1360]
    5e64:	05000004 	orr	z4.s, z4.s, #0x1
    5e68:	0000051f 	udf	#1311
    5e6c:	ae06040c 	.inst	0xae06040c ; undefined
    5e70:	00067a02 	.inst	0x00067a02 ; undefined
    5e74:	19b90d00 	.inst	0x19b90d00 ; undefined
    5e78:	af060000 	.inst	0xaf060000 ; undefined
    5e7c:	0000a211 	udf	#41489
    5e80:	1f010400 	fmadd	s0, s0, s1, s1
    5e84:	27450d00 	.inst	0x27450d00 ; undefined
    5e88:	b0060000 	adrp	x0, c006000 <__stack_size+0xc002000>
    5e8c:	0000a211 	udf	#41489
    5e90:	1e010400 	.inst	0x1e010400 ; undefined
    5e94:	2db40d00 	stp	s0, s3, [x8, #-96]!
    5e98:	b1060000 	adds	x0, x0, #0x180
    5e9c:	0000a211 	udf	#41489
    5ea0:	1d010400 	.inst	0x1d010400 ; undefined
    5ea4:	26ca0d00 	.inst	0x26ca0d00 ; undefined
    5ea8:	b2060000 	orr	x0, x0, #0x400000004000000
    5eac:	0000a211 	udf	#41489
    5eb0:	1b020400 	madd	w0, w0, w2, w1
    5eb4:	2e880d00 	.inst	0x2e880d00 ; undefined
    5eb8:	b3060000 	.inst	0xb3060000 ; undefined
    5ebc:	0000a211 	udf	#41489
    5ec0:	1a010400 	.inst	0x1a010400 ; undefined
    5ec4:	1d150d00 	.inst	0x1d150d00 ; undefined
    5ec8:	b4060000 	cbz	x0, 11ec8 <__stack_size+0xdec8>
    5ecc:	0000a211 	udf	#41489
    5ed0:	19010400 	.inst	0x19010400 ; undefined
    5ed4:	1a990d00 	.inst	0x1a990d00 ; undefined
    5ed8:	b5060000 	cbnz	x0, 11ed8 <__stack_size+0xded8>
    5edc:	0000a211 	udf	#41489
    5ee0:	18010400 	ldr	w0, 7f60 <__stack_size+0x3f60>
    5ee4:	1eee0d00 	fcsel	h0, h8, h14, eq  // eq = none
    5ee8:	b6060000 	tbz	x0, #32, 1ee8 <__stack_size-0x2118>
    5eec:	0000a217 	udf	#41495
    5ef0:	17010400 	b	fffffffffc046ef0 <_sp+0xffffffff9b006ef0>
    5ef4:	1f5a0d00 	fmadd	d0, d8, d26, d3
    5ef8:	b7060000 	tbnz	x0, #32, 1ef8 <__stack_size-0x2108>
    5efc:	0000a214 	udf	#41492
    5f00:	14030400 	b	c6f00 <__stack_size+0xc2f00>
    5f04:	1efe0d00 	fcsel	h0, h8, h30, eq  // eq = none
    5f08:	b8060000 	stur	w0, [x0, #96]
    5f0c:	0000a214 	udf	#41492
    5f10:	13010400 	sbfx	w0, w0, #1, #1
    5f14:	1f6a0d00 	fnmadd	d0, d8, d10, d3
    5f18:	b9060000 	str	w0, [x0, #1536]
    5f1c:	0000a214 	udf	#41492
    5f20:	10030400 	adr	x0, bfa0 <__stack_size+0x7fa0>
    5f24:	17fb0d00 	b	ffffffffffec9324 <_sp+0xffffffff9ee89324>
    5f28:	ba060000 	adcs	x0, x0, x6
    5f2c:	0000a217 	udf	#41495
    5f30:	0f010400 	movi	v0.2s, #0x20
    5f34:	2d9c0d00 	stp	s0, s3, [x8, #224]!
    5f38:	bb060000 	.inst	0xbb060000 ; undefined
    5f3c:	0000a214 	udf	#41492
    5f40:	0e010400 	dup	v0.8b, v0.b[0]
    5f44:	1a8c0d00 	.inst	0x1a8c0d00 ; undefined
    5f48:	bc060000 	stur	s0, [x0, #96]
    5f4c:	0000a214 	udf	#41492
    5f50:	0d010400 	.inst	0x0d010400 ; undefined
    5f54:	25b40d00 	whilelo	p0.s, w8, w20
    5f58:	bd060000 	str	s0, [x0, #1536]
    5f5c:	0000a214 	udf	#41492
    5f60:	0c010400 	.inst	0x0c010400 ; undefined
    5f64:	22040d00 	.inst	0x22040d00 ; undefined
    5f68:	be060000 	.inst	0xbe060000 ; undefined
    5f6c:	0000a214 	udf	#41492
    5f70:	08040400 	stxrb	w4, w0, [x0]
    5f74:	22720d00 	.inst	0x22720d00 ; undefined
    5f78:	bf060000 	.inst	0xbf060000 ; undefined
    5f7c:	0000a217 	udf	#41495
    5f80:	07010400 	.inst	0x07010400 ; undefined
    5f84:	2e4c0d00 	.inst	0x2e4c0d00 ; undefined
    5f88:	c0060000 	.inst	0xc0060000 ; undefined
    5f8c:	0000a214 	udf	#41492
    5f90:	06010400 	.inst	0x06010400 ; undefined
    5f94:	21220d00 	.inst	0x21220d00 ; undefined
    5f98:	c1060000 	.inst	0xc1060000 ; undefined
    5f9c:	0000a214 	udf	#41492
    5fa0:	05010400 	orr	z0.h, z0.h, #0x1
    5fa4:	2e7d0d00 	uqadd	v0.4h, v8.4h, v29.4h
    5fa8:	c2060000 	.inst	0xc2060000 ; undefined
    5fac:	0000a214 	udf	#41492
    5fb0:	00050400 	.inst	0x00050400 ; undefined
    5fb4:	040e0000 	.inst	0x040e0000 ; undefined
    5fb8:	9c09ab06 	ldr	q6, 19518 <__stack_size+0x15518>
    5fbc:	0f000006 	.inst	0x0f000006 ; undefined
    5fc0:	00323364 	.inst	0x00323364 ; NYI
    5fc4:	a210ad06 	.inst	0xa210ad06 ; undefined
    5fc8:	0f000000 	.inst	0x0f000000 ; undefined
    5fcc:	00746962 	.inst	0x00746962 ; undefined
    5fd0:	3003c306 	adr	x6, d831 <__stack_size+0x9831>
    5fd4:	00000005 	udf	#5
    5fd8:	00224003 	.inst	0x00224003 ; NYI
    5fdc:	02c40600 	.inst	0x02c40600 ; undefined
    5fe0:	0000067a 	udf	#1658
    5fe4:	00069c05 	.inst	0x00069c05 ; undefined
    5fe8:	06040c00 	.inst	0x06040c00 ; undefined
    5fec:	079702c9 	.inst	0x079702c9 ; undefined
    5ff0:	4a0d0000 	eor	w0, w0, w13
    5ff4:	0600001f 	.inst	0x0600001f ; undefined
    5ff8:	00a210ca 	.inst	0x00a210ca ; undefined
    5ffc:	01040000 	.inst	0x01040000 ; undefined
    6000:	f40d001f 	.inst	0xf40d001f ; undefined
    6004:	06000029 	.inst	0x06000029 ; undefined
    6008:	00a210cb 	.inst	0x00a210cb ; undefined
    600c:	01040000 	.inst	0x01040000 ; undefined
    6010:	5f0d001e 	.inst	0x5f0d001e ; undefined
    6014:	0600002a 	.inst	0x0600002a ; undefined
    6018:	00a210cc 	.inst	0x00a210cc ; undefined
    601c:	01040000 	.inst	0x01040000 ; undefined
    6020:	780d001d 	sturh	w29, [x0, #208]
    6024:	0600002a 	.inst	0x0600002a ; undefined
    6028:	00a210cd 	.inst	0x00a210cd ; undefined
    602c:	01040000 	.inst	0x01040000 ; undefined
    6030:	500d001c 	adr	x28, 20032 <__stack_size+0x1c032>
    6034:	06000021 	.inst	0x06000021 ; undefined
    6038:	00a212ce 	.inst	0x00a212ce ; undefined
    603c:	01040000 	.inst	0x01040000 ; undefined
    6040:	730d001b 	.inst	0x730d001b ; undefined
    6044:	06000029 	.inst	0x06000029 ; undefined
    6048:	00a210cf 	.inst	0x00a210cf ; undefined
    604c:	01040000 	.inst	0x01040000 ; undefined
    6050:	690d001a 	stgp	x26, x0, [x0, #416]
    6054:	0600002a 	.inst	0x0600002a ; undefined
    6058:	00a212d0 	.inst	0x00a212d0 ; undefined
    605c:	02040000 	.inst	0x02040000 ; undefined
    6060:	6f0d0018 	.inst	0x6f0d0018 ; undefined
    6064:	0600002a 	.inst	0x0600002a ; undefined
    6068:	00a212d1 	.inst	0x00a212d1 ; undefined
    606c:	08040000 	stxrb	w4, w0, [x0]
    6070:	660d0010 	.inst	0x660d0010 ; undefined
    6074:	0600001d 	.inst	0x0600001d ; undefined
    6078:	00a215d2 	.inst	0x00a215d2 ; undefined
    607c:	04040000 	.inst	0x04040000 ; undefined
    6080:	040d000c 	uabd	z12.b, p0/m, z12.b, z0.b
    6084:	06000022 	.inst	0x06000022 ; undefined
    6088:	00a212d3 	.inst	0x00a212d3 ; undefined
    608c:	04040000 	.inst	0x04040000 ; undefined
    6090:	f20d0008 	ands	x8, x0, #0x8000000080000
    6094:	0600001f 	.inst	0x0600001f ; undefined
    6098:	00a213d4 	.inst	0x00a213d4 ; undefined
    609c:	01040000 	.inst	0x01040000 ; undefined
    60a0:	5a0d0007 	sbc	w7, w0, w13
    60a4:	0600001b 	.inst	0x0600001b ; undefined
    60a8:	00a212d5 	.inst	0x00a212d5 ; undefined
    60ac:	01040000 	.inst	0x01040000 ; undefined
    60b0:	aa0d0006 	orr	x6, x0, x13
    60b4:	0600002b 	.inst	0x0600002b ; undefined
    60b8:	00a210d6 	.inst	0x00a210d6 ; undefined
    60bc:	01040000 	.inst	0x01040000 ; undefined
    60c0:	7d0d0005 	str	h5, [x0, #1664]
    60c4:	0600002e 	.inst	0x0600002e ; undefined
    60c8:	00a212d7 	.inst	0x00a212d7 ; undefined
    60cc:	05040000 	.inst	0x05040000 ; undefined
    60d0:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    60d4:	09c60604 	.inst	0x09c60604 ; undefined
    60d8:	000007b9 	udf	#1977
    60dc:	3233640f 	orr	w15, w0, #0xffffe07f
    60e0:	10c80600 	adr	x0, fffffffffff961a0 <_sp+0xffffffff9ef561a0>
    60e4:	000000a2 	udf	#162
    60e8:	7469620f 	.inst	0x7469620f ; undefined
    60ec:	06d80600 	.inst	0x06d80600 ; undefined
    60f0:	000006ad 	udf	#1709
    60f4:	2b120300 	adds	w0, w24, w18
    60f8:	d9060000 	stlur	x0, [x0, #96]
    60fc:	00079702 	.inst	0x00079702 ; undefined
    6100:	07b90500 	.inst	0x07b90500 ; undefined
    6104:	040c0000 	sabd	z0.b, p0/m, z0.b, z0.b
    6108:	d405df06 	.inst	0xd405df06 ; undefined
    610c:	0d000009 	st1	{v9.b}[0], [x0]
    6110:	00002d0d 	udf	#11533
    6114:	a215e006 	.inst	0xa215e006 ; undefined
    6118:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    611c:	0d001f01 	st1	{v1.b}[7], [x24]
    6120:	000023e5 	udf	#9189
    6124:	a215e106 	.inst	0xa215e106 ; undefined
    6128:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    612c:	0d001e01 	st1	{v1.b}[7], [x16]
    6130:	000023af 	udf	#9135
    6134:	a215e206 	.inst	0xa215e206 ; undefined
    6138:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    613c:	0d001d01 	st1	{v1.b}[7], [x8]
    6140:	000025ef 	udf	#9711
    6144:	a215e306 	.inst	0xa215e306 ; undefined
    6148:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    614c:	0d001c01 	st1	{v1.b}[7], [x0]
    6150:	00001b1a 	udf	#6938
    6154:	a217e406 	.inst	0xa217e406 ; undefined
    6158:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    615c:	0d001b01 	st1	{v1.b}[6], [x24]
    6160:	0000198e 	udf	#6542
    6164:	a215e506 	.inst	0xa215e506 ; undefined
    6168:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    616c:	0d001a01 	st1	{v1.b}[6], [x16]
    6170:	00001df6 	udf	#7670
    6174:	a217e606 	.inst	0xa217e606 ; undefined
    6178:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    617c:	0d001901 	st1	{v1.b}[6], [x8]
    6180:	00002122 	udf	#8482
    6184:	a217e706 	.inst	0xa217e706 ; undefined
    6188:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    618c:	0d001801 	st1	{v1.b}[6], [x0]
    6190:	00002441 	udf	#9281
    6194:	a217e806 	.inst	0xa217e806 ; undefined
    6198:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    619c:	0d001701 	st1	{v1.b}[5], [x24]
    61a0:	00001a43 	udf	#6723
    61a4:	a217e906 	.inst	0xa217e906 ; undefined
    61a8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    61ac:	0d001601 	st1	{v1.b}[5], [x16]
    61b0:	00001a49 	udf	#6729
    61b4:	a217ea06 	.inst	0xa217ea06 ; undefined
    61b8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    61bc:	0d001501 	st1	{v1.b}[5], [x8]
    61c0:	00001a4f 	udf	#6735
    61c4:	a217eb06 	.inst	0xa217eb06 ; undefined
    61c8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    61cc:	0d001401 	st1	{v1.b}[5], [x0]
    61d0:	000028be 	udf	#10430
    61d4:	a217ec06 	.inst	0xa217ec06 ; undefined
    61d8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    61dc:	0d001301 	st1	{v1.b}[4], [x24]
    61e0:	00001ad0 	udf	#6864
    61e4:	a217ed06 	.inst	0xa217ed06 ; undefined
    61e8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    61ec:	0d001201 	st1	{v1.b}[4], [x16]
    61f0:	0000257b 	udf	#9595
    61f4:	a217ee06 	.inst	0xa217ee06 ; undefined
    61f8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    61fc:	0d001101 	st1	{v1.b}[4], [x8]
    6200:	00002b90 	udf	#11152
    6204:	a217ef06 	.inst	0xa217ef06 ; undefined
    6208:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    620c:	0d001001 	st1	{v1.b}[4], [x0]
    6210:	00002b6d 	udf	#11117
    6214:	a218f006 	.inst	0xa218f006 ; undefined
    6218:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    621c:	0d000f01 	st1	{v1.b}[3], [x24]
    6220:	00002527 	udf	#9511
    6224:	a215f106 	.inst	0xa215f106 ; undefined
    6228:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    622c:	0d000e01 	st1	{v1.b}[3], [x16]
    6230:	00001f9d 	udf	#8093
    6234:	a215f206 	.inst	0xa215f206 ; undefined
    6238:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    623c:	0d000d01 	st1	{v1.b}[3], [x8]
    6240:	000018d9 	udf	#6361
    6244:	a215f306 	.inst	0xa215f306 ; undefined
    6248:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    624c:	0d000c01 	st1	{v1.b}[3], [x0]
    6250:	00002603 	udf	#9731
    6254:	a217f406 	.inst	0xa217f406 ; undefined
    6258:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    625c:	0d000b01 	st1	{v1.b}[2], [x24]
    6260:	000017e0 	udf	#6112
    6264:	a215f506 	.inst	0xa215f506 ; undefined
    6268:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    626c:	0d000a01 	st1	{v1.b}[2], [x16]
    6270:	00002382 	udf	#9090
    6274:	a217f606 	.inst	0xa217f606 ; undefined
    6278:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    627c:	0d000901 	st1	{v1.b}[2], [x8]
    6280:	00002564 	udf	#9572
    6284:	a217f706 	.inst	0xa217f706 ; undefined
    6288:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    628c:	0d000801 	st1	{v1.b}[2], [x0]
    6290:	000026bd 	udf	#9917
    6294:	a217f806 	.inst	0xa217f806 ; undefined
    6298:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    629c:	0d000701 	st1	{v1.b}[1], [x24]
    62a0:	00001922 	udf	#6434
    62a4:	a217f906 	.inst	0xa217f906 ; undefined
    62a8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    62ac:	0d000601 	st1	{v1.b}[1], [x16]
    62b0:	000023f9 	udf	#9209
    62b4:	a217fa06 	.inst	0xa217fa06 ; undefined
    62b8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    62bc:	0d000501 	st1	{v1.b}[1], [x8]
    62c0:	00001d0c 	udf	#7436
    62c4:	a217fb06 	.inst	0xa217fb06 ; undefined
    62c8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    62cc:	0d000401 	st1	{v1.b}[1], [x0]
    62d0:	00002792 	udf	#10130
    62d4:	a217fc06 	.inst	0xa217fc06 ; undefined
    62d8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    62dc:	0d000301 	st1	{v1.b}[0], [x24]
    62e0:	000027ac 	udf	#10156
    62e4:	a217fd06 	.inst	0xa217fd06 ; undefined
    62e8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    62ec:	0d000201 	st1	{v1.b}[0], [x16]
    62f0:	000027be 	udf	#10174
    62f4:	a217fe06 	.inst	0xa217fe06 ; undefined
    62f8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    62fc:	0d000101 	st1	{v1.b}[0], [x8]
    6300:	00002c25 	udf	#11301
    6304:	a217ff06 	.inst	0xa217ff06 ; undefined
    6308:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    630c:	00000001 	udf	#1
    6310:	dc06040e 	.inst	0xdc06040e ; undefined
    6314:	0009f709 	.inst	0x0009f709 ; undefined
    6318:	33640f00 	.inst	0x33640f00 ; undefined
    631c:	de060032 	.inst	0xde060032 ; undefined
    6320:	0000a213 	udf	#41491
    6324:	69621000 	ldpsw	x0, x4, [x0, #-240]
    6328:	00060074 	.inst	0x00060074 ; undefined
    632c:	07ca0601 	.inst	0x07ca0601 ; undefined
    6330:	11000000 	add	w0, w0, #0x0
    6334:	00002b43 	udf	#11075
    6338:	02010106 	.inst	0x02010106 ; undefined
    633c:	000009d4 	udf	#2516
    6340:	0009f705 	.inst	0x0009f705 ; undefined
    6344:	06041200 	.inst	0x06041200 ; undefined
    6348:	34050106 	cbz	w6, 10368 <__stack_size+0xc368>
    634c:	1300000c 	sbfx	w12, w0, #0, #1
    6350:	000021a8 	udf	#8616
    6354:	14010706 	b	47f6c <__stack_size+0x43f6c>
    6358:	000000a2 	udf	#162
    635c:	001f0104 	.inst	0x001f0104 ; undefined
    6360:	00222a13 	.inst	0x00222a13 ; NYI
    6364:	01080600 	.inst	0x01080600 ; undefined
    6368:	0000a217 	udf	#41495
    636c:	1e010400 	.inst	0x1e010400 ; undefined
    6370:	29ab1300 	stp	w0, w4, [x24, #-168]!
    6374:	09060000 	.inst	0x09060000 ; undefined
    6378:	00a21701 	.inst	0x00a21701 ; undefined
    637c:	01040000 	.inst	0x01040000 ; undefined
    6380:	8413001d 	ld1sb	{z29.s}, p0/z, [x0, z19.s, uxtw]
    6384:	06000028 	.inst	0x06000028 ; undefined
    6388:	a214010a 	.inst	0xa214010a ; undefined
    638c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6390:	13001c01 	sxtb	w1, w0
    6394:	000026a2 	udf	#9890
    6398:	14010b06 	b	48fb0 <__stack_size+0x44fb0>
    639c:	000000a2 	udf	#162
    63a0:	001b0104 	.inst	0x001b0104 ; undefined
    63a4:	001af913 	.inst	0x001af913 ; undefined
    63a8:	010c0600 	.inst	0x010c0600 ; undefined
    63ac:	0000a217 	udf	#41495
    63b0:	1a010400 	.inst	0x1a010400 ; undefined
    63b4:	1c8c1300 	ldr	s0, fffffffffff1e614 <_sp+0xffffffff9eede614>
    63b8:	0d060000 	.inst	0x0d060000 ; undefined
    63bc:	00a21401 	.inst	0x00a21401 ; undefined
    63c0:	01040000 	.inst	0x01040000 ; undefined
    63c4:	36130019 	tbz	w25, #2, c3c4 <__stack_size+0x83c4>
    63c8:	06000029 	.inst	0x06000029 ; undefined
    63cc:	a214010e 	.inst	0xa214010e ; undefined
    63d0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    63d4:	13001801 	sbfx	w1, w0, #0, #7
    63d8:	000020cc 	udf	#8396
    63dc:	17010f06 	b	fffffffffc049ff4 <_sp+0xffffffff9b009ff4>
    63e0:	000000a2 	udf	#162
    63e4:	00170104 	.inst	0x00170104 ; undefined
    63e8:	0021cc13 	.inst	0x0021cc13 ; NYI
    63ec:	01100600 	.inst	0x01100600 ; undefined
    63f0:	0000a214 	udf	#41492
    63f4:	16010400 	b	fffffffff80473f4 <_sp+0xffffffff970073f4>
    63f8:	28cc1300 	ldp	w0, w4, [x24], #96
    63fc:	11060000 	add	w0, w0, #0x180
    6400:	00a21401 	.inst	0x00a21401 ; undefined
    6404:	01040000 	.inst	0x01040000 ; undefined
    6408:	12130015 	and	w21, w0, #0x2000
    640c:	06000017 	.inst	0x06000017 ; undefined
    6410:	a2140112 	.inst	0xa2140112 ; undefined
    6414:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6418:	13001401 	sbfx	w1, w0, #0, #6
    641c:	000024a1 	udf	#9377
    6420:	14011306 	b	4b038 <__stack_size+0x47038>
    6424:	000000a2 	udf	#162
    6428:	00130104 	.inst	0x00130104 ; undefined
    642c:	001a5513 	.inst	0x001a5513 ; undefined
    6430:	01140600 	.inst	0x01140600 ; undefined
    6434:	0000a214 	udf	#41492
    6438:	12010400 	and	w0, w0, #0x80000001
    643c:	1edc1300 	.inst	0x1edc1300 ; undefined
    6440:	15060000 	b	4186440 <__stack_size+0x4182440>
    6444:	00a21701 	.inst	0x00a21701 ; undefined
    6448:	01040000 	.inst	0x01040000 ; undefined
    644c:	27130011 	.inst	0x27130011 ; undefined
    6450:	0600001b 	.inst	0x0600001b ; undefined
    6454:	a2110116 	.inst	0xa2110116 ; undefined
    6458:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    645c:	13001001 	sbfx	w1, w0, #0, #5
    6460:	00001781 	udf	#6017
    6464:	14011706 	b	4c07c <__stack_size+0x4807c>
    6468:	000000a2 	udf	#162
    646c:	000f0104 	.inst	0x000f0104 ; undefined
    6470:	00174113 	.inst	0x00174113 ; undefined
    6474:	01180600 	.inst	0x01180600 ; undefined
    6478:	0000a214 	udf	#41492
    647c:	0e010400 	dup	v0.8b, v0.b[0]
    6480:	18631300 	ldr	w0, cc6e0 <__stack_size+0xc86e0>
    6484:	19060000 	stlurb	w0, [x0, #96]
    6488:	00a21401 	.inst	0x00a21401 ; undefined
    648c:	01040000 	.inst	0x01040000 ; undefined
    6490:	6d13000d 	stp	d13, d0, [x0, #304]
    6494:	06000020 	.inst	0x06000020 ; undefined
    6498:	a214011a 	.inst	0xa214011a ; undefined
    649c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    64a0:	13000c01 	sbfx	w1, w0, #0, #4
    64a4:	0000248b 	udf	#9355
    64a8:	17011b06 	b	fffffffffc04d0c0 <_sp+0xffffffff9b00d0c0>
    64ac:	000000a2 	udf	#162
    64b0:	000b0104 	.inst	0x000b0104 ; undefined
    64b4:	002dd413 	.inst	0x002dd413 ; NYI
    64b8:	011c0600 	.inst	0x011c0600 ; undefined
    64bc:	0000a217 	udf	#41495
    64c0:	0a010400 	and	w0, w0, w1, lsl #1
    64c4:	2eb71300 	uaddw	v0.2d, v24.2d, v23.2s
    64c8:	1d060000 	.inst	0x1d060000 ; undefined
    64cc:	00a21701 	.inst	0x00a21701 ; undefined
    64d0:	01040000 	.inst	0x01040000 ; undefined
    64d4:	64130009 	.inst	0x64130009 ; undefined
    64d8:	06000017 	.inst	0x06000017 ; undefined
    64dc:	a214011e 	.inst	0xa214011e ; undefined
    64e0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    64e4:	13000801 	sbfx	w1, w0, #0, #3
    64e8:	00002081 	udf	#8321
    64ec:	17011f06 	b	fffffffffc04e104 <_sp+0xffffffff9b00e104>
    64f0:	000000a2 	udf	#162
    64f4:	00070104 	.inst	0x00070104 ; undefined
    64f8:	0019f913 	.inst	0x0019f913 ; undefined
    64fc:	01200600 	.inst	0x01200600 ; undefined
    6500:	0000a214 	udf	#41492
    6504:	06010400 	.inst	0x06010400 ; undefined
    6508:	2abd1300 	orn	w0, w24, w29, asr #4
    650c:	21060000 	.inst	0x21060000 ; undefined
    6510:	00a21401 	.inst	0x00a21401 ; undefined
    6514:	01040000 	.inst	0x01040000 ; undefined
    6518:	85130005 	.inst	0x85130005 ; undefined
    651c:	06000025 	.inst	0x06000025 ; undefined
    6520:	a2140122 	.inst	0xa2140122 ; undefined
    6524:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6528:	13000401 	sbfx	w1, w0, #0, #2
    652c:	00001979 	udf	#6521
    6530:	17012306 	b	fffffffffc04f148 <_sp+0xffffffff9b00f148>
    6534:	000000a2 	udf	#162
    6538:	00030104 	.inst	0x00030104 ; undefined
    653c:	002e0113 	.inst	0x002e0113 ; NYI
    6540:	01240600 	.inst	0x01240600 ; undefined
    6544:	0000a217 	udf	#41495
    6548:	02010400 	.inst	0x02010400 ; undefined
    654c:	2bdb1300 	.inst	0x2bdb1300 ; undefined
    6550:	25060000 	cmpge	p0.b, p0/z, z0.b, #6
    6554:	00a21401 	.inst	0x00a21401 ; undefined
    6558:	01040000 	.inst	0x01040000 ; undefined
    655c:	21130001 	.inst	0x21130001 ; undefined
    6560:	0600002e 	.inst	0x0600002e ; undefined
    6564:	a2140126 	.inst	0xa2140126 ; undefined
    6568:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    656c:	00000001 	udf	#1
    6570:	03060414 	.inst	0x03060414 ; undefined
    6574:	0c590901 	.inst	0x0c590901 ; undefined
    6578:	64100000 	.inst	0x64100000 ; undefined
    657c:	06003233 	.inst	0x06003233 ; undefined
    6580:	a2130105 	.inst	0xa2130105 ; undefined
    6584:	10000000 	adr	x0, 6584 <__stack_size+0x2584>
    6588:	00746962 	.inst	0x00746962 ; undefined
    658c:	07012706 	.inst	0x07012706 ; undefined
    6590:	00000a09 	udf	#2569
    6594:	2d5e1100 	ldp	s0, s4, [x8, #240]
    6598:	28060000 	stnp	w0, w0, [x0, #48]
    659c:	0c340201 	.inst	0x0c340201 ; undefined
    65a0:	59050000 	stlurh	w0, [x0, #80]
    65a4:	1200000c 	and	w12, w0, #0x1
    65a8:	012d0604 	.inst	0x012d0604 ; undefined
    65ac:	000e8505 	.inst	0x000e8505 ; undefined
    65b0:	25331300 	whilege	p0.b, x24, x19
    65b4:	2e060000 	ext	v0.8b, v0.8b, v6.8b, #0
    65b8:	00a21001 	.inst	0x00a21001 ; undefined
    65bc:	01040000 	.inst	0x01040000 ; undefined
    65c0:	0a13001f 	and	wzr, w0, w19
    65c4:	06000021 	.inst	0x06000021 ; undefined
    65c8:	a213012f 	.inst	0xa213012f ; undefined
    65cc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    65d0:	13001e01 	sxtb	w1, w16
    65d4:	00002611 	udf	#9745
    65d8:	13013006 	sbfx	w6, w0, #1, #12
    65dc:	000000a2 	udf	#162
    65e0:	001d0104 	.inst	0x001d0104 ; undefined
    65e4:	001b7b13 	.inst	0x001b7b13 ; undefined
    65e8:	01310600 	.inst	0x01310600 ; undefined
    65ec:	0000a210 	udf	#41488
    65f0:	1c010400 	ldr	s0, 8670 <__stack_size+0x4670>
    65f4:	2a351300 	orn	w0, w24, w21, lsl #4
    65f8:	32060000 	orr	w0, w0, #0x4000000
    65fc:	00a21001 	.inst	0x00a21001 ; undefined
    6600:	01040000 	.inst	0x01040000 ; undefined
    6604:	0e13001b 	tbl	v27.8b, {v0.16b}, v19.8b
    6608:	0600001c 	.inst	0x0600001c ; undefined
    660c:	a2130133 	.inst	0xa2130133 ; undefined
    6610:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6614:	13001a01 	sbfx	w1, w16, #0, #7
    6618:	0000192b 	udf	#6443
    661c:	10013406 	adr	x6, 8c9c <__stack_size+0x4c9c>
    6620:	000000a2 	udf	#162
    6624:	00190104 	.inst	0x00190104 ; undefined
    6628:	002ad813 	.inst	0x002ad813 ; NYI
    662c:	01350600 	.inst	0x01350600 ; undefined
    6630:	0000a210 	udf	#41488
    6634:	18010400 	ldr	w0, 86b4 <__stack_size+0x46b4>
    6638:	267a1300 	.inst	0x267a1300 ; undefined
    663c:	36060000 	tbz	w0, #0, 263c <__stack_size-0x19c4>
    6640:	00a21301 	.inst	0x00a21301 ; undefined
    6644:	01040000 	.inst	0x01040000 ; undefined
    6648:	b6130017 	tbz	x23, #34, c648 <__stack_size+0x8648>
    664c:	0600001c 	.inst	0x0600001c ; undefined
    6650:	a2100137 	.inst	0xa2100137 ; undefined
    6654:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6658:	13001601 	sbfx	w1, w16, #0, #6
    665c:	000018e5 	udf	#6373
    6660:	10013806 	adr	x6, 8d60 <__stack_size+0x4d60>
    6664:	000000a2 	udf	#162
    6668:	00150104 	.inst	0x00150104 ; undefined
    666c:	002edf13 	.inst	0x002edf13 ; NYI
    6670:	01390600 	.inst	0x01390600 ; undefined
    6674:	0000a210 	udf	#41488
    6678:	14010400 	b	47678 <__stack_size+0x43678>
    667c:	2de91300 	ldp	s0, s4, [x24, #-184]!
    6680:	3a060000 	adcs	w0, w0, w6
    6684:	00a21001 	.inst	0x00a21001 ; undefined
    6688:	01040000 	.inst	0x01040000 ; undefined
    668c:	2e130013 	ext	v19.8b, v0.8b, v19.8b, #0
    6690:	06000024 	.inst	0x06000024 ; undefined
    6694:	a210013b 	.inst	0xa210013b ; undefined
    6698:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    669c:	13001201 	sbfx	w1, w16, #0, #5
    66a0:	00002d88 	udf	#11656
    66a4:	13013c06 	sbfx	w6, w0, #1, #15
    66a8:	000000a2 	udf	#162
    66ac:	00110104 	.inst	0x00110104 ; undefined
    66b0:	0026d213 	.inst	0x0026d213 ; NYI
    66b4:	013d0600 	.inst	0x013d0600 ; undefined
    66b8:	0000a210 	udf	#41488
    66bc:	10010400 	adr	x0, 873c <__stack_size+0x473c>
    66c0:	2bc51300 	.inst	0x2bc51300 ; undefined
    66c4:	3e060000 	.inst	0x3e060000 ; undefined
    66c8:	00a21001 	.inst	0x00a21001 ; undefined
    66cc:	01040000 	.inst	0x01040000 ; undefined
    66d0:	7213000f 	ands	w15, w0, #0x2000
    66d4:	0600001c 	.inst	0x0600001c ; undefined
    66d8:	a210013f 	.inst	0xa210013f ; undefined
    66dc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    66e0:	13000e01 	sbfx	w1, w16, #0, #4
    66e4:	00002a08 	udf	#10760
    66e8:	10014006 	adr	x6, 8ee8 <__stack_size+0x4ee8>
    66ec:	000000a2 	udf	#162
    66f0:	000d0104 	.inst	0x000d0104 ; undefined
    66f4:	00272d13 	.inst	0x00272d13 ; NYI
    66f8:	01410600 	.inst	0x01410600 ; undefined
    66fc:	0000a213 	udf	#41491
    6700:	0c010400 	.inst	0x0c010400 ; undefined
    6704:	17c31300 	b	ffffffffff0cb304 <_sp+0xffffffff9e08b304>
    6708:	42060000 	.inst	0x42060000 ; undefined
    670c:	00a21301 	.inst	0x00a21301 ; undefined
    6710:	01040000 	.inst	0x01040000 ; undefined
    6714:	4713000b 	.inst	0x4713000b ; undefined
    6718:	06000026 	.inst	0x06000026 ; undefined
    671c:	a2130143 	.inst	0xa2130143 ; undefined
    6720:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6724:	13000a01 	sbfx	w1, w16, #0, #3
    6728:	0000283b 	udf	#10299
    672c:	10014406 	adr	x6, 8fac <__stack_size+0x4fac>
    6730:	000000a2 	udf	#162
    6734:	00090104 	.inst	0x00090104 ; undefined
    6738:	002d2b13 	.inst	0x002d2b13 ; NYI
    673c:	01450600 	.inst	0x01450600 ; undefined
    6740:	0000a213 	udf	#41491
    6744:	08010400 	stxrb	w1, w0, [x0]
    6748:	1bd91300 	.inst	0x1bd91300 ; undefined
    674c:	46060000 	.inst	0x46060000 ; undefined
    6750:	00a21001 	.inst	0x00a21001 ; undefined
    6754:	01040000 	.inst	0x01040000 ; undefined
    6758:	cc130007 	.inst	0xcc130007 ; undefined
    675c:	0600001d 	.inst	0x0600001d ; undefined
    6760:	a2100147 	.inst	0xa2100147 ; undefined
    6764:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6768:	13000601 	sbfx	w1, w16, #0, #2
    676c:	0000280e 	udf	#10254
    6770:	10014806 	adr	x6, 9070 <__stack_size+0x5070>
    6774:	000000a2 	udf	#162
    6778:	00050104 	.inst	0x00050104 ; undefined
    677c:	00182613 	.inst	0x00182613 ; undefined
    6780:	01490600 	.inst	0x01490600 ; undefined
    6784:	0000a213 	udf	#41491
    6788:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    678c:	23081300 	.inst	0x23081300 ; undefined
    6790:	4a060000 	eor	w0, w0, w6
    6794:	00a21301 	.inst	0x00a21301 ; undefined
    6798:	01040000 	.inst	0x01040000 ; undefined
    679c:	1e130003 	.inst	0x1e130003 ; undefined
    67a0:	06000023 	.inst	0x06000023 ; undefined
    67a4:	a210014b 	.inst	0xa210014b ; undefined
    67a8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    67ac:	13000201 	sbfx	w1, w16, #0, #1
    67b0:	00001b65 	udf	#7013
    67b4:	10014c06 	adr	x6, 9134 <__stack_size+0x5134>
    67b8:	000000a2 	udf	#162
    67bc:	00010104 	.inst	0x00010104 ; undefined
    67c0:	06041400 	.inst	0x06041400 ; undefined
    67c4:	aa09012a 	orr	x10, x9, x9
    67c8:	1000000e 	adr	x14, 67c8 <__stack_size+0x27c8>
    67cc:	00323364 	.inst	0x00323364 ; NYI
    67d0:	13012c06 	sbfx	w6, w0, #1, #11
    67d4:	000000a2 	udf	#162
    67d8:	74696210 	.inst	0x74696210 ; undefined
    67dc:	014d0600 	.inst	0x014d0600 ; undefined
    67e0:	000c6b06 	.inst	0x000c6b06 ; undefined
    67e4:	cf110000 	.inst	0xcf110000 ; undefined
    67e8:	06000027 	.inst	0x06000027 ; undefined
    67ec:	8502014e 	.inst	0x8502014e ; undefined
    67f0:	0500000e 	orr	z14.s, z14.s, #0x1
    67f4:	00000eaa 	udf	#3754
    67f8:	53060412 	ubfiz	w18, w0, #26, #2
    67fc:	103d0501 	adr	x1, 8089c <__stack_size+0x7c89c>
    6800:	a9130000 	stp	x0, x0, [x0, #304]
    6804:	0600002a 	.inst	0x0600002a ; undefined
    6808:	a2110154 	.inst	0xa2110154 ; undefined
    680c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6810:	13001f01 	sxtb	w1, w24
    6814:	00001881 	udf	#6273
    6818:	11015506 	add	w6, w8, #0x55
    681c:	000000a2 	udf	#162
    6820:	001e0104 	.inst	0x001e0104 ; undefined
    6824:	002e9a13 	.inst	0x002e9a13 ; NYI
    6828:	01560600 	.inst	0x01560600 ; undefined
    682c:	0000a211 	udf	#41489
    6830:	1d010400 	.inst	0x1d010400 ; undefined
    6834:	18b71300 	ldr	w0, fffffffffff74a94 <_sp+0xffffffff9ef34a94>
    6838:	57060000 	.inst	0x57060000 ; undefined
    683c:	00a21101 	.inst	0x00a21101 ; undefined
    6840:	01040000 	.inst	0x01040000 ; undefined
    6844:	2413001c 	cmphi	p12.b, p0/z, z0.b, z19.b
    6848:	0600002a 	.inst	0x0600002a ; undefined
    684c:	a2140158 	.inst	0xa2140158 ; undefined
    6850:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6854:	13001b01 	sbfx	w1, w24, #0, #7
    6858:	00001d03 	udf	#7427
    685c:	11015906 	add	w6, w8, #0x56
    6860:	000000a2 	udf	#162
    6864:	001a0104 	.inst	0x001a0104 ; undefined
    6868:	00215713 	.inst	0x00215713 ; NYI
    686c:	015a0600 	.inst	0x015a0600 ; undefined
    6870:	0000a214 	udf	#41492
    6874:	19010400 	.inst	0x19010400 ; undefined
    6878:	22a11300 	.inst	0x22a11300 ; undefined
    687c:	5b060000 	.inst	0x5b060000 ; undefined
    6880:	00a21401 	.inst	0x00a21401 ; undefined
    6884:	01040000 	.inst	0x01040000 ; undefined
    6888:	25130018 	cmpgt	p8.b, p0/z, z0.b, #-13
    688c:	0600001e 	.inst	0x0600001e ; undefined
    6890:	a214015c 	.inst	0xa214015c ; undefined
    6894:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6898:	13001008 	sbfx	w8, w0, #0, #5
    689c:	00002821 	udf	#10273
    68a0:	11015d06 	add	w6, w8, #0x57
    68a4:	000000a2 	udf	#162
    68a8:	000d0304 	.inst	0x000d0304 ; undefined
    68ac:	002a9613 	.inst	0x002a9613 ; NYI
    68b0:	015e0600 	.inst	0x015e0600 ; undefined
    68b4:	0000a211 	udf	#41489
    68b8:	0c010400 	.inst	0x0c010400 ; undefined
    68bc:	29e31300 	ldp	w0, w4, [x24, #-232]!
    68c0:	5f060000 	.inst	0x5f060000 ; undefined
    68c4:	00a21101 	.inst	0x00a21101 ; undefined
    68c8:	02040000 	.inst	0x02040000 ; undefined
    68cc:	c813000a 	stxr	w19, x10, [x0]
    68d0:	06000025 	.inst	0x06000025 ; undefined
    68d4:	a2110160 	.inst	0xa2110160 ; undefined
    68d8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    68dc:	13000901 	sbfx	w1, w8, #0, #3
    68e0:	00002693 	udf	#9875
    68e4:	14016106 	b	5ecfc <__stack_size+0x5acfc>
    68e8:	000000a2 	udf	#162
    68ec:	00080104 	.inst	0x00080104 ; undefined
    68f0:	00201f13 	.inst	0x00201f13 ; NYI
    68f4:	01620600 	.inst	0x01620600 ; undefined
    68f8:	0000a211 	udf	#41489
    68fc:	07010400 	.inst	0x07010400 ; undefined
    6900:	216b1300 	.inst	0x216b1300 ; undefined
    6904:	63060000 	.inst	0x63060000 ; undefined
    6908:	00a21401 	.inst	0x00a21401 ; undefined
    690c:	01040000 	.inst	0x01040000 ; undefined
    6910:	25130006 	cmpge	p6.b, p0/z, z0.b, #-13
    6914:	0600001c 	.inst	0x0600001c ; undefined
    6918:	a2140164 	.inst	0xa2140164 ; undefined
    691c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6920:	13000501 	sbfx	w1, w8, #0, #2
    6924:	0000215e 	udf	#8542
    6928:	14016506 	b	5fd40 <__stack_size+0x5bd40>
    692c:	000000a2 	udf	#162
    6930:	00040104 	.inst	0x00040104 ; undefined
    6934:	001a7b13 	.inst	0x001a7b13 ; undefined
    6938:	01660600 	.inst	0x01660600 ; undefined
    693c:	0000a214 	udf	#41492
    6940:	03010400 	.inst	0x03010400 ; undefined
    6944:	23411300 	.inst	0x23411300 ; undefined
    6948:	67060000 	.inst	0x67060000 ; undefined
    694c:	00a21401 	.inst	0x00a21401 ; undefined
    6950:	01040000 	.inst	0x01040000 ; undefined
    6954:	3f130002 	.inst	0x3f130002 ; undefined
    6958:	0600001b 	.inst	0x0600001b ; undefined
    695c:	a2140168 	.inst	0xa2140168 ; undefined
    6960:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6964:	13000101 	sbfx	w1, w8, #0, #1
    6968:	00002dc2 	udf	#11714
    696c:	14016906 	b	60d84 <__stack_size+0x5cd84>
    6970:	000000a2 	udf	#162
    6974:	00000104 	udf	#260
    6978:	06041400 	.inst	0x06041400 ; undefined
    697c:	62090150 	.inst	0x62090150 ; undefined
    6980:	10000010 	adr	x16, 6980 <__stack_size+0x2980>
    6984:	00323364 	.inst	0x00323364 ; NYI
    6988:	13015206 	sbfx	w6, w16, #1, #20
    698c:	000000a2 	udf	#162
    6990:	74696210 	.inst	0x74696210 ; undefined
    6994:	016a0600 	.inst	0x016a0600 ; undefined
    6998:	000ebc06 	.inst	0x000ebc06 ; undefined
    699c:	96110000 	bl	fffffffff844699c <_sp+0xffffffff9740699c>
    69a0:	06000025 	.inst	0x06000025 ; undefined
    69a4:	3d02016b 	str	b11, [x11, #128]
    69a8:	05000010 	orr	z16.s, z16.s, #0x1
    69ac:	00001062 	udf	#4194
    69b0:	70060412 	adr	x18, 12a33 <__stack_size+0xea33>
    69b4:	11b10201 	.inst	0x11b10201 ; undefined
    69b8:	ee130000 	.inst	0xee130000 ; undefined
    69bc:	06000022 	.inst	0x06000022 ; undefined
    69c0:	a2100171 	.inst	0xa2100171 ; undefined
    69c4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    69c8:	13001f01 	sxtb	w1, w24
    69cc:	00001ba3 	udf	#7075
    69d0:	11017206 	add	w6, w16, #0x5c
    69d4:	000000a2 	udf	#162
    69d8:	001e0104 	.inst	0x001e0104 ; undefined
    69dc:	0024d413 	.inst	0x0024d413 ; NYI
    69e0:	01730600 	.inst	0x01730600 ; undefined
    69e4:	0000a211 	udf	#41489
    69e8:	1d010400 	.inst	0x1d010400 ; undefined
    69ec:	228e1300 	.inst	0x228e1300 ; undefined
    69f0:	74060000 	.inst	0x74060000 ; undefined
    69f4:	00a21001 	.inst	0x00a21001 ; undefined
    69f8:	01040000 	.inst	0x01040000 ; undefined
    69fc:	1313001c 	sbfiz	w28, w0, #13, #1
    6a00:	0600002f 	.inst	0x0600002f ; undefined
    6a04:	a2100175 	.inst	0xa2100175 ; undefined
    6a08:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6a0c:	13001b01 	sbfx	w1, w24, #0, #7
    6a10:	00002f1d 	udf	#12061
    6a14:	11017606 	add	w6, w16, #0x5d
    6a18:	000000a2 	udf	#162
    6a1c:	001a0104 	.inst	0x001a0104 ; undefined
    6a20:	002f2713 	.inst	0x002f2713 ; NYI
    6a24:	01770600 	.inst	0x01770600 ; undefined
    6a28:	0000a210 	udf	#41488
    6a2c:	19010400 	.inst	0x19010400 ; undefined
    6a30:	1ed41300 	.inst	0x1ed41300 ; undefined
    6a34:	78060000 	sturh	w0, [x0, #96]
    6a38:	00a21001 	.inst	0x00a21001 ; undefined
    6a3c:	01040000 	.inst	0x01040000 ; undefined
    6a40:	c1130018 	.inst	0xc1130018 ; undefined
    6a44:	06000020 	.inst	0x06000020 ; undefined
    6a48:	a2110179 	.inst	0xa2110179 ; undefined
    6a4c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6a50:	13001404 	sbfx	w4, w0, #0, #6
    6a54:	00002096 	udf	#8342
    6a58:	10017a06 	adr	x6, 9998 <__stack_size+0x5998>
    6a5c:	000000a2 	udf	#162
    6a60:	00130104 	.inst	0x00130104 ; undefined
    6a64:	001da413 	.inst	0x001da413 ; undefined
    6a68:	017b0600 	.inst	0x017b0600 ; undefined
    6a6c:	0000a210 	udf	#41488
    6a70:	12010400 	and	w0, w0, #0x80000001
    6a74:	21721300 	.inst	0x21721300 ; undefined
    6a78:	7c060000 	stur	h0, [x0, #96]
    6a7c:	00a21001 	.inst	0x00a21001 ; undefined
    6a80:	02040000 	.inst	0x02040000 ; undefined
    6a84:	3f130010 	.inst	0x3f130010 ; undefined
    6a88:	06000026 	.inst	0x06000026 ; undefined
    6a8c:	a210017d 	.inst	0xa210017d ; undefined
    6a90:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6a94:	13000808 	sbfx	w8, w0, #0, #3
    6a98:	00002b85 	udf	#11141
    6a9c:	13017e06 	asr	w6, w16, #1
    6aa0:	000000a2 	udf	#162
    6aa4:	00050304 	.inst	0x00050304 ; undefined
    6aa8:	002c8413 	.inst	0x002c8413 ; NYI
    6aac:	017f0600 	.inst	0x017f0600 ; undefined
    6ab0:	0000a210 	udf	#41488
    6ab4:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    6ab8:	2f3f1300 	.inst	0x2f3f1300 ; undefined
    6abc:	80060000 	.inst	0x80060000 ; undefined
    6ac0:	00a21001 	.inst	0x00a21001 ; undefined
    6ac4:	01040000 	.inst	0x01040000 ; undefined
    6ac8:	04130003 	umulh	z3.b, p0/m, z3.b, z0.b
    6acc:	06000024 	.inst	0x06000024 ; undefined
    6ad0:	a2100181 	.inst	0xa2100181 ; undefined
    6ad4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6ad8:	13000201 	sbfx	w1, w16, #0, #1
    6adc:	00002903 	udf	#10499
    6ae0:	10018206 	adr	x6, 9b20 <__stack_size+0x5b20>
    6ae4:	000000a2 	udf	#162
    6ae8:	00000204 	udf	#516
    6aec:	06081200 	.inst	0x06081200 ; undefined
    6af0:	d809016d 	prfm	plil3strm, 18b1c <__stack_size+0x14b1c>
    6af4:	15000011 	b	4006b38 <__stack_size+0x4002b38>
    6af8:	00323364 	.inst	0x00323364 ; NYI
    6afc:	10016f06 	adr	x6, 98dc <__stack_size+0x58dc>
    6b00:	000000a2 	udf	#162
    6b04:	69621500 	ldpsw	x0, x5, [x8, #-240]
    6b08:	83060074 	.inst	0x83060074 ; undefined
    6b0c:	10740301 	adr	x1, eeb6c <__stack_size+0xeab6c>
    6b10:	00040000 	.inst	0x00040000 ; undefined
    6b14:	001a6b11 	.inst	0x001a6b11 ; undefined
    6b18:	01840600 	.inst	0x01840600 ; undefined
    6b1c:	0011b102 	.inst	0x0011b102 ; undefined
    6b20:	11d80500 	.inst	0x11d80500 ; undefined
    6b24:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    6b28:	02018906 	.inst	0x02018906 ; undefined
    6b2c:	00001327 	udf	#4903
    6b30:	0028b013 	.inst	0x0028b013 ; NYI
    6b34:	018a0600 	.inst	0x018a0600 ; undefined
    6b38:	0000a211 	udf	#41489
    6b3c:	1a060400 	.inst	0x1a060400 ; undefined
    6b40:	21571300 	.inst	0x21571300 ; undefined
    6b44:	8b060000 	add	x0, x0, x6
    6b48:	00a21101 	.inst	0x00a21101 ; undefined
    6b4c:	01040000 	.inst	0x01040000 ; undefined
    6b50:	ed130019 	.inst	0xed130019 ; undefined
    6b54:	06000017 	.inst	0x06000017 ; undefined
    6b58:	a211018c 	.inst	0xa211018c ; undefined
    6b5c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6b60:	13001801 	sbfx	w1, w0, #0, #7
    6b64:	000029cb 	udf	#10699
    6b68:	11018d06 	add	w6, w8, #0x63
    6b6c:	000000a2 	udf	#162
    6b70:	00100804 	.inst	0x00100804 ; undefined
    6b74:	002f5a13 	.inst	0x002f5a13 ; NYI
    6b78:	018e0600 	.inst	0x018e0600 ; undefined
    6b7c:	0000a211 	udf	#41489
    6b80:	0e020400 	dup	v0.4h, v0.h[0]
    6b84:	2b341300 	adds	w0, w24, w20, uxtb #4
    6b88:	8f060000 	.inst	0x8f060000 ; undefined
    6b8c:	00a21101 	.inst	0x00a21101 ; undefined
    6b90:	01040000 	.inst	0x01040000 ; undefined
    6b94:	6513000d 	.inst	0x6513000d ; undefined
    6b98:	06000029 	.inst	0x06000029 ; undefined
    6b9c:	a2110190 	.inst	0xa2110190 ; undefined
    6ba0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6ba4:	13000c01 	sbfx	w1, w0, #0, #4
    6ba8:	00001d38 	udf	#7480
    6bac:	11019106 	add	w6, w8, #0x64
    6bb0:	000000a2 	udf	#162
    6bb4:	000b0104 	.inst	0x000b0104 ; undefined
    6bb8:	001f8413 	.inst	0x001f8413 ; undefined
    6bbc:	01920600 	.inst	0x01920600 ; undefined
    6bc0:	0000a211 	udf	#41489
    6bc4:	0a010400 	and	w0, w0, w1, lsl #1
    6bc8:	23341300 	.inst	0x23341300 ; undefined
    6bcc:	93060000 	.inst	0x93060000 ; undefined
    6bd0:	00a21101 	.inst	0x00a21101 ; undefined
    6bd4:	01040000 	.inst	0x01040000 ; undefined
    6bd8:	93130009 	.inst	0x93130009 ; undefined
    6bdc:	0600001b 	.inst	0x0600001b ; undefined
    6be0:	a2110194 	.inst	0xa2110194 ; undefined
    6be4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6be8:	13000801 	sbfx	w1, w0, #0, #3
    6bec:	00002bbd 	udf	#11197
    6bf0:	11019506 	add	w6, w8, #0x65
    6bf4:	000000a2 	udf	#162
    6bf8:	00070104 	.inst	0x00070104 ; undefined
    6bfc:	002bb513 	.inst	0x002bb513 ; NYI
    6c00:	01960600 	.inst	0x01960600 ; undefined
    6c04:	0000a211 	udf	#41489
    6c08:	06010400 	.inst	0x06010400 ; undefined
    6c0c:	28a81300 	stp	w0, w4, [x24], #-192
    6c10:	97060000 	bl	fffffffffc186c10 <_sp+0xffffffff9b146c10>
    6c14:	00a21101 	.inst	0x00a21101 ; undefined
    6c18:	01040000 	.inst	0x01040000 ; undefined
    6c1c:	4b130005 	sub	w5, w0, w19
    6c20:	06000029 	.inst	0x06000029 ; undefined
    6c24:	a2110198 	.inst	0xa2110198 ; undefined
    6c28:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6c2c:	13000401 	sbfx	w1, w0, #0, #2
    6c30:	00002c10 	udf	#11280
    6c34:	11019906 	add	w6, w8, #0x66
    6c38:	000000a2 	udf	#162
    6c3c:	00030104 	.inst	0x00030104 ; undefined
    6c40:	00241c13 	.inst	0x00241c13 ; NYI
    6c44:	019a0600 	.inst	0x019a0600 ; undefined
    6c48:	0000a211 	udf	#41489
    6c4c:	02010400 	.inst	0x02010400 ; undefined
    6c50:	22d81300 	.inst	0x22d81300 ; undefined
    6c54:	9b060000 	madd	x0, x0, x6, x0
    6c58:	00a21101 	.inst	0x00a21101 ; undefined
    6c5c:	01040000 	.inst	0x01040000 ; undefined
    6c60:	12000001 	and	w1, w0, #0x1
    6c64:	01860608 	.inst	0x01860608 ; undefined
    6c68:	00134e09 	.inst	0x00134e09 ; undefined
    6c6c:	33641500 	.inst	0x33641500 ; undefined
    6c70:	88060032 	stxr	w6, w18, [x1]
    6c74:	00a21001 	.inst	0x00a21001 ; undefined
    6c78:	15000000 	b	4006c78 <__stack_size+0x4002c78>
    6c7c:	00746962 	.inst	0x00746962 ; undefined
    6c80:	03019c06 	.inst	0x03019c06 ; undefined
    6c84:	000011ea 	udf	#4586
    6c88:	62110004 	.inst	0x62110004 ; undefined
    6c8c:	06000028 	.inst	0x06000028 ; undefined
    6c90:	2702019d 	.inst	0x2702019d ; undefined
    6c94:	05000013 	orr	z19.s, z19.s, #0x1
    6c98:	0000134e 	udf	#4942
    6c9c:	a2060412 	.inst	0xa2060412 ; undefined
    6ca0:	13af0201 	.inst	0x13af0201 ; undefined
    6ca4:	54130000 	b.eq	2cca4 <__stack_size+0x28ca4>  // b.none
    6ca8:	06000027 	.inst	0x06000027 ; undefined
    6cac:	a21101a3 	.inst	0xa21101a3 ; undefined
    6cb0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6cb4:	13001808 	sbfx	w8, w0, #0, #7
    6cb8:	00002282 	udf	#8834
    6cbc:	1101a406 	add	w6, w0, #0x69
    6cc0:	000000a2 	udf	#162
    6cc4:	00100804 	.inst	0x00100804 ; undefined
    6cc8:	001b0e13 	.inst	0x001b0e13 ; undefined
    6ccc:	01a50600 	.inst	0x01a50600 ; undefined
    6cd0:	0000a211 	udf	#41489
    6cd4:	08080400 	stxrb	w8, w0, [x0]
    6cd8:	2e721300 	uaddw	v0.4s, v24.4s, v18.4h
    6cdc:	a6060000 	.inst	0xa6060000 ; undefined
    6ce0:	00a21101 	.inst	0x00a21101 ; undefined
    6ce4:	08040000 	stxrb	w4, w0, [x0]
    6ce8:	12000000 	and	w0, w0, #0x1
    6cec:	019f0608 	.inst	0x019f0608 ; undefined
    6cf0:	0013d609 	.inst	0x0013d609 ; undefined
    6cf4:	33641500 	.inst	0x33641500 ; undefined
    6cf8:	a1060032 	.inst	0xa1060032 ; undefined
    6cfc:	00a21001 	.inst	0x00a21001 ; undefined
    6d00:	15000000 	b	4006d00 <__stack_size+0x4002d00>
    6d04:	00746962 	.inst	0x00746962 ; undefined
    6d08:	0301a706 	.inst	0x0301a706 ; undefined
    6d0c:	00001360 	udf	#4960
    6d10:	5d110004 	.inst	0x5d110004 ; undefined
    6d14:	06000028 	.inst	0x06000028 ; undefined
    6d18:	af0201a8 	.inst	0xaf0201a8 ; undefined
    6d1c:	05000013 	orr	z19.s, z19.s, #0x1
    6d20:	000013d6 	udf	#5078
    6d24:	ad060412 	stp	q18, q1, [x0, #192]
    6d28:	14150201 	b	54752c <__stack_size+0x54352c>
    6d2c:	e9130000 	.inst	0xe9130000 ; undefined
    6d30:	06000026 	.inst	0x06000026 ; undefined
    6d34:	a21101ae 	.inst	0xa21101ae ; undefined
    6d38:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6d3c:	13001808 	sbfx	w8, w0, #0, #7
    6d40:	00001aee 	udf	#6894
    6d44:	1101af06 	add	w6, w24, #0x6b
    6d48:	000000a2 	udf	#162
    6d4c:	00001804 	udf	#6148
    6d50:	06081200 	.inst	0x06081200 ; undefined
    6d54:	3c0901aa 	stur	b10, [x13, #144]
    6d58:	15000014 	b	4006da8 <__stack_size+0x4002da8>
    6d5c:	00323364 	.inst	0x00323364 ; NYI
    6d60:	1001ac06 	adr	x6, a2e0 <__stack_size+0x62e0>
    6d64:	000000a2 	udf	#162
    6d68:	69621500 	ldpsw	x0, x5, [x8, #-240]
    6d6c:	b0060074 	adrp	x20, c013000 <__stack_size+0xc00f000>
    6d70:	13e80301 	.inst	0x13e80301 ; undefined
    6d74:	00040000 	.inst	0x00040000 ; undefined
    6d78:	001a6611 	.inst	0x001a6611 ; undefined
    6d7c:	01b10600 	.inst	0x01b10600 ; undefined
    6d80:	00141502 	.inst	0x00141502 ; undefined
    6d84:	143c0500 	b	f08184 <__stack_size+0xf04184>
    6d88:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    6d8c:	0201b606 	.inst	0x0201b606 ; undefined
    6d90:	00001602 	udf	#5634
    6d94:	002aa313 	.inst	0x002aa313 ; NYI
    6d98:	01b70600 	.inst	0x01b70600 ; undefined
    6d9c:	0000a211 	udf	#41489
    6da0:	1f010400 	fmadd	s0, s0, s1, s1
    6da4:	187b1300 	ldr	w0, fd004 <__stack_size+0xf9004>
    6da8:	b8060000 	stur	w0, [x0, #96]
    6dac:	00a21101 	.inst	0x00a21101 ; undefined
    6db0:	01040000 	.inst	0x01040000 ; undefined
    6db4:	9413001e 	bl	4c6e2c <__stack_size+0x4c2e2c>
    6db8:	0600002e 	.inst	0x0600002e ; undefined
    6dbc:	a21101b9 	.inst	0xa21101b9 ; undefined
    6dc0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6dc4:	13001d01 	sxtb	w1, w8
    6dc8:	000018b1 	udf	#6321
    6dcc:	1101ba06 	add	w6, w16, #0x6e
    6dd0:	000000a2 	udf	#162
    6dd4:	001c0104 	.inst	0x001c0104 ; undefined
    6dd8:	002a1e13 	.inst	0x002a1e13 ; NYI
    6ddc:	01bb0600 	.inst	0x01bb0600 ; undefined
    6de0:	0000a211 	udf	#41489
    6de4:	1b010400 	madd	w0, w0, w1, w1
    6de8:	1cfd1300 	ldr	s0, 1048 <__stack_size-0x2fb8>
    6dec:	bc060000 	stur	s0, [x0, #96]
    6df0:	00a21101 	.inst	0x00a21101 ; undefined
    6df4:	01040000 	.inst	0x01040000 ; undefined
    6df8:	5713001a 	.inst	0x5713001a ; undefined
    6dfc:	06000021 	.inst	0x06000021 ; undefined
    6e00:	a21101bd 	.inst	0xa21101bd ; undefined
    6e04:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6e08:	13001901 	sbfx	w1, w8, #0, #7
    6e0c:	0000229b 	udf	#8859
    6e10:	1101be06 	add	w6, w16, #0x6f
    6e14:	000000a2 	udf	#162
    6e18:	00180104 	.inst	0x00180104 ; undefined
    6e1c:	001e2513 	.inst	0x001e2513 ; undefined
    6e20:	01bf0600 	.inst	0x01bf0600 ; undefined
    6e24:	0000a211 	udf	#41489
    6e28:	10080400 	adr	x0, 16ea8 <__stack_size+0x12ea8>
    6e2c:	2b671300 	.inst	0x2b671300 ; undefined
    6e30:	c0060000 	.inst	0xc0060000 ; undefined
    6e34:	00a21101 	.inst	0x00a21101 ; undefined
    6e38:	01040000 	.inst	0x01040000 ; undefined
    6e3c:	2113000f 	.inst	0x2113000f ; undefined
    6e40:	06000025 	.inst	0x06000025 ; undefined
    6e44:	a21101c1 	.inst	0xa21101c1 ; undefined
    6e48:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6e4c:	13000e01 	sbfx	w1, w16, #0, #4
    6e50:	00001f97 	udf	#8087
    6e54:	1101c206 	add	w6, w16, #0x70
    6e58:	000000a2 	udf	#162
    6e5c:	000d0104 	.inst	0x000d0104 ; undefined
    6e60:	0018d313 	.inst	0x0018d313 ; undefined
    6e64:	01c30600 	.inst	0x01c30600 ; undefined
    6e68:	0000a211 	udf	#41489
    6e6c:	0c010400 	.inst	0x0c010400 ; undefined
    6e70:	25fd1300 	whilege	p0.d, x24, x29
    6e74:	c4060000 	ld1sb	{z0.d}, p0/z, [x0, z6.d, uxtw]
    6e78:	00a21101 	.inst	0x00a21101 ; undefined
    6e7c:	01040000 	.inst	0x01040000 ; undefined
    6e80:	da13000b 	sbc	x11, x0, x19
    6e84:	06000017 	.inst	0x06000017 ; undefined
    6e88:	a21101c5 	.inst	0xa21101c5 ; undefined
    6e8c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6e90:	13000a01 	sbfx	w1, w16, #0, #3
    6e94:	0000237c 	udf	#9084
    6e98:	1101c606 	add	w6, w16, #0x71
    6e9c:	000000a2 	udf	#162
    6ea0:	00090104 	.inst	0x00090104 ; undefined
    6ea4:	00255e13 	.inst	0x00255e13 ; NYI
    6ea8:	01c70600 	.inst	0x01c70600 ; undefined
    6eac:	0000a211 	udf	#41489
    6eb0:	08010400 	stxrb	w1, w0, [x0]
    6eb4:	26b71300 	.inst	0x26b71300 ; undefined
    6eb8:	c8060000 	stxr	w6, x0, [x0]
    6ebc:	00a21101 	.inst	0x00a21101 ; undefined
    6ec0:	01040000 	.inst	0x01040000 ; undefined
    6ec4:	1c130007 	ldr	s7, 2cec4 <__stack_size+0x28ec4>
    6ec8:	06000019 	.inst	0x06000019 ; undefined
    6ecc:	a21101c9 	.inst	0xa21101c9 ; undefined
    6ed0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6ed4:	13000601 	sbfx	w1, w16, #0, #2
    6ed8:	000023f3 	udf	#9203
    6edc:	1101ca06 	add	w6, w16, #0x72
    6ee0:	000000a2 	udf	#162
    6ee4:	00050104 	.inst	0x00050104 ; undefined
    6ee8:	00196a13 	.inst	0x00196a13 ; undefined
    6eec:	01cb0600 	.inst	0x01cb0600 ; undefined
    6ef0:	0000a211 	udf	#41489
    6ef4:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    6ef8:	278c1300 	.inst	0x278c1300 ; undefined
    6efc:	cc060000 	.inst	0xcc060000 ; undefined
    6f00:	00a21101 	.inst	0x00a21101 ; undefined
    6f04:	01040000 	.inst	0x01040000 ; undefined
    6f08:	a6130003 	.inst	0xa6130003 ; undefined
    6f0c:	06000027 	.inst	0x06000027 ; undefined
    6f10:	a21101cd 	.inst	0xa21101cd ; undefined
    6f14:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6f18:	13000201 	sbfx	w1, w16, #0, #1
    6f1c:	000027b8 	udf	#10168
    6f20:	1101ce06 	add	w6, w16, #0x73
    6f24:	000000a2 	udf	#162
    6f28:	00010104 	.inst	0x00010104 ; undefined
    6f2c:	002c1f13 	.inst	0x002c1f13 ; NYI
    6f30:	01cf0600 	.inst	0x01cf0600 ; undefined
    6f34:	0000a211 	udf	#41489
    6f38:	00010400 	.inst	0x00010400 ; undefined
    6f3c:	08120000 	stxrb	w18, w0, [x0]
    6f40:	0901b306 	.inst	0x0901b306 ; undefined
    6f44:	00001629 	udf	#5673
    6f48:	32336415 	orr	w21, w0, #0xffffe07f
    6f4c:	01b50600 	.inst	0x01b50600 ; undefined
    6f50:	0000a210 	udf	#41488
    6f54:	62150000 	.inst	0x62150000 ; undefined
    6f58:	06007469 	.inst	0x06007469 ; undefined
    6f5c:	4e0301d0 	tbl	v16.16b, {v14.16b}, v3.16b
    6f60:	04000014 	add	z20.b, p0/m, z20.b, z0.b
    6f64:	2c311100 	stnp	s0, s4, [x8, #-120]
    6f68:	d1060000 	sub	x0, x0, #0x180
    6f6c:	16020201 	b	fffffffff8087770 <_sp+0xffffffff97047770>
    6f70:	29050000 	stp	w0, w0, [x0, #40]
    6f74:	12000016 	and	w22, w0, #0x1
    6f78:	01d70604 	.inst	0x01d70604 ; undefined
    6f7c:	00167902 	.inst	0x00167902 ; undefined
    6f80:	29821300 	stp	w0, w4, [x24, #16]!
    6f84:	d8060000 	prfm	pldl1keep, 12f84 <__stack_size+0xef84>
    6f88:	00a21101 	.inst	0x00a21101 ; undefined
    6f8c:	02040000 	.inst	0x02040000 ; undefined
    6f90:	7e13001e 	.inst	0x7e13001e ; undefined
    6f94:	06000024 	.inst	0x06000024 ; undefined
    6f98:	a21101d9 	.inst	0xa21101d9 ; undefined
    6f9c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    6fa0:	13001d01 	sxtb	w1, w8
    6fa4:	0000220f 	udf	#8719
    6fa8:	1101da06 	add	w6, w16, #0x76
    6fac:	000000a2 	udf	#162
    6fb0:	00001d04 	udf	#7428
    6fb4:	06081200 	.inst	0x06081200 ; undefined
    6fb8:	a00901d4 	.inst	0xa00901d4 ; undefined
    6fbc:	15000016 	b	4007014 <__stack_size+0x4003014>
    6fc0:	00323364 	.inst	0x00323364 ; NYI
    6fc4:	1001d606 	adr	x6, aa84 <__stack_size+0x6a84>
    6fc8:	000000a2 	udf	#162
    6fcc:	69621500 	ldpsw	x0, x5, [x8, #-240]
    6fd0:	db060074 	.inst	0xdb060074 ; undefined
    6fd4:	163b0301 	b	fffffffff8ec7bd8 <_sp+0xffffffff97e87bd8>
    6fd8:	00040000 	.inst	0x00040000 ; undefined
    6fdc:	002f6f11 	.inst	0x002f6f11 ; NYI
    6fe0:	01dc0600 	.inst	0x01dc0600 ; undefined
    6fe4:	00167902 	.inst	0x00167902 ; undefined
    6fe8:	16a00500 	b	fffffffffa8083e8 <_sp+0xffffffff997c83e8>
    6fec:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    6ff0:	0201e106 	.inst	0x0201e106 ; undefined
    6ff4:	00001745 	udf	#5957
    6ff8:	002c9a13 	.inst	0x002c9a13 ; NYI
    6ffc:	01e20600 	.inst	0x01e20600 ; undefined
    7000:	0000a211 	udf	#41489
    7004:	160a0400 	b	fffffffff8288004 <_sp+0xffffffff97248004>
    7008:	1ad91300 	.inst	0x1ad91300 ; undefined
    700c:	e3060000 	.inst	0xe3060000 ; undefined
    7010:	00a21101 	.inst	0x00a21101 ; undefined
    7014:	01040000 	.inst	0x01040000 ; undefined
    7018:	da130015 	sbc	x21, x0, x19
    701c:	06000028 	.inst	0x06000028 ; undefined
    7020:	a21101e4 	.inst	0xa21101e4 ; undefined
    7024:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7028:	13001203 	sbfx	w3, w16, #0, #5
    702c:	000028f2 	udf	#10482
    7030:	1101e506 	add	w6, w8, #0x79
    7034:	000000a2 	udf	#162
    7038:	00100204 	.inst	0x00100204 ; undefined
    703c:	00290e13 	.inst	0x00290e13 ; NYI
    7040:	01e60600 	.inst	0x01e60600 ; undefined
    7044:	0000a211 	udf	#41489
    7048:	060a0400 	.inst	0x060a0400 ; undefined
    704c:	205a1300 	.inst	0x205a1300 ; undefined
    7050:	e7060000 	.inst	0xe7060000 ; undefined
    7054:	00a21101 	.inst	0x00a21101 ; undefined
    7058:	01040000 	.inst	0x01040000 ; undefined
    705c:	a9130005 	stp	x5, x0, [x0, #304]
    7060:	0600002d 	.inst	0x0600002d ; undefined
    7064:	a21101e8 	.inst	0xa21101e8 ; undefined
    7068:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    706c:	13000203 	sbfx	w3, w16, #0, #1
    7070:	00001755 	udf	#5973
    7074:	1101e906 	add	w6, w8, #0x7a
    7078:	000000a2 	udf	#162
    707c:	00000204 	udf	#516
    7080:	06081200 	.inst	0x06081200 ; undefined
    7084:	6c0901de 	stnp	d30, d0, [x14, #144]
    7088:	15000017 	b	40070e4 <__stack_size+0x40030e4>
    708c:	00323364 	.inst	0x00323364 ; NYI
    7090:	1001e006 	adr	x6, ac90 <__stack_size+0x6c90>
    7094:	000000a2 	udf	#162
    7098:	69621500 	ldpsw	x0, x5, [x8, #-240]
    709c:	ea060074 	ands	x20, x3, x6
    70a0:	16b20301 	b	fffffffffac87ca4 <_sp+0xffffffff99c47ca4>
    70a4:	00040000 	.inst	0x00040000 ; undefined
    70a8:	00276011 	.inst	0x00276011 ; NYI
    70ac:	01eb0600 	.inst	0x01eb0600 ; undefined
    70b0:	00174502 	.inst	0x00174502 ; undefined
    70b4:	176c0500 	b	fffffffffdb084b4 <_sp+0xffffffff9cac84b4>
    70b8:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    70bc:	0201f006 	.inst	0x0201f006 ; undefined
    70c0:	00001811 	udf	#6161
    70c4:	00219913 	.inst	0x00219913 ; NYI
    70c8:	01f10600 	.inst	0x01f10600 ; undefined
    70cc:	0000a211 	udf	#41489
    70d0:	160a0400 	b	fffffffff82880d0 <_sp+0xffffffff972480d0>
    70d4:	20af1300 	.inst	0x20af1300 ; undefined
    70d8:	f2060000 	ands	x0, x0, #0x400000004000000
    70dc:	00a21101 	.inst	0x00a21101 ; undefined
    70e0:	01040000 	.inst	0x01040000 ; undefined
    70e4:	da130015 	sbc	x21, x0, x19
    70e8:	06000028 	.inst	0x06000028 ; undefined
    70ec:	a21101f3 	.inst	0xa21101f3 ; undefined
    70f0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    70f4:	13001203 	sbfx	w3, w16, #0, #5
    70f8:	00001d2a 	udf	#7466
    70fc:	1101f406 	add	w6, w0, #0x7d
    7100:	000000a2 	udf	#162
    7104:	00100204 	.inst	0x00100204 ; undefined
    7108:	0021bd13 	.inst	0x0021bd13 ; NYI
    710c:	01f50600 	.inst	0x01f50600 ; undefined
    7110:	0000a211 	udf	#41489
    7114:	060a0400 	.inst	0x060a0400 ; undefined
    7118:	1f0e1300 	fmadd	s0, s24, s14, s4
    711c:	f6060000 	.inst	0xf6060000 ; undefined
    7120:	00a21101 	.inst	0x00a21101 ; undefined
    7124:	01040000 	.inst	0x01040000 ; undefined
    7128:	a9130005 	stp	x5, x0, [x0, #304]
    712c:	0600002d 	.inst	0x0600002d ; undefined
    7130:	a21101f7 	.inst	0xa21101f7 ; undefined
    7134:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7138:	13000203 	sbfx	w3, w16, #0, #1
    713c:	00002f31 	udf	#12081
    7140:	1101f806 	add	w6, w0, #0x7e
    7144:	000000a2 	udf	#162
    7148:	00000204 	udf	#516
    714c:	06081200 	.inst	0x06081200 ; undefined
    7150:	380901ed 	sturb	w13, [x15, #144]
    7154:	15000018 	b	40071b4 <__stack_size+0x40031b4>
    7158:	00323364 	.inst	0x00323364 ; NYI
    715c:	1001ef06 	adr	x6, af3c <__stack_size+0x6f3c>
    7160:	000000a2 	udf	#162
    7164:	69621500 	ldpsw	x0, x5, [x8, #-240]
    7168:	f9060074 	str	x20, [x3, #3072]
    716c:	177e0301 	b	fffffffffdf87d70 <_sp+0xffffffff9cf47d70>
    7170:	00040000 	.inst	0x00040000 ; undefined
    7174:	00218d11 	.inst	0x00218d11 ; NYI
    7178:	01fa0600 	.inst	0x01fa0600 ; undefined
    717c:	00181102 	.inst	0x00181102 ; undefined
    7180:	18380500 	ldr	w0, 77220 <__stack_size+0x73220>
    7184:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    7188:	0201ff06 	.inst	0x0201ff06 ; undefined
    718c:	000018dd 	udf	#6365
    7190:	00219913 	.inst	0x00219913 ; NYI
    7194:	02000600 	.inst	0x02000600 ; undefined
    7198:	0000a211 	udf	#41489
    719c:	160a0400 	b	fffffffff828819c <_sp+0xffffffff9724819c>
    71a0:	20af1300 	.inst	0x20af1300 ; undefined
    71a4:	01060000 	.inst	0x01060000 ; undefined
    71a8:	00a21102 	.inst	0x00a21102 ; undefined
    71ac:	01040000 	.inst	0x01040000 ; undefined
    71b0:	da130015 	sbc	x21, x0, x19
    71b4:	06000028 	.inst	0x06000028 ; undefined
    71b8:	a2110202 	.inst	0xa2110202 ; undefined
    71bc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    71c0:	13001203 	sbfx	w3, w16, #0, #5
    71c4:	00001d2a 	udf	#7466
    71c8:	11020306 	add	w6, w24, #0x80
    71cc:	000000a2 	udf	#162
    71d0:	00100204 	.inst	0x00100204 ; undefined
    71d4:	0021bd13 	.inst	0x0021bd13 ; NYI
    71d8:	02040600 	.inst	0x02040600 ; undefined
    71dc:	0000a211 	udf	#41489
    71e0:	060a0400 	.inst	0x060a0400 ; undefined
    71e4:	1f0e1300 	fmadd	s0, s24, s14, s4
    71e8:	05060000 	.inst	0x05060000 ; undefined
    71ec:	00a21102 	.inst	0x00a21102 ; undefined
    71f0:	01040000 	.inst	0x01040000 ; undefined
    71f4:	a9130005 	stp	x5, x0, [x0, #304]
    71f8:	0600002d 	.inst	0x0600002d ; undefined
    71fc:	a2110206 	.inst	0xa2110206 ; undefined
    7200:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7204:	13000203 	sbfx	w3, w16, #0, #1
    7208:	00002f31 	udf	#12081
    720c:	11020706 	add	w6, w24, #0x81
    7210:	000000a2 	udf	#162
    7214:	00000204 	udf	#516
    7218:	06081200 	.inst	0x06081200 ; undefined
    721c:	040901fc 	umax	z28.b, p0/m, z28.b, z15.b
    7220:	15000019 	b	4007284 <__stack_size+0x4003284>
    7224:	00323364 	.inst	0x00323364 ; NYI
    7228:	1001fe06 	adr	x6, b1e8 <__stack_size+0x71e8>
    722c:	000000a2 	udf	#162
    7230:	69621500 	ldpsw	x0, x5, [x8, #-240]
    7234:	08060074 	stxrb	w6, w20, [x3]
    7238:	184a0302 	ldr	w2, 9b298 <__stack_size+0x97298>
    723c:	00040000 	.inst	0x00040000 ; undefined
    7240:	00250211 	.inst	0x00250211 ; NYI
    7244:	02090600 	.inst	0x02090600 ; undefined
    7248:	0018dd02 	.inst	0x0018dd02 ; undefined
    724c:	19040500 	.inst	0x19040500 ; undefined
    7250:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    7254:	02020e06 	.inst	0x02020e06 ; undefined
    7258:	000019a9 	udf	#6569
    725c:	00219913 	.inst	0x00219913 ; NYI
    7260:	020f0600 	.inst	0x020f0600 ; undefined
    7264:	0000a211 	udf	#41489
    7268:	160a0400 	b	fffffffff8288268 <_sp+0xffffffff97248268>
    726c:	20af1300 	.inst	0x20af1300 ; undefined
    7270:	10060000 	adr	x0, 13270 <__stack_size+0xf270>
    7274:	00a21102 	.inst	0x00a21102 ; undefined
    7278:	01040000 	.inst	0x01040000 ; undefined
    727c:	da130015 	sbc	x21, x0, x19
    7280:	06000028 	.inst	0x06000028 ; undefined
    7284:	a2110211 	.inst	0xa2110211 ; undefined
    7288:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    728c:	13001203 	sbfx	w3, w16, #0, #5
    7290:	00001d2a 	udf	#7466
    7294:	11021206 	add	w6, w16, #0x84
    7298:	000000a2 	udf	#162
    729c:	00100204 	.inst	0x00100204 ; undefined
    72a0:	0021bd13 	.inst	0x0021bd13 ; NYI
    72a4:	02130600 	.inst	0x02130600 ; undefined
    72a8:	0000a211 	udf	#41489
    72ac:	060a0400 	.inst	0x060a0400 ; undefined
    72b0:	1f0e1300 	fmadd	s0, s24, s14, s4
    72b4:	14060000 	b	1872b4 <__stack_size+0x1832b4>
    72b8:	00a21102 	.inst	0x00a21102 ; undefined
    72bc:	01040000 	.inst	0x01040000 ; undefined
    72c0:	a9130005 	stp	x5, x0, [x0, #304]
    72c4:	0600002d 	.inst	0x0600002d ; undefined
    72c8:	a2110215 	.inst	0xa2110215 ; undefined
    72cc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    72d0:	13000203 	sbfx	w3, w16, #0, #1
    72d4:	00002f31 	udf	#12081
    72d8:	11021606 	add	w6, w16, #0x85
    72dc:	000000a2 	udf	#162
    72e0:	00000204 	udf	#516
    72e4:	06081200 	.inst	0x06081200 ; undefined
    72e8:	d009020b 	adrp	x11, 12049000 <__stack_size+0x12045000>
    72ec:	15000019 	b	4007350 <__stack_size+0x4003350>
    72f0:	00323364 	.inst	0x00323364 ; NYI
    72f4:	10020d06 	adr	x6, b494 <__stack_size+0x7494>
    72f8:	000000a2 	udf	#162
    72fc:	69621500 	ldpsw	x0, x5, [x8, #-240]
    7300:	17060074 	b	fffffffffc1874d0 <_sp+0xffffffff9b1474d0>
    7304:	19160302 	stlurb	w2, [x24, #-160]
    7308:	00040000 	.inst	0x00040000 ; undefined
    730c:	0020e311 	.inst	0x0020e311 ; NYI
    7310:	02180600 	.inst	0x02180600 ; undefined
    7314:	0019a902 	.inst	0x0019a902 ; undefined
    7318:	19d00500 	.inst	0x19d00500 ; undefined
    731c:	98120000 	ldrsw	x0, 2b31c <__stack_size+0x2731c>
    7320:	09022706 	.inst	0x09022706 ; undefined
    7324:	00001b75 	udf	#7029
    7328:	001dc316 	.inst	0x001dc316 ; undefined
    732c:	02290600 	.inst	0x02290600 ; undefined
    7330:	0000a213 	udf	#41491
    7334:	62160000 	.inst	0x62160000 ; undefined
    7338:	06000026 	.inst	0x06000026 ; undefined
    733c:	3124022a 	adds	w10, w17, #0x900
    7340:	04000002 	add	z2.b, p0/m, z2.b, z0.b
    7344:	00257016 	.inst	0x00257016 ; NYI
    7348:	022b0600 	.inst	0x022b0600 ; undefined
    734c:	0000a213 	udf	#41491
    7350:	7b160800 	.inst	0x7b160800 ; undefined
    7354:	06000027 	.inst	0x06000027 ; undefined
    7358:	7e1d022c 	.inst	0x7e1d022c ; undefined
    735c:	0c000003 	st4	{v3.8b-v6.8b}, [x0]
    7360:	001cc616 	.inst	0x001cc616 ; undefined
    7364:	022d0600 	.inst	0x022d0600 ; undefined
    7368:	0000a213 	udf	#41491
    736c:	53161000 	ubfiz	w0, w0, #10, #5
    7370:	06000020 	.inst	0x06000020 ; undefined
    7374:	a210022e 	.inst	0xa210022e ; undefined
    7378:	14000000 	b	7378 <__stack_size+0x3378>
    737c:	0023c616 	.inst	0x0023c616 ; NYI
    7380:	022f0600 	.inst	0x022f0600 ; undefined
    7384:	0000a210 	udf	#41488
    7388:	26161800 	.inst	0x26161800 ; undefined
    738c:	06000027 	.inst	0x06000027 ; undefined
    7390:	a2100230 	.inst	0xa2100230 ; undefined
    7394:	1c000000 	ldr	s0, 7394 <__stack_size+0x3394>
    7398:	001ecb16 	.inst	0x001ecb16 ; undefined
    739c:	02310600 	.inst	0x02310600 ; undefined
    73a0:	0000a210 	udf	#41488
    73a4:	5a162000 	.inst	0x5a162000 ; undefined
    73a8:	06000029 	.inst	0x06000029 ; undefined
    73ac:	2b140232 	adds	w18, w17, w20
    73b0:	24000005 	cmphs	p5.b, p0/z, z0.b, z0.b
    73b4:	001ccd16 	.inst	0x001ccd16 ; undefined
    73b8:	02330600 	.inst	0x02330600 ; undefined
    73bc:	0006a839 	.inst	0x0006a839 ; undefined
    73c0:	2a162800 	orr	w0, w0, w22, lsl #10
    73c4:	0600001f 	.inst	0x0600001f ; undefined
    73c8:	c52c0234 	ld1sw	{z20.d}, p0/z, [x17, z12.d, uxtw #2]
    73cc:	2c000007 	stnp	s7, s0, [x0]
    73d0:	001bb216 	.inst	0x001bb216 ; undefined
    73d4:	02350600 	.inst	0x02350600 ; undefined
    73d8:	000a042b 	.inst	0x000a042b ; undefined
    73dc:	cb163000 	sub	x0, x0, x22, lsl #12
    73e0:	06000016 	.inst	0x06000016 ; undefined
    73e4:	66340236 	.inst	0x66340236 ; undefined
    73e8:	3400000c 	cbz	w12, 73e8 <__stack_size+0x33e8>
    73ec:	002cd316 	.inst	0x002cd316 ; NYI
    73f0:	02370600 	.inst	0x02370600 ; undefined
    73f4:	000eb738 	.inst	0x000eb738 ; undefined
    73f8:	e8163800 	.inst	0xe8163800 ; undefined
    73fc:	06000021 	.inst	0x06000021 ; undefined
    7400:	6f280238 	.inst	0x6f280238 ; undefined
    7404:	3c000010 	stur	b16, [x0]
    7408:	002e6416 	.inst	0x002e6416 ; NYI
    740c:	02390600 	.inst	0x02390600 ; undefined
    7410:	00135b17 	.inst	0x00135b17 ; undefined
    7414:	87164000 	.inst	0x87164000 ; undefined
    7418:	0600001d 	.inst	0x0600001d ; undefined
    741c:	e517023a 	.inst	0xe517023a ; undefined
    7420:	48000011 	stxrh	w0, w17, [x0]
    7424:	002e5f16 	.inst	0x002e5f16 ; NYI
    7428:	023b0600 	.inst	0x023b0600 ; undefined
    742c:	0013e31c 	.inst	0x0013e31c ; undefined
    7430:	82165000 	.inst	0x82165000 ; undefined
    7434:	0600001d 	.inst	0x0600001d ; undefined
    7438:	491c023c 	.inst	0x491c023c ; undefined
    743c:	58000014 	ldr	x20, 743c <__stack_size+0x343c>
    7440:	001c3e16 	.inst	0x001c3e16 ; undefined
    7444:	023d0600 	.inst	0x023d0600 ; undefined
    7448:	00163635 	.inst	0x00163635 ; undefined
    744c:	fd166000 	str	d0, [x0, #11456]
    7450:	0600001f 	.inst	0x0600001f ; undefined
    7454:	ad1a023e 	stp	q30, q0, [x17, #832]
    7458:	68000016 	.inst	0x68000016 ; undefined
    745c:	0018a316 	.inst	0x0018a316 ; undefined
    7460:	023f0600 	.inst	0x023f0600 ; undefined
    7464:	0000a210 	udf	#41488
    7468:	f3167000 	.inst	0xf3167000 ; undefined
    746c:	06000024 	.inst	0x06000024 ; undefined
    7470:	a2100240 	.inst	0xa2100240 ; undefined
    7474:	74000000 	.inst	0x74000000 ; undefined
    7478:	00262616 	.inst	0x00262616 ; NYI
    747c:	02410600 	.inst	0x02410600 ; undefined
    7480:	00177922 	.inst	0x00177922 ; undefined
    7484:	7a167800 	.inst	0x7a167800 ; undefined
    7488:	0600001f 	.inst	0x0600001f ; undefined
    748c:	45130242 	.inst	0x45130242 ; undefined
    7490:	80000018 	.inst	0x80000018 ; undefined
    7494:	00270916 	.inst	0x00270916 ; NYI
    7498:	02430600 	.inst	0x02430600 ; undefined
    749c:	00191126 	.inst	0x00191126 ; undefined
    74a0:	54168800 	b.eq	345a0 <__stack_size+0x305a0>  // b.none
    74a4:	0600001c 	.inst	0x0600001c ; undefined
    74a8:	dd270244 	.inst	0xdd270244 ; undefined
    74ac:	90000019 	adrp	x25, 7000 <__stack_size+0x3000>
    74b0:	1bf51100 	.inst	0x1bf51100 ; undefined
    74b4:	45060000 	.inst	0x45060000 ; undefined
    74b8:	19e20202 	.inst	0x19e20202 ; undefined
    74bc:	75050000 	.inst	0x75050000 ; undefined
    74c0:	1200001b 	and	w27, w0, #0x1
    74c4:	0249062c 	.inst	0x0249062c ; undefined
    74c8:	001d9809 	.inst	0x001d9809 ; undefined
    74cc:	20a51600 	.inst	0x20a51600 ; undefined
    74d0:	4b060000 	sub	w0, w0, w6
    74d4:	00721102 	.inst	0x00721102 ; undefined
    74d8:	16000000 	b	fffffffff80074d8 <_sp+0xffffffff96fc74d8>
    74dc:	0000299c 	udf	#10652
    74e0:	11024c06 	add	w6, w0, #0x93
    74e4:	00000072 	udf	#114
    74e8:	29921601 	stp	w1, w5, [x16, #144]!
    74ec:	4d060000 	.inst	0x4d060000 ; undefined
    74f0:	00721102 	.inst	0x00721102 ; undefined
    74f4:	16020000 	b	fffffffff80874f4 <_sp+0xffffffff970474f4>
    74f8:	000019c2 	udf	#6594
    74fc:	11024e06 	add	w6, w16, #0x93
    7500:	00000072 	udf	#114
    7504:	2aef1603 	orn	w3, w16, w15, ror #5
    7508:	4f060000 	.inst	0x4f060000 ; undefined
    750c:	00721102 	.inst	0x00721102 ; undefined
    7510:	16040000 	b	fffffffff8107510 <_sp+0xffffffff970c7510>
    7514:	000022ca 	udf	#8906
    7518:	11025006 	add	w6, w0, #0x94
    751c:	00000072 	udf	#114
    7520:	240c1605 	cmphs	p5.b, p5/z, z16.b, z12.b
    7524:	51060000 	sub	w0, w0, #0x180
    7528:	008a1102 	.inst	0x008a1102 ; undefined
    752c:	16060000 	b	fffffffff818752c <_sp+0xffffffff9714752c>
    7530:	00002eef 	udf	#12015
    7534:	11025206 	add	w6, w16, #0x94
    7538:	00000072 	udf	#114
    753c:	21da1608 	.inst	0x21da1608 ; undefined
    7540:	53060000 	ubfiz	w0, w0, #26, #1
    7544:	00721102 	.inst	0x00721102 ; undefined
    7548:	16090000 	b	fffffffff8247548 <_sp+0xffffffff97207548>
    754c:	00001a0a 	udf	#6666
    7550:	11025406 	add	w6, w0, #0x95
    7554:	00000072 	udf	#114
    7558:	16b3160a 	b	fffffffffacccd80 <_sp+0xffffffff99c8cd80>
    755c:	55060000 	.inst	0x55060000 ; undefined
    7560:	00721102 	.inst	0x00721102 ; undefined
    7564:	160b0000 	b	fffffffff82c7564 <_sp+0xffffffff97287564>
    7568:	00002d56 	udf	#11606
    756c:	11025606 	add	w6, w16, #0x95
    7570:	00000072 	udf	#114
    7574:	254a160c 	cmpge	p12.h, p5/z, z16.h, #10
    7578:	57060000 	.inst	0x57060000 ; undefined
    757c:	00721102 	.inst	0x00721102 ; undefined
    7580:	160d0000 	b	fffffffff8347580 <_sp+0xffffffff97307580>
    7584:	000019c7 	udf	#6599
    7588:	11025806 	add	w6, w0, #0x96
    758c:	000000a2 	udf	#162
    7590:	1e051610 	.inst	0x1e051610 ; undefined
    7594:	59060000 	stlurh	w0, [x0, #96]
    7598:	00721102 	.inst	0x00721102 ; undefined
    759c:	16140000 	b	fffffffff850759c <_sp+0xffffffff974c759c>
    75a0:	00002a83 	udf	#10883
    75a4:	11025a06 	add	w6, w16, #0x96
    75a8:	00000072 	udf	#114
    75ac:	1e521615 	.inst	0x1e521615 ; undefined
    75b0:	5b060000 	.inst	0x5b060000 ; undefined
    75b4:	00721102 	.inst	0x00721102 ; undefined
    75b8:	16160000 	b	fffffffff85875b8 <_sp+0xffffffff975475b8>
    75bc:	00001d6f 	udf	#7535
    75c0:	11025c06 	add	w6, w0, #0x97
    75c4:	00000072 	udf	#114
    75c8:	1db51617 	.inst	0x1db51617 ; undefined
    75cc:	5d060000 	.inst	0x5d060000 ; undefined
    75d0:	00721102 	.inst	0x00721102 ; undefined
    75d4:	16180000 	b	fffffffff86075d4 <_sp+0xffffffff975c75d4>
    75d8:	00002851 	udf	#10321
    75dc:	11025e06 	add	w6, w16, #0x97
    75e0:	00000072 	udf	#114
    75e4:	29261619 	stp	w25, w5, [x16, #-208]
    75e8:	5f060000 	.inst	0x5f060000 ; undefined
    75ec:	00721102 	.inst	0x00721102 ; undefined
    75f0:	161a0000 	b	fffffffff86875f0 <_sp+0xffffffff976475f0>
    75f4:	00001a1a 	udf	#6682
    75f8:	11026006 	add	w6, w0, #0x98
    75fc:	00000072 	udf	#114
    7600:	2393161b 	.inst	0x2393161b ; undefined
    7604:	61060000 	.inst	0x61060000 ; undefined
    7608:	00721102 	.inst	0x00721102 ; undefined
    760c:	161c0000 	b	fffffffff870760c <_sp+0xffffffff976c760c>
    7610:	00002b7a 	udf	#11130
    7614:	11026206 	add	w6, w16, #0x98
    7618:	00000072 	udf	#114
    761c:	2eab161d 	urhadd	v29.2s, v16.2s, v11.2s
    7620:	63060000 	.inst	0x63060000 ; undefined
    7624:	00721102 	.inst	0x00721102 ; undefined
    7628:	161e0000 	b	fffffffff8787628 <_sp+0xffffffff97747628>
    762c:	00001ac2 	udf	#6850
    7630:	11026406 	add	w6, w0, #0x99
    7634:	00000072 	udf	#114
    7638:	1fcd161f 	fmadd	h31, h16, h13, h5
    763c:	65060000 	.inst	0x65060000 ; undefined
    7640:	00721102 	.inst	0x00721102 ; undefined
    7644:	16200000 	b	fffffffff8807644 <_sp+0xffffffff977c7644>
    7648:	00002554 	udf	#9556
    764c:	11026606 	add	w6, w16, #0x99
    7650:	00000072 	udf	#114
    7654:	2d421621 	ldp	s1, s5, [x17, #16]
    7658:	67060000 	.inst	0x67060000 ; undefined
    765c:	00721102 	.inst	0x00721102 ; undefined
    7660:	16220000 	b	fffffffff8887660 <_sp+0xffffffff97847660>
    7664:	000017a6 	udf	#6054
    7668:	11026806 	add	w6, w0, #0x9a
    766c:	00000072 	udf	#114
    7670:	2f0a1623 	usra	v3.8b, v17.8b, #6
    7674:	69060000 	stgp	x0, x0, [x0, #192]
    7678:	00721102 	.inst	0x00721102 ; undefined
    767c:	16240000 	b	fffffffff890767c <_sp+0xffffffff978c767c>
    7680:	00001849 	udf	#6217
    7684:	11026a06 	add	w6, w16, #0x9a
    7688:	00000072 	udf	#114
    768c:	199b1625 	.inst	0x199b1625 ; undefined
    7690:	6b060000 	subs	w0, w0, w6
    7694:	00721102 	.inst	0x00721102 ; undefined
    7698:	16260000 	b	fffffffff8987698 <_sp+0xffffffff97947698>
    769c:	00001fad 	udf	#8109
    76a0:	11026c06 	add	w6, w0, #0x9b
    76a4:	00000072 	udf	#114
    76a8:	43451527 	.inst	0x43451527 ; undefined
    76ac:	6d060043 	stp	d3, d0, [x2, #96]
    76b0:	00721102 	.inst	0x00721102 ; undefined
    76b4:	16280000 	b	fffffffff8a076b4 <_sp+0xffffffff979c76b4>
    76b8:	00002c92 	udf	#11410
    76bc:	11026e06 	add	w6, w16, #0x9b
    76c0:	00000072 	udf	#114
    76c4:	29d91629 	ldp	w9, w5, [x17, #200]!
    76c8:	6f060000 	.inst	0x6f060000 ; undefined
    76cc:	00721102 	.inst	0x00721102 ; undefined
    76d0:	002a0000 	.inst	0x002a0000 ; NYI
    76d4:	002e5811 	.inst	0x002e5811 ; NYI
    76d8:	02700600 	.inst	0x02700600 ; undefined
    76dc:	001b8703 	.inst	0x001b8703 ; undefined
    76e0:	06181200 	.inst	0x06181200 ; undefined
    76e4:	3c090275 	stur	b21, [x19, #144]
    76e8:	1600001e 	b	fffffffff8007760 <_sp+0xffffffff96fc7760>
    76ec:	00001d95 	udf	#7573
    76f0:	11027706 	add	w6, w24, #0x9d
    76f4:	00000072 	udf	#114
    76f8:	183d1600 	ldr	w0, 819b8 <__stack_size+0x7d9b8>
    76fc:	78060000 	sturh	w0, [x0, #96]
    7700:	008a1102 	.inst	0x008a1102 ; undefined
    7704:	16020000 	b	fffffffff8087704 <_sp+0xffffffff97047704>
    7708:	00002146 	udf	#8518
    770c:	11027906 	add	w6, w8, #0x9e
    7710:	000000a2 	udf	#162
    7714:	22e41604 	.inst	0x22e41604 ; undefined
    7718:	7a060000 	sbcs	w0, w0, w6
    771c:	00721102 	.inst	0x00721102 ; undefined
    7720:	16080000 	b	fffffffff8207720 <_sp+0xffffffff971c7720>
    7724:	0000291e 	udf	#10526
    7728:	11027b06 	add	w6, w24, #0x9e
    772c:	00000072 	udf	#114
    7730:	209e1609 	.inst	0x209e1609 ; undefined
    7734:	7c060000 	stur	h0, [x0, #96]
    7738:	00a21102 	.inst	0x00a21102 ; undefined
    773c:	160c0000 	b	fffffffff830773c <_sp+0xffffffff972c773c>
    7740:	00002992 	udf	#10642
    7744:	11027d06 	add	w6, w8, #0x9f
    7748:	00000072 	udf	#114
    774c:	19d21610 	.inst	0x19d21610 ; undefined
    7750:	7e060000 	.inst	0x7e060000 ; undefined
    7754:	008a1102 	.inst	0x008a1102 ; undefined
    7758:	16120000 	b	fffffffff8487758 <_sp+0xffffffff97447758>
    775c:	00001aad 	udf	#6829
    7760:	11027f06 	add	w6, w24, #0x9f
    7764:	00000072 	udf	#114
    7768:	254a1614 	cmpgt	p4.h, p5/z, z16.h, #10
    776c:	80060000 	.inst	0x80060000 ; undefined
    7770:	00721102 	.inst	0x00721102 ; undefined
    7774:	00150000 	.inst	0x00150000 ; undefined
    7778:	001def11 	.inst	0x001def11 ; undefined
    777c:	02810600 	.inst	0x02810600 ; undefined
    7780:	001da503 	.inst	0x001da503 ; undefined
    7784:	06581200 	.inst	0x06581200 ; undefined
    7788:	a8090286 	stnp	x6, x0, [x20, #144]
    778c:	1600001e 	b	fffffffff8007804 <_sp+0xffffffff96fc7804>
    7790:	0000279f 	udf	#10143
    7794:	0a028806 	.inst	0x0a028806 ; undefined
    7798:	00001d98 	udf	#7576
    779c:	21031600 	.inst	0x21031600 ; undefined
    77a0:	89060000 	.inst	0x89060000 ; undefined
    77a4:	1e3c0a02 	fmul	s2, s16, s28
    77a8:	162c0000 	b	fffffffff8b077a8 <_sp+0xffffffff97ac77a8>
    77ac:	00001e18 	udf	#7704
    77b0:	0c028a06 	.inst	0x0c028a06 ; undefined
    77b4:	00000037 	udf	#55
    77b8:	2af41648 	orn	w8, w18, w20, ror #5
    77bc:	8b060000 	add	x0, x0, x6
    77c0:	00960c02 	.inst	0x00960c02 ; undefined
    77c4:	15500000 	b	54077c4 <__stack_size+0x54037c4>
    77c8:	00414352 	.inst	0x00414352 ; undefined
    77cc:	0c028c06 	.inst	0x0c028c06 ; undefined
    77d0:	0000007e 	udf	#126
    77d4:	2f661654 	.inst	0x2f661654 ; undefined
    77d8:	8d060000 	.inst	0x8d060000 ; undefined
    77dc:	00660b02 	.inst	0x00660b02 ; undefined
    77e0:	00560000 	.inst	0x00560000 ; undefined
    77e4:	0022fc11 	.inst	0x0022fc11 ; NYI
    77e8:	028e0600 	.inst	0x028e0600 ; undefined
    77ec:	001e4903 	.inst	0x001e4903 ; undefined
    77f0:	25de1700 	cmpge	p0.d, p5/z, z24.d, #-2
    77f4:	3b060000 	.inst	0x3b060000 ; undefined
    77f8:	1ea81403 	.inst	0x1ea81403 ; undefined
    77fc:	d4170000 	.inst	0xd4170000 ; undefined
    7800:	0600001b 	.inst	0x0600001b ; undefined
    7804:	cf2b033c 	.inst	0xcf2b033c ; undefined
    7808:	1800001e 	ldr	w30, 7808 <__stack_size+0x3808>
    780c:	001b8208 	.inst	0x001b8208 ; undefined
    7810:	29311700 	stp	w0, w5, [x24, #-120]
    7814:	3d060000 	str	b0, [x0, #384]
    7818:	1ecf2b03 	.inst	0x1ecf2b03 ; undefined
    781c:	3c170000 	stur	b0, [x0, #-144]
    7820:	06000030 	.inst	0x06000030 ; undefined
    7824:	1b1e033e 	madd	w30, w25, w30, w0
    7828:	19000001 	stlurb	w1, [x0]
    782c:	00000096 	udf	#150
    7830:	00001eff 	udf	#7935
    7834:	0000291a 	udf	#10522
    7838:	17000300 	b	fffffffffc008438 <_sp+0xffffffff9afc8438>
    783c:	000016c3 	udf	#5827
    7840:	11033f06 	add	w6, w24, #0xcf
    7844:	00001eef 	udf	#7919
    7848:	0025c017 	.inst	0x0025c017 ; NYI
    784c:	03400600 	.inst	0x03400600 ; undefined
    7850:	001eef11 	.inst	0x001eef11 ; undefined
    7854:	63721b00 	.inst	0x63721b00 ; undefined
    7858:	1f010061 	fmadd	s1, s3, s1, s0
    785c:	0000a715 	udf	#42773
    7860:	80030900 	.inst	0x80030900 ; undefined
    7864:	0061007f 	.inst	0x0061007f ; undefined
    7868:	1c000000 	ldr	s0, 7868 <__stack_size+0x3868>
    786c:	00003039 	udf	#12345
    7870:	1b1e2001 	madd	w1, w0, w30, w8
    7874:	09000001 	.inst	0x09000001 ; undefined
    7878:	007f8803 	.inst	0x007f8803 ; undefined
    787c:	00000061 	udf	#97
    7880:	212f1d00 	.inst	0x212f1d00 ; undefined
    7884:	44060000 	.inst	0x44060000 ; undefined
    7888:	012c0503 	.inst	0x012c0503 ; undefined
    788c:	1f5c0000 	fmadd	d0, d0, d28, d0
    7890:	cf1e0000 	.inst	0xcf1e0000 ; undefined
    7894:	0000001e 	udf	#30
    7898:	001fb81d 	.inst	0x001fb81d ; undefined
    789c:	034a0600 	.inst	0x034a0600 ; undefined
    78a0:	00012c05 	.inst	0x00012c05 ; undefined
    78a4:	001f7300 	.inst	0x001f7300 ; undefined
    78a8:	1ecf1e00 	.inst	0x1ecf1e00 ; undefined
    78ac:	1d000000 	.inst	0x1d000000 ; undefined
    78b0:	0000172d 	udf	#5933
    78b4:	05034806 	orr	z6.d, z6.d, #0x800000
    78b8:	0000012c 	udf	#300
    78bc:	00001f8a 	udf	#8074
    78c0:	001ecf1e 	.inst	0x001ecf1e ; undefined
    78c4:	2a1d0000 	orr	w0, w0, w29
    78c8:	0600001a 	.inst	0x0600001a ; undefined
    78cc:	2c050349 	stnp	s9, s0, [x26, #40]
    78d0:	a6000001 	.inst	0xa6000001 ; undefined
    78d4:	1e00001f 	.inst	0x1e00001f ; undefined
    78d8:	00001ecf 	udf	#7887
    78dc:	0000961e 	udf	#38430
    78e0:	bb1d0000 	.inst	0xbb1d0000 ; undefined
    78e4:	06000022 	.inst	0x06000022 ; undefined
    78e8:	2c05034b 	stnp	s11, s0, [x26, #40]
    78ec:	bd000001 	str	s1, [x0]
    78f0:	1e00001f 	.inst	0x1e00001f ; undefined
    78f4:	00001fbd 	udf	#8125
    78f8:	a8081800 	stnp	x0, x6, [x0, #128]
    78fc:	1f00001e 	fmadd	s30, s0, s0, s0
    7900:	00001606 	udf	#5638
    7904:	960a1704 	bl	fffffffff828d514 <_sp+0xffffffff9724d514>
    7908:	d9000000 	stlur	x0, [x0]
    790c:	1e00001f 	.inst	0x1e00001f ; undefined
    7910:	00001fd9 	udf	#8153
    7914:	0f081800 	fmla	v0.4h, v0.4h, v8.h[4]
    7918:	1f000001 	fmadd	s1, s0, s0, s0
    791c:	00001618 	udf	#5656
    7920:	960a1504 	bl	fffffffff828cd30 <_sp+0xffffffff9724cd30>
    7924:	f5000000 	.inst	0xf5000000 ; undefined
    7928:	1e00001f 	.inst	0x1e00001f ; undefined
    792c:	00001fd9 	udf	#8153
    7930:	168f1f00 	b	fffffffffa3cf530 <_sp+0xffffffff9938f530>
    7934:	14040000 	b	107934 <__stack_size+0x103934>
    7938:	0000960a 	udf	#38410
    793c:	00201000 	.inst	0x00201000 ; NYI
    7940:	1fd91e00 	fmadd	h0, h16, h25, h7
    7944:	c11e0000 	.inst	0xc11e0000 ; undefined
    7948:	00000000 	udf	#0
    794c:	0018071d 	.inst	0x0018071d ; undefined
    7950:	03430600 	.inst	0x03430600 ; undefined
    7954:	00012c05 	.inst	0x00012c05 ; undefined
    7958:	00202700 	.inst	0x00202700 ; NYI
    795c:	1ecf1e00 	.inst	0x1ecf1e00 ; undefined
    7960:	1f000000 	fmadd	s0, s0, s0, s0
    7964:	00000791 	udf	#1937
    7968:	5f051407 	.inst	0x5f051407 ; undefined
    796c:	3e000000 	.inst	0x3e000000 ; undefined
    7970:	1e000020 	.inst	0x1e000020 ; undefined
    7974:	0000203e 	udf	#8254
    7978:	08180020 	stxrb	w24, w0, [x1]
    797c:	00000127 	udf	#295
    7980:	001e811f 	.inst	0x001e811f ; undefined
    7984:	184a0600 	ldr	w0, 9ba44 <__stack_size+0x97a44>
    7988:	000000a7 	udf	#167
    798c:	0000205a 	udf	#8282
    7990:	0000291e 	udf	#10526
    7994:	50210000 	adr	x0, 49996 <__stack_size+0x45996>
    7998:	0600002f 	.inst	0x0600002f ; undefined
    799c:	2071144b 	.inst	0x2071144b ; undefined
    79a0:	291e0000 	stp	w0, w0, [x0, #240]
    79a4:	1e000000 	.inst	0x1e000000 ; undefined
    79a8:	0000012c 	udf	#300
    79ac:	2f8d2200 	umlal	v0.2d, v16.2s, v13.s[0]
    79b0:	b3010000 	.inst	0xb3010000 ; undefined
    79b4:	012c0501 	.inst	0x012c0501 ; undefined
    79b8:	60b00000 	.inst	0x60b00000 ; undefined
    79bc:	00006100 	udf	#24832
    79c0:	02d40000 	.inst	0x02d40000 ; undefined
    79c4:	00000000 	udf	#0
    79c8:	9c010000 	ldr	q0, 99c8 <__stack_size+0x59c8>
    79cc:	00002146 	udf	#8518
    79d0:	00304323 	.inst	0x00304323 ; NYI
    79d4:	01b30100 	.inst	0x01b30100 ; undefined
    79d8:	00214622 	.inst	0x00214622 ; NYI
    79dc:	b8910300 	ldursw	x0, [x24, #-240]
    79e0:	301c237f 	adr	xzr, 3fe4d <__stack_size+0x3be4d>
    79e4:	b3010000 	.inst	0xb3010000 ; undefined
    79e8:	00963601 	.inst	0x00963601 ; undefined
    79ec:	91030000 	add	x0, x0, #0xc0
    79f0:	f8237fb4 	ldraa	x20, [x29, #440]!
    79f4:	0100002a 	.inst	0x0100002a ; undefined
    79f8:	7e4a01b3 	.inst	0x7e4a01b3 ; undefined
    79fc:	03000000 	.inst	0x03000000 ; undefined
    7a00:	247fb291 	cmpls	p1.h, p4/z, z20.h, #126
    7a04:	0000155d 	udf	#5469
    7a08:	0e01b501 	.inst	0x0e01b501 ; undefined
    7a0c:	00000096 	udf	#150
    7a10:	247c9102 	cmphs	p2.h, p4/z, z8.h, #114
    7a14:	00003056 	udf	#12374
    7a18:	1801b601 	ldr	w1, b0d8 <__stack_size+0x70d8>
    7a1c:	000000ae 	udf	#174
    7a20:	24689102 	cmphs	p2.h, p4/z, z8.h, #34
    7a24:	00002fb0 	udf	#12208
    7a28:	0c01b701 	.inst	0x0c01b701 ; undefined
    7a2c:	0000214c 	udf	#8524
    7a30:	25709102 	.inst	0x25709102 ; undefined
    7a34:	00676572 	.inst	0x00676572 ; undefined
    7a38:	1801b801 	ldr	w1, b138 <__stack_size+0x7138>
    7a3c:	00000372 	udf	#882
    7a40:	25609102 	cntp	x2, p4, p8.h
    7a44:	01003172 	.inst	0x01003172 ; undefined
    7a48:	9c3701b9 	ldr	q25, 75a7c <__stack_size+0x71a7c>
    7a4c:	02000006 	.inst	0x02000006 ; undefined
    7a50:	72255891 	ands	w17, w4, #0xf803ffff
    7a54:	ba010032 	adcs	x18, x1, x1
    7a58:	10622301 	adr	x1, cbeb8 <__stack_size+0xc7eb8>
    7a5c:	91020000 	add	x0, x0, #0x80
    7a60:	2fa12450 	.inst	0x2fa12450 ; undefined
    7a64:	bb010000 	.inst	0xbb010000 ; undefined
    7a68:	00960e01 	.inst	0x00960e01 ; undefined
    7a6c:	91020000 	add	x0, x0, #0x80
    7a70:	2ff1246c 	.inst	0x2ff1246c ; undefined
    7a74:	bc010000 	stur	s0, [x0, #16]
    7a78:	02251f01 	.inst	0x02251f01 ; undefined
    7a7c:	91020000 	add	x0, x0, #0x80
    7a80:	08180048 	stxrb	w24, w8, [x2]
    7a84:	00000066 	udf	#102
    7a88:	00960818 	.inst	0x00960818 ; undefined
    7a8c:	26220000 	.inst	0x26220000 ; undefined
    7a90:	01000030 	.inst	0x01000030 ; undefined
    7a94:	2c050165 	stnp	s5, s0, [x11, #40]
    7a98:	f4000001 	.inst	0xf4000001 ; undefined
    7a9c:	0061005d 	.inst	0x0061005d ; undefined
    7aa0:	bc000000 	stur	s0, [x0]
    7aa4:	00000002 	udf	#2
    7aa8:	01000000 	.inst	0x01000000 ; undefined
    7aac:	0022279c 	.inst	0x0022279c ; NYI
    7ab0:	304d2300 	adr	x0, a1f11 <__stack_size+0x9df11>
    7ab4:	65010000 	.inst	0x65010000 ; undefined
    7ab8:	21462101 	.inst	0x21462101 ; undefined
    7abc:	91030000 	add	x0, x0, #0xc0
    7ac0:	a7237fb8 	.inst	0xa7237fb8 ; undefined
    7ac4:	0100002f 	.inst	0x0100002f ; undefined
    7ac8:	96340165 	bl	fffffffff8d0805c <_sp+0xffffffff97cc805c>
    7acc:	03000000 	.inst	0x03000000 ; undefined
    7ad0:	237fb491 	.inst	0x237fb491 ; undefined
    7ad4:	00002af8 	udf	#11000
    7ad8:	47016501 	.inst	0x47016501 ; undefined
    7adc:	0000007e 	udf	#126
    7ae0:	7fb29103 	fmulx	s3, s8, v18.s[1]
    7ae4:	00155d24 	.inst	0x00155d24 ; undefined
    7ae8:	01670100 	.inst	0x01670100 ; undefined
    7aec:	0000960e 	udf	#38414
    7af0:	7c910200 	.inst	0x7c910200 ; undefined
    7af4:	00305624 	.inst	0x00305624 ; NYI
    7af8:	01680100 	.inst	0x01680100 ; undefined
    7afc:	0000ae1b 	udf	#44571
    7b00:	68910200 	stgp	x0, x0, [x16], #544
    7b04:	002fb024 	.inst	0x002fb024 ; NYI
    7b08:	01690100 	.inst	0x01690100 ; undefined
    7b0c:	00214c0c 	.inst	0x00214c0c ; NYI
    7b10:	70910200 	adr	x0, fffffffffff29b53 <_sp+0xffffffff9eee9b53>
    7b14:	67657225 	.inst	0x67657225 ; undefined
    7b18:	016a0100 	.inst	0x016a0100 ; undefined
    7b1c:	00037218 	.inst	0x00037218 ; undefined
    7b20:	60910200 	.inst	0x60910200 ; undefined
    7b24:	00317225 	.inst	0x00317225 ; NYI
    7b28:	37016b01 	tbnz	w1, #0, a888 <__stack_size+0x6888>
    7b2c:	0000069c 	udf	#1692
    7b30:	25589102 	cmpeq	p2.h, p4/z, z8.h, #-8
    7b34:	01003272 	.inst	0x01003272 ; undefined
    7b38:	6223016c 	.inst	0x6223016c ; undefined
    7b3c:	02000010 	.inst	0x02000010 ; undefined
    7b40:	a1245091 	.inst	0xa1245091 ; undefined
    7b44:	0100002f 	.inst	0x0100002f ; undefined
    7b48:	960e016d 	bl	fffffffff83880fc <_sp+0xffffffff973480fc>
    7b4c:	02000000 	.inst	0x02000000 ; undefined
    7b50:	f1246c91 	subs	x17, x4, #0x91b
    7b54:	0100002f 	.inst	0x0100002f ; undefined
    7b58:	251f016e 	cmpge	p14.b, p0/z, z11.b, #-1
    7b5c:	02000002 	.inst	0x02000002 ; undefined
    7b60:	22004891 	.inst	0x22004891 ; undefined
    7b64:	00002fe9 	udf	#12265
    7b68:	05013901 	orr	z1.s, z1.s, #0xfe000003
    7b6c:	0000012c 	udf	#300
    7b70:	61005d04 	.inst	0x61005d04 ; undefined
    7b74:	00000000 	udf	#0
    7b78:	000000f0 	udf	#240
    7b7c:	00000000 	udf	#0
    7b80:	226c9c01 	.inst	0x226c9c01 ; undefined
    7b84:	5d240000 	.inst	0x5d240000 ; undefined
    7b88:	01000015 	.inst	0x01000015 ; undefined
    7b8c:	5f09013b 	.inst	0x5f09013b ; undefined
    7b90:	02000000 	.inst	0x02000000 ; undefined
    7b94:	45267c91 	.inst	0x45267c91 ; undefined
    7b98:	0100444e 	.inst	0x0100444e ; undefined
    7b9c:	e8010157 	.inst	0xe8010157 ; undefined
    7ba0:	0061005d 	.inst	0x0061005d ; undefined
    7ba4:	00000000 	udf	#0
    7ba8:	00300a27 	.inst	0x00300a27 ; NYI
    7bac:	05fd0100 	.inst	0x05fd0100 ; undefined
    7bb0:	0000012c 	udf	#300
    7bb4:	61005b3c 	.inst	0x61005b3c ; undefined
    7bb8:	00000000 	udf	#0
    7bbc:	000001c8 	udf	#456
    7bc0:	00000000 	udf	#0
    7bc4:	22be9c01 	.inst	0x22be9c01 ; undefined
    7bc8:	5d1c0000 	.inst	0x5d1c0000 ; undefined
    7bcc:	01000015 	.inst	0x01000015 ; undefined
    7bd0:	00960eff 	.inst	0x00960eff ; undefined
    7bd4:	91020000 	add	x0, x0, #0x80
    7bd8:	6572257c 	fmls	z28.h, p1/m, z11.h, z18.h
    7bdc:	00010067 	.inst	0x00010067 ; undefined
    7be0:	03721801 	.inst	0x03721801 ; undefined
    7be4:	91020000 	add	x0, x0, #0x80
    7be8:	2fa12470 	.inst	0x2fa12470 ; undefined
    7bec:	01010000 	.inst	0x01010000 ; undefined
    7bf0:	00960e01 	.inst	0x00960e01 ; undefined
    7bf4:	91020000 	add	x0, x0, #0x80
    7bf8:	c3270078 	.inst	0xc3270078 ; undefined
    7bfc:	0100002f 	.inst	0x0100002f ; undefined
    7c00:	012c0560 	.inst	0x012c0560 ; undefined
    7c04:	52300000 	eor	w0, w0, #0x10000
    7c08:	00006100 	udf	#24832
    7c0c:	090c0000 	.inst	0x090c0000 ; undefined
    7c10:	00000000 	udf	#0
    7c14:	9c010000 	ldr	q0, 9c14 <__stack_size+0x5c14>
    7c18:	0000232c 	udf	#9004
    7c1c:	00155d1c 	.inst	0x00155d1c ; undefined
    7c20:	0e620100 	saddl	v0.4s, v8.4h, v2.4h
    7c24:	00000096 	udf	#150
    7c28:	1c7c9102 	ldr	s2, 100e48 <__stack_size+0xfce48>
    7c2c:	00002fde 	udf	#12254
    7c30:	ae1b6301 	.inst	0xae1b6301 ; undefined
    7c34:	02000000 	.inst	0x02000000 ; undefined
    7c38:	d11c7491 	sub	x17, x4, #0x71d
    7c3c:	0100002f 	.inst	0x0100002f ; undefined
    7c40:	00ae1b64 	.inst	0x00ae1b64 ; undefined
    7c44:	91020000 	add	x0, x0, #0x80
    7c48:	65721b70 	fmla	z16.h, p6/m, z27.h, z18.h
    7c4c:	65010067 	.inst	0x65010067 ; undefined
    7c50:	00037218 	.inst	0x00037218 ; undefined
    7c54:	68910200 	stgp	x0, x0, [x16], #544
    7c58:	002fa11c 	.inst	0x002fa11c ; NYI
    7c5c:	0e660100 	saddl	v0.4s, v8.4h, v6.4h
    7c60:	00000096 	udf	#150
    7c64:	00789102 	.inst	0x00789102 ; undefined
    7c68:	002f7f28 	.inst	0x002f7f28 ; NYI
    7c6c:	052b0100 	ext	z0.b, z0.b, z8.b, #88
    7c70:	0000012c 	udf	#300
    7c74:	610050b4 	.inst	0x610050b4 ; undefined
    7c78:	00000000 	udf	#0
    7c7c:	0000017c 	udf	#380
    7c80:	00000000 	udf	#0
    7c84:	5d1c9c01 	.inst	0x5d1c9c01 ; undefined
    7c88:	01000015 	.inst	0x01000015 ; undefined
    7c8c:	012c092d 	.inst	0x012c092d ; undefined
    7c90:	91020000 	add	x0, x0, #0x80
    7c94:	2fff1c7c 	.inst	0x2fff1c7c ; undefined
    7c98:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
    7c9c:	00012c09 	.inst	0x00012c09 ; undefined
    7ca0:	78910200 	ldursh	x0, [x16, #-240]
    7ca4:	0031721b 	.inst	0x0031721b ; NYI
    7ca8:	592f2f01 	.inst	0x592f2f01 ; undefined
    7cac:	0200000c 	.inst	0x0200000c ; undefined
    7cb0:	721b7091 	ands	w17, w4, #0xffffffe3
    7cb4:	30010032 	adr	x18, 9cb9 <__stack_size+0x5cb9>
    7cb8:	000eaa33 	.inst	0x000eaa33 ; undefined
    7cbc:	68910200 	stgp	x0, x0, [x16], #544
    7cc0:	0033721b 	.inst	0x0033721b ; NYI
    7cc4:	f7293101 	.inst	0xf7293101 ; undefined
    7cc8:	02000009 	.inst	0x02000009 ; undefined
    7ccc:	721b6091 	ands	w17, w4, #0x3fffffe0
    7cd0:	32010034 	orr	w20, w1, #0x80000000
    7cd4:	00051f12 	.inst	0x00051f12 ; undefined
    7cd8:	58910200 	ldr	x0, fffffffffff29d18 <_sp+0xffffffff9eee9d18>
    7cdc:	00c50000 	.inst	0x00c50000 ; undefined
    7ce0:	00040000 	.inst	0x00040000 ; undefined
    7ce4:	00001667 	udf	#5735
    7ce8:	02200108 	.inst	0x02200108 ; undefined
    7cec:	5c0c0000 	ldr	d0, 1fcec <__stack_size+0x1bcec>
    7cf0:	2f000030 	.inst	0x2f000030 ; undefined
    7cf4:	a0000000 	.inst	0xa0000000 ; undefined
    7cf8:	00000009 	udf	#9
    7cfc:	00000000 	udf	#0
    7d00:	d7000000 	.inst	0xd7000000 ; undefined
    7d04:	02000031 	.inst	0x02000031 ; undefined
    7d08:	017c0708 	.inst	0x017c0708 ; undefined
    7d0c:	08020000 	stxrb	w2, w0, [x0]
    7d10:	0001cb05 	.inst	0x0001cb05 ; undefined
    7d14:	07040200 	.inst	0x07040200 ; undefined
    7d18:	00000181 	udf	#385
    7d1c:	46051002 	.inst	0x46051002 ; undefined
    7d20:	02000001 	.inst	0x02000001 ; undefined
    7d24:	01000710 	.inst	0x01000710 ; undefined
    7d28:	01020000 	.inst	0x01020000 ; undefined
    7d2c:	00011406 	.inst	0x00011406 ; undefined
    7d30:	05020200 	orr	z0.d, z0.d, #0x1ffff
    7d34:	000001d4 	udf	#468
    7d38:	69050403 	stgp	x3, x1, [x0, #160]
    7d3c:	0200746e 	.inst	0x0200746e ; undefined
    7d40:	01120801 	.inst	0x01120801 ; undefined
    7d44:	02020000 	.inst	0x02020000 ; undefined
    7d48:	00013307 	.inst	0x00013307 ; undefined
    7d4c:	08db0400 	ldlarb	w0, [x0]
    7d50:	5b020000 	.inst	0x5b020000 ; undefined
    7d54:	00003716 	udf	#14102
    7d58:	05080200 	.inst	0x05080200 ; undefined
    7d5c:	000001c6 	udf	#454
    7d60:	77070802 	.inst	0x77070802 ; undefined
    7d64:	05000001 	orr	z1.s, z1.s, #0x1
    7d68:	00003068 	udf	#12392
    7d6c:	5a023201 	.inst	0x5a023201 ; undefined
    7d70:	9b000000 	madd	x0, x0, x0, x0
    7d74:	06000000 	.inst	0x06000000 ; undefined
    7d78:	30630700 	adr	x0, cde59 <__stack_size+0xc9e59>
    7d7c:	22010000 	.inst	0x22010000 ; undefined
    7d80:	00006f0a 	udf	#28426
    7d84:	00638400 	.inst	0x00638400 ; undefined
    7d88:	00000061 	udf	#97
    7d8c:	00001800 	udf	#6144
    7d90:	00000000 	udf	#0
    7d94:	089c0100 	stllrb	w0, [x8]
    7d98:	00003068 	udf	#12392
    7d9c:	5a023201 	.inst	0x5a023201 ; undefined
    7da0:	06000000 	.inst	0x06000000 ; undefined
    7da4:	ad000000 	stp	q0, q0, [x0]
    7da8:	04000025 	add	z5.b, p0/m, z5.b, z1.b
    7dac:	0016e700 	.inst	0x0016e700 ; undefined
    7db0:	20010800 	.inst	0x20010800 ; undefined
    7db4:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    7db8:	000031bd 	udf	#12733
    7dbc:	0000002f 	udf	#47
    7dc0:	000009c0 	udf	#2496
	...
    7dcc:	00003250 	udf	#12880
    7dd0:	0006d502 	.inst	0x0006d502 ; undefined
    7dd4:	170b0200 	b	fffffffffc2c85d4 <_sp+0xffffffff9b2885d4>
    7dd8:	00000035 	udf	#53
    7ddc:	7c070803 	.inst	0x7c070803 ; undefined
    7de0:	03000001 	.inst	0x03000001 ; undefined
    7de4:	01cb0508 	.inst	0x01cb0508 ; undefined
    7de8:	1b020000 	madd	w0, w0, w2, w0
    7dec:	03000007 	.inst	0x03000007 ; undefined
    7df0:	00351716 	.inst	0x00351716 ; NYI
    7df4:	10030000 	adr	x0, ddf4 <__stack_size+0x9df4>
    7df8:	00014605 	.inst	0x00014605 ; undefined
    7dfc:	07100300 	.inst	0x07100300 ; undefined
    7e00:	00000100 	udf	#256
    7e04:	14060103 	b	188210 <__stack_size+0x184210>
    7e08:	03000001 	.inst	0x03000001 ; undefined
    7e0c:	01d40502 	.inst	0x01d40502 ; undefined
    7e10:	04040000 	.inst	0x04040000 ; undefined
    7e14:	746e6905 	.inst	0x746e6905 ; undefined
    7e18:	07640200 	.inst	0x07640200 ; undefined
    7e1c:	59040000 	stlurh	w0, [x0, #64]
    7e20:	00008317 	udf	#33559
    7e24:	00720500 	.inst	0x00720500 ; undefined
    7e28:	01030000 	.inst	0x01030000 ; undefined
    7e2c:	00011208 	.inst	0x00011208 ; undefined
    7e30:	132b0200 	.inst	0x132b0200 ; undefined
    7e34:	5a040000 	sbc	w0, w0, w4
    7e38:	00009b18 	udf	#39704
    7e3c:	008a0500 	.inst	0x008a0500 ; undefined
    7e40:	02030000 	.inst	0x02030000 ; undefined
    7e44:	00013307 	.inst	0x00013307 ; undefined
    7e48:	08db0200 	ldlarb	w0, [x16]
    7e4c:	5b040000 	.inst	0x5b040000 ; undefined
    7e50:	0000b316 	udf	#45846
    7e54:	00a20500 	.inst	0x00a20500 ; undefined
    7e58:	04030000 	subr	z0.b, p0/m, z0.b, z0.b
    7e5c:	00018107 	.inst	0x00018107 ; undefined
    7e60:	00b30500 	.inst	0x00b30500 ; undefined
    7e64:	08030000 	stxrb	w3, w0, [x0]
    7e68:	0001c605 	.inst	0x0001c605 ; undefined
    7e6c:	07080300 	.inst	0x07080300 ; undefined
    7e70:	00000177 	udf	#375
    7e74:	1b080103 	madd	w3, w8, w8, w0
    7e78:	06000001 	.inst	0x06000001 ; undefined
    7e7c:	000000cd 	udf	#205
    7e80:	32337507 	orr	w7, w8, #0xffffe7ff
    7e84:	16340800 	b	fffffffff8d09e84 <_sp+0xffffffff97cc9e84>
    7e88:	000000b3 	udf	#179
    7e8c:	b3040708 	.inst	0xb3040708 ; undefined
    7e90:	05000000 	orr	z0.s, z0.s, #0x1
    7e94:	01660d08 	.inst	0x01660d08 ; undefined
    7e98:	ba090000 	adcs	x0, x0, x9
    7e9c:	00000023 	udf	#35
    7ea0:	0023cd09 	.inst	0x0023cd09 ; NYI
    7ea4:	a9090100 	stp	x0, x0, [x8, #144]
    7ea8:	02000019 	.inst	0x02000019 ; undefined
    7eac:	0024e209 	.inst	0x0024e209 ; NYI
    7eb0:	65090300 	.inst	0x65090300 ; undefined
    7eb4:	0400001e 	add	z30.b, p0/m, z30.b, z0.b
    7eb8:	002e3509 	.inst	0x002e3509 ; NYI
    7ebc:	8a090500 	and	x0, x8, x9, lsl #1
    7ec0:	0600001e 	.inst	0x0600001e ; undefined
    7ec4:	00234c09 	.inst	0x00234c09 ; NYI
    7ec8:	fc090700 	str	d0, [x24], #144
    7ecc:	0800002b 	stxrb	w0, w11, [x1]
    7ed0:	00179609 	.inst	0x00179609 ; undefined
    7ed4:	aa090900 	orr	x0, x8, x9, lsl #2
    7ed8:	0a00001e 	and	w30, w0, w0
    7edc:	001fe109 	.inst	0x001fe109 ; undefined
    7ee0:	07090b00 	.inst	0x07090b00 ; undefined
    7ee4:	0c000019 	st4	{v25.8b-v28.8b}, [x0]
    7ee8:	001b2f09 	.inst	0x001b2f09 ; undefined
    7eec:	5c090d00 	ldr	d0, 1a08c <__stack_size+0x1608c>
    7ef0:	0e000023 	tbl	v3.8b, {v1.16b}, v0.8b
    7ef4:	001ab509 	.inst	0x001ab509 ; undefined
    7ef8:	fa090f00 	.inst	0xfa090f00 ; undefined
    7efc:	10000026 	adr	x6, 7f00 <__stack_size+0x3f00>
    7f00:	001e2f09 	.inst	0x001e2f09 ; undefined
    7f04:	2e091100 	ext	v0.8b, v8.8b, v9.8b, #2
    7f08:	12000020 	and	w0, w1, #0x1
    7f0c:	04070800 	.inst	0x04070800 ; undefined
    7f10:	000000b3 	udf	#179
    7f14:	810e6505 	.inst	0x810e6505 ; undefined
    7f18:	09000001 	.inst	0x09000001 ; undefined
    7f1c:	00003076 	udf	#12406
    7f20:	327d0900 	.inst	0x327d0900 ; undefined
    7f24:	00010000 	.inst	0x00010000 ; undefined
    7f28:	0030bb02 	.inst	0x0030bb02 ; NYI
    7f2c:	03680500 	.inst	0x03680500 ; undefined
    7f30:	00000166 	udf	#358
    7f34:	00018105 	.inst	0x00018105 ; undefined
    7f38:	05040a00 	.inst	0x05040a00 ; undefined
    7f3c:	01dc026d 	.inst	0x01dc026d ; undefined
    7f40:	930b0000 	.inst	0x930b0000 ; undefined
    7f44:	05000018 	orr	z24.s, z24.s, #0x1
    7f48:	00ae116e 	.inst	0x00ae116e ; undefined
    7f4c:	0c040000 	.inst	0x0c040000 ; undefined
    7f50:	bc0b0014 	stur	s20, [x0, #176]
    7f54:	0500001e 	orr	z30.s, z30.s, #0x1
    7f58:	00ae116f 	.inst	0x00ae116f ; undefined
    7f5c:	03040000 	.inst	0x03040000 ; undefined
    7f60:	010b0011 	.inst	0x010b0011 ; undefined
    7f64:	05000017 	orr	z23.s, z23.s, #0x1
    7f68:	00ae1170 	.inst	0x00ae1170 ; undefined
    7f6c:	01040000 	.inst	0x01040000 ; undefined
    7f70:	ef0b0010 	.inst	0xef0b0010 ; undefined
    7f74:	0500002b 	orr	z11.s, z11.s, #0x3
    7f78:	00ae1171 	.inst	0x00ae1171 ; undefined
    7f7c:	10040000 	adr	x0, ff7c <__stack_size+0xbf7c>
    7f80:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    7f84:	096a0504 	.inst	0x096a0504 ; undefined
    7f88:	000001fe 	udf	#510
    7f8c:	3233640d 	orr	w13, w0, #0xffffe07f
    7f90:	106c0500 	adr	x0, e0030 <__stack_size+0xdc030>
    7f94:	000000ae 	udf	#174
    7f98:	7469620d 	.inst	0x7469620d ; undefined
    7f9c:	03720500 	.inst	0x03720500 ; undefined
    7fa0:	00000192 	udf	#402
    7fa4:	19df0200 	ldapursb	w0, [x16, #-16]
    7fa8:	73050000 	.inst	0x73050000 ; undefined
    7fac:	0001dc02 	.inst	0x0001dc02 ; undefined
    7fb0:	01fe0500 	.inst	0x01fe0500 ; undefined
    7fb4:	040a0000 	smin	z0.b, p0/m, z0.b, z0.b
    7fb8:	29057805 	stp	w5, w30, [x0, #40]
    7fbc:	0b000003 	add	w3, w0, w0
    7fc0:	0000227b 	udf	#8827
    7fc4:	ae147905 	.inst	0xae147905 ; undefined
    7fc8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7fcc:	0b001f01 	add	w1, w24, w0, lsl #7
    7fd0:	00001957 	udf	#6487
    7fd4:	ae147a05 	.inst	0xae147a05 ; undefined
    7fd8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7fdc:	0b001e01 	add	w1, w16, w0, lsl #7
    7fe0:	00002b02 	udf	#11010
    7fe4:	ae147b05 	.inst	0xae147b05 ; undefined
    7fe8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7fec:	0b001c02 	add	w2, w0, w0, lsl #7
    7ff0:	00001de1 	udf	#7649
    7ff4:	ae147c05 	.inst	0xae147c05 ; undefined
    7ff8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    7ffc:	0b001b01 	add	w1, w24, w0, lsl #6
    8000:	00002cc5 	udf	#11461
    8004:	ae147d05 	.inst	0xae147d05 ; undefined
    8008:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    800c:	0b001a01 	add	w1, w16, w0, lsl #6
    8010:	000025d4 	udf	#9684
    8014:	ae147e05 	.inst	0xae147e05 ; undefined
    8018:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    801c:	0b001901 	add	w1, w8, w0, lsl #6
    8020:	00002c70 	udf	#11376
    8024:	ae147f05 	.inst	0xae147f05 ; undefined
    8028:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    802c:	0b001801 	add	w1, w0, w0, lsl #6
    8030:	00002c5f 	udf	#11359
    8034:	ae148005 	.inst	0xae148005 ; undefined
    8038:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    803c:	0b001701 	add	w1, w24, w0, lsl #5
    8040:	000027ca 	udf	#10186
    8044:	ae148105 	.inst	0xae148105 ; undefined
    8048:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    804c:	0b001007 	add	w7, w0, w0, lsl #4
    8050:	000027fd 	udf	#10237
    8054:	ae178205 	.inst	0xae178205 ; undefined
    8058:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    805c:	0b000e02 	add	w2, w16, w0, lsl #3
    8060:	00001720 	udf	#5920
    8064:	ae148305 	.inst	0xae148305 ; undefined
    8068:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    806c:	0b000d01 	add	w1, w8, w0, lsl #3
    8070:	00002a4c 	udf	#10828
    8074:	ae148405 	.inst	0xae148405 ; undefined
    8078:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    807c:	0b000c01 	add	w1, w0, w0, lsl #3
    8080:	00001944 	udf	#6468
    8084:	ae148505 	.inst	0xae148505 ; undefined
    8088:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    808c:	0b000b01 	add	w1, w24, w0, lsl #2
    8090:	00001d55 	udf	#7509
    8094:	ae148605 	.inst	0xae148605 ; undefined
    8098:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    809c:	0b000a01 	add	w1, w16, w0, lsl #2
    80a0:	00001778 	udf	#6008
    80a4:	ae148705 	.inst	0xae148705 ; undefined
    80a8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    80ac:	0b000802 	add	w2, w0, w0, lsl #2
    80b0:	000023a5 	udf	#9125
    80b4:	ae148805 	.inst	0xae148805 ; undefined
    80b8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    80bc:	0b000206 	add	w6, w16, w0
    80c0:	00002182 	udf	#8578
    80c4:	ae148905 	.inst	0xae148905 ; undefined
    80c8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    80cc:	00000002 	udf	#2
    80d0:	7505040c 	.inst	0x7505040c ; undefined
    80d4:	00034b09 	.inst	0x00034b09 ; undefined
    80d8:	33640d00 	.inst	0x33640d00 ; undefined
    80dc:	77050032 	.inst	0x77050032 ; undefined
    80e0:	0000ae13 	udf	#44563
    80e4:	69620d00 	ldpsw	x0, x3, [x8, #-240]
    80e8:	8a050074 	and	x20, x3, x5
    80ec:	00020f06 	.inst	0x00020f06 ; undefined
    80f0:	a3020000 	.inst	0xa3020000 ; undefined
    80f4:	0500001c 	orr	z28.s, z28.s, #0x1
    80f8:	0329028b 	.inst	0x0329028b ; undefined
    80fc:	4b050000 	sub	w0, w0, w5
    8100:	0a000003 	and	w3, w0, w0
    8104:	02900504 	.inst	0x02900504 ; undefined
    8108:	000004d6 	udf	#1238
    810c:	0017b70b 	.inst	0x0017b70b ; undefined
    8110:	10910500 	adr	x0, fffffffffff2a1b0 <_sp+0xffffffff9eeea1b0>
    8114:	000000ae 	udf	#174
    8118:	001f0104 	.inst	0x001f0104 ; undefined
    811c:	0024b70b 	.inst	0x0024b70b ; NYI
    8120:	10920500 	adr	x0, fffffffffff2c1c0 <_sp+0xffffffff9eeec1c0>
    8124:	000000ae 	udf	#174
    8128:	001e0104 	.inst	0x001e0104 ; undefined
    812c:	002efa0b 	.inst	0x002efa0b ; NYI
    8130:	10930500 	adr	x0, fffffffffff2e1d0 <_sp+0xffffffff9eeee1d0>
    8134:	000000ae 	udf	#174
    8138:	001d0104 	.inst	0x001d0104 ; undefined
    813c:	002b9e0b 	.inst	0x002b9e0b ; NYI
    8140:	10940500 	adr	x0, fffffffffff301e0 <_sp+0xffffffff9eef01e0>
    8144:	000000ae 	udf	#174
    8148:	001c0104 	.inst	0x001c0104 ; undefined
    814c:	0024c70b 	.inst	0x0024c70b ; NYI
    8150:	10950500 	adr	x0, fffffffffff321f0 <_sp+0xffffffff9eef21f0>
    8154:	000000ae 	udf	#174
    8158:	00180404 	.inst	0x00180404 ; undefined
    815c:	001e9b0b 	.inst	0x001e9b0b ; undefined
    8160:	10960500 	adr	x0, fffffffffff34200 <_sp+0xffffffff9eef4200>
    8164:	000000ae 	udf	#174
    8168:	00170104 	.inst	0x00170104 ; undefined
    816c:	00236d0b 	.inst	0x00236d0b ; NYI
    8170:	10970500 	adr	x0, fffffffffff36210 <_sp+0xffffffff9eef6210>
    8174:	000000ae 	udf	#174
    8178:	00160104 	.inst	0x00160104 ; undefined
    817c:	0016f30b 	.inst	0x0016f30b ; undefined
    8180:	10980500 	adr	x0, fffffffffff38220 <_sp+0xffffffff9eef8220>
    8184:	000000ae 	udf	#174
    8188:	00150104 	.inst	0x00150104 ; undefined
    818c:	0024500b 	.inst	0x0024500b ; NYI
    8190:	10990500 	adr	x0, fffffffffff3a230 <_sp+0xffffffff9eefa230>
    8194:	000000ae 	udf	#174
    8198:	00140104 	.inst	0x00140104 ; undefined
    819c:	002cba0b 	.inst	0x002cba0b ; NYI
    81a0:	109a0500 	adr	x0, fffffffffff3c240 <_sp+0xffffffff9eefc240>
    81a4:	000000ae 	udf	#174
    81a8:	00100404 	.inst	0x00100404 ; undefined
    81ac:	002cff0b 	.inst	0x002cff0b ; NYI
    81b0:	109b0500 	adr	x0, fffffffffff3e250 <_sp+0xffffffff9eefe250>
    81b4:	000000ae 	udf	#174
    81b8:	000f0104 	.inst	0x000f0104 ; undefined
    81bc:	002e150b 	.inst	0x002e150b ; NYI
    81c0:	109c0500 	adr	x0, fffffffffff40260 <_sp+0xffffffff9ef00260>
    81c4:	000000ae 	udf	#174
    81c8:	000e0104 	.inst	0x000e0104 ; undefined
    81cc:	001e3c0b 	.inst	0x001e3c0b ; undefined
    81d0:	109d0500 	adr	x0, fffffffffff42270 <_sp+0xffffffff9ef02270>
    81d4:	000000ae 	udf	#174
    81d8:	000d0104 	.inst	0x000d0104 ; undefined
    81dc:	00200d0b 	.inst	0x00200d0b ; NYI
    81e0:	109e0500 	adr	x0, fffffffffff44280 <_sp+0xffffffff9ef04280>
    81e4:	000000ae 	udf	#174
    81e8:	000c0104 	.inst	0x000c0104 ; undefined
    81ec:	002ad00b 	.inst	0x002ad00b ; NYI
    81f0:	109f0500 	adr	x0, fffffffffff46290 <_sp+0xffffffff9ef06290>
    81f4:	000000ae 	udf	#174
    81f8:	00080404 	.inst	0x00080404 ; undefined
    81fc:	0029be0b 	.inst	0x0029be0b ; NYI
    8200:	10a00500 	adr	x0, fffffffffff482a0 <_sp+0xffffffff9ef082a0>
    8204:	000000ae 	udf	#174
    8208:	00070104 	.inst	0x00070104 ; undefined
    820c:	001d400b 	.inst	0x001d400b ; undefined
    8210:	10a10500 	adr	x0, fffffffffff4a2b0 <_sp+0xffffffff9ef0a2b0>
    8214:	000000ae 	udf	#174
    8218:	00060104 	.inst	0x00060104 ; undefined
    821c:	001d4d0b 	.inst	0x001d4d0b ; undefined
    8220:	10a20500 	adr	x0, fffffffffff4c2c0 <_sp+0xffffffff9ef0c2c0>
    8224:	000000ae 	udf	#174
    8228:	00050104 	.inst	0x00050104 ; undefined
    822c:	002cac0b 	.inst	0x002cac0b ; NYI
    8230:	10a30500 	adr	x0, fffffffffff4e2d0 <_sp+0xffffffff9ef0e2d0>
    8234:	000000ae 	udf	#174
    8238:	00040104 	.inst	0x00040104 ; undefined
    823c:	00282e0b 	.inst	0x00282e0b ; NYI
    8240:	10a40500 	adr	x0, fffffffffff502e0 <_sp+0xffffffff9ef102e0>
    8244:	000000ae 	udf	#174
    8248:	00030104 	.inst	0x00030104 ; undefined
    824c:	00289a0b 	.inst	0x00289a0b ; NYI
    8250:	10a50500 	adr	x0, fffffffffff522f0 <_sp+0xffffffff9ef122f0>
    8254:	000000ae 	udf	#174
    8258:	00020104 	.inst	0x00020104 ; undefined
    825c:	001c340b 	.inst	0x001c340b ; undefined
    8260:	10a60500 	adr	x0, fffffffffff54300 <_sp+0xffffffff9ef14300>
    8264:	000000ae 	udf	#174
    8268:	00010104 	.inst	0x00010104 ; undefined
    826c:	002ed00b 	.inst	0x002ed00b ; NYI
    8270:	10a70500 	adr	x0, fffffffffff56310 <_sp+0xffffffff9ef16310>
    8274:	000000ae 	udf	#174
    8278:	00000104 	udf	#260
    827c:	05040c00 	.inst	0x05040c00 ; undefined
    8280:	04f8098d 	.inst	0x04f8098d ; undefined
    8284:	640d0000 	.inst	0x640d0000 ; undefined
    8288:	05003233 	orr	z19.s, z19.s, #0xfc000fff
    828c:	00ae108f 	.inst	0x00ae108f ; undefined
    8290:	620d0000 	.inst	0x620d0000 ; undefined
    8294:	05007469 	orr	z9.h, z9.h, #0x3c
    8298:	035c03a8 	.inst	0x035c03a8 ; undefined
    829c:	02000000 	.inst	0x02000000 ; undefined
    82a0:	000028e5 	udf	#10469
    82a4:	d602a905 	.inst	0xd602a905 ; undefined
    82a8:	05000004 	orr	z4.s, z4.s, #0x1
    82ac:	000004f8 	udf	#1272
    82b0:	ae05040a 	.inst	0xae05040a ; undefined
    82b4:	00065302 	.inst	0x00065302 ; undefined
    82b8:	19b90b00 	.inst	0x19b90b00 ; undefined
    82bc:	af050000 	.inst	0xaf050000 ; undefined
    82c0:	0000ae11 	udf	#44561
    82c4:	1f010400 	fmadd	s0, s0, s1, s1
    82c8:	27450b00 	.inst	0x27450b00 ; undefined
    82cc:	b0050000 	adrp	x0, a009000 <__stack_size+0xa005000>
    82d0:	0000ae11 	udf	#44561
    82d4:	1e010400 	.inst	0x1e010400 ; undefined
    82d8:	2db40b00 	stp	s0, s2, [x24, #-96]!
    82dc:	b1050000 	adds	x0, x0, #0x140
    82e0:	0000ae11 	udf	#44561
    82e4:	1d010400 	.inst	0x1d010400 ; undefined
    82e8:	26ca0b00 	.inst	0x26ca0b00 ; undefined
    82ec:	b2050000 	orr	x0, x0, #0x800000008000000
    82f0:	0000ae11 	udf	#44561
    82f4:	1b020400 	madd	w0, w0, w2, w1
    82f8:	2e880b00 	.inst	0x2e880b00 ; undefined
    82fc:	b3050000 	.inst	0xb3050000 ; undefined
    8300:	0000ae11 	udf	#44561
    8304:	1a010400 	.inst	0x1a010400 ; undefined
    8308:	1d150b00 	.inst	0x1d150b00 ; undefined
    830c:	b4050000 	cbz	x0, 1230c <__stack_size+0xe30c>
    8310:	0000ae11 	udf	#44561
    8314:	19010400 	.inst	0x19010400 ; undefined
    8318:	1a990b00 	.inst	0x1a990b00 ; undefined
    831c:	b5050000 	cbnz	x0, 1231c <__stack_size+0xe31c>
    8320:	0000ae11 	udf	#44561
    8324:	18010400 	ldr	w0, a3a4 <__stack_size+0x63a4>
    8328:	1eee0b00 	fmul	h0, h24, h14
    832c:	b6050000 	tbz	x0, #32, 232c <__stack_size-0x1cd4>
    8330:	0000ae17 	udf	#44567
    8334:	17010400 	b	fffffffffc049334 <_sp+0xffffffff9b009334>
    8338:	1f5a0b00 	fmadd	d0, d24, d26, d2
    833c:	b7050000 	tbnz	x0, #32, 233c <__stack_size-0x1cc4>
    8340:	0000ae14 	udf	#44564
    8344:	14030400 	b	c9344 <__stack_size+0xc5344>
    8348:	1efe0b00 	fmul	h0, h24, h30
    834c:	b8050000 	stur	w0, [x0, #80]
    8350:	0000ae14 	udf	#44564
    8354:	13010400 	sbfx	w0, w0, #1, #1
    8358:	1f6a0b00 	fnmadd	d0, d24, d10, d2
    835c:	b9050000 	str	w0, [x0, #1280]
    8360:	0000ae14 	udf	#44564
    8364:	10030400 	adr	x0, e3e4 <__stack_size+0xa3e4>
    8368:	17fb0b00 	b	ffffffffffecaf68 <_sp+0xffffffff9ee8af68>
    836c:	ba050000 	adcs	x0, x0, x5
    8370:	0000ae17 	udf	#44567
    8374:	0f010400 	movi	v0.2s, #0x20
    8378:	2d9c0b00 	stp	s0, s2, [x24, #224]!
    837c:	bb050000 	.inst	0xbb050000 ; undefined
    8380:	0000ae14 	udf	#44564
    8384:	0e010400 	dup	v0.8b, v0.b[0]
    8388:	1a8c0b00 	.inst	0x1a8c0b00 ; undefined
    838c:	bc050000 	stur	s0, [x0, #80]
    8390:	0000ae14 	udf	#44564
    8394:	0d010400 	.inst	0x0d010400 ; undefined
    8398:	25b40b00 	whilehs	p0.s, w24, w20
    839c:	bd050000 	str	s0, [x0, #1280]
    83a0:	0000ae14 	udf	#44564
    83a4:	0c010400 	.inst	0x0c010400 ; undefined
    83a8:	22040b00 	.inst	0x22040b00 ; undefined
    83ac:	be050000 	.inst	0xbe050000 ; undefined
    83b0:	0000ae14 	udf	#44564
    83b4:	08040400 	stxrb	w4, w0, [x0]
    83b8:	22720b00 	.inst	0x22720b00 ; undefined
    83bc:	bf050000 	.inst	0xbf050000 ; undefined
    83c0:	0000ae17 	udf	#44567
    83c4:	07010400 	.inst	0x07010400 ; undefined
    83c8:	2e4c0b00 	.inst	0x2e4c0b00 ; undefined
    83cc:	c0050000 	.inst	0xc0050000 ; undefined
    83d0:	0000ae14 	udf	#44564
    83d4:	06010400 	.inst	0x06010400 ; undefined
    83d8:	21220b00 	.inst	0x21220b00 ; undefined
    83dc:	c1050000 	.inst	0xc1050000 ; undefined
    83e0:	0000ae14 	udf	#44564
    83e4:	05010400 	orr	z0.h, z0.h, #0x1
    83e8:	2e7d0b00 	.inst	0x2e7d0b00 ; undefined
    83ec:	c2050000 	.inst	0xc2050000 ; undefined
    83f0:	0000ae14 	udf	#44564
    83f4:	00050400 	.inst	0x00050400 ; undefined
    83f8:	040c0000 	sabd	z0.b, p0/m, z0.b, z0.b
    83fc:	7509ab05 	.inst	0x7509ab05 ; undefined
    8400:	0d000006 	st1	{v6.b}[0], [x0]
    8404:	00323364 	.inst	0x00323364 ; NYI
    8408:	ae10ad05 	.inst	0xae10ad05 ; undefined
    840c:	0d000000 	st1	{v0.b}[0], [x0]
    8410:	00746962 	.inst	0x00746962 ; undefined
    8414:	0903c305 	.inst	0x0903c305 ; undefined
    8418:	00000005 	udf	#5
    841c:	00224002 	.inst	0x00224002 ; NYI
    8420:	02c40500 	.inst	0x02c40500 ; undefined
    8424:	00000653 	udf	#1619
    8428:	00067505 	.inst	0x00067505 ; undefined
    842c:	05040a00 	.inst	0x05040a00 ; undefined
    8430:	077002c9 	.inst	0x077002c9 ; undefined
    8434:	4a0b0000 	eor	w0, w0, w11
    8438:	0500001f 	orr	z31.s, z31.s, #0x1
    843c:	00ae10ca 	.inst	0x00ae10ca ; undefined
    8440:	01040000 	.inst	0x01040000 ; undefined
    8444:	f40b001f 	.inst	0xf40b001f ; undefined
    8448:	05000029 	orr	z9.s, z9.s, #0x3
    844c:	00ae10cb 	.inst	0x00ae10cb ; undefined
    8450:	01040000 	.inst	0x01040000 ; undefined
    8454:	5f0b001e 	.inst	0x5f0b001e ; undefined
    8458:	0500002a 	orr	z10.s, z10.s, #0x3
    845c:	00ae10cc 	.inst	0x00ae10cc ; undefined
    8460:	01040000 	.inst	0x01040000 ; undefined
    8464:	780b001d 	sturh	w29, [x0, #176]
    8468:	0500002a 	orr	z10.s, z10.s, #0x3
    846c:	00ae10cd 	.inst	0x00ae10cd ; undefined
    8470:	01040000 	.inst	0x01040000 ; undefined
    8474:	500b001c 	adr	x28, 1e476 <__stack_size+0x1a476>
    8478:	05000021 	orr	z1.s, z1.s, #0x3
    847c:	00ae12ce 	.inst	0x00ae12ce ; undefined
    8480:	01040000 	.inst	0x01040000 ; undefined
    8484:	730b001b 	.inst	0x730b001b ; undefined
    8488:	05000029 	orr	z9.s, z9.s, #0x3
    848c:	00ae10cf 	.inst	0x00ae10cf ; undefined
    8490:	01040000 	.inst	0x01040000 ; undefined
    8494:	690b001a 	stgp	x26, x0, [x0, #352]
    8498:	0500002a 	orr	z10.s, z10.s, #0x3
    849c:	00ae12d0 	.inst	0x00ae12d0 ; undefined
    84a0:	02040000 	.inst	0x02040000 ; undefined
    84a4:	6f0b0018 	.inst	0x6f0b0018 ; undefined
    84a8:	0500002a 	orr	z10.s, z10.s, #0x3
    84ac:	00ae12d1 	.inst	0x00ae12d1 ; undefined
    84b0:	08040000 	stxrb	w4, w0, [x0]
    84b4:	660b0010 	.inst	0x660b0010 ; undefined
    84b8:	0500001d 	orr	z29.s, z29.s, #0x1
    84bc:	00ae15d2 	.inst	0x00ae15d2 ; undefined
    84c0:	04040000 	.inst	0x04040000 ; undefined
    84c4:	040b000c 	umin	z12.b, p0/m, z12.b, z0.b
    84c8:	05000022 	orr	z2.s, z2.s, #0x3
    84cc:	00ae12d3 	.inst	0x00ae12d3 ; undefined
    84d0:	04040000 	.inst	0x04040000 ; undefined
    84d4:	f20b0008 	ands	x8, x0, #0x20000000200000
    84d8:	0500001f 	orr	z31.s, z31.s, #0x1
    84dc:	00ae13d4 	.inst	0x00ae13d4 ; undefined
    84e0:	01040000 	.inst	0x01040000 ; undefined
    84e4:	5a0b0007 	sbc	w7, w0, w11
    84e8:	0500001b 	orr	z27.s, z27.s, #0x1
    84ec:	00ae12d5 	.inst	0x00ae12d5 ; undefined
    84f0:	01040000 	.inst	0x01040000 ; undefined
    84f4:	aa0b0006 	orr	x6, x0, x11
    84f8:	0500002b 	orr	z11.s, z11.s, #0x3
    84fc:	00ae10d6 	.inst	0x00ae10d6 ; undefined
    8500:	01040000 	.inst	0x01040000 ; undefined
    8504:	7d0b0005 	str	h5, [x0, #1408]
    8508:	0500002e 	orr	z14.s, z14.s, #0x3
    850c:	00ae12d7 	.inst	0x00ae12d7 ; undefined
    8510:	05040000 	.inst	0x05040000 ; undefined
    8514:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    8518:	09c60504 	.inst	0x09c60504 ; undefined
    851c:	00000792 	udf	#1938
    8520:	3233640d 	orr	w13, w0, #0xffffe07f
    8524:	10c80500 	adr	x0, fffffffffff985c4 <_sp+0xffffffff9ef585c4>
    8528:	000000ae 	udf	#174
    852c:	7469620d 	.inst	0x7469620d ; undefined
    8530:	06d80500 	.inst	0x06d80500 ; undefined
    8534:	00000686 	udf	#1670
    8538:	2b120200 	adds	w0, w16, w18
    853c:	d9050000 	stlur	x0, [x0, #80]
    8540:	00077002 	.inst	0x00077002 ; undefined
    8544:	07920500 	.inst	0x07920500 ; undefined
    8548:	040a0000 	smin	z0.b, p0/m, z0.b, z0.b
    854c:	ad05df05 	stp	q5, q23, [x24, #176]
    8550:	0b000009 	add	w9, w0, w0
    8554:	00002d0d 	udf	#11533
    8558:	ae15e005 	.inst	0xae15e005 ; undefined
    855c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8560:	0b001f01 	add	w1, w24, w0, lsl #7
    8564:	000023e5 	udf	#9189
    8568:	ae15e105 	.inst	0xae15e105 ; undefined
    856c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8570:	0b001e01 	add	w1, w16, w0, lsl #7
    8574:	000023af 	udf	#9135
    8578:	ae15e205 	.inst	0xae15e205 ; undefined
    857c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8580:	0b001d01 	add	w1, w8, w0, lsl #7
    8584:	000025ef 	udf	#9711
    8588:	ae15e305 	.inst	0xae15e305 ; undefined
    858c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8590:	0b001c01 	add	w1, w0, w0, lsl #7
    8594:	00001b1a 	udf	#6938
    8598:	ae17e405 	.inst	0xae17e405 ; undefined
    859c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    85a0:	0b001b01 	add	w1, w24, w0, lsl #6
    85a4:	0000198e 	udf	#6542
    85a8:	ae15e505 	.inst	0xae15e505 ; undefined
    85ac:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    85b0:	0b001a01 	add	w1, w16, w0, lsl #6
    85b4:	00001df6 	udf	#7670
    85b8:	ae17e605 	.inst	0xae17e605 ; undefined
    85bc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    85c0:	0b001901 	add	w1, w8, w0, lsl #6
    85c4:	00002122 	udf	#8482
    85c8:	ae17e705 	.inst	0xae17e705 ; undefined
    85cc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    85d0:	0b001801 	add	w1, w0, w0, lsl #6
    85d4:	00002441 	udf	#9281
    85d8:	ae17e805 	.inst	0xae17e805 ; undefined
    85dc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    85e0:	0b001701 	add	w1, w24, w0, lsl #5
    85e4:	00001a43 	udf	#6723
    85e8:	ae17e905 	.inst	0xae17e905 ; undefined
    85ec:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    85f0:	0b001601 	add	w1, w16, w0, lsl #5
    85f4:	00001a49 	udf	#6729
    85f8:	ae17ea05 	.inst	0xae17ea05 ; undefined
    85fc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8600:	0b001501 	add	w1, w8, w0, lsl #5
    8604:	00001a4f 	udf	#6735
    8608:	ae17eb05 	.inst	0xae17eb05 ; undefined
    860c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8610:	0b001401 	add	w1, w0, w0, lsl #5
    8614:	000028be 	udf	#10430
    8618:	ae17ec05 	.inst	0xae17ec05 ; undefined
    861c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8620:	0b001301 	add	w1, w24, w0, lsl #4
    8624:	00001ad0 	udf	#6864
    8628:	ae17ed05 	.inst	0xae17ed05 ; undefined
    862c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8630:	0b001201 	add	w1, w16, w0, lsl #4
    8634:	0000257b 	udf	#9595
    8638:	ae17ee05 	.inst	0xae17ee05 ; undefined
    863c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8640:	0b001101 	add	w1, w8, w0, lsl #4
    8644:	00002b90 	udf	#11152
    8648:	ae17ef05 	.inst	0xae17ef05 ; undefined
    864c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8650:	0b001001 	add	w1, w0, w0, lsl #4
    8654:	00002b6d 	udf	#11117
    8658:	ae18f005 	.inst	0xae18f005 ; undefined
    865c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8660:	0b000f01 	add	w1, w24, w0, lsl #3
    8664:	00002527 	udf	#9511
    8668:	ae15f105 	.inst	0xae15f105 ; undefined
    866c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8670:	0b000e01 	add	w1, w16, w0, lsl #3
    8674:	00001f9d 	udf	#8093
    8678:	ae15f205 	.inst	0xae15f205 ; undefined
    867c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8680:	0b000d01 	add	w1, w8, w0, lsl #3
    8684:	000018d9 	udf	#6361
    8688:	ae15f305 	.inst	0xae15f305 ; undefined
    868c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8690:	0b000c01 	add	w1, w0, w0, lsl #3
    8694:	00002603 	udf	#9731
    8698:	ae17f405 	.inst	0xae17f405 ; undefined
    869c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    86a0:	0b000b01 	add	w1, w24, w0, lsl #2
    86a4:	000017e0 	udf	#6112
    86a8:	ae15f505 	.inst	0xae15f505 ; undefined
    86ac:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    86b0:	0b000a01 	add	w1, w16, w0, lsl #2
    86b4:	00002382 	udf	#9090
    86b8:	ae17f605 	.inst	0xae17f605 ; undefined
    86bc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    86c0:	0b000901 	add	w1, w8, w0, lsl #2
    86c4:	00002564 	udf	#9572
    86c8:	ae17f705 	.inst	0xae17f705 ; undefined
    86cc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    86d0:	0b000801 	add	w1, w0, w0, lsl #2
    86d4:	000026bd 	udf	#9917
    86d8:	ae17f805 	.inst	0xae17f805 ; undefined
    86dc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    86e0:	0b000701 	add	w1, w24, w0, lsl #1
    86e4:	00001922 	udf	#6434
    86e8:	ae17f905 	.inst	0xae17f905 ; undefined
    86ec:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    86f0:	0b000601 	add	w1, w16, w0, lsl #1
    86f4:	000023f9 	udf	#9209
    86f8:	ae17fa05 	.inst	0xae17fa05 ; undefined
    86fc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8700:	0b000501 	add	w1, w8, w0, lsl #1
    8704:	00001d0c 	udf	#7436
    8708:	ae17fb05 	.inst	0xae17fb05 ; undefined
    870c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8710:	0b000401 	add	w1, w0, w0, lsl #1
    8714:	00002792 	udf	#10130
    8718:	ae17fc05 	.inst	0xae17fc05 ; undefined
    871c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8720:	0b000301 	add	w1, w24, w0
    8724:	000027ac 	udf	#10156
    8728:	ae17fd05 	.inst	0xae17fd05 ; undefined
    872c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8730:	0b000201 	add	w1, w16, w0
    8734:	000027be 	udf	#10174
    8738:	ae17fe05 	.inst	0xae17fe05 ; undefined
    873c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8740:	0b000101 	add	w1, w8, w0
    8744:	00002c25 	udf	#11301
    8748:	ae17ff05 	.inst	0xae17ff05 ; undefined
    874c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8750:	00000001 	udf	#1
    8754:	dc05040c 	.inst	0xdc05040c ; undefined
    8758:	0009d009 	.inst	0x0009d009 ; undefined
    875c:	33640d00 	.inst	0x33640d00 ; undefined
    8760:	de050032 	.inst	0xde050032 ; undefined
    8764:	0000ae13 	udf	#44563
    8768:	69620e00 	ldpsw	x0, x3, [x16, #-240]
    876c:	00050074 	.inst	0x00050074 ; undefined
    8770:	07a30601 	.inst	0x07a30601 ; undefined
    8774:	0f000000 	.inst	0x0f000000 ; undefined
    8778:	00002b43 	udf	#11075
    877c:	02010105 	.inst	0x02010105 ; undefined
    8780:	000009ad 	udf	#2477
    8784:	0009d005 	.inst	0x0009d005 ; undefined
    8788:	05041000 	.inst	0x05041000 ; undefined
    878c:	0d050106 	.inst	0x0d050106 ; undefined
    8790:	1100000c 	add	w12, w0, #0x0
    8794:	000021a8 	udf	#8616
    8798:	14010705 	b	4a3ac <__stack_size+0x463ac>
    879c:	000000ae 	udf	#174
    87a0:	001f0104 	.inst	0x001f0104 ; undefined
    87a4:	00222a11 	.inst	0x00222a11 ; NYI
    87a8:	01080500 	.inst	0x01080500 ; undefined
    87ac:	0000ae17 	udf	#44567
    87b0:	1e010400 	.inst	0x1e010400 ; undefined
    87b4:	29ab1100 	stp	w0, w4, [x8, #-168]!
    87b8:	09050000 	.inst	0x09050000 ; undefined
    87bc:	00ae1701 	.inst	0x00ae1701 ; undefined
    87c0:	01040000 	.inst	0x01040000 ; undefined
    87c4:	8411001d 	ld1sb	{z29.s}, p0/z, [x0, z17.s, uxtw]
    87c8:	05000028 	orr	z8.s, z8.s, #0x3
    87cc:	ae14010a 	.inst	0xae14010a ; undefined
    87d0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    87d4:	11001c01 	add	w1, w0, #0x7
    87d8:	000026a2 	udf	#9890
    87dc:	14010b05 	b	4b3f0 <__stack_size+0x473f0>
    87e0:	000000ae 	udf	#174
    87e4:	001b0104 	.inst	0x001b0104 ; undefined
    87e8:	001af911 	.inst	0x001af911 ; undefined
    87ec:	010c0500 	.inst	0x010c0500 ; undefined
    87f0:	0000ae17 	udf	#44567
    87f4:	1a010400 	.inst	0x1a010400 ; undefined
    87f8:	1c8c1100 	ldr	s0, fffffffffff20a18 <_sp+0xffffffff9eee0a18>
    87fc:	0d050000 	.inst	0x0d050000 ; undefined
    8800:	00ae1401 	.inst	0x00ae1401 ; undefined
    8804:	01040000 	.inst	0x01040000 ; undefined
    8808:	36110019 	tbz	w25, #2, a808 <__stack_size+0x6808>
    880c:	05000029 	orr	z9.s, z9.s, #0x3
    8810:	ae14010e 	.inst	0xae14010e ; undefined
    8814:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8818:	11001801 	add	w1, w0, #0x6
    881c:	000020cc 	udf	#8396
    8820:	17010f05 	b	fffffffffc04c434 <_sp+0xffffffff9b00c434>
    8824:	000000ae 	udf	#174
    8828:	00170104 	.inst	0x00170104 ; undefined
    882c:	0021cc11 	.inst	0x0021cc11 ; NYI
    8830:	01100500 	.inst	0x01100500 ; undefined
    8834:	0000ae14 	udf	#44564
    8838:	16010400 	b	fffffffff8049838 <_sp+0xffffffff97009838>
    883c:	28cc1100 	ldp	w0, w4, [x8], #96
    8840:	11050000 	add	w0, w0, #0x140
    8844:	00ae1401 	.inst	0x00ae1401 ; undefined
    8848:	01040000 	.inst	0x01040000 ; undefined
    884c:	12110015 	and	w21, w0, #0x8000
    8850:	05000017 	orr	z23.s, z23.s, #0x1
    8854:	ae140112 	.inst	0xae140112 ; undefined
    8858:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    885c:	11001401 	add	w1, w0, #0x5
    8860:	000024a1 	udf	#9377
    8864:	14011305 	b	4d478 <__stack_size+0x49478>
    8868:	000000ae 	udf	#174
    886c:	00130104 	.inst	0x00130104 ; undefined
    8870:	001a5511 	.inst	0x001a5511 ; undefined
    8874:	01140500 	.inst	0x01140500 ; undefined
    8878:	0000ae14 	udf	#44564
    887c:	12010400 	and	w0, w0, #0x80000001
    8880:	1edc1100 	.inst	0x1edc1100 ; undefined
    8884:	15050000 	b	4148884 <__stack_size+0x4144884>
    8888:	00ae1701 	.inst	0x00ae1701 ; undefined
    888c:	01040000 	.inst	0x01040000 ; undefined
    8890:	27110011 	.inst	0x27110011 ; undefined
    8894:	0500001b 	orr	z27.s, z27.s, #0x1
    8898:	ae110116 	.inst	0xae110116 ; undefined
    889c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    88a0:	11001001 	add	w1, w0, #0x4
    88a4:	00001781 	udf	#6017
    88a8:	14011705 	b	4e4bc <__stack_size+0x4a4bc>
    88ac:	000000ae 	udf	#174
    88b0:	000f0104 	.inst	0x000f0104 ; undefined
    88b4:	00174111 	.inst	0x00174111 ; undefined
    88b8:	01180500 	.inst	0x01180500 ; undefined
    88bc:	0000ae14 	udf	#44564
    88c0:	0e010400 	dup	v0.8b, v0.b[0]
    88c4:	18631100 	ldr	w0, ceae4 <__stack_size+0xcaae4>
    88c8:	19050000 	stlurb	w0, [x0, #80]
    88cc:	00ae1401 	.inst	0x00ae1401 ; undefined
    88d0:	01040000 	.inst	0x01040000 ; undefined
    88d4:	6d11000d 	stp	d13, d0, [x0, #272]
    88d8:	05000020 	orr	z0.s, z0.s, #0x3
    88dc:	ae14011a 	.inst	0xae14011a ; undefined
    88e0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    88e4:	11000c01 	add	w1, w0, #0x3
    88e8:	0000248b 	udf	#9355
    88ec:	17011b05 	b	fffffffffc04f500 <_sp+0xffffffff9b00f500>
    88f0:	000000ae 	udf	#174
    88f4:	000b0104 	.inst	0x000b0104 ; undefined
    88f8:	002dd411 	.inst	0x002dd411 ; NYI
    88fc:	011c0500 	.inst	0x011c0500 ; undefined
    8900:	0000ae17 	udf	#44567
    8904:	0a010400 	and	w0, w0, w1, lsl #1
    8908:	2eb71100 	uaddw	v0.2d, v8.2d, v23.2s
    890c:	1d050000 	.inst	0x1d050000 ; undefined
    8910:	00ae1701 	.inst	0x00ae1701 ; undefined
    8914:	01040000 	.inst	0x01040000 ; undefined
    8918:	64110009 	.inst	0x64110009 ; undefined
    891c:	05000017 	orr	z23.s, z23.s, #0x1
    8920:	ae14011e 	.inst	0xae14011e ; undefined
    8924:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8928:	11000801 	add	w1, w0, #0x2
    892c:	00002081 	udf	#8321
    8930:	17011f05 	b	fffffffffc050544 <_sp+0xffffffff9b010544>
    8934:	000000ae 	udf	#174
    8938:	00070104 	.inst	0x00070104 ; undefined
    893c:	0019f911 	.inst	0x0019f911 ; undefined
    8940:	01200500 	.inst	0x01200500 ; undefined
    8944:	0000ae14 	udf	#44564
    8948:	06010400 	.inst	0x06010400 ; undefined
    894c:	2abd1100 	orn	w0, w8, w29, asr #4
    8950:	21050000 	.inst	0x21050000 ; undefined
    8954:	00ae1401 	.inst	0x00ae1401 ; undefined
    8958:	01040000 	.inst	0x01040000 ; undefined
    895c:	85110005 	.inst	0x85110005 ; undefined
    8960:	05000025 	orr	z5.s, z5.s, #0x3
    8964:	ae140122 	.inst	0xae140122 ; undefined
    8968:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    896c:	11000401 	add	w1, w0, #0x1
    8970:	00001979 	udf	#6521
    8974:	17012305 	b	fffffffffc051588 <_sp+0xffffffff9b011588>
    8978:	000000ae 	udf	#174
    897c:	00030104 	.inst	0x00030104 ; undefined
    8980:	002e0111 	.inst	0x002e0111 ; NYI
    8984:	01240500 	.inst	0x01240500 ; undefined
    8988:	0000ae17 	udf	#44567
    898c:	02010400 	.inst	0x02010400 ; undefined
    8990:	2bdb1100 	.inst	0x2bdb1100 ; undefined
    8994:	25050000 	cmpge	p0.b, p0/z, z0.b, #5
    8998:	00ae1401 	.inst	0x00ae1401 ; undefined
    899c:	01040000 	.inst	0x01040000 ; undefined
    89a0:	21110001 	.inst	0x21110001 ; undefined
    89a4:	0500002e 	orr	z14.s, z14.s, #0x3
    89a8:	ae140126 	.inst	0xae140126 ; undefined
    89ac:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    89b0:	00000001 	udf	#1
    89b4:	03050412 	.inst	0x03050412 ; undefined
    89b8:	0c320901 	.inst	0x0c320901 ; undefined
    89bc:	640e0000 	.inst	0x640e0000 ; undefined
    89c0:	05003233 	orr	z19.s, z19.s, #0xfc000fff
    89c4:	ae130105 	.inst	0xae130105 ; undefined
    89c8:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    89cc:	00746962 	.inst	0x00746962 ; undefined
    89d0:	07012705 	.inst	0x07012705 ; undefined
    89d4:	000009e2 	udf	#2530
    89d8:	2d5e0f00 	ldp	s0, s3, [x24, #240]
    89dc:	28050000 	stnp	w0, w0, [x0, #40]
    89e0:	0c0d0201 	.inst	0x0c0d0201 ; undefined
    89e4:	32050000 	orr	w0, w0, #0x8000000
    89e8:	1000000c 	adr	x12, 89e8 <__stack_size+0x49e8>
    89ec:	012d0504 	.inst	0x012d0504 ; undefined
    89f0:	000e5e05 	.inst	0x000e5e05 ; undefined
    89f4:	25331100 	whilege	p0.b, x8, x19
    89f8:	2e050000 	ext	v0.8b, v0.8b, v5.8b, #0
    89fc:	00ae1001 	.inst	0x00ae1001 ; undefined
    8a00:	01040000 	.inst	0x01040000 ; undefined
    8a04:	0a11001f 	and	wzr, w0, w17
    8a08:	05000021 	orr	z1.s, z1.s, #0x3
    8a0c:	ae13012f 	.inst	0xae13012f ; undefined
    8a10:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8a14:	11001e01 	add	w1, w16, #0x7
    8a18:	00002611 	udf	#9745
    8a1c:	13013005 	sbfx	w5, w0, #1, #12
    8a20:	000000ae 	udf	#174
    8a24:	001d0104 	.inst	0x001d0104 ; undefined
    8a28:	001b7b11 	.inst	0x001b7b11 ; undefined
    8a2c:	01310500 	.inst	0x01310500 ; undefined
    8a30:	0000ae10 	udf	#44560
    8a34:	1c010400 	ldr	s0, aab4 <__stack_size+0x6ab4>
    8a38:	2a351100 	orn	w0, w8, w21, lsl #4
    8a3c:	32050000 	orr	w0, w0, #0x8000000
    8a40:	00ae1001 	.inst	0x00ae1001 ; undefined
    8a44:	01040000 	.inst	0x01040000 ; undefined
    8a48:	0e11001b 	tbl	v27.8b, {v0.16b}, v17.8b
    8a4c:	0500001c 	orr	z28.s, z28.s, #0x1
    8a50:	ae130133 	.inst	0xae130133 ; undefined
    8a54:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8a58:	11001a01 	add	w1, w16, #0x6
    8a5c:	0000192b 	udf	#6443
    8a60:	10013405 	adr	x5, b0e0 <__stack_size+0x70e0>
    8a64:	000000ae 	udf	#174
    8a68:	00190104 	.inst	0x00190104 ; undefined
    8a6c:	002ad811 	.inst	0x002ad811 ; NYI
    8a70:	01350500 	.inst	0x01350500 ; undefined
    8a74:	0000ae10 	udf	#44560
    8a78:	18010400 	ldr	w0, aaf8 <__stack_size+0x6af8>
    8a7c:	267a1100 	.inst	0x267a1100 ; undefined
    8a80:	36050000 	tbz	w0, #0, 2a80 <__stack_size-0x1580>
    8a84:	00ae1301 	.inst	0x00ae1301 ; undefined
    8a88:	01040000 	.inst	0x01040000 ; undefined
    8a8c:	b6110017 	tbz	x23, #34, aa8c <__stack_size+0x6a8c>
    8a90:	0500001c 	orr	z28.s, z28.s, #0x1
    8a94:	ae100137 	.inst	0xae100137 ; undefined
    8a98:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8a9c:	11001601 	add	w1, w16, #0x5
    8aa0:	000018e5 	udf	#6373
    8aa4:	10013805 	adr	x5, b1a4 <__stack_size+0x71a4>
    8aa8:	000000ae 	udf	#174
    8aac:	00150104 	.inst	0x00150104 ; undefined
    8ab0:	002edf11 	.inst	0x002edf11 ; NYI
    8ab4:	01390500 	.inst	0x01390500 ; undefined
    8ab8:	0000ae10 	udf	#44560
    8abc:	14010400 	b	49abc <__stack_size+0x45abc>
    8ac0:	2de91100 	ldp	s0, s4, [x8, #-184]!
    8ac4:	3a050000 	adcs	w0, w0, w5
    8ac8:	00ae1001 	.inst	0x00ae1001 ; undefined
    8acc:	01040000 	.inst	0x01040000 ; undefined
    8ad0:	2e110013 	ext	v19.8b, v0.8b, v17.8b, #0
    8ad4:	05000024 	orr	z4.s, z4.s, #0x3
    8ad8:	ae10013b 	.inst	0xae10013b ; undefined
    8adc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8ae0:	11001201 	add	w1, w16, #0x4
    8ae4:	00002d88 	udf	#11656
    8ae8:	13013c05 	sbfx	w5, w0, #1, #15
    8aec:	000000ae 	udf	#174
    8af0:	00110104 	.inst	0x00110104 ; undefined
    8af4:	0026d211 	.inst	0x0026d211 ; NYI
    8af8:	013d0500 	.inst	0x013d0500 ; undefined
    8afc:	0000ae10 	udf	#44560
    8b00:	10010400 	adr	x0, ab80 <__stack_size+0x6b80>
    8b04:	2bc51100 	.inst	0x2bc51100 ; undefined
    8b08:	3e050000 	.inst	0x3e050000 ; undefined
    8b0c:	00ae1001 	.inst	0x00ae1001 ; undefined
    8b10:	01040000 	.inst	0x01040000 ; undefined
    8b14:	7211000f 	ands	w15, w0, #0x8000
    8b18:	0500001c 	orr	z28.s, z28.s, #0x1
    8b1c:	ae10013f 	.inst	0xae10013f ; undefined
    8b20:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8b24:	11000e01 	add	w1, w16, #0x3
    8b28:	00002a08 	udf	#10760
    8b2c:	10014005 	adr	x5, b32c <__stack_size+0x732c>
    8b30:	000000ae 	udf	#174
    8b34:	000d0104 	.inst	0x000d0104 ; undefined
    8b38:	00272d11 	.inst	0x00272d11 ; NYI
    8b3c:	01410500 	.inst	0x01410500 ; undefined
    8b40:	0000ae13 	udf	#44563
    8b44:	0c010400 	.inst	0x0c010400 ; undefined
    8b48:	17c31100 	b	ffffffffff0ccf48 <_sp+0xffffffff9e08cf48>
    8b4c:	42050000 	.inst	0x42050000 ; undefined
    8b50:	00ae1301 	.inst	0x00ae1301 ; undefined
    8b54:	01040000 	.inst	0x01040000 ; undefined
    8b58:	4711000b 	.inst	0x4711000b ; undefined
    8b5c:	05000026 	orr	z6.s, z6.s, #0x3
    8b60:	ae130143 	.inst	0xae130143 ; undefined
    8b64:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8b68:	11000a01 	add	w1, w16, #0x2
    8b6c:	0000283b 	udf	#10299
    8b70:	10014405 	adr	x5, b3f0 <__stack_size+0x73f0>
    8b74:	000000ae 	udf	#174
    8b78:	00090104 	.inst	0x00090104 ; undefined
    8b7c:	002d2b11 	.inst	0x002d2b11 ; NYI
    8b80:	01450500 	.inst	0x01450500 ; undefined
    8b84:	0000ae13 	udf	#44563
    8b88:	08010400 	stxrb	w1, w0, [x0]
    8b8c:	1bd91100 	.inst	0x1bd91100 ; undefined
    8b90:	46050000 	.inst	0x46050000 ; undefined
    8b94:	00ae1001 	.inst	0x00ae1001 ; undefined
    8b98:	01040000 	.inst	0x01040000 ; undefined
    8b9c:	cc110007 	.inst	0xcc110007 ; undefined
    8ba0:	0500001d 	orr	z29.s, z29.s, #0x1
    8ba4:	ae100147 	.inst	0xae100147 ; undefined
    8ba8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8bac:	11000601 	add	w1, w16, #0x1
    8bb0:	0000280e 	udf	#10254
    8bb4:	10014805 	adr	x5, b4b4 <__stack_size+0x74b4>
    8bb8:	000000ae 	udf	#174
    8bbc:	00050104 	.inst	0x00050104 ; undefined
    8bc0:	00182611 	.inst	0x00182611 ; undefined
    8bc4:	01490500 	.inst	0x01490500 ; undefined
    8bc8:	0000ae13 	udf	#44563
    8bcc:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    8bd0:	23081100 	.inst	0x23081100 ; undefined
    8bd4:	4a050000 	eor	w0, w0, w5
    8bd8:	00ae1301 	.inst	0x00ae1301 ; undefined
    8bdc:	01040000 	.inst	0x01040000 ; undefined
    8be0:	1e110003 	.inst	0x1e110003 ; undefined
    8be4:	05000023 	orr	z3.s, z3.s, #0x3
    8be8:	ae10014b 	.inst	0xae10014b ; undefined
    8bec:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8bf0:	11000201 	add	w1, w16, #0x0
    8bf4:	00001b65 	udf	#7013
    8bf8:	10014c05 	adr	x5, b578 <__stack_size+0x7578>
    8bfc:	000000ae 	udf	#174
    8c00:	00010104 	.inst	0x00010104 ; undefined
    8c04:	05041200 	.inst	0x05041200 ; undefined
    8c08:	8309012a 	.inst	0x8309012a ; undefined
    8c0c:	0e00000e 	tbl	v14.8b, {v0.16b}, v0.8b
    8c10:	00323364 	.inst	0x00323364 ; NYI
    8c14:	13012c05 	sbfx	w5, w0, #1, #11
    8c18:	000000ae 	udf	#174
    8c1c:	7469620e 	.inst	0x7469620e ; undefined
    8c20:	014d0500 	.inst	0x014d0500 ; undefined
    8c24:	000c4406 	.inst	0x000c4406 ; undefined
    8c28:	cf0f0000 	.inst	0xcf0f0000 ; undefined
    8c2c:	05000027 	orr	z7.s, z7.s, #0x3
    8c30:	5e02014e 	sha1c	q14, s10, v2.4s
    8c34:	0500000e 	orr	z14.s, z14.s, #0x1
    8c38:	00000e83 	udf	#3715
    8c3c:	53050410 	ubfiz	w16, w0, #27, #2
    8c40:	10160501 	adr	x1, 34ce0 <__stack_size+0x30ce0>
    8c44:	a9110000 	stp	x0, x0, [x0, #272]
    8c48:	0500002a 	orr	z10.s, z10.s, #0x3
    8c4c:	ae110154 	.inst	0xae110154 ; undefined
    8c50:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8c54:	11001f01 	add	w1, w24, #0x7
    8c58:	00001881 	udf	#6273
    8c5c:	11015505 	add	w5, w8, #0x55
    8c60:	000000ae 	udf	#174
    8c64:	001e0104 	.inst	0x001e0104 ; undefined
    8c68:	002e9a11 	.inst	0x002e9a11 ; NYI
    8c6c:	01560500 	.inst	0x01560500 ; undefined
    8c70:	0000ae11 	udf	#44561
    8c74:	1d010400 	.inst	0x1d010400 ; undefined
    8c78:	18b71100 	ldr	w0, fffffffffff76e98 <_sp+0xffffffff9ef36e98>
    8c7c:	57050000 	.inst	0x57050000 ; undefined
    8c80:	00ae1101 	.inst	0x00ae1101 ; undefined
    8c84:	01040000 	.inst	0x01040000 ; undefined
    8c88:	2411001c 	cmphi	p12.b, p0/z, z0.b, z17.b
    8c8c:	0500002a 	orr	z10.s, z10.s, #0x3
    8c90:	ae140158 	.inst	0xae140158 ; undefined
    8c94:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8c98:	11001b01 	add	w1, w24, #0x6
    8c9c:	00001d03 	udf	#7427
    8ca0:	11015905 	add	w5, w8, #0x56
    8ca4:	000000ae 	udf	#174
    8ca8:	001a0104 	.inst	0x001a0104 ; undefined
    8cac:	00215711 	.inst	0x00215711 ; NYI
    8cb0:	015a0500 	.inst	0x015a0500 ; undefined
    8cb4:	0000ae14 	udf	#44564
    8cb8:	19010400 	.inst	0x19010400 ; undefined
    8cbc:	22a11100 	.inst	0x22a11100 ; undefined
    8cc0:	5b050000 	.inst	0x5b050000 ; undefined
    8cc4:	00ae1401 	.inst	0x00ae1401 ; undefined
    8cc8:	01040000 	.inst	0x01040000 ; undefined
    8ccc:	25110018 	cmpgt	p8.b, p0/z, z0.b, #-15
    8cd0:	0500001e 	orr	z30.s, z30.s, #0x1
    8cd4:	ae14015c 	.inst	0xae14015c ; undefined
    8cd8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8cdc:	11001008 	add	w8, w0, #0x4
    8ce0:	00002821 	udf	#10273
    8ce4:	11015d05 	add	w5, w8, #0x57
    8ce8:	000000ae 	udf	#174
    8cec:	000d0304 	.inst	0x000d0304 ; undefined
    8cf0:	002a9611 	.inst	0x002a9611 ; NYI
    8cf4:	015e0500 	.inst	0x015e0500 ; undefined
    8cf8:	0000ae11 	udf	#44561
    8cfc:	0c010400 	.inst	0x0c010400 ; undefined
    8d00:	29e31100 	ldp	w0, w4, [x8, #-232]!
    8d04:	5f050000 	.inst	0x5f050000 ; undefined
    8d08:	00ae1101 	.inst	0x00ae1101 ; undefined
    8d0c:	02040000 	.inst	0x02040000 ; undefined
    8d10:	c811000a 	stxr	w17, x10, [x0]
    8d14:	05000025 	orr	z5.s, z5.s, #0x3
    8d18:	ae110160 	.inst	0xae110160 ; undefined
    8d1c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8d20:	11000901 	add	w1, w8, #0x2
    8d24:	00002693 	udf	#9875
    8d28:	14016105 	b	6113c <__stack_size+0x5d13c>
    8d2c:	000000ae 	udf	#174
    8d30:	00080104 	.inst	0x00080104 ; undefined
    8d34:	00201f11 	.inst	0x00201f11 ; NYI
    8d38:	01620500 	.inst	0x01620500 ; undefined
    8d3c:	0000ae11 	udf	#44561
    8d40:	07010400 	.inst	0x07010400 ; undefined
    8d44:	216b1100 	.inst	0x216b1100 ; undefined
    8d48:	63050000 	.inst	0x63050000 ; undefined
    8d4c:	00ae1401 	.inst	0x00ae1401 ; undefined
    8d50:	01040000 	.inst	0x01040000 ; undefined
    8d54:	25110006 	cmpge	p6.b, p0/z, z0.b, #-15
    8d58:	0500001c 	orr	z28.s, z28.s, #0x1
    8d5c:	ae140164 	.inst	0xae140164 ; undefined
    8d60:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8d64:	11000501 	add	w1, w8, #0x1
    8d68:	0000215e 	udf	#8542
    8d6c:	14016505 	b	62180 <__stack_size+0x5e180>
    8d70:	000000ae 	udf	#174
    8d74:	00040104 	.inst	0x00040104 ; undefined
    8d78:	001a7b11 	.inst	0x001a7b11 ; undefined
    8d7c:	01660500 	.inst	0x01660500 ; undefined
    8d80:	0000ae14 	udf	#44564
    8d84:	03010400 	.inst	0x03010400 ; undefined
    8d88:	23411100 	.inst	0x23411100 ; undefined
    8d8c:	67050000 	.inst	0x67050000 ; undefined
    8d90:	00ae1401 	.inst	0x00ae1401 ; undefined
    8d94:	01040000 	.inst	0x01040000 ; undefined
    8d98:	3f110002 	.inst	0x3f110002 ; undefined
    8d9c:	0500001b 	orr	z27.s, z27.s, #0x1
    8da0:	ae140168 	.inst	0xae140168 ; undefined
    8da4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8da8:	11000101 	add	w1, w8, #0x0
    8dac:	00002dc2 	udf	#11714
    8db0:	14016905 	b	631c4 <__stack_size+0x5f1c4>
    8db4:	000000ae 	udf	#174
    8db8:	00000104 	udf	#260
    8dbc:	05041200 	.inst	0x05041200 ; undefined
    8dc0:	3b090150 	.inst	0x3b090150 ; undefined
    8dc4:	0e000010 	tbl	v16.8b, {v0.16b}, v0.8b
    8dc8:	00323364 	.inst	0x00323364 ; NYI
    8dcc:	13015205 	sbfx	w5, w16, #1, #20
    8dd0:	000000ae 	udf	#174
    8dd4:	7469620e 	.inst	0x7469620e ; undefined
    8dd8:	016a0500 	.inst	0x016a0500 ; undefined
    8ddc:	000e9506 	.inst	0x000e9506 ; undefined
    8de0:	960f0000 	bl	fffffffff83c8de0 <_sp+0xffffffff97388de0>
    8de4:	05000025 	orr	z5.s, z5.s, #0x3
    8de8:	1602016b 	b	fffffffff8089394 <_sp+0xffffffff97049394>
    8dec:	05000010 	orr	z16.s, z16.s, #0x1
    8df0:	0000103b 	udf	#4155
    8df4:	70050410 	adr	x16, 12e77 <__stack_size+0xee77>
    8df8:	118a0201 	.inst	0x118a0201 ; undefined
    8dfc:	ee110000 	.inst	0xee110000 ; undefined
    8e00:	05000022 	orr	z2.s, z2.s, #0x3
    8e04:	ae100171 	.inst	0xae100171 ; undefined
    8e08:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8e0c:	11001f01 	add	w1, w24, #0x7
    8e10:	00001ba3 	udf	#7075
    8e14:	11017205 	add	w5, w16, #0x5c
    8e18:	000000ae 	udf	#174
    8e1c:	001e0104 	.inst	0x001e0104 ; undefined
    8e20:	0024d411 	.inst	0x0024d411 ; NYI
    8e24:	01730500 	.inst	0x01730500 ; undefined
    8e28:	0000ae11 	udf	#44561
    8e2c:	1d010400 	.inst	0x1d010400 ; undefined
    8e30:	228e1100 	.inst	0x228e1100 ; undefined
    8e34:	74050000 	.inst	0x74050000 ; undefined
    8e38:	00ae1001 	.inst	0x00ae1001 ; undefined
    8e3c:	01040000 	.inst	0x01040000 ; undefined
    8e40:	1311001c 	sbfiz	w28, w0, #15, #1
    8e44:	0500002f 	orr	z15.s, z15.s, #0x3
    8e48:	ae100175 	.inst	0xae100175 ; undefined
    8e4c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8e50:	11001b01 	add	w1, w24, #0x6
    8e54:	00002f1d 	udf	#12061
    8e58:	11017605 	add	w5, w16, #0x5d
    8e5c:	000000ae 	udf	#174
    8e60:	001a0104 	.inst	0x001a0104 ; undefined
    8e64:	002f2711 	.inst	0x002f2711 ; NYI
    8e68:	01770500 	.inst	0x01770500 ; undefined
    8e6c:	0000ae10 	udf	#44560
    8e70:	19010400 	.inst	0x19010400 ; undefined
    8e74:	1ed41100 	.inst	0x1ed41100 ; undefined
    8e78:	78050000 	sturh	w0, [x0, #80]
    8e7c:	00ae1001 	.inst	0x00ae1001 ; undefined
    8e80:	01040000 	.inst	0x01040000 ; undefined
    8e84:	c1110018 	.inst	0xc1110018 ; undefined
    8e88:	05000020 	orr	z0.s, z0.s, #0x3
    8e8c:	ae110179 	.inst	0xae110179 ; undefined
    8e90:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8e94:	11001404 	add	w4, w0, #0x5
    8e98:	00002096 	udf	#8342
    8e9c:	10017a05 	adr	x5, bddc <__stack_size+0x7ddc>
    8ea0:	000000ae 	udf	#174
    8ea4:	00130104 	.inst	0x00130104 ; undefined
    8ea8:	001da411 	.inst	0x001da411 ; undefined
    8eac:	017b0500 	.inst	0x017b0500 ; undefined
    8eb0:	0000ae10 	udf	#44560
    8eb4:	12010400 	and	w0, w0, #0x80000001
    8eb8:	21721100 	.inst	0x21721100 ; undefined
    8ebc:	7c050000 	stur	h0, [x0, #80]
    8ec0:	00ae1001 	.inst	0x00ae1001 ; undefined
    8ec4:	02040000 	.inst	0x02040000 ; undefined
    8ec8:	3f110010 	.inst	0x3f110010 ; undefined
    8ecc:	05000026 	orr	z6.s, z6.s, #0x3
    8ed0:	ae10017d 	.inst	0xae10017d ; undefined
    8ed4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8ed8:	11000808 	add	w8, w0, #0x2
    8edc:	00002b85 	udf	#11141
    8ee0:	13017e05 	asr	w5, w16, #1
    8ee4:	000000ae 	udf	#174
    8ee8:	00050304 	.inst	0x00050304 ; undefined
    8eec:	002c8411 	.inst	0x002c8411 ; NYI
    8ef0:	017f0500 	.inst	0x017f0500 ; undefined
    8ef4:	0000ae10 	udf	#44560
    8ef8:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    8efc:	2f3f1100 	.inst	0x2f3f1100 ; undefined
    8f00:	80050000 	.inst	0x80050000 ; undefined
    8f04:	00ae1001 	.inst	0x00ae1001 ; undefined
    8f08:	01040000 	.inst	0x01040000 ; undefined
    8f0c:	04110003 	.inst	0x04110003 ; undefined
    8f10:	05000024 	orr	z4.s, z4.s, #0x3
    8f14:	ae100181 	.inst	0xae100181 ; undefined
    8f18:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8f1c:	11000201 	add	w1, w16, #0x0
    8f20:	00002903 	udf	#10499
    8f24:	10018205 	adr	x5, bf64 <__stack_size+0x7f64>
    8f28:	000000ae 	udf	#174
    8f2c:	00000204 	udf	#516
    8f30:	05081000 	.inst	0x05081000 ; undefined
    8f34:	b109016d 	adds	x13, x11, #0x240
    8f38:	13000011 	sbfx	w17, w0, #0, #1
    8f3c:	00323364 	.inst	0x00323364 ; NYI
    8f40:	10016f05 	adr	x5, bd20 <__stack_size+0x7d20>
    8f44:	000000ae 	udf	#174
    8f48:	69621300 	ldpsw	x0, x4, [x24, #-240]
    8f4c:	83050074 	.inst	0x83050074 ; undefined
    8f50:	104d0301 	adr	x1, a2fb0 <__stack_size+0x9efb0>
    8f54:	00040000 	.inst	0x00040000 ; undefined
    8f58:	001a6b0f 	.inst	0x001a6b0f ; undefined
    8f5c:	01840500 	.inst	0x01840500 ; undefined
    8f60:	00118a02 	.inst	0x00118a02 ; undefined
    8f64:	11b10500 	.inst	0x11b10500 ; undefined
    8f68:	04100000 	mul	z0.b, p0/m, z0.b, z0.b
    8f6c:	02018905 	.inst	0x02018905 ; undefined
    8f70:	00001300 	udf	#4864
    8f74:	0028b011 	.inst	0x0028b011 ; NYI
    8f78:	018a0500 	.inst	0x018a0500 ; undefined
    8f7c:	0000ae11 	udf	#44561
    8f80:	1a060400 	.inst	0x1a060400 ; undefined
    8f84:	21571100 	.inst	0x21571100 ; undefined
    8f88:	8b050000 	add	x0, x0, x5
    8f8c:	00ae1101 	.inst	0x00ae1101 ; undefined
    8f90:	01040000 	.inst	0x01040000 ; undefined
    8f94:	ed110019 	.inst	0xed110019 ; undefined
    8f98:	05000017 	orr	z23.s, z23.s, #0x1
    8f9c:	ae11018c 	.inst	0xae11018c ; undefined
    8fa0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8fa4:	11001801 	add	w1, w0, #0x6
    8fa8:	000029cb 	udf	#10699
    8fac:	11018d05 	add	w5, w8, #0x63
    8fb0:	000000ae 	udf	#174
    8fb4:	00100804 	.inst	0x00100804 ; undefined
    8fb8:	002f5a11 	.inst	0x002f5a11 ; NYI
    8fbc:	018e0500 	.inst	0x018e0500 ; undefined
    8fc0:	0000ae11 	udf	#44561
    8fc4:	0e020400 	dup	v0.4h, v0.h[0]
    8fc8:	2b341100 	adds	w0, w8, w20, uxtb #4
    8fcc:	8f050000 	.inst	0x8f050000 ; undefined
    8fd0:	00ae1101 	.inst	0x00ae1101 ; undefined
    8fd4:	01040000 	.inst	0x01040000 ; undefined
    8fd8:	6511000d 	.inst	0x6511000d ; undefined
    8fdc:	05000029 	orr	z9.s, z9.s, #0x3
    8fe0:	ae110190 	.inst	0xae110190 ; undefined
    8fe4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    8fe8:	11000c01 	add	w1, w0, #0x3
    8fec:	00001d38 	udf	#7480
    8ff0:	11019105 	add	w5, w8, #0x64
    8ff4:	000000ae 	udf	#174
    8ff8:	000b0104 	.inst	0x000b0104 ; undefined
    8ffc:	001f8411 	.inst	0x001f8411 ; undefined
    9000:	01920500 	.inst	0x01920500 ; undefined
    9004:	0000ae11 	udf	#44561
    9008:	0a010400 	and	w0, w0, w1, lsl #1
    900c:	23341100 	.inst	0x23341100 ; undefined
    9010:	93050000 	.inst	0x93050000 ; undefined
    9014:	00ae1101 	.inst	0x00ae1101 ; undefined
    9018:	01040000 	.inst	0x01040000 ; undefined
    901c:	93110009 	.inst	0x93110009 ; undefined
    9020:	0500001b 	orr	z27.s, z27.s, #0x1
    9024:	ae110194 	.inst	0xae110194 ; undefined
    9028:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    902c:	11000801 	add	w1, w0, #0x2
    9030:	00002bbd 	udf	#11197
    9034:	11019505 	add	w5, w8, #0x65
    9038:	000000ae 	udf	#174
    903c:	00070104 	.inst	0x00070104 ; undefined
    9040:	002bb511 	.inst	0x002bb511 ; NYI
    9044:	01960500 	.inst	0x01960500 ; undefined
    9048:	0000ae11 	udf	#44561
    904c:	06010400 	.inst	0x06010400 ; undefined
    9050:	28a81100 	stp	w0, w4, [x8], #-192
    9054:	97050000 	bl	fffffffffc149054 <_sp+0xffffffff9b109054>
    9058:	00ae1101 	.inst	0x00ae1101 ; undefined
    905c:	01040000 	.inst	0x01040000 ; undefined
    9060:	4b110005 	sub	w5, w0, w17
    9064:	05000029 	orr	z9.s, z9.s, #0x3
    9068:	ae110198 	.inst	0xae110198 ; undefined
    906c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9070:	11000401 	add	w1, w0, #0x1
    9074:	00002c10 	udf	#11280
    9078:	11019905 	add	w5, w8, #0x66
    907c:	000000ae 	udf	#174
    9080:	00030104 	.inst	0x00030104 ; undefined
    9084:	00241c11 	.inst	0x00241c11 ; NYI
    9088:	019a0500 	.inst	0x019a0500 ; undefined
    908c:	0000ae11 	udf	#44561
    9090:	02010400 	.inst	0x02010400 ; undefined
    9094:	22d81100 	.inst	0x22d81100 ; undefined
    9098:	9b050000 	madd	x0, x0, x5, x0
    909c:	00ae1101 	.inst	0x00ae1101 ; undefined
    90a0:	01040000 	.inst	0x01040000 ; undefined
    90a4:	10000001 	adr	x1, 90a4 <__stack_size+0x50a4>
    90a8:	01860508 	.inst	0x01860508 ; undefined
    90ac:	00132709 	.inst	0x00132709 ; undefined
    90b0:	33641300 	.inst	0x33641300 ; undefined
    90b4:	88050032 	stxr	w5, w18, [x1]
    90b8:	00ae1001 	.inst	0x00ae1001 ; undefined
    90bc:	13000000 	sbfx	w0, w0, #0, #1
    90c0:	00746962 	.inst	0x00746962 ; undefined
    90c4:	03019c05 	.inst	0x03019c05 ; undefined
    90c8:	000011c3 	udf	#4547
    90cc:	620f0004 	.inst	0x620f0004 ; undefined
    90d0:	05000028 	orr	z8.s, z8.s, #0x3
    90d4:	0002019d 	.inst	0x0002019d ; undefined
    90d8:	05000013 	orr	z19.s, z19.s, #0x1
    90dc:	00001327 	udf	#4903
    90e0:	a2050410 	.inst	0xa2050410 ; undefined
    90e4:	13880201 	extr	w1, w16, w8, #0
    90e8:	54110000 	b.eq	2b0e8 <__stack_size+0x270e8>  // b.none
    90ec:	05000027 	orr	z7.s, z7.s, #0x3
    90f0:	ae1101a3 	.inst	0xae1101a3 ; undefined
    90f4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    90f8:	11001808 	add	w8, w0, #0x6
    90fc:	00002282 	udf	#8834
    9100:	1101a405 	add	w5, w0, #0x69
    9104:	000000ae 	udf	#174
    9108:	00100804 	.inst	0x00100804 ; undefined
    910c:	001b0e11 	.inst	0x001b0e11 ; undefined
    9110:	01a50500 	.inst	0x01a50500 ; undefined
    9114:	0000ae11 	udf	#44561
    9118:	08080400 	stxrb	w8, w0, [x0]
    911c:	2e721100 	uaddw	v0.4s, v8.4s, v18.4h
    9120:	a6050000 	.inst	0xa6050000 ; undefined
    9124:	00ae1101 	.inst	0x00ae1101 ; undefined
    9128:	08040000 	stxrb	w4, w0, [x0]
    912c:	10000000 	adr	x0, 912c <__stack_size+0x512c>
    9130:	019f0508 	.inst	0x019f0508 ; undefined
    9134:	0013af09 	.inst	0x0013af09 ; undefined
    9138:	33641300 	.inst	0x33641300 ; undefined
    913c:	a1050032 	.inst	0xa1050032 ; undefined
    9140:	00ae1001 	.inst	0x00ae1001 ; undefined
    9144:	13000000 	sbfx	w0, w0, #0, #1
    9148:	00746962 	.inst	0x00746962 ; undefined
    914c:	0301a705 	.inst	0x0301a705 ; undefined
    9150:	00001339 	udf	#4921
    9154:	5d0f0004 	.inst	0x5d0f0004 ; undefined
    9158:	05000028 	orr	z8.s, z8.s, #0x3
    915c:	880201a8 	stxr	w2, w8, [x13]
    9160:	05000013 	orr	z19.s, z19.s, #0x1
    9164:	000013af 	udf	#5039
    9168:	ad050410 	stp	q16, q1, [x0, #160]
    916c:	13ee0201 	.inst	0x13ee0201 ; undefined
    9170:	e9110000 	.inst	0xe9110000 ; undefined
    9174:	05000026 	orr	z6.s, z6.s, #0x3
    9178:	ae1101ae 	.inst	0xae1101ae ; undefined
    917c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9180:	11001808 	add	w8, w0, #0x6
    9184:	00001aee 	udf	#6894
    9188:	1101af05 	add	w5, w24, #0x6b
    918c:	000000ae 	udf	#174
    9190:	00001804 	udf	#6148
    9194:	05081000 	.inst	0x05081000 ; undefined
    9198:	150901aa 	b	4249840 <__stack_size+0x4245840>
    919c:	13000014 	sbfx	w20, w0, #0, #1
    91a0:	00323364 	.inst	0x00323364 ; NYI
    91a4:	1001ac05 	adr	x5, c724 <__stack_size+0x8724>
    91a8:	000000ae 	udf	#174
    91ac:	69621300 	ldpsw	x0, x4, [x24, #-240]
    91b0:	b0050074 	adrp	x20, a016000 <__stack_size+0xa012000>
    91b4:	13c10301 	.inst	0x13c10301 ; undefined
    91b8:	00040000 	.inst	0x00040000 ; undefined
    91bc:	001a660f 	.inst	0x001a660f ; undefined
    91c0:	01b10500 	.inst	0x01b10500 ; undefined
    91c4:	0013ee02 	.inst	0x0013ee02 ; undefined
    91c8:	14150500 	b	54a5c8 <__stack_size+0x5465c8>
    91cc:	04100000 	mul	z0.b, p0/m, z0.b, z0.b
    91d0:	0201b605 	.inst	0x0201b605 ; undefined
    91d4:	000015db 	udf	#5595
    91d8:	002aa311 	.inst	0x002aa311 ; NYI
    91dc:	01b70500 	.inst	0x01b70500 ; undefined
    91e0:	0000ae11 	udf	#44561
    91e4:	1f010400 	fmadd	s0, s0, s1, s1
    91e8:	187b1100 	ldr	w0, ff408 <__stack_size+0xfb408>
    91ec:	b8050000 	stur	w0, [x0, #80]
    91f0:	00ae1101 	.inst	0x00ae1101 ; undefined
    91f4:	01040000 	.inst	0x01040000 ; undefined
    91f8:	9411001e 	bl	449270 <__stack_size+0x445270>
    91fc:	0500002e 	orr	z14.s, z14.s, #0x3
    9200:	ae1101b9 	.inst	0xae1101b9 ; undefined
    9204:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9208:	11001d01 	add	w1, w8, #0x7
    920c:	000018b1 	udf	#6321
    9210:	1101ba05 	add	w5, w16, #0x6e
    9214:	000000ae 	udf	#174
    9218:	001c0104 	.inst	0x001c0104 ; undefined
    921c:	002a1e11 	.inst	0x002a1e11 ; NYI
    9220:	01bb0500 	.inst	0x01bb0500 ; undefined
    9224:	0000ae11 	udf	#44561
    9228:	1b010400 	madd	w0, w0, w1, w1
    922c:	1cfd1100 	ldr	s0, 344c <__stack_size-0xbb4>
    9230:	bc050000 	stur	s0, [x0, #80]
    9234:	00ae1101 	.inst	0x00ae1101 ; undefined
    9238:	01040000 	.inst	0x01040000 ; undefined
    923c:	5711001a 	.inst	0x5711001a ; undefined
    9240:	05000021 	orr	z1.s, z1.s, #0x3
    9244:	ae1101bd 	.inst	0xae1101bd ; undefined
    9248:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    924c:	11001901 	add	w1, w8, #0x6
    9250:	0000229b 	udf	#8859
    9254:	1101be05 	add	w5, w16, #0x6f
    9258:	000000ae 	udf	#174
    925c:	00180104 	.inst	0x00180104 ; undefined
    9260:	001e2511 	.inst	0x001e2511 ; undefined
    9264:	01bf0500 	.inst	0x01bf0500 ; undefined
    9268:	0000ae11 	udf	#44561
    926c:	10080400 	adr	x0, 192ec <__stack_size+0x152ec>
    9270:	2b671100 	.inst	0x2b671100 ; undefined
    9274:	c0050000 	.inst	0xc0050000 ; undefined
    9278:	00ae1101 	.inst	0x00ae1101 ; undefined
    927c:	01040000 	.inst	0x01040000 ; undefined
    9280:	2111000f 	.inst	0x2111000f ; undefined
    9284:	05000025 	orr	z5.s, z5.s, #0x3
    9288:	ae1101c1 	.inst	0xae1101c1 ; undefined
    928c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9290:	11000e01 	add	w1, w16, #0x3
    9294:	00001f97 	udf	#8087
    9298:	1101c205 	add	w5, w16, #0x70
    929c:	000000ae 	udf	#174
    92a0:	000d0104 	.inst	0x000d0104 ; undefined
    92a4:	0018d311 	.inst	0x0018d311 ; undefined
    92a8:	01c30500 	.inst	0x01c30500 ; undefined
    92ac:	0000ae11 	udf	#44561
    92b0:	0c010400 	.inst	0x0c010400 ; undefined
    92b4:	25fd1100 	whilege	p0.d, x8, x29
    92b8:	c4050000 	ld1sb	{z0.d}, p0/z, [x0, z5.d, uxtw]
    92bc:	00ae1101 	.inst	0x00ae1101 ; undefined
    92c0:	01040000 	.inst	0x01040000 ; undefined
    92c4:	da11000b 	sbc	x11, x0, x17
    92c8:	05000017 	orr	z23.s, z23.s, #0x1
    92cc:	ae1101c5 	.inst	0xae1101c5 ; undefined
    92d0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    92d4:	11000a01 	add	w1, w16, #0x2
    92d8:	0000237c 	udf	#9084
    92dc:	1101c605 	add	w5, w16, #0x71
    92e0:	000000ae 	udf	#174
    92e4:	00090104 	.inst	0x00090104 ; undefined
    92e8:	00255e11 	.inst	0x00255e11 ; NYI
    92ec:	01c70500 	.inst	0x01c70500 ; undefined
    92f0:	0000ae11 	udf	#44561
    92f4:	08010400 	stxrb	w1, w0, [x0]
    92f8:	26b71100 	.inst	0x26b71100 ; undefined
    92fc:	c8050000 	stxr	w5, x0, [x0]
    9300:	00ae1101 	.inst	0x00ae1101 ; undefined
    9304:	01040000 	.inst	0x01040000 ; undefined
    9308:	1c110007 	ldr	s7, 2b308 <__stack_size+0x27308>
    930c:	05000019 	orr	z25.s, z25.s, #0x1
    9310:	ae1101c9 	.inst	0xae1101c9 ; undefined
    9314:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9318:	11000601 	add	w1, w16, #0x1
    931c:	000023f3 	udf	#9203
    9320:	1101ca05 	add	w5, w16, #0x72
    9324:	000000ae 	udf	#174
    9328:	00050104 	.inst	0x00050104 ; undefined
    932c:	00196a11 	.inst	0x00196a11 ; undefined
    9330:	01cb0500 	.inst	0x01cb0500 ; undefined
    9334:	0000ae11 	udf	#44561
    9338:	04010400 	sub	z0.b, p1/m, z0.b, z0.b
    933c:	278c1100 	.inst	0x278c1100 ; undefined
    9340:	cc050000 	.inst	0xcc050000 ; undefined
    9344:	00ae1101 	.inst	0x00ae1101 ; undefined
    9348:	01040000 	.inst	0x01040000 ; undefined
    934c:	a6110003 	.inst	0xa6110003 ; undefined
    9350:	05000027 	orr	z7.s, z7.s, #0x3
    9354:	ae1101cd 	.inst	0xae1101cd ; undefined
    9358:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    935c:	11000201 	add	w1, w16, #0x0
    9360:	000027b8 	udf	#10168
    9364:	1101ce05 	add	w5, w16, #0x73
    9368:	000000ae 	udf	#174
    936c:	00010104 	.inst	0x00010104 ; undefined
    9370:	002c1f11 	.inst	0x002c1f11 ; NYI
    9374:	01cf0500 	.inst	0x01cf0500 ; undefined
    9378:	0000ae11 	udf	#44561
    937c:	00010400 	.inst	0x00010400 ; undefined
    9380:	08100000 	stxrb	w16, w0, [x0]
    9384:	0901b305 	.inst	0x0901b305 ; undefined
    9388:	00001602 	udf	#5634
    938c:	32336413 	orr	w19, w0, #0xffffe07f
    9390:	01b50500 	.inst	0x01b50500 ; undefined
    9394:	0000ae10 	udf	#44560
    9398:	62130000 	.inst	0x62130000 ; undefined
    939c:	05007469 	orr	z9.h, z9.h, #0x3c
    93a0:	270301d0 	.inst	0x270301d0 ; undefined
    93a4:	04000014 	add	z20.b, p0/m, z20.b, z0.b
    93a8:	2c310f00 	stnp	s0, s3, [x24, #-120]
    93ac:	d1050000 	sub	x0, x0, #0x140
    93b0:	15db0201 	b	76c9bb4 <__stack_size+0x76c5bb4>
    93b4:	02050000 	.inst	0x02050000 ; undefined
    93b8:	10000016 	adr	x22, 93b8 <__stack_size+0x53b8>
    93bc:	01d70504 	.inst	0x01d70504 ; undefined
    93c0:	00165202 	.inst	0x00165202 ; undefined
    93c4:	29821100 	stp	w0, w4, [x8, #16]!
    93c8:	d8050000 	prfm	pldl1keep, 133c8 <__stack_size+0xf3c8>
    93cc:	00ae1101 	.inst	0x00ae1101 ; undefined
    93d0:	02040000 	.inst	0x02040000 ; undefined
    93d4:	7e11001e 	.inst	0x7e11001e ; undefined
    93d8:	05000024 	orr	z4.s, z4.s, #0x3
    93dc:	ae1101d9 	.inst	0xae1101d9 ; undefined
    93e0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    93e4:	11001d01 	add	w1, w8, #0x7
    93e8:	0000220f 	udf	#8719
    93ec:	1101da05 	add	w5, w16, #0x76
    93f0:	000000ae 	udf	#174
    93f4:	00001d04 	udf	#7428
    93f8:	05081000 	.inst	0x05081000 ; undefined
    93fc:	790901d4 	strh	w20, [x14, #1152]
    9400:	13000016 	sbfx	w22, w0, #0, #1
    9404:	00323364 	.inst	0x00323364 ; NYI
    9408:	1001d605 	adr	x5, cec8 <__stack_size+0x8ec8>
    940c:	000000ae 	udf	#174
    9410:	69621300 	ldpsw	x0, x4, [x24, #-240]
    9414:	db050074 	.inst	0xdb050074 ; undefined
    9418:	16140301 	b	fffffffff850a01c <_sp+0xffffffff974ca01c>
    941c:	00040000 	.inst	0x00040000 ; undefined
    9420:	002f6f0f 	.inst	0x002f6f0f ; NYI
    9424:	01dc0500 	.inst	0x01dc0500 ; undefined
    9428:	00165202 	.inst	0x00165202 ; undefined
    942c:	16790500 	b	fffffffff9e4a82c <_sp+0xffffffff98e0a82c>
    9430:	04100000 	mul	z0.b, p0/m, z0.b, z0.b
    9434:	0201e105 	.inst	0x0201e105 ; undefined
    9438:	0000171e 	udf	#5918
    943c:	002c9a11 	.inst	0x002c9a11 ; NYI
    9440:	01e20500 	.inst	0x01e20500 ; undefined
    9444:	0000ae11 	udf	#44561
    9448:	160a0400 	b	fffffffff828a448 <_sp+0xffffffff9724a448>
    944c:	1ad91100 	.inst	0x1ad91100 ; undefined
    9450:	e3050000 	.inst	0xe3050000 ; undefined
    9454:	00ae1101 	.inst	0x00ae1101 ; undefined
    9458:	01040000 	.inst	0x01040000 ; undefined
    945c:	da110015 	sbc	x21, x0, x17
    9460:	05000028 	orr	z8.s, z8.s, #0x3
    9464:	ae1101e4 	.inst	0xae1101e4 ; undefined
    9468:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    946c:	11001203 	add	w3, w16, #0x4
    9470:	000028f2 	udf	#10482
    9474:	1101e505 	add	w5, w8, #0x79
    9478:	000000ae 	udf	#174
    947c:	00100204 	.inst	0x00100204 ; undefined
    9480:	00290e11 	.inst	0x00290e11 ; NYI
    9484:	01e60500 	.inst	0x01e60500 ; undefined
    9488:	0000ae11 	udf	#44561
    948c:	060a0400 	.inst	0x060a0400 ; undefined
    9490:	205a1100 	.inst	0x205a1100 ; undefined
    9494:	e7050000 	.inst	0xe7050000 ; undefined
    9498:	00ae1101 	.inst	0x00ae1101 ; undefined
    949c:	01040000 	.inst	0x01040000 ; undefined
    94a0:	a9110005 	stp	x5, x0, [x0, #272]
    94a4:	0500002d 	orr	z13.s, z13.s, #0x3
    94a8:	ae1101e8 	.inst	0xae1101e8 ; undefined
    94ac:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    94b0:	11000203 	add	w3, w16, #0x0
    94b4:	00001755 	udf	#5973
    94b8:	1101e905 	add	w5, w8, #0x7a
    94bc:	000000ae 	udf	#174
    94c0:	00000204 	udf	#516
    94c4:	05081000 	.inst	0x05081000 ; undefined
    94c8:	450901de 	.inst	0x450901de ; undefined
    94cc:	13000017 	sbfx	w23, w0, #0, #1
    94d0:	00323364 	.inst	0x00323364 ; NYI
    94d4:	1001e005 	adr	x5, d0d4 <__stack_size+0x90d4>
    94d8:	000000ae 	udf	#174
    94dc:	69621300 	ldpsw	x0, x4, [x24, #-240]
    94e0:	ea050074 	ands	x20, x3, x5
    94e4:	168b0301 	b	fffffffffa2ca0e8 <_sp+0xffffffff9928a0e8>
    94e8:	00040000 	.inst	0x00040000 ; undefined
    94ec:	0027600f 	.inst	0x0027600f ; NYI
    94f0:	01eb0500 	.inst	0x01eb0500 ; undefined
    94f4:	00171e02 	.inst	0x00171e02 ; undefined
    94f8:	17450500 	b	fffffffffd14a8f8 <_sp+0xffffffff9c10a8f8>
    94fc:	04100000 	mul	z0.b, p0/m, z0.b, z0.b
    9500:	0201f005 	.inst	0x0201f005 ; undefined
    9504:	000017ea 	udf	#6122
    9508:	00219911 	.inst	0x00219911 ; NYI
    950c:	01f10500 	.inst	0x01f10500 ; undefined
    9510:	0000ae11 	udf	#44561
    9514:	160a0400 	b	fffffffff828a514 <_sp+0xffffffff9724a514>
    9518:	20af1100 	.inst	0x20af1100 ; undefined
    951c:	f2050000 	ands	x0, x0, #0x800000008000000
    9520:	00ae1101 	.inst	0x00ae1101 ; undefined
    9524:	01040000 	.inst	0x01040000 ; undefined
    9528:	da110015 	sbc	x21, x0, x17
    952c:	05000028 	orr	z8.s, z8.s, #0x3
    9530:	ae1101f3 	.inst	0xae1101f3 ; undefined
    9534:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9538:	11001203 	add	w3, w16, #0x4
    953c:	00001d2a 	udf	#7466
    9540:	1101f405 	add	w5, w0, #0x7d
    9544:	000000ae 	udf	#174
    9548:	00100204 	.inst	0x00100204 ; undefined
    954c:	0021bd11 	.inst	0x0021bd11 ; NYI
    9550:	01f50500 	.inst	0x01f50500 ; undefined
    9554:	0000ae11 	udf	#44561
    9558:	060a0400 	.inst	0x060a0400 ; undefined
    955c:	1f0e1100 	fmadd	s0, s8, s14, s4
    9560:	f6050000 	.inst	0xf6050000 ; undefined
    9564:	00ae1101 	.inst	0x00ae1101 ; undefined
    9568:	01040000 	.inst	0x01040000 ; undefined
    956c:	a9110005 	stp	x5, x0, [x0, #272]
    9570:	0500002d 	orr	z13.s, z13.s, #0x3
    9574:	ae1101f7 	.inst	0xae1101f7 ; undefined
    9578:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    957c:	11000203 	add	w3, w16, #0x0
    9580:	00002f31 	udf	#12081
    9584:	1101f805 	add	w5, w0, #0x7e
    9588:	000000ae 	udf	#174
    958c:	00000204 	udf	#516
    9590:	05081000 	.inst	0x05081000 ; undefined
    9594:	110901ed 	add	w13, w15, #0x240
    9598:	13000018 	sbfx	w24, w0, #0, #1
    959c:	00323364 	.inst	0x00323364 ; NYI
    95a0:	1001ef05 	adr	x5, d380 <__stack_size+0x9380>
    95a4:	000000ae 	udf	#174
    95a8:	69621300 	ldpsw	x0, x4, [x24, #-240]
    95ac:	f9050074 	str	x20, [x3, #2560]
    95b0:	17570301 	b	fffffffffd5ca1b4 <_sp+0xffffffff9c58a1b4>
    95b4:	00040000 	.inst	0x00040000 ; undefined
    95b8:	00218d0f 	.inst	0x00218d0f ; NYI
    95bc:	01fa0500 	.inst	0x01fa0500 ; undefined
    95c0:	0017ea02 	.inst	0x0017ea02 ; undefined
    95c4:	18110500 	ldr	w0, 2b664 <__stack_size+0x27664>
    95c8:	04100000 	mul	z0.b, p0/m, z0.b, z0.b
    95cc:	0201ff05 	.inst	0x0201ff05 ; undefined
    95d0:	000018b6 	udf	#6326
    95d4:	00219911 	.inst	0x00219911 ; NYI
    95d8:	02000500 	.inst	0x02000500 ; undefined
    95dc:	0000ae11 	udf	#44561
    95e0:	160a0400 	b	fffffffff828a5e0 <_sp+0xffffffff9724a5e0>
    95e4:	20af1100 	.inst	0x20af1100 ; undefined
    95e8:	01050000 	.inst	0x01050000 ; undefined
    95ec:	00ae1102 	.inst	0x00ae1102 ; undefined
    95f0:	01040000 	.inst	0x01040000 ; undefined
    95f4:	da110015 	sbc	x21, x0, x17
    95f8:	05000028 	orr	z8.s, z8.s, #0x3
    95fc:	ae110202 	.inst	0xae110202 ; undefined
    9600:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9604:	11001203 	add	w3, w16, #0x4
    9608:	00001d2a 	udf	#7466
    960c:	11020305 	add	w5, w24, #0x80
    9610:	000000ae 	udf	#174
    9614:	00100204 	.inst	0x00100204 ; undefined
    9618:	0021bd11 	.inst	0x0021bd11 ; NYI
    961c:	02040500 	.inst	0x02040500 ; undefined
    9620:	0000ae11 	udf	#44561
    9624:	060a0400 	.inst	0x060a0400 ; undefined
    9628:	1f0e1100 	fmadd	s0, s8, s14, s4
    962c:	05050000 	.inst	0x05050000 ; undefined
    9630:	00ae1102 	.inst	0x00ae1102 ; undefined
    9634:	01040000 	.inst	0x01040000 ; undefined
    9638:	a9110005 	stp	x5, x0, [x0, #272]
    963c:	0500002d 	orr	z13.s, z13.s, #0x3
    9640:	ae110206 	.inst	0xae110206 ; undefined
    9644:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9648:	11000203 	add	w3, w16, #0x0
    964c:	00002f31 	udf	#12081
    9650:	11020705 	add	w5, w24, #0x81
    9654:	000000ae 	udf	#174
    9658:	00000204 	udf	#516
    965c:	05081000 	.inst	0x05081000 ; undefined
    9660:	dd0901fc 	.inst	0xdd0901fc ; undefined
    9664:	13000018 	sbfx	w24, w0, #0, #1
    9668:	00323364 	.inst	0x00323364 ; NYI
    966c:	1001fe05 	adr	x5, d62c <__stack_size+0x962c>
    9670:	000000ae 	udf	#174
    9674:	69621300 	ldpsw	x0, x4, [x24, #-240]
    9678:	08050074 	stxrb	w5, w20, [x3]
    967c:	18230302 	ldr	w2, 4f6dc <__stack_size+0x4b6dc>
    9680:	00040000 	.inst	0x00040000 ; undefined
    9684:	0025020f 	.inst	0x0025020f ; NYI
    9688:	02090500 	.inst	0x02090500 ; undefined
    968c:	0018b602 	.inst	0x0018b602 ; undefined
    9690:	18dd0500 	ldr	w0, fffffffffffc3730 <_sp+0xffffffff9ef83730>
    9694:	04100000 	mul	z0.b, p0/m, z0.b, z0.b
    9698:	02020e05 	.inst	0x02020e05 ; undefined
    969c:	00001982 	udf	#6530
    96a0:	00219911 	.inst	0x00219911 ; NYI
    96a4:	020f0500 	.inst	0x020f0500 ; undefined
    96a8:	0000ae11 	udf	#44561
    96ac:	160a0400 	b	fffffffff828a6ac <_sp+0xffffffff9724a6ac>
    96b0:	20af1100 	.inst	0x20af1100 ; undefined
    96b4:	10050000 	adr	x0, 136b4 <__stack_size+0xf6b4>
    96b8:	00ae1102 	.inst	0x00ae1102 ; undefined
    96bc:	01040000 	.inst	0x01040000 ; undefined
    96c0:	da110015 	sbc	x21, x0, x17
    96c4:	05000028 	orr	z8.s, z8.s, #0x3
    96c8:	ae110211 	.inst	0xae110211 ; undefined
    96cc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    96d0:	11001203 	add	w3, w16, #0x4
    96d4:	00001d2a 	udf	#7466
    96d8:	11021205 	add	w5, w16, #0x84
    96dc:	000000ae 	udf	#174
    96e0:	00100204 	.inst	0x00100204 ; undefined
    96e4:	0021bd11 	.inst	0x0021bd11 ; NYI
    96e8:	02130500 	.inst	0x02130500 ; undefined
    96ec:	0000ae11 	udf	#44561
    96f0:	060a0400 	.inst	0x060a0400 ; undefined
    96f4:	1f0e1100 	fmadd	s0, s8, s14, s4
    96f8:	14050000 	b	1496f8 <__stack_size+0x1456f8>
    96fc:	00ae1102 	.inst	0x00ae1102 ; undefined
    9700:	01040000 	.inst	0x01040000 ; undefined
    9704:	a9110005 	stp	x5, x0, [x0, #272]
    9708:	0500002d 	orr	z13.s, z13.s, #0x3
    970c:	ae110215 	.inst	0xae110215 ; undefined
    9710:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    9714:	11000203 	add	w3, w16, #0x0
    9718:	00002f31 	udf	#12081
    971c:	11021605 	add	w5, w16, #0x85
    9720:	000000ae 	udf	#174
    9724:	00000204 	udf	#516
    9728:	05081000 	.inst	0x05081000 ; undefined
    972c:	a909020b 	stp	x11, x0, [x16, #144]
    9730:	13000019 	sbfx	w25, w0, #0, #1
    9734:	00323364 	.inst	0x00323364 ; NYI
    9738:	10020d05 	adr	x5, d8d8 <__stack_size+0x98d8>
    973c:	000000ae 	udf	#174
    9740:	69621300 	ldpsw	x0, x4, [x24, #-240]
    9744:	17050074 	b	fffffffffc149914 <_sp+0xffffffff9b109914>
    9748:	18ef0302 	ldr	w2, fffffffffffe77a8 <_sp+0xffffffff9efa77a8>
    974c:	00040000 	.inst	0x00040000 ; undefined
    9750:	0020e30f 	.inst	0x0020e30f ; NYI
    9754:	02180500 	.inst	0x02180500 ; undefined
    9758:	00198202 	.inst	0x00198202 ; undefined
    975c:	19a90500 	.inst	0x19a90500 ; undefined
    9760:	98100000 	ldrsw	x0, 29760 <__stack_size+0x25760>
    9764:	09022705 	.inst	0x09022705 ; undefined
    9768:	00001b4e 	udf	#6990
    976c:	001dc314 	.inst	0x001dc314 ; undefined
    9770:	02290500 	.inst	0x02290500 ; undefined
    9774:	0000ae13 	udf	#44563
    9778:	62140000 	.inst	0x62140000 ; undefined
    977c:	05000026 	orr	z6.s, z6.s, #0x3
    9780:	0a24022a 	bic	w10, w17, w4
    9784:	04000002 	add	z2.b, p0/m, z2.b, z0.b
    9788:	00257014 	.inst	0x00257014 ; NYI
    978c:	022b0500 	.inst	0x022b0500 ; undefined
    9790:	0000ae13 	udf	#44563
    9794:	7b140800 	.inst	0x7b140800 ; undefined
    9798:	05000027 	orr	z7.s, z7.s, #0x3
    979c:	571d022c 	.inst	0x571d022c ; undefined
    97a0:	0c000003 	st4	{v3.8b-v6.8b}, [x0]
    97a4:	001cc614 	.inst	0x001cc614 ; undefined
    97a8:	022d0500 	.inst	0x022d0500 ; undefined
    97ac:	0000ae13 	udf	#44563
    97b0:	53141000 	ubfiz	w0, w0, #12, #5
    97b4:	05000020 	orr	z0.s, z0.s, #0x3
    97b8:	ae10022e 	.inst	0xae10022e ; undefined
    97bc:	14000000 	b	97bc <__stack_size+0x57bc>
    97c0:	0023c614 	.inst	0x0023c614 ; NYI
    97c4:	022f0500 	.inst	0x022f0500 ; undefined
    97c8:	0000ae10 	udf	#44560
    97cc:	26141800 	.inst	0x26141800 ; undefined
    97d0:	05000027 	orr	z7.s, z7.s, #0x3
    97d4:	ae100230 	.inst	0xae100230 ; undefined
    97d8:	1c000000 	ldr	s0, 97d8 <__stack_size+0x57d8>
    97dc:	001ecb14 	.inst	0x001ecb14 ; undefined
    97e0:	02310500 	.inst	0x02310500 ; undefined
    97e4:	0000ae10 	udf	#44560
    97e8:	5a142000 	.inst	0x5a142000 ; undefined
    97ec:	05000029 	orr	z9.s, z9.s, #0x3
    97f0:	04140232 	.inst	0x04140232 ; undefined
    97f4:	24000005 	cmphs	p5.b, p0/z, z0.b, z0.b
    97f8:	001ccd14 	.inst	0x001ccd14 ; undefined
    97fc:	02330500 	.inst	0x02330500 ; undefined
    9800:	00068139 	.inst	0x00068139 ; undefined
    9804:	2a142800 	orr	w0, w0, w20, lsl #10
    9808:	0500001f 	orr	z31.s, z31.s, #0x1
    980c:	9e2c0234 	.inst	0x9e2c0234 ; undefined
    9810:	2c000007 	stnp	s7, s0, [x0]
    9814:	001bb214 	.inst	0x001bb214 ; undefined
    9818:	02350500 	.inst	0x02350500 ; undefined
    981c:	0009dd2b 	.inst	0x0009dd2b ; undefined
    9820:	cb143000 	sub	x0, x0, x20, lsl #12
    9824:	05000016 	orr	z22.s, z22.s, #0x1
    9828:	3f340236 	.inst	0x3f340236 ; undefined
    982c:	3400000c 	cbz	w12, 982c <__stack_size+0x582c>
    9830:	002cd314 	.inst	0x002cd314 ; NYI
    9834:	02370500 	.inst	0x02370500 ; undefined
    9838:	000e9038 	.inst	0x000e9038 ; undefined
    983c:	e8143800 	.inst	0xe8143800 ; undefined
    9840:	05000021 	orr	z1.s, z1.s, #0x3
    9844:	48280238 	.inst	0x48280238 ; undefined
    9848:	3c000010 	stur	b16, [x0]
    984c:	002e6414 	.inst	0x002e6414 ; NYI
    9850:	02390500 	.inst	0x02390500 ; undefined
    9854:	00133417 	.inst	0x00133417 ; undefined
    9858:	87144000 	.inst	0x87144000 ; undefined
    985c:	0500001d 	orr	z29.s, z29.s, #0x1
    9860:	be17023a 	.inst	0xbe17023a ; undefined
    9864:	48000011 	stxrh	w0, w17, [x0]
    9868:	002e5f14 	.inst	0x002e5f14 ; NYI
    986c:	023b0500 	.inst	0x023b0500 ; undefined
    9870:	0013bc1c 	.inst	0x0013bc1c ; undefined
    9874:	82145000 	.inst	0x82145000 ; undefined
    9878:	0500001d 	orr	z29.s, z29.s, #0x1
    987c:	221c023c 	.inst	0x221c023c ; undefined
    9880:	58000014 	ldr	x20, 9880 <__stack_size+0x5880>
    9884:	001c3e14 	.inst	0x001c3e14 ; undefined
    9888:	023d0500 	.inst	0x023d0500 ; undefined
    988c:	00160f35 	.inst	0x00160f35 ; undefined
    9890:	fd146000 	str	d0, [x0, #10432]
    9894:	0500001f 	orr	z31.s, z31.s, #0x1
    9898:	861a023e 	.inst	0x861a023e ; undefined
    989c:	68000016 	.inst	0x68000016 ; undefined
    98a0:	0018a314 	.inst	0x0018a314 ; undefined
    98a4:	023f0500 	.inst	0x023f0500 ; undefined
    98a8:	0000ae10 	udf	#44560
    98ac:	f3147000 	.inst	0xf3147000 ; undefined
    98b0:	05000024 	orr	z4.s, z4.s, #0x3
    98b4:	ae100240 	.inst	0xae100240 ; undefined
    98b8:	74000000 	.inst	0x74000000 ; undefined
    98bc:	00262614 	.inst	0x00262614 ; NYI
    98c0:	02410500 	.inst	0x02410500 ; undefined
    98c4:	00175222 	.inst	0x00175222 ; undefined
    98c8:	7a147800 	.inst	0x7a147800 ; undefined
    98cc:	0500001f 	orr	z31.s, z31.s, #0x1
    98d0:	1e130242 	.inst	0x1e130242 ; undefined
    98d4:	80000018 	.inst	0x80000018 ; undefined
    98d8:	00270914 	.inst	0x00270914 ; NYI
    98dc:	02430500 	.inst	0x02430500 ; undefined
    98e0:	0018ea26 	.inst	0x0018ea26 ; undefined
    98e4:	54148800 	b.eq	329e4 <__stack_size+0x2e9e4>  // b.none
    98e8:	0500001c 	orr	z28.s, z28.s, #0x1
    98ec:	b6270244 	tbz	x4, #36, 7934 <__stack_size+0x3934>
    98f0:	90000019 	adrp	x25, 9000 <__stack_size+0x5000>
    98f4:	1bf50f00 	.inst	0x1bf50f00 ; undefined
    98f8:	45050000 	.inst	0x45050000 ; undefined
    98fc:	19bb0202 	.inst	0x19bb0202 ; undefined
    9900:	4e050000 	tbl	v0.16b, {v0.16b}, v5.16b
    9904:	1000001b 	adr	x27, 9904 <__stack_size+0x5904>
    9908:	0249052c 	.inst	0x0249052c ; undefined
    990c:	001d7109 	.inst	0x001d7109 ; undefined
    9910:	20a51400 	.inst	0x20a51400 ; undefined
    9914:	4b050000 	sub	w0, w0, w5
    9918:	007e1102 	.inst	0x007e1102 ; undefined
    991c:	14000000 	b	991c <__stack_size+0x591c>
    9920:	0000299c 	udf	#10652
    9924:	11024c05 	add	w5, w0, #0x93
    9928:	0000007e 	udf	#126
    992c:	29921401 	stp	w1, w5, [x0, #144]!
    9930:	4d050000 	.inst	0x4d050000 ; undefined
    9934:	007e1102 	.inst	0x007e1102 ; undefined
    9938:	14020000 	b	89938 <__stack_size+0x85938>
    993c:	000019c2 	udf	#6594
    9940:	11024e05 	add	w5, w16, #0x93
    9944:	0000007e 	udf	#126
    9948:	2aef1403 	orn	w3, w0, w15, ror #5
    994c:	4f050000 	.inst	0x4f050000 ; undefined
    9950:	007e1102 	.inst	0x007e1102 ; undefined
    9954:	14040000 	b	109954 <__stack_size+0x105954>
    9958:	000022ca 	udf	#8906
    995c:	11025005 	add	w5, w0, #0x94
    9960:	0000007e 	udf	#126
    9964:	240c1405 	cmphs	p5.b, p5/z, z0.b, z12.b
    9968:	51050000 	sub	w0, w0, #0x140
    996c:	00961102 	.inst	0x00961102 ; undefined
    9970:	14060000 	b	189970 <__stack_size+0x185970>
    9974:	00002eef 	udf	#12015
    9978:	11025205 	add	w5, w16, #0x94
    997c:	0000007e 	udf	#126
    9980:	21da1408 	.inst	0x21da1408 ; undefined
    9984:	53050000 	ubfiz	w0, w0, #27, #1
    9988:	007e1102 	.inst	0x007e1102 ; undefined
    998c:	14090000 	b	24998c <__stack_size+0x24598c>
    9990:	00001a0a 	udf	#6666
    9994:	11025405 	add	w5, w0, #0x95
    9998:	0000007e 	udf	#126
    999c:	16b3140a 	b	fffffffffacce9c4 <_sp+0xffffffff99c8e9c4>
    99a0:	55050000 	.inst	0x55050000 ; undefined
    99a4:	007e1102 	.inst	0x007e1102 ; undefined
    99a8:	140b0000 	b	2c99a8 <__stack_size+0x2c59a8>
    99ac:	00002d56 	udf	#11606
    99b0:	11025605 	add	w5, w16, #0x95
    99b4:	0000007e 	udf	#126
    99b8:	254a140c 	cmpge	p12.h, p5/z, z0.h, #10
    99bc:	57050000 	.inst	0x57050000 ; undefined
    99c0:	007e1102 	.inst	0x007e1102 ; undefined
    99c4:	140d0000 	b	3499c4 <__stack_size+0x3459c4>
    99c8:	000019c7 	udf	#6599
    99cc:	11025805 	add	w5, w0, #0x96
    99d0:	000000ae 	udf	#174
    99d4:	1e051410 	.inst	0x1e051410 ; undefined
    99d8:	59050000 	stlurh	w0, [x0, #80]
    99dc:	007e1102 	.inst	0x007e1102 ; undefined
    99e0:	14140000 	b	5099e0 <__stack_size+0x5059e0>
    99e4:	00002a83 	udf	#10883
    99e8:	11025a05 	add	w5, w16, #0x96
    99ec:	0000007e 	udf	#126
    99f0:	1e521415 	.inst	0x1e521415 ; undefined
    99f4:	5b050000 	.inst	0x5b050000 ; undefined
    99f8:	007e1102 	.inst	0x007e1102 ; undefined
    99fc:	14160000 	b	5899fc <__stack_size+0x5859fc>
    9a00:	00001d6f 	udf	#7535
    9a04:	11025c05 	add	w5, w0, #0x97
    9a08:	0000007e 	udf	#126
    9a0c:	1db51417 	.inst	0x1db51417 ; undefined
    9a10:	5d050000 	.inst	0x5d050000 ; undefined
    9a14:	007e1102 	.inst	0x007e1102 ; undefined
    9a18:	14180000 	b	609a18 <__stack_size+0x605a18>
    9a1c:	00002851 	udf	#10321
    9a20:	11025e05 	add	w5, w16, #0x97
    9a24:	0000007e 	udf	#126
    9a28:	29261419 	stp	w25, w5, [x0, #-208]
    9a2c:	5f050000 	.inst	0x5f050000 ; undefined
    9a30:	007e1102 	.inst	0x007e1102 ; undefined
    9a34:	141a0000 	b	689a34 <__stack_size+0x685a34>
    9a38:	00001a1a 	udf	#6682
    9a3c:	11026005 	add	w5, w0, #0x98
    9a40:	0000007e 	udf	#126
    9a44:	2393141b 	.inst	0x2393141b ; undefined
    9a48:	61050000 	.inst	0x61050000 ; undefined
    9a4c:	007e1102 	.inst	0x007e1102 ; undefined
    9a50:	141c0000 	b	709a50 <__stack_size+0x705a50>
    9a54:	00002b7a 	udf	#11130
    9a58:	11026205 	add	w5, w16, #0x98
    9a5c:	0000007e 	udf	#126
    9a60:	2eab141d 	urhadd	v29.2s, v0.2s, v11.2s
    9a64:	63050000 	.inst	0x63050000 ; undefined
    9a68:	007e1102 	.inst	0x007e1102 ; undefined
    9a6c:	141e0000 	b	789a6c <__stack_size+0x785a6c>
    9a70:	00001ac2 	udf	#6850
    9a74:	11026405 	add	w5, w0, #0x99
    9a78:	0000007e 	udf	#126
    9a7c:	1fcd141f 	fmadd	h31, h0, h13, h5
    9a80:	65050000 	.inst	0x65050000 ; undefined
    9a84:	007e1102 	.inst	0x007e1102 ; undefined
    9a88:	14200000 	b	809a88 <__stack_size+0x805a88>
    9a8c:	00002554 	udf	#9556
    9a90:	11026605 	add	w5, w16, #0x99
    9a94:	0000007e 	udf	#126
    9a98:	2d421421 	ldp	s1, s5, [x1, #16]
    9a9c:	67050000 	.inst	0x67050000 ; undefined
    9aa0:	007e1102 	.inst	0x007e1102 ; undefined
    9aa4:	14220000 	b	889aa4 <__stack_size+0x885aa4>
    9aa8:	000017a6 	udf	#6054
    9aac:	11026805 	add	w5, w0, #0x9a
    9ab0:	0000007e 	udf	#126
    9ab4:	2f0a1423 	usra	v3.8b, v1.8b, #6
    9ab8:	69050000 	stgp	x0, x0, [x0, #160]
    9abc:	007e1102 	.inst	0x007e1102 ; undefined
    9ac0:	14240000 	b	909ac0 <__stack_size+0x905ac0>
    9ac4:	00001849 	udf	#6217
    9ac8:	11026a05 	add	w5, w16, #0x9a
    9acc:	0000007e 	udf	#126
    9ad0:	199b1425 	.inst	0x199b1425 ; undefined
    9ad4:	6b050000 	subs	w0, w0, w5
    9ad8:	007e1102 	.inst	0x007e1102 ; undefined
    9adc:	14260000 	b	989adc <__stack_size+0x985adc>
    9ae0:	00001fad 	udf	#8109
    9ae4:	11026c05 	add	w5, w0, #0x9b
    9ae8:	0000007e 	udf	#126
    9aec:	43451327 	.inst	0x43451327 ; undefined
    9af0:	6d050043 	stp	d3, d0, [x2, #80]
    9af4:	007e1102 	.inst	0x007e1102 ; undefined
    9af8:	14280000 	b	a09af8 <__stack_size+0xa05af8>
    9afc:	00002c92 	udf	#11410
    9b00:	11026e05 	add	w5, w16, #0x9b
    9b04:	0000007e 	udf	#126
    9b08:	29d91429 	ldp	w9, w5, [x1, #200]!
    9b0c:	6f050000 	.inst	0x6f050000 ; undefined
    9b10:	007e1102 	.inst	0x007e1102 ; undefined
    9b14:	002a0000 	.inst	0x002a0000 ; NYI
    9b18:	002e580f 	.inst	0x002e580f ; NYI
    9b1c:	02700500 	.inst	0x02700500 ; undefined
    9b20:	001b6003 	.inst	0x001b6003 ; undefined
    9b24:	05181000 	mov	z0.b, p8/z, #-128
    9b28:	15090275 	b	424a4fc <__stack_size+0x42464fc>
    9b2c:	1400001e 	b	9ba4 <__stack_size+0x5ba4>
    9b30:	00001d95 	udf	#7573
    9b34:	11027705 	add	w5, w24, #0x9d
    9b38:	0000007e 	udf	#126
    9b3c:	183d1400 	ldr	w0, 83dbc <__stack_size+0x7fdbc>
    9b40:	78050000 	sturh	w0, [x0, #80]
    9b44:	00961102 	.inst	0x00961102 ; undefined
    9b48:	14020000 	b	89b48 <__stack_size+0x85b48>
    9b4c:	00002146 	udf	#8518
    9b50:	11027905 	add	w5, w8, #0x9e
    9b54:	000000ae 	udf	#174
    9b58:	22e41404 	.inst	0x22e41404 ; undefined
    9b5c:	7a050000 	sbcs	w0, w0, w5
    9b60:	007e1102 	.inst	0x007e1102 ; undefined
    9b64:	14080000 	b	209b64 <__stack_size+0x205b64>
    9b68:	0000291e 	udf	#10526
    9b6c:	11027b05 	add	w5, w24, #0x9e
    9b70:	0000007e 	udf	#126
    9b74:	209e1409 	.inst	0x209e1409 ; undefined
    9b78:	7c050000 	stur	h0, [x0, #80]
    9b7c:	00ae1102 	.inst	0x00ae1102 ; undefined
    9b80:	140c0000 	b	309b80 <__stack_size+0x305b80>
    9b84:	00002992 	udf	#10642
    9b88:	11027d05 	add	w5, w8, #0x9f
    9b8c:	0000007e 	udf	#126
    9b90:	19d21410 	.inst	0x19d21410 ; undefined
    9b94:	7e050000 	.inst	0x7e050000 ; undefined
    9b98:	00961102 	.inst	0x00961102 ; undefined
    9b9c:	14120000 	b	489b9c <__stack_size+0x485b9c>
    9ba0:	00001aad 	udf	#6829
    9ba4:	11027f05 	add	w5, w24, #0x9f
    9ba8:	0000007e 	udf	#126
    9bac:	254a1414 	cmpgt	p4.h, p5/z, z0.h, #10
    9bb0:	80050000 	.inst	0x80050000 ; undefined
    9bb4:	007e1102 	.inst	0x007e1102 ; undefined
    9bb8:	00150000 	.inst	0x00150000 ; undefined
    9bbc:	001def0f 	.inst	0x001def0f ; undefined
    9bc0:	02810500 	.inst	0x02810500 ; undefined
    9bc4:	001d7e03 	.inst	0x001d7e03 ; undefined
    9bc8:	05581000 	mov	z0.h, p8/z, #-128
    9bcc:	81090286 	.inst	0x81090286 ; undefined
    9bd0:	1400001e 	b	9c48 <__stack_size+0x5c48>
    9bd4:	0000279f 	udf	#10143
    9bd8:	0a028805 	.inst	0x0a028805 ; undefined
    9bdc:	00001d71 	udf	#7537
    9be0:	21031400 	.inst	0x21031400 ; undefined
    9be4:	89050000 	.inst	0x89050000 ; undefined
    9be8:	1e150a02 	.inst	0x1e150a02 ; undefined
    9bec:	142c0000 	b	b09bec <__stack_size+0xb05bec>
    9bf0:	00001e18 	udf	#7704
    9bf4:	0c028a05 	.inst	0x0c028a05 ; undefined
    9bf8:	00000043 	udf	#67
    9bfc:	2af41448 	orn	w8, w2, w20, ror #5
    9c00:	8b050000 	add	x0, x0, x5
    9c04:	00a20c02 	.inst	0x00a20c02 ; undefined
    9c08:	13500000 	.inst	0x13500000 ; undefined
    9c0c:	00414352 	.inst	0x00414352 ; undefined
    9c10:	0c028c05 	.inst	0x0c028c05 ; undefined
    9c14:	0000008a 	udf	#138
    9c18:	2f661454 	.inst	0x2f661454 ; undefined
    9c1c:	8d050000 	.inst	0x8d050000 ; undefined
    9c20:	00720b02 	.inst	0x00720b02 ; undefined
    9c24:	00560000 	.inst	0x00560000 ; undefined
    9c28:	0022fc0f 	.inst	0x0022fc0f ; NYI
    9c2c:	028e0500 	.inst	0x028e0500 ; undefined
    9c30:	001e2203 	.inst	0x001e2203 ; undefined
    9c34:	25de1500 	cmpge	p0.d, p5/z, z8.d, #-2
    9c38:	3b050000 	.inst	0x3b050000 ; undefined
    9c3c:	1e811403 	.inst	0x1e811403 ; undefined
    9c40:	d4150000 	.inst	0xd4150000 ; undefined
    9c44:	0500001b 	orr	z27.s, z27.s, #0x1
    9c48:	a82b033c 	stnp	x28, x0, [x25, #-336]
    9c4c:	1600001e 	b	fffffffff8009cc4 <_sp+0xffffffff96fc9cc4>
    9c50:	001b5b08 	.inst	0x001b5b08 ; undefined
    9c54:	29311500 	stp	w0, w5, [x8, #-120]
    9c58:	3d050000 	str	b0, [x0, #320]
    9c5c:	1ea82b03 	.inst	0x1ea82b03 ; undefined
    9c60:	e2020000 	.inst	0xe2020000 ; undefined
    9c64:	06000031 	.inst	0x06000031 ; undefined
    9c68:	00831710 	.inst	0x00831710 ; undefined
    9c6c:	5d020000 	.inst	0x5d020000 ; undefined
    9c70:	06000031 	.inst	0x06000031 ; undefined
    9c74:	009b1814 	.inst	0x009b1814 ; undefined
    9c78:	5c020000 	ldr	d0, dc78 <__stack_size+0x9c78>
    9c7c:	06000031 	.inst	0x06000031 ; undefined
    9c80:	0035171d 	.inst	0x0035171d ; NYI
    9c84:	58170000 	ldr	x0, 37c84 <__stack_size+0x33c84>
    9c88:	094e0710 	.inst	0x094e0710 ; undefined
    9c8c:	00001fe0 	udf	#8160
    9c90:	00310a18 	.inst	0x00310a18 ; NYI
    9c94:	074f0700 	.inst	0x074f0700 ; undefined
    9c98:	00001ebb 	udf	#7867
    9c9c:	72641900 	.inst	0x72641900 ; undefined
    9ca0:	50070076 	adr	x22, 17cae <__stack_size+0x13cae>
    9ca4:	001ebb07 	.inst	0x001ebb07 ; undefined
    9ca8:	e7180100 	.inst	0xe7180100 ; undefined
    9cac:	07000031 	.inst	0x07000031 ; undefined
    9cb0:	1ebb0751 	.inst	0x1ebb0751 ; undefined
    9cb4:	18020000 	ldr	w0, dcb4 <__stack_size+0x9cb4>
    9cb8:	0000308e 	udf	#12430
    9cbc:	bb075207 	.inst	0xbb075207 ; undefined
    9cc0:	0300001e 	.inst	0x0300001e ; undefined
    9cc4:	00321918 	.inst	0x00321918 ; NYI
    9cc8:	07530700 	.inst	0x07530700 ; undefined
    9ccc:	00001ebb 	udf	#7867
    9cd0:	30d11804 	adr	x4, fffffffffffabfd1 <_sp+0xffffffff9ef6bfd1>
    9cd4:	54070000 	b.eq	17cd4 <__stack_size+0x13cd4>  // b.none
    9cd8:	001ebb07 	.inst	0x001ebb07 ; undefined
    9cdc:	69190500 	stgp	x0, x1, [x8, #800]
    9ce0:	55070064 	.inst	0x55070064 ; undefined
    9ce4:	001ec707 	.inst	0x001ec707 ; undefined
    9ce8:	99180600 	.inst	0x99180600 ; undefined
    9cec:	07000032 	.inst	0x07000032 ; undefined
    9cf0:	1ec70756 	.inst	0x1ec70756 ; undefined
    9cf4:	18080000 	ldr	w0, 19cf4 <__stack_size+0x15cf4>
    9cf8:	0000311a 	udf	#12570
    9cfc:	c7075807 	.inst	0xc7075807 ; undefined
    9d00:	0a00001e 	and	w30, w0, w0
    9d04:	0030c618 	.inst	0x0030c618 ; NYI
    9d08:	085e0700 	ldxrb	w0, [x24]
    9d0c:	00001ed3 	udf	#7891
    9d10:	31b21810 	.inst	0x31b21810 ; undefined
    9d14:	5f070000 	.inst	0x5f070000 ; undefined
    9d18:	001ed308 	.inst	0x001ed308 ; undefined
    9d1c:	08181800 	stxrb	w24, w0, [x0]
    9d20:	07000032 	.inst	0x07000032 ; undefined
    9d24:	1ed30864 	.inst	0x1ed30864 ; undefined
    9d28:	18200000 	ldr	w0, 49d28 <__stack_size+0x45d28>
    9d2c:	000031c9 	udf	#12745
    9d30:	d3086507 	.inst	0xd3086507 ; undefined
    9d34:	2800001e 	stnp	w30, w0, [x0]
    9d38:	0031cf18 	.inst	0x0031cf18 ; NYI
    9d3c:	08660700 	.inst	0x08660700 ; undefined
    9d40:	00001ed3 	udf	#7891
    9d44:	31121830 	adds	w16, w1, #0x486
    9d48:	67070000 	.inst	0x67070000 ; undefined
    9d4c:	001ed308 	.inst	0x001ed308 ; undefined
    9d50:	11183800 	add	w0, w0, #0x60e
    9d54:	07000032 	.inst	0x07000032 ; undefined
    9d58:	1ed30868 	.inst	0x1ed30868 ; undefined
    9d5c:	18400000 	ldr	w0, 89d5c <__stack_size+0x85d5c>
    9d60:	00003307 	udf	#13063
    9d64:	d3086907 	.inst	0xd3086907 ; undefined
    9d68:	4800001e 	stxrh	w0, w30, [x0]
    9d6c:	0030ae18 	.inst	0x0030ae18 ; NYI
    9d70:	086a0700 	.inst	0x086a0700 ; undefined
    9d74:	00001ed3 	udf	#7891
    9d78:	69771950 	ldpsw	x16, x6, [x10, #-72]
    9d7c:	6b07006e 	subs	w14, w3, w7
    9d80:	001fe007 	.inst	0x001fe007 ; undefined
    9d84:	1a005800 	.inst	0x1a005800 ; undefined
    9d88:	00001ebb 	udf	#7867
    9d8c:	00001ff1 	udf	#8177
    9d90:	0000351b 	udf	#13595
    9d94:	000fff00 	.inst	0x000fff00 ; undefined
    9d98:	00307002 	.inst	0x00307002 ; NYI
    9d9c:	036c0700 	.inst	0x036c0700 ; undefined
    9da0:	00001edf 	udf	#7903
    9da4:	07104817 	.inst	0x07104817 ; undefined
    9da8:	20a20972 	.inst	0x20a20972 ; undefined
    9dac:	66190000 	.inst	0x66190000 ; undefined
    9db0:	73070073 	.inst	0x73070073 ; undefined
    9db4:	0020a209 	.inst	0x0020a209 ; NYI
    9db8:	69190000 	stgp	x0, x0, [x0, #800]
    9dbc:	74070064 	.inst	0x74070064 ; undefined
    9dc0:	001ec707 	.inst	0x001ec707 ; undefined
    9dc4:	28180800 	stnp	w0, w2, [x0, #192]
    9dc8:	07000017 	.inst	0x07000017 ; undefined
    9dcc:	1ebb0775 	.inst	0x1ebb0775 ; undefined
    9dd0:	190a0000 	stlurb	w0, [x0, #160]
    9dd4:	00727265 	.inst	0x00727265 ; undefined
    9dd8:	bb077607 	.inst	0xbb077607 ; undefined
    9ddc:	0b00001e 	add	w30, w0, w0
    9de0:	0030b618 	.inst	0x0030b618 ; NYI
    9de4:	08770700 	.inst	0x08770700 ; undefined
    9de8:	00001ed3 	udf	#7891
    9dec:	31c91810 	.inst	0x31c91810 ; undefined
    9df0:	78070000 	sturh	w0, [x0, #112]
    9df4:	001ed308 	.inst	0x001ed308 ; undefined
    9df8:	10181800 	adr	x0, 3a0f8 <__stack_size+0x360f8>
    9dfc:	07000033 	.inst	0x07000033 ; undefined
    9e00:	1ed30879 	.inst	0x1ed30879 ; undefined
    9e04:	18200000 	ldr	w0, 49e04 <__stack_size+0x45e04>
    9e08:	000031b7 	udf	#12727
    9e0c:	d3087a07 	.inst	0xd3087a07 ; undefined
    9e10:	2800001e 	stnp	w30, w0, [x0]
    9e14:	0030a818 	.inst	0x0030a818 ; NYI
    9e18:	087b0700 	.inst	0x087b0700 ; undefined
    9e1c:	00001ed3 	udf	#7891
    9e20:	30e41830 	adr	x16, fffffffffffd2125 <_sp+0xffffffff9ef92125>
    9e24:	7d070000 	str	h0, [x0, #896]
    9e28:	001ed308 	.inst	0x001ed308 ; undefined
    9e2c:	00183800 	.inst	0x00183800 ; undefined
    9e30:	07000032 	.inst	0x07000032 ; undefined
    9e34:	20a8087e 	.inst	0x20a8087e ; undefined
    9e38:	19400000 	ldapurb	w0, [x0]
    9e3c:	00667562 	.inst	0x00667562 ; undefined
    9e40:	e0078707 	.inst	0xe0078707 ; undefined
    9e44:	4800001f 	stxrh	w0, wzr, [x0]
    9e48:	f1081600 	subs	x0, x16, #0x205
    9e4c:	1600001f 	b	fffffffff8009ec8 <_sp+0xffffffff96fc9ec8>
    9e50:	001ebb08 	.inst	0x001ebb08 ; undefined
    9e54:	49460700 	.inst	0x49460700 ; undefined
    9e58:	8907004c 	.inst	0x8907004c ; undefined
    9e5c:	001ffd03 	.inst	0x001ffd03 ; undefined
    9e60:	04070800 	.inst	0x04070800 ; undefined
    9e64:	000000b3 	udf	#179
    9e68:	410eb807 	.inst	0x410eb807 ; undefined
    9e6c:	09000021 	.inst	0x09000021 ; undefined
    9e70:	000032a3 	udf	#12963
    9e74:	31500900 	adds	w0, w8, #0x402, lsl #12
    9e78:	09010000 	.inst	0x09010000 ; undefined
    9e7c:	000032ba 	udf	#12986
    9e80:	30f40902 	adr	x2, ffffffffffff1fa1 <_sp+0xffffffff9efb1fa1>
    9e84:	09030000 	.inst	0x09030000 ; undefined
    9e88:	000031d7 	udf	#12759
    9e8c:	323d0904 	orr	w4, w8, #0x38
    9e90:	09050000 	.inst	0x09050000 ; undefined
    9e94:	00003284 	udf	#12932
    9e98:	30da0906 	adr	x6, fffffffffffbdfb9 <_sp+0xffffffff9ef7dfb9>
    9e9c:	09070000 	.inst	0x09070000 ; undefined
    9ea0:	00003135 	udf	#12597
    9ea4:	313e0908 	adds	w8, w8, #0xf82
    9ea8:	09090000 	.inst	0x09090000 ; undefined
    9eac:	000031ed 	udf	#12781
    9eb0:	307d090a 	adr	x10, 103fd1 <__stack_size+0xfffd1>
    9eb4:	090b0000 	.inst	0x090b0000 ; undefined
    9eb8:	0000325b 	udf	#12891
    9ebc:	32a9090c 	.inst	0x32a9090c ; undefined
    9ec0:	090d0000 	.inst	0x090d0000 ; undefined
    9ec4:	00003120 	udf	#12576
    9ec8:	32fc090e 	.inst	0x32fc090e ; undefined
    9ecc:	090f0000 	.inst	0x090f0000 ; undefined
    9ed0:	00003176 	udf	#12662
    9ed4:	326a0910 	.inst	0x326a0910 ; undefined
    9ed8:	09110000 	.inst	0x09110000 ; undefined
    9edc:	000032e5 	udf	#13029
    9ee0:	32280912 	orr	w18, w8, #0x7000000
    9ee4:	00130000 	.inst	0x00130000 ; undefined
    9ee8:	0030a002 	.inst	0x0030a002 ; NYI
    9eec:	03cd0700 	.inst	0x03cd0700 ; undefined
    9ef0:	000020ba 	udf	#8378
    9ef4:	0031ab1c 	.inst	0x0031ab1c ; NYI
    9ef8:	10230100 	adr	x0, 4ff18 <__stack_size+0x4bf18>
    9efc:	00002141 	udf	#8513
    9f00:	00000309 	udf	#777
    9f04:	00000000 	udf	#0
    9f08:	661d0000 	.inst	0x661d0000 ; undefined
    9f0c:	24010073 	cmphi	p3.b, p0/z, z3.b, z1.b
    9f10:	001ff10e 	.inst	0x001ff10e ; undefined
    9f14:	00030900 	.inst	0x00030900 ; undefined
    9f18:	00000000 	udf	#0
    9f1c:	1c000000 	ldr	s0, 9f1c <__stack_size+0x5f1c>
    9f20:	0000319f 	udf	#12703
    9f24:	8d1c2501 	.inst	0x8d1c2501 ; undefined
    9f28:	09000001 	.inst	0x09000001 ; undefined
    9f2c:	00000003 	udf	#3
    9f30:	00000000 	udf	#0
    9f34:	32c51c00 	.inst	0x32c51c00 ; undefined
    9f38:	25010000 	cmpge	p0.b, p0/z, z0.b, #1
    9f3c:	00018d32 	.inst	0x00018d32 ; undefined
    9f40:	00030900 	.inst	0x00030900 ; undefined
    9f44:	00000000 	udf	#0
    9f48:	1c000000 	ldr	s0, 9f48 <__stack_size+0x5f48>
    9f4c:	000032d5 	udf	#13013
    9f50:	8d4c2501 	.inst	0x8d4c2501 ; undefined
    9f54:	09000001 	.inst	0x09000001 ; undefined
    9f58:	00000003 	udf	#3
    9f5c:	00000000 	udf	#0
    9f60:	08e41e00 	.inst	0x08e41e00 ; undefined
    9f64:	13090000 	sbfiz	w0, w0, #23, #1
    9f68:	00006b05 	udf	#27397
    9f6c:	0021d500 	.inst	0x0021d500 ; NYI
    9f70:	21d51f00 	.inst	0x21d51f00 ; undefined
    9f74:	d51f0000 	msr	s3_7_c0_c0_0, x0
    9f78:	00000021 	udf	#33
    9f7c:	00d40816 	.inst	0x00d40816 ; undefined
    9f80:	261e0000 	.inst	0x261e0000 ; undefined
    9f84:	0a000030 	and	w16, w1, w0
    9f88:	00d90510 	.inst	0x00d90510 ; undefined
    9f8c:	21fb0000 	.inst	0x21fb0000 ; undefined
    9f90:	fb1f0000 	.inst	0xfb1f0000 ; undefined
    9f94:	1f000021 	fmadd	s1, s1, s0, s0
    9f98:	000000a2 	udf	#162
    9f9c:	00008a1f 	udf	#35359
    9fa0:	08160000 	stxrb	w22, w0, [x0]
    9fa4:	00000072 	udf	#114
    9fa8:	002f8d1e 	.inst	0x002f8d1e ; NYI
    9fac:	05110a00 	mov	z0.b, p1/z, #80
    9fb0:	000000d9 	udf	#217
    9fb4:	00002221 	udf	#8737
    9fb8:	0021fb1f 	.inst	0x0021fb1f ; NYI
    9fbc:	00a21f00 	.inst	0x00a21f00 ; undefined
    9fc0:	8a1f0000 	and	x0, x0, xzr
    9fc4:	00000000 	udf	#0
    9fc8:	002fe920 	.inst	0x002fe920 ; NYI
    9fcc:	050f0a00 	.inst	0x050f0a00 ; undefined
    9fd0:	000000d9 	udf	#217
    9fd4:	00075d1e 	.inst	0x00075d1e ; undefined
    9fd8:	07180900 	.inst	0x07180900 ; undefined
    9fdc:	0000224d 	udf	#8781
    9fe0:	0000224d 	udf	#8781
    9fe4:	00224d1f 	.inst	0x00224d1f ; NYI
    9fe8:	006b1f00 	.inst	0x006b1f00 ; undefined
    9fec:	291f0000 	stp	w0, w0, [x0, #248]
    9ff0:	00000000 	udf	#0
    9ff4:	2f220821 	.inst	0x2f220821 ; undefined
    9ff8:	05000021 	orr	z1.s, z1.s, #0x3
    9ffc:	d9050344 	stlur	x4, [x26, #80]
    a000:	66000000 	.inst	0x66000000 ; undefined
    a004:	1f000022 	fmadd	s2, s1, s0, s0
    a008:	00001ea8 	udf	#7848
    a00c:	18072200 	ldr	w0, 1844c <__stack_size+0x1444c>
    a010:	43050000 	.inst	0x43050000 ; undefined
    a014:	00d90503 	.inst	0x00d90503 ; undefined
    a018:	227d0000 	.inst	0x227d0000 ; undefined
    a01c:	a81f0000 	stnp	x0, x0, [x0, #496]
    a020:	0000001e 	udf	#30
    a024:	001e811e 	.inst	0x001e811e ; undefined
    a028:	184a0500 	ldr	w0, 9e0c8 <__stack_size+0x9a0c8>
    a02c:	000000b3 	udf	#179
    a030:	00002293 	udf	#8851
    a034:	0000351f 	udf	#13599
    a038:	911e0000 	add	x0, x0, #0x780
    a03c:	0b000007 	add	w7, w0, w0
    a040:	006b0514 	.inst	0x006b0514 ; undefined
    a044:	22aa0000 	.inst	0x22aa0000 ; undefined
    a048:	d51f0000 	msr	s3_7_c0_c0_0, x0
    a04c:	23000021 	.inst	0x23000021 ; undefined
    a050:	2f502400 	.inst	0x2f502400 ; undefined
    a054:	4b050000 	sub	w0, w0, w5
    a058:	0022c114 	.inst	0x0022c114 ; NYI
    a05c:	00351f00 	.inst	0x00351f00 ; NYI
    a060:	d91f0000 	stlur	x0, [x0, #-16]
    a064:	00000000 	udf	#0
    a068:	00306825 	.inst	0x00306825 ; NYI
    a06c:	01190100 	.inst	0x01190100 ; undefined
    a070:	0000d905 	udf	#55557
    a074:	00650400 	.inst	0x00650400 ; undefined
    a078:	00000061 	udf	#97
    a07c:	0000d400 	udf	#54272
    a080:	00000000 	udf	#0
    a084:	359c0100 	cbnz	w0, fffffffffff420a4 <_sp+0xffffffff9ef020a4>
    a088:	26000023 	.inst	0x26000023 ; undefined
    a08c:	00003130 	udf	#12592
    a090:	06011b01 	.inst	0x06011b01 ; undefined
    a094:	000000d9 	udf	#217
    a098:	00309527 	.inst	0x00309527 ; NYI
    a09c:	011c0100 	.inst	0x011c0100 ; undefined
    a0a0:	00233507 	.inst	0x00233507 ; NYI
    a0a4:	f8910300 	prfum	pldl1keep, [x24, #-240]
    a0a8:	31802777 	.inst	0x31802777 ; undefined
    a0ac:	1d010000 	.inst	0x1d010000 ; undefined
    a0b0:	23460701 	.inst	0x23460701 ; undefined
    a0b4:	91030000 	add	x0, x0, #0xc0
    a0b8:	942777d8 	bl	9e8018 <__stack_size+0x9e4018>
    a0bc:	01000032 	.inst	0x01000032 ; undefined
    a0c0:	ae06011e 	.inst	0xae06011e ; undefined
    a0c4:	03000020 	.inst	0x03000020 ; undefined
    a0c8:	27579091 	.inst	0x27579091 ; undefined
    a0cc:	0000155d 	udf	#5469
    a0d0:	06011f01 	.inst	0x06011f01 ; undefined
    a0d4:	000000d9 	udf	#217
    a0d8:	007c9102 	.inst	0x007c9102 ; undefined
    a0dc:	0000cd1a 	udf	#52506
    a0e0:	00234600 	.inst	0x00234600 ; NYI
    a0e4:	00351b00 	.inst	0x00351b00 ; NYI
    a0e8:	03ff0000 	.inst	0x03ff0000 ; undefined
    a0ec:	00cd1a00 	.inst	0x00cd1a00 ; undefined
    a0f0:	23560000 	.inst	0x23560000 ; undefined
    a0f4:	35280000 	cbnz	w0, 5a0f4 <__stack_size+0x560f4>
    a0f8:	18000000 	ldr	w0, a0f8 <__stack_size+0x60f8>
    a0fc:	32482900 	.inst	0x32482900 ; undefined
    a100:	eb010000 	subs	x0, x0, x1
    a104:	0000d905 	udf	#55557
    a108:	00639c00 	.inst	0x00639c00 ; undefined
    a10c:	00000061 	udf	#97
    a110:	00016800 	.inst	0x00016800 ; undefined
    a114:	00000000 	udf	#0
    a118:	d39c0100 	.inst	0xd39c0100 ; undefined
    a11c:	1c000023 	ldr	s3, a120 <__stack_size+0x6120>
    a120:	0000155d 	udf	#5469
    a124:	6b09ed01 	.inst	0x6b09ed01 ; undefined
    a128:	02000000 	.inst	0x02000000 ; undefined
    a12c:	801c7891 	.inst	0x801c7891 ; undefined
    a130:	01000031 	.inst	0x01000031 ; undefined
    a134:	23d30aee 	.inst	0x23d30aee ; undefined
    a138:	91030000 	add	x0, x0, #0xc0
    a13c:	951c77f8 	bl	472811c <__stack_size+0x472411c>
    a140:	01000030 	.inst	0x01000030 ; undefined
    a144:	23d30aef 	.inst	0x23d30aef ; undefined
    a148:	91030000 	add	x0, x0, #0xc0
    a14c:	ed2a6ff8 	.inst	0xed2a6ff8 ; undefined
    a150:	01000030 	.inst	0x01000030 ; undefined
    a154:	006b09f0 	.inst	0x006b09f0 ; undefined
    a158:	b42b0000 	cbz	x0, 60158 <__stack_size+0x5c158>
    a15c:	00610063 	.inst	0x00610063 ; undefined
    a160:	44000000 	.inst	0x44000000 ; undefined
    a164:	00000000 	udf	#0
    a168:	1d000000 	.inst	0x1d000000 ; undefined
    a16c:	f2010069 	ands	x9, x3, #0x8000000080000000
    a170:	00006b0d 	udf	#27405
    a174:	7c910200 	.inst	0x7c910200 ; undefined
    a178:	bb1a0000 	.inst	0xbb1a0000 ; undefined
    a17c:	e400001e 	.inst	0xe400001e ; undefined
    a180:	1b000023 	madd	w3, w1, w0, w0
    a184:	00000035 	udf	#53
    a188:	2c0003ff 	stnp	s31, s0, [sp]
    a18c:	00003162 	udf	#12642
    a190:	d9059001 	stlur	x1, [x0, #89]
	...
    a19c:	70000000 	adr	x0, a19f <__stack_size+0x619f>
    a1a0:	00000004 	udf	#4
    a1a4:	01000000 	.inst	0x01000000 ; undefined
    a1a8:	0024c99c 	.inst	0x0024c99c ; NYI
    a1ac:	30432d00 	adr	x0, 9074d <__stack_size+0x8c74d>
    a1b0:	90010000 	adrp	x0, 200a000 <__stack_size+0x2006000>
    a1b4:	0021fb22 	.inst	0x0021fb22 ; NYI
    a1b8:	b8910300 	ldursw	x0, [x24, #-240]
    a1bc:	301c2d7f 	adr	xzr, 42769 <__stack_size+0x3e769>
    a1c0:	90010000 	adrp	x0, 200a000 <__stack_size+0x2006000>
    a1c4:	0000a236 	udf	#41526
    a1c8:	b4910300 	cbz	x0, fffffffffff2c228 <_sp+0xffffffff9eeec228>
    a1cc:	2af82d7f 	orn	wzr, w11, w24, ror #11
    a1d0:	90010000 	adrp	x0, 200a000 <__stack_size+0x2006000>
    a1d4:	00008a4a 	udf	#35402
    a1d8:	b2910300 	.inst	0xb2910300 ; undefined
    a1dc:	31012d7f 	cmn	w11, #0x4b
    a1e0:	90010000 	adrp	x0, 200a000 <__stack_size+0x2006000>
    a1e4:	0000a25e 	udf	#41566
    a1e8:	ac910300 	stp	q0, q0, [x24], #544
    a1ec:	155d1c7f 	b	57513e8 <__stack_size+0x574d3e8>
    a1f0:	92010000 	and	x0, x0, #0x8000000080000000
    a1f4:	0000a20e 	udf	#41486
    a1f8:	7c910200 	.inst	0x7c910200 ; undefined
    a1fc:	0030561c 	.inst	0x0030561c ; NYI
    a200:	18930100 	ldr	w0, fffffffffff30220 <_sp+0xffffffff9eef0220>
    a204:	000000ba 	udf	#186
    a208:	2a689102 	.inst	0x2a689102 ; undefined
    a20c:	0000321f 	udf	#12831
    a210:	a20e9401 	.inst	0xa20e9401 ; undefined
    a214:	1c000000 	ldr	s0, a214 <__stack_size+0x6214>
    a218:	00002fb0 	udf	#12208
    a21c:	c90c9501 	.inst	0xc90c9501 ; undefined
    a220:	02000024 	.inst	0x02000024 ; undefined
    a224:	721d7091 	ands	w17, w4, #0xfffffff8
    a228:	01006765 	.inst	0x01006765 ; undefined
    a22c:	034b1896 	.inst	0x034b1896 ; undefined
    a230:	91020000 	add	x0, x0, #0x80
    a234:	31721d60 	adds	w0, w11, #0xc87, lsl #12
    a238:	37970100 	tbnz	w0, #18, 8258 <__stack_size+0x4258>
    a23c:	00000675 	udf	#1653
    a240:	1d589102 	.inst	0x1d589102 ; undefined
    a244:	01003272 	.inst	0x01003272 ; undefined
    a248:	103b2398 	adr	x24, 806b8 <__stack_size+0x7c6b8>
    a24c:	91020000 	add	x0, x0, #0x80
    a250:	2fa11c50 	.inst	0x2fa11c50 ; undefined
    a254:	99010000 	stlur	w0, [x0, #16]
    a258:	0000a20e 	udf	#41486
    a25c:	6c910200 	stp	d0, d0, [x16], #272
    a260:	002ff11c 	.inst	0x002ff11c ; NYI
    a264:	1f9a0100 	.inst	0x1f9a0100 ; undefined
    a268:	000001fe 	udf	#510
    a26c:	00489102 	.inst	0x00489102 ; undefined
    a270:	00a20816 	.inst	0x00a20816 ; undefined
    a274:	8c2e0000 	.inst	0x8c2e0000 ; undefined
    a278:	01000031 	.inst	0x01000031 ; undefined
    a27c:	00d90532 	.inst	0x00d90532 ; undefined
	...
    a288:	04180000 	orr	z0.b, p0/m, z0.b, z0.b
    a28c:	00000000 	udf	#0
    a290:	9c010000 	ldr	q0, c290 <__stack_size+0x8290>
    a294:	00304d2d 	.inst	0x00304d2d ; NYI
    a298:	21320100 	.inst	0x21320100 ; undefined
    a29c:	000021fb 	udf	#8699
    a2a0:	7fb89103 	fmulx	s3, s8, v24.s[1]
    a2a4:	002fa72d 	.inst	0x002fa72d ; NYI
    a2a8:	34320100 	cbz	w0, 6e2c8 <__stack_size+0x6a2c8>
    a2ac:	000000a2 	udf	#162
    a2b0:	7fb49103 	fmulx	s3, s8, v20.s[1]
    a2b4:	002af82d 	.inst	0x002af82d ; NYI
    a2b8:	47320100 	.inst	0x47320100 ; undefined
    a2bc:	0000008a 	udf	#138
    a2c0:	7fb29103 	fmulx	s3, s8, v18.s[1]
    a2c4:	0031012d 	.inst	0x0031012d ; NYI
    a2c8:	5b320100 	.inst	0x5b320100 ; undefined
    a2cc:	000000a2 	udf	#162
    a2d0:	7fac9103 	fmulx	s3, s8, v12.s[1]
    a2d4:	00155d1c 	.inst	0x00155d1c ; undefined
    a2d8:	0e340100 	saddl	v0.8h, v8.8b, v20.8b
    a2dc:	000000a2 	udf	#162
    a2e0:	1c7c9102 	ldr	s2, 103500 <__stack_size+0xff500>
    a2e4:	00003056 	udf	#12374
    a2e8:	ba1b3501 	.inst	0xba1b3501 ; undefined
    a2ec:	02000000 	.inst	0x02000000 ; undefined
    a2f0:	1f2a6891 	fnmadd	s17, s4, s10, s26
    a2f4:	01000032 	.inst	0x01000032 ; undefined
    a2f8:	00a20e36 	.inst	0x00a20e36 ; undefined
    a2fc:	b01c0000 	adrp	x0, 3800b000 <__stack_size+0x38007000>
    a300:	0100002f 	.inst	0x0100002f ; undefined
    a304:	24c90c37 	cmphi	p7.d, p3/z, z1.d, z9.d
    a308:	91020000 	add	x0, x0, #0x80
    a30c:	65721d70 	fmla	z16.h, p7/m, z11.h, z18.h
    a310:	38010067 	sturb	w7, [x3, #16]
    a314:	00034b18 	.inst	0x00034b18 ; undefined
    a318:	60910200 	.inst	0x60910200 ; undefined
    a31c:	0031721d 	.inst	0x0031721d ; NYI
    a320:	75373901 	.inst	0x75373901 ; undefined
    a324:	02000006 	.inst	0x02000006 ; undefined
    a328:	721d5891 	ands	w17, w4, #0x3fffff8
    a32c:	3a010032 	adcs	w18, w1, w1
    a330:	00103b23 	.inst	0x00103b23 ; undefined
    a334:	50910200 	adr	x0, fffffffffff2c376 <_sp+0xffffffff9eeec376>
    a338:	002fa11c 	.inst	0x002fa11c ; NYI
    a33c:	0e3b0100 	saddl	v0.8h, v8.8b, v27.8b
    a340:	000000a2 	udf	#162
    a344:	1c6c9102 	ldr	s2, e3564 <__stack_size+0xdf564>
    a348:	00002ff1 	udf	#12273
    a34c:	fe1f3c01 	.inst	0xfe1f3c01 ; undefined
    a350:	02000001 	.inst	0x02000001 ; undefined
    a354:	00004891 	udf	#18577

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
{
       0:	10001101 	adr	x1, 220 <__stack_size-0x3de0>
       4:	12011117 	and	w23, w8, #0x8000000f
       8:	1b0e030f 	madd	w15, w24, w14, w0
       c:	130e250e 	sbfiz	w14, w8, #18, #10
	panic();
      10:	00000005 	udf	#5
}
      14:	10001101 	adr	x1, 234 <__stack_size-0x3dcc>
      18:	12011117 	and	w23, w8, #0x8000000f
      1c:	1b0e030f 	madd	w15, w24, w14, w0
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	130e250e 	sbfiz	w14, w8, #18, #10
      24:	00000005 	udf	#5
      28:	10001101 	adr	x1, 248 <__stack_size-0x3db8>
      2c:	12011117 	and	w23, w8, #0x8000000f
	return 0;
      30:	1b0e030f 	madd	w15, w24, w14, w0
}
      34:	130e250e 	sbfiz	w14, w8, #18, #10
      38:	00000005 	udf	#5
    __delay(delay_cnt);
      3c:	10001101 	adr	x1, 25c <__stack_size-0x3da4>
      40:	12011117 	and	w23, w8, #0x8000000f
}
      44:	1b0e030f 	madd	w15, w24, w14, w0
      48:	130e250e 	sbfiz	w14, w8, #18, #10
      4c:	00000005 	udf	#5
    } while(Tconsumed < DelayCnt);
      50:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
    return 0;
      54:	030b130e 	.inst	0x030b130e ; undefined
}
      58:	550e1b0e 	.inst	0x550e1b0e ; undefined
      5c:	10011117 	adr	x23, 227c <__stack_size-0x1d84>
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
      60:	02000017 	.inst	0x02000017 ; undefined
      64:	0b0b0024 	add	w4, w1, w11
      68:	0e030b3e 	.inst	0x0e030b3e ; undefined
      6c:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
    if(Mtimer_IsTimerOut(&mtimer)){
      70:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
      74:	0008030b 	.inst	0x0008030b ; undefined
      78:	00160400 	.inst	0x00160400 ; undefined
      7c:	0b3a0803 	add	w3, w0, w26, uxtb #2
      80:	0b390b3b 	add	w27, w25, w25, uxtb #2
        error_stat_check(r);
      84:	00001349 	udf	#4937
      88:	03003405 	.inst	0x03003405 ; undefined
        return MMC_XFER_TIMEOUT;
      8c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      90:	490b390b 	.inst	0x490b390b ; undefined
        if(r.bit.xfer_complete == 1){
      94:	00180213 	.inst	0x00180213 ; undefined
      98:	002e0600 	.inst	0x002e0600 ; NYI
        r.bit.dma_interrupt = 0x1;
      9c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
      a0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
      a4:	19270b39 	.inst	0x19270b39 ; undefined
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
      a8:	07120111 	.inst	0x07120111 ; undefined
      ac:	42961840 	.inst	0x42961840 ; undefined
      b0:	07000019 	.inst	0x07000019 ; undefined
      b4:	193f012e 	.inst	0x193f012e ; undefined
      b8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
      bc:	0b390b3b 	add	w27, w25, w25, uxtb #2
      c0:	13491927 	.inst	0x13491927 ; undefined
        return MMC_SUCCESS;
      c4:	07120111 	.inst	0x07120111 ; undefined
}
      c8:	42971840 	.inst	0x42971840 ; undefined
      cc:	00130119 	.inst	0x00130119 ; undefined
            break;
      d0:	00050800 	.inst	0x00050800 ; undefined
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d4:	0b3a0803 	add	w3, w0, w26, uxtb #2
      d8:	0b390b3b 	add	w27, w25, w25, uxtb #2
      dc:	18021349 	ldr	w9, 4344 <__stack_size+0x344>
            retval = Uart_event_modem;
      e0:	2e090000 	ext	v0.8b, v0.8b, v9.8b, #0
            break;
      e4:	3a0e0301 	adcs	w1, w24, w14
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	390b3b0b 	strb	w11, [x24, #718]
      ec:	4919270b 	.inst	0x4919270b ; undefined
      f0:	12011113 	and	w19, w8, #0x8000000f
        	retval =Uart_event_thre;
      f4:	97184007 	bl	fffffffffc610110 <_sp+0xffffffff9b5d0110>
      f8:	13011942 	sbfx	w2, w10, #1, #6
        	break;
      fc:	340a0000 	cbz	w0, 140fc <__stack_size+0x100fc>
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	3a080300 	adcs	w0, w24, w8
     104:	390b3b0b 	strb	w11, [x24, #718]
     108:	0213490b 	.inst	0x0213490b ; undefined
        	retval = Uart_event_timeout;
     10c:	0b000018 	add	w24, w0, w0
     110:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
        	break;
     114:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	19270b39 	.inst	0x19270b39 ; undefined
     11c:	07120111 	.inst	0x07120111 ; undefined
     120:	42971840 	.inst	0x42971840 ; undefined
        	retval = Received_data_available;
     124:	00130119 	.inst	0x00130119 ; undefined
     128:	00050c00 	.inst	0x00050c00 ; undefined
            break;
     12c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	0b390b3b 	add	w27, w25, w25, uxtb #2
     134:	18021349 	ldr	w9, 439c <__stack_size+0x39c>
     138:	0f0d0000 	.inst	0x0f0d0000 ; undefined
        	retval = Receiver_line_status;
     13c:	490b0b00 	.inst	0x490b0b00 ; undefined
     140:	0e000013 	tbl	v19.8b, {v0.16b}, v0.8b
            break;
     144:	00000035 	udf	#53
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	01110100 	.inst	0x01110100 ; undefined
     14c:	0b130e25 	add	w5, w17, w19, lsl #3
     150:	0e1b0e03 	dup	v3.8b, w16
        	retval = Uart_event_busy;
     154:	01111755 	.inst	0x01111755 ; undefined
     158:	00001710 	udf	#5904
            break;
     15c:	0b002402 	add	w2, w0, w0, lsl #9
            retval = 0;
     160:	030b3e0b 	.inst	0x030b3e0b ; undefined
            break;
     164:	0300000e 	.inst	0x0300000e ; undefined
    return retval;
     168:	0b0b0024 	add	w4, w1, w11
}
     16c:	08030b3e 	stxrb	w3, w30, [x25]
     170:	26040000 	.inst	0x26040000 ; undefined
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
     174:	00134900 	.inst	0x00134900 ; undefined
     178:	00160500 	.inst	0x00160500 ; undefined
     17c:	0b3a0803 	add	w3, w0, w26, uxtb #2
     180:	0b390b3b 	add	w27, w25, w25, uxtb #2
     184:	00001349 	udf	#4937
     188:	03001606 	.inst	0x03001606 ; undefined
     18c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
     190:	490b390b 	.inst	0x490b390b ; undefined
     194:	07000013 	.inst	0x07000013 ; undefined
     198:	0b3e0104 	add	w4, w8, w30, uxtb
     19c:	13490b0b 	.inst	0x13490b0b ; undefined
     1a0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     1a4:	13010b39 	sbfx	w25, w25, #1, #2
     1a8:	28080000 	stnp	w0, w0, [x0, #64]
     1ac:	1c0e0300 	ldr	s0, 1c20c <__stack_size+0x1820c>
     1b0:	0900000b 	.inst	0x0900000b ; undefined
     1b4:	0b0b000f 	add	w15, w0, w11
     1b8:	00001349 	udf	#4937
     1bc:	0101150a 	.inst	0x0101150a ; undefined
     1c0:	0b000013 	add	w19, w0, w0
		writel_relaxed(0, GICD_CTLR);
     1c4:	00000018 	udf	#24
     1c8:	4901010c 	.inst	0x4901010c ; undefined
     1cc:	00130113 	.inst	0x00130113 ; undefined
		gic_dist_wait();
     1d0:	00210d00 	.inst	0x00210d00 ; NYI
		if (int_group == GROUP_1_NONSECURE) {
     1d4:	052f1349 	ext	z9.b, z9.b, z26.b, #124
     1d8:	340e0000 	cbz	w0, 1c1d8 <__stack_size+0x181d8>
     1dc:	3a0e0300 	adcs	w0, w24, w14
			gicd_igroup  |= (0x01 << int_id);
     1e0:	390b3b0b 	strb	w11, [x24, #718]
     1e4:	0213490b 	.inst	0x0213490b ; undefined
     1e8:	0f000018 	.inst	0x0f000018 ; undefined
     1ec:	193f012e 	.inst	0x193f012e ; undefined
     1f0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     1f4:	0b390b3b 	add	w27, w25, w25, uxtb #2
     1f8:	13491927 	.inst	0x13491927 ; undefined
			gicd_igrpmod &= (~(0x01 << int_id));
     1fc:	1301193c 	sbfx	w28, w9, #1, #6
     200:	05100000 	mov	z0.b, p0/z, #0
     204:	00134900 	.inst	0x00134900 ; undefined
     208:	012e1100 	.inst	0x012e1100 ; undefined
     20c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     210:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     214:	13490b39 	.inst	0x13490b39 ; undefined
     218:	1301193c 	sbfx	w28, w9, #1, #6
     21c:	2e120000 	ext	v0.8b, v0.8b, v18.8b, #0
		} else if (int_group == GROUP_1_SECURE) {
     220:	03193f01 	.inst	0x03193f01 ; undefined
     224:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     228:	270b3905 	.inst	0x270b3905 ; undefined
			gicd_igroup  &= (~(0x01 << int_id));
     22c:	11134919 	add	w25, w8, #0x4d2
     230:	40071201 	.inst	0x40071201 ; undefined
     234:	19429618 	.inst	0x19429618 ; undefined
     238:	00001301 	udf	#4865
     23c:	03000513 	.inst	0x03000513 ; undefined
     240:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     244:	490b3905 	.inst	0x490b3905 ; undefined
     248:	00180213 	.inst	0x00180213 ; undefined
			gicd_igrpmod |= (0x01 << int_id);
     24c:	010b1400 	.inst	0x010b1400 ; undefined
     250:	07120111 	.inst	0x07120111 ; undefined
     254:	00001301 	udf	#4865
     258:	03003415 	.inst	0x03003415 ; undefined
     25c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     260:	490b3905 	.inst	0x490b3905 ; undefined
     264:	00180213 	.inst	0x00180213 ; undefined
     268:	00341600 	.inst	0x00341600 ; NYI
		} else if(int_group == GROUP_0) {
     26c:	0b3a0803 	add	w3, w0, w26, uxtb #2
     270:	0b39053b 	add	w27, w9, w25, uxtb #1
     274:	18021349 	ldr	w9, 44dc <__stack_size+0x4dc>
			gicd_igroup  &= (~(0x01 << int_id));
     278:	0b170000 	add	w0, w0, w23
     27c:	12011101 	and	w1, w8, #0x8000000f
     280:	18000007 	ldr	w7, 280 <__stack_size-0x3d80>
     284:	0b0b000f 	add	w15, w0, w11
     288:	2e190000 	ext	v0.8b, v0.8b, v25.8b, #0
     28c:	03193f00 	.inst	0x03193f00 ; undefined
     290:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     294:	270b3905 	.inst	0x270b3905 ; undefined
			gicd_igrpmod &= (0x01 << int_id);
     298:	12011119 	and	w25, w8, #0x8000000f
     29c:	97184007 	bl	fffffffffc6102b8 <_sp+0xffffffff9b5d02b8>
     2a0:	00001942 	udf	#6466
     2a4:	3f012e1a 	.inst	0x3f012e1a ; undefined
     2a8:	3a0e0319 	adcs	w25, w24, w14
     2ac:	39053b0b 	strb	w11, [x24, #334]
     2b0:	1119270b 	add	w11, w24, #0x649
		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
     2b4:	40071201 	.inst	0x40071201 ; undefined
     2b8:	19429618 	.inst	0x19429618 ; undefined
     2bc:	00001301 	udf	#4865
     2c0:	03012e1b 	.inst	0x03012e1b ; undefined
     2c4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     2c8:	270b3905 	.inst	0x270b3905 ; undefined
     2cc:	12011119 	and	w25, w8, #0x8000000f
     2d0:	96184007 	bl	fffffffff86102ec <_sp+0xffffffff975d02ec>
     2d4:	13011942 	sbfx	w2, w10, #1, #6
     2d8:	051c0000 	mov	z0.b, p12/z, #0
     2dc:	3a080300 	adcs	w0, w24, w8
     2e0:	39053b0b 	strb	w11, [x24, #334]
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
     2e4:	0213490b 	.inst	0x0213490b ; undefined
     2e8:	1d000018 	.inst	0x1d000018 ; undefined
     2ec:	193f002e 	.inst	0x193f002e ; undefined
     2f0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     2f4:	0b39053b 	add	w27, w9, w25, uxtb #1
     2f8:	01111927 	.inst	0x01111927 ; undefined
     2fc:	18400712 	ldr	w18, 803dc <__stack_size+0x7c3dc>
     300:	00194296 	.inst	0x00194296 ; undefined
     304:	00341e00 	.inst	0x00341e00 ; NYI
     308:	0b3a0803 	add	w3, w0, w26, uxtb #2
     30c:	0b39053b 	add	w27, w9, w25, uxtb #1
     310:	00001349 	udf	#4937
		gic_dist_wait();
     314:	0300341f 	.inst	0x0300341f ; undefined
}
     318:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     31c:	490b3905 	.inst	0x490b3905 ; undefined
     320:	20000013 	.inst	0x20000013 ; undefined
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
     324:	0e03002e 	tbl	v14.8b, {v1.16b}, v3.8b
     328:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     32c:	19270b39 	.inst	0x19270b39 ; undefined
     330:	07120111 	.inst	0x07120111 ; undefined
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
     334:	42961840 	.inst	0x42961840 ; undefined
     338:	21000019 	.inst	0x21000019 ; undefined
     33c:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     340:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
     344:	19270b39 	.inst	0x19270b39 ; undefined
     348:	01111349 	.inst	0x01111349 ; undefined
     34c:	18400712 	ldr	w18, 8042c <__stack_size+0x7c42c>
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
     350:	01194296 	.inst	0x01194296 ; undefined
     354:	22000013 	.inst	0x22000013 ; undefined
     358:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     35c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
     360:	19270b39 	.inst	0x19270b39 ; undefined
     364:	01111349 	.inst	0x01111349 ; undefined
     368:	18400712 	ldr	w18, 80448 <__stack_size+0x7c448>
     36c:	01194296 	.inst	0x01194296 ; undefined
     370:	23000013 	.inst	0x23000013 ; undefined
     374:	08030034 	stxrb	w3, w20, [x1]
    block.bit.xfer_block_size = BlockSize;
     378:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     37c:	13490b39 	.inst	0x13490b39 ; undefined
     380:	00001802 	udf	#6146
     384:	3f012e24 	.inst	0x3f012e24 ; undefined
     388:	3a0e0319 	adcs	w25, w24, w14
     38c:	390b3b0b 	strb	w11, [x24, #718]
    block.bit.blockcount_r = BlockNum;
     390:	1119270b 	add	w11, w24, #0x649
     394:	40071201 	.inst	0x40071201 ; undefined
     398:	19429618 	.inst	0x19429618 ; undefined
     39c:	00001301 	udf	#4865
     3a0:	03000525 	.inst	0x03000525 ; undefined
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
     3a4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     3a8:	490b390b 	.inst	0x490b390b ; undefined
     3ac:	00180213 	.inst	0x00180213 ; undefined
     3b0:	010b2600 	.inst	0x010b2600 ; undefined
     3b4:	00001755 	udf	#5973
     3b8:	03003427 	.inst	0x03003427 ; undefined
     3bc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     3c0:	490b390b 	.inst	0x490b390b ; undefined
     3c4:	28000013 	stnp	w19, w0, [x0]
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
     3c8:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     3cc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     3d0:	19270b39 	.inst	0x19270b39 ; undefined
     3d4:	01111349 	.inst	0x01111349 ; undefined
     3d8:	18400712 	ldr	w18, 804b8 <__stack_size+0x7c4b8>
     3dc:	01194297 	.inst	0x01194297 ; undefined
     3e0:	29000013 	stp	w19, w0, [x0]
     3e4:	0e03002e 	tbl	v14.8b, {v1.16b}, v3.8b
     3e8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
     3ec:	19270b39 	.inst	0x19270b39 ; undefined
     3f0:	07120111 	.inst	0x07120111 ; undefined
     3f4:	42961840 	.inst	0x42961840 ; undefined
     3f8:	2a000019 	orr	w25, w0, w0
     3fc:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
     400:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     404:	19270b39 	.inst	0x19270b39 ; undefined
     408:	07120111 	.inst	0x07120111 ; undefined
     40c:	42961840 	.inst	0x42961840 ; undefined
     410:	00130119 	.inst	0x00130119 ; undefined
	MMC_WAIT_CMD_COMPLETE(SDIO);
     414:	010b2b00 	.inst	0x010b2b00 ; undefined
     418:	13011755 	sbfx	w21, w26, #1, #5
     41c:	2e2c0000 	uaddl	v0.8h, v0.8b, v12.8b
     420:	03193f01 	.inst	0x03193f01 ; undefined
     424:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     428:	490b390b 	.inst	0x490b390b ; undefined
     42c:	00193c13 	.inst	0x00193c13 ; undefined
     430:	00052d00 	.inst	0x00052d00 ; undefined
     434:	0b3a0803 	add	w3, w0, w26, uxtb #2
     438:	0b390b3b 	add	w27, w25, w25, uxtb #2
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
     43c:	18021349 	ldr	w9, 46a4 <__stack_size+0x6a4>
     440:	2e2e0000 	uaddl	v0.8h, v0.8b, v14.8b
     444:	3a0e0300 	adcs	w0, w24, w14
     448:	390b3b0b 	strb	w11, [x24, #718]
     44c:	1119270b 	add	w11, w24, #0x649
     450:	40071201 	.inst	0x40071201 ; undefined
     454:	19429718 	.inst	0x19429718 ; undefined
     458:	352f0000 	cbnz	w0, 5e458 <__stack_size+0x5a458>
     45c:	30000000 	adr	x0, 45d <__stack_size-0x3ba3>
     460:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
	return MMC_SUCCESS;
     464:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
}
     468:	19270b39 	.inst	0x19270b39 ; undefined
     46c:	07120111 	.inst	0x07120111 ; undefined
     470:	42971840 	.inst	0x42971840 ; undefined
     474:	00130119 	.inst	0x00130119 ; undefined
     478:	012e3100 	.inst	0x012e3100 ; undefined
     47c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     480:	0b390b3b 	add	w27, w25, w25, uxtb #2
     484:	01111927 	.inst	0x01111927 ; undefined
     488:	18400712 	ldr	w18, 80568 <__stack_size+0x7c568>
     48c:	00194297 	.inst	0x00194297 ; undefined
     490:	11010000 	add	w0, w0, #0x40
     494:	130e2501 	sbfiz	w1, w8, #18, #10
     498:	1b0e030b 	madd	w11, w24, w14, w0
     49c:	1117550e 	add	w14, w8, #0x5d5
     4a0:	00171001 	.inst	0x00171001 ; undefined
     4a4:	00240200 	.inst	0x00240200 ; NYI
     4a8:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     4ac:	00000e03 	udf	#3587
     4b0:	3f012e03 	.inst	0x3f012e03 ; undefined
     4b4:	3a0e0319 	adcs	w25, w24, w14
     4b8:	390b3b0b 	strb	w11, [x24, #718]
     4bc:	4919270b 	.inst	0x4919270b ; undefined
     4c0:	01193c13 	.inst	0x01193c13 ; undefined
     4c4:	04000013 	add	z19.b, p0/m, z19.b, z0.b
     4c8:	13490005 	.inst	0x13490005 ; undefined
     4cc:	18050000 	ldr	w0, a4cc <__stack_size+0x64cc>
     4d0:	06000000 	.inst	0x06000000 ; undefined
     4d4:	0b0b0024 	add	w4, w1, w11
     4d8:	08030b3e 	stxrb	w3, w30, [x25]
     4dc:	0f070000 	.inst	0x0f070000 ; undefined
     4e0:	490b0b00 	.inst	0x490b0b00 ; undefined
     4e4:	08000013 	stxrb	w0, w19, [x0]
     4e8:	13490026 	.inst	0x13490026 ; undefined
     4ec:	2e090000 	ext	v0.8b, v0.8b, v9.8b, #0
     4f0:	03193f01 	.inst	0x03193f01 ; undefined
     4f4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     4f8:	270b390b 	.inst	0x270b390b ; undefined
     4fc:	19018719 	.inst	0x19018719 ; undefined
     500:	07120111 	.inst	0x07120111 ; undefined
     504:	42961840 	.inst	0x42961840 ; undefined
     508:	00130119 	.inst	0x00130119 ; undefined
     50c:	00050a00 	.inst	0x00050a00 ; undefined
     510:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     514:	0b390b3b 	add	w27, w25, w25, uxtb #2
     518:	18021349 	ldr	w9, 4780 <__stack_size+0x780>
     51c:	01000000 	.inst	0x01000000 ; undefined
     520:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     524:	0e030b13 	.inst	0x0e030b13 ; undefined
     528:	17550e1b 	b	fffffffffd543d94 <_sp+0xffffffff9c503d94>
     52c:	17100111 	b	fffffffffc400970 <_sp+0xffffffff9b3c0970>
     530:	16020000 	b	fffffffff8080530 <_sp+0xffffffff97040530>
     534:	3a0e0300 	adcs	w0, w24, w14
     538:	390b3b0b 	strb	w11, [x24, #718]
     53c:	0013490b 	.inst	0x0013490b ; undefined
     540:	00240300 	.inst	0x00240300 ; NYI
     544:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     548:	00000e03 	udf	#3587
     54c:	3f012e04 	.inst	0x3f012e04 ; undefined
     550:	3a0e0319 	adcs	w25, w24, w14
     554:	390b3b0b 	strb	w11, [x24, #718]
     558:	4919270b 	.inst	0x4919270b ; undefined
     55c:	12011113 	and	w19, w8, #0x8000000f
     560:	97184007 	bl	fffffffffc61057c <_sp+0xffffffff9b5d057c>
     564:	13011942 	sbfx	w2, w10, #1, #6
     568:	05050000 	.inst	0x05050000 ; undefined
     56c:	3a080300 	adcs	w0, w24, w8
     570:	390b3b0b 	strb	w11, [x24, #718]
     574:	0213490b 	.inst	0x0213490b ; undefined
     578:	06000018 	.inst	0x06000018 ; undefined
     57c:	08030034 	stxrb	w3, w20, [x1]
     580:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     584:	13490b39 	.inst	0x13490b39 ; undefined
     588:	00001802 	udf	#6146
     58c:	0b000f07 	add	w7, w24, w0, lsl #3
     590:	0800000b 	stxrb	w0, w11, [x0]
     594:	0b0b000f 	add	w15, w0, w11
     598:	00001349 	udf	#4937
     59c:	00002609 	udf	#9737
     5a0:	00260a00 	.inst	0x00260a00 ; NYI
     5a4:	00001349 	udf	#4937
     5a8:	01110100 	.inst	0x01110100 ; undefined
     5ac:	0b130e25 	add	w5, w17, w19, lsl #3
     5b0:	0e1b0e03 	dup	v3.8b, w16
     5b4:	01111755 	.inst	0x01111755 ; undefined
     5b8:	00001710 	udf	#5904
     5bc:	03001602 	.inst	0x03001602 ; undefined
     5c0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     5c4:	490b390b 	.inst	0x490b390b ; undefined
     5c8:	03000013 	.inst	0x03000013 ; undefined
     5cc:	0b0b0024 	add	w4, w1, w11
     5d0:	0e030b3e 	.inst	0x0e030b3e ; undefined
     5d4:	24040000 	cmphs	p0.b, p0/z, z0.b, z4.b
     5d8:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     5dc:	0008030b 	.inst	0x0008030b ; undefined
     5e0:	012e0500 	.inst	0x012e0500 ; undefined
     5e4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     5e8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     5ec:	19270b39 	.inst	0x19270b39 ; undefined
     5f0:	01111349 	.inst	0x01111349 ; undefined
     5f4:	18400712 	ldr	w18, 806d4 <__stack_size+0x7c6d4>
     5f8:	01194297 	.inst	0x01194297 ; undefined
     5fc:	06000013 	.inst	0x06000013 ; undefined
     600:	08030005 	stxrb	w3, w5, [x0]
     604:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     608:	13490b39 	.inst	0x13490b39 ; undefined
     60c:	00001802 	udf	#6146
     610:	03000507 	.inst	0x03000507 ; undefined
     614:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     618:	490b390b 	.inst	0x490b390b ; undefined
     61c:	00180213 	.inst	0x00180213 ; undefined
     620:	00340800 	.inst	0x00340800 ; NYI
     624:	0b3a0803 	add	w3, w0, w26, uxtb #2
     628:	0b390b3b 	add	w27, w25, w25, uxtb #2
     62c:	18021349 	ldr	w9, 4894 <__stack_size+0x894>
     630:	34090000 	cbz	w0, 12630 <__stack_size+0xe630>
     634:	3a0e0300 	adcs	w0, w24, w14
     638:	390b3b0b 	strb	w11, [x24, #718]
     63c:	0213490b 	.inst	0x0213490b ; undefined
     640:	0a000018 	and	w24, w0, w0
     644:	0b0b000f 	add	w15, w0, w11
     648:	0f0b0000 	.inst	0x0f0b0000 ; undefined
     64c:	490b0b00 	.inst	0x490b0b00 ; undefined
     650:	00000013 	udf	#19
     654:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     658:	030b130e 	.inst	0x030b130e ; undefined
     65c:	550e1b0e 	.inst	0x550e1b0e ; undefined
     660:	10011117 	adr	x23, 2880 <__stack_size-0x1780>
     664:	02000017 	.inst	0x02000017 ; undefined
     668:	0b0b0024 	add	w4, w1, w11
     66c:	0e030b3e 	.inst	0x0e030b3e ; undefined
     670:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
     674:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     678:	0008030b 	.inst	0x0008030b ; undefined
     67c:	00160400 	.inst	0x00160400 ; undefined
     680:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     684:	0b390b3b 	add	w27, w25, w25, uxtb #2
     688:	00001349 	udf	#4937
     68c:	3f012e05 	.inst	0x3f012e05 ; undefined
     690:	3a0e0319 	adcs	w25, w24, w14
     694:	390b3b0b 	strb	w11, [x24, #718]
     698:	4919270b 	.inst	0x4919270b ; undefined
     69c:	01193c13 	.inst	0x01193c13 ; undefined
     6a0:	06000013 	.inst	0x06000013 ; undefined
     6a4:	13490005 	.inst	0x13490005 ; undefined
     6a8:	2e070000 	ext	v0.8b, v0.8b, v7.8b, #0
     6ac:	03193f01 	.inst	0x03193f01 ; undefined
     6b0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     6b4:	270b390b 	.inst	0x270b390b ; undefined
     6b8:	19018719 	.inst	0x19018719 ; undefined
     6bc:	1301193c 	sbfx	w28, w9, #1, #6
     6c0:	0f080000 	.inst	0x0f080000 ; undefined
     6c4:	490b0b00 	.inst	0x490b0b00 ; undefined
     6c8:	09000013 	.inst	0x09000013 ; undefined
     6cc:	13490026 	.inst	0x13490026 ; undefined
     6d0:	2e0a0000 	ext	v0.8b, v0.8b, v10.8b, #0
     6d4:	03193f01 	.inst	0x03193f01 ; undefined
     6d8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     6dc:	270b390b 	.inst	0x270b390b ; undefined
     6e0:	11134919 	add	w25, w8, #0x4d2
     6e4:	40071201 	.inst	0x40071201 ; undefined
     6e8:	19429618 	.inst	0x19429618 ; undefined
     6ec:	00001301 	udf	#4865
     6f0:	0300050b 	.inst	0x0300050b ; undefined
     6f4:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     6f8:	490b390b 	.inst	0x490b390b ; undefined
     6fc:	00180213 	.inst	0x00180213 ; undefined
     700:	00180c00 	.inst	0x00180c00 ; undefined
     704:	340d0000 	cbz	w0, 1a704 <__stack_size+0x16704>
     708:	3a0e0300 	adcs	w0, w24, w14
     70c:	390b3b0b 	strb	w11, [x24, #718]
     710:	0213490b 	.inst	0x0213490b ; undefined
     714:	0e000018 	tbl	v24.8b, {v0.16b}, v0.8b
     718:	08030034 	stxrb	w3, w20, [x1]
     71c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     720:	13490b39 	.inst	0x13490b39 ; undefined
     724:	00001802 	udf	#6146
     728:	0301130f 	.inst	0x0301130f ; undefined
     72c:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
     730:	010b3b0b 	.inst	0x010b3b0b ; undefined
     734:	10000013 	adr	x19, 734 <__stack_size-0x38cc>
     738:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     73c:	0b381349 	add	w9, w26, w24, uxtb #4
     740:	00001934 	udf	#6452
     744:	0b000f11 	add	w17, w24, w0, lsl #3
     748:	1200000b 	and	w11, w0, #0x1
     74c:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     750:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     754:	13490b39 	.inst	0x13490b39 ; undefined
     758:	00001802 	udf	#6146
     75c:	03000a13 	.inst	0x03000a13 ; undefined
     760:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     764:	110b390b 	add	w11, w8, #0x2ce
     768:	14000001 	b	76c <__stack_size-0x3894>
     76c:	0111010b 	.inst	0x0111010b ; undefined
     770:	00000712 	udf	#1810
     774:	03012e15 	.inst	0x03012e15 ; undefined
     778:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     77c:	270b390b 	.inst	0x270b390b ; undefined
     780:	11134919 	add	w25, w8, #0x4d2
     784:	40071201 	.inst	0x40071201 ; undefined
     788:	19429618 	.inst	0x19429618 ; undefined
     78c:	00001301 	udf	#4865
     790:	49010116 	.inst	0x49010116 ; undefined
     794:	00130113 	.inst	0x00130113 ; undefined
     798:	00211700 	.inst	0x00211700 ; NYI
     79c:	0b2f1349 	add	w9, w26, w15, uxtb #4
     7a0:	2e180000 	ext	v0.8b, v0.8b, v24.8b, #0
     7a4:	3a0e0301 	adcs	w1, w24, w14
     7a8:	390b3b0b 	strb	w11, [x24, #718]
     7ac:	4919270b 	.inst	0x4919270b ; undefined
     7b0:	12011113 	and	w19, w8, #0x8000000f
     7b4:	96184007 	bl	fffffffff86107d0 <_sp+0xffffffff975d07d0>
     7b8:	00001942 	udf	#6466
     7bc:	01110100 	.inst	0x01110100 ; undefined
     7c0:	0b130e25 	add	w5, w17, w19, lsl #3
     7c4:	0e1b0e03 	dup	v3.8b, w16
     7c8:	01111755 	.inst	0x01111755 ; undefined
     7cc:	00001710 	udf	#5904
     7d0:	0b002402 	add	w2, w0, w0, lsl #9
     7d4:	030b3e0b 	.inst	0x030b3e0b ; undefined
     7d8:	0300000e 	.inst	0x0300000e ; undefined
     7dc:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     7e0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     7e4:	13490b39 	.inst	0x13490b39 ; undefined
     7e8:	24040000 	cmphs	p0.b, p0/z, z0.b, z4.b
     7ec:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     7f0:	0008030b 	.inst	0x0008030b ; undefined
     7f4:	00350500 	.inst	0x00350500 ; NYI
     7f8:	00001349 	udf	#4937
     7fc:	49010106 	.inst	0x49010106 ; undefined
     800:	00130113 	.inst	0x00130113 ; undefined
     804:	00210700 	.inst	0x00210700 ; NYI
     808:	0b2f1349 	add	w9, w26, w15, uxtb #4
     80c:	13080000 	sbfiz	w0, w0, #24, #1
     810:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
     814:	39053b0b 	strb	w11, [x24, #334]
     818:	0013010b 	.inst	0x0013010b ; undefined
     81c:	000d0900 	.inst	0x000d0900 ; undefined
     820:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     824:	0b39053b 	add	w27, w9, w25, uxtb #1
     828:	0b381349 	add	w9, w26, w24, uxtb #4
     82c:	0d0a0000 	.inst	0x0d0a0000 ; undefined
     830:	3a080300 	adcs	w0, w24, w8
     834:	39053b0b 	strb	w11, [x24, #334]
     838:	3813490b 	sttrb	w11, [x8, #-204]
     83c:	0b00000b 	add	w11, w0, w0
     840:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     844:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     848:	13490b39 	.inst	0x13490b39 ; undefined
     84c:	2e0c0000 	ext	v0.8b, v0.8b, v12.8b, #0
     850:	03193f01 	.inst	0x03193f01 ; undefined
     854:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     858:	270b3905 	.inst	0x270b3905 ; undefined
     85c:	3c134919 	.inst	0x3c134919 ; undefined
     860:	00130119 	.inst	0x00130119 ; undefined
     864:	00050d00 	.inst	0x00050d00 ; undefined
     868:	00001349 	udf	#4937
     86c:	0b000f0e 	add	w14, w24, w0, lsl #3
     870:	0013490b 	.inst	0x0013490b ; undefined
     874:	012e0f00 	.inst	0x012e0f00 ; undefined
     878:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     87c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     880:	19270b39 	.inst	0x19270b39 ; undefined
     884:	01111349 	.inst	0x01111349 ; undefined
     888:	18400712 	ldr	w18, 80968 <__stack_size+0x7c968>
     88c:	00194296 	.inst	0x00194296 ; undefined
     890:	00051000 	.inst	0x00051000 ; undefined
     894:	0b3a0803 	add	w3, w0, w26, uxtb #2
     898:	0b390b3b 	add	w27, w25, w25, uxtb #2
     89c:	18021349 	ldr	w9, 4b04 <__stack_size+0xb04>
     8a0:	01000000 	.inst	0x01000000 ; undefined
     8a4:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     8a8:	0e030b13 	.inst	0x0e030b13 ; undefined
     8ac:	17550e1b 	b	fffffffffd544118 <_sp+0xffffffff9c504118>
     8b0:	17100111 	b	fffffffffc400cf4 <_sp+0xffffffff9b3c0cf4>
     8b4:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
     8b8:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     8bc:	000e030b 	.inst	0x000e030b ; undefined
     8c0:	012e0300 	.inst	0x012e0300 ; undefined
     8c4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     8c8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     8cc:	19270b39 	.inst	0x19270b39 ; undefined
     8d0:	01111349 	.inst	0x01111349 ; undefined
     8d4:	18400712 	ldr	w18, 809b4 <__stack_size+0x7c9b4>
     8d8:	01194297 	.inst	0x01194297 ; undefined
     8dc:	04000013 	add	z19.b, p0/m, z19.b, z0.b
     8e0:	08030005 	stxrb	w3, w5, [x0]
     8e4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     8e8:	13490b39 	.inst	0x13490b39 ; undefined
     8ec:	00001802 	udf	#6146
     8f0:	0b002405 	add	w5, w0, w0, lsl #9
     8f4:	030b3e0b 	.inst	0x030b3e0b ; undefined
     8f8:	06000008 	.inst	0x06000008 ; undefined
     8fc:	0b0b000f 	add	w15, w0, w11
     900:	00001349 	udf	#4937
     904:	49002607 	.inst	0x49002607 ; undefined
     908:	00000013 	udf	#19
     90c:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     910:	030b130e 	.inst	0x030b130e ; undefined
     914:	550e1b0e 	.inst	0x550e1b0e ; undefined
     918:	10011117 	adr	x23, 2b38 <__stack_size-0x14c8>
     91c:	02000017 	.inst	0x02000017 ; undefined
     920:	0b0b0024 	add	w4, w1, w11
     924:	0e030b3e 	.inst	0x0e030b3e ; undefined
     928:	16030000 	b	fffffffff80c0928 <_sp+0xffffffff97080928>
     92c:	3a0e0300 	adcs	w0, w24, w14
     930:	390b3b0b 	strb	w11, [x24, #718]
     934:	0013490b 	.inst	0x0013490b ; undefined
     938:	00240400 	.inst	0x00240400 ; NYI
     93c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     940:	00000803 	udf	#2051
     944:	03001605 	.inst	0x03001605 ; undefined
     948:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     94c:	490b390b 	.inst	0x490b390b ; undefined
     950:	06000013 	.inst	0x06000013 ; undefined
     954:	193f012e 	.inst	0x193f012e ; undefined
     958:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     95c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     960:	01111927 	.inst	0x01111927 ; undefined
     964:	18400712 	ldr	w18, 80a44 <__stack_size+0x7ca44>
     968:	01194296 	.inst	0x01194296 ; undefined
     96c:	07000013 	.inst	0x07000013 ; undefined
     970:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     974:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     978:	13490b39 	.inst	0x13490b39 ; undefined
     97c:	00001802 	udf	#6146
     980:	03003408 	.inst	0x03003408 ; undefined
     984:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     988:	490b390b 	.inst	0x490b390b ; undefined
     98c:	00180213 	.inst	0x00180213 ; undefined
     990:	012e0900 	.inst	0x012e0900 ; undefined
     994:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     998:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     99c:	19270b39 	.inst	0x19270b39 ; undefined
     9a0:	01111349 	.inst	0x01111349 ; undefined
     9a4:	18400712 	ldr	w18, 80a84 <__stack_size+0x7ca84>
     9a8:	01194296 	.inst	0x01194296 ; undefined
     9ac:	0a000013 	and	w19, w0, w0
     9b0:	193f012e 	.inst	0x193f012e ; undefined
     9b4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     9b8:	0b390b3b 	add	w27, w25, w25, uxtb #2
     9bc:	13491927 	.inst	0x13491927 ; undefined
     9c0:	07120111 	.inst	0x07120111 ; undefined
     9c4:	42971840 	.inst	0x42971840 ; undefined
     9c8:	00130119 	.inst	0x00130119 ; undefined
     9cc:	010b0b00 	.inst	0x010b0b00 ; undefined
     9d0:	07120111 	.inst	0x07120111 ; undefined
     9d4:	2e0c0000 	ext	v0.8b, v0.8b, v12.8b, #0
     9d8:	3a0e0301 	adcs	w1, w24, w14
     9dc:	390b3b0b 	strb	w11, [x24, #718]
     9e0:	4919270b 	.inst	0x4919270b ; undefined
     9e4:	12011113 	and	w19, w8, #0x8000000f
     9e8:	97184007 	bl	fffffffffc610a04 <_sp+0xffffffff9b5d0a04>
     9ec:	13011942 	sbfx	w2, w10, #1, #6
     9f0:	2e0d0000 	ext	v0.8b, v0.8b, v13.8b, #0
     9f4:	3a0e0301 	adcs	w1, w24, w14
     9f8:	390b3b0b 	strb	w11, [x24, #718]
     9fc:	1119270b 	add	w11, w24, #0x649
     a00:	40071201 	.inst	0x40071201 ; undefined
     a04:	19429718 	.inst	0x19429718 ; undefined
     a08:	0b0e0000 	add	w0, w0, w14
     a0c:	12011101 	and	w1, w8, #0x8000000f
     a10:	00130107 	.inst	0x00130107 ; undefined
     a14:	11010000 	add	w0, w0, #0x40
     a18:	130e2501 	sbfiz	w1, w8, #18, #10
     a1c:	1b0e030b 	madd	w11, w24, w14, w0
     a20:	1117550e 	add	w14, w8, #0x5d5
     a24:	00171001 	.inst	0x00171001 ; undefined
     a28:	01130200 	.inst	0x01130200 ; undefined
     a2c:	050b0e03 	.inst	0x050b0e03 ; undefined
     a30:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     a34:	13010b39 	sbfx	w25, w25, #1, #2
     a38:	0d030000 	.inst	0x0d030000 ; undefined
     a3c:	3a0e0300 	adcs	w0, w24, w14
     a40:	390b3b0b 	strb	w11, [x24, #718]
     a44:	3813490b 	sttrb	w11, [x8, #-204]
     a48:	0400000b 	add	z11.b, p0/m, z11.b, z0.b
     a4c:	0803000d 	stxrb	w3, w13, [x0]
     a50:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     a54:	13490b39 	.inst	0x13490b39 ; undefined
     a58:	00000b38 	udf	#2872
     a5c:	03000d05 	.inst	0x03000d05 ; undefined
     a60:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     a64:	490b390b 	.inst	0x490b390b ; undefined
     a68:	00053813 	.inst	0x00053813 ; undefined
     a6c:	000d0600 	.inst	0x000d0600 ; undefined
     a70:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     a74:	0b390b3b 	add	w27, w25, w25, uxtb #2
     a78:	05381349 	ext	z9.b, z9.b, z26.b, #196
     a7c:	01070000 	.inst	0x01070000 ; undefined
     a80:	01134901 	.inst	0x01134901 ; undefined
     a84:	08000013 	stxrb	w0, w19, [x0]
     a88:	13490021 	.inst	0x13490021 ; undefined
     a8c:	00000b2f 	udf	#2863
     a90:	0b002409 	add	w9, w0, w0, lsl #9
     a94:	030b3e0b 	.inst	0x030b3e0b ; undefined
     a98:	0a00000e 	and	w14, w0, w0
     a9c:	193f012e 	.inst	0x193f012e ; undefined
     aa0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     aa4:	0b390b3b 	add	w27, w25, w25, uxtb #2
     aa8:	01111927 	.inst	0x01111927 ; undefined
     aac:	18400712 	ldr	w18, 80b8c <__stack_size+0x7cb8c>
     ab0:	01194296 	.inst	0x01194296 ; undefined
     ab4:	0b000013 	add	w19, w0, w0
     ab8:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     abc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     ac0:	13490b39 	.inst	0x13490b39 ; undefined
     ac4:	00001802 	udf	#6146
     ac8:	0300050c 	.inst	0x0300050c ; undefined
     acc:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     ad0:	490b390b 	.inst	0x490b390b ; undefined
     ad4:	00180213 	.inst	0x00180213 ; undefined
     ad8:	000f0d00 	.inst	0x000f0d00 ; undefined
     adc:	13490b0b 	.inst	0x13490b0b ; undefined
     ae0:	2e0e0000 	ext	v0.8b, v0.8b, v14.8b, #0
     ae4:	03193f00 	.inst	0x03193f00 ; undefined
     ae8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     aec:	110b390b 	add	w11, w8, #0x2ce
     af0:	40071201 	.inst	0x40071201 ; undefined
     af4:	19429618 	.inst	0x19429618 ; undefined
     af8:	2e0f0000 	ext	v0.8b, v0.8b, v15.8b, #0
     afc:	3a0e0300 	adcs	w0, w24, w14
     b00:	390b3b0b 	strb	w11, [x24, #718]
     b04:	1119270b 	add	w11, w24, #0x649
     b08:	40071201 	.inst	0x40071201 ; undefined
     b0c:	19429718 	.inst	0x19429718 ; undefined
     b10:	01000000 	.inst	0x01000000 ; undefined
     b14:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     b18:	0e030b13 	.inst	0x0e030b13 ; undefined
     b1c:	17550e1b 	b	fffffffffd544388 <_sp+0xffffffff9c504388>
     b20:	17100111 	b	fffffffffc400f64 <_sp+0xffffffff9b3c0f64>
     b24:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
     b28:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     b2c:	000e030b 	.inst	0x000e030b ; undefined
     b30:	00160300 	.inst	0x00160300 ; undefined
     b34:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     b38:	0b390b3b 	add	w27, w25, w25, uxtb #2
     b3c:	00001349 	udf	#4937
     b40:	0b002404 	add	w4, w0, w0, lsl #9
     b44:	030b3e0b 	.inst	0x030b3e0b ; undefined
     b48:	05000008 	orr	z8.s, z8.s, #0x1
     b4c:	13490035 	.inst	0x13490035 ; undefined
     b50:	04060000 	.inst	0x04060000 ; undefined
     b54:	3e0e0301 	.inst	0x3e0e0301 ; undefined
     b58:	490b0b0b 	.inst	0x490b0b0b ; undefined
     b5c:	3b0b3a13 	.inst	0x3b0b3a13 ; undefined
     b60:	010b390b 	.inst	0x010b390b ; undefined
     b64:	07000013 	.inst	0x07000013 ; undefined
     b68:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
     b6c:	00000b1c 	udf	#2844
     b70:	03003408 	.inst	0x03003408 ; undefined
     b74:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     b78:	490b390b 	.inst	0x490b390b ; undefined
     b7c:	3c193f13 	str	b19, [x24, #-109]!
     b80:	09000019 	.inst	0x09000019 ; undefined
     b84:	13490101 	.inst	0x13490101 ; undefined
     b88:	00001301 	udf	#4865
     b8c:	4900210a 	.inst	0x4900210a ; undefined
     b90:	000b2f13 	.inst	0x000b2f13 ; undefined
     b94:	01130b00 	.inst	0x01130b00 ; undefined
     b98:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
     b9c:	0b39053b 	add	w27, w9, w25, uxtb #1
     ba0:	00001301 	udf	#4865
     ba4:	03000d0c 	.inst	0x03000d0c ; undefined
     ba8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     bac:	490b3905 	.inst	0x490b3905 ; undefined
     bb0:	000b3813 	.inst	0x000b3813 ; undefined
     bb4:	000d0d00 	.inst	0x000d0d00 ; undefined
     bb8:	0b3a0803 	add	w3, w0, w26, uxtb #2
     bbc:	0b39053b 	add	w27, w9, w25, uxtb #1
     bc0:	0b381349 	add	w9, w26, w24, uxtb #4
     bc4:	160e0000 	b	fffffffff8380bc4 <_sp+0xffffffff97340bc4>
     bc8:	3a0e0300 	adcs	w0, w24, w14
     bcc:	39053b0b 	strb	w11, [x24, #334]
     bd0:	0013490b 	.inst	0x0013490b ; undefined
     bd4:	01040f00 	.inst	0x01040f00 ; undefined
     bd8:	0b3e0e03 	add	w3, w16, w30, uxtb #3
     bdc:	13490b0b 	.inst	0x13490b0b ; undefined
     be0:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     be4:	13010b39 	sbfx	w25, w25, #1, #2
     be8:	34100000 	cbz	w0, 20be8 <__stack_size+0x1cbe8>
     bec:	3a134700 	.inst	0x3a134700 ; undefined
     bf0:	390b3b0b 	strb	w11, [x24, #718]
     bf4:	0018020b 	.inst	0x0018020b ; undefined
     bf8:	012e1100 	.inst	0x012e1100 ; undefined
     bfc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     c00:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     c04:	13490b39 	.inst	0x13490b39 ; undefined
     c08:	1301193c 	sbfx	w28, w9, #1, #6
     c0c:	18120000 	ldr	w0, 24c0c <__stack_size+0x20c0c>
     c10:	13000000 	sbfx	w0, w0, #0, #1
     c14:	193f012e 	.inst	0x193f012e ; undefined
     c18:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     c1c:	0b39053b 	add	w27, w9, w25, uxtb #1
     c20:	13491927 	.inst	0x13491927 ; undefined
     c24:	1301193c 	sbfx	w28, w9, #1, #6
     c28:	05140000 	mov	z0.b, p4/z, #0
     c2c:	00134900 	.inst	0x00134900 ; undefined
     c30:	000f1500 	.inst	0x000f1500 ; undefined
     c34:	13490b0b 	.inst	0x13490b0b ; undefined
     c38:	2e160000 	ext	v0.8b, v0.8b, v22.8b, #0
     c3c:	03193f00 	.inst	0x03193f00 ; undefined
     c40:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     c44:	270b390b 	.inst	0x270b390b ; undefined
     c48:	00193c19 	.inst	0x00193c19 ; undefined
     c4c:	012e1700 	.inst	0x012e1700 ; undefined
     c50:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     c54:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     c58:	19270b39 	.inst	0x19270b39 ; undefined
     c5c:	193c1349 	.inst	0x193c1349 ; undefined
     c60:	00001301 	udf	#4865
     c64:	49002618 	.inst	0x49002618 ; undefined
     c68:	19000013 	stlurb	w19, [x0]
     c6c:	193f012e 	.inst	0x193f012e ; undefined
     c70:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     c74:	0b390b3b 	add	w27, w25, w25, uxtb #2
     c78:	01111927 	.inst	0x01111927 ; undefined
     c7c:	18400712 	ldr	w18, 80d5c <__stack_size+0x7cd5c>
     c80:	01194296 	.inst	0x01194296 ; undefined
     c84:	1a000013 	adc	w19, w0, w0
     c88:	193f012e 	.inst	0x193f012e ; undefined
     c8c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     c90:	0b390b3b 	add	w27, w25, w25, uxtb #2
     c94:	193c1349 	.inst	0x193c1349 ; undefined
     c98:	2e1b0000 	ext	v0.8b, v0.8b, v27.8b, #0
     c9c:	03193f01 	.inst	0x03193f01 ; undefined
     ca0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     ca4:	270b390b 	.inst	0x270b390b ; undefined
     ca8:	11134919 	add	w25, w8, #0x4d2
     cac:	40071201 	.inst	0x40071201 ; undefined
     cb0:	19429618 	.inst	0x19429618 ; undefined
     cb4:	00001301 	udf	#4865
     cb8:	0300051c 	.inst	0x0300051c ; undefined
     cbc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     cc0:	490b390b 	.inst	0x490b390b ; undefined
     cc4:	00180213 	.inst	0x00180213 ; undefined
     cc8:	00051d00 	.inst	0x00051d00 ; undefined
     ccc:	0b3a0803 	add	w3, w0, w26, uxtb #2
     cd0:	0b390b3b 	add	w27, w25, w25, uxtb #2
     cd4:	18021349 	ldr	w9, 4f3c <__stack_size+0xf3c>
     cd8:	0f1e0000 	.inst	0x0f1e0000 ; undefined
     cdc:	000b0b00 	.inst	0x000b0b00 ; undefined
     ce0:	00341f00 	.inst	0x00341f00 ; NYI
     ce4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     ce8:	0b390b3b 	add	w27, w25, w25, uxtb #2
     cec:	18021349 	ldr	w9, 4f54 <__stack_size+0xf54>
     cf0:	2e200000 	uaddl	v0.8h, v0.8b, v0.8b
     cf4:	03193f00 	.inst	0x03193f00 ; undefined
     cf8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     cfc:	270b390b 	.inst	0x270b390b ; undefined
     d00:	12011119 	and	w25, w8, #0x8000000f
     d04:	97184007 	bl	fffffffffc610d20 <_sp+0xffffffff9b5d0d20>
     d08:	00001942 	udf	#6466
     d0c:	01110100 	.inst	0x01110100 ; undefined
     d10:	0b130e25 	add	w5, w17, w19, lsl #3
     d14:	0e1b0e03 	dup	v3.8b, w16
     d18:	01111755 	.inst	0x01111755 ; undefined
     d1c:	00001710 	udf	#5904
     d20:	0b002402 	add	w2, w0, w0, lsl #9
     d24:	030b3e0b 	.inst	0x030b3e0b ; undefined
     d28:	0300000e 	.inst	0x0300000e ; undefined
     d2c:	0b0b0024 	add	w4, w1, w11
     d30:	08030b3e 	stxrb	w3, w30, [x25]
     d34:	16040000 	b	fffffffff8100d34 <_sp+0xffffffff970c0d34>
     d38:	3a0e0300 	adcs	w0, w24, w14
     d3c:	390b3b0b 	strb	w11, [x24, #718]
     d40:	0013490b 	.inst	0x0013490b ; undefined
     d44:	002e0500 	.inst	0x002e0500 ; NYI
     d48:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     d4c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     d50:	19270b39 	.inst	0x19270b39 ; undefined
     d54:	07120111 	.inst	0x07120111 ; undefined
     d58:	42971840 	.inst	0x42971840 ; undefined
     d5c:	00000019 	udf	#25
     d60:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     d64:	030b130e 	.inst	0x030b130e ; undefined
     d68:	550e1b0e 	.inst	0x550e1b0e ; undefined
     d6c:	10011117 	adr	x23, 2f8c <__stack_size-0x1074>
     d70:	02000017 	.inst	0x02000017 ; undefined
     d74:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     d78:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     d7c:	13490b39 	.inst	0x13490b39 ; undefined
     d80:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
     d84:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     d88:	000e030b 	.inst	0x000e030b ; undefined
     d8c:	00240400 	.inst	0x00240400 ; NYI
     d90:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     d94:	00000803 	udf	#2051
     d98:	49003505 	.inst	0x49003505 ; undefined
     d9c:	06000013 	.inst	0x06000013 ; undefined
     da0:	0b3e0104 	add	w4, w8, w30, uxtb
     da4:	13490b0b 	.inst	0x13490b0b ; undefined
     da8:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     dac:	13010b39 	sbfx	w25, w25, #1, #2
     db0:	28070000 	stnp	w0, w0, [x0, #56]
     db4:	1c0e0300 	ldr	s0, 1ce14 <__stack_size+0x18e14>
     db8:	0800000b 	stxrb	w0, w11, [x0]
     dbc:	13490101 	.inst	0x13490101 ; undefined
     dc0:	00001301 	udf	#4865
     dc4:	49002109 	.inst	0x49002109 ; undefined
     dc8:	000b2f13 	.inst	0x000b2f13 ; undefined
     dcc:	01130a00 	.inst	0x01130a00 ; undefined
     dd0:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
     dd4:	0b39053b 	add	w27, w9, w25, uxtb #1
     dd8:	00001301 	udf	#4865
     ddc:	03000d0b 	.inst	0x03000d0b ; undefined
     de0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     de4:	490b3905 	.inst	0x490b3905 ; undefined
     de8:	000b3813 	.inst	0x000b3813 ; undefined
     dec:	000d0c00 	.inst	0x000d0c00 ; undefined
     df0:	0b3a0803 	add	w3, w0, w26, uxtb #2
     df4:	0b39053b 	add	w27, w9, w25, uxtb #1
     df8:	0b381349 	add	w9, w26, w24, uxtb #4
     dfc:	160d0000 	b	fffffffff8340dfc <_sp+0xffffffff97300dfc>
     e00:	3a0e0300 	adcs	w0, w24, w14
     e04:	39053b0b 	strb	w11, [x24, #334]
     e08:	0013490b 	.inst	0x0013490b ; undefined
     e0c:	01040e00 	.inst	0x01040e00 ; undefined
     e10:	0b3e0e03 	add	w3, w16, w30, uxtb #3
     e14:	13490b0b 	.inst	0x13490b0b ; undefined
     e18:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     e1c:	13010b39 	sbfx	w25, w25, #1, #2
     e20:	2e0f0000 	ext	v0.8b, v0.8b, v15.8b, #0
     e24:	03193f01 	.inst	0x03193f01 ; undefined
     e28:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     e2c:	270b390b 	.inst	0x270b390b ; undefined
     e30:	3c134919 	.inst	0x3c134919 ; undefined
     e34:	00130119 	.inst	0x00130119 ; undefined
     e38:	00051000 	.inst	0x00051000 ; undefined
     e3c:	00001349 	udf	#4937
     e40:	00001811 	udf	#6161
     e44:	000f1200 	.inst	0x000f1200 ; undefined
     e48:	13490b0b 	.inst	0x13490b0b ; undefined
     e4c:	26130000 	.inst	0x26130000 ; undefined
     e50:	00134900 	.inst	0x00134900 ; undefined
     e54:	012e1400 	.inst	0x012e1400 ; undefined
     e58:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     e5c:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     e60:	19270b39 	.inst	0x19270b39 ; undefined
     e64:	01111349 	.inst	0x01111349 ; undefined
     e68:	18400712 	ldr	w18, 80f48 <__stack_size+0x7cf48>
     e6c:	01194297 	.inst	0x01194297 ; undefined
     e70:	15000013 	b	4000ebc <__stack_size+0x3ffcebc>
     e74:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     e78:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     e7c:	13490b39 	.inst	0x13490b39 ; undefined
     e80:	00001802 	udf	#6146
     e84:	3f012e16 	.inst	0x3f012e16 ; undefined
     e88:	3a0e0319 	adcs	w25, w24, w14
     e8c:	39053b0b 	strb	w11, [x24, #334]
     e90:	4919270b 	.inst	0x4919270b ; undefined
     e94:	12011113 	and	w19, w8, #0x8000000f
     e98:	96184007 	bl	fffffffff8610eb4 <_sp+0xffffffff975d0eb4>
     e9c:	13011942 	sbfx	w2, w10, #1, #6
     ea0:	34170000 	cbz	w0, 2eea0 <__stack_size+0x2aea0>
     ea4:	3a0e0300 	adcs	w0, w24, w14
     ea8:	39053b0b 	strb	w11, [x24, #334]
     eac:	0213490b 	.inst	0x0213490b ; undefined
     eb0:	18000018 	ldr	w24, eb0 <__stack_size-0x3150>
     eb4:	08030034 	stxrb	w3, w20, [x1]
     eb8:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     ebc:	13490b39 	.inst	0x13490b39 ; undefined
     ec0:	00001802 	udf	#6146
     ec4:	3f012e19 	.inst	0x3f012e19 ; undefined
     ec8:	3a0e0319 	adcs	w25, w24, w14
     ecc:	39053b0b 	strb	w11, [x24, #334]
     ed0:	1119270b 	add	w11, w24, #0x649
     ed4:	40071201 	.inst	0x40071201 ; undefined
     ed8:	19429718 	.inst	0x19429718 ; undefined
     edc:	00001301 	udf	#4865
     ee0:	3f012e1a 	.inst	0x3f012e1a ; undefined
     ee4:	3a0e0319 	adcs	w25, w24, w14
     ee8:	39053b0b 	strb	w11, [x24, #334]
     eec:	1119270b 	add	w11, w24, #0x649
     ef0:	40071201 	.inst	0x40071201 ; undefined
     ef4:	19429618 	.inst	0x19429618 ; undefined
     ef8:	00001301 	udf	#4865
     efc:	3f012e1b 	.inst	0x3f012e1b ; undefined
     f00:	3a0e0319 	adcs	w25, w24, w14
     f04:	390b3b0b 	strb	w11, [x24, #718]
     f08:	1119270b 	add	w11, w24, #0x649
     f0c:	40071201 	.inst	0x40071201 ; undefined
     f10:	19429718 	.inst	0x19429718 ; undefined
     f14:	00001301 	udf	#4865
     f18:	0300051c 	.inst	0x0300051c ; undefined
     f1c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     f20:	490b390b 	.inst	0x490b390b ; undefined
     f24:	00180213 	.inst	0x00180213 ; undefined
     f28:	012e1d00 	.inst	0x012e1d00 ; undefined
     f2c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     f30:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     f34:	19270b39 	.inst	0x19270b39 ; undefined
     f38:	01111349 	.inst	0x01111349 ; undefined
     f3c:	18400712 	ldr	w18, 8101c <__stack_size+0x7d01c>
     f40:	01194296 	.inst	0x01194296 ; undefined
     f44:	1e000013 	.inst	0x1e000013 ; undefined
     f48:	193f012e 	.inst	0x193f012e ; undefined
     f4c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     f50:	0b390b3b 	add	w27, w25, w25, uxtb #2
     f54:	13491927 	.inst	0x13491927 ; undefined
     f58:	07120111 	.inst	0x07120111 ; undefined
     f5c:	42971840 	.inst	0x42971840 ; undefined
     f60:	00130119 	.inst	0x00130119 ; undefined
     f64:	00341f00 	.inst	0x00341f00 ; NYI
     f68:	0b3a0803 	add	w3, w0, w26, uxtb #2
     f6c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     f70:	18021349 	ldr	w9, 51d8 <__stack_size+0x11d8>
     f74:	05200000 	ext	z0.b, z0.b, z0.b, #0
     f78:	3a080300 	adcs	w0, w24, w8
     f7c:	390b3b0b 	strb	w11, [x24, #718]
     f80:	0213490b 	.inst	0x0213490b ; undefined
     f84:	21000018 	.inst	0x21000018 ; undefined
     f88:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     f8c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     f90:	19270b39 	.inst	0x19270b39 ; undefined
     f94:	01111349 	.inst	0x01111349 ; undefined
     f98:	18400712 	ldr	w18, 81078 <__stack_size+0x7d078>
     f9c:	01194297 	.inst	0x01194297 ; undefined
     fa0:	22000013 	.inst	0x22000013 ; undefined
     fa4:	0b0b000f 	add	w15, w0, w11
     fa8:	01000000 	.inst	0x01000000 ; undefined
     fac:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     fb0:	0e030b13 	.inst	0x0e030b13 ; undefined
     fb4:	17550e1b 	b	fffffffffd544820 <_sp+0xffffffff9c504820>
     fb8:	17100111 	b	fffffffffc4013fc <_sp+0xffffffff9b3c13fc>
     fbc:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
     fc0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     fc4:	000e030b 	.inst	0x000e030b ; undefined
     fc8:	00240300 	.inst	0x00240300 ; NYI
     fcc:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     fd0:	00000803 	udf	#2051
     fd4:	03001604 	.inst	0x03001604 ; undefined
     fd8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     fdc:	490b390b 	.inst	0x490b390b ; undefined
     fe0:	05000013 	orr	z19.s, z19.s, #0x1
     fe4:	08030016 	stxrb	w3, w22, [x0]
     fe8:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     fec:	13490b39 	.inst	0x13490b39 ; undefined
     ff0:	13060000 	sbfiz	w0, w0, #26, #1
     ff4:	0b0e0301 	add	w1, w24, w14
     ff8:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
     ffc:	010b390b 	.inst	0x010b390b ; undefined
    1000:	07000013 	.inst	0x07000013 ; undefined
    1004:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    1008:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    100c:	13490b39 	.inst	0x13490b39 ; undefined
    1010:	00000b38 	udf	#2872
    1014:	3f012e08 	.inst	0x3f012e08 ; undefined
    1018:	3a0e0319 	adcs	w25, w24, w14
    101c:	390b3b0b 	strb	w11, [x24, #718]
    1020:	3c13490b 	.inst	0x3c13490b ; undefined
    1024:	00130119 	.inst	0x00130119 ; undefined
    1028:	00180900 	.inst	0x00180900 ; undefined
    102c:	2e0a0000 	ext	v0.8b, v0.8b, v10.8b, #0
    1030:	03193f01 	.inst	0x03193f01 ; undefined
    1034:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1038:	270b390b 	.inst	0x270b390b ; undefined
    103c:	11134919 	add	w25, w8, #0x4d2
    1040:	40071201 	.inst	0x40071201 ; undefined
    1044:	19429718 	.inst	0x19429718 ; undefined
    1048:	00001301 	udf	#4865
    104c:	0300050b 	.inst	0x0300050b ; undefined
    1050:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1054:	490b390b 	.inst	0x490b390b ; undefined
    1058:	00180213 	.inst	0x00180213 ; undefined
    105c:	000f0c00 	.inst	0x000f0c00 ; undefined
    1060:	13490b0b 	.inst	0x13490b0b ; undefined
    1064:	2e0d0000 	ext	v0.8b, v0.8b, v13.8b, #0
    1068:	03193f01 	.inst	0x03193f01 ; undefined
    106c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1070:	270b390b 	.inst	0x270b390b ; undefined
    1074:	11134919 	add	w25, w8, #0x4d2
    1078:	40071201 	.inst	0x40071201 ; undefined
    107c:	19429618 	.inst	0x19429618 ; undefined
    1080:	00001301 	udf	#4865
    1084:	0300340e 	.inst	0x0300340e ; undefined
    1088:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    108c:	490b390b 	.inst	0x490b390b ; undefined
    1090:	00180213 	.inst	0x00180213 ; undefined
    1094:	00340f00 	.inst	0x00340f00 ; NYI
    1098:	0b3a0803 	add	w3, w0, w26, uxtb #2
    109c:	0b390b3b 	add	w27, w25, w25, uxtb #2
    10a0:	18021349 	ldr	w9, 5308 <__stack_size+0x1308>
    10a4:	2e100000 	ext	v0.8b, v0.8b, v16.8b, #0
    10a8:	03193f01 	.inst	0x03193f01 ; undefined
    10ac:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    10b0:	490b390b 	.inst	0x490b390b ; undefined
    10b4:	00193c13 	.inst	0x00193c13 ; undefined
    10b8:	00051100 	.inst	0x00051100 ; undefined
    10bc:	0b3a0803 	add	w3, w0, w26, uxtb #2
    10c0:	0b390b3b 	add	w27, w25, w25, uxtb #2
    10c4:	18021349 	ldr	w9, 532c <__stack_size+0x132c>
    10c8:	2e120000 	ext	v0.8b, v0.8b, v18.8b, #0
    10cc:	03193f01 	.inst	0x03193f01 ; undefined
    10d0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    10d4:	270b390b 	.inst	0x270b390b ; undefined
    10d8:	11134919 	add	w25, w8, #0x4d2
    10dc:	40071201 	.inst	0x40071201 ; undefined
    10e0:	19429618 	.inst	0x19429618 ; undefined
    10e4:	01000000 	.inst	0x01000000 ; undefined
    10e8:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    10ec:	0e030b13 	.inst	0x0e030b13 ; undefined
    10f0:	17550e1b 	b	fffffffffd54495c <_sp+0xffffffff9c50495c>
    10f4:	17100111 	b	fffffffffc401538 <_sp+0xffffffff9b3c1538>
    10f8:	16020000 	b	fffffffff80810f8 <_sp+0xffffffff970410f8>
    10fc:	3a0e0300 	adcs	w0, w24, w14
    1100:	390b3b0b 	strb	w11, [x24, #718]
    1104:	0013490b 	.inst	0x0013490b ; undefined
    1108:	00240300 	.inst	0x00240300 ; NYI
    110c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    1110:	00000e03 	udf	#3587
    1114:	0b002404 	add	w4, w0, w0, lsl #9
    1118:	030b3e0b 	.inst	0x030b3e0b ; undefined
    111c:	05000008 	orr	z8.s, z8.s, #0x1
    1120:	13490035 	.inst	0x13490035 ; undefined
    1124:	26060000 	.inst	0x26060000 ; undefined
    1128:	00134900 	.inst	0x00134900 ; undefined
    112c:	00160700 	.inst	0x00160700 ; undefined
    1130:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1134:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1138:	00001349 	udf	#4937
    113c:	03011308 	.inst	0x03011308 ; undefined
    1140:	3a0b0b0e 	.inst	0x3a0b0b0e ; undefined
    1144:	390b3b0b 	strb	w11, [x24, #718]
    1148:	0013010b 	.inst	0x0013010b ; undefined
    114c:	000d0900 	.inst	0x000d0900 ; undefined
    1150:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1154:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1158:	0b381349 	add	w9, w26, w24, uxtb #4
    115c:	040a0000 	smin	z0.b, p0/m, z0.b, z0.b
    1160:	0b0b3e01 	add	w1, w16, w11, lsl #15
    1164:	3a13490b 	.inst	0x3a13490b ; undefined
    1168:	390b3b0b 	strb	w11, [x24, #718]
    116c:	0013010b 	.inst	0x0013010b ; undefined
    1170:	00280b00 	.inst	0x00280b00 ; NYI
    1174:	0b1c0e03 	add	w3, w16, w28, lsl #3
    1178:	130c0000 	sbfiz	w0, w0, #20, #1
    117c:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
    1180:	390b3b0b 	strb	w11, [x24, #718]
    1184:	0013010b 	.inst	0x0013010b ; undefined
    1188:	000d0d00 	.inst	0x000d0d00 ; undefined
    118c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1190:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1194:	0b0b1349 	add	w9, w26, w11, lsl #4
    1198:	0b0c0b0d 	add	w13, w24, w12, lsl #2
    119c:	00000b38 	udf	#2872
    11a0:	0b01170e 	add	w14, w24, w1, lsl #5
    11a4:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    11a8:	010b390b 	.inst	0x010b390b ; undefined
    11ac:	0f000013 	.inst	0x0f000013 ; undefined
    11b0:	0803000d 	stxrb	w3, w13, [x0]
    11b4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    11b8:	13490b39 	.inst	0x13490b39 ; undefined
    11bc:	0d100000 	.inst	0x0d100000 ; undefined
    11c0:	3a080300 	adcs	w0, w24, w8
    11c4:	39053b0b 	strb	w11, [x24, #334]
    11c8:	0013490b 	.inst	0x0013490b ; undefined
    11cc:	00161100 	.inst	0x00161100 ; undefined
    11d0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    11d4:	0b39053b 	add	w27, w9, w25, uxtb #1
    11d8:	00001349 	udf	#4937
    11dc:	0b011312 	add	w18, w24, w1, lsl #4
    11e0:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    11e4:	010b3905 	.inst	0x010b3905 ; undefined
    11e8:	13000013 	sbfx	w19, w0, #0, #1
    11ec:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    11f0:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    11f4:	13490b39 	.inst	0x13490b39 ; undefined
    11f8:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    11fc:	0b380b0c 	add	w12, w24, w24, uxtb #2
    1200:	17140000 	b	fffffffffc501200 <_sp+0xffffffff9b4c1200>
    1204:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
    1208:	39053b0b 	strb	w11, [x24, #334]
    120c:	0013010b 	.inst	0x0013010b ; undefined
    1210:	000d1500 	.inst	0x000d1500 ; undefined
    1214:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1218:	0b39053b 	add	w27, w9, w25, uxtb #1
    121c:	0b381349 	add	w9, w26, w24, uxtb #4
    1220:	0d160000 	.inst	0x0d160000 ; undefined
    1224:	3a0e0300 	adcs	w0, w24, w14
    1228:	39053b0b 	strb	w11, [x24, #334]
    122c:	3813490b 	sttrb	w11, [x8, #-204]
    1230:	1700000b 	b	fffffffffc00125c <_sp+0xffffffff9afc125c>
    1234:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1238:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    123c:	13490b39 	.inst	0x13490b39 ; undefined
    1240:	193c193f 	.inst	0x193c193f ; undefined
    1244:	0f180000 	.inst	0x0f180000 ; undefined
    1248:	490b0b00 	.inst	0x490b0b00 ; undefined
    124c:	19000013 	stlurb	w19, [x0]
    1250:	13490101 	.inst	0x13490101 ; undefined
    1254:	00001301 	udf	#4865
    1258:	4900211a 	.inst	0x4900211a ; undefined
    125c:	000b2f13 	.inst	0x000b2f13 ; undefined
    1260:	00341b00 	.inst	0x00341b00 ; NYI
    1264:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1268:	0b39053b 	add	w27, w9, w25, uxtb #1
    126c:	193f1349 	.inst	0x193f1349 ; undefined
    1270:	0000193c 	udf	#6460
    1274:	4700341c 	.inst	0x4700341c ; undefined
    1278:	3b0b3a13 	.inst	0x3b0b3a13 ; undefined
    127c:	020b390b 	.inst	0x020b390b ; undefined
    1280:	1d000018 	.inst	0x1d000018 ; undefined
    1284:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1288:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    128c:	13490b39 	.inst	0x13490b39 ; undefined
    1290:	00001802 	udf	#6146
    1294:	3f012e1e 	.inst	0x3f012e1e ; undefined
    1298:	3a0e0319 	adcs	w25, w24, w14
    129c:	390b3b0b 	strb	w11, [x24, #718]
    12a0:	4919270b 	.inst	0x4919270b ; undefined
    12a4:	01193c13 	.inst	0x01193c13 ; undefined
    12a8:	1f000013 	fmadd	s19, s0, s0, s0
    12ac:	13490005 	.inst	0x13490005 ; undefined
    12b0:	0f200000 	.inst	0x0f200000 ; undefined
    12b4:	000b0b00 	.inst	0x000b0b00 ; undefined
    12b8:	00262100 	.inst	0x00262100 ; NYI
    12bc:	18220000 	ldr	w0, 452bc <__stack_size+0x412bc>
    12c0:	23000000 	.inst	0x23000000 ; undefined
    12c4:	193f012e 	.inst	0x193f012e ; undefined
    12c8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    12cc:	0b39053b 	add	w27, w9, w25, uxtb #1
    12d0:	13491927 	.inst	0x13491927 ; undefined
    12d4:	07120111 	.inst	0x07120111 ; undefined
    12d8:	42961840 	.inst	0x42961840 ; undefined
    12dc:	00130119 	.inst	0x00130119 ; undefined
    12e0:	00052400 	.inst	0x00052400 ; undefined
    12e4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    12e8:	0b39053b 	add	w27, w9, w25, uxtb #1
    12ec:	18021349 	ldr	w9, 5554 <__stack_size+0x1554>
    12f0:	34250000 	cbz	w0, 4b2f0 <__stack_size+0x472f0>
    12f4:	3a0e0300 	adcs	w0, w24, w14
    12f8:	39053b0b 	strb	w11, [x24, #334]
    12fc:	0213490b 	.inst	0x0213490b ; undefined
    1300:	26000018 	.inst	0x26000018 ; undefined
    1304:	08030034 	stxrb	w3, w20, [x1]
    1308:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    130c:	13490b39 	.inst	0x13490b39 ; undefined
    1310:	00001802 	udf	#6146
    1314:	03000527 	.inst	0x03000527 ; undefined
    1318:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    131c:	490b3905 	.inst	0x490b3905 ; undefined
    1320:	00180213 	.inst	0x00180213 ; undefined
    1324:	012e2800 	.inst	0x012e2800 ; undefined
    1328:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    132c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1330:	19270b39 	.inst	0x19270b39 ; undefined
    1334:	01111349 	.inst	0x01111349 ; undefined
    1338:	18400712 	ldr	w18, 81418 <__stack_size+0x7d418>
    133c:	01194296 	.inst	0x01194296 ; undefined
    1340:	29000013 	stp	w19, w0, [x0]
    1344:	08030005 	stxrb	w3, w5, [x0]
    1348:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    134c:	13490b39 	.inst	0x13490b39 ; undefined
    1350:	00001802 	udf	#6146
    1354:	0300342a 	.inst	0x0300342a ; undefined
    1358:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    135c:	490b390b 	.inst	0x490b390b ; undefined
    1360:	00180213 	.inst	0x00180213 ; undefined
    1364:	012e2b00 	.inst	0x012e2b00 ; undefined
    1368:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    136c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1370:	19270b39 	.inst	0x19270b39 ; undefined
    1374:	07120111 	.inst	0x07120111 ; undefined
    1378:	42961840 	.inst	0x42961840 ; undefined
    137c:	00130119 	.inst	0x00130119 ; undefined
    1380:	012e2c00 	.inst	0x012e2c00 ; undefined
    1384:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1388:	0b390b3b 	add	w27, w25, w25, uxtb #2
    138c:	01111927 	.inst	0x01111927 ; undefined
    1390:	18400712 	ldr	w18, 81470 <__stack_size+0x7d470>
    1394:	01194296 	.inst	0x01194296 ; undefined
    1398:	2d000013 	stp	s19, s0, [x0]
    139c:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
    13a0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    13a4:	13490b39 	.inst	0x13490b39 ; undefined
    13a8:	00001802 	udf	#6146
    13ac:	3f012e2e 	.inst	0x3f012e2e ; undefined
    13b0:	3a0e0319 	adcs	w25, w24, w14
    13b4:	390b3b0b 	strb	w11, [x24, #718]
    13b8:	1119270b 	add	w11, w24, #0x649
    13bc:	40071201 	.inst	0x40071201 ; undefined
    13c0:	19429718 	.inst	0x19429718 ; undefined
    13c4:	00001301 	udf	#4865
    13c8:	3f012e2f 	.inst	0x3f012e2f ; undefined
    13cc:	3a0e0319 	adcs	w25, w24, w14
    13d0:	390b3b0b 	strb	w11, [x24, #718]
    13d4:	4919270b 	.inst	0x4919270b ; undefined
    13d8:	12011113 	and	w19, w8, #0x8000000f
    13dc:	97184007 	bl	fffffffffc6113f8 <_sp+0xffffffff9b5d13f8>
    13e0:	00001942 	udf	#6466
    13e4:	01110100 	.inst	0x01110100 ; undefined
    13e8:	0b130e25 	add	w5, w17, w19, lsl #3
    13ec:	0e1b0e03 	dup	v3.8b, w16
    13f0:	01111755 	.inst	0x01111755 ; undefined
    13f4:	00001710 	udf	#5904
    13f8:	0b002402 	add	w2, w0, w0, lsl #9
    13fc:	030b3e0b 	.inst	0x030b3e0b ; undefined
    1400:	0300000e 	.inst	0x0300000e ; undefined
    1404:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    1408:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    140c:	13490b39 	.inst	0x13490b39 ; undefined
    1410:	24040000 	cmphs	p0.b, p0/z, z0.b, z4.b
    1414:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1418:	0008030b 	.inst	0x0008030b ; undefined
    141c:	00350500 	.inst	0x00350500 ; NYI
    1420:	00001349 	udf	#4937
    1424:	03001606 	.inst	0x03001606 ; undefined
    1428:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    142c:	490b390b 	.inst	0x490b390b ; undefined
    1430:	07000013 	.inst	0x07000013 ; undefined
    1434:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
    1438:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
    143c:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1440:	00001301 	udf	#4865
    1444:	03000d08 	.inst	0x03000d08 ; undefined
    1448:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    144c:	490b390b 	.inst	0x490b390b ; undefined
    1450:	000b3813 	.inst	0x000b3813 ; undefined
    1454:	00260900 	.inst	0x00260900 ; NYI
    1458:	00001349 	udf	#4937
    145c:	3e01040a 	.inst	0x3e01040a ; undefined
    1460:	490b0b0b 	.inst	0x490b0b0b ; undefined
    1464:	3b0b3a13 	.inst	0x3b0b3a13 ; undefined
    1468:	010b390b 	.inst	0x010b390b ; undefined
    146c:	0b000013 	add	w19, w0, w0
    1470:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
    1474:	00000b1c 	udf	#2844
    1478:	0b01130c 	add	w12, w24, w1, lsl #4
    147c:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1480:	010b390b 	.inst	0x010b390b ; undefined
    1484:	0d000013 	st1	{v19.b}[0], [x0]
    1488:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    148c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1490:	13490b39 	.inst	0x13490b39 ; undefined
    1494:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    1498:	0b380b0c 	add	w12, w24, w24, uxtb #2
    149c:	170e0000 	b	fffffffffc38149c <_sp+0xffffffff9b34149c>
    14a0:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
    14a4:	390b3b0b 	strb	w11, [x24, #718]
    14a8:	0013010b 	.inst	0x0013010b ; undefined
    14ac:	000d0f00 	.inst	0x000d0f00 ; undefined
    14b0:	0b3a0803 	add	w3, w0, w26, uxtb #2
    14b4:	0b390b3b 	add	w27, w25, w25, uxtb #2
    14b8:	00001349 	udf	#4937
    14bc:	03000d10 	.inst	0x03000d10 ; undefined
    14c0:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    14c4:	490b3905 	.inst	0x490b3905 ; undefined
    14c8:	11000013 	add	w19, w0, #0x0
    14cc:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    14d0:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    14d4:	13490b39 	.inst	0x13490b39 ; undefined
    14d8:	13120000 	sbfiz	w0, w0, #14, #1
    14dc:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
    14e0:	39053b0b 	strb	w11, [x24, #334]
    14e4:	0013010b 	.inst	0x0013010b ; undefined
    14e8:	000d1300 	.inst	0x000d1300 ; undefined
    14ec:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    14f0:	0b39053b 	add	w27, w9, w25, uxtb #1
    14f4:	0b0b1349 	add	w9, w26, w11, lsl #4
    14f8:	0b0c0b0d 	add	w13, w24, w12, lsl #2
    14fc:	00000b38 	udf	#2872
    1500:	0b011714 	add	w20, w24, w1, lsl #5
    1504:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1508:	010b3905 	.inst	0x010b3905 ; undefined
    150c:	15000013 	b	4001558 <__stack_size+0x3ffd558>
    1510:	0803000d 	stxrb	w3, w13, [x0]
    1514:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    1518:	13490b39 	.inst	0x13490b39 ; undefined
    151c:	00000b38 	udf	#2872
    1520:	03000d16 	.inst	0x03000d16 ; undefined
    1524:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1528:	490b3905 	.inst	0x490b3905 ; undefined
    152c:	000b3813 	.inst	0x000b3813 ; undefined
    1530:	00341700 	.inst	0x00341700 ; NYI
    1534:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1538:	0b39053b 	add	w27, w9, w25, uxtb #1
    153c:	193f1349 	.inst	0x193f1349 ; undefined
    1540:	0000193c 	udf	#6460
    1544:	0b000f18 	add	w24, w24, w0, lsl #3
    1548:	0013490b 	.inst	0x0013490b ; undefined
    154c:	01011900 	.inst	0x01011900 ; undefined
    1550:	13011349 	sbfx	w9, w26, #1, #4
    1554:	211a0000 	.inst	0x211a0000 ; undefined
    1558:	2f134900 	.inst	0x2f134900 ; undefined
    155c:	1b00000b 	madd	w11, w0, w0, w0
    1560:	08030034 	stxrb	w3, w20, [x1]
    1564:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1568:	13490b39 	.inst	0x13490b39 ; undefined
    156c:	00001802 	udf	#6146
    1570:	0300341c 	.inst	0x0300341c ; undefined
    1574:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1578:	490b390b 	.inst	0x490b390b ; undefined
    157c:	00180213 	.inst	0x00180213 ; undefined
    1580:	012e1d00 	.inst	0x012e1d00 ; undefined
    1584:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1588:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    158c:	19270b39 	.inst	0x19270b39 ; undefined
    1590:	193c1349 	.inst	0x193c1349 ; undefined
    1594:	00001301 	udf	#4865
    1598:	4900051e 	.inst	0x4900051e ; undefined
    159c:	1f000013 	fmadd	s19, s0, s0, s0
    15a0:	193f012e 	.inst	0x193f012e ; undefined
    15a4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    15a8:	0b390b3b 	add	w27, w25, w25, uxtb #2
    15ac:	13491927 	.inst	0x13491927 ; undefined
    15b0:	1301193c 	sbfx	w28, w9, #1, #6
    15b4:	18200000 	ldr	w0, 415b4 <__stack_size+0x3d5b4>
    15b8:	21000000 	.inst	0x21000000 ; undefined
    15bc:	193f012e 	.inst	0x193f012e ; undefined
    15c0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    15c4:	0b390b3b 	add	w27, w25, w25, uxtb #2
    15c8:	193c1927 	.inst	0x193c1927 ; undefined
    15cc:	00001301 	udf	#4865
    15d0:	3f012e22 	.inst	0x3f012e22 ; undefined
    15d4:	3a0e0319 	adcs	w25, w24, w14
    15d8:	39053b0b 	strb	w11, [x24, #334]
    15dc:	4919270b 	.inst	0x4919270b ; undefined
    15e0:	12011113 	and	w19, w8, #0x8000000f
    15e4:	96184007 	bl	fffffffff8611600 <_sp+0xffffffff975d1600>
    15e8:	13011942 	sbfx	w2, w10, #1, #6
    15ec:	05230000 	ext	z0.b, z0.b, z0.b, #24
    15f0:	3a0e0300 	adcs	w0, w24, w14
    15f4:	39053b0b 	strb	w11, [x24, #334]
    15f8:	0213490b 	.inst	0x0213490b ; undefined
    15fc:	24000018 	cmphi	p8.b, p0/z, z0.b, z0.b
    1600:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1604:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    1608:	13490b39 	.inst	0x13490b39 ; undefined
    160c:	00001802 	udf	#6146
    1610:	03003425 	.inst	0x03003425 ; undefined
    1614:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1618:	490b3905 	.inst	0x490b3905 ; undefined
    161c:	00180213 	.inst	0x00180213 ; undefined
    1620:	000a2600 	.inst	0x000a2600 ; undefined
    1624:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1628:	0b39053b 	add	w27, w9, w25, uxtb #1
    162c:	00000111 	udf	#273
    1630:	3f012e27 	.inst	0x3f012e27 ; undefined
    1634:	3a0e0319 	adcs	w25, w24, w14
    1638:	390b3b0b 	strb	w11, [x24, #718]
    163c:	1113490b 	add	w11, w8, #0x4d2
    1640:	40071201 	.inst	0x40071201 ; undefined
    1644:	19429618 	.inst	0x19429618 ; undefined
    1648:	00001301 	udf	#4865
    164c:	3f012e28 	.inst	0x3f012e28 ; undefined
    1650:	3a0e0319 	adcs	w25, w24, w14
    1654:	390b3b0b 	strb	w11, [x24, #718]
    1658:	1113490b 	add	w11, w8, #0x4d2
    165c:	40071201 	.inst	0x40071201 ; undefined
    1660:	19429618 	.inst	0x19429618 ; undefined
    1664:	01000000 	.inst	0x01000000 ; undefined
    1668:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    166c:	0e030b13 	.inst	0x0e030b13 ; undefined
    1670:	17550e1b 	b	fffffffffd544edc <_sp+0xffffffff9c504edc>
    1674:	17100111 	b	fffffffffc401ab8 <_sp+0xffffffff9b3c1ab8>
    1678:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
    167c:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1680:	000e030b 	.inst	0x000e030b ; undefined
    1684:	00240300 	.inst	0x00240300 ; NYI
    1688:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    168c:	00000803 	udf	#2051
    1690:	03001604 	.inst	0x03001604 ; undefined
    1694:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1698:	490b390b 	.inst	0x490b390b ; undefined
    169c:	05000013 	orr	z19.s, z19.s, #0x1
    16a0:	193f012e 	.inst	0x193f012e ; undefined
    16a4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    16a8:	0b390b3b 	add	w27, w25, w25, uxtb #2
    16ac:	193c1349 	.inst	0x193c1349 ; undefined
    16b0:	00001301 	udf	#4865
    16b4:	00001806 	udf	#6150
    16b8:	012e0700 	.inst	0x012e0700 ; undefined
    16bc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    16c0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    16c4:	13490b39 	.inst	0x13490b39 ; undefined
    16c8:	07120111 	.inst	0x07120111 ; undefined
    16cc:	42961840 	.inst	0x42961840 ; undefined
    16d0:	08000019 	stxrb	w0, w25, [x0]
    16d4:	193f012e 	.inst	0x193f012e ; undefined
    16d8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    16dc:	0b390b3b 	add	w27, w25, w25, uxtb #2
    16e0:	193c1349 	.inst	0x193c1349 ; undefined
    16e4:	01000000 	.inst	0x01000000 ; undefined
    16e8:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    16ec:	0e030b13 	.inst	0x0e030b13 ; undefined
    16f0:	17550e1b 	b	fffffffffd544f5c <_sp+0xffffffff9c504f5c>
    16f4:	17100111 	b	fffffffffc401b38 <_sp+0xffffffff9b3c1b38>
    16f8:	16020000 	b	fffffffff80816f8 <_sp+0xffffffff970416f8>
    16fc:	3a0e0300 	adcs	w0, w24, w14
    1700:	390b3b0b 	strb	w11, [x24, #718]
    1704:	0013490b 	.inst	0x0013490b ; undefined
    1708:	00240300 	.inst	0x00240300 ; NYI
    170c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    1710:	00000e03 	udf	#3587
    1714:	0b002404 	add	w4, w0, w0, lsl #9
    1718:	030b3e0b 	.inst	0x030b3e0b ; undefined
    171c:	05000008 	orr	z8.s, z8.s, #0x1
    1720:	13490035 	.inst	0x13490035 ; undefined
    1724:	26060000 	.inst	0x26060000 ; undefined
    1728:	00134900 	.inst	0x00134900 ; undefined
    172c:	00160700 	.inst	0x00160700 ; undefined
    1730:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1734:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1738:	00001349 	udf	#4937
    173c:	3e010408 	.inst	0x3e010408 ; undefined
    1740:	490b0b0b 	.inst	0x490b0b0b ; undefined
    1744:	3b0b3a13 	.inst	0x3b0b3a13 ; undefined
    1748:	010b390b 	.inst	0x010b390b ; undefined
    174c:	09000013 	.inst	0x09000013 ; undefined
    1750:	0e030028 	tbl	v8.8b, {v1.16b}, v3.8b
    1754:	00000b1c 	udf	#2844
    1758:	0b01130a 	add	w10, w24, w1, lsl #4
    175c:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1760:	010b390b 	.inst	0x010b390b ; undefined
    1764:	0b000013 	add	w19, w0, w0
    1768:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    176c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1770:	13490b39 	.inst	0x13490b39 ; undefined
    1774:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    1778:	0b380b0c 	add	w12, w24, w24, uxtb #2
    177c:	170c0000 	b	fffffffffc30177c <_sp+0xffffffff9b2c177c>
    1780:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
    1784:	390b3b0b 	strb	w11, [x24, #718]
    1788:	0013010b 	.inst	0x0013010b ; undefined
    178c:	000d0d00 	.inst	0x000d0d00 ; undefined
    1790:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1794:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1798:	00001349 	udf	#4937
    179c:	03000d0e 	.inst	0x03000d0e ; undefined
    17a0:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    17a4:	490b3905 	.inst	0x490b3905 ; undefined
    17a8:	0f000013 	.inst	0x0f000013 ; undefined
    17ac:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
    17b0:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    17b4:	13490b39 	.inst	0x13490b39 ; undefined
    17b8:	13100000 	sbfiz	w0, w0, #16, #1
    17bc:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
    17c0:	39053b0b 	strb	w11, [x24, #334]
    17c4:	0013010b 	.inst	0x0013010b ; undefined
    17c8:	000d1100 	.inst	0x000d1100 ; undefined
    17cc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    17d0:	0b39053b 	add	w27, w9, w25, uxtb #1
    17d4:	0b0b1349 	add	w9, w26, w11, lsl #4
    17d8:	0b0c0b0d 	add	w13, w24, w12, lsl #2
    17dc:	00000b38 	udf	#2872
    17e0:	0b011712 	add	w18, w24, w1, lsl #5
    17e4:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    17e8:	010b3905 	.inst	0x010b3905 ; undefined
    17ec:	13000013 	sbfx	w19, w0, #0, #1
    17f0:	0803000d 	stxrb	w3, w13, [x0]
    17f4:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    17f8:	13490b39 	.inst	0x13490b39 ; undefined
    17fc:	00000b38 	udf	#2872
    1800:	03000d14 	.inst	0x03000d14 ; undefined
    1804:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1808:	490b3905 	.inst	0x490b3905 ; undefined
    180c:	000b3813 	.inst	0x000b3813 ; undefined
    1810:	00341500 	.inst	0x00341500 ; NYI
    1814:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1818:	0b39053b 	add	w27, w9, w25, uxtb #1
    181c:	193f1349 	.inst	0x193f1349 ; undefined
    1820:	0000193c 	udf	#6460
    1824:	0b000f16 	add	w22, w24, w0, lsl #3
    1828:	0013490b 	.inst	0x0013490b ; undefined
    182c:	01131700 	.inst	0x01131700 ; undefined
    1830:	0b3a050b 	add	w11, w8, w26, uxtb #1
    1834:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1838:	00001301 	udf	#4865
    183c:	03000d18 	.inst	0x03000d18 ; undefined
    1840:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1844:	490b390b 	.inst	0x490b390b ; undefined
    1848:	000b3813 	.inst	0x000b3813 ; undefined
    184c:	000d1900 	.inst	0x000d1900 ; undefined
    1850:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1854:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1858:	0b381349 	add	w9, w26, w24, uxtb #4
    185c:	011a0000 	.inst	0x011a0000 ; undefined
    1860:	01134901 	.inst	0x01134901 ; undefined
    1864:	1b000013 	madd	w19, w0, w0, w0
    1868:	13490021 	.inst	0x13490021 ; undefined
    186c:	0000052f 	udf	#1327
    1870:	0300341c 	.inst	0x0300341c ; undefined
    1874:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1878:	490b390b 	.inst	0x490b390b ; undefined
    187c:	00180213 	.inst	0x00180213 ; undefined
    1880:	00341d00 	.inst	0x00341d00 ; NYI
    1884:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1888:	0b390b3b 	add	w27, w25, w25, uxtb #2
    188c:	18021349 	ldr	w9, 5af4 <__stack_size+0x1af4>
    1890:	2e1e0000 	ext	v0.8b, v0.8b, v30.8b, #0
    1894:	03193f01 	.inst	0x03193f01 ; undefined
    1898:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    189c:	270b390b 	.inst	0x270b390b ; undefined
    18a0:	3c134919 	.inst	0x3c134919 ; undefined
    18a4:	00130119 	.inst	0x00130119 ; undefined
    18a8:	00051f00 	.inst	0x00051f00 ; undefined
    18ac:	00001349 	udf	#4937
    18b0:	3f002e20 	.inst	0x3f002e20 ; undefined
    18b4:	3a0e0319 	adcs	w25, w24, w14
    18b8:	390b3b0b 	strb	w11, [x24, #718]
    18bc:	4919270b 	.inst	0x4919270b ; undefined
    18c0:	00193c13 	.inst	0x00193c13 ; undefined
    18c4:	000f2100 	.inst	0x000f2100 ; undefined
    18c8:	00000b0b 	udf	#2827
    18cc:	3f012e22 	.inst	0x3f012e22 ; undefined
    18d0:	3a0e0319 	adcs	w25, w24, w14
    18d4:	39053b0b 	strb	w11, [x24, #334]
    18d8:	4919270b 	.inst	0x4919270b ; undefined
    18dc:	01193c13 	.inst	0x01193c13 ; undefined
    18e0:	23000013 	.inst	0x23000013 ; undefined
    18e4:	00000018 	udf	#24
    18e8:	3f012e24 	.inst	0x3f012e24 ; undefined
    18ec:	3a0e0319 	adcs	w25, w24, w14
    18f0:	390b3b0b 	strb	w11, [x24, #718]
    18f4:	3c19270b 	str	b11, [x24], #-110
    18f8:	00130119 	.inst	0x00130119 ; undefined
    18fc:	012e2500 	.inst	0x012e2500 ; undefined
    1900:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    1904:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    1908:	19270b39 	.inst	0x19270b39 ; undefined
    190c:	01111349 	.inst	0x01111349 ; undefined
    1910:	18400712 	ldr	w18, 819f0 <__stack_size+0x7d9f0>
    1914:	01194296 	.inst	0x01194296 ; undefined
    1918:	26000013 	.inst	0x26000013 ; undefined
    191c:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1920:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    1924:	13490b39 	.inst	0x13490b39 ; undefined
    1928:	34270000 	cbz	w0, 4f928 <__stack_size+0x4b928>
    192c:	3a0e0300 	adcs	w0, w24, w14
    1930:	39053b0b 	strb	w11, [x24, #334]
    1934:	0213490b 	.inst	0x0213490b ; undefined
    1938:	28000018 	stnp	w24, w0, [x0]
    193c:	13490021 	.inst	0x13490021 ; undefined
    1940:	00000b2f 	udf	#2863
    1944:	3f012e29 	.inst	0x3f012e29 ; undefined
    1948:	3a0e0319 	adcs	w25, w24, w14
    194c:	390b3b0b 	strb	w11, [x24, #718]
    1950:	1113490b 	add	w11, w8, #0x4d2
    1954:	40071201 	.inst	0x40071201 ; undefined
    1958:	19429618 	.inst	0x19429618 ; undefined
    195c:	00001301 	udf	#4865
    1960:	0300342a 	.inst	0x0300342a ; undefined
    1964:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1968:	490b390b 	.inst	0x490b390b ; undefined
    196c:	2b000013 	adds	w19, w0, w0
    1970:	0111010b 	.inst	0x0111010b ; undefined
    1974:	00000712 	udf	#1810
    1978:	3f012e2c 	.inst	0x3f012e2c ; undefined
    197c:	3a0e0319 	adcs	w25, w24, w14
    1980:	390b3b0b 	strb	w11, [x24, #718]
    1984:	4919270b 	.inst	0x4919270b ; undefined
    1988:	12011113 	and	w19, w8, #0x8000000f
    198c:	96184007 	bl	fffffffff86119a8 <_sp+0xffffffff975d19a8>
    1990:	13011942 	sbfx	w2, w10, #1, #6
    1994:	052d0000 	ext	z0.b, z0.b, z0.b, #104
    1998:	3a0e0300 	adcs	w0, w24, w14
    199c:	390b3b0b 	strb	w11, [x24, #718]
    19a0:	0213490b 	.inst	0x0213490b ; undefined
    19a4:	2e000018 	ext	v24.8b, v0.8b, v0.8b, #0
    19a8:	193f012e 	.inst	0x193f012e ; undefined
    19ac:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    19b0:	0b390b3b 	add	w27, w25, w25, uxtb #2
    19b4:	13491927 	.inst	0x13491927 ; undefined
    19b8:	07120111 	.inst	0x07120111 ; undefined
    19bc:	42961840 	.inst	0x42961840 ; undefined
    19c0:	00000019 	udf	#25

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
{
   0:	0000002c 	udf	#44
   4:	00000002 	udf	#2
   8:	00080000 	.inst	0x00080000 ; undefined
   c:	00000000 	udf	#0
	panic();
  10:	61000950 	.inst	0x61000950 ; undefined
}
  14:	00000000 	udf	#0
  18:	00000010 	udf	#16
	...
	return 0;
  30:	0000002c 	udf	#44
}
  34:	00270002 	.inst	0x00270002 ; NYI
  38:	00080000 	.inst	0x00080000 ; undefined
    __delay(delay_cnt);
  3c:	00000000 	udf	#0
  40:	61000960 	.inst	0x61000960 ; undefined
}
  44:	00000000 	udf	#0
  48:	00000040 	udf	#64
	...
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
  60:	0000002c 	udf	#44
  64:	004e0002 	.inst	0x004e0002 ; undefined
  68:	00080000 	.inst	0x00080000 ; undefined
  6c:	00000000 	udf	#0
    if(Mtimer_IsTimerOut(&mtimer)){
  70:	61000800 	.inst	0x61000800 ; undefined
  74:	00000000 	udf	#0
  78:	00000150 	udf	#336
	...
        return MMC_XFER_TIMEOUT;
  90:	0000002c 	udf	#44
        if(r.bit.xfer_complete == 1){
  94:	00760002 	.inst	0x00760002 ; undefined
  98:	00080000 	.inst	0x00080000 ; undefined
        r.bit.dma_interrupt = 0x1;
  9c:	00000000 	udf	#0
  a0:	61001000 	.inst	0x61001000 ; undefined
  a4:	00000000 	udf	#0
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
  a8:	00000510 	udf	#1296
	...
  c0:	0000006c 	udf	#108
        return MMC_SUCCESS;
  c4:	009e0002 	.inst	0x009e0002 ; undefined
}
  c8:	00080000 	.inst	0x00080000 ; undefined
  cc:	00000000 	udf	#0
            break;
  d0:	61001510 	.inst	0x61001510 ; undefined
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
  d4:	00000000 	udf	#0
  d8:	00000024 	udf	#36
  dc:	00000000 	udf	#0
            retval = Uart_event_modem;
  e0:	61001558 	.inst	0x61001558 ; undefined
            break;
  e4:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
  e8:	00000020 	udf	#32
  ec:	00000000 	udf	#0
  f0:	61001578 	.inst	0x61001578 ; undefined
        	retval =Uart_event_thre;
  f4:	00000000 	udf	#0
  f8:	0000001c 	udf	#28
        	break;
  fc:	00000000 	udf	#0
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
 100:	61001594 	.inst	0x61001594 ; undefined
 104:	00000000 	udf	#0
 108:	00000018 	udf	#24
        	retval = Uart_event_timeout;
 10c:	00000000 	udf	#0
 110:	610015ac 	.inst	0x610015ac ; undefined
        	break;
 114:	00000000 	udf	#0
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
 118:	0000004c 	udf	#76
	...
        	printf("Overrun/parity/ framing errors or break interrupt");
 130:	0000027c 	udf	#636
 134:	02370002 	.inst	0x02370002 ; undefined
 138:	00080000 	.inst	0x00080000 ; undefined
        	retval = Receiver_line_status;
 13c:	00000000 	udf	#0
 140:	610015f8 	.inst	0x610015f8 ; undefined
            break;
 144:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
 148:	00000028 	udf	#40
 14c:	00000000 	udf	#0
 150:	61001620 	.inst	0x61001620 ; undefined
        	retval = Uart_event_busy;
 154:	00000000 	udf	#0
 158:	00000024 	udf	#36
            break;
 15c:	00000000 	udf	#0
            retval = 0;
 160:	61001644 	.inst	0x61001644 ; undefined
            break;
 164:	00000000 	udf	#0
    return retval;
 168:	00000028 	udf	#40
	...
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
 178:	00000018 	udf	#24
 17c:	00000000 	udf	#0
 180:	6100166c 	.inst	0x6100166c ; undefined
 184:	00000000 	udf	#0
 188:	00000028 	udf	#40
 18c:	00000000 	udf	#0
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
 190:	61001694 	.inst	0x61001694 ; undefined
 194:	00000000 	udf	#0
 198:	00000018 	udf	#24
 19c:	00000000 	udf	#0
 1a0:	610016ac 	.inst	0x610016ac ; undefined
 1a4:	00000000 	udf	#0
 1a8:	00000028 	udf	#40
 1ac:	00000000 	udf	#0
 1b0:	610016d4 	.inst	0x610016d4 ; undefined
 1b4:	00000000 	udf	#0
 1b8:	00000024 	udf	#36
 1bc:	00000000 	udf	#0
 1c0:	61001534 	.inst	0x61001534 ; undefined
		writel_relaxed(0, GICD_CTLR);
 1c4:	00000000 	udf	#0
 1c8:	00000024 	udf	#36
 1cc:	00000000 	udf	#0
		gic_dist_wait();
 1d0:	610016f8 	.inst	0x610016f8 ; undefined
		if (int_group == GROUP_1_NONSECURE) {
 1d4:	00000000 	udf	#0
 1d8:	00000024 	udf	#36
 1dc:	00000000 	udf	#0
			gicd_igroup  |= (0x01 << int_id);
 1e0:	6100171c 	.inst	0x6100171c ; undefined
 1e4:	00000000 	udf	#0
 1e8:	00000020 	udf	#32
 1ec:	00000000 	udf	#0
 1f0:	6100173c 	.inst	0x6100173c ; undefined
 1f4:	00000000 	udf	#0
 1f8:	0000000c 	udf	#12
	...
			gicd_igrpmod &= (~(0x01 << int_id));
 208:	00000098 	udf	#152
	...
 218:	00000030 	udf	#48
	...
		} else if (int_group == GROUP_1_SECURE) {
 228:	00000030 	udf	#48
			gicd_igroup  &= (~(0x01 << int_id));
 22c:	00000000 	udf	#0
 230:	61001748 	.inst	0x61001748 ; undefined
 234:	00000000 	udf	#0
 238:	00000084 	udf	#132
 23c:	00000000 	udf	#0
 240:	610017cc 	.inst	0x610017cc ; undefined
 244:	00000000 	udf	#0
 248:	0000001c 	udf	#28
			gicd_igrpmod |= (0x01 << int_id);
 24c:	00000000 	udf	#0
 250:	610017e8 	.inst	0x610017e8 ; undefined
 254:	00000000 	udf	#0
 258:	0000001c 	udf	#28
 25c:	00000000 	udf	#0
 260:	61001804 	.inst	0x61001804 ; undefined
 264:	00000000 	udf	#0
 268:	00000028 	udf	#40
		} else if(int_group == GROUP_0) {
 26c:	00000000 	udf	#0
 270:	6100182c 	.inst	0x6100182c ; undefined
 274:	00000000 	udf	#0
			gicd_igroup  &= (~(0x01 << int_id));
 278:	0000034c 	udf	#844
 27c:	00000000 	udf	#0
 280:	61001b78 	.inst	0x61001b78 ; undefined
 284:	00000000 	udf	#0
 288:	0000011c 	udf	#284
 28c:	00000000 	udf	#0
 290:	61001c94 	.inst	0x61001c94 ; undefined
 294:	00000000 	udf	#0
			gicd_igrpmod &= (0x01 << int_id);
 298:	00000134 	udf	#308
 29c:	00000000 	udf	#0
 2a0:	61001dc8 	.inst	0x61001dc8 ; undefined
 2a4:	00000000 	udf	#0
 2a8:	00000060 	udf	#96
	...
		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
 2b8:	00000040 	udf	#64
 2bc:	00000000 	udf	#0
 2c0:	61001e28 	.inst	0x61001e28 ; undefined
 2c4:	00000000 	udf	#0
 2c8:	00000040 	udf	#64
 2cc:	00000000 	udf	#0
 2d0:	61001e68 	.inst	0x61001e68 ; undefined
 2d4:	00000000 	udf	#0
 2d8:	00000040 	udf	#64
 2dc:	00000000 	udf	#0
 2e0:	61001ea8 	.inst	0x61001ea8 ; undefined
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
 2e4:	00000000 	udf	#0
 2e8:	0000005c 	udf	#92
 2ec:	00000000 	udf	#0
 2f0:	61001f04 	.inst	0x61001f04 ; undefined
 2f4:	00000000 	udf	#0
 2f8:	00000028 	udf	#40
	...
 308:	00000064 	udf	#100
	...
}
 318:	0000004c 	udf	#76
	...
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
 328:	0000004c 	udf	#76
 32c:	00000000 	udf	#0
 330:	61001f2c 	.inst	0x61001f2c ; undefined
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
 334:	00000000 	udf	#0
 338:	000000e0 	udf	#224
 33c:	00000000 	udf	#0
 340:	6100200c 	.inst	0x6100200c ; undefined
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
 344:	00000000 	udf	#0
 348:	00000058 	udf	#88
 34c:	00000000 	udf	#0
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
 350:	61002064 	.inst	0x61002064 ; undefined
 354:	00000000 	udf	#0
 358:	000000a4 	udf	#164
	...
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
 368:	0000000c 	udf	#12
	...
    block.bit.xfer_block_size = BlockSize;
 378:	0000000c 	udf	#12
	...
 388:	000000d8 	udf	#216
	...
    block.bit.blockcount_r = BlockNum;
 398:	00000324 	udf	#804
	...
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
 3b0:	0000002c 	udf	#44
 3b4:	0f7b0002 	.inst	0x0f7b0002 ; undefined
 3b8:	00080000 	.inst	0x00080000 ; undefined
 3bc:	00000000 	udf	#0
 3c0:	61002108 	.inst	0x61002108 ; undefined
 3c4:	00000000 	udf	#0
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
 3c8:	00000030 	udf	#48
	...
 3e0:	0000002c 	udf	#44
 3e4:	10360002 	adr	x2, 6c3e4 <__stack_size+0x683e4>
 3e8:	00080000 	.inst	0x00080000 ; undefined
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
 3ec:	00000000 	udf	#0
 3f0:	61002138 	.inst	0x61002138 ; undefined
 3f4:	00000000 	udf	#0
 3f8:	00000064 	udf	#100
	...
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
 410:	0000002c 	udf	#44
	MMC_WAIT_CMD_COMPLETE(SDIO);
 414:	11050002 	add	w2, w0, #0x140
 418:	00080000 	.inst	0x00080000 ; undefined
 41c:	00000000 	udf	#0
 420:	6100219c 	.inst	0x6100219c ; undefined
 424:	00000000 	udf	#0
 428:	00000148 	udf	#328
	...
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
 440:	0000005c 	udf	#92
 444:	123e0002 	and	w2, w0, #0x4
 448:	00080000 	.inst	0x00080000 ; undefined
 44c:	00000000 	udf	#0
 450:	610022e4 	.inst	0x610022e4 ; undefined
 454:	00000000 	udf	#0
 458:	00000074 	udf	#116
 45c:	00000000 	udf	#0
 460:	61002358 	.inst	0x61002358 ; undefined
	return MMC_SUCCESS;
 464:	00000000 	udf	#0
}
 468:	0000012c 	udf	#300
 46c:	00000000 	udf	#0
 470:	61002484 	.inst	0x61002484 ; undefined
 474:	00000000 	udf	#0
 478:	0000072c 	udf	#1836
 47c:	00000000 	udf	#0
 480:	61002bb0 	.inst	0x61002bb0 ; undefined
 484:	00000000 	udf	#0
 488:	000000b0 	udf	#176
	...
 4a0:	0000002c 	udf	#44
 4a4:	15670002 	b	59c04ac <__stack_size+0x59bc4ac>
 4a8:	00080000 	.inst	0x00080000 ; undefined
 4ac:	00000000 	udf	#0
 4b0:	61002c60 	.inst	0x61002c60 ; undefined
 4b4:	00000000 	udf	#0
 4b8:	00000028 	udf	#40
	...
 4d0:	0000002c 	udf	#44
 4d4:	18240002 	ldr	w2, 484d4 <__stack_size+0x444d4>
 4d8:	00080000 	.inst	0x00080000 ; undefined
 4dc:	00000000 	udf	#0
 4e0:	61002c88 	.inst	0x61002c88 ; undefined
 4e4:	00000000 	udf	#0
 4e8:	00000074 	udf	#116
	...
 500:	0000008c 	udf	#140
 504:	18b40002 	ldr	w2, fffffffffff68504 <_sp+0xffffffff9ef28504>
 508:	00080000 	.inst	0x00080000 ; undefined
 50c:	00000000 	udf	#0
 510:	61002cfc 	.inst	0x61002cfc ; undefined
 514:	00000000 	udf	#0
 518:	00000058 	udf	#88
 51c:	00000000 	udf	#0
 520:	61002d54 	.inst	0x61002d54 ; undefined
 524:	00000000 	udf	#0
 528:	00000018 	udf	#24
 52c:	00000000 	udf	#0
 530:	61002d6c 	.inst	0x61002d6c ; undefined
 534:	00000000 	udf	#0
 538:	00000018 	udf	#24
 53c:	00000000 	udf	#0
 540:	61002d84 	.inst	0x61002d84 ; undefined
 544:	00000000 	udf	#0
 548:	00000040 	udf	#64
	...
 558:	00000050 	udf	#80
 55c:	00000000 	udf	#0
 560:	61002dc4 	.inst	0x61002dc4 ; undefined
 564:	00000000 	udf	#0
 568:	00000054 	udf	#84
	...
 578:	0000003c 	udf	#60
	...
 590:	000000ac 	udf	#172
 594:	1b860002 	.inst	0x1b860002 ; undefined
 598:	00080000 	.inst	0x00080000 ; undefined
 59c:	00000000 	udf	#0
 5a0:	61002e18 	.inst	0x61002e18 ; undefined
 5a4:	00000000 	udf	#0
 5a8:	00000004 	udf	#4
 5ac:	00000000 	udf	#0
 5b0:	61002e1c 	.inst	0x61002e1c ; undefined
 5b4:	00000000 	udf	#0
 5b8:	00000020 	udf	#32
 5bc:	00000000 	udf	#0
 5c0:	61002e3c 	.inst	0x61002e3c ; undefined
 5c4:	00000000 	udf	#0
 5c8:	00000020 	udf	#32
 5cc:	00000000 	udf	#0
 5d0:	61002e5c 	.inst	0x61002e5c ; undefined
 5d4:	00000000 	udf	#0
 5d8:	00000020 	udf	#32
 5dc:	00000000 	udf	#0
 5e0:	61002e7c 	.inst	0x61002e7c ; undefined
 5e4:	00000000 	udf	#0
 5e8:	00000020 	udf	#32
 5ec:	00000000 	udf	#0
 5f0:	61002e9c 	.inst	0x61002e9c ; undefined
 5f4:	00000000 	udf	#0
 5f8:	00000020 	udf	#32
	...
 608:	00000018 	udf	#24
	...
 618:	00000020 	udf	#32
 61c:	00000000 	udf	#0
 620:	61002ebc 	.inst	0x61002ebc ; undefined
 624:	00000000 	udf	#0
 628:	00000020 	udf	#32
	...
 640:	0000006c 	udf	#108
 644:	1df80002 	.inst	0x1df80002 ; undefined
 648:	00080000 	.inst	0x00080000 ; undefined
	...
 658:	0000001c 	udf	#28
	...
 668:	0000001c 	udf	#28
 66c:	00000000 	udf	#0
 670:	61002edc 	.inst	0x61002edc ; undefined
 674:	00000000 	udf	#0
 678:	00000090 	udf	#144
	...
 688:	0000003c 	udf	#60
 68c:	00000000 	udf	#0
 690:	61002f6c 	.inst	0x61002f6c ; undefined
 694:	00000000 	udf	#0
 698:	0000003c 	udf	#60
	...
 6b0:	0000002c 	udf	#44
 6b4:	254d0002 	cmpge	p2.h, p0/z, z0.h, #13
 6b8:	00080000 	.inst	0x00080000 ; undefined
 6bc:	00000000 	udf	#0
 6c0:	61002fa8 	.inst	0x61002fa8 ; undefined
 6c4:	00000000 	udf	#0
 6c8:	000003d8 	udf	#984
	...
 6e0:	0000020c 	udf	#524
 6e4:	25f10002 	whilege	p2.d, w0, w17
 6e8:	00080000 	.inst	0x00080000 ; undefined
 6ec:	00000000 	udf	#0
 6f0:	61003380 	.inst	0x61003380 ; undefined
 6f4:	00000000 	udf	#0
 6f8:	00000020 	udf	#32
 6fc:	00000000 	udf	#0
 700:	610033a0 	.inst	0x610033a0 ; undefined
 704:	00000000 	udf	#0
 708:	000000b8 	udf	#184
 70c:	00000000 	udf	#0
 710:	61003458 	.inst	0x61003458 ; undefined
 714:	00000000 	udf	#0
 718:	000000b8 	udf	#184
 71c:	00000000 	udf	#0
 720:	61003510 	.inst	0x61003510 ; undefined
 724:	00000000 	udf	#0
 728:	000000a8 	udf	#168
 72c:	00000000 	udf	#0
 730:	610035b8 	.inst	0x610035b8 ; undefined
 734:	00000000 	udf	#0
 738:	000000ac 	udf	#172
 73c:	00000000 	udf	#0
 740:	61003664 	.inst	0x61003664 ; undefined
 744:	00000000 	udf	#0
 748:	00000044 	udf	#68
 74c:	00000000 	udf	#0
 750:	610036a8 	.inst	0x610036a8 ; undefined
 754:	00000000 	udf	#0
 758:	00000068 	udf	#104
	...
 768:	00000068 	udf	#104
	...
 778:	00000060 	udf	#96
	...
 788:	0000004c 	udf	#76
	...
 798:	0000003c 	udf	#60
	...
 7a8:	0000003c 	udf	#60
	...
 7b8:	0000004c 	udf	#76
	...
 7c8:	00000054 	udf	#84
	...
 7d8:	0000003c 	udf	#60
	...
 7e8:	00000040 	udf	#64
	...
 7f8:	0000003c 	udf	#60
	...
 808:	00000040 	udf	#64
	...
 818:	0000003c 	udf	#60
	...
 828:	00000054 	udf	#84
	...
 838:	00000070 	udf	#112
	...
 848:	000000d8 	udf	#216
	...
 858:	000000d8 	udf	#216
	...
 868:	00000174 	udf	#372
	...
 878:	00000058 	udf	#88
	...
 888:	00000054 	udf	#84
	...
 898:	00000054 	udf	#84
	...
 8a8:	00000028 	udf	#40
	...
 8b8:	00000028 	udf	#40
	...
 8c8:	00000028 	udf	#40
	...
 8d8:	00000028 	udf	#40
	...
 8f0:	0000006c 	udf	#108
 8f4:	318d0002 	.inst	0x318d0002 ; undefined
 8f8:	00080000 	.inst	0x00080000 ; undefined
	...
 908:	00000060 	udf	#96
	...
 918:	00000034 	udf	#52
 91c:	00000000 	udf	#0
 920:	61003710 	.inst	0x61003710 ; undefined
 924:	00000000 	udf	#0
 928:	00000058 	udf	#88
 92c:	00000000 	udf	#0
 930:	61003768 	.inst	0x61003768 ; undefined
 934:	00000000 	udf	#0
 938:	0000007c 	udf	#124
 93c:	00000000 	udf	#0
 940:	610037e4 	.inst	0x610037e4 ; undefined
 944:	00000000 	udf	#0
 948:	00000018 	udf	#24
	...
 960:	0000011c 	udf	#284
 964:	34460002 	cbz	w2, 8c964 <__stack_size+0x88964>
 968:	00080000 	.inst	0x00080000 ; undefined
 96c:	00000000 	udf	#0
 970:	610037fc 	.inst	0x610037fc ; undefined
 974:	00000000 	udf	#0
 978:	00000018 	udf	#24
 97c:	00000000 	udf	#0
 980:	61003814 	.inst	0x61003814 ; undefined
 984:	00000000 	udf	#0
 988:	00000024 	udf	#36
 98c:	00000000 	udf	#0
 990:	61003838 	.inst	0x61003838 ; undefined
 994:	00000000 	udf	#0
 998:	00000228 	udf	#552
 99c:	00000000 	udf	#0
 9a0:	61003a60 	.inst	0x61003a60 ; undefined
 9a4:	00000000 	udf	#0
 9a8:	00000068 	udf	#104
 9ac:	00000000 	udf	#0
 9b0:	61003ac8 	.inst	0x61003ac8 ; undefined
 9b4:	00000000 	udf	#0
 9b8:	000000c4 	udf	#196
 9bc:	00000000 	udf	#0
 9c0:	61003b8c 	.inst	0x61003b8c ; undefined
 9c4:	00000000 	udf	#0
 9c8:	000000c4 	udf	#196
	...
 9d8:	000000c4 	udf	#196
	...
 9e8:	000000d0 	udf	#208
	...
 9f8:	000000c4 	udf	#196
 9fc:	00000000 	udf	#0
 a00:	61003c50 	.inst	0x61003c50 ; undefined
 a04:	00000000 	udf	#0
 a08:	00000084 	udf	#132
	...
 a18:	00000050 	udf	#80
	...
 a28:	000000cc 	udf	#204
 a2c:	00000000 	udf	#0
 a30:	61003cd4 	.inst	0x61003cd4 ; undefined
 a34:	00000000 	udf	#0
 a38:	0000017c 	udf	#380
 a3c:	00000000 	udf	#0
 a40:	61003e50 	.inst	0x61003e50 ; undefined
 a44:	00000000 	udf	#0
 a48:	0000040c 	udf	#1036
 a4c:	00000000 	udf	#0
 a50:	6100425c 	.inst	0x6100425c ; undefined
 a54:	00000000 	udf	#0
 a58:	000002a4 	udf	#676
 a5c:	00000000 	udf	#0
 a60:	61004500 	.inst	0x61004500 ; undefined
 a64:	00000000 	udf	#0
 a68:	00000bb4 	udf	#2996
	...
 a80:	0000007c 	udf	#124
 a84:	593c0002 	.inst	0x593c0002 ; undefined
 a88:	00080000 	.inst	0x00080000 ; undefined
 a8c:	00000000 	udf	#0
 a90:	610050b4 	.inst	0x610050b4 ; undefined
 a94:	00000000 	udf	#0
 a98:	0000017c 	udf	#380
 a9c:	00000000 	udf	#0
 aa0:	61005230 	.inst	0x61005230 ; undefined
 aa4:	00000000 	udf	#0
 aa8:	0000090c 	udf	#2316
 aac:	00000000 	udf	#0
 ab0:	61005b3c 	.inst	0x61005b3c ; undefined
 ab4:	00000000 	udf	#0
 ab8:	000001c8 	udf	#456
 abc:	00000000 	udf	#0
 ac0:	61005d04 	.inst	0x61005d04 ; undefined
 ac4:	00000000 	udf	#0
 ac8:	000000f0 	udf	#240
 acc:	00000000 	udf	#0
 ad0:	61005df4 	.inst	0x61005df4 ; undefined
 ad4:	00000000 	udf	#0
 ad8:	000002bc 	udf	#700
 adc:	00000000 	udf	#0
 ae0:	610060b0 	.inst	0x610060b0 ; undefined
 ae4:	00000000 	udf	#0
 ae8:	000002d4 	udf	#724
	...
 b00:	0000002c 	udf	#44
 b04:	7cde0002 	.inst	0x7cde0002 ; undefined
 b08:	00080000 	.inst	0x00080000 ; undefined
 b0c:	00000000 	udf	#0
 b10:	61006384 	.inst	0x61006384 ; undefined
 b14:	00000000 	udf	#0
 b18:	00000018 	udf	#24
	...
 b30:	0000005c 	udf	#92
 b34:	7da70002 	.inst	0x7da70002 ; undefined
 b38:	00080000 	.inst	0x00080000 ; undefined
	...
 b48:	00000418 	udf	#1048
	...
 b58:	00000470 	udf	#1136
 b5c:	00000000 	udf	#0
 b60:	6100639c 	.inst	0x6100639c ; undefined
 b64:	00000000 	udf	#0
 b68:	00000168 	udf	#360
 b6c:	00000000 	udf	#0
 b70:	61006504 	.inst	0x61006504 ; undefined
 b74:	00000000 	udf	#0
 b78:	000000d4 	udf	#212
	...

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
{
       0:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
       4:	6f532f2e 	.inst	0x6f532f2e ; undefined
       8:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
       c:	70616f6d 	adr	x13, c2dfb <__stack_size+0xbedfb>
	panic();
      10:	6f432f75 	.inst	0x6f432f75 ; undefined
}
      14:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
      18:	756f532f 	.inst	0x756f532f ; undefined
      1c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	2f434347 	mls	v7.4h, v26.4h, v3.h[0]
      24:	6c776f6c 	ldnp	d12, d27, [x27, #-144]
      28:	6c657665 	ldnp	d5, d29, [x19, #-432]
      2c:	2f00532e 	.inst	0x2f00532e ; undefined
	return 0;
      30:	656d6f68 	fnmls	z8.h, p3/m, z27.h, z13.h
}
      34:	6e65742f 	uabd	v15.8h, v1.8h, v5.8h
      38:	69656667 	ldpsw	x7, x25, [x19, #-216]
    __delay(delay_cnt);
      3c:	2f6f6163 	umlsl	v3.4s, v11.4h, v15.h[2]
      40:	7473616d 	.inst	0x7473616d ; undefined
}
      44:	735f7265 	.inst	0x735f7265 ; undefined
      48:	612f6b64 	.inst	0x612f6b64 ; undefined
      4c:	696c7070 	ldpsw	x16, x28, [x3, #-160]
    } while(Tconsumed < DelayCnt);
      50:	69746163 	ldpsw	x3, x24, [x11, #-96]
    return 0;
      54:	482f6e6f 	.inst	0x482f6e6f ; undefined
}
      58:	5f647261 	sqdmlsl	s1, h19, v4.h[2]
      5c:	74736574 	.inst	0x74736574 ; undefined
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
      60:	7361635f 	.inst	0x7361635f ; undefined
      64:	4e470065 	.inst	0x4e470065 ; undefined
      68:	53412055 	.inst	0x53412055 ; undefined
      6c:	332e3220 	.inst	0x332e3220 ; undefined
    if(Mtimer_IsTimerOut(&mtimer)){
      70:	2e2e0037 	uaddl	v23.8h, v1.8b, v14.8b
      74:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
      78:	2f436f53 	.inst	0x2f436f53 ; undefined
      7c:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
      80:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
        error_stat_check(r);
      84:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
      88:	532f6e6f 	.inst	0x532f6e6f ; undefined
        return MMC_XFER_TIMEOUT;
      8c:	6372756f 	.inst	0x6372756f ; undefined
      90:	43472f65 	.inst	0x43472f65 ; undefined
        if(r.bit.xfer_complete == 1){
      94:	656d2f43 	fmls	z3.h, p3/m, z26.h, z13.h
      98:	00532e6d 	.inst	0x00532e6d ; undefined
        r.bit.dma_interrupt = 0x1;
      9c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
      a0:	6f532f2e 	.inst	0x6f532f2e ; undefined
      a4:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
      a8:	70616f6d 	adr	x13, c2e97 <__stack_size+0xbee97>
      ac:	6f432f75 	.inst	0x6f432f75 ; undefined
      b0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
      b4:	756f532f 	.inst	0x756f532f ; undefined
      b8:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
      bc:	2f434347 	mls	v7.4h, v26.4h, v3.h[0]
      c0:	72617473 	.inst	0x72617473 ; undefined
        return MMC_SUCCESS;
      c4:	5f707574 	sqshl	d20, d11, #48
}
      c8:	63726161 	.inst	0x63726161 ; undefined
      cc:	2e343668 	cmhi	v8.8b, v19.8b, v20.8b
            break;
      d0:	2e2e0053 	uaddl	v19.8h, v2.8b, v14.8b
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
      d8:	2f436f53 	.inst	0x2f436f53 ; undefined
      dc:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
            retval = Uart_event_modem;
      e0:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
            break;
      e4:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	532f6e6f 	.inst	0x532f6e6f ; undefined
      ec:	6372756f 	.inst	0x6372756f ; undefined
      f0:	43472f65 	.inst	0x43472f65 ; undefined
        	retval =Uart_event_thre;
      f4:	65762f43 	fmls	z3.h, p3/m, z26.h, z22.h
      f8:	726f7463 	.inst	0x726f7463 ; undefined
        	break;
      fc:	00532e73 	.inst	0x00532e73 ; undefined
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	6e695f5f 	uqrshl	v31.8h, v26.8h, v9.8h
     104:	38323174 	ldsetb	w18, w20, [x11]
     108:	736e7520 	.inst	0x736e7520 ; undefined
        	retval = Uart_event_timeout;
     10c:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     110:	6e750064 	uaddl2	v4.4s, v3.8h, v21.8h
        	break;
     114:	6e676973 	.inst	0x6e676973 ; undefined
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	63206465 	.inst	0x63206465 ; undefined
     11c:	00726168 	.inst	0x00726168 ; undefined
     120:	656e6567 	fnmls	z7.h, p1/m, z11.h, z14.h
        	retval = Received_data_available;
     124:	5f636972 	.inst	0x5f636972 ; undefined
     128:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
            break;
     12c:	6e695f72 	uqrshl	v18.8h, v27.8h, v9.8h
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	73007469 	.inst	0x73007469 ; undefined
     134:	74726f68 	.inst	0x74726f68 ; undefined
     138:	736e7520 	.inst	0x736e7520 ; undefined
        	retval = Receiver_line_status;
     13c:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     140:	6e692064 	usubl2	v4.4s, v3.8h, v9.8h
            break;
     144:	5f5f0074 	.inst	0x5f5f0074 ; undefined
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	31746e69 	adds	w9, w19, #0xd1b, lsl #12
     14c:	67003832 	.inst	0x67003832 ; undefined
     150:	72656e65 	.inst	0x72656e65 ; undefined
        	retval = Uart_event_busy;
     154:	745f6369 	.inst	0x745f6369 ; undefined
     158:	72656d69 	.inst	0x72656d69 ; undefined
            break;
     15c:	7461725f 	.inst	0x7461725f ; undefined
            retval = 0;
     160:	65670065 	fmla	z5.h, p0/m, z3.h, z7.h
            break;
     164:	6972656e 	ldpsw	x14, x25, [x11, #-112]
    return retval;
     168:	69745f63 	ldpsw	x3, x23, [x27, #-96]
}
     16c:	5f72656d 	.inst	0x5f72656d ; undefined
     170:	62616e65 	.inst	0x62616e65 ; undefined
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
     174:	6c00656c 	stnp	d12, d25, [x11]
     178:	20676e6f 	.inst	0x20676e6f ; undefined
     17c:	676e6f6c 	.inst	0x676e6f6c ; undefined
     180:	736e7520 	.inst	0x736e7520 ; undefined
     184:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     188:	6e692064 	usubl2	v4.4s, v3.8h, v9.8h
     18c:	65670074 	fmla	z20.h, p0/m, z3.h, z7.h
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
     190:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     194:	69745f63 	ldpsw	x3, x23, [x27, #-96]
     198:	5f72656d 	.inst	0x5f72656d ; undefined
     19c:	5f746567 	.inst	0x5f746567 ; undefined
     1a0:	71657266 	subs	w6, w19, #0x95c, lsl #12
     1a4:	6e656700 	umax	v0.8h, v24.8h, v5.8h
     1a8:	63697265 	.inst	0x63697265 ; undefined
     1ac:	6d69745f 	ldp	d31, d29, [x2, #-368]
     1b0:	725f7265 	.inst	0x725f7265 ; undefined
     1b4:	74657365 	.inst	0x74657365 ; undefined
     1b8:	725f5f00 	.inst	0x725f5f00 ; undefined
     1bc:	775f7761 	.inst	0x775f7761 ; undefined
     1c0:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
		writel_relaxed(0, GICD_CTLR);
     1c4:	6f6c006c 	mla	v12.8h, v3.8h, v12.h[2]
     1c8:	6c20676e 	stnp	d14, d25, [x27, #-512]
     1cc:	20676e6f 	.inst	0x20676e6f ; undefined
		gic_dist_wait();
     1d0:	00746e69 	.inst	0x00746e69 ; undefined
		if (int_group == GROUP_1_NONSECURE) {
     1d4:	726f6873 	.inst	0x726f6873 ; undefined
     1d8:	6e692074 	usubl2	v20.4s, v3.8h, v9.8h
     1dc:	2e2e0074 	uaddl	v20.8h, v3.8b, v14.8b
			gicd_igroup  |= (0x01 << int_id);
     1e0:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     1e4:	2f436f53 	.inst	0x2f436f53 ; undefined
     1e8:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     1ec:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     1f0:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     1f4:	532f6e6f 	.inst	0x532f6e6f ; undefined
     1f8:	6372756f 	.inst	0x6372756f ; undefined
			gicd_igrpmod &= (~(0x01 << int_id));
     1fc:	65472f65 	fminv	h5, p3, z27.h
     200:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     204:	69745f63 	ldpsw	x3, x23, [x27, #-96]
     208:	2f72656d 	.inst	0x2f72656d ; undefined
     20c:	2f637273 	fcmla	v19.4h, v19.4h, v3.h[1], #270
     210:	656e6567 	fnmls	z7.h, p1/m, z11.h, z14.h
     214:	5f636972 	.inst	0x5f636972 ; undefined
     218:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
     21c:	00632e72 	.inst	0x00632e72 ; undefined
		} else if (int_group == GROUP_1_SECURE) {
     220:	20554e47 	.inst	0x20554e47 ; undefined
     224:	20373143 	.inst	0x20373143 ; undefined
     228:	322e3131 	orr	w17, w9, #0x7ffc0000
			gicd_igroup  &= (~(0x01 << int_id));
     22c:	3220312e 	orr	w14, w9, #0x1fff
     230:	30323230 	adr	x16, 64875 <__stack_size+0x60875>
     234:	20313131 	.inst	0x20313131 ; undefined
     238:	74736d2d 	.inst	0x74736d2d ; undefined
     23c:	74636972 	.inst	0x74636972 ; undefined
     240:	696c612d 	ldpsw	x13, x24, [x9, #-160]
     244:	2d206e67 	stp	s7, s27, [x19, #-256]
     248:	7570636d 	.inst	0x7570636d ; undefined
			gicd_igrpmod |= (0x01 << int_id);
     24c:	726f633d 	.inst	0x726f633d ; undefined
     250:	2d786574 	ldp	s20, s25, [x11, #-64]
     254:	20353361 	.inst	0x20353361 ; undefined
     258:	72616d2d 	.inst	0x72616d2d ; undefined
     25c:	613d6863 	.inst	0x613d6863 ; undefined
     260:	38766d72 	.inst	0x38766d72 ; undefined
     264:	2d20612d 	stp	s13, s24, [x9, #-256]
     268:	74696c6d 	.inst	0x74696c6d ; undefined
		} else if(int_group == GROUP_0) {
     26c:	2d656c74 	ldp	s20, s27, [x3, #-216]
     270:	69646e65 	ldpsw	x5, x27, [x19, #-224]
     274:	2d206e61 	stp	s1, s27, [x19, #-256]
			gicd_igroup  &= (~(0x01 << int_id));
     278:	6962616d 	ldpsw	x13, x24, [x11, #-240]
     27c:	36706c3d 	tbz	w29, #14, 1000 <__stack_size-0x3000>
     280:	672d2034 	.inst	0x672d2034 ; undefined
     284:	64672d20 	.inst	0x64672d20 ; undefined
     288:	66726177 	.inst	0x66726177 ; undefined
     28c:	2d20342d 	stp	s13, s13, [x1, #-256]
     290:	65726666 	fnmls	z6.h, p1/m, z19.h, z18.h
     294:	61747365 	.inst	0x61747365 ; undefined
			gicd_igrpmod &= (0x01 << int_id);
     298:	6e69646e 	umax	v14.8h, v3.8h, v9.8h
     29c:	662d2067 	.inst	0x662d2067 ; undefined
     2a0:	6f2d6f6e 	.inst	0x6f2d6f6e ; undefined
     2a4:	2d74696d 	ldp	s13, s26, [x11, #-96]
     2a8:	6d617266 	ldp	d6, d28, [x19, #-496]
     2ac:	6f702d65 	.inst	0x6f702d65 ; undefined
     2b0:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
     2b4:	662d2072 	.inst	0x662d2072 ; undefined
     2b8:	732d6f6e 	.inst	0x732d6f6e ; undefined
     2bc:	6b636174 	.inst	0x6b636174 ; undefined
     2c0:	6f72702d 	fcmla	v13.8h, v1.8h, v18.h[1], #270
     2c4:	74636574 	.inst	0x74636574 ; undefined
     2c8:	2d20726f 	stp	s15, s28, [x19, #-256]
     2cc:	6e756666 	umax	v6.8h, v19.8h, v21.8h
     2d0:	6f697463 	uqshl	v3.2d, v3.2d, #41
     2d4:	65732d6e 	fmls	z14.h, p3/m, z11.h, z19.h
     2d8:	6f697463 	uqshl	v3.2d, v3.2d, #41
     2dc:	2d20736e 	stp	s14, s28, [x27, #-256]
     2e0:	74616466 	.inst	0x74616466 ; undefined
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
     2e4:	65732d61 	fmls	z1.h, p3/m, z11.h, z19.h
     2e8:	6f697463 	uqshl	v3.2d, v3.2d, #41
     2ec:	2d20736e 	stp	s14, s28, [x27, #-256]
     2f0:	2d6f6e66 	ldp	s6, s27, [x19, #-136]
     2f4:	6d6d6f63 	ldp	d3, d27, [x27, #-304]
     2f8:	47006e6f 	.inst	0x47006e6f ; undefined
     2fc:	50554f52 	adr	x18, aace6 <__stack_size+0xa6ce6>
     300:	7200305f 	tst	w2, #0x1fff
     304:	65757165 	fnmls	z5.h, p4/m, z11.h, z21.h
     308:	695f7473 	ldpsw	x19, x29, [x3, #248]
     30c:	47007172 	.inst	0x47007172 ; undefined
     310:	50554f52 	adr	x18, aacfa <__stack_size+0xa6cfa>
		gic_dist_wait();
     314:	4e5f315f 	.inst	0x4e5f315f ; undefined
}
     318:	45534e4f 	uaddwt	z15.h, z18.h, z19.b
     31c:	45525543 	ssubwt	z3.h, z10.h, z18.b
     320:	75706300 	.inst	0x75706300 ; undefined
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
     324:	6c65725f 	ldnp	d31, d28, [x18, #-432]
     328:	64007861 	.inst	0x64007861 ; undefined
     32c:	72695f6f 	.inst	0x72695f6f ; undefined
     330:	61685f71 	.inst	0x61685f71 ; undefined
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
     334:	656c646e 	fnmls	z14.h, p1/m, z3.h, z12.h
     338:	63696700 	.inst	0x63696700 ; undefined
     33c:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
     340:	675f6574 	.inst	0x675f6574 ; undefined
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
     344:	6e657072 	uabdl2	v18.4s, v3.8h, v5.8h
     348:	5f5f0031 	.inst	0x5f5f0031 ; undefined
     34c:	5f776172 	.inst	0x5f776172 ; undefined
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
     350:	64616572 	.inst	0x64616572 ; undefined
     354:	2e2e006c 	uaddl	v12.8h, v3.8b, v14.8b
     358:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     35c:	2f436f53 	.inst	0x2f436f53 ; undefined
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
     360:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     364:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     368:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     36c:	532f6e6f 	.inst	0x532f6e6f ; undefined
     370:	6372756f 	.inst	0x6372756f ; undefined
     374:	69472f65 	ldpsw	x5, x11, [x27, #56]
    block.bit.xfer_block_size = BlockSize;
     378:	30355f63 	adr	x3, 6af65 <__stack_size+0x66f65>
     37c:	72732f30 	.inst	0x72732f30 ; undefined
     380:	69672f63 	ldpsw	x3, x11, [x27, #-200]
     384:	33765f63 	.inst	0x33765f63 ; undefined
     388:	6700632e 	.inst	0x6700632e ; undefined
     38c:	725f6369 	.inst	0x725f6369 ; undefined
    block.bit.blockcount_r = BlockNum;
     390:	73696465 	.inst	0x73696465 ; undefined
     394:	61775f74 	.inst	0x61775f74 ; undefined
     398:	67007469 	.inst	0x67007469 ; undefined
     39c:	5f646369 	.inst	0x5f646369 ; undefined
     3a0:	6f726769 	sqshlu	v9.2d, v27.2d, #50
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
     3a4:	67007075 	.inst	0x67007075 ; undefined
     3a8:	655f6369 	fcmeq	p9.h, p0/z, z27.h, z31.h
     3ac:	6c62616e 	ldnp	d14, d24, [x11, #-480]
     3b0:	72735f65 	.inst	0x72735f65 ; undefined
     3b4:	69670065 	ldpsw	x5, x0, [x3, #-200]
     3b8:	6e655f63 	uqrshl	v3.8h, v27.8h, v5.8h
     3bc:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
     3c0:	6465725f 	.inst	0x6465725f ; undefined
     3c4:	00747369 	.inst	0x00747369 ; undefined
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
     3c8:	76636967 	.inst	0x76636967 ; undefined
     3cc:	70635f33 	adr	x19, c6fb3 <__stack_size+0xc2fb3>
     3d0:	656d5f75 	fnmla	z21.h, p7/m, z27.h, z13.h
     3d4:	79726f6d 	ldrh	w13, [x27, #6454]
     3d8:	70616d5f 	adr	xzr, c3183 <__stack_size+0xbf183>
     3dc:	696e695f 	ldpsw	xzr, x26, [x10, #-144]
     3e0:	61680074 	.inst	0x61680074 ; undefined
     3e4:	656c646e 	fnmls	z14.h, p1/m, z3.h, z12.h
     3e8:	67730072 	.inst	0x67730072 ; undefined
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
     3ec:	67695f69 	.inst	0x67695f69 ; undefined
     3f0:	70756f72 	adr	x18, eb1df <__stack_size+0xe71df>
     3f4:	63696700 	.inst	0x63696700 ; undefined
     3f8:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
     3fc:	625f6574 	.inst	0x625f6574 ; undefined
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
     400:	00317270 	.inst	0x00317270 ; NYI
     404:	76636967 	.inst	0x76636967 ; undefined
     408:	69645f33 	ldpsw	x19, x23, [x25, #-224]
     40c:	6c626173 	ldnp	d19, d24, [x11, #-480]
     410:	72695f65 	.inst	0x72695f65 ; undefined
	MMC_WAIT_CMD_COMPLETE(SDIO);
     414:	69670071 	ldpsw	x17, x0, [x3, #-200]
     418:	5f337663 	sqshl	s3, s19, #19
     41c:	5f746573 	.inst	0x5f746573 ; undefined
     420:	00717269 	.inst	0x00717269 ; undefined
     424:	76636967 	.inst	0x76636967 ; undefined
     428:	70635f33 	adr	x19, c700f <__stack_size+0xc300f>
     42c:	6e695f75 	uqrshl	v21.8h, v27.8h, v9.8h
     430:	6d007469 	stp	d9, d29, [x3]
     434:	72646970 	.inst	0x72646970 ; undefined
     438:	63696700 	.inst	0x63696700 ; undefined
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
     43c:	7172695f 	cmp	w10, #0xc9a, lsl #12
     440:	69670073 	ldpsw	x19, x0, [x3, #-200]
     444:	706d5f63 	adr	x3, db033 <__stack_size+0xd7033>
     448:	5f726469 	.inst	0x5f726469 ; undefined
     44c:	615f6f74 	.inst	0x615f6f74 ; undefined
     450:	6e696666 	umax	v6.8h, v19.8h, v9.8h
     454:	00797469 	.inst	0x00797469 ; undefined
     458:	76636967 	.inst	0x76636967 ; undefined
     45c:	69645f33 	ldpsw	x19, x23, [x25, #-224]
     460:	695f7473 	ldpsw	x19, x29, [x3, #248]
	return MMC_SUCCESS;
     464:	0074696e 	.inst	0x0074696e ; undefined
}
     468:	76636967 	.inst	0x76636967 ; undefined
     46c:	6e695f33 	uqrshl	v19.8h, v25.8h, v9.8h
     470:	67007469 	.inst	0x67007469 ; undefined
     474:	33766369 	.inst	0x33766369 ; undefined
     478:	616e655f 	.inst	0x616e655f ; undefined
     47c:	5f656c62 	.inst	0x5f656c62 ; undefined
     480:	00717269 	.inst	0x00717269 ; undefined
     484:	5f636967 	.inst	0x5f636967 ; undefined
     488:	64616572 	.inst	0x64616572 ; undefined
     48c:	6572735f 	fnmls	z31.h, p4/m, z26.h, z18.h
     490:	4f524700 	.inst	0x4f524700 ; undefined
     494:	315f5055 	adds	w21, w2, #0x7d4, lsl #12
     498:	4345535f 	.inst	0x4345535f ; undefined
     49c:	00455255 	.inst	0x00455255 ; undefined
     4a0:	5f636967 	.inst	0x5f636967 ; undefined
     4a4:	64616572 	.inst	0x64616572 ; undefined
     4a8:	6c74635f 	ldnp	d31, d24, [x26, #-192]
     4ac:	645f0072 	fcmla	z18.h, p0/m, z3.h, z31.h, #0
     4b0:	79616c65 	ldrh	w5, [x3, #4278]
     4b4:	00736d5f 	.inst	0x00736d5f ; undefined
     4b8:	5f636967 	.inst	0x5f636967 ; undefined
     4bc:	775f6f64 	.inst	0x775f6f64 ; undefined
     4c0:	5f746961 	.inst	0x5f746961 ; undefined
     4c4:	5f726f66 	.inst	0x5f726f66 ; undefined
     4c8:	00707772 	.inst	0x00707772 ; undefined
     4cc:	6e655f5f 	uqrshl	v31.8h, v26.8h, v5.8h
     4d0:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
     4d4:	7172695f 	cmp	w10, #0xc9a, lsl #12
     4d8:	63696700 	.inst	0x63696700 ; undefined
     4dc:	7465675f 	.inst	0x7465675f ; undefined
     4e0:	6972705f 	ldpsw	xzr, x28, [x2, #-112]
     4e4:	73746962 	.inst	0x73746962 ; undefined
     4e8:	645f5f00 	fcmla	z0.h, p7/m, z24.h, z31.h, #180
     4ec:	62617369 	.inst	0x62617369 ; undefined
     4f0:	695f656c 	ldpsw	x12, x25, [x11, #248]
     4f4:	69007172 	stgp	x18, x28, [x11]
     4f8:	685f7172 	.inst	0x685f7172 ; undefined
     4fc:	6c646e61 	ldnp	d1, d27, [x19, #-448]
     500:	6c5f7265 	ldnp	d5, d28, [x19, #496]
     504:	00747369 	.inst	0x00747369 ; undefined
     508:	61725f5f 	.inst	0x61725f5f ; undefined
     50c:	72775f77 	.inst	0x72775f77 ; undefined
     510:	71657469 	subs	w9, w3, #0x95d, lsl #12
     514:	63696700 	.inst	0x63696700 ; undefined
     518:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
     51c:	655f6574 	fcmne	p4.h, p1/z, z11.h, z31.h
     520:	0072696f 	.inst	0x0072696f ; undefined
     524:	5f746e69 	.inst	0x5f746e69 ; undefined
     528:	756f7267 	.inst	0x756f7267 ; undefined
     52c:	65720070 	fmla	z16.h, p0/m, z3.h, z18.h
     530:	64615f67 	.inst	0x64615f67 ; undefined
     534:	67007264 	.inst	0x67007264 ; undefined
     538:	665f6369 	.inst	0x665f6369 ; undefined
     53c:	675f7169 	.inst	0x675f7169 ; undefined
     540:	695f7465 	ldpsw	x5, x29, [x3, #248]
     544:	695f746e 	ldpsw	x14, x29, [x3, #248]
     548:	69670064 	ldpsw	x4, x0, [x3, #-200]
     54c:	72775f63 	.inst	0x72775f63 ; undefined
     550:	5f657469 	sqshl	d9, d3, #37
     554:	00657273 	.inst	0x00657273 ; undefined
     558:	5f757063 	sqdmlsl	s3, h3, v5.h[3]
     55c:	736d756e 	.inst	0x736d756e ; undefined
     560:	69677300 	ldpsw	x0, x28, [x24, #-200]
     564:	7267695f 	.inst	0x7267695f ; undefined
     568:	646f6d70 	.inst	0x646f6d70 ; undefined
     56c:	71657200 	subs	w0, w16, #0x95c, lsl #12
     570:	74736575 	.inst	0x74736575 ; undefined
     574:	746e695f 	.inst	0x746e695f ; undefined
     578:	75727265 	.inst	0x75727265 ; undefined
     57c:	67007470 	.inst	0x67007470 ; undefined
     580:	33766369 	.inst	0x33766369 ; undefined
     584:	7465735f 	.inst	0x7465735f ; undefined
     588:	6f72675f 	sqshlu	v31.2d, v26.2d, #50
     58c:	69007075 	stgp	x21, x28, [x3]
     590:	74737172 	.inst	0x74737172 ; undefined
     594:	67007461 	.inst	0x67007461 ; undefined
     598:	645f6369 	fcmla	z9.h, p0/m, z27.h, z31.h, #270
     59c:	5f747369 	sqdmlsl	s9, h27, v4.h[3]
     5a0:	74696177 	.inst	0x74696177 ; undefined
     5a4:	765f5f00 	.inst	0x765f5f00 ; undefined
     5a8:	67006c61 	.inst	0x67006c61 ; undefined
     5ac:	33766369 	.inst	0x33766369 ; undefined
     5b0:	7465735f 	.inst	0x7465735f ; undefined
     5b4:	7172695f 	cmp	w10, #0xc9a, lsl #12
     5b8:	6972705f 	ldpsw	xzr, x28, [x2, #-112]
     5bc:	7469726f 	.inst	0x7469726f ; undefined
     5c0:	69670079 	ldpsw	x25, x0, [x3, #-200]
     5c4:	5f337663 	sqshl	s3, s19, #19
     5c8:	69646572 	ldpsw	x18, x25, [x11, #-224]
     5cc:	695f7473 	ldpsw	x19, x29, [x3, #248]
     5d0:	0074696e 	.inst	0x0074696e ; undefined
     5d4:	6f6f425f 	mls	v31.8h, v18.8h, v15.h[2]
     5d8:	6e69006c 	uaddl2	v12.4s, v3.8h, v9.8h
     5dc:	72726574 	.inst	0x72726574 ; undefined
     5e0:	5f747075 	sqdmlsl	s21, h3, v4.h[3]
     5e4:	67006e66 	.inst	0x67006e66 ; undefined
     5e8:	725f6369 	.inst	0x725f6369 ; undefined
     5ec:	5f646165 	.inst	0x5f646165 ; undefined
     5f0:	5f726169 	.inst	0x5f726169 ; undefined
     5f4:	6d6d6f63 	ldp	d3, d27, [x27, #-304]
     5f8:	67006e6f 	.inst	0x67006e6f ; undefined
     5fc:	33766369 	.inst	0x33766369 ; undefined
     600:	7570635f 	.inst	0x7570635f ; undefined
     604:	7379735f 	.inst	0x7379735f ; undefined
     608:	73676572 	.inst	0x73676572 ; undefined
     60c:	696e695f 	ldpsw	xzr, x26, [x10, #-144]
     610:	70730074 	adr	x20, e661f <__stack_size+0xe261f>
     614:	74695f69 	.inst	0x74695f69 ; undefined
     618:	656e696c 	fnmls	z12.h, p2/m, z11.h, z14.h
     61c:	6d756e5f 	ldp	d31, d27, [x18, #-176]
     620:	33750073 	.inst	0x33750073 ; undefined
     624:	00745f32 	.inst	0x00745f32 ; undefined
     628:	64636967 	.inst	0x64636967 ; undefined
     62c:	7267695f 	.inst	0x7267695f ; undefined
     630:	646f6d70 	.inst	0x646f6d70 ; undefined
     634:	71696600 	subs	w0, w16, #0xa59, lsl #12
     638:	6e61685f 	fcvtxn2	v31.4s, v2.2d
     63c:	72656c64 	.inst	0x72656c64 ; undefined
     640:	73696c5f 	.inst	0x73696c5f ; undefined
     644:	69670074 	ldpsw	x20, x0, [x3, #-200]
     648:	72775f63 	.inst	0x72775f63 ; undefined
     64c:	5f657469 	sqshl	d9, d3, #37
     650:	726c7463 	.inst	0x726c7463 ; undefined
     654:	70777200 	adr	x0, ef497 <__stack_size+0xeb497>
     658:	6464615f 	.inst	0x6464615f ; undefined
     65c:	6f640072 	mla	v18.8h, v3.8h, v4.h[2]
     660:	7169665f 	cmp	w18, #0xa59, lsl #12
     664:	6e61685f 	fcvtxn2	v31.4s, v2.2d
     668:	00656c64 	.inst	0x00656c64 ; undefined
     66c:	75716572 	.inst	0x75716572 ; undefined
     670:	5f747365 	sqdmlsl	s5, h27, v4.h[3]
     674:	00716966 	.inst	0x00716966 ; undefined
     678:	75665f70 	.inst	0x75665f70 ; undefined
     67c:	6700636e 	.inst	0x6700636e ; undefined
     680:	5f646369 	.inst	0x5f646369 ; undefined
     684:	65707974 	fnmls	z20.h, p6/m, z11.h, z16.h
     688:	69660072 	ldpsw	x18, x0, [x3, #-208]
     68c:	2e00656c 	.inst	0x2e00656c ; undefined
     690:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     694:	436f532f 	.inst	0x436f532f ; undefined
     698:	6d65642f 	ldp	d15, d25, [x1, #-432]
     69c:	7570616f 	.inst	0x7570616f ; undefined
     6a0:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     6a4:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     6a8:	72756f53 	.inst	0x72756f53 ; undefined
     6ac:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     6b0:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
     6b4:	65737361 	fnmls	z1.h, p4/m, z27.h, z19.h
     6b8:	632e7472 	.inst	0x632e7472 ; undefined
     6bc:	73736100 	.inst	0x73736100 ; undefined
     6c0:	69747265 	ldpsw	x5, x28, [x19, #-96]
     6c4:	5f006e6f 	.inst	0x5f006e6f ; undefined
     6c8:	7373615f 	.inst	0x7373615f ; undefined
     6cc:	00747265 	.inst	0x00747265 ; undefined
     6d0:	656e696c 	fnmls	z12.h, p2/m, z11.h, z14.h
     6d4:	7a697300 	.inst	0x7a697300 ; undefined
     6d8:	00745f65 	.inst	0x00745f65 ; undefined
     6dc:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     6e0:	6f532f2e 	.inst	0x6f532f2e ; undefined
     6e4:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     6e8:	70616f6d 	adr	x13, c34d7 <__stack_size+0xbf4d7>
     6ec:	6f432f75 	.inst	0x6f432f75 ; undefined
     6f0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     6f4:	756f532f 	.inst	0x756f532f ; undefined
     6f8:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     6fc:	6362694c 	.inst	0x6362694c ; undefined
     700:	6d656d2f 	ldp	d15, d27, [x9, #-432]
     704:	2e797063 	uabdl	v3.4s, v3.4h, v25.4h
     708:	656d0063 	fmla	z3.h, p0/m, z3.h, z13.h
     70c:	7970636d 	ldrh	w13, [x27, #6192]
     710:	6e697500 	uabd	v0.8h, v8.8h, v9.8h
     714:	72747074 	.inst	0x72747074 ; undefined
     718:	7500745f 	.inst	0x7500745f ; undefined
     71c:	36746e69 	tbz	w9, #14, ffffffffffff94e8 <_sp+0xffffffff9efb94e8>
     720:	00745f34 	.inst	0x00745f34 ; undefined
     724:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     728:	6f532f2e 	.inst	0x6f532f2e ; undefined
     72c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     730:	70616f6d 	adr	x13, c351f <__stack_size+0xbf51f>
     734:	6f432f75 	.inst	0x6f432f75 ; undefined
     738:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     73c:	756f532f 	.inst	0x756f532f ; undefined
     740:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     744:	6362694c 	.inst	0x6362694c ; undefined
     748:	6d656d2f 	ldp	d15, d27, [x9, #-432]
     74c:	2e746573 	umax	v19.4h, v11.4h, v20.4h
     750:	74700063 	.inst	0x74700063 ; undefined
     754:	00343672 	.inst	0x00343672 ; NYI
     758:	6c6c6966 	ldnp	d6, d26, [x11, #-320]
     75c:	6d656d00 	ldp	d0, d27, [x8, #-432]
     760:	00746573 	.inst	0x00746573 ; undefined
     764:	746e6975 	.inst	0x746e6975 ; undefined
     768:	00745f38 	.inst	0x00745f38 ; undefined
     76c:	5f6d756e 	sqshl	d14, d11, #45
     770:	00667562 	.inst	0x00667562 ; undefined
     774:	6f635f6c 	.inst	0x6f635f6c ; undefined
     778:	00746e75 	.inst	0x00746e75 ; undefined
     77c:	72675f5f 	.inst	0x72675f5f ; undefined
     780:	706f745f 	adr	xzr, df60b <__stack_size+0xdb60b>
     784:	64617200 	.inst	0x64617200 ; undefined
     788:	6c007869 	stnp	d9, d30, [x3]
     78c:	00706f6f 	.inst	0x00706f6f ; undefined
     790:	69727076 	ldpsw	x22, x28, [x3, #-112]
     794:	0066746e 	.inst	0x0066746e ; undefined
     798:	69727473 	ldpsw	x19, x29, [x3, #-112]
     79c:	705f676e 	adr	x14, bf48b <__stack_size+0xbb48b>
     7a0:	746e6972 	.inst	0x746e6972 ; undefined
     7a4:	74757000 	.inst	0x74757000 ; undefined
     7a8:	72616863 	.inst	0x72616863 ; undefined
     7ac:	736e7500 	.inst	0x736e7500 ; undefined
     7b0:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     7b4:	756e5f64 	.inst	0x756e5f64 ; undefined
     7b8:	72705f6d 	.inst	0x72705f6d ; undefined
     7bc:	00746e69 	.inst	0x00746e69 ; undefined
     7c0:	6e646170 	rsubhn2	v16.8h, v11.4s, v4.4s
     7c4:	675f5f00 	.inst	0x675f5f00 ; undefined
     7c8:	666f5f72 	.inst	0x666f5f72 ; undefined
     7cc:	70007366 	adr	x6, 163b <__stack_size-0x29c5>
     7d0:	00636461 	.inst	0x00636461 ; undefined
     7d4:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     7d8:	6f532f2e 	.inst	0x6f532f2e ; undefined
     7dc:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     7e0:	70616f6d 	adr	x13, c35cf <__stack_size+0xbf5cf>
     7e4:	6f432f75 	.inst	0x6f432f75 ; undefined
     7e8:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     7ec:	756f532f 	.inst	0x756f532f ; undefined
     7f0:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     7f4:	6362694c 	.inst	0x6362694c ; undefined
     7f8:	6972702f 	ldpsw	x15, x28, [x1, #-112]
     7fc:	2e66746e 	uabd	v14.4h, v3.4h, v6.4h
     800:	5f5f0063 	.inst	0x5f5f0063 ; undefined
     804:	6c5f6176 	ldnp	d22, d24, [x11, #496]
     808:	00747369 	.inst	0x00747369 ; undefined
     80c:	72765f5f 	.inst	0x72765f5f ; undefined
     810:	66666f5f 	.inst	0x66666f5f ; undefined
     814:	72610073 	.inst	0x72610073 ; undefined
     818:	5f007367 	.inst	0x5f007367 ; undefined
     81c:	5f72765f 	sqshl	d31, d18, #50
     820:	00706f74 	.inst	0x00706f74 ; undefined
     824:	6d756e75 	ldp	d21, d27, [x19, #-176]
     828:	735f5f00 	.inst	0x735f5f00 ; undefined
     82c:	6b636174 	.inst	0x6b636174 ; undefined
     830:	5f454400 	.inst	0x5f454400 ; undefined
     834:	75004e45 	.inst	0x75004e45 ; undefined
     838:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
     83c:	74697277 	.inst	0x74697277 ; undefined
     840:	49490065 	.inst	0x49490065 ; undefined
     844:	43465f52 	.inst	0x43465f52 ; undefined
     848:	4c440052 	.inst	0x4c440052 ; undefined
     84c:	45495f48 	usubwt	z8.h, z26.h, z9.b
     850:	65720052 	fmla	z18.h, p0/m, z2.h, z18.h
     854:	725f7673 	.inst	0x725f7673 ; undefined
     858:	00326765 	.inst	0x00326765 ; NYI
     85c:	5f524252 	.inst	0x5f524252 ; undefined
     860:	5f524854 	.inst	0x5f524854 ; undefined
     864:	004c4c44 	.inst	0x004c4c44 ; undefined
     868:	455f4552 	saddwt	z18.h, z10.h, z31.b
     86c:	2e2e004e 	uaddl	v14.8h, v2.8b, v14.8b
     870:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     874:	2f436f53 	.inst	0x2f436f53 ; undefined
     878:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     87c:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     880:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     884:	532f6e6f 	.inst	0x532f6e6f ; undefined
     888:	6372756f 	.inst	0x6372756f ; undefined
     88c:	694c2f65 	ldpsw	x5, x11, [x27, #96]
     890:	702f6362 	adr	x2, 5f4ff <__stack_size+0x5b4ff>
     894:	68637475 	.inst	0x68637475 ; undefined
     898:	632e7261 	.inst	0x632e7261 ; undefined
     89c:	73657200 	.inst	0x73657200 ; undefined
     8a0:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     8a4:	65725f64 	fnmla	z4.h, p7/m, z27.h, z18.h
     8a8:	72003067 	ands	w7, w3, #0x1fff
     8ac:	72657365 	.inst	0x72657365 ; undefined
     8b0:	5f646576 	.inst	0x5f646576 ; undefined
     8b4:	31676572 	adds	w18, w11, #0x9d9, lsl #12
     8b8:	44504c00 	umlalt	z0.h, z0.b, z16.b
     8bc:	4400484c 	.inst	0x4400484c ; undefined
     8c0:	4153414d 	.inst	0x4153414d ; undefined
     8c4:	44504c00 	umlalt	z0.h, z0.b, z16.b
     8c8:	41004c4c 	.inst	0x41004c4c ; undefined
     8cc:	41555f4c 	.inst	0x41555f4c ; undefined
     8d0:	545f5452 	.inst	0x545f5452 ; undefined
     8d4:	44657079 	.inst	0x44657079 ; undefined
     8d8:	75006665 	.inst	0x75006665 ; undefined
     8dc:	33746e69 	.inst	0x33746e69 ; undefined
     8e0:	00745f32 	.inst	0x00745f32 ; undefined
     8e4:	63727473 	.inst	0x63727473 ; undefined
     8e8:	2e00706d 	.inst	0x2e00706d ; undefined
     8ec:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     8f0:	436f532f 	.inst	0x436f532f ; undefined
     8f4:	6d65642f 	ldp	d15, d25, [x1, #-432]
     8f8:	7570616f 	.inst	0x7570616f ; undefined
     8fc:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     900:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     904:	72756f53 	.inst	0x72756f53 ; undefined
     908:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     90c:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
     910:	63727473 	.inst	0x63727473 ; undefined
     914:	632e706d 	.inst	0x632e706d ; undefined
     918:	74656700 	.inst	0x74656700 ; undefined
     91c:	7379535f 	.inst	0x7379535f ; undefined
     920:	6b636974 	.inst	0x6b636974 ; undefined
     924:	656d6954 	fnmls	z20.h, p2/m, z10.h, z13.h
     928:	2e2e0072 	uaddl	v18.8h, v3.8b, v14.8b
     92c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     930:	2f436f53 	.inst	0x2f436f53 ; undefined
     934:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     938:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     93c:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     940:	532f6e6f 	.inst	0x532f6e6f ; undefined
     944:	6372756f 	.inst	0x6372756f ; undefined
     948:	65642f65 	fmls	z5.h, p3/m, z27.h, z4.h
     94c:	2e79616c 	rsubhn	v12.4h, v11.4s, v25.4s
     950:	79730063 	ldrh	w3, [x3, #6528]
     954:	746e6373 	.inst	0x746e6373 ; undefined
     958:	7465675f 	.inst	0x7465675f ; undefined
     95c:	6572665f 	fnmls	z31.h, p1/m, z18.h, z18.h
     960:	65670071 	fmla	z17.h, p0/m, z3.h, z7.h
     964:	544d5f74 	.inst	0x544d5f74 ; undefined
     968:	72656d69 	.inst	0x72656d69 ; undefined
     96c:	5674754f 	.inst	0x5674754f ; undefined
     970:	65756c61 	fnmls	z1.h, p3/m, z3.h, z21.h
     974:	65645f00 	fnmla	z0.h, p7/m, z24.h, z4.h
     978:	5f79616c 	.inst	0x5f79616c ; undefined
     97c:	65640073 	fmla	z19.h, p0/m, z3.h, z4.h
     980:	5f79616c 	.inst	0x5f79616c ; undefined
     984:	00746e63 	.inst	0x00746e63 ; undefined
     988:	6c65645f 	ldnp	d31, d25, [x2, #-432]
     98c:	755f7961 	.inst	0x755f7961 ; undefined
     990:	45740073 	sqshrunb	z19.s, z3.d, #12
     994:	7400646e 	.inst	0x7400646e ; undefined
     998:	00727543 	.inst	0x00727543 ; undefined
     99c:	5f343675 	.inst	0x5f343675 ; undefined
     9a0:	5f5f0074 	.inst	0x5f5f0074 ; undefined
     9a4:	616c6564 	.inst	0x616c6564 ; undefined
     9a8:	74700079 	.inst	0x74700079 ; undefined
     9ac:	6765725f 	.inst	0x6765725f ; undefined
     9b0:	6f640073 	mla	v19.8h, v3.8h, v4.h[2]
     9b4:	6e79735f 	uabdl2	v31.4s, v26.8h, v25.8h
     9b8:	61685f63 	.inst	0x61685f63 ; undefined
     9bc:	656c646e 	fnmls	z14.h, p1/m, z3.h, z12.h
     9c0:	6e617000 	uabdl2	v0.4s, v0.8h, v1.8h
     9c4:	64006369 	.inst	0x64006369 ; undefined
     9c8:	61625f6f 	.inst	0x61625f6f ; undefined
     9cc:	72695f64 	.inst	0x72695f64 ; undefined
     9d0:	6f640071 	mla	v17.8h, v3.8h, v4.h[2]
     9d4:	6461625f 	.inst	0x6461625f ; undefined
     9d8:	7169665f 	cmp	w18, #0xa59, lsl #12
     9dc:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     9e0:	532f2e2e 	.inst	0x532f2e2e ; undefined
     9e4:	642f436f 	.inst	0x642f436f ; undefined
     9e8:	616f6d65 	.inst	0x616f6d65 ; undefined
     9ec:	432f7570 	.inst	0x432f7570 ; undefined
     9f0:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     9f4:	6f532f6e 	.inst	0x6f532f6e ; undefined
     9f8:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     9fc:	6378652f 	.inst	0x6378652f ; undefined
     a00:	69747065 	ldpsw	x5, x28, [x3, #-96]
     a04:	365f6e6f 	tbz	w15, #11, fffffffffffff7d0 <_sp+0xffffffff9efbf7d0>
     a08:	00632e34 	.inst	0x00632e34 ; undefined
     a0c:	625f6f64 	.inst	0x625f6f64 ; undefined
     a10:	735f6461 	.inst	0x735f6461 ; undefined
     a14:	00636e79 	.inst	0x00636e79 ; undefined
     a18:	655f6f64 	fcmeq	p4.h, p3/z, z27.h, z31.h
     a1c:	726f7272 	.inst	0x726f7272 ; undefined
     a20:	74737000 	.inst	0x74737000 ; undefined
     a24:	00657461 	.inst	0x00657461 ; undefined
     a28:	625f6f64 	.inst	0x625f6f64 ; undefined
     a2c:	655f6461 	fcmeq	p1.h, p1/z, z3.h, z31.h
     a30:	726f7272 	.inst	0x726f7272 ; undefined
     a34:	73655200 	.inst	0x73655200 ; undefined
     a38:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     a3c:	5f323164 	.inst	0x5f323164 ; undefined
     a40:	6e515249 	.inst	0x6e515249 ; undefined
     a44:	434f5300 	.inst	0x434f5300 ; undefined
     a48:	544e495f 	.inst	0x544e495f ; undefined
     a4c:	495f3634 	.inst	0x495f3634 ; undefined
     a50:	006e5152 	.inst	0x006e5152 ; undefined
     a54:	555f4c41 	.inst	0x555f4c41 ; undefined
     a58:	5f545241 	.inst	0x5f545241 ; undefined
     a5c:	504f5453 	adr	x19, 9f4e6 <__stack_size+0x9b4e6>
     a60:	5449425f 	.inst	0x5449425f ; undefined
     a64:	49504700 	.inst	0x49504700 ; undefined
     a68:	495f324f 	.inst	0x495f324f ; undefined
     a6c:	006e5152 	.inst	0x006e5152 ; undefined
     a70:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     a74:	64657672 	.inst	0x64657672 ; undefined
     a78:	52495f32 	.inst	0x52495f32 ; undefined
     a7c:	53006e51 	ubfx	w17, w18, #0, #28
     a80:	495f434d 	.inst	0x495f434d ; undefined
     a84:	006e5152 	.inst	0x006e5152 ; undefined
     a88:	494c4345 	.inst	0x494c4345 ; undefined
     a8c:	52545f43 	.inst	0x52545f43 ; undefined
     a90:	45474749 	saddwt	z9.h, z26.h, z7.b
     a94:	79545f52 	ldrh	w18, [x26, #2606]
     a98:	53006570 	ubfx	w16, w11, #0, #26
     a9c:	495f434f 	.inst	0x495f434f ; undefined
     aa0:	3335544e 	.inst	0x3335544e ; undefined
     aa4:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     aa8:	4f53006e 	.inst	0x4f53006e ; undefined
     aac:	4e495f43 	.inst	0x4e495f43 ; undefined
     ab0:	5f363854 	.inst	0x5f363854 ; undefined
     ab4:	6e515249 	.inst	0x6e515249 ; undefined
     ab8:	434f5300 	.inst	0x434f5300 ; undefined
     abc:	544e495f 	.inst	0x544e495f ; undefined
     ac0:	495f3835 	.inst	0x495f3835 ; undefined
     ac4:	006e5152 	.inst	0x006e5152 ; undefined
     ac8:	5f434f53 	.inst	0x5f434f53 ; undefined
     acc:	5f544e49 	.inst	0x5f544e49 ; undefined
     ad0:	0058414d 	.inst	0x0058414d ; undefined
     ad4:	4f495047 	.inst	0x4f495047 ; undefined
     ad8:	52495f30 	.inst	0x52495f30 ; undefined
     adc:	53006e51 	ubfx	w17, w18, #0, #28
     ae0:	495f434f 	.inst	0x495f434f ; undefined
     ae4:	3732544e 	tbnz	w14, #6, 556c <__stack_size+0x156c>
     ae8:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     aec:	6552006e 	fadd	z14.h, z3.h, z18.h
     af0:	76726573 	.inst	0x76726573 ; undefined
     af4:	34316465 	cbz	w5, 63780 <__stack_size+0x5f780>
     af8:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     afc:	6552006e 	fadd	z14.h, z3.h, z18.h
     b00:	76726573 	.inst	0x76726573 ; undefined
     b04:	33316465 	.inst	0x33316465 ; undefined
     b08:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     b0c:	4f53006e 	.inst	0x4f53006e ; undefined
     b10:	4e495f43 	.inst	0x4e495f43 ; undefined
     b14:	5f373454 	.inst	0x5f373454 ; undefined
     b18:	6e515249 	.inst	0x6e515249 ; undefined
     b1c:	73655200 	.inst	0x73655200 ; undefined
     b20:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     b24:	495f3064 	.inst	0x495f3064 ; undefined
     b28:	006e5152 	.inst	0x006e5152 ; undefined
     b2c:	5f434f53 	.inst	0x5f434f53 ; undefined
     b30:	38544e49 	ldrb	w9, [x18, #-188]!
     b34:	52495f31 	.inst	0x52495f31 ; undefined
     b38:	53006e51 	ubfx	w17, w18, #0, #28
     b3c:	495f434f 	.inst	0x495f434f ; undefined
     b40:	3033544e 	adr	x14, 675c9 <__stack_size+0x635c9>
     b44:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     b48:	4f53006e 	.inst	0x4f53006e ; undefined
     b4c:	4e495f43 	.inst	0x4e495f43 ; undefined
     b50:	5f373654 	.inst	0x5f373654 ; undefined
     b54:	6e515249 	.inst	0x6e515249 ; undefined
     b58:	434f5300 	.inst	0x434f5300 ; undefined
     b5c:	544e495f 	.inst	0x544e495f ; undefined
     b60:	495f3933 	.inst	0x495f3933 ; undefined
     b64:	006e5152 	.inst	0x006e5152 ; undefined
     b68:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     b6c:	64657672 	.inst	0x64657672 ; undefined
     b70:	52495f33 	.inst	0x52495f33 ; undefined
     b74:	53006e51 	ubfx	w17, w18, #0, #28
     b78:	495f434f 	.inst	0x495f434f ; undefined
     b7c:	3537544e 	cbnz	w14, 6f604 <__stack_size+0x6b604>
     b80:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     b84:	4f53006e 	.inst	0x4f53006e ; undefined
     b88:	4e495f43 	.inst	0x4e495f43 ; undefined
     b8c:	5f303554 	.inst	0x5f303554 ; undefined
     b90:	6e515249 	.inst	0x6e515249 ; undefined
     b94:	434f5300 	.inst	0x434f5300 ; undefined
     b98:	544e495f 	.inst	0x544e495f ; undefined
     b9c:	495f3232 	.inst	0x495f3232 ; undefined
     ba0:	006e5152 	.inst	0x006e5152 ; undefined
     ba4:	5f434f53 	.inst	0x5f434f53 ; undefined
     ba8:	35544e49 	cbnz	w9, a9570 <__stack_size+0xa5570>
     bac:	52495f39 	.inst	0x52495f39 ; undefined
     bb0:	53006e51 	ubfx	w17, w18, #0, #28
     bb4:	495f434f 	.inst	0x495f434f ; undefined
     bb8:	3833544e 	.inst	0x3833544e ; undefined
     bbc:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     bc0:	4345006e 	.inst	0x4345006e ; undefined
     bc4:	5f43494c 	.inst	0x5f43494c ; undefined
     bc8:	5447454e 	b.al	8f470 <__stack_size+0x8b470>
     bcc:	5f455649 	shl	d9, d18, #5
     bd0:	45474445 	saddwt	z5.h, z2.h, z7.b
     bd4:	4952545f 	.inst	0x4952545f ; undefined
     bd8:	52454747 	.inst	0x52454747 ; undefined
     bdc:	73655200 	.inst	0x73655200 ; undefined
     be0:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     be4:	495f3664 	.inst	0x495f3664 ; undefined
     be8:	006e5152 	.inst	0x006e5152 ; undefined
     bec:	5f434f53 	.inst	0x5f434f53 ; undefined
     bf0:	37544e49 	tbnz	w9, #10, ffffffffffff95b8 <_sp+0xffffffff9efb95b8>
     bf4:	52495f30 	.inst	0x52495f30 ; undefined
     bf8:	53006e51 	ubfx	w17, w18, #0, #28
     bfc:	495f434f 	.inst	0x495f434f ; undefined
     c00:	3234544e 	orr	w14, w2, #0xfffff003
     c04:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     c08:	4f53006e 	.inst	0x4f53006e ; undefined
     c0c:	4e495f43 	.inst	0x4e495f43 ; undefined
     c10:	5f393754 	.inst	0x5f393754 ; undefined
     c14:	6e515249 	.inst	0x6e515249 ; undefined
     c18:	434f5300 	.inst	0x434f5300 ; undefined
     c1c:	544e495f 	.inst	0x544e495f ; undefined
     c20:	495f3832 	.inst	0x495f3832 ; undefined
     c24:	006e5152 	.inst	0x006e5152 ; undefined
     c28:	5f434f53 	.inst	0x5f434f53 ; undefined
     c2c:	31544e49 	adds	w9, w18, #0x513, lsl #12
     c30:	52495f39 	.inst	0x52495f39 ; undefined
     c34:	53006e51 	ubfx	w17, w18, #0, #28
     c38:	495f434f 	.inst	0x495f434f ; undefined
     c3c:	3236544e 	orr	w14, w2, #0xfffffc00
     c40:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     c44:	6552006e 	fadd	z14.h, z3.h, z18.h
     c48:	76726573 	.inst	0x76726573 ; undefined
     c4c:	5f376465 	.inst	0x5f376465 ; undefined
     c50:	6e515249 	.inst	0x6e515249 ; undefined
     c54:	434f5300 	.inst	0x434f5300 ; undefined
     c58:	544e495f 	.inst	0x544e495f ; undefined
     c5c:	495f3434 	.inst	0x495f3434 ; undefined
     c60:	006e5152 	.inst	0x006e5152 ; undefined
     c64:	5f434f53 	.inst	0x5f434f53 ; undefined
     c68:	38544e49 	ldrb	w9, [x18, #-188]!
     c6c:	52495f32 	.inst	0x52495f32 ; undefined
     c70:	53006e51 	ubfx	w17, w18, #0, #28
     c74:	495f434f 	.inst	0x495f434f ; undefined
     c78:	3133544e 	adds	w14, w2, #0xcd5
     c7c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     c80:	4f53006e 	.inst	0x4f53006e ; undefined
     c84:	4e495f43 	.inst	0x4e495f43 ; undefined
     c88:	5f373854 	.inst	0x5f373854 ; undefined
     c8c:	6e515249 	.inst	0x6e515249 ; undefined
     c90:	434f5300 	.inst	0x434f5300 ; undefined
     c94:	544e495f 	.inst	0x544e495f ; undefined
     c98:	495f3135 	.inst	0x495f3135 ; undefined
     c9c:	006e5152 	.inst	0x006e5152 ; undefined
     ca0:	5f434f53 	.inst	0x5f434f53 ; undefined
     ca4:	32544e49 	.inst	0x32544e49 ; undefined
     ca8:	52495f33 	.inst	0x52495f33 ; undefined
     cac:	53006e51 	ubfx	w17, w18, #0, #28
     cb0:	65747379 	fnmls	z25.h, p4/m, z27.h, z20.h
     cb4:	726f436d 	.inst	0x726f436d ; undefined
     cb8:	6f6c4365 	mls	v5.8h, v27.8h, v12.h[2]
     cbc:	53006b63 	ubfx	w3, w27, #0, #27
     cc0:	65747379 	fnmls	z25.h, p4/m, z27.h, z20.h
     cc4:	6e61426d 	raddhn2	v13.8h, v19.4s, v1.4s
     cc8:	5072656e 	adr	x14, e5976 <__stack_size+0xe1976>
     ccc:	746e6972 	.inst	0x746e6972 ; undefined
     cd0:	69727400 	ldpsw	x0, x29, [x0, #-112]
     cd4:	6f6d5f67 	.inst	0x6f6d5f67 ; undefined
     cd8:	53006564 	ubfx	w4, w11, #0, #26
     cdc:	69547379 	ldpsw	x25, x28, [x27, #160]
     ce0:	5f72656d 	.inst	0x5f72656d ; undefined
     ce4:	6e515249 	.inst	0x6e515249 ; undefined
     ce8:	434f5300 	.inst	0x434f5300 ; undefined
     cec:	544e495f 	.inst	0x544e495f ; undefined
     cf0:	495f3533 	.inst	0x495f3533 ; undefined
     cf4:	006e5152 	.inst	0x006e5152 ; undefined
     cf8:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     cfc:	64657672 	.inst	0x64657672 ; undefined
     d00:	52495f38 	.inst	0x52495f38 ; undefined
     d04:	53006e51 	ubfx	w17, w18, #0, #28
     d08:	495f434f 	.inst	0x495f434f ; undefined
     d0c:	3338544e 	.inst	0x3338544e ; undefined
     d10:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     d14:	4f53006e 	.inst	0x4f53006e ; undefined
     d18:	4e495f43 	.inst	0x4e495f43 ; undefined
     d1c:	5f353554 	.inst	0x5f353554 ; undefined
     d20:	6e515249 	.inst	0x6e515249 ; undefined
     d24:	73795300 	.inst	0x73795300 ; undefined
     d28:	436d6574 	.inst	0x436d6574 ; undefined
     d2c:	4365726f 	.inst	0x4365726f ; undefined
     d30:	6b636f6c 	.inst	0x6b636f6c ; undefined
     d34:	61647055 	.inst	0x61647055 ; undefined
     d38:	53006574 	ubfx	w20, w11, #0, #26
     d3c:	495f434f 	.inst	0x495f434f ; undefined
     d40:	3432544e 	cbz	w14, 657c8 <__stack_size+0x617c8>
     d44:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     d48:	5047006e 	adr	x14, 8ed56 <__stack_size+0x8ad56>
     d4c:	5f334f49 	.inst	0x5f334f49 ; undefined
     d50:	6e515249 	.inst	0x6e515249 ; undefined
     d54:	73655200 	.inst	0x73655200 ; undefined
     d58:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     d5c:	5f303164 	.inst	0x5f303164 ; undefined
     d60:	6e515249 	.inst	0x6e515249 ; undefined
     d64:	5f4c4100 	.inst	0x5f4c4100 ; undefined
     d68:	54524155 	.inst	0x54524155 ; undefined
     d6c:	4f54535f 	.inst	0x4f54535f ; undefined
     d70:	49425f50 	.inst	0x49425f50 ; undefined
     d74:	70315f54 	adr	x20, 6395f <__stack_size+0x5f95f>
     d78:	4f530035 	.inst	0x4f530035 ; undefined
     d7c:	4e495f43 	.inst	0x4e495f43 ; undefined
     d80:	5f343654 	.inst	0x5f343654 ; undefined
     d84:	6e515249 	.inst	0x6e515249 ; undefined
     d88:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     d8c:	532f2e2e 	.inst	0x532f2e2e ; undefined
     d90:	642f436f 	.inst	0x642f436f ; undefined
     d94:	616f6d65 	.inst	0x616f6d65 ; undefined
     d98:	432f7570 	.inst	0x432f7570 ; undefined
     d9c:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     da0:	6f532f6e 	.inst	0x6f532f6e ; undefined
     da4:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     da8:	7379732f 	.inst	0x7379732f ; undefined
     dac:	5f6d6574 	.inst	0x5f6d6574 ; undefined
     db0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     db4:	2e757061 	uabdl	v1.4s, v3.4h, v21.4h
     db8:	65520063 	fadd	z3.h, z3.h, z18.h
     dbc:	76726573 	.inst	0x76726573 ; undefined
     dc0:	5f396465 	.inst	0x5f396465 ; undefined
     dc4:	6e515249 	.inst	0x6e515249 ; undefined
     dc8:	434f5300 	.inst	0x434f5300 ; undefined
     dcc:	544e495f 	.inst	0x544e495f ; undefined
     dd0:	495f3635 	.inst	0x495f3635 ; undefined
     dd4:	006e5152 	.inst	0x006e5152 ; undefined
     dd8:	54524155 	.inst	0x54524155 ; undefined
     ddc:	5449425f 	.inst	0x5449425f ; undefined
     de0:	4e454c5f 	.inst	0x4e454c5f ; undefined
     de4:	5f485447 	shl	d7, d2, #8
     de8:	41550035 	.inst	0x41550035 ; undefined
     dec:	425f5452 	.inst	0x425f5452 ; undefined
     df0:	4c5f5449 	.inst	0x4c5f5449 ; undefined
     df4:	54474e45 	b.pl	8f7bc <__stack_size+0x8b7bc>  // b.nfrst
     df8:	00365f48 	.inst	0x00365f48 ; NYI
     dfc:	54524155 	.inst	0x54524155 ; undefined
     e00:	5449425f 	.inst	0x5449425f ; undefined
     e04:	4e454c5f 	.inst	0x4e454c5f ; undefined
     e08:	5f485447 	shl	d7, d2, #8
     e0c:	4f530037 	.inst	0x4f530037 ; undefined
     e10:	4e495f43 	.inst	0x4e495f43 ; undefined
     e14:	5f363754 	.inst	0x5f363754 ; undefined
     e18:	6e515249 	.inst	0x6e515249 ; undefined
     e1c:	434f5300 	.inst	0x434f5300 ; undefined
     e20:	544e495f 	.inst	0x544e495f ; undefined
     e24:	495f3834 	.inst	0x495f3834 ; undefined
     e28:	006e5152 	.inst	0x006e5152 ; undefined
     e2c:	555f4c41 	.inst	0x555f4c41 ; undefined
     e30:	5f545241 	.inst	0x5f545241 ; undefined
     e34:	5f544942 	.inst	0x5f544942 ; undefined
     e38:	474e454c 	.inst	0x474e454c ; undefined
     e3c:	41004854 	.inst	0x41004854 ; undefined
     e40:	61755f4c 	.inst	0x61755f4c ; undefined
     e44:	735f7472 	.inst	0x735f7472 ; undefined
     e48:	5f706f74 	.inst	0x5f706f74 ; undefined
     e4c:	00746962 	.inst	0x00746962 ; undefined
     e50:	5f434f53 	.inst	0x5f434f53 ; undefined
     e54:	36544e49 	tbz	w9, #10, ffffffffffff981c <_sp+0xffffffff9efb981c>
     e58:	52495f38 	.inst	0x52495f38 ; undefined
     e5c:	45006e51 	pmullt	z17.q, z18.d, z0.d
     e60:	43494c43 	.inst	0x43494c43 ; undefined
     e64:	56454c5f 	.inst	0x56454c5f ; undefined
     e68:	545f4c45 	b.pl	bf7f0 <__stack_size+0xbb7f0>  // b.nfrst
     e6c:	47474952 	.inst	0x47474952 ; undefined
     e70:	55005245 	.inst	0x55005245 ; undefined
     e74:	5f545241 	.inst	0x5f545241 ; undefined
     e78:	5f544942 	.inst	0x5f544942 ; undefined
     e7c:	474e454c 	.inst	0x474e454c ; undefined
     e80:	385f4854 	ldtrb	w20, [x2, #-12]
     e84:	434f5300 	.inst	0x434f5300 ; undefined
     e88:	544e495f 	.inst	0x544e495f ; undefined
     e8c:	495f3838 	.inst	0x495f3838 ; undefined
     e90:	006e5152 	.inst	0x006e5152 ; undefined
     e94:	5f434f53 	.inst	0x5f434f53 ; undefined
     e98:	33544e49 	.inst	0x33544e49 ; undefined
     e9c:	52495f37 	.inst	0x52495f37 ; undefined
     ea0:	53006e51 	ubfx	w17, w18, #0, #28
     ea4:	65747379 	fnmls	z25.h, p4/m, z27.h, z20.h
     ea8:	696e496d 	ldpsw	x13, x18, [x11, #-144]
     eac:	4f530074 	.inst	0x4f530074 ; undefined
     eb0:	4e495f43 	.inst	0x4e495f43 ; undefined
     eb4:	5f333654 	.inst	0x5f333654 ; undefined
     eb8:	6e515249 	.inst	0x6e515249 ; undefined
     ebc:	434f5300 	.inst	0x434f5300 ; undefined
     ec0:	544e495f 	.inst	0x544e495f ; undefined
     ec4:	495f3032 	.inst	0x495f3032 ; undefined
     ec8:	006e5152 	.inst	0x006e5152 ; undefined
     ecc:	5f434f53 	.inst	0x5f434f53 ; undefined
     ed0:	35544e49 	cbnz	w9, a9898 <__stack_size+0xa5898>
     ed4:	52495f37 	.inst	0x52495f37 ; undefined
     ed8:	53006e51 	ubfx	w17, w18, #0, #28
     edc:	495f434f 	.inst	0x495f434f ; undefined
     ee0:	3932544e 	strb	w14, [x2, #3221]
     ee4:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     ee8:	4f53006e 	.inst	0x4f53006e ; undefined
     eec:	4e495f43 	.inst	0x4e495f43 ; undefined
     ef0:	5f363354 	.inst	0x5f363354 ; undefined
     ef4:	6e515249 	.inst	0x6e515249 ; undefined
     ef8:	4c434500 	.inst	0x4c434500 ; undefined
     efc:	4d5f4349 	.inst	0x4d5f4349 ; undefined
     f00:	545f5841 	b.ne	bfa08 <__stack_size+0xbba08>  // b.any
     f04:	47474952 	.inst	0x47474952 ; undefined
     f08:	5f005245 	fmls	h5, h18, v0.h[0]
     f0c:	6d657270 	ldp	d16, d28, [x19, #-432]
     f10:	5f6e6961 	.inst	0x5f6e6961 ; undefined
     f14:	74696e69 	.inst	0x74696e69 ; undefined
     f18:	43455800 	.inst	0x43455800 ; undefined
     f1c:	52495f30 	.inst	0x52495f30 ; undefined
     f20:	53006e51 	ubfx	w17, w18, #0, #28
     f24:	495f434f 	.inst	0x495f434f ; undefined
     f28:	3139544e 	adds	w14, w2, #0xe55
     f2c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     f30:	4f53006e 	.inst	0x4f53006e ; undefined
     f34:	4e495f43 	.inst	0x4e495f43 ; undefined
     f38:	5f303454 	.inst	0x5f303454 ; undefined
     f3c:	6e515249 	.inst	0x6e515249 ; undefined
     f40:	73655200 	.inst	0x73655200 ; undefined
     f44:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     f48:	5f353164 	.inst	0x5f353164 ; undefined
     f4c:	6e515249 	.inst	0x6e515249 ; undefined
     f50:	434f5300 	.inst	0x434f5300 ; undefined
     f54:	544e495f 	.inst	0x544e495f ; undefined
     f58:	495f3934 	.inst	0x495f3934 ; undefined
     f5c:	006e5152 	.inst	0x006e5152 ; undefined
     f60:	5f434f53 	.inst	0x5f434f53 ; undefined
     f64:	36544e49 	tbz	w9, #10, ffffffffffff992c <_sp+0xffffffff9efb992c>
     f68:	52495f30 	.inst	0x52495f30 ; undefined
     f6c:	53006e51 	ubfx	w17, w18, #0, #28
     f70:	495f434f 	.inst	0x495f434f ; undefined
     f74:	3233544e 	orr	w14, w2, #0xffffe007
     f78:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     f7c:	4f53006e 	.inst	0x4f53006e ; undefined
     f80:	4e495f43 	.inst	0x4e495f43 ; undefined
     f84:	5f393654 	.inst	0x5f393654 ; undefined
     f88:	6e515249 	.inst	0x6e515249 ; undefined
     f8c:	73655200 	.inst	0x73655200 ; undefined
     f90:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     f94:	495f3564 	.inst	0x495f3564 ; undefined
     f98:	006e5152 	.inst	0x006e5152 ; undefined
     f9c:	6e776f64 	umin	v4.8h, v27.8h, v23.8h
     fa0:	64616f6c 	.inst	0x64616f6c ; undefined
     fa4:	646f6d5f 	.inst	0x646f6d5f ; undefined
     fa8:	53007365 	ubfx	w5, w27, #0, #29
     fac:	495f434f 	.inst	0x495f434f ; undefined
     fb0:	3038544e 	adr	x14, 71a39 <__stack_size+0x6da39>
     fb4:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     fb8:	4f53006e 	.inst	0x4f53006e ; undefined
     fbc:	4e495f43 	.inst	0x4e495f43 ; undefined
     fc0:	5f323554 	.inst	0x5f323554 ; undefined
     fc4:	6e515249 	.inst	0x6e515249 ; undefined
     fc8:	434f5300 	.inst	0x434f5300 ; undefined
     fcc:	544e495f 	.inst	0x544e495f ; undefined
     fd0:	495f3938 	.inst	0x495f3938 ; undefined
     fd4:	006e5152 	.inst	0x006e5152 ; undefined
     fd8:	61556c41 	.inst	0x61556c41 ; undefined
     fdc:	495f7472 	.inst	0x495f7472 ; undefined
     fe0:	0074696e 	.inst	0x0074696e ; undefined
     fe4:	555f4c41 	.inst	0x555f4c41 ; undefined
     fe8:	5f545241 	.inst	0x5f545241 ; undefined
     fec:	504f5453 	adr	x19, 9fa76 <__stack_size+0x9ba76>
     ff0:	5449425f 	.inst	0x5449425f ; undefined
     ff4:	5300325f 	ubfx	wzr, w18, #0, #13
     ff8:	495f434f 	.inst	0x495f434f ; undefined
     ffc:	3132544e 	adds	w14, w2, #0xc95
    1000:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    1004:	5249006e 	.inst	0x5249006e ; undefined
    1008:	545f6e51 	.inst	0x545f6e51 ; undefined
    100c:	00657079 	.inst	0x00657079 ; undefined
    1010:	5f434f53 	.inst	0x5f434f53 ; undefined
    1014:	39544e49 	ldrb	w9, [x18, #1299]
    1018:	52495f30 	.inst	0x52495f30 ; undefined
    101c:	57006e51 	.inst	0x57006e51 ; undefined
    1020:	495f5444 	.inst	0x495f5444 ; undefined
    1024:	006e5152 	.inst	0x006e5152 ; undefined
    1028:	31434558 	adds	w24, w10, #0xd1, lsl #12
    102c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    1030:	4f53006e 	.inst	0x4f53006e ; undefined
    1034:	4e495f43 	.inst	0x4e495f43 ; undefined
    1038:	5f323954 	.inst	0x5f323954 ; undefined
    103c:	6e515249 	.inst	0x6e515249 ; undefined
    1040:	434f5300 	.inst	0x434f5300 ; undefined
    1044:	544e495f 	.inst	0x544e495f ; undefined
    1048:	495f3134 	.inst	0x495f3134 ; undefined
    104c:	006e5152 	.inst	0x006e5152 ; undefined
    1050:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
    1054:	64657672 	.inst	0x64657672 ; undefined
    1058:	495f3631 	.inst	0x495f3631 ; undefined
    105c:	006e5152 	.inst	0x006e5152 ; undefined
    1060:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
    1064:	64657672 	.inst	0x64657672 ; undefined
    1068:	52495f34 	.inst	0x52495f34 ; undefined
    106c:	45006e51 	pmullt	z17.q, z18.d, z0.d
    1070:	43494c43 	.inst	0x43494c43 ; undefined
    1074:	534f505f 	.inst	0x534f505f ; undefined
    1078:	45564954 	uaddwb	z20.h, z10.h, z22.b
    107c:	4744455f 	.inst	0x4744455f ; undefined
    1080:	52545f45 	.inst	0x52545f45 ; undefined
    1084:	45474749 	saddwt	z9.h, z26.h, z7.b
    1088:	4f530052 	.inst	0x4f530052 ; undefined
    108c:	4e495f43 	.inst	0x4e495f43 ; undefined
    1090:	5f313654 	.inst	0x5f313654 ; undefined
    1094:	6e515249 	.inst	0x6e515249 ; undefined
    1098:	434f5300 	.inst	0x434f5300 ; undefined
    109c:	544e495f 	.inst	0x544e495f ; undefined
    10a0:	495f3333 	.inst	0x495f3333 ; undefined
    10a4:	006e5152 	.inst	0x006e5152 ; undefined
    10a8:	62616e45 	.inst	0x62616e45 ; undefined
    10ac:	6970656c 	ldpsw	x12, x25, [x11, #-128]
    10b0:	78756d6e 	.inst	0x78756d6e ; undefined
    10b4:	79530031 	ldrh	w17, [x1, #2432]
    10b8:	6d695473 	ldp	d19, d21, [x3, #-368]
    10bc:	57537265 	.inst	0x57537265 ; undefined
    10c0:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    10c4:	4345006e 	.inst	0x4345006e ; undefined
    10c8:	5f43494c 	.inst	0x5f43494c ; undefined
    10cc:	47495254 	.inst	0x47495254 ; undefined
    10d0:	00524547 	.inst	0x00524547 ; undefined
    10d4:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
    10d8:	64657672 	.inst	0x64657672 ; undefined
    10dc:	495f3131 	.inst	0x495f3131 ; undefined
    10e0:	006e5152 	.inst	0x006e5152 ; undefined
    10e4:	5f434f53 	.inst	0x5f434f53 ; undefined
    10e8:	32544e49 	.inst	0x32544e49 ; undefined
    10ec:	52495f35 	.inst	0x52495f35 ; undefined
    10f0:	47006e51 	.inst	0x47006e51 ; undefined
    10f4:	314f4950 	adds	w16, w10, #0x3d2, lsl #12
    10f8:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    10fc:	4c41006e 	.inst	0x4c41006e ; undefined
    1100:	5241555f 	.inst	0x5241555f ; undefined
    1104:	54535f54 	.inst	0x54535f54 ; undefined
    1108:	425f504f 	.inst	0x425f504f ; undefined
    110c:	315f5449 	adds	w9, w2, #0x7d5, lsl #12
    1110:	434f5300 	.inst	0x434f5300 ; undefined
    1114:	544e495f 	.inst	0x544e495f ; undefined
    1118:	495f3339 	.inst	0x495f3339 ; undefined
    111c:	006e5152 	.inst	0x006e5152 ; undefined
    1120:	5f434f53 	.inst	0x5f434f53 ; undefined
    1124:	36544e49 	tbz	w9, #10, ffffffffffff9aec <_sp+0xffffffff9efb9aec>
    1128:	52495f35 	.inst	0x52495f35 ; undefined
    112c:	52006e51 	eor	w17, w18, #0xfffffff
    1130:	72657365 	.inst	0x72657365 ; undefined
    1134:	31646576 	adds	w22, w11, #0x919, lsl #12
    1138:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    113c:	4f53006e 	.inst	0x4f53006e ; undefined
    1140:	4e495f43 	.inst	0x4e495f43 ; undefined
    1144:	5f353854 	.inst	0x5f353854 ; undefined
    1148:	6e515249 	.inst	0x6e515249 ; undefined
    114c:	434f5300 	.inst	0x434f5300 ; undefined
    1150:	544e495f 	.inst	0x544e495f ; undefined
    1154:	495f3433 	.inst	0x495f3433 ; undefined
    1158:	006e5152 	.inst	0x006e5152 ; undefined
    115c:	494c4345 	.inst	0x494c4345 ; undefined
    1160:	65525f43 	fcmge	p3.h, p7/z, z26.h, z18.h
    1164:	74736967 	.inst	0x74736967 ; undefined
    1168:	495f7265 	.inst	0x495f7265 ; undefined
    116c:	41005152 	.inst	0x41005152 ; undefined
    1170:	61755f4c 	.inst	0x61755f4c ; undefined
    1174:	625f7472 	.inst	0x625f7472 ; undefined
    1178:	6c5f7469 	ldnp	d9, d29, [x3, #496]
    117c:	74676e65 	.inst	0x74676e65 ; undefined
    1180:	41580068 	.inst	0x41580068 ; undefined
    1184:	495f4344 	.inst	0x495f4344 ; undefined
    1188:	006e5152 	.inst	0x006e5152 ; undefined
    118c:	5f434f53 	.inst	0x5f434f53 ; undefined
    1190:	35544e49 	cbnz	w9, a9b58 <__stack_size+0xa5b58>
    1194:	52495f34 	.inst	0x52495f34 ; undefined
    1198:	53006e51 	ubfx	w17, w18, #0, #28
    119c:	495f434f 	.inst	0x495f434f ; undefined
    11a0:	3632544e 	tbz	w14, #6, 5c28 <__stack_size+0x1c28>
    11a4:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    11a8:	4f53006e 	.inst	0x4f53006e ; undefined
    11ac:	4e495f43 	.inst	0x4e495f43 ; undefined
    11b0:	5f343854 	.inst	0x5f343854 ; undefined
    11b4:	6e515249 	.inst	0x6e515249 ; undefined
    11b8:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    11bc:	532f2e2e 	.inst	0x532f2e2e ; undefined
    11c0:	642f436f 	.inst	0x642f436f ; undefined
    11c4:	736f6d65 	.inst	0x736f6d65 ; undefined
    11c8:	432f636f 	.inst	0x432f636f ; undefined
    11cc:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    11d0:	6f532f6e 	.inst	0x6f532f6e ; undefined
    11d4:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
    11d8:	6972442f 	ldpsw	x15, x17, [x1, #-112]
    11dc:	73726576 	.inst	0x73726576 ; undefined
    11e0:	4c412f2f 	.inst	0x4c412f2f ; undefined
    11e4:	6e69705f 	uabdl2	v31.4s, v2.8h, v9.8h
    11e8:	2e78756d 	uabd	v13.4h, v11.4h, v24.4h
    11ec:	6c410063 	ldnp	d3, d0, [x3, #16]
    11f0:	74726155 	.inst	0x74726155 ; undefined
    11f4:	616e455f 	.inst	0x616e455f ; undefined
    11f8:	46656c62 	.inst	0x46656c62 ; undefined
    11fc:	416f6669 	.inst	0x416f6669 ; undefined
    1200:	73656363 	.inst	0x73656363 ; undefined
    1204:	61620073 	.inst	0x61620073 ; undefined
    1208:	61726475 	.inst	0x61726475 ; undefined
    120c:	41006574 	.inst	0x41006574 ; undefined
    1210:	7261556c 	.inst	0x7261556c ; undefined
    1214:	6e455f74 	.inst	0x6e455f74 ; undefined
    1218:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    121c:	00636641 	.inst	0x00636641 ; undefined
    1220:	61556c41 	.inst	0x61556c41 ; undefined
    1224:	535f7472 	.inst	0x535f7472 ; undefined
    1228:	61427465 	.inst	0x61427465 ; undefined
    122c:	61726475 	.inst	0x61726475 ; undefined
    1230:	73006574 	.inst	0x73006574 ; undefined
    1234:	61657274 	.inst	0x61657274 ; undefined
    1238:	6552006d 	fadd	z13.h, z3.h, z18.h
    123c:	76696563 	.inst	0x76696563 ; undefined
    1240:	645f6465 	fcmla	z5.h, p1/m, z3.h, z31.h, #270
    1244:	5f617461 	sqshl	d1, d3, #33
    1248:	69617661 	ldpsw	x1, x29, [x19, #-248]
    124c:	6c62616c 	ldnp	d12, d24, [x11, #-480]
    1250:	61550065 	.inst	0x61550065 ; undefined
    1254:	695f7472 	ldpsw	x18, x29, [x3, #248]
    1258:	615f7172 	.inst	0x615f7172 ; undefined
    125c:	41006c6c 	.inst	0x41006c6c ; undefined
    1260:	7261556c 	.inst	0x7261556c ; undefined
    1264:	65535f74 	fcmgt	p4.h, p7/z, z27.h, z19.h
    1268:	54785274 	.inst	0x54785274 ; undefined
    126c:	67676972 	.inst	0x67676972 ; undefined
    1270:	41007265 	.inst	0x41007265 ; undefined
    1274:	61755f4c 	.inst	0x61755f4c ; undefined
    1278:	695f7472 	ldpsw	x18, x29, [x3, #248]
    127c:	41007172 	.inst	0x41007172 ; undefined
    1280:	7261556c 	.inst	0x7261556c ; undefined
    1284:	6f435f74 	.inst	0x6f435f74 ; undefined
    1288:	6769666e 	.inst	0x6769666e ; undefined
    128c:	706f7453 	adr	x19, e0117 <__stack_size+0xdc117>
    1290:	00746962 	.inst	0x00746962 ; undefined
    1294:	61556c41 	.inst	0x61556c41 ; undefined
    1298:	445f7472 	sqrdmlsh	z18.h, z3.h, z31.h
    129c:	6c617461 	ldnp	d1, d29, [x3, #-496]
    12a0:	43676e65 	.inst	0x43676e65 ; undefined
    12a4:	69666e6f 	ldpsw	x15, x27, [x19, #-208]
    12a8:	6c410067 	ldnp	d7, d0, [x3, #16]
    12ac:	74726155 	.inst	0x74726155 ; undefined
    12b0:	616e455f 	.inst	0x616e455f ; undefined
    12b4:	49656c62 	.inst	0x49656c62 ; undefined
    12b8:	41007172 	.inst	0x41007172 ; undefined
    12bc:	61755f4c 	.inst	0x61755f4c ; undefined
    12c0:	745f7472 	.inst	0x745f7472 ; undefined
    12c4:	72745f78 	.inst	0x72745f78 ; undefined
    12c8:	65676769 	fnmls	z9.h, p1/m, z27.h, z7.h
    12cc:	6c410072 	ldnp	d18, d0, [x3, #16]
    12d0:	74726155 	.inst	0x74726155 ; undefined
    12d4:	3538345f 	cbnz	wzr, 7195c <__stack_size+0x6d95c>
    12d8:	6e457852 	.inst	0x6e457852 ; undefined
    12dc:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    12e0:	556c4100 	.inst	0x556c4100 ; undefined
    12e4:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    12e8:	61736944 	.inst	0x61736944 ; undefined
    12ec:	41656c62 	.inst	0x41656c62 ; undefined
    12f0:	46006366 	.inst	0x46006366 ; undefined
    12f4:	5f4f4649 	.inst	0x5f4f4649 ; undefined
    12f8:	656c5f32 	fnmla	z18.h, p7/m, z25.h, z12.h
    12fc:	745f7373 	.inst	0x745f7373 ; undefined
    1300:	5f6e6168 	.inst	0x5f6e6168 ; undefined
    1304:	6c6c7566 	ldnp	d6, d29, [x11, #-320]
    1308:	6f747300 	fcmla	v0.8h, v24.8h, v20.h[1], #270
    130c:	74696270 	.inst	0x74696270 ; undefined
    1310:	72615500 	.inst	0x72615500 ; undefined
    1314:	76655f74 	.inst	0x76655f74 ; undefined
    1318:	5f746e65 	.inst	0x5f746e65 ; undefined
    131c:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
    1320:	0074756f 	.inst	0x0074756f ; undefined
    1324:	76746572 	.inst	0x76746572 ; undefined
    1328:	75006c61 	.inst	0x75006c61 ; undefined
    132c:	31746e69 	adds	w9, w19, #0xd1b, lsl #12
    1330:	00745f36 	.inst	0x00745f36 ; undefined
    1334:	61556c41 	.inst	0x61556c41 ; undefined
    1338:	455f7472 	smullt	z18.h, z3.b, z31.b
    133c:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    1340:	35383465 	cbnz	w5, 719cc <__stack_size+0x6d9cc>
    1344:	556c4100 	.inst	0x556c4100 ; undefined
    1348:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    134c:	62616e45 	.inst	0x62616e45 ; undefined
    1350:	6f4c656c 	sqshlu	v12.2d, v11.2d, #12
    1354:	6162706f 	.inst	0x6162706f ; undefined
    1358:	52006b63 	eor	w3, w27, #0x7ffffff
    135c:	49465f58 	.inst	0x49465f58 ; undefined
    1360:	315f4f46 	adds	w6, w26, #0x7d3, lsl #12
    1364:	665f345f 	.inst	0x665f345f ; undefined
    1368:	006c6c75 	.inst	0x006c6c75 ; undefined
    136c:	61556c41 	.inst	0x61556c41 ; undefined
    1370:	345f7472 	cbz	w18, c01fc <__stack_size+0xbc1fc>
    1374:	79543538 	ldrh	w24, [x9, #2586]
    1378:	41006570 	.inst	0x41006570 ; undefined
    137c:	7261556c 	.inst	0x7261556c ; undefined
    1380:	69445f74 	ldpsw	x20, x23, [x27, #32]
    1384:	6c626173 	ldnp	d19, d24, [x11, #-480]
    1388:	69745065 	ldpsw	x5, x20, [x3, #-96]
    138c:	5500656d 	.inst	0x5500656d ; undefined
    1390:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1394:	5f717269 	sqdmlsl	s9, h19, v1.h[3]
    1398:	65627465 	fnmls	z5.h, p5/m, z3.h, z2.h
    139c:	6c410069 	ldnp	d9, d0, [x3, #16]
    13a0:	74726155 	.inst	0x74726155 ; undefined
    13a4:	6c61485f 	ldnp	d31, d18, [x2, #-496]
    13a8:	00785474 	.inst	0x00785474 ; undefined
    13ac:	61556c41 	.inst	0x61556c41 ; undefined
    13b0:	465f7472 	.inst	0x465f7472 ; undefined
    13b4:	456f6669 	addhnt	z9.b, z19.h, z15.h
    13b8:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    13bc:	6e690065 	uaddl2	v5.4s, v3.8h, v9.8h
    13c0:	72726574 	.inst	0x72726574 ; undefined
    13c4:	73747075 	.inst	0x73747075 ; undefined
    13c8:	556c4100 	.inst	0x556c4100 ; undefined
    13cc:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    13d0:	62616e45 	.inst	0x62616e45 ; undefined
    13d4:	7450656c 	.inst	0x7450656c ; undefined
    13d8:	00656d69 	.inst	0x00656d69 ; undefined
    13dc:	61556c41 	.inst	0x61556c41 ; undefined
    13e0:	445f7472 	sqrdmlsh	z18.h, z3.h, z31.h
    13e4:	62617369 	.inst	0x62617369 ; undefined
    13e8:	7249656c 	.inst	0x7249656c ; undefined
    13ec:	61630071 	.inst	0x61630071 ; undefined
    13f0:	61626c6c 	.inst	0x61626c6c ; undefined
    13f4:	72416b63 	.inst	0x72416b63 ; undefined
    13f8:	6c410067 	ldnp	d7, d0, [x3, #16]
    13fc:	74726155 	.inst	0x74726155 ; undefined
    1400:	7465535f 	.inst	0x7465535f ; undefined
    1404:	72547854 	.inst	0x72547854 ; undefined
    1408:	65676769 	fnmls	z9.h, p1/m, z27.h, z7.h
    140c:	2e2e0072 	uaddl	v18.8h, v3.8b, v14.8b
    1410:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1414:	2f436f53 	.inst	0x2f436f53 ; undefined
    1418:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    141c:	2f636f73 	.inst	0x2f636f73 ; undefined
    1420:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    1424:	532f6e6f 	.inst	0x532f6e6f ; undefined
    1428:	6372756f 	.inst	0x6372756f ; undefined
    142c:	72442f65 	.inst	0x72442f65 ; undefined
    1430:	72657669 	.inst	0x72657669 ; undefined
    1434:	412f2f73 	.inst	0x412f2f73 ; undefined
    1438:	61755f4c 	.inst	0x61755f4c ; undefined
    143c:	632e7472 	.inst	0x632e7472 ; undefined
    1440:	5f585200 	.inst	0x5f585200 ; undefined
    1444:	4f464946 	.inst	0x4f464946 ; undefined
    1448:	325f315f 	.inst	0x325f315f ; undefined
    144c:	6c6c7566 	ldnp	d6, d29, [x11, #-320]
    1450:	556c4100 	.inst	0x556c4100 ; undefined
    1454:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1458:	72657355 	.inst	0x72657355 ; undefined
    145c:	48717249 	.inst	0x48717249 ; undefined
    1460:	6c646e61 	ldnp	d1, d27, [x19, #-448]
    1464:	41007265 	.inst	0x41007265 ; undefined
    1468:	61755f4c 	.inst	0x61755f4c ; undefined
    146c:	725f7472 	.inst	0x725f7472 ; undefined
    1470:	72745f78 	.inst	0x72745f78 ; undefined
    1474:	65676769 	fnmls	z9.h, p1/m, z27.h, z7.h
    1478:	4c410072 	.inst	0x4c410072 ; undefined
    147c:	7261755f 	.inst	0x7261755f ; undefined
    1480:	76655f74 	.inst	0x76655f74 ; undefined
    1484:	00746e65 	.inst	0x00746e65 ; undefined
    1488:	74726175 	.inst	0x74726175 ; undefined
    148c:	616d645f 	.inst	0x616d645f ; undefined
    1490:	72775f63 	.inst	0x72775f63 ; undefined
    1494:	00657469 	.inst	0x00657469 ; undefined
    1498:	61556c41 	.inst	0x61556c41 ; undefined
    149c:	525f7472 	.inst	0x525f7472 ; undefined
    14a0:	6d757365 	ldp	d5, d28, [x27, #-176]
    14a4:	00785465 	.inst	0x00785465 ; undefined
    14a8:	534c4146 	.inst	0x534c4146 ; undefined
    14ac:	61550045 	.inst	0x61550045 ; undefined
    14b0:	655f7472 	fcmne	p2.h, p5/z, z3.h, z31.h
    14b4:	746e6576 	.inst	0x746e6576 ; undefined
    14b8:	7375625f 	.inst	0x7375625f ; undefined
    14bc:	6c410079 	ldnp	d25, d0, [x3, #16]
    14c0:	5f726155 	.inst	0x5f726155 ; undefined
    14c4:	54353834 	.inst	0x54353834 ; undefined
    14c8:	616e4578 	.inst	0x616e4578 ; undefined
    14cc:	00656c62 	.inst	0x00656c62 ; undefined
    14d0:	74726175 	.inst	0x74726175 ; undefined
    14d4:	6165725f 	.inst	0x6165725f ; undefined
    14d8:	6e6f0064 	uaddl2	v4.4s, v3.8h, v15.8h
    14dc:	68635f65 	.inst	0x68635f65 ; undefined
    14e0:	63617261 	.inst	0x63617261 ; undefined
    14e4:	5f726574 	.inst	0x5f726574 ; undefined
    14e8:	745f6e69 	.inst	0x745f6e69 ; undefined
    14ec:	465f6568 	.inst	0x465f6568 ; undefined
    14f0:	004f4649 	.inst	0x004f4649 ; undefined
    14f4:	4f464946 	.inst	0x4f464946 ; undefined
    14f8:	706d655f 	adr	xzr, dc1a3 <__stack_size+0xd81a3>
    14fc:	55007974 	.inst	0x55007974 ; undefined
    1500:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1504:	5f717269 	sqdmlsl	s9, h19, v1.h[3]
    1508:	66627265 	.inst	0x66627265 ; undefined
    150c:	61550069 	.inst	0x61550069 ; undefined
    1510:	695f7472 	ldpsw	x18, x29, [x3, #248]
    1514:	655f7172 	fcmne	p2.h, p4/z, z11.h, z31.h
    1518:	0069736c 	.inst	0x0069736c ; undefined
    151c:	74726175 	.inst	0x74726175 ; undefined
    1520:	6165525f 	.inst	0x6165525f ; undefined
    1524:	71726964 	subs	w4, w11, #0xc9a, lsl #12
    1528:	62616e45 	.inst	0x62616e45 ; undefined
    152c:	5500656c 	.inst	0x5500656c ; undefined
    1530:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1534:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1538:	6f6e5f74 	.inst	0x6f6e5f74 ; undefined
    153c:	5500656e 	.inst	0x5500656e ; undefined
    1540:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1544:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1548:	68745f74 	.inst	0x68745f74 ; undefined
    154c:	52006572 	eor	w18, w11, #0x3ffffff
    1550:	69656365 	ldpsw	x5, x24, [x27, #-216]
    1554:	5f726576 	.inst	0x5f726576 ; undefined
    1558:	656e696c 	fnmls	z12.h, p2/m, z11.h, z14.h
    155c:	6174735f 	.inst	0x6174735f ; undefined
    1560:	00737574 	.inst	0x00737574 ; undefined
    1564:	74726155 	.inst	0x74726155 ; undefined
    1568:	7172695f 	cmp	w10, #0xc9a, lsl #12
    156c:	7364655f 	.inst	0x7364655f ; undefined
    1570:	41006973 	.inst	0x41006973 ; undefined
    1574:	7261556c 	.inst	0x7261556c ; undefined
    1578:	65525f74 	fcmgt	p4.h, p7/z, z27.h, z18.h
    157c:	46746573 	.inst	0x46746573 ; undefined
    1580:	006f6669 	.inst	0x006f6669 ; undefined
    1584:	74726155 	.inst	0x74726155 ; undefined
    1588:	6576655f 	fnmls	z31.h, p1/m, z10.h, z22.h
    158c:	6d5f746e 	ldp	d14, d29, [x3, #496]
    1590:	6d65646f 	ldp	d15, d25, [x3, #-432]
    1594:	556c4100 	.inst	0x556c4100 ; undefined
    1598:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    159c:	50746553 	adr	x19, ea246 <__stack_size+0xe6246>
    15a0:	74697261 	.inst	0x74697261 ; undefined
    15a4:	6c410079 	ldnp	d25, d0, [x3, #16]
    15a8:	74726155 	.inst	0x74726155 ; undefined
    15ac:	7465535f 	.inst	0x7465535f ; undefined
    15b0:	4d616d44 	.inst	0x4d616d44 ; undefined
    15b4:	0065646f 	.inst	0x0065646f ; undefined
    15b8:	45555254 	ssubwb	z20.h, z18.h, z21.b
    15bc:	72617500 	.inst	0x72617500 ; undefined
    15c0:	65730074 	fmla	z20.h, p0/m, z3.h, z19.h
    15c4:	75627674 	.inst	0x75627674 ; undefined
    15c8:	68630066 	.inst	0x68630066 ; undefined
    15cc:	63617261 	.inst	0x63617261 ; undefined
    15d0:	73726574 	.inst	0x73726574 ; undefined
    15d4:	5f6e695f 	.inst	0x5f6e695f ; undefined
    15d8:	5f656874 	.inst	0x5f656874 ; undefined
    15dc:	4f464946 	.inst	0x4f464946 ; undefined
    15e0:	5f73695f 	.inst	0x5f73695f ; undefined
    15e4:	6c410032 	ldnp	d18, d0, [x1, #16]
    15e8:	74726155 	.inst	0x74726155 ; undefined
    15ec:	7369445f 	.inst	0x7369445f ; undefined
    15f0:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    15f4:	706f6f4c 	adr	x12, e03df <__stack_size+0xdc3df>
    15f8:	6b636162 	.inst	0x6b636162 ; undefined
    15fc:	6c654400 	ldnp	d0, d17, [x0, #-432]
    1600:	6e437961 	.inst	0x6e437961 ; undefined
    1604:	744d0074 	.inst	0x744d0074 ; undefined
    1608:	72656d69 	.inst	0x72656d69 ; undefined
    160c:	5473495f 	.inst	0x5473495f ; undefined
    1610:	72656d69 	.inst	0x72656d69 ; undefined
    1614:	0074754f 	.inst	0x0074754f ; undefined
    1618:	6d69744d 	ldp	d13, d29, [x2, #-368]
    161c:	545f7265 	b.pl	c0468 <__stack_size+0xbc468>  // b.nfrst
    1620:	72656d69 	.inst	0x72656d69 ; undefined
    1624:	0074754f 	.inst	0x0074754f ; undefined
    1628:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    162c:	6f532f2e 	.inst	0x6f532f2e ; undefined
    1630:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1634:	6f736f6d 	.inst	0x6f736f6d ; undefined
    1638:	6f432f63 	.inst	0x6f432f63 ; undefined
    163c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    1640:	756f532f 	.inst	0x756f532f ; undefined
    1644:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    1648:	76697244 	.inst	0x76697244 ; undefined
    164c:	2f737265 	fcmla	v5.4h, v19.4h, v19.h[1], #270
    1650:	69746d2f 	ldpsw	x15, x27, [x9, #-96]
    1654:	2e72656d 	umax	v13.4h, v11.4h, v18.4h
    1658:	4d5f0063 	.inst	0x4d5f0063 ; undefined
    165c:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
    1660:	72615072 	.inst	0x72615072 ; undefined
    1664:	00736d61 	.inst	0x00736d61 ; undefined
    1668:	6d69744d 	ldp	d13, d29, [x2, #-368]
    166c:	495f7265 	.inst	0x495f7265 ; undefined
    1670:	0074696e 	.inst	0x0074696e ; undefined
    1674:	72617453 	.inst	0x72617453 ; undefined
    1678:	696f5074 	.inst	0x696f5074 ; undefined
    167c:	4300746e 	.inst	0x4300746e ; undefined
    1680:	6f507275 	fcmla	v21.8h, v19.8h, v16.h[0], #270
    1684:	00746e69 	.inst	0x00746e69 ; undefined
    1688:	6d69744d 	ldp	d13, d29, [x2, #-368]
    168c:	4d007265 	st3	{v5.h-v7.h}[6], [x19]
    1690:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
    1694:	74535f72 	.inst	0x74535f72 ; undefined
    1698:	00747261 	.inst	0x00747261 ; undefined
    169c:	6d69744d 	ldp	d13, d29, [x2, #-368]
    16a0:	445f7265 	sqrdmlah	z5.h, z19.h, z31.h
    16a4:	79616c65 	ldrh	w5, [x3, #4278]
    16a8:	6f635400 	sli	v0.2d, v0.2d, #35
    16ac:	6d75736e 	ldp	d14, d28, [x27, #-176]
    16b0:	52006465 	eor	w5, w3, #0x3ffffff
    16b4:	6f6c4264 	mls	v4.8h, v19.8h, v12.h[2]
    16b8:	694d6b63 	ldpsw	x3, x26, [x27, #104]
    16bc:	696c6173 	ldpsw	x19, x24, [x11, #-160]
    16c0:	43006e67 	.inst	0x43006e67 ; undefined
    16c4:	545f4453 	.inst	0x545f4453 ; undefined
    16c8:	65006261 	.inst	0x65006261 ; undefined
    16cc:	726f7272 	.inst	0x726f7272 ; undefined
    16d0:	746e695f 	.inst	0x746e695f ; undefined
    16d4:	6174735f 	.inst	0x6174735f ; undefined
    16d8:	6e655f74 	uqrshl	v20.8h, v27.8h, v5.8h
    16dc:	5f5f725f 	sqdmlsl	s31, h18, v15.h[1]
    16e0:	6d726f6e 	ldp	d14, d27, [x27, #-224]
    16e4:	695f6c61 	ldpsw	x1, x27, [x3, #248]
    16e8:	735f746e 	.inst	0x735f746e ; undefined
    16ec:	5f746174 	.inst	0x5f746174 ; undefined
    16f0:	62006e65 	.inst	0x62006e65 ; undefined
    16f4:	775f6675 	.inst	0x775f6675 ; undefined
    16f8:	6e655f72 	uqrshl	v18.8h, v27.8h, v5.8h
    16fc:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    1700:	76737200 	.inst	0x76737200 ; undefined
    1704:	6c625f64 	ldnp	d4, d23, [x27, #-480]
    1708:	736b636f 	.inst	0x736b636f ; undefined
    170c:	31657a69 	adds	w9, w19, #0x95e, lsl #12
    1710:	6e690035 	uaddl2	v21.4s, v1.8h, v9.8h
    1714:	5f635f74 	.inst	0x5f635f74 ; undefined
    1718:	74617473 	.inst	0x74617473 ; undefined
    171c:	006e655f 	.inst	0x006e655f ; undefined
    1720:	5f627573 	sqshl	d19, d11, #34
    1724:	5f646d63 	.inst	0x5f646d63 ; undefined
    1728:	67616c66 	.inst	0x67616c66 ; undefined
    172c:	736f4800 	.inst	0x736f4800 ; undefined
    1730:	6e6f4374 	raddhn2	v20.8h, v27.4s, v15.4s
    1734:	6c6f7274 	ldnp	d20, d28, [x19, #-272]
    1738:	5372656c 	.inst	0x5372656c ; undefined
    173c:	70757465 	adr	x5, ec5cb <__stack_size+0xe85cb>
    1740:	646d6300 	.inst	0x646d6300 ; undefined
    1744:	6372635f 	.inst	0x6372635f ; undefined
    1748:	7272655f 	.inst	0x7272655f ; undefined
    174c:	6174735f 	.inst	0x6174735f ; undefined
    1750:	6e655f74 	uqrshl	v20.8h, v27.8h, v5.8h
    1754:	76726400 	.inst	0x76726400 ; undefined
    1758:	6c65735f 	ldnp	d31, d28, [x26, #-432]
    175c:	6c61765f 	ldnp	d31, d29, [x18, #-496]
    1760:	0073645f 	.inst	0x0073645f ; undefined
    1764:	5f727563 	sqshl	d3, d11, #50
    1768:	5f746d6c 	.inst	0x5f746d6c ; undefined
    176c:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    1770:	74617473 	.inst	0x74617473 ; undefined
    1774:	006e655f 	.inst	0x006e655f ; undefined
    1778:	5f646d63 	.inst	0x5f646d63 ; undefined
    177c:	65707974 	fnmls	z20.h, p6/m, z11.h, z16.h
    1780:	646d6300 	.inst	0x646d6300 ; undefined
    1784:	756f745f 	.inst	0x756f745f ; undefined
    1788:	72655f74 	.inst	0x72655f74 ; undefined
    178c:	74735f72 	.inst	0x74735f72 ; undefined
    1790:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    1794:	4d4d006e 	.inst	0x4d4d006e ; undefined
    1798:	4d435f43 	.inst	0x4d435f43 ; undefined
    179c:	44495f44 	umlslt	z4.h, z26.b, z9.b
    17a0:	52455f58 	.inst	0x52455f58 ; undefined
    17a4:	69460052 	ldpsw	x18, x0, [x2, #48]
    17a8:	6f46656c 	sqshlu	v12.2d, v11.2d, #6
    17ac:	74616d72 	.inst	0x74616d72 ; undefined
    17b0:	756f7247 	.inst	0x756f7247 ; undefined
    17b4:	6300706f 	.inst	0x6300706f ; undefined
    17b8:	695f646d 	ldpsw	x13, x25, [x3, #248]
    17bc:	6269686e 	.inst	0x6269686e ; undefined
    17c0:	64007469 	.inst	0x64007469 ; undefined
    17c4:	5f617461 	sqshl	d1, d3, #33
    17c8:	5f637263 	sqdmlsl	s3, h19, v3.h[2]
    17cc:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    17d0:	6e676973 	.inst	0x6e676973 ; undefined
    17d4:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    17d8:	6f66006e 	mla	v14.8h, v3.8h, v6.h[2]
    17dc:	5f656372 	.inst	0x5f656372 ; undefined
    17e0:	61746164 	.inst	0x61746164 ; undefined
    17e4:	6372635f 	.inst	0x6372635f ; undefined
    17e8:	7272655f 	.inst	0x7272655f ; undefined
    17ec:	756f7400 	.inst	0x756f7400 ; undefined
    17f0:	6c635f74 	ldnp	d20, d23, [x27, #-464]
    17f4:	6e755f6b 	uqrshl	v11.8h, v27.8h, v21.8h
    17f8:	73007469 	.inst	0x73007469 ; undefined
    17fc:	5f706f74 	.inst	0x5f706f74 ; undefined
    1800:	725f6762 	.inst	0x725f6762 ; undefined
    1804:	77007165 	.inst	0x77007165 ; undefined
    1808:	5f746961 	.inst	0x5f746961 ; undefined
    180c:	6d6d6f63 	ldp	d3, d27, [x27, #-304]
    1810:	5f646e61 	.inst	0x5f646e61 ; undefined
    1814:	706d6f63 	adr	x3, dc603 <__stack_size+0xd8603>
    1818:	6574656c 	fnmls	z12.h, p1/m, z11.h, z20.h
    181c:	72616300 	.inst	0x72616300 ; undefined
    1820:	666e6964 	.inst	0x666e6964 ; undefined
    1824:	6f62006f 	mla	v15.8h, v3.8h, v2.h[2]
    1828:	615f746f 	.inst	0x615f746f ; undefined
    182c:	655f6b63 	fcmeq	p3.h, p2/z, z27.h, z31.h
    1830:	735f7272 	.inst	0x735f7272 ; undefined
    1834:	616e6769 	.inst	0x616e6769 ; undefined
    1838:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    183c:	4d454f00 	.inst	0x4d454f00 ; undefined
    1840:	7070415f 	adr	xzr, e206b <__stack_size+0xde06b>
    1844:	4449696c 	sqdmlslb	z12.h, z11.b, z9.b
    1848:	72655000 	.inst	0x72655000 ; undefined
    184c:	5072576d 	adr	x13, e633a <__stack_size+0xe233a>
    1850:	65746f72 	fnmls	z18.h, p3/m, z27.h, z20.h
    1854:	72007463 	ands	w3, w3, #0x3fffffff
    1858:	615f6765 	.inst	0x615f6765 ; undefined
    185c:	65726464 	fnmls	z4.h, p1/m, z3.h, z18.h
    1860:	63007373 	.inst	0x63007373 ; undefined
    1864:	655f646d 	fcmeq	p13.h, p1/z, z3.h, z31.h
    1868:	625f646e 	.inst	0x625f646e ; undefined
    186c:	655f7469 	fcmeq	p9.h, p5/z, z3.h, z31.h
    1870:	735f7272 	.inst	0x735f7272 ; undefined
    1874:	5f746174 	.inst	0x5f746174 ; undefined
    1878:	66006e65 	.inst	0x66006e65 ; undefined
    187c:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    1880:	7475615f 	.inst	0x7475615f ; undefined
    1884:	6d635f6f 	ldp	d15, d23, [x27, #-464]
    1888:	6f745f64 	.inst	0x6f745f64 ; undefined
    188c:	655f7475 	fcmne	p5.h, p5/z, z3.h, z31.h
    1890:	78007272 	sturh	w18, [x19, #7]
    1894:	5f726566 	.inst	0x5f726566 ; undefined
    1898:	636f6c62 	.inst	0x636f6c62 ; undefined
    189c:	69735f6b 	ldpsw	x11, x23, [x27, #-104]
    18a0:	6100657a 	.inst	0x6100657a ; undefined
    18a4:	5f616d64 	.inst	0x5f616d64 ; undefined
    18a8:	6c5f6173 	ldnp	d19, d24, [x11, #496]
    18ac:	725f776f 	.inst	0x725f776f ; undefined
    18b0:	726f6600 	.inst	0x726f6600 ; undefined
    18b4:	615f6563 	.inst	0x615f6563 ; undefined
    18b8:	5f6f7475 	sqshl	d21, d3, #47
    18bc:	5f646d63 	.inst	0x5f646d63 ; undefined
    18c0:	74696265 	.inst	0x74696265 ; undefined
    18c4:	7272655f 	.inst	0x7272655f ; undefined
    18c8:	72726500 	.inst	0x72726500 ; undefined
    18cc:	6174735f 	.inst	0x6174735f ; undefined
    18d0:	66006574 	.inst	0x66006574 ; undefined
    18d4:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    18d8:	646d635f 	.inst	0x646d635f ; undefined
    18dc:	7864695f 	ldrh	wzr, [x10, x4]
    18e0:	7272655f 	.inst	0x7272655f ; undefined
    18e4:	746e6900 	.inst	0x746e6900 ; undefined
    18e8:	735f625f 	.inst	0x735f625f ; undefined
    18ec:	616e6769 	.inst	0x616e6769 ; undefined
    18f0:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    18f4:	69617700 	ldpsw	x0, x29, [x24, #-248]
    18f8:	6c635f74 	ldnp	d20, d23, [x27, #-464]
    18fc:	5f6b636f 	.inst	0x5f6b636f ; undefined
    1900:	62617473 	.inst	0x62617473 ; undefined
    1904:	4d00656c 	.inst	0x4d00656c ; undefined
    1908:	445f434d 	smlalb	z13.h, z26.b, z31.b
    190c:	5f415441 	shl	d1, d2, #1
    1910:	5f444e45 	.inst	0x5f444e45 ; undefined
    1914:	5f544942 	.inst	0x5f544942 ; undefined
    1918:	00525245 	.inst	0x00525245 ; undefined
    191c:	63726f66 	.inst	0x63726f66 ; undefined
    1920:	64615f65 	.inst	0x64615f65 ; undefined
    1924:	655f616d 	fcmeq	p13.h, p0/z, z11.h, z31.h
    1928:	63007272 	.inst	0x63007272 ; undefined
    192c:	5f647261 	sqdmlsl	s1, h19, v4.h[2]
    1930:	65736e69 	fnmls	z9.h, p3/m, z19.h, z19.h
    1934:	6f697472 	uqshl	v18.2d, v3.2d, #41
    1938:	69735f6e 	ldpsw	x14, x23, [x27, #-104]
    193c:	6c616e67 	ldnp	d7, d27, [x19, #-496]
    1940:	006e655f 	.inst	0x006e655f ; undefined
    1944:	5f646d63 	.inst	0x5f646d63 ; undefined
    1948:	5f786469 	.inst	0x5f786469 ; undefined
    194c:	5f6b6863 	.inst	0x5f6b6863 ; undefined
    1950:	62616e65 	.inst	0x62616e65 ; undefined
    1954:	6200656c 	.inst	0x6200656c ; undefined
    1958:	6b636f6c 	.inst	0x6b636f6c ; undefined
    195c:	756f635f 	.inst	0x756f635f ; undefined
    1960:	655f746e 	fcmeq	p14.h, p5/z, z3.h, z31.h
    1964:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    1968:	6f660065 	mla	v5.8h, v3.8h, v6.h[2]
    196c:	5f656372 	.inst	0x5f656372 ; undefined
    1970:	70736572 	adr	x18, e861f <__stack_size+0xe461f>
    1974:	7272655f 	.inst	0x7272655f ; undefined
    1978:	6f6f6200 	umlsl2	v0.4s, v16.8h, v15.h[2]
    197c:	63615f74 	.inst	0x63615f74 ; undefined
    1980:	72655f6b 	.inst	0x72655f6b ; undefined
    1984:	74735f72 	.inst	0x74735f72 ; undefined
    1988:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    198c:	7562006e 	.inst	0x7562006e ; undefined
    1990:	64725f66 	.inst	0x64725f66 ; undefined
    1994:	6165725f 	.inst	0x6165725f ; undefined
    1998:	54007964 	b.mi	28c4 <__stack_size-0x173c>  // b.first
    199c:	57706d65 	.inst	0x57706d65 ; undefined
    19a0:	6f725072 	fcmla	v18.8h, v3.8h, v18.h[1], #180
    19a4:	74636574 	.inst	0x74636574 ; undefined
    19a8:	434d4d00 	.inst	0x434d4d00 ; undefined
    19ac:	444d435f 	smlalb	z31.h, z26.b, z13.b
    19b0:	4d49545f 	.inst	0x4d49545f ; undefined
    19b4:	54554f45 	b.pl	ac39c <__stack_size+0xa839c>  // b.nfrst
    19b8:	64656c00 	.inst	0x64656c00 ; undefined
    19bc:	7274635f 	.inst	0x7274635f ; undefined
    19c0:	4154006c 	.inst	0x4154006c ; undefined
    19c4:	44004341 	.inst	0x44004341 ; undefined
    19c8:	63697665 	.inst	0x63697665 ; undefined
    19cc:	7a695365 	.inst	0x7a695365 ; undefined
    19d0:	614d0065 	.inst	0x614d0065 ; undefined
    19d4:	6166756e 	.inst	0x6166756e ; undefined
    19d8:	61447463 	.inst	0x61447463 ; undefined
    19dc:	42006574 	.inst	0x42006574 ; undefined
    19e0:	4b434f4c 	sub	w12, w26, w3, lsr #19
    19e4:	4e554f43 	.inst	0x4e554f43 ; undefined
    19e8:	5f525f54 	.inst	0x5f525f54 ; undefined
    19ec:	4f4c425f 	.inst	0x4f4c425f ; undefined
    19f0:	49534b43 	.inst	0x49534b43 ; undefined
    19f4:	525f455a 	.inst	0x525f455a ; undefined
    19f8:	6d646100 	ldp	d0, d24, [x8, #-448]
    19fc:	72655f61 	.inst	0x72655f61 ; undefined
    1a00:	74735f72 	.inst	0x74735f72 ; undefined
    1a04:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    1a08:	7257006e 	.inst	0x7257006e ; undefined
    1a0c:	636f6c42 	.inst	0x636f6c42 ; undefined
    1a10:	73694d6b 	.inst	0x73694d6b ; undefined
    1a14:	67696c61 	.inst	0x67696c61 ; undefined
    1a18:	7257006e 	.inst	0x7257006e ; undefined
    1a1c:	746f7250 	.inst	0x746f7250 ; undefined
    1a20:	47746365 	.inst	0x47746365 ; undefined
    1a24:	7a695372 	.inst	0x7a695372 ; undefined
    1a28:	6f480065 	mla	v5.8h, v3.8h, v8.h[0]
    1a2c:	6f437473 	uqshl	v19.2d, v3.2d, #3
    1a30:	6f72746e 	uqshl	v14.2d, v3.2d, #50
    1a34:	72656c6c 	.inst	0x72656c6c ; undefined
    1a38:	636f6c43 	.inst	0x636f6c43 ; undefined
    1a3c:	7465536b 	.inst	0x7465536b ; undefined
    1a40:	69007075 	stgp	x21, x28, [x3]
    1a44:	615f746e 	.inst	0x615f746e ; undefined
    1a48:	746e6900 	.inst	0x746e6900 ; undefined
    1a4c:	6900625f 	stgp	xzr, x24, [x18]
    1a50:	635f746e 	.inst	0x635f746e ; undefined
    1a54:	5f786600 	.inst	0x5f786600 ; undefined
    1a58:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1a5c:	74735f74 	.inst	0x74735f74 ; undefined
    1a60:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    1a64:	5543006e 	.inst	0x5543006e ; undefined
    1a68:	435f5252 	.inst	0x435f5252 ; undefined
    1a6c:	42415041 	.inst	0x42415041 ; undefined
    1a70:	54494c49 	b.ls	943f8 <__stack_size+0x903f8>  // b.plast
    1a74:	32534549 	.inst	0x32534549 ; undefined
    1a78:	6800525f 	.inst	0x6800525f ; undefined
    1a7c:	5f74736f 	sqdmlsl	s15, h27, v4.h[3]
    1a80:	34726576 	cbz	w22, e672c <__stack_size+0xe272c>
    1a84:	616e655f 	.inst	0x616e655f ; undefined
    1a88:	00656c62 	.inst	0x00656c62 ; undefined
    1a8c:	775f6472 	.inst	0x775f6472 ; undefined
    1a90:	5f746961 	.inst	0x5f746961 ; undefined
    1a94:	6c727463 	ldnp	d3, d29, [x3, #-224]
    1a98:	72616300 	.inst	0x72616300 ; undefined
    1a9c:	65645f64 	fnmla	z4.h, p7/m, z27.h, z4.h
    1aa0:	74636574 	.inst	0x74636574 ; undefined
    1aa4:	6769735f 	.inst	0x6769735f ; undefined
    1aa8:	6c65735f 	ldnp	d31, d28, [x26, #-432]
    1aac:	44494300 	smlalb	z0.h, z24.b, z9.b
    1ab0:	4352435f 	.inst	0x4352435f ; undefined
    1ab4:	434d4d00 	.inst	0x434d4d00 ; undefined
    1ab8:	4d44415f 	.inst	0x4d44415f ; undefined
    1abc:	52455f41 	.inst	0x52455f41 ; undefined
    1ac0:	614d0052 	.inst	0x614d0052 ; undefined
    1ac4:	42725778 	.inst	0x42725778 ; undefined
    1ac8:	6b636f6c 	.inst	0x6b636f6c ; undefined
    1acc:	006e654c 	.inst	0x006e654c ; undefined
    1ad0:	655f7866 	fcmeq	p6.h, p6/z, z3.h, z31.h
    1ad4:	746e6576 	.inst	0x746e6576 ; undefined
    1ad8:	6b6c6300 	.inst	0x6b6c6300 ; undefined
    1adc:	6e65675f 	umax	v31.8h, v26.8h, v5.8h
    1ae0:	6c65735f 	ldnp	d31, d28, [x26, #-432]
    1ae4:	6c61765f 	ldnp	d31, d29, [x18, #-496]
    1ae8:	696e695f 	ldpsw	xzr, x26, [x10, #-144]
    1aec:	73720074 	.inst	0x73720074 ; undefined
    1af0:	365f6476 	tbz	w22, #11, 77c <__stack_size-0x3884>
    1af4:	30345f33 	adr	x19, 6a6d9 <__stack_size+0x666d9>
    1af8:	66756200 	.inst	0x66756200 ; undefined
    1afc:	5f64725f 	sqdmlsl	s31, h18, v4.h[2]
    1b00:	64616572 	.inst	0x64616572 ; undefined
    1b04:	74735f79 	.inst	0x74735f79 ; undefined
    1b08:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    1b0c:	616d006e 	.inst	0x616d006e ; undefined
    1b10:	75635f78 	.inst	0x75635f78 ; undefined
    1b14:	38315f72 	.inst	0x38315f72 ; undefined
    1b18:	75620076 	.inst	0x75620076 ; undefined
    1b1c:	72775f66 	.inst	0x72775f66 ; undefined
    1b20:	6165725f 	.inst	0x6165725f ; undefined
    1b24:	72007964 	ands	w4, w11, #0x7fffffff
    1b28:	5f647673 	sqshl	d19, d19, #36
    1b2c:	4d003531 	st3	{v17.b-v19.b}[13], [x9]
    1b30:	435f434d 	.inst	0x435f434d ; undefined
    1b34:	4c5f5255 	.inst	0x4c5f5255 ; undefined
    1b38:	455f544d 	ssubwt	z13.h, z2.h, z31.b
    1b3c:	61005252 	.inst	0x61005252 ; undefined
    1b40:	636e7973 	.inst	0x636e7973 ; undefined
    1b44:	746e695f 	.inst	0x746e695f ; undefined
    1b48:	616e655f 	.inst	0x616e655f ; undefined
    1b4c:	00656c62 	.inst	0x00656c62 ; undefined
    1b50:	5f676572 	.inst	0x5f676572 ; undefined
    1b54:	74616477 	.inst	0x74616477 ; undefined
    1b58:	77730061 	.inst	0x77730061 ; undefined
    1b5c:	7473725f 	.inst	0x7473725f ; undefined
    1b60:	646d635f 	.inst	0x646d635f ; undefined
    1b64:	6e657600 	uabd	v0.8h, v16.8h, v5.8h
    1b68:	5f726f64 	.inst	0x5f726f64 ; undefined
    1b6c:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    1b70:	6e676973 	.inst	0x6e676973 ; undefined
    1b74:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    1b78:	6400336e 	.inst	0x6400336e ; undefined
    1b7c:	695f616d 	ldpsw	x13, x24, [x11, #248]
    1b80:	7265746e 	.inst	0x7265746e ; undefined
    1b84:	74707572 	.inst	0x74707572 ; undefined
    1b88:	6769735f 	.inst	0x6769735f ; undefined
    1b8c:	5f6c616e 	.inst	0x5f6c616e ; undefined
    1b90:	73006e65 	.inst	0x73006e65 ; undefined
    1b94:	725f7375 	.inst	0x725f7375 ; undefined
    1b98:	735f7365 	.inst	0x735f7365 ; undefined
    1b9c:	6f707075 	fcmla	v21.8h, v3.8h, v16.h[1], #270
    1ba0:	73007472 	.inst	0x73007472 ; undefined
    1ba4:	30317264 	adr	x4, 649f1 <__stack_size+0x609f1>
    1ba8:	75735f34 	.inst	0x75735f34 ; undefined
    1bac:	726f7070 	.inst	0x726f7070 ; undefined
    1bb0:	72650074 	.inst	0x72650074 ; undefined
    1bb4:	5f726f72 	.inst	0x5f726f72 ; undefined
    1bb8:	5f746e69 	.inst	0x5f746e69 ; undefined
    1bbc:	74617473 	.inst	0x74617473 ; undefined
    1bc0:	5f5f725f 	sqdmlsl	s31, h18, v15.h[1]
    1bc4:	6d726f6e 	ldp	d14, d27, [x27, #-224]
    1bc8:	695f6c61 	ldpsw	x1, x27, [x3, #248]
    1bcc:	735f746e 	.inst	0x735f746e ; undefined
    1bd0:	00746174 	.inst	0x00746174 ; undefined
    1bd4:	4f494453 	.inst	0x4f494453 ; undefined
    1bd8:	6d646100 	ldp	d0, d24, [x8, #-448]
    1bdc:	72655f61 	.inst	0x72655f61 ; undefined
    1be0:	69735f72 	ldpsw	x18, x23, [x27, #-104]
    1be4:	6c616e67 	ldnp	d7, d27, [x19, #-496]
    1be8:	006e655f 	.inst	0x006e655f ; undefined
    1bec:	6d5f4c41 	ldp	d1, d19, [x2, #496]
    1bf0:	632e636d 	.inst	0x632e636d ; undefined
    1bf4:	43574400 	.inst	0x43574400 ; undefined
    1bf8:	68736d5f 	.inst	0x68736d5f ; undefined
    1bfc:	6c625f63 	ldnp	d3, d23, [x27, #-480]
    1c00:	5f6b636f 	.inst	0x5f6b636f ; undefined
    1c04:	69676572 	ldpsw	x18, x25, [x11, #-200]
    1c08:	72657473 	.inst	0x72657473 ; undefined
    1c0c:	75620073 	.inst	0x75620073 ; undefined
    1c10:	64725f66 	.inst	0x64725f66 ; undefined
    1c14:	6165725f 	.inst	0x6165725f ; undefined
    1c18:	735f7964 	.inst	0x735f7964 ; undefined
    1c1c:	616e6769 	.inst	0x616e6769 ; undefined
    1c20:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    1c24:	6d646100 	ldp	d0, d24, [x8, #-448]
    1c28:	6c5f3261 	ldnp	d1, d12, [x19, #496]
    1c2c:	6d5f6e65 	ldp	d5, d27, [x19, #496]
    1c30:	0065646f 	.inst	0x0065646f ; undefined
    1c34:	656e616c 	fnmls	z12.h, p0/m, z11.h, z14.h
    1c38:	6e79735f 	uabdl2	v31.4s, v26.8h, v25.8h
    1c3c:	6f660063 	mla	v3.8h, v3.8h, v6.h[2]
    1c40:	5f656372 	.inst	0x5f656372 ; undefined
    1c44:	6f747561 	uqshl	v1.2d, v11.2d, #52
    1c48:	646d635f 	.inst	0x646d635f ; undefined
    1c4c:	6174735f 	.inst	0x6174735f ; undefined
    1c50:	00725f74 	.inst	0x00725f74 ; undefined
    1c54:	73657270 	.inst	0x73657270 ; undefined
    1c58:	645f7465 	fcmla	z5.h, p5/m, z3.h, z31.h, #270
    1c5c:	30357264 	adr	x4, 6caa9 <__stack_size+0x68aa9>
    1c60:	5f5f725f 	sqdmlsl	s31, h18, v15.h[1]
    1c64:	73657270 	.inst	0x73657270 ; undefined
    1c68:	735f7465 	.inst	0x735f7465 ; undefined
    1c6c:	30317264 	adr	x4, 64ab9 <__stack_size+0x60ab9>
    1c70:	6d630034 	ldp	d20, d0, [x1, #-464]
    1c74:	6e655f64 	uqrshl	v4.8h, v27.8h, v5.8h
    1c78:	69625f64 	ldpsw	x4, x23, [x27, #-240]
    1c7c:	72655f74 	.inst	0x72655f74 ; undefined
    1c80:	69735f72 	ldpsw	x18, x23, [x27, #-104]
    1c84:	6c616e67 	ldnp	d7, d27, [x19, #-496]
    1c88:	006e655f 	.inst	0x006e655f ; undefined
    1c8c:	64726163 	.inst	0x64726163 ; undefined
    1c90:	736e695f 	.inst	0x736e695f ; undefined
    1c94:	69747265 	ldpsw	x5, x28, [x19, #-96]
    1c98:	735f6e6f 	.inst	0x735f6e6f ; undefined
    1c9c:	5f746174 	.inst	0x5f746174 ; undefined
    1ca0:	43006e65 	.inst	0x43006e65 ; undefined
    1ca4:	525f444d 	.inst	0x525f444d ; undefined
    1ca8:	46585f5f 	.inst	0x46585f5f ; undefined
    1cac:	4d5f5245 	.inst	0x4d5f5245 ; undefined
    1cb0:	5f45444f 	.inst	0x5f45444f ; undefined
    1cb4:	6e690052 	uaddl2	v18.4s, v2.8h, v9.8h
    1cb8:	5f615f74 	.inst	0x5f615f74 ; undefined
    1cbc:	6e676973 	.inst	0x6e676973 ; undefined
    1cc0:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    1cc4:	6572006e 	fmla	z14.h, p0/m, z3.h, z18.h
    1cc8:	31307073 	adds	w19, w3, #0xc1c
    1ccc:	70757700 	adr	x0, ecbaf <__stack_size+0xe8baf>
    1cd0:	7274635f 	.inst	0x7274635f ; undefined
    1cd4:	5f725f6c 	.inst	0x5f725f6c ; undefined
    1cd8:	6167625f 	.inst	0x6167625f ; undefined
    1cdc:	74635f70 	.inst	0x74635f70 ; undefined
    1ce0:	725f6c72 	.inst	0x725f6c72 ; undefined
    1ce4:	77705f5f 	.inst	0x77705f5f ; undefined
    1ce8:	74635f72 	.inst	0x74635f72 ; undefined
    1cec:	725f6c72 	.inst	0x725f6c72 ; undefined
    1cf0:	6f685f5f 	.inst	0x6f685f5f ; undefined
    1cf4:	635f7473 	.inst	0x635f7473 ; undefined
    1cf8:	316c7274 	adds	w20, w19, #0xb1c, lsl #12
    1cfc:	726f6600 	.inst	0x726f6600 ; undefined
    1d00:	615f6563 	.inst	0x615f6563 ; undefined
    1d04:	5f6f7475 	sqshl	d21, d3, #47
    1d08:	5f646d63 	.inst	0x5f646d63 ; undefined
    1d0c:	70736572 	adr	x18, e89bb <__stack_size+0xe49bb>
    1d10:	7272655f 	.inst	0x7272655f ; undefined
    1d14:	72616300 	.inst	0x72616300 ; undefined
    1d18:	65645f64 	fnmla	z4.h, p7/m, z27.h, z4.h
    1d1c:	74636574 	.inst	0x74636574 ; undefined
    1d20:	7365745f 	.inst	0x7365745f ; undefined
    1d24:	766c5f74 	.inst	0x766c5f74 ; undefined
    1d28:	7264006c 	.inst	0x7264006c ; undefined
    1d2c:	65735f76 	fnmla	z22.h, p7/m, z27.h, z19.h
    1d30:	61765f6c 	.inst	0x61765f6c ; undefined
    1d34:	00305f6c 	.inst	0x00305f6c ; NYI
    1d38:	64767372 	.inst	0x64767372 ; undefined
    1d3c:	0030325f 	.inst	0x0030325f ; NYI
    1d40:	74736f68 	.inst	0x74736f68 ; undefined
    1d44:	6765725f 	.inst	0x6765725f ; undefined
    1d48:	6c6f765f 	ldnp	d31, d29, [x18, #-272]
    1d4c:	76737200 	.inst	0x76737200 ; undefined
    1d50:	36325f64 	tbz	w4, #6, 693c <__stack_size+0x293c>
    1d54:	74616400 	.inst	0x74616400 ; undefined
    1d58:	72705f61 	.inst	0x72705f61 ; undefined
    1d5c:	6e657365 	uabdl2	v5.4s, v27.8h, v5.8h
    1d60:	65735f74 	fnmla	z20.h, p7/m, z27.h, z19.h
    1d64:	6f74006c 	mla	v12.8h, v3.8h, v4.h[3]
    1d68:	635f7475 	.inst	0x635f7475 ; undefined
    1d6c:	4d00746e 	.inst	0x4d00746e ; undefined
    1d70:	72577861 	.inst	0x72577861 ; undefined
    1d74:	72727543 	.inst	0x72727543 ; undefined
    1d78:	56746e65 	.inst	0x56746e65 ; undefined
    1d7c:	614d4444 	.inst	0x614d4444 ; undefined
    1d80:	75630078 	.inst	0x75630078 ; undefined
    1d84:	635f7272 	.inst	0x635f7272 ; undefined
    1d88:	62617061 	.inst	0x62617061 ; undefined
    1d8c:	74696c69 	.inst	0x74696c69 ; undefined
    1d90:	32736569 	.inst	0x32736569 ; undefined
    1d94:	6e614d00 	uqshl	v0.8h, v8.8h, v1.8h
    1d98:	63616675 	.inst	0x63616675 ; undefined
    1d9c:	65727574 	fnmls	z20.h, p5/m, z11.h, z18.h
    1da0:	00444972 	.inst	0x00444972 ; undefined
    1da4:	5f657375 	sqdmlsl	s21, h27, v5.h[2]
    1da8:	696e7574 	ldpsw	x20, x29, [x11, #-144]
    1dac:	735f676e 	.inst	0x735f676e ; undefined
    1db0:	30357264 	adr	x4, 6cbfd <__stack_size+0x68bfd>
    1db4:	76654400 	.inst	0x76654400 ; undefined
    1db8:	53656369 	.inst	0x53656369 ; undefined
    1dbc:	4d657a69 	.inst	0x4d657a69 ; undefined
    1dc0:	73006c75 	.inst	0x73006c75 ; undefined
    1dc4:	73616d64 	.inst	0x73616d64 ; undefined
    1dc8:	00725f61 	.inst	0x00725f61 ; undefined
    1dcc:	696e7574 	ldpsw	x20, x29, [x11, #-144]
    1dd0:	655f676e 	fcmeq	p14.h, p1/z, z27.h, z31.h
    1dd4:	735f7272 	.inst	0x735f7272 ; undefined
    1dd8:	616e6769 	.inst	0x616e6769 ; undefined
    1ddc:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    1de0:	74616400 	.inst	0x74616400 ; undefined
    1de4:	66785f61 	.inst	0x66785f61 ; undefined
    1de8:	645f7265 	fcmla	z5.h, p4/m, z19.h, z31.h, #270
    1dec:	53007269 	ubfx	w9, w19, #0, #29
    1df0:	49435f44 	.inst	0x49435f44 ; undefined
    1df4:	61630044 	.inst	0x61630044 ; undefined
    1df8:	695f6472 	ldpsw	x18, x25, [x3, #248]
    1dfc:	7265736e 	.inst	0x7265736e ; undefined
    1e00:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    1e04:	78614d00 	.inst	0x78614d00 ; undefined
    1e08:	75436452 	.inst	0x75436452 ; undefined
    1e0c:	6e657272 	uabdl2	v18.4s, v19.8h, v5.8h
    1e10:	44445674 	smlslt	z20.h, z19.b, z4.b
    1e14:	006e694d 	.inst	0x006e694d ; undefined
    1e18:	64726143 	.inst	0x64726143 ; undefined
    1e1c:	61706143 	.inst	0x61706143 ; undefined
    1e20:	79746963 	ldrh	w3, [x11, #6708]
    1e24:	76737200 	.inst	0x76737200 ; undefined
    1e28:	35315f64 	cbnz	w4, 64a14 <__stack_size+0x60a14>
    1e2c:	4d00385f 	st3	{v31.b, v0.b, v1.b}[14], [x2]
    1e30:	525f434d 	.inst	0x525f434d ; undefined
    1e34:	5f505345 	.inst	0x5f505345 ; undefined
    1e38:	00525245 	.inst	0x00525245 ; undefined
    1e3c:	64726163 	.inst	0x64726163 ; undefined
    1e40:	7465645f 	.inst	0x7465645f ; undefined
    1e44:	5f746365 	.inst	0x5f746365 ; undefined
    1e48:	5f6e6970 	.inst	0x5f6e6970 ; undefined
    1e4c:	6576656c 	fnmls	z12.h, p1/m, z11.h, z22.h
    1e50:	614d006c 	.inst	0x614d006c ; undefined
    1e54:	43725778 	.inst	0x43725778 ; undefined
    1e58:	65727275 	fnmls	z21.h, p4/m, z19.h, z18.h
    1e5c:	4456746e 	sqrdmlsh	z14.h, z3.h, z22.h
    1e60:	6e694d44 	uqshl	v4.8h, v10.8h, v9.8h
    1e64:	434d4d00 	.inst	0x434d4d00 ; undefined
    1e68:	4941575f 	.inst	0x4941575f ; undefined
    1e6c:	4c435f54 	.inst	0x4c435f54 ; undefined
    1e70:	54535f4b 	b.lt	a8a58 <__stack_size+0xa4a58>  // b.tstop
    1e74:	454c4241 	saddwb	z1.h, z18.h, z12.b
    1e78:	4d49545f 	.inst	0x4d49545f ; undefined
    1e7c:	54554f45 	b.pl	ac864 <__stack_size+0xa8864>  // b.nfrst
    1e80:	67657200 	.inst	0x67657200 ; undefined
    1e84:	6165725f 	.inst	0x6165725f ; undefined
    1e88:	4d4d0064 	.inst	0x4d4d0064 ; undefined
    1e8c:	4d435f43 	.inst	0x4d435f43 ; undefined
    1e90:	4f545f44 	.inst	0x4f545f44 ; undefined
    1e94:	455f5455 	ssubwt	z21.h, z2.h, z31.b
    1e98:	77005252 	.inst	0x77005252 ; undefined
    1e9c:	66785f72 	.inst	0x66785f72 ; undefined
    1ea0:	615f7265 	.inst	0x615f7265 ; undefined
    1ea4:	76697463 	.inst	0x76697463 ; undefined
    1ea8:	4d4d0065 	.inst	0x4d4d0065 ; undefined
    1eac:	41445f43 	.inst	0x41445f43 ; undefined
    1eb0:	545f4154 	.inst	0x545f4154 ; undefined
    1eb4:	5f54554f 	shl	d15, d10, #20
    1eb8:	00525245 	.inst	0x00525245 ; undefined
    1ebc:	616d6473 	.inst	0x616d6473 ; undefined
    1ec0:	6675625f 	.inst	0x6675625f ; undefined
    1ec4:	6164625f 	.inst	0x6164625f ; undefined
    1ec8:	62007972 	.inst	0x62007972 ; undefined
    1ecc:	645f6675 	fcmla	z21.h, p1/m, z19.h, z31.h, #270
    1ed0:	00617461 	.inst	0x00617461 ; undefined
    1ed4:	64767372 	.inst	0x64767372 ; undefined
    1ed8:	0039335f 	.inst	0x0039335f ; NYI
    1edc:	5f657163 	sqdmlsl	s3, h11, v5.h[2]
    1ee0:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1ee4:	74735f74 	.inst	0x74735f74 ; undefined
    1ee8:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    1eec:	6473006e 	fmla	z14.h, z3.h, z3.h[6]
    1ef0:	7375625f 	.inst	0x7375625f ; undefined
    1ef4:	7277705f 	.inst	0x7277705f ; undefined
    1ef8:	6464765f 	.inst	0x6464765f ; undefined
    1efc:	64730031 	fmla	z17.h, z1.h, z3.h[6]
    1f00:	7375625f 	.inst	0x7375625f ; undefined
    1f04:	7277705f 	.inst	0x7277705f ; undefined
    1f08:	6464765f 	.inst	0x6464765f ; undefined
    1f0c:	6c630032 	ldnp	d18, d0, [x1, #-464]
    1f10:	65675f6b 	fnmla	z11.h, p7/m, z27.h, z7.h
    1f14:	65735f6e 	fnmla	z14.h, p7/m, z27.h, z19.h
    1f18:	61765f6c 	.inst	0x61765f6c ; undefined
    1f1c:	00315f6c 	.inst	0x00315f6c ; NYI
    1f20:	6f727265 	fcmla	v5.8h, v19.8h, v18.h[1], #270
    1f24:	74696272 	.inst	0x74696272 ; undefined
    1f28:	77730073 	.inst	0x77730073 ; undefined
    1f2c:	7473725f 	.inst	0x7473725f ; undefined
    1f30:	5f5f725f 	sqdmlsl	s31, h18, v15.h[1]
    1f34:	74756f74 	.inst	0x74756f74 ; undefined
    1f38:	7274635f 	.inst	0x7274635f ; undefined
    1f3c:	5f725f6c 	.inst	0x5f725f6c ; undefined
    1f40:	6b6c635f 	.inst	0x6b6c635f ; undefined
    1f44:	7274635f 	.inst	0x7274635f ; undefined
    1f48:	6e69006c 	uaddl2	v12.4s, v3.8h, v9.8h
    1f4c:	6e726574 	umax	v20.8h, v11.8h, v18.8h
    1f50:	635f6c61 	.inst	0x635f6c61 ; undefined
    1f54:	655f6b6c 	fcmeq	p12.h, p2/z, z27.h, z31.h
    1f58:	6473006e 	fmla	z14.h, z3.h, z3.h[6]
    1f5c:	7375625f 	.inst	0x7375625f ; undefined
    1f60:	6c6f765f 	ldnp	d31, d29, [x18, #-272]
    1f64:	6464765f 	.inst	0x6464765f ; undefined
    1f68:	64730031 	fmla	z17.h, z1.h, z3.h[6]
    1f6c:	7375625f 	.inst	0x7375625f ; undefined
    1f70:	6c6f765f 	ldnp	d31, d29, [x18, #-272]
    1f74:	6464765f 	.inst	0x6464765f ; undefined
    1f78:	72700032 	.inst	0x72700032 ; undefined
    1f7c:	74657365 	.inst	0x74657365 ; undefined
    1f80:	0073645f 	.inst	0x0073645f ; undefined
    1f84:	68676968 	.inst	0x68676968 ; undefined
    1f88:	6570735f 	fnmls	z31.h, p4/m, z26.h, z16.h
    1f8c:	735f6465 	.inst	0x735f6465 ; undefined
    1f90:	6f707075 	fcmla	v21.8h, v3.8h, v16.h[1], #270
    1f94:	66007472 	.inst	0x66007472 ; undefined
    1f98:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    1f9c:	646d635f 	.inst	0x646d635f ; undefined
    1fa0:	646e655f 	.inst	0x646e655f ; undefined
    1fa4:	7469625f 	.inst	0x7469625f ; undefined
    1fa8:	7272655f 	.inst	0x7272655f ; undefined
    1fac:	6c694600 	ldnp	d0, d17, [x16, #-368]
    1fb0:	726f4665 	.inst	0x726f4665 ; undefined
    1fb4:	0074616d 	.inst	0x0074616d ; undefined
    1fb8:	74696e49 	.inst	0x74696e49 ; undefined
    1fbc:	65746e49 	fnmls	z9.h, p3/m, z18.h, z20.h
    1fc0:	70757272 	adr	x18, ece0f <__stack_size+0xe8e0f>
    1fc4:	74655374 	.inst	0x74655374 ; undefined
    1fc8:	676e6974 	.inst	0x676e6974 ; undefined
    1fcc:	69725700 	ldpsw	x0, x21, [x24, #-112]
    1fd0:	6c426574 	ldnp	d20, d25, [x11, #32]
    1fd4:	506b636f 	adr	x15, d8c42 <__stack_size+0xd4c42>
    1fd8:	72615061 	.inst	0x72615061 ; undefined
    1fdc:	6c616974 	ldnp	d20, d26, [x11, #-496]
    1fe0:	434d4d00 	.inst	0x434d4d00 ; undefined
    1fe4:	5441445f 	.inst	0x5441445f ; undefined
    1fe8:	52435f41 	.inst	0x52435f41 ; undefined
    1fec:	52455f43 	.inst	0x52455f43 ; undefined
    1ff0:	77730052 	.inst	0x77730052 ; undefined
    1ff4:	7473725f 	.inst	0x7473725f ; undefined
    1ff8:	6c6c615f 	ldnp	d31, d24, [x10, #-320]
    1ffc:	6d646100 	ldp	d0, d24, [x8, #-448]
    2000:	72655f61 	.inst	0x72655f61 ; undefined
    2004:	74735f72 	.inst	0x74735f72 ; undefined
    2008:	725f7461 	.inst	0x725f7461 ; undefined
    200c:	5f727700 	sqshl	d0, d24, #50
    2010:	746f7270 	.inst	0x746f7270 ; undefined
    2014:	5f746365 	.inst	0x5f746365 ; undefined
    2018:	6c5f7773 	ldnp	d19, d29, [x27, #496]
    201c:	75006c76 	.inst	0x75006c76 ; undefined
    2020:	5f327368 	.inst	0x5f327368 ; undefined
    2024:	655f6669 	fcmeq	p9.h, p1/z, z19.h, z31.h
    2028:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    202c:	4d4d0065 	.inst	0x4d4d0065 ; undefined
    2030:	4f425f43 	.inst	0x4f425f43 ; undefined
    2034:	415f544f 	.inst	0x415f544f ; undefined
    2038:	455f4b43 	uaddwb	z3.h, z26.h, z31.b
    203c:	73005252 	.inst	0x73005252 ; undefined
    2040:	635f7465 	.inst	0x635f7465 ; undefined
    2044:	6b636f6c 	.inst	0x6b636f6c ; undefined
    2048:	6572665f 	fnmls	z31.h, p1/m, z18.h, z18.h
    204c:	6e657571 	uabd	v17.8h, v11.8h, v5.8h
    2050:	72007963 	ands	w3, w11, #0x7fffffff
    2054:	32707365 	.inst	0x32707365 ; undefined
    2058:	6c630033 	ldnp	d19, d0, [x1, #-464]
    205c:	65675f6b 	fnmla	z11.h, p7/m, z27.h, z7.h
    2060:	65735f6e 	fnmla	z14.h, p7/m, z27.h, z19.h
    2064:	61765f6c 	.inst	0x61765f6c ; undefined
    2068:	73645f6c 	.inst	0x73645f6c ; undefined
    206c:	646d6300 	.inst	0x646d6300 ; undefined
    2070:	7864695f 	ldrh	wzr, [x10, x4]
    2074:	7272655f 	.inst	0x7272655f ; undefined
    2078:	6174735f 	.inst	0x6174735f ; undefined
    207c:	6e655f74 	uqrshl	v20.8h, v27.8h, v5.8h
    2080:	74756100 	.inst	0x74756100 ; undefined
    2084:	6d635f6f 	ldp	d15, d23, [x27, #-464]
    2088:	72655f64 	.inst	0x72655f64 ; undefined
    208c:	74735f72 	.inst	0x74735f72 ; undefined
    2090:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    2094:	7372006e 	.inst	0x7372006e ; undefined
    2098:	345f6476 	cbz	w22, c0d24 <__stack_size+0xbcd24>
    209c:	72500034 	.inst	0x72500034 ; undefined
    20a0:	4e53646f 	.inst	0x4e53646f ; undefined
    20a4:	44534300 	smlalb	z0.h, z24.b, z19.b
    20a8:	75727453 	.inst	0x75727453 ; undefined
    20ac:	63007463 	.inst	0x63007463 ; undefined
    20b0:	675f6b6c 	.inst	0x675f6b6c ; undefined
    20b4:	735f6e65 	.inst	0x735f6e65 ; undefined
    20b8:	765f6c65 	.inst	0x765f6c65 ; undefined
    20bc:	305f6c61 	adr	x1, c0e49 <__stack_size+0xbce49>
    20c0:	74657200 	.inst	0x74657200 ; undefined
    20c4:	5f656e75 	.inst	0x5f656e75 ; undefined
    20c8:	00746e63 	.inst	0x00746e63 ; undefined
    20cc:	64726163 	.inst	0x64726163 ; undefined
    20d0:	746e695f 	.inst	0x746e695f ; undefined
    20d4:	75727265 	.inst	0x75727265 ; undefined
    20d8:	735f7470 	.inst	0x735f7470 ; undefined
    20dc:	5f746174 	.inst	0x5f746174 ; undefined
    20e0:	50006e65 	adr	x5, 2eae <__stack_size-0x1152>
    20e4:	45534552 	saddwt	z18.h, z10.h, z19.b
    20e8:	44445f54 	umlslt	z20.h, z26.b, z4.b
    20ec:	5f303552 	.inst	0x5f303552 ; undefined
    20f0:	505f5f52 	adr	x18, c0cda <__stack_size+0xbccda>
    20f4:	45534552 	saddwt	z18.h, z10.h, z19.b
    20f8:	44535f54 	umlslt	z20.h, z26.b, z19.b
    20fc:	34303152 	cbz	w18, 62724 <__stack_size+0x5e724>
    2100:	5300525f 	ubfx	wzr, w18, #0, #21
    2104:	69635f44 	ldpsw	x4, x23, [x26, #-232]
    2108:	66780064 	.inst	0x66780064 ; undefined
    210c:	635f7265 	.inst	0x635f7265 ; undefined
    2110:	6c706d6f 	ldnp	d15, d27, [x11, #-256]
    2114:	5f657465 	sqshl	d5, d3, #37
    2118:	6e676973 	.inst	0x6e676973 ; undefined
    211c:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    2120:	6163006e 	.inst	0x6163006e ; undefined
    2124:	725f6472 	.inst	0x725f6472 ; undefined
    2128:	766f6d65 	.inst	0x766f6d65 ; undefined
    212c:	77006c61 	.inst	0x77006c61 ; undefined
    2130:	5f746961 	.inst	0x5f746961 ; undefined
    2134:	6e617274 	uabdl2	v20.4s, v19.8h, v1.8h
    2138:	72656673 	.inst	0x72656673 ; undefined
    213c:	6d6f635f 	ldp	d31, d24, [x26, #-272]
    2140:	74656c70 	.inst	0x74656c70 ; undefined
    2144:	72500065 	.inst	0x72500065 ; undefined
    2148:	614e646f 	.inst	0x614e646f ; undefined
    214c:	0031656d 	.inst	0x0031656d ; NYI
    2150:	64767372 	.inst	0x64767372 ; undefined
    2154:	7200345f 	tst	w2, #0x3fff
    2158:	5f647673 	sqshl	d19, d19, #36
    215c:	6d630036 	ldp	d22, d0, [x1, #-464]
    2160:	5f333264 	.inst	0x5f333264 ; undefined
    2164:	62616e65 	.inst	0x62616e65 ; undefined
    2168:	7200656c 	ands	w12, w11, #0x3ffffff
    216c:	5f647673 	sqshl	d19, d19, #36
    2170:	65720039 	fmla	z25.h, p0/m, z1.h, z18.h
    2174:	6e75745f 	uabd	v31.8h, v2.8h, v21.8h
    2178:	5f676e69 	.inst	0x5f676e69 ; undefined
    217c:	65646f6d 	fnmls	z13.h, p3/m, z27.h, z4.h
    2180:	73720073 	.inst	0x73720073 ; undefined
    2184:	335f6476 	.inst	0x335f6476 ; undefined
    2188:	31335f30 	adds	w16, w25, #0xcd7
    218c:	45525000 	ssubwb	z0.h, z0.h, z18.b
    2190:	5f544553 	.inst	0x5f544553 ; undefined
    2194:	525f5348 	.inst	0x525f5348 ; undefined
    2198:	65726600 	fnmls	z0.h, p1/m, z16.h, z18.h
    219c:	65735f71 	fnmla	z17.h, p7/m, z27.h, z19.h
    21a0:	61765f6c 	.inst	0x61765f6c ; undefined
    21a4:	00305f6c 	.inst	0x00305f6c ; NYI
    21a8:	5f646d63 	.inst	0x5f646d63 ; undefined
    21ac:	706d6f63 	adr	x3, dcf9b <__stack_size+0xd8f9b>
    21b0:	6574656c 	fnmls	z12.h, p1/m, z11.h, z20.h
    21b4:	6174735f 	.inst	0x6174735f ; undefined
    21b8:	6e655f74 	uqrshl	v20.8h, v27.8h, v5.8h
    21bc:	65726600 	fnmls	z0.h, p1/m, z16.h, z18.h
    21c0:	65735f71 	fnmla	z17.h, p7/m, z27.h, z19.h
    21c4:	61765f6c 	.inst	0x61765f6c ; undefined
    21c8:	00315f6c 	.inst	0x00315f6c ; NYI
    21cc:	5f746e69 	.inst	0x5f746e69 ; undefined
    21d0:	74735f61 	.inst	0x74735f61 ; undefined
    21d4:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    21d8:	6150006e 	.inst	0x6150006e ; undefined
    21dc:	6c427472 	ldnp	d18, d29, [x3, #32]
    21e0:	526b636f 	.inst	0x526b636f ; undefined
    21e4:	00646165 	.inst	0x00646165 ; undefined
    21e8:	74736f68 	.inst	0x74736f68 ; undefined
    21ec:	7274635f 	.inst	0x7274635f ; undefined
    21f0:	725f326c 	.inst	0x725f326c ; undefined
    21f4:	75615f5f 	.inst	0x75615f5f ; undefined
    21f8:	635f6f74 	.inst	0x635f6f74 ; undefined
    21fc:	735f646d 	.inst	0x735f646d ; undefined
    2200:	00746174 	.inst	0x00746174 ; undefined
    2204:	64767372 	.inst	0x64767372 ; undefined
    2208:	5f33325f 	.inst	0x5f33325f ; undefined
    220c:	72003032 	ands	w18, w1, #0x1fff
    2210:	5f647673 	sqshl	d19, d19, #36
    2214:	335f3133 	.inst	0x335f3133 ; undefined
    2218:	72726500 	.inst	0x72726500 ; undefined
    221c:	735f726f 	.inst	0x735f726f ; undefined
    2220:	5f746174 	.inst	0x5f746174 ; undefined
    2224:	6e697270 	uabdl2	v16.4s, v19.8h, v9.8h
    2228:	66780074 	.inst	0x66780074 ; undefined
    222c:	635f7265 	.inst	0x635f7265 ; undefined
    2230:	6c706d6f 	ldnp	d15, d27, [x11, #-256]
    2234:	5f657465 	sqshl	d5, d3, #37
    2238:	74617473 	.inst	0x74617473 ; undefined
    223c:	006e655f 	.inst	0x006e655f ; undefined
    2240:	5f505557 	shl	d23, d10, #16
    2244:	4c525443 	.inst	0x4c525443 ; undefined
    2248:	5f5f525f 	.inst	0x5f5f525f ; undefined
    224c:	50414742 	adr	x2, 84b36 <__stack_size+0x80b36>
    2250:	5254435f 	.inst	0x5254435f ; undefined
    2254:	5f525f4c 	.inst	0x5f525f4c ; undefined
    2258:	5257505f 	.inst	0x5257505f ; undefined
    225c:	5254435f 	.inst	0x5254435f ; undefined
    2260:	5f525f4c 	.inst	0x5f525f4c ; undefined
    2264:	534f485f 	.inst	0x534f485f ; undefined
    2268:	54435f54 	.inst	0x54435f54 ; undefined
    226c:	5f314c52 	.inst	0x5f314c52 ; undefined
    2270:	61630052 	.inst	0x61630052 ; undefined
    2274:	695f6472 	ldpsw	x18, x25, [x3, #248]
    2278:	6400746e 	.inst	0x6400746e ; undefined
    227c:	655f616d 	fcmeq	p13.h, p0/z, z11.h, z31.h
    2280:	616d006e 	.inst	0x616d006e ; undefined
    2284:	75635f78 	.inst	0x75635f78 ; undefined
    2288:	30335f72 	adr	x18, 68e75 <__stack_size+0x64e75>
    228c:	68750076 	.inst	0x68750076 ; undefined
    2290:	735f3273 	.inst	0x735f3273 ; undefined
    2294:	6f707075 	fcmla	v21.8h, v3.8h, v16.h[1], #270
    2298:	66007472 	.inst	0x66007472 ; undefined
    229c:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    22a0:	646d635f 	.inst	0x646d635f ; undefined
    22a4:	746f6e5f 	.inst	0x746f6e5f ; undefined
    22a8:	7373695f 	.inst	0x7373695f ; undefined
    22ac:	5f646575 	.inst	0x5f646575 ; undefined
    22b0:	6f747561 	uqshl	v1.2d, v11.2d, #52
    22b4:	646d635f 	.inst	0x646d635f ; undefined
    22b8:	53003231 	ubfx	w17, w17, #0, #13
    22bc:	65475f44 	fcmge	p4.h, p7/z, z26.h, z7.h
    22c0:	72614374 	.inst	0x72614374 ; undefined
    22c4:	666e4964 	.inst	0x666e4964 ; undefined
    22c8:	614d006f 	.inst	0x614d006f ; undefined
    22cc:	73754278 	.inst	0x73754278 ; undefined
    22d0:	466b6c43 	.inst	0x466b6c43 ; undefined
    22d4:	00636572 	.inst	0x00636572 ; undefined
    22d8:	746f6c73 	.inst	0x746f6c73 ; undefined
    22dc:	7079745f 	adr	xzr, f5167 <__stack_size+0xf1167>
    22e0:	00725f65 	.inst	0x00725f65 ; undefined
    22e4:	646f7250 	.inst	0x646f7250 ; undefined
    22e8:	656d614e 	fnmls	z14.h, p0/m, z10.h, z13.h
    22ec:	64730032 	fmla	z18.h, z1.h, z3.h[6]
    22f0:	5f303572 	.inst	0x5f303572 ; undefined
    22f4:	70707573 	adr	x19, e31a3 <__stack_size+0xdf1a3>
    22f8:	0074726f 	.inst	0x0074726f ; undefined
    22fc:	435f4453 	.inst	0x435f4453 ; undefined
    2300:	49647261 	.inst	0x49647261 ; undefined
    2304:	006f666e 	.inst	0x006f666e ; undefined
    2308:	646e6576 	.inst	0x646e6576 ; undefined
    230c:	655f726f 	fcmeq	p15.h, p4/z, z19.h, z31.h
    2310:	735f7272 	.inst	0x735f7272 ; undefined
    2314:	616e6769 	.inst	0x616e6769 ; undefined
    2318:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    231c:	65760031 	fmla	z17.h, p0/m, z1.h, z22.h
    2320:	726f646e 	.inst	0x726f646e ; undefined
    2324:	7272655f 	.inst	0x7272655f ; undefined
    2328:	6769735f 	.inst	0x6769735f ; undefined
    232c:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2330:	00326e65 	.inst	0x00326e65 ; NYI
    2334:	616d6473 	.inst	0x616d6473 ; undefined
    2338:	7075735f 	adr	xzr, ed1a3 <__stack_size+0xe91a3>
    233c:	74726f70 	.inst	0x74726f70 ; undefined
    2340:	64646100 	.inst	0x64646100 ; undefined
    2344:	73736572 	.inst	0x73736572 ; undefined
    2348:	00676e69 	.inst	0x00676e69 ; undefined
    234c:	5f434d4d 	.inst	0x5f434d4d ; undefined
    2350:	5f444d43 	.inst	0x5f444d43 ; undefined
    2354:	5f435243 	.inst	0x5f435243 ; undefined
    2358:	00525245 	.inst	0x00525245 ; undefined
    235c:	5f434d4d 	.inst	0x5f434d4d ; undefined
    2360:	4f545541 	shl	v1.2d, v10.2d, #20
    2364:	444d435f 	smlalb	z31.h, z26.b, z13.b
    2368:	5252455f 	.inst	0x5252455f ; undefined
    236c:	5f647200 	sqdmlsl	s0, h16, v4.h[2]
    2370:	72656678 	.inst	0x72656678 ; undefined
    2374:	7463615f 	.inst	0x7463615f ; undefined
    2378:	00657669 	.inst	0x00657669 ; undefined
    237c:	63726f66 	.inst	0x63726f66 ; undefined
    2380:	61645f65 	.inst	0x61645f65 ; undefined
    2384:	655f6174 	fcmne	p4.h, p0/z, z11.h, z31.h
    2388:	625f646e 	.inst	0x625f646e ; undefined
    238c:	655f7469 	fcmeq	p9.h, p5/z, z3.h, z31.h
    2390:	57007272 	.inst	0x57007272 ; undefined
    2394:	6f725072 	fcmla	v18.8h, v3.8h, v18.h[1], #180
    2398:	74636574 	.inst	0x74636574 ; undefined
    239c:	6e457247 	.inst	0x6e457247 ; undefined
    23a0:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    23a4:	646d6300 	.inst	0x646d6300 ; undefined
    23a8:	646e695f 	.inst	0x646e695f ; undefined
    23ac:	62007865 	.inst	0x62007865 ; undefined
    23b0:	5f706167 	.inst	0x5f706167 ; undefined
    23b4:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    23b8:	4d4d0074 	.inst	0x4d4d0074 ; undefined
    23bc:	55535f43 	.inst	0x55535f43 ; undefined
    23c0:	53454343 	.inst	0x53454343 ; undefined
    23c4:	65720053 	fmla	z19.h, p0/m, z2.h, z18.h
    23c8:	35347073 	cbnz	w19, 6b1d4 <__stack_size+0x671d4>
    23cc:	434d4d00 	.inst	0x434d4d00 ; undefined
    23d0:	4941465f 	.inst	0x4941465f ; undefined
    23d4:	4552554c 	ssubwt	z12.h, z10.h, z18.b
    23d8:	69617700 	ldpsw	x0, x29, [x24, #-248]
    23dc:	6d645f74 	ldp	d20, d23, [x27, #-448]
    23e0:	726f5f61 	.inst	0x726f5f61 ; undefined
    23e4:	6566785f 	fnmls	z31.h, p6/m, z2.h, z6.h
    23e8:	6f635f72 	.inst	0x6f635f72 ; undefined
    23ec:	656c706d 	fnmls	z13.h, p4/m, z3.h, z12.h
    23f0:	66006574 	.inst	0x66006574 ; undefined
    23f4:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    23f8:	6e75745f 	uabd	v31.8h, v2.8h, v21.8h
    23fc:	5f676e69 	.inst	0x5f676e69 ; undefined
    2400:	00727265 	.inst	0x00727265 ; undefined
    2404:	64767372 	.inst	0x64767372 ; undefined
    2408:	0031365f 	.inst	0x0031365f ; NYI
    240c:	64726143 	.inst	0x64726143 ; undefined
    2410:	646d6f43 	.inst	0x646d6f43 ; undefined
    2414:	73616c43 	.inst	0x73616c43 ; undefined
    2418:	00736573 	.inst	0x00736573 ; undefined
    241c:	6e797361 	uabdl2	v1.4s, v27.8h, v25.8h
    2420:	6e695f63 	uqrshl	v3.8h, v27.8h, v9.8h
    2424:	75735f74 	.inst	0x75735f74 ; undefined
    2428:	726f7070 	.inst	0x726f7070 ; undefined
    242c:	78660074 	ldaddlh	w6, w20, [x3]
    2430:	6576655f 	fnmls	z31.h, p1/m, z10.h, z22.h
    2434:	735f746e 	.inst	0x735f746e ; undefined
    2438:	616e6769 	.inst	0x616e6769 ; undefined
    243c:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    2440:	72616300 	.inst	0x72616300 ; undefined
    2444:	6e695f64 	uqrshl	v4.8h, v27.8h, v9.8h
    2448:	72726574 	.inst	0x72726574 ; undefined
    244c:	00747075 	.inst	0x00747075 ; undefined
    2450:	5f667562 	sqshl	d2, d11, #38
    2454:	655f6472 	fcmne	p2.h, p1/z, z3.h, z31.h
    2458:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    245c:	61770065 	.inst	0x61770065 ; undefined
    2460:	625f7469 	.inst	0x625f7469 ; undefined
    2464:	65666675 	fnmls	z21.h, p1/m, z19.h, z6.h
    2468:	65725f72 	fnmla	z18.h, p7/m, z27.h, z18.h
    246c:	725f6461 	.inst	0x725f6461 ; undefined
    2470:	79646165 	ldrh	w5, [x11, #4656]
    2474:	6d6f635f 	ldp	d31, d24, [x26, #-272]
    2478:	74656c70 	.inst	0x74656c70 ; undefined
    247c:	64610065 	fmla	z5.h, z3.h, z1.h[4]
    2480:	6c5f616d 	ldnp	d13, d24, [x11, #496]
    2484:	655f6e65 	fcmeq	p5.h, p3/z, z19.h, z31.h
    2488:	64007272 	.inst	0x64007272 ; undefined
    248c:	5f617461 	sqshl	d1, d3, #33
    2490:	74756f74 	.inst	0x74756f74 ; undefined
    2494:	7272655f 	.inst	0x7272655f ; undefined
    2498:	6174735f 	.inst	0x6174735f ; undefined
    249c:	6e655f74 	uqrshl	v20.8h, v27.8h, v5.8h
    24a0:	5f657200 	sqdmlsl	s0, h16, v5.h[2]
    24a4:	656e7574 	fnmls	z20.h, p5/m, z11.h, z14.h
    24a8:	6576655f 	fnmls	z31.h, p1/m, z10.h, z22.h
    24ac:	735f746e 	.inst	0x735f746e ; undefined
    24b0:	5f746174 	.inst	0x5f746174 ; undefined
    24b4:	63006e65 	.inst	0x63006e65 ; undefined
    24b8:	695f646d 	ldpsw	x13, x25, [x3, #248]
    24bc:	6269686e 	.inst	0x6269686e ; undefined
    24c0:	645f7469 	fcmla	z9.h, p5/m, z3.h, z31.h, #270
    24c4:	64007461 	.inst	0x64007461 ; undefined
    24c8:	375f7461 	tbnz	w1, #11, 1354 <__stack_size-0x2cac>
    24cc:	6d5f345f 	ldp	d31, d13, [x2, #496]
    24d0:	006b7361 	.inst	0x006b7361 ; undefined
    24d4:	35726464 	cbnz	w4, e7160 <__stack_size+0xe3160>
    24d8:	75735f30 	.inst	0x75735f30 ; undefined
    24dc:	726f7070 	.inst	0x726f7070 ; undefined
    24e0:	4d4d0074 	.inst	0x4d4d0074 ; undefined
    24e4:	46585f43 	.inst	0x46585f43 ; undefined
    24e8:	545f5245 	b.pl	c0f30 <__stack_size+0xbcf30>  // b.nfrst
    24ec:	4f454d49 	.inst	0x4f454d49 ; undefined
    24f0:	61005455 	.inst	0x61005455 ; undefined
    24f4:	5f616d64 	.inst	0x5f616d64 ; undefined
    24f8:	685f6173 	.inst	0x685f6173 ; undefined
    24fc:	5f686769 	.inst	0x5f686769 ; undefined
    2500:	52500072 	.inst	0x52500072 ; undefined
    2504:	54455345 	b.pl	8cf6c <__stack_size+0x88f6c>  // b.nfrst
    2508:	5244535f 	.inst	0x5244535f ; undefined
    250c:	525f3035 	.inst	0x525f3035 ; undefined
    2510:	52505f5f 	.inst	0x52505f5f ; undefined
    2514:	54455345 	b.pl	8cf7c <__stack_size+0x88f7c>  // b.nfrst
    2518:	5244535f 	.inst	0x5244535f ; undefined
    251c:	525f3532 	.inst	0x525f3532 ; undefined
    2520:	726f6600 	.inst	0x726f6600 ; undefined
    2524:	635f6563 	.inst	0x635f6563 ; undefined
    2528:	635f646d 	.inst	0x635f646d ; undefined
    252c:	655f6372 	fcmne	p2.h, p0/z, z27.h, z31.h
    2530:	63007272 	.inst	0x63007272 ; undefined
    2534:	635f646d 	.inst	0x635f646d ; undefined
    2538:	6c706d6f 	ldnp	d15, d27, [x11, #-256]
    253c:	5f657465 	sqshl	d5, d3, #37
    2540:	6e676973 	.inst	0x6e676973 ; undefined
    2544:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    2548:	6552006e 	fadd	z14.h, z3.h, z18.h
    254c:	76726573 	.inst	0x76726573 ; undefined
    2550:	00326465 	.inst	0x00326465 ; NYI
    2554:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
    2558:	64657672 	.inst	0x64657672 ; undefined
    255c:	6f660033 	mla	v19.8h, v1.8h, v6.h[2]
    2560:	5f656372 	.inst	0x5f656372 ; undefined
    2564:	5f727563 	sqshl	d3, d11, #50
    2568:	5f746d6c 	.inst	0x5f746d6c ; undefined
    256c:	00727265 	.inst	0x00727265 ; undefined
    2570:	75677261 	.inst	0x75677261 ; undefined
    2574:	746e656d 	.inst	0x746e656d ; undefined
    2578:	6300725f 	.inst	0x6300725f ; undefined
    257c:	655f6571 	fcmne	p1.h, p1/z, z11.h, z31.h
    2580:	746e6576 	.inst	0x746e6576 ; undefined
    2584:	73657200 	.inst	0x73657200 ; undefined
    2588:	72655f70 	.inst	0x72655f70 ; undefined
    258c:	74735f72 	.inst	0x74735f72 ; undefined
    2590:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    2594:	4f48006e 	.inst	0x4f48006e ; undefined
    2598:	435f5453 	.inst	0x435f5453 ; undefined
    259c:	324c5254 	.inst	0x324c5254 ; undefined
    25a0:	5f5f525f 	.inst	0x5f5f525f ; undefined
    25a4:	4f545541 	shl	v1.2d, v10.2d, #20
    25a8:	444d435f 	smlalb	z31.h, z26.b, z13.b
    25ac:	4154535f 	.inst	0x4154535f ; undefined
    25b0:	00525f54 	.inst	0x00525f54 ; undefined
    25b4:	5f746e69 	.inst	0x5f746e69 ; undefined
    25b8:	625f7461 	.inst	0x625f7461 ; undefined
    25bc:	00706167 	.inst	0x00706167 ; undefined
    25c0:	5f444943 	.inst	0x5f444943 ; undefined
    25c4:	00626154 	.inst	0x00626154 ; undefined
    25c8:	63657865 	.inst	0x63657865 ; undefined
    25cc:	6e75745f 	uabd	v31.8h, v2.8h, v21.8h
    25d0:	00676e69 	.inst	0x00676e69 ; undefined
    25d4:	70736572 	adr	x18, e9283 <__stack_size+0xe5283>
    25d8:	7079745f 	adr	xzr, f5463 <__stack_size+0xf1463>
    25dc:	44530065 	.inst	0x44530065 ; undefined
    25e0:	64726143 	.inst	0x64726143 ; undefined
    25e4:	6f666e49 	.inst	0x6f666e49 ; undefined
    25e8:	656c6300 	fnmls	z0.h, p0/m, z24.h, z12.h
    25ec:	645f7261 	fcmla	z1.h, p4/m, z19.h, z31.h, #270
    25f0:	695f616d 	ldpsw	x13, x24, [x11, #248]
    25f4:	7265746e 	.inst	0x7265746e ; undefined
    25f8:	74707572 	.inst	0x74707572 ; undefined
    25fc:	726f6600 	.inst	0x726f6600 ; undefined
    2600:	645f6563 	fcmla	z3.h, p1/m, z11.h, z31.h, #270
    2604:	5f617461 	sqshl	d1, d3, #33
    2608:	74756f74 	.inst	0x74756f74 ; undefined
    260c:	7272655f 	.inst	0x7272655f ; undefined
    2610:	61676200 	.inst	0x61676200 ; undefined
    2614:	76655f70 	.inst	0x76655f70 ; undefined
    2618:	5f746e65 	.inst	0x5f746e65 ; undefined
    261c:	6e676973 	.inst	0x6e676973 ; undefined
    2620:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    2624:	7270006e 	.inst	0x7270006e ; undefined
    2628:	74657365 	.inst	0x74657365 ; undefined
    262c:	5f73645f 	.inst	0x5f73645f ; undefined
    2630:	705f5f72 	adr	x18, c121f <__stack_size+0xbd21f>
    2634:	65736572 	fnmls	z18.h, p1/m, z11.h, z19.h
    2638:	6e695f74 	uqrshl	v20.8h, v27.8h, v9.8h
    263c:	63007469 	.inst	0x63007469 ; undefined
    2640:	6d5f6b6c 	ldp	d12, d26, [x27, #496]
    2644:	64006c75 	.inst	0x64006c75 ; undefined
    2648:	5f617461 	sqshl	d1, d3, #33
    264c:	5f646e65 	.inst	0x5f646e65 ; undefined
    2650:	5f746962 	.inst	0x5f746962 ; undefined
    2654:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2658:	6e676973 	.inst	0x6e676973 ; undefined
    265c:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    2660:	6c62006e 	ldnp	d14, d0, [x3, #-480]
    2664:	636b636f 	.inst	0x636b636f ; undefined
    2668:	746e756f 	.inst	0x746e756f ; undefined
    266c:	5f5f725f 	sqdmlsl	s31, h18, v15.h[1]
    2670:	636f6c62 	.inst	0x636f6c62 ; undefined
    2674:	7a69736b 	.inst	0x7a69736b ; undefined
    2678:	61630065 	.inst	0x61630065 ; undefined
    267c:	695f6472 	ldpsw	x18, x25, [x3, #248]
    2680:	7265746e 	.inst	0x7265746e ; undefined
    2684:	74707572 	.inst	0x74707572 ; undefined
    2688:	6769735f 	.inst	0x6769735f ; undefined
    268c:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2690:	73006e65 	.inst	0x73006e65 ; undefined
    2694:	6c706d61 	ldnp	d1, d27, [x11, #-256]
    2698:	6c635f65 	ldnp	d5, d23, [x27, #-464]
    269c:	65735f6b 	fnmla	z11.h, p7/m, z27.h, z19.h
    26a0:	7562006c 	.inst	0x7562006c ; undefined
    26a4:	72775f66 	.inst	0x72775f66 ; undefined
    26a8:	6165725f 	.inst	0x6165725f ; undefined
    26ac:	735f7964 	.inst	0x735f7964 ; undefined
    26b0:	5f746174 	.inst	0x5f746174 ; undefined
    26b4:	66006e65 	.inst	0x66006e65 ; undefined
    26b8:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    26bc:	7475615f 	.inst	0x7475615f ; undefined
    26c0:	6d635f6f 	ldp	d15, d23, [x27, #-464]
    26c4:	72655f64 	.inst	0x72655f64 ; undefined
    26c8:	6d640072 	ldp	d18, d0, [x3, #-448]
    26cc:	65735f61 	fnmla	z1.h, p7/m, z27.h, z19.h
    26d0:	6d63006c 	ldp	d12, d0, [x3, #-464]
    26d4:	6f745f64 	.inst	0x6f745f64 ; undefined
    26d8:	655f7475 	fcmne	p5.h, p5/z, z3.h, z31.h
    26dc:	735f7272 	.inst	0x735f7272 ; undefined
    26e0:	616e6769 	.inst	0x616e6769 ; undefined
    26e4:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    26e8:	78616d00 	.inst	0x78616d00 ; undefined
    26ec:	7275635f 	.inst	0x7275635f ; undefined
    26f0:	6464765f 	.inst	0x6464765f ; undefined
    26f4:	38315f32 	.inst	0x38315f32 ; undefined
    26f8:	4d4d0076 	.inst	0x4d4d0076 ; undefined
    26fc:	55545f43 	.inst	0x55545f43 ; undefined
    2700:	474e494e 	.inst	0x474e494e ; undefined
    2704:	5252455f 	.inst	0x5252455f ; undefined
    2708:	65727000 	fnmls	z0.h, p4/m, z0.h, z18.h
    270c:	5f746573 	.inst	0x5f746573 ; undefined
    2710:	35726473 	cbnz	w19, e739c <__stack_size+0xe339c>
    2714:	5f725f30 	.inst	0x5f725f30 ; undefined
    2718:	6572705f 	fnmls	z31.h, p4/m, z2.h, z18.h
    271c:	5f746573 	.inst	0x5f746573 ; undefined
    2720:	32726473 	.inst	0x32726473 ; undefined
    2724:	65720035 	fmla	z21.h, p0/m, z1.h, z18.h
    2728:	37367073 	tbnz	w19, #6, fffffffffffff534 <_sp+0xffffffff9efbf534>
    272c:	74616400 	.inst	0x74616400 ; undefined
    2730:	6f745f61 	.inst	0x6f745f61 ; undefined
    2734:	655f7475 	fcmne	p5.h, p5/z, z3.h, z31.h
    2738:	735f7272 	.inst	0x735f7272 ; undefined
    273c:	616e6769 	.inst	0x616e6769 ; undefined
    2740:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    2744:	74616400 	.inst	0x74616400 ; undefined
    2748:	6566785f 	fnmls	z31.h, p6/m, z2.h, z6.h
    274c:	69775f72 	ldpsw	x18, x23, [x27, #-72]
    2750:	00687464 	.inst	0x00687464 ; undefined
    2754:	5f78616d 	.inst	0x5f78616d ; undefined
    2758:	5f727563 	sqshl	d3, d11, #50
    275c:	00763333 	.inst	0x00763333 ; undefined
    2760:	53455250 	.inst	0x53455250 ; undefined
    2764:	445f5445 	smlslt	z5.h, z2.b, z31.b
    2768:	5f525f53 	.inst	0x5f525f53 ; undefined
    276c:	4552505f 	ssubwb	z31.h, z2.h, z18.b
    2770:	5f544553 	.inst	0x5f544553 ; undefined
    2774:	54494e49 	b.ls	9513c <__stack_size+0x9113c>  // b.plast
    2778:	6300525f 	.inst	0x6300525f ; undefined
    277c:	725f646d 	.inst	0x725f646d ; undefined
    2780:	66785f5f 	.inst	0x66785f5f ; undefined
    2784:	6d5f7265 	ldp	d5, d28, [x19, #496]
    2788:	0065646f 	.inst	0x0065646f ; undefined
    278c:	63726f66 	.inst	0x63726f66 ; undefined
    2790:	6f625f65 	.inst	0x6f625f65 ; undefined
    2794:	615f746f 	.inst	0x615f746f ; undefined
    2798:	655f6b63 	fcmeq	p3.h, p2/z, z27.h, z31.h
    279c:	53007272 	ubfx	w18, w19, #0, #29
    27a0:	73635f44 	.inst	0x73635f44 ; undefined
    27a4:	6f660064 	mla	v4.8h, v3.8h, v6.h[2]
    27a8:	5f656372 	.inst	0x5f656372 ; undefined
    27ac:	646e6576 	.inst	0x646e6576 ; undefined
    27b0:	655f726f 	fcmeq	p15.h, p4/z, z19.h, z31.h
    27b4:	00317272 	.inst	0x00317272 ; NYI
    27b8:	63726f66 	.inst	0x63726f66 ; undefined
    27bc:	65765f65 	fnmla	z5.h, p7/m, z27.h, z22.h
    27c0:	726f646e 	.inst	0x726f646e ; undefined
    27c4:	7272655f 	.inst	0x7272655f ; undefined
    27c8:	73720032 	.inst	0x73720032 ; undefined
    27cc:	45006476 	.inst	0x45006476 ; undefined
    27d0:	524f5252 	.inst	0x524f5252 ; undefined
    27d4:	544e495f 	.inst	0x544e495f ; undefined
    27d8:	4749535f 	.inst	0x4749535f ; undefined
    27dc:	5f4c414e 	.inst	0x5f4c414e ; undefined
    27e0:	525f4e45 	.inst	0x525f4e45 ; undefined
    27e4:	4f4e5f5f 	.inst	0x4f4e5f5f ; undefined
    27e8:	4c414d52 	.inst	0x4c414d52 ; undefined
    27ec:	544e495f 	.inst	0x544e495f ; undefined
    27f0:	4749535f 	.inst	0x4749535f ; undefined
    27f4:	5f4c414e 	.inst	0x5f4c414e ; undefined
    27f8:	525f4e45 	.inst	0x525f4e45 ; undefined
    27fc:	73657200 	.inst	0x73657200 ; undefined
    2800:	79745f70 	ldrh	w16, [x27, #6702]
    2804:	735f6570 	.inst	0x735f6570 ; undefined
    2808:	63656c65 	.inst	0x63656c65 ; undefined
    280c:	65720074 	fmla	z20.h, p0/m, z3.h, z18.h
    2810:	655f7073 	fcmne	p3.h, p4/z, z3.h, z31.h
    2814:	735f7272 	.inst	0x735f7272 ; undefined
    2818:	616e6769 	.inst	0x616e6769 ; undefined
    281c:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    2820:	73687500 	.inst	0x73687500 ; undefined
    2824:	646f6d5f 	.inst	0x646f6d5f ; undefined
    2828:	65735f65 	fnmla	z5.h, p7/m, z27.h, z19.h
    282c:	7573006c 	.inst	0x7573006c ; undefined
    2830:	6d635f62 	ldp	d2, d23, [x27, #-464]
    2834:	74735f64 	.inst	0x74735f64 ; undefined
    2838:	63007461 	.inst	0x63007461 ; undefined
    283c:	6c5f7275 	ldnp	d21, d28, [x19, #496]
    2840:	655f746d 	fcmeq	p13.h, p5/z, z3.h, z31.h
    2844:	735f7272 	.inst	0x735f7272 ; undefined
    2848:	616e6769 	.inst	0x616e6769 ; undefined
    284c:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    2850:	61724500 	.inst	0x61724500 ; undefined
    2854:	72476573 	.inst	0x72476573 ; undefined
    2858:	657a6953 	fnmls	z19.h, p2/m, z10.h, z26.h
    285c:	52554300 	.inst	0x52554300 ; undefined
    2860:	41435f52 	.inst	0x41435f52 ; undefined
    2864:	49424150 	.inst	0x49424150 ; undefined
    2868:	4954494c 	.inst	0x4954494c ; undefined
    286c:	5f315345 	fmls	h5, h26, v1.h[3]
    2870:	61770052 	.inst	0x61770052 ; undefined
    2874:	645f7469 	fcmla	z9.h, p5/m, z3.h, z31.h, #270
    2878:	635f616d 	.inst	0x635f616d ; undefined
    287c:	6c706d6f 	ldnp	d15, d27, [x11, #-256]
    2880:	00657465 	.inst	0x00657465 ; undefined
    2884:	5f616d64 	.inst	0x5f616d64 ; undefined
    2888:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
    288c:	70757272 	adr	x18, ed6db <__stack_size+0xe96db>
    2890:	74735f74 	.inst	0x74735f74 ; undefined
    2894:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    2898:	6e69006e 	uaddl2	v14.4s, v3.8h, v9.8h
    289c:	726f645f 	.inst	0x726f645f ; undefined
    28a0:	746e616d 	.inst	0x746e616d ; undefined
    28a4:	0074735f 	.inst	0x0074735f ; undefined
    28a8:	746c6f76 	.inst	0x746c6f76 ; undefined
    28ac:	0038315f 	.inst	0x0038315f ; NYI
    28b0:	74756f74 	.inst	0x74756f74 ; undefined
    28b4:	6b6c635f 	.inst	0x6b6c635f ; undefined
    28b8:	6572665f 	fnmls	z31.h, p1/m, z18.h, z18.h
    28bc:	65720071 	fmla	z17.h, p0/m, z3.h, z18.h
    28c0:	6e75745f 	uabd	v31.8h, v2.8h, v21.8h
    28c4:	76655f65 	.inst	0x76655f65 ; undefined
    28c8:	00746e65 	.inst	0x00746e65 ; undefined
    28cc:	5f746e69 	.inst	0x5f746e69 ; undefined
    28d0:	74735f62 	.inst	0x74735f62 ; undefined
    28d4:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    28d8:	7372006e 	.inst	0x7372006e ; undefined
    28dc:	315f6476 	adds	w22, w3, #0x7d9, lsl #12
    28e0:	31315f33 	adds	w19, w25, #0xc57
    28e4:	54535000 	b.eq	a92e4 <__stack_size+0xa52e4>  // b.none
    28e8:	5f455441 	shl	d1, d2, #5
    28ec:	5f474552 	.inst	0x5f474552 ; undefined
    28f0:	72640052 	.inst	0x72640052 ; undefined
    28f4:	65735f76 	fnmla	z22.h, p7/m, z27.h, z19.h
    28f8:	61765f6c 	.inst	0x61765f6c ; undefined
    28fc:	6e695f6c 	uqrshl	v12.8h, v27.8h, v9.8h
    2900:	72007469 	ands	w9, w3, #0x3fffffff
    2904:	5f647673 	sqshl	d19, d19, #36
    2908:	365f3236 	tbz	w22, #11, f4c <__stack_size-0x30b4>
    290c:	72660033 	.inst	0x72660033 ; undefined
    2910:	735f7165 	.inst	0x735f7165 ; undefined
    2914:	765f6c65 	.inst	0x765f6c65 ; undefined
    2918:	645f6c61 	fcmla	z1.h, p3/m, z3.h, z31.h, #270
    291c:	72500073 	.inst	0x72500073 ; undefined
    2920:	6552646f 	fcmeq	p15.h, p1/z, z3.h, z18.h
    2924:	72450076 	.inst	0x72450076 ; undefined
    2928:	47657361 	.inst	0x47657361 ; undefined
    292c:	6c754d72 	ldnp	d18, d19, [x11, #-176]
    2930:	4d4d6500 	.inst	0x4d4d6500 ; undefined
    2934:	61630043 	.inst	0x61630043 ; undefined
    2938:	725f6472 	.inst	0x725f6472 ; undefined
    293c:	766f6d65 	.inst	0x766f6d65 ; undefined
    2940:	735f6c61 	.inst	0x735f6c61 ; undefined
    2944:	5f746174 	.inst	0x5f746174 ; undefined
    2948:	73006e65 	.inst	0x73006e65 ; undefined
    294c:	615f7379 	.inst	0x615f7379 ; undefined
    2950:	5f726464 	.inst	0x5f726464 ; undefined
    2954:	765f3436 	.inst	0x765f3436 ; undefined
    2958:	73700034 	.inst	0x73700034 ; undefined
    295c:	65746174 	fnmls	z20.h, p0/m, z11.h, z20.h
    2960:	6765725f 	.inst	0x6765725f ; undefined
    2964:	6d646100 	ldp	d0, d24, [x8, #-448]
    2968:	735f3261 	.inst	0x735f3261 ; undefined
    296c:	6f707075 	fcmla	v21.8h, v3.8h, v16.h[1], #270
    2970:	63007472 	.inst	0x63007472 ; undefined
    2974:	675f6b6c 	.inst	0x675f6b6c ; undefined
    2978:	735f6e65 	.inst	0x735f6e65 ; undefined
    297c:	63656c65 	.inst	0x63656c65 ; undefined
    2980:	64610074 	fmla	z20.h, z3.h, z1.h[4]
    2984:	655f616d 	fcmeq	p13.h, p0/z, z11.h, z31.h
    2988:	735f7272 	.inst	0x735f7272 ; undefined
    298c:	65746174 	fnmls	z20.h, p0/m, z11.h, z20.h
    2990:	65520073 	fadd	z19.h, z3.h, z18.h
    2994:	76726573 	.inst	0x76726573 ; undefined
    2998:	00316465 	.inst	0x00316465 ; NYI
    299c:	53737953 	.inst	0x53737953 ; undefined
    29a0:	56636570 	.inst	0x56636570 ; undefined
    29a4:	69737265 	ldpsw	x5, x28, [x19, #-104]
    29a8:	62006e6f 	.inst	0x62006e6f ; undefined
    29ac:	5f706167 	.inst	0x5f706167 ; undefined
    29b0:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    29b4:	74735f74 	.inst	0x74735f74 ; undefined
    29b8:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    29bc:	6d63006e 	ldp	d14, d0, [x3, #-464]
    29c0:	696c5f64 	ldpsw	x4, x23, [x27, #-160]
    29c4:	6c5f656e 	ldnp	d14, d25, [x11, #496]
    29c8:	62006c76 	.inst	0x62006c76 ; undefined
    29cc:	5f657361 	sqdmlsl	s1, h27, v5.h[2]
    29d0:	5f6b6c63 	.inst	0x5f6b6c63 ; undefined
    29d4:	71657266 	subs	w6, w19, #0x95c, lsl #12
    29d8:	73655200 	.inst	0x73655200 ; undefined
    29dc:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
    29e0:	64003464 	.inst	0x64003464 ; undefined
    29e4:	735f7672 	.inst	0x735f7672 ; undefined
    29e8:	6e657274 	uabdl2	v20.4s, v19.8h, v5.8h
    29ec:	5f687467 	sqshl	d7, d3, #40
    29f0:	006c6573 	.inst	0x006c6573 ; undefined
    29f4:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
    29f8:	6c616e72 	ldnp	d18, d27, [x19, #-496]
    29fc:	6b6c635f 	.inst	0x6b6c635f ; undefined
    2a00:	6174735f 	.inst	0x6174735f ; undefined
    2a04:	00656c62 	.inst	0x00656c62 ; undefined
    2a08:	5f646d63 	.inst	0x5f646d63 ; undefined
    2a0c:	5f786469 	.inst	0x5f786469 ; undefined
    2a10:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2a14:	6e676973 	.inst	0x6e676973 ; undefined
    2a18:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    2a1c:	6f66006e 	mla	v14.8h, v3.8h, v6.h[2]
    2a20:	5f656372 	.inst	0x5f656372 ; undefined
    2a24:	6f747561 	uqshl	v1.2d, v11.2d, #52
    2a28:	646d635f 	.inst	0x646d635f ; undefined
    2a2c:	7864695f 	ldrh	wzr, [x10, x4]
    2a30:	7272655f 	.inst	0x7272655f ; undefined
    2a34:	66756200 	.inst	0x66756200 ; undefined
    2a38:	5f72775f 	sqshl	d31, d26, #50
    2a3c:	64616572 	.inst	0x64616572 ; undefined
    2a40:	69735f79 	ldpsw	x25, x23, [x27, #-104]
    2a44:	6c616e67 	ldnp	d7, d27, [x19, #-496]
    2a48:	006e655f 	.inst	0x006e655f ; undefined
    2a4c:	5f646d63 	.inst	0x5f646d63 ; undefined
    2a50:	5f637263 	sqdmlsl	s3, h19, v3.h[2]
    2a54:	5f6b6863 	.inst	0x5f6b6863 ; undefined
    2a58:	62616e65 	.inst	0x62616e65 ; undefined
    2a5c:	7300656c 	.inst	0x7300656c ; undefined
    2a60:	6c635f64 	ldnp	d4, d23, [x27, #-464]
    2a64:	6e655f6b 	uqrshl	v11.8h, v27.8h, v5.8h
    2a68:	70707500 	adr	x0, e390b <__stack_size+0xdf90b>
    2a6c:	665f7265 	.inst	0x665f7265 ; undefined
    2a70:	5f716572 	.inst	0x5f716572 ; undefined
    2a74:	006c6573 	.inst	0x006c6573 ; undefined
    2a78:	5f6c6c70 	.inst	0x5f6c6c70 ; undefined
    2a7c:	62616e65 	.inst	0x62616e65 ; undefined
    2a80:	4d00656c 	.inst	0x4d00656c ; undefined
    2a84:	64527861 	fcmla	z1.h, p6/m, z3.h, z18.h, #270
    2a88:	72727543 	.inst	0x72727543 ; undefined
    2a8c:	56746e65 	.inst	0x56746e65 ; undefined
    2a90:	614d4444 	.inst	0x614d4444 ; undefined
    2a94:	69730078 	ldpsw	x24, x0, [x3, #-104]
    2a98:	6c616e67 	ldnp	d7, d27, [x19, #-496]
    2a9c:	5f676e69 	.inst	0x5f676e69 ; undefined
    2aa0:	66006e65 	.inst	0x66006e65 ; undefined
    2aa4:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    2aa8:	7475615f 	.inst	0x7475615f ; undefined
    2aac:	6d635f6f 	ldp	d15, d23, [x27, #-464]
    2ab0:	5f323164 	.inst	0x5f323164 ; undefined
    2ab4:	5f746f6e 	.inst	0x5f746f6e ; undefined
    2ab8:	63657865 	.inst	0x63657865 ; undefined
    2abc:	6e757400 	uabd	v0.8h, v0.8h, v21.8h
    2ac0:	5f676e69 	.inst	0x5f676e69 ; undefined
    2ac4:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2ac8:	74617473 	.inst	0x74617473 ; undefined
    2acc:	006e655f 	.inst	0x006e655f ; undefined
    2ad0:	5f746164 	.inst	0x5f746164 ; undefined
    2ad4:	00305f33 	.inst	0x00305f33 ; NYI
    2ad8:	64726163 	.inst	0x64726163 ; undefined
    2adc:	6d65725f 	ldp	d31, d28, [x18, #-432]
    2ae0:	6c61766f 	ldnp	d15, d29, [x19, #-496]
    2ae4:	6769735f 	.inst	0x6769735f ; undefined
    2ae8:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2aec:	4e006e65 	.inst	0x4e006e65 ; undefined
    2af0:	00434153 	.inst	0x00434153 ; undefined
    2af4:	64726143 	.inst	0x64726143 ; undefined
    2af8:	636f6c42 	.inst	0x636f6c42 ; undefined
    2afc:	7a69536b 	.inst	0x7a69536b ; undefined
    2b00:	75610065 	.inst	0x75610065 ; undefined
    2b04:	635f6f74 	.inst	0x635f6f74 ; undefined
    2b08:	655f646d 	fcmeq	p13.h, p1/z, z3.h, z31.h
    2b0c:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    2b10:	57530065 	.inst	0x57530065 ; undefined
    2b14:	5453525f 	.inst	0x5453525f ; undefined
    2b18:	5f5f525f 	.inst	0x5f5f525f ; undefined
    2b1c:	54554f54 	.inst	0x54554f54 ; undefined
    2b20:	5254435f 	.inst	0x5254435f ; undefined
    2b24:	5f525f4c 	.inst	0x5f525f4c ; undefined
    2b28:	4b4c435f 	sub	wzr, w26, w12, lsr #16
    2b2c:	5254435f 	.inst	0x5254435f ; undefined
    2b30:	00525f4c 	.inst	0x00525f4c ; undefined
    2b34:	65626d65 	fnmls	z5.h, p3/m, z11.h, z2.h
    2b38:	64656464 	.inst	0x64656464 ; undefined
    2b3c:	625f385f 	.inst	0x625f385f ; undefined
    2b40:	45007469 	.inst	0x45007469 ; undefined
    2b44:	524f5252 	.inst	0x524f5252 ; undefined
    2b48:	544e495f 	.inst	0x544e495f ; undefined
    2b4c:	4154535f 	.inst	0x4154535f ; undefined
    2b50:	5f525f54 	.inst	0x5f525f54 ; undefined
    2b54:	524f4e5f 	.inst	0x524f4e5f ; undefined
    2b58:	5f4c414d 	.inst	0x5f4c414d ; undefined
    2b5c:	5f544e49 	.inst	0x5f544e49 ; undefined
    2b60:	54415453 	.inst	0x54415453 ; undefined
    2b64:	6600525f 	.inst	0x6600525f ; undefined
    2b68:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    2b6c:	646d635f 	.inst	0x646d635f ; undefined
    2b70:	756f745f 	.inst	0x756f745f ; undefined
    2b74:	72655f74 	.inst	0x72655f74 ; undefined
    2b78:	614d0072 	.inst	0x614d0072 ; undefined
    2b7c:	6665446e 	.inst	0x6665446e ; undefined
    2b80:	4343456c 	.inst	0x4343456c ; undefined
    2b84:	76737200 	.inst	0x76737200 ; undefined
    2b88:	36355f64 	tbz	w4, #6, ffffffffffffd774 <_sp+0xffffffff9efbd774>
    2b8c:	0038355f 	.inst	0x0038355f ; NYI
    2b90:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2b94:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
    2b98:	70757272 	adr	x18, ed9e7 <__stack_size+0xe99e7>
    2b9c:	65720074 	fmla	z20.h, p0/m, z3.h, z18.h
    2ba0:	6e75745f 	uabd	v31.8h, v2.8h, v21.8h
    2ba4:	65725f65 	fnmla	z5.h, p7/m, z27.h, z18.h
    2ba8:	77730071 	.inst	0x77730071 ; undefined
    2bac:	7473725f 	.inst	0x7473725f ; undefined
    2bb0:	7461645f 	.inst	0x7461645f ; undefined
    2bb4:	6c6f7600 	ldnp	d0, d29, [x16, #-272]
    2bb8:	30335f74 	adr	x20, 697a5 <__stack_size+0x657a5>
    2bbc:	6c6f7600 	ldnp	d0, d29, [x16, #-272]
    2bc0:	33335f74 	.inst	0x33335f74 ; undefined
    2bc4:	646d6300 	.inst	0x646d6300 ; undefined
    2bc8:	6372635f 	.inst	0x6372635f ; undefined
    2bcc:	7272655f 	.inst	0x7272655f ; undefined
    2bd0:	6769735f 	.inst	0x6769735f ; undefined
    2bd4:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2bd8:	76006e65 	.inst	0x76006e65 ; undefined
    2bdc:	6f646e65 	.inst	0x6f646e65 ; undefined
    2be0:	72655f72 	.inst	0x72655f72 ; undefined
    2be4:	74735f72 	.inst	0x74735f72 ; undefined
    2be8:	655f7461 	fcmeq	p1.h, p5/z, z3.h, z31.h
    2bec:	6200326e 	.inst	0x6200326e ; undefined
    2bf0:	6b636f6c 	.inst	0x6b636f6c ; undefined
    2bf4:	6e756f63 	umin	v3.8h, v27.8h, v21.8h
    2bf8:	00725f74 	.inst	0x00725f74 ; undefined
    2bfc:	5f434d4d 	.inst	0x5f434d4d ; undefined
    2c00:	5f444d43 	.inst	0x5f444d43 ; undefined
    2c04:	5f444e45 	.inst	0x5f444e45 ; undefined
    2c08:	5f544942 	.inst	0x5f544942 ; undefined
    2c0c:	00525245 	.inst	0x00525245 ; undefined
    2c10:	5f737973 	sqdmlsl	s19, h11, v3.h[7]
    2c14:	72646461 	.inst	0x72646461 ; undefined
    2c18:	5f34365f 	.inst	0x5f34365f ; undefined
    2c1c:	66003376 	.inst	0x66003376 ; undefined
    2c20:	6563726f 	fnmls	z15.h, p4/m, z19.h, z3.h
    2c24:	6e65765f 	uabd	v31.8h, v18.8h, v5.8h
    2c28:	5f726f64 	.inst	0x5f726f64 ; undefined
    2c2c:	33727265 	.inst	0x33727265 ; undefined
    2c30:	524f4600 	.inst	0x524f4600 ; undefined
    2c34:	455f4543 	saddwt	z3.h, z10.h, z31.b
    2c38:	524f5252 	.inst	0x524f5252 ; undefined
    2c3c:	544e495f 	.inst	0x544e495f ; undefined
    2c40:	4154535f 	.inst	0x4154535f ; undefined
    2c44:	5f525f54 	.inst	0x5f525f54 ; undefined
    2c48:	524f465f 	.inst	0x524f465f ; undefined
    2c4c:	415f4543 	.inst	0x415f4543 ; undefined
    2c50:	5f4f5455 	shl	d21, d2, #15
    2c54:	5f444d43 	.inst	0x5f444d43 ; undefined
    2c58:	54415453 	.inst	0x54415453 ; undefined
    2c5c:	7200525f 	tst	w18, #0x1fffff
    2c60:	5f707365 	sqdmlsl	s5, h27, v0.h[3]
    2c64:	5f746e69 	.inst	0x5f746e69 ; undefined
    2c68:	61736964 	.inst	0x61736964 ; undefined
    2c6c:	00656c62 	.inst	0x00656c62 ; undefined
    2c70:	70736572 	adr	x18, e991f <__stack_size+0xe591f>
    2c74:	7272655f 	.inst	0x7272655f ; undefined
    2c78:	6b68635f 	.inst	0x6b68635f ; undefined
    2c7c:	616e655f 	.inst	0x616e655f ; undefined
    2c80:	00656c62 	.inst	0x00656c62 ; undefined
    2c84:	616d6461 	.inst	0x616d6461 ; undefined
    2c88:	75735f33 	.inst	0x75735f33 ; undefined
    2c8c:	726f7070 	.inst	0x726f7070 ; undefined
    2c90:	53430074 	.inst	0x53430074 ; undefined
    2c94:	52435f44 	.inst	0x52435f44 ; undefined
    2c98:	72660043 	.inst	0x72660043 ; undefined
    2c9c:	735f7165 	.inst	0x735f7165 ; undefined
    2ca0:	765f6c65 	.inst	0x765f6c65 ; undefined
    2ca4:	695f6c61 	ldpsw	x1, x27, [x3, #248]
    2ca8:	0074696e 	.inst	0x0074696e ; undefined
    2cac:	5f646d63 	.inst	0x5f646d63 ; undefined
    2cb0:	75737369 	.inst	0x75737369 ; undefined
    2cb4:	72655f65 	.inst	0x72655f65 ; undefined
    2cb8:	73720072 	.inst	0x73720072 ; undefined
    2cbc:	315f6476 	adds	w22, w3, #0x7d9, lsl #12
    2cc0:	32315f35 	orr	w21, w25, #0xffff807f
    2cc4:	6c756d00 	ldnp	d0, d27, [x8, #-176]
    2cc8:	625f6974 	.inst	0x625f6974 ; undefined
    2ccc:	735f6b6c 	.inst	0x735f6b6c ; undefined
    2cd0:	65006c65 	.inst	0x65006c65 ; undefined
    2cd4:	726f7272 	.inst	0x726f7272 ; undefined
    2cd8:	746e695f 	.inst	0x746e695f ; undefined
    2cdc:	6769735f 	.inst	0x6769735f ; undefined
    2ce0:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2ce4:	725f6e65 	.inst	0x725f6e65 ; undefined
    2ce8:	6f6e5f5f 	.inst	0x6f6e5f5f ; undefined
    2cec:	6c616d72 	ldnp	d18, d27, [x11, #-496]
    2cf0:	746e695f 	.inst	0x746e695f ; undefined
    2cf4:	6769735f 	.inst	0x6769735f ; undefined
    2cf8:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2cfc:	63006e65 	.inst	0x63006e65 ; undefined
    2d00:	5f647261 	sqdmlsl	s1, h19, v4.h[2]
    2d04:	65736e69 	fnmls	z9.h, p3/m, z19.h, z19.h
    2d08:	64657472 	.inst	0x64657472 ; undefined
    2d0c:	646d6300 	.inst	0x646d6300 ; undefined
    2d10:	6d6f635f 	ldp	d31, d24, [x26, #-272]
    2d14:	74656c70 	.inst	0x74656c70 ; undefined
    2d18:	72650065 	.inst	0x72650065 ; undefined
    2d1c:	5f726f72 	.inst	0x5f726f72 ; undefined
    2d20:	74617473 	.inst	0x74617473 ; undefined
    2d24:	6568635f 	fnmls	z31.h, p0/m, z26.h, z8.h
    2d28:	61006b63 	.inst	0x61006b63 ; undefined
    2d2c:	5f6f7475 	sqshl	d21, d3, #47
    2d30:	5f646d63 	.inst	0x5f646d63 ; undefined
    2d34:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2d38:	6e676973 	.inst	0x6e676973 ; undefined
    2d3c:	655f6c61 	fcmeq	p1.h, p3/z, z3.h, z31.h
    2d40:	6f43006e 	mla	v14.8h, v3.8h, v3.h[0]
    2d44:	6e65746e 	uabd	v14.8h, v3.8h, v5.8h
    2d48:	6f725074 	fcmla	v20.8h, v3.8h, v18.h[1], #180
    2d4c:	74636574 	.inst	0x74636574 ; undefined
    2d50:	6c707041 	ldnp	d1, d28, [x2, #-256]
    2d54:	53440069 	.inst	0x53440069 ; undefined
    2d58:	706d4952 	adr	x18, dd683 <__stack_size+0xd9683>
    2d5c:	5245006c 	.inst	0x5245006c ; undefined
    2d60:	5f524f52 	.inst	0x5f524f52 ; undefined
    2d64:	5f544e49 	.inst	0x5f544e49 ; undefined
    2d68:	54415453 	.inst	0x54415453 ; undefined
    2d6c:	5f4e455f 	.inst	0x5f4e455f ; undefined
    2d70:	4e5f5f52 	.inst	0x4e5f5f52 ; undefined
    2d74:	414d524f 	.inst	0x414d524f ; undefined
    2d78:	4e495f4c 	.inst	0x4e495f4c ; undefined
    2d7c:	54535f54 	.inst	0x54535f54 ; undefined
    2d80:	455f5441 	ssubwt	z1.h, z2.h, z31.b
    2d84:	00525f4e 	.inst	0x00525f4e ; undefined
    2d88:	5f657163 	sqdmlsl	s3, h11, v5.h[2]
    2d8c:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    2d90:	69735f74 	ldpsw	x20, x23, [x27, #-104]
    2d94:	6c616e67 	ldnp	d7, d27, [x19, #-496]
    2d98:	006e655f 	.inst	0x006e655f ; undefined
    2d9c:	746e6f63 	.inst	0x746e6f63 ; undefined
    2da0:	65756e69 	fnmls	z9.h, p3/m, z19.h, z21.h
    2da4:	7165725f 	cmp	w18, #0x95c, lsl #12
    2da8:	76737200 	.inst	0x76737200 ; undefined
    2dac:	39325f64 	strb	w4, [x27, #3223]
    2db0:	0037325f 	.inst	0x0037325f ; NYI
    2db4:	68676968 	.inst	0x68676968 ; undefined
    2db8:	6570735f 	fnmls	z31.h, p4/m, z26.h, z16.h
    2dbc:	655f6465 	fcmeq	p5.h, p1/z, z3.h, z31.h
    2dc0:	7270006e 	.inst	0x7270006e ; undefined
    2dc4:	74657365 	.inst	0x74657365 ; undefined
    2dc8:	6c61765f 	ldnp	d31, d29, [x18, #-496]
    2dcc:	616e655f 	.inst	0x616e655f ; undefined
    2dd0:	00656c62 	.inst	0x00656c62 ; undefined
    2dd4:	61746164 	.inst	0x61746164 ; undefined
    2dd8:	6372635f 	.inst	0x6372635f ; undefined
    2ddc:	7272655f 	.inst	0x7272655f ; undefined
    2de0:	6174735f 	.inst	0x6174735f ; undefined
    2de4:	6e655f74 	uqrshl	v20.8h, v27.8h, v5.8h
    2de8:	5f657200 	sqdmlsl	s0, h16, v5.h[2]
    2dec:	656e7574 	fnmls	z20.h, p5/m, z11.h, z14.h
    2df0:	6576655f 	fnmls	z31.h, p1/m, z10.h, z22.h
    2df4:	735f746e 	.inst	0x735f746e ; undefined
    2df8:	616e6769 	.inst	0x616e6769 ; undefined
    2dfc:	6e655f6c 	uqrshl	v12.8h, v27.8h, v5.8h
    2e00:	6e657600 	uabd	v0.8h, v16.8h, v5.8h
    2e04:	5f726f64 	.inst	0x5f726f64 ; undefined
    2e08:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2e0c:	74617473 	.inst	0x74617473 ; undefined
    2e10:	316e655f 	cmn	w10, #0xb99, lsl #12
    2e14:	72616300 	.inst	0x72616300 ; undefined
    2e18:	74735f64 	.inst	0x74735f64 ; undefined
    2e1c:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    2e20:	6e657600 	uabd	v0.8h, v16.8h, v5.8h
    2e24:	5f726f64 	.inst	0x5f726f64 ; undefined
    2e28:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2e2c:	74617473 	.inst	0x74617473 ; undefined
    2e30:	336e655f 	.inst	0x336e655f ; undefined
    2e34:	434d4d00 	.inst	0x434d4d00 ; undefined
    2e38:	4655425f 	.inst	0x4655425f ; undefined
    2e3c:	5f44525f 	.inst	0x5f44525f ; undefined
    2e40:	5f594452 	.inst	0x5f594452 ; undefined
    2e44:	454d4954 	uaddwb	z20.h, z10.h, z13.b
    2e48:	0054554f 	.inst	0x0054554f ; undefined
    2e4c:	64726163 	.inst	0x64726163 ; undefined
    2e50:	736e695f 	.inst	0x736e695f ; undefined
    2e54:	00747265 	.inst	0x00747265 ; undefined
    2e58:	435f4453 	.inst	0x435f4453 ; undefined
    2e5c:	63004453 	.inst	0x63004453 ; undefined
    2e60:	5f727275 	sqdmlsl	s21, h19, v2.h[3]
    2e64:	61706163 	.inst	0x61706163 ; undefined
    2e68:	696c6962 	ldpsw	x2, x26, [x11, #-160]
    2e6c:	73656974 	.inst	0x73656974 ; undefined
    2e70:	73720031 	.inst	0x73720031 ; undefined
    2e74:	335f6476 	.inst	0x335f6476 ; undefined
    2e78:	34325f31 	cbz	w17, 67a5c <__stack_size+0x63a5c>
    2e7c:	76737200 	.inst	0x76737200 ; undefined
    2e80:	31335f64 	adds	w4, w27, #0xcd7
    2e84:	0037325f 	.inst	0x0037325f ; NYI
    2e88:	64747865 	.inst	0x64747865 ; undefined
    2e8c:	785f7461 	ldrh	w1, [x3], #-9
    2e90:	00726566 	.inst	0x00726566 ; undefined
    2e94:	63726f66 	.inst	0x63726f66 ; undefined
    2e98:	75615f65 	.inst	0x75615f65 ; undefined
    2e9c:	635f6f74 	.inst	0x635f6f74 ; undefined
    2ea0:	635f646d 	.inst	0x635f646d ; undefined
    2ea4:	655f6372 	fcmne	p2.h, p0/z, z27.h, z31.h
    2ea8:	57007272 	.inst	0x57007272 ; undefined
    2eac:	65705372 	fnmla	z18.h, p4/m, z27.h, z16.h
    2eb0:	61466465 	.inst	0x61466465 ; undefined
    2eb4:	64007463 	.inst	0x64007463 ; undefined
    2eb8:	5f617461 	sqshl	d1, d3, #33
    2ebc:	5f646e65 	.inst	0x5f646e65 ; undefined
    2ec0:	5f746962 	.inst	0x5f746962 ; undefined
    2ec4:	5f727265 	sqdmlsl	s5, h19, v2.h[3]
    2ec8:	74617473 	.inst	0x74617473 ; undefined
    2ecc:	006e655f 	.inst	0x006e655f ; undefined
    2ed0:	32736875 	.inst	0x32736875 ; undefined
    2ed4:	5f66695f 	.inst	0x5f66695f ; undefined
    2ed8:	65746564 	fnmls	z4.h, p1/m, z11.h, z20.h
    2edc:	69007463 	stgp	x3, x29, [x3]
    2ee0:	635f746e 	.inst	0x635f746e ; undefined
    2ee4:	6769735f 	.inst	0x6769735f ; undefined
    2ee8:	5f6c616e 	.inst	0x5f6c616e ; undefined
    2eec:	52006e65 	eor	w5, w19, #0xfffffff
    2ef0:	6f6c4264 	mls	v4.8h, v19.8h, v12.h[2]
    2ef4:	654c6b63 	fcmeq	p3.h, p2/z, z27.h, z12.h
    2ef8:	6164006e 	.inst	0x6164006e ; undefined
    2efc:	696c5f74 	ldpsw	x20, x23, [x27, #-160]
    2f00:	615f656e 	.inst	0x615f656e ; undefined
    2f04:	76697463 	.inst	0x76697463 ; undefined
    2f08:	6f430065 	mla	v5.8h, v3.8h, v3.h[0]
    2f0c:	6c467970 	ldnp	d16, d30, [x11, #96]
    2f10:	64006761 	.inst	0x64006761 ; undefined
    2f14:	745f7672 	.inst	0x745f7672 ; undefined
    2f18:	61657079 	.inst	0x61657079 ; undefined
    2f1c:	76726400 	.inst	0x76726400 ; undefined
    2f20:	7079745f 	adr	xzr, f5dab <__stack_size+0xf1dab>
    2f24:	64006365 	.inst	0x64006365 ; undefined
    2f28:	745f7672 	.inst	0x745f7672 ; undefined
    2f2c:	64657079 	.inst	0x64657079 ; undefined
    2f30:	76726400 	.inst	0x76726400 ; undefined
    2f34:	6c65735f 	ldnp	d31, d28, [x26, #-432]
    2f38:	6c61765f 	ldnp	d31, d29, [x18, #-496]
    2f3c:	7600315f 	.inst	0x7600315f ; undefined
    2f40:	5f326464 	.inst	0x5f326464 ; undefined
    2f44:	5f763831 	sqdmlal	s17, h1, v6.h[7]
    2f48:	70707573 	adr	x19, e3df7 <__stack_size+0xdfdf7>
    2f4c:	0074726f 	.inst	0x0074726f ; undefined
    2f50:	5f676572 	.inst	0x5f676572 ; undefined
    2f54:	74697277 	.inst	0x74697277 ; undefined
    2f58:	616d0065 	.inst	0x616d0065 ; undefined
    2f5c:	6c625f78 	ldnp	d24, d23, [x27, #-480]
    2f60:	656c5f6b 	fnmla	z11.h, p7/m, z27.h, z12.h
    2f64:	6143006e 	.inst	0x6143006e ; undefined
    2f68:	79546472 	ldrh	w18, [x3, #2610]
    2f6c:	41006570 	.inst	0x41006570 ; undefined
    2f70:	5f414d44 	.inst	0x5f414d44 ; undefined
    2f74:	5f525245 	.inst	0x5f525245 ; undefined
    2f78:	54415453 	.inst	0x54415453 ; undefined
    2f7c:	4300525f 	.inst	0x4300525f ; undefined
    2f80:	44647261 	.inst	0x44647261 ; undefined
    2f84:	63657465 	.inst	0x63657465 ; undefined
    2f88:	6e6f6974 	.inst	0x6e6f6974 ; undefined
    2f8c:	5f445300 	.inst	0x5f445300 ; undefined
    2f90:	74697257 	.inst	0x74697257 ; undefined
    2f94:	6e695365 	uabal2	v5.4s, v27.8h, v9.8h
    2f98:	42656c67 	.inst	0x42656c67 ; undefined
    2f9c:	6b636f6c 	.inst	0x6b636f6c ; undefined
    2fa0:	67726100 	.inst	0x67726100 ; undefined
    2fa4:	5200725f 	eor	wsp, w18, #0x1fffffff
    2fa8:	41646165 	.inst	0x41646165 ; undefined
    2fac:	00726464 	.inst	0x00726464 ; undefined
    2fb0:	66667542 	.inst	0x66667542 ; undefined
    2fb4:	535f7265 	.inst	0x535f7265 ; undefined
    2fb8:	6c676e69 	ldnp	d9, d27, [x19, #-400]
    2fbc:	6f6c4265 	mls	v5.8h, v19.8h, v12.h[2]
    2fc0:	53006b63 	ubfx	w3, w27, #0, #27
    2fc4:	49646e65 	.inst	0x49646e65 ; undefined
    2fc8:	4374696e 	.inst	0x4374696e ; undefined
    2fcc:	4453646d 	sqdmlalt	z13.h, z3.b, z19.b
    2fd0:	6c617600 	ldnp	d0, d29, [x16, #-496]
    2fd4:	6f766469 	sqshlu	v9.2d, v3.2d, #54
    2fd8:	6761746c 	.inst	0x6761746c ; undefined
    2fdc:	65720065 	fmla	z5.h, p0/m, z3.h, z18.h
    2fe0:	6e6f7073 	uabdl2	v19.4s, v3.8h, v15.8h
    2fe4:	31306573 	adds	w19, w11, #0xc19
    2fe8:	5f445300 	.inst	0x5f445300 ; undefined
    2fec:	74696e49 	.inst	0x74696e49 ; undefined
    2ff0:	6f6c6200 	umlsl2	v0.4s, v16.8h, v12.h[2]
    2ff4:	41006b63 	.inst	0x41006b63 ; undefined
    2ff8:	64735f4c 	.inst	0x64735f4c ; undefined
    2ffc:	4300632e 	.inst	0x4300632e ; undefined
    3000:	53647261 	.inst	0x53647261 ; undefined
    3004:	75746174 	.inst	0x75746174 ; undefined
    3008:	77530073 	.inst	0x77530073 ; undefined
    300c:	68637469 	.inst	0x68637469 ; undefined
    3010:	61746144 	.inst	0x61746144 ; undefined
    3014:	74646957 	.inst	0x74646957 ; undefined
    3018:	00445368 	.inst	0x00445368 ; undefined
    301c:	74697257 	.inst	0x74697257 ; undefined
    3020:	64644165 	bfdot	z5.s, z11.h, z4.h[0]
    3024:	44530072 	.inst	0x44530072 ; undefined
    3028:	6165525f 	.inst	0x6165525f ; undefined
    302c:	6e695364 	uabal2	v4.4s, v27.8h, v9.8h
    3030:	42656c67 	.inst	0x42656c67 ; undefined
    3034:	6b636f6c 	.inst	0x6b636f6c ; undefined
    3038:	5f647300 	sqdmlsl	s0, h24, v4.h[2]
    303c:	6d69746d 	ldp	d13, d29, [x3, #-368]
    3040:	77007265 	.inst	0x77007265 ; undefined
    3044:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
    3048:	66667562 	.inst	0x66667562 ; undefined
    304c:	61657200 	.inst	0x61657200 ; undefined
    3050:	66756264 	.inst	0x66756264 ; undefined
    3054:	61760066 	.inst	0x61760066 ; undefined
    3058:	0065756c 	.inst	0x0065756c ; undefined
    305c:	6e69616d 	rsubhn2	v13.8h, v11.4s, v9.4s
    3060:	6d00632e 	stp	d14, d24, [x25]
    3064:	006e6961 	.inst	0x006e6961 ; undefined
    3068:	545f4453 	.inst	0x545f4453 ; undefined
    306c:	00747365 	.inst	0x00747365 ; undefined
    3070:	46544146 	.inst	0x46544146 ; undefined
    3074:	41460053 	.inst	0x41460053 ; undefined
    3078:	44454c49 	umlalt	z9.h, z2.b, z5.b
    307c:	5f524600 	.inst	0x5f524600 ; undefined
    3080:	41564e49 	.inst	0x41564e49 ; undefined
    3084:	5f44494c 	.inst	0x5f44494c ; undefined
    3088:	56495244 	.inst	0x56495244 ; undefined
    308c:	5f6e0045 	.inst	0x5f6e0045 ; undefined
    3090:	73746166 	.inst	0x73746166 ; undefined
    3094:	61655200 	.inst	0x61655200 ; undefined
    3098:	66754264 	.inst	0x66754264 ; undefined
    309c:	00726566 	.inst	0x00726566 ; undefined
    30a0:	53455246 	.inst	0x53455246 ; undefined
    30a4:	00544c55 	.inst	0x00544c55 ; undefined
    30a8:	63657364 	.inst	0x63657364 ; undefined
    30ac:	69770074 	ldpsw	x20, x0, [x3, #-72]
    30b0:	6365736e 	.inst	0x6365736e ; undefined
    30b4:	70660074 	adr	x20, cf0c3 <__stack_size+0xcb0c3>
    30b8:	54007274 	.inst	0x54007274 ; undefined
    30bc:	53747365 	.inst	0x53747365 ; undefined
    30c0:	75746174 	.inst	0x75746174 ; undefined
    30c4:	616c0073 	.inst	0x616c0073 ; undefined
    30c8:	635f7473 	.inst	0x635f7473 ; undefined
    30cc:	7473756c 	.inst	0x7473756c ; undefined
    30d0:	69736600 	ldpsw	x0, x25, [x16, #-104]
    30d4:	616c665f 	.inst	0x616c665f ; undefined
    30d8:	52460067 	.inst	0x52460067 ; undefined
    30dc:	4e45445f 	.inst	0x4e45445f ; undefined
    30e0:	00444549 	.inst	0x00444549 ; undefined
    30e4:	5f726964 	.inst	0x5f726964 ; undefined
    30e8:	74636573 	.inst	0x74636573 ; undefined
    30ec:	73657200 	.inst	0x73657200 ; undefined
    30f0:	00746c75 	.inst	0x00746c75 ; undefined
    30f4:	4e5f5246 	.inst	0x4e5f5246 ; undefined
    30f8:	525f544f 	.inst	0x525f544f ; undefined
    30fc:	59444145 	ldapurh	w5, [x10, #68]
    3100:	6f6c4200 	mls	v0.8h, v16.8h, v12.h[2]
    3104:	754e6b63 	.inst	0x754e6b63 ; undefined
    3108:	7366006d 	.inst	0x7366006d ; undefined
    310c:	7079745f 	adr	xzr, f5f97 <__stack_size+0xf1f97>
    3110:	61660065 	.inst	0x61660065 ; undefined
    3114:	73616274 	.inst	0x73616274 ; undefined
    3118:	73730065 	.inst	0x73730065 ; undefined
    311c:	00657a69 	.inst	0x00657a69 ; undefined
    3120:	4d5f5246 	.inst	0x4d5f5246 ; undefined
    3124:	5f53464b 	.inst	0x5f53464b ; undefined
    3128:	524f4241 	.inst	0x524f4241 ; undefined
    312c:	00444554 	.inst	0x00444554 ; undefined
    3130:	6d756e66 	ldp	d6, d27, [x19, #-176]
    3134:	5f524600 	.inst	0x5f524600 ; undefined
    3138:	53495845 	.inst	0x53495845 ; undefined
    313c:	52460054 	.inst	0x52460054 ; undefined
    3140:	564e495f 	.inst	0x564e495f ; undefined
    3144:	44494c41 	umlalt	z1.h, z2.b, z9.b
    3148:	4a424f5f 	eor	wzr, w26, w2, lsr #19
    314c:	00544345 	.inst	0x00544345 ; undefined
    3150:	445f5246 	smlslb	z6.h, z18.b, z31.b
    3154:	5f4b5349 	.inst	0x5f4b5349 ; undefined
    3158:	00525245 	.inst	0x00525245 ; undefined
    315c:	524f5744 	.inst	0x524f5744 ; undefined
    3160:	44530044 	.inst	0x44530044 ; undefined
    3164:	6972575f 	ldpsw	xzr, x21, [x26, #-112]
    3168:	754d6574 	.inst	0x754d6574 ; undefined
    316c:	4269746c 	.inst	0x4269746c ; undefined
    3170:	6b636f6c 	.inst	0x6b636f6c ; undefined
    3174:	52460073 	.inst	0x52460073 ; undefined
    3178:	434f4c5f 	.inst	0x434f4c5f ; undefined
    317c:	0044454b 	.inst	0x0044454b ; undefined
    3180:	74697257 	.inst	0x74697257 ; undefined
    3184:	66754265 	.inst	0x66754265 ; undefined
    3188:	00726566 	.inst	0x00726566 ; undefined
    318c:	525f4453 	.inst	0x525f4453 ; undefined
    3190:	4d646165 	.inst	0x4d646165 ; undefined
    3194:	69746c75 	ldpsw	x21, x27, [x3, #-96]
    3198:	636f6c42 	.inst	0x636f6c42 ; undefined
    319c:	4500736b 	.inst	0x4500736b ; undefined
    31a0:	65736172 	fnmls	z18.h, p0/m, z11.h, z19.h
    31a4:	74617453 	.inst	0x74617453 ; undefined
    31a8:	72007375 	ands	w21, w27, #0x1fffffff
    31ac:	735f7365 	.inst	0x735f7365 ; undefined
    31b0:	72660064 	.inst	0x72660064 ; undefined
    31b4:	635f6565 	.inst	0x635f6565 ; undefined
    31b8:	7473756c 	.inst	0x7473756c ; undefined
    31bc:	69647300 	ldpsw	x0, x28, [x24, #-224]
    31c0:	65745f6f 	fnmla	z15.h, p7/m, z27.h, z20.h
    31c4:	632e7473 	.inst	0x632e7473 ; undefined
    31c8:	69736600 	ldpsw	x0, x25, [x16, #-104]
    31cc:	7600657a 	.inst	0x7600657a ; undefined
    31d0:	61626c6f 	.inst	0x61626c6f ; undefined
    31d4:	46006573 	.inst	0x46006573 ; undefined
    31d8:	4f4e5f52 	.inst	0x4f4e5f52 ; undefined
    31dc:	4c49465f 	.inst	0x4c49465f ; undefined
    31e0:	59420045 	ldapurh	w5, [x2, #32]
    31e4:	63004554 	.inst	0x63004554 ; undefined
    31e8:	657a6973 	fnmls	z19.h, p2/m, z11.h, z26.h
    31ec:	5f524600 	.inst	0x5f524600 ; undefined
    31f0:	54495257 	.inst	0x54495257 ; undefined
    31f4:	52505f45 	.inst	0x52505f45 ; undefined
    31f8:	4345544f 	.inst	0x4345544f ; undefined
    31fc:	00444554 	.inst	0x00444554 ; undefined
    3200:	5f726964 	.inst	0x5f726964 ; undefined
    3204:	00727470 	.inst	0x00727470 ; undefined
    3208:	61665f6e 	.inst	0x61665f6e ; undefined
    320c:	746e6574 	.inst	0x746e6574 ; undefined
    3210:	72696400 	.inst	0x72696400 ; undefined
    3214:	65736162 	fnmls	z2.h, p0/m, z11.h, z19.h
    3218:	6c667700 	ldnp	d0, d29, [x24, #-416]
    321c:	62006761 	.inst	0x62006761 ; undefined
    3220:	6b636f6c 	.inst	0x6b636f6c ; undefined
    3224:	006d756e 	.inst	0x006d756e ; undefined
    3228:	495f5246 	.inst	0x495f5246 ; undefined
    322c:	4c41564e 	.inst	0x4c41564e ; undefined
    3230:	505f4449 	adr	x9, c1aba <__stack_size+0xbdaba>
    3234:	4d415241 	.inst	0x4d415241 ; undefined
    3238:	52455445 	.inst	0x52455445 ; undefined
    323c:	5f524600 	.inst	0x5f524600 ; undefined
    3240:	505f4f4e 	adr	x14, c1c2a <__stack_size+0xbdc2a>
    3244:	00485441 	.inst	0x00485441 ; undefined
    3248:	52776152 	.inst	0x52776152 ; undefined
    324c:	57646165 	.inst	0x57646165 ; undefined
    3250:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
    3254:	74736554 	.inst	0x74736554 ; undefined
    3258:	46004453 	.inst	0x46004453 ; undefined
    325c:	4f4e5f52 	.inst	0x4f4e5f52 ; undefined
    3260:	4e455f54 	.inst	0x4e455f54 ; undefined
    3264:	454c4241 	saddwb	z1.h, z18.h, z12.b
    3268:	52460044 	.inst	0x52460044 ; undefined
    326c:	544f4e5f 	.inst	0x544f4e5f ; undefined
    3270:	4f4e455f 	.inst	0x4f4e455f ; undefined
    3274:	5f484755 	.inst	0x5f484755 ; undefined
    3278:	45524f43 	uaddwt	z3.h, z26.h, z18.b
    327c:	53415000 	.inst	0x53415000 ; undefined
    3280:	00444553 	.inst	0x00444553 ; undefined
    3284:	495f5246 	.inst	0x495f5246 ; undefined
    3288:	4c41564e 	.inst	0x4c41564e ; undefined
    328c:	4e5f4449 	.inst	0x4e5f4449 ; undefined
    3290:	00454d41 	.inst	0x00454d41 ; undefined
    3294:	77656e66 	.inst	0x77656e66 ; undefined
    3298:	725f6e00 	.inst	0x725f6e00 ; undefined
    329c:	64746f6f 	.inst	0x64746f6f ; undefined
    32a0:	46007269 	.inst	0x46007269 ; undefined
    32a4:	4b4f5f52 	sub	w18, w26, w15, lsr #23
    32a8:	5f524600 	.inst	0x5f524600 ; undefined
    32ac:	465f4f4e 	.inst	0x465f4f4e ; undefined
    32b0:	53454c49 	.inst	0x53454c49 ; undefined
    32b4:	45545359 	ssubwb	z25.h, z26.h, z20.b
    32b8:	5246004d 	.inst	0x5246004d ; undefined
    32bc:	544e495f 	.inst	0x544e495f ; undefined
    32c0:	5252455f 	.inst	0x5252455f ; undefined
    32c4:	61725400 	.inst	0x61725400 ; undefined
    32c8:	6566736e 	fnmls	z14.h, p4/m, z27.h, z6.h
    32cc:	61745372 	.inst	0x61745372 ; undefined
    32d0:	31737574 	adds	w20, w11, #0xcdd, lsl #12
    32d4:	61725400 	.inst	0x61725400 ; undefined
    32d8:	6566736e 	fnmls	z14.h, p4/m, z27.h, z6.h
    32dc:	61745372 	.inst	0x61745372 ; undefined
    32e0:	32737574 	.inst	0x32737574 ; undefined
    32e4:	5f524600 	.inst	0x5f524600 ; undefined
    32e8:	5f4f4f54 	.inst	0x5f4f4f54 ; undefined
    32ec:	594e414d 	ldapurh	w13, [x10, #228]
    32f0:	45504f5f 	uaddwt	z31.h, z26.h, z16.b
    32f4:	49465f4e 	.inst	0x49465f4e ; undefined
    32f8:	0053454c 	.inst	0x0053454c ; undefined
    32fc:	545f5246 	b.vs	c1d44 <__stack_size+0xbdd44>
    3300:	4f454d49 	.inst	0x4f454d49 ; undefined
    3304:	64005455 	.inst	0x64005455 ; undefined
    3308:	62617461 	.inst	0x62617461 ; undefined
    330c:	00657361 	.inst	0x00657361 ; undefined
    3310:	756c6373 	.inst	0x756c6373 ; undefined
    3314:	Address 0x0000000000003314 is out of bounds.


Disassembly of section .debug_ranges:

0000000000000000 <.debug_ranges>:
{
   0:	61001510 	.inst	0x61001510 ; undefined
   4:	00000000 	udf	#0
   8:	61001534 	.inst	0x61001534 ; undefined
   c:	00000000 	udf	#0
	panic();
  10:	61001558 	.inst	0x61001558 ; undefined
}
  14:	00000000 	udf	#0
  18:	61001578 	.inst	0x61001578 ; undefined
  1c:	00000000 	udf	#0
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
  20:	61001578 	.inst	0x61001578 ; undefined
  24:	00000000 	udf	#0
  28:	61001594 	.inst	0x61001594 ; undefined
  2c:	00000000 	udf	#0
	return 0;
  30:	61001594 	.inst	0x61001594 ; undefined
}
  34:	00000000 	udf	#0
  38:	610015ac 	.inst	0x610015ac ; undefined
    __delay(delay_cnt);
  3c:	00000000 	udf	#0
  40:	610015ac 	.inst	0x610015ac ; undefined
}
  44:	00000000 	udf	#0
  48:	610015f8 	.inst	0x610015f8 ; undefined
	...
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
  60:	61001764 	.inst	0x61001764 ; undefined
  64:	00000000 	udf	#0
  68:	61001788 	.inst	0x61001788 ; undefined
  6c:	00000000 	udf	#0
    if(Mtimer_IsTimerOut(&mtimer)){
  70:	610017c0 	.inst	0x610017c0 ; undefined
  74:	00000000 	udf	#0
  78:	610017c4 	.inst	0x610017c4 ; undefined
	...
        return MMC_XFER_TIMEOUT;
  90:	61001c20 	.inst	0x61001c20 ; undefined
        if(r.bit.xfer_complete == 1){
  94:	00000000 	udf	#0
  98:	61001c64 	.inst	0x61001c64 ; undefined
        r.bit.dma_interrupt = 0x1;
  9c:	00000000 	udf	#0
  a0:	61001c88 	.inst	0x61001c88 ; undefined
  a4:	00000000 	udf	#0
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
  a8:	61001c8c 	.inst	0x61001c8c ; undefined
	...
  c0:	610015f8 	.inst	0x610015f8 ; undefined
        return MMC_SUCCESS;
  c4:	00000000 	udf	#0
}
  c8:	61001620 	.inst	0x61001620 ; undefined
  cc:	00000000 	udf	#0
            break;
  d0:	61001620 	.inst	0x61001620 ; undefined
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
  d4:	00000000 	udf	#0
  d8:	61001644 	.inst	0x61001644 ; undefined
  dc:	00000000 	udf	#0
            retval = Uart_event_modem;
  e0:	61001644 	.inst	0x61001644 ; undefined
            break;
  e4:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
  e8:	6100166c 	.inst	0x6100166c ; undefined
  ec:	00000000 	udf	#0
  f0:	00000001 	udf	#1
        	retval =Uart_event_thre;
  f4:	00000000 	udf	#0
  f8:	00000001 	udf	#1
        	break;
  fc:	00000000 	udf	#0
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
 100:	6100166c 	.inst	0x6100166c ; undefined
 104:	00000000 	udf	#0
 108:	61001694 	.inst	0x61001694 ; undefined
        	retval = Uart_event_timeout;
 10c:	00000000 	udf	#0
 110:	61001694 	.inst	0x61001694 ; undefined
        	break;
 114:	00000000 	udf	#0
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
 118:	610016ac 	.inst	0x610016ac ; undefined
 11c:	00000000 	udf	#0
 120:	610016ac 	.inst	0x610016ac ; undefined
        	retval = Received_data_available;
 124:	00000000 	udf	#0
 128:	610016d4 	.inst	0x610016d4 ; undefined
            break;
 12c:	00000000 	udf	#0
        	printf("Overrun/parity/ framing errors or break interrupt");
 130:	610016d4 	.inst	0x610016d4 ; undefined
 134:	00000000 	udf	#0
 138:	610016f8 	.inst	0x610016f8 ; undefined
        	retval = Receiver_line_status;
 13c:	00000000 	udf	#0
 140:	61001534 	.inst	0x61001534 ; undefined
            break;
 144:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
 148:	61001558 	.inst	0x61001558 ; undefined
 14c:	00000000 	udf	#0
 150:	610016f8 	.inst	0x610016f8 ; undefined
        	retval = Uart_event_busy;
 154:	00000000 	udf	#0
 158:	6100171c 	.inst	0x6100171c ; undefined
            break;
 15c:	00000000 	udf	#0
            retval = 0;
 160:	6100171c 	.inst	0x6100171c ; undefined
            break;
 164:	00000000 	udf	#0
    return retval;
 168:	6100173c 	.inst	0x6100173c ; undefined
}
 16c:	00000000 	udf	#0
 170:	6100173c 	.inst	0x6100173c ; undefined
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
 174:	00000000 	udf	#0
 178:	61001748 	.inst	0x61001748 ; undefined
 17c:	00000000 	udf	#0
 180:	00000001 	udf	#1
 184:	00000000 	udf	#0
 188:	00000001 	udf	#1
 18c:	00000000 	udf	#0
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
 190:	00000001 	udf	#1
 194:	00000000 	udf	#0
 198:	00000001 	udf	#1
 19c:	00000000 	udf	#0
 1a0:	00000001 	udf	#1
 1a4:	00000000 	udf	#0
 1a8:	00000001 	udf	#1
 1ac:	00000000 	udf	#0
 1b0:	61001748 	.inst	0x61001748 ; undefined
 1b4:	00000000 	udf	#0
 1b8:	610017cc 	.inst	0x610017cc ; undefined
 1bc:	00000000 	udf	#0
 1c0:	610017cc 	.inst	0x610017cc ; undefined
		writel_relaxed(0, GICD_CTLR);
 1c4:	00000000 	udf	#0
 1c8:	610017e8 	.inst	0x610017e8 ; undefined
 1cc:	00000000 	udf	#0
		gic_dist_wait();
 1d0:	610017e8 	.inst	0x610017e8 ; undefined
		if (int_group == GROUP_1_NONSECURE) {
 1d4:	00000000 	udf	#0
 1d8:	61001804 	.inst	0x61001804 ; undefined
 1dc:	00000000 	udf	#0
			gicd_igroup  |= (0x01 << int_id);
 1e0:	61001804 	.inst	0x61001804 ; undefined
 1e4:	00000000 	udf	#0
 1e8:	6100182c 	.inst	0x6100182c ; undefined
 1ec:	00000000 	udf	#0
 1f0:	6100182c 	.inst	0x6100182c ; undefined
 1f4:	00000000 	udf	#0
 1f8:	61001b78 	.inst	0x61001b78 ; undefined
			gicd_igrpmod &= (~(0x01 << int_id));
 1fc:	00000000 	udf	#0
 200:	61001b78 	.inst	0x61001b78 ; undefined
 204:	00000000 	udf	#0
 208:	61001c94 	.inst	0x61001c94 ; undefined
 20c:	00000000 	udf	#0
 210:	61001c94 	.inst	0x61001c94 ; undefined
 214:	00000000 	udf	#0
 218:	61001dc8 	.inst	0x61001dc8 ; undefined
 21c:	00000000 	udf	#0
		} else if (int_group == GROUP_1_SECURE) {
 220:	61001dc8 	.inst	0x61001dc8 ; undefined
 224:	00000000 	udf	#0
 228:	61001e28 	.inst	0x61001e28 ; undefined
			gicd_igroup  &= (~(0x01 << int_id));
 22c:	00000000 	udf	#0
 230:	00000001 	udf	#1
 234:	00000000 	udf	#0
 238:	00000001 	udf	#1
 23c:	00000000 	udf	#0
 240:	61001e28 	.inst	0x61001e28 ; undefined
 244:	00000000 	udf	#0
 248:	61001e68 	.inst	0x61001e68 ; undefined
			gicd_igrpmod |= (0x01 << int_id);
 24c:	00000000 	udf	#0
 250:	61001e68 	.inst	0x61001e68 ; undefined
 254:	00000000 	udf	#0
 258:	61001ea8 	.inst	0x61001ea8 ; undefined
 25c:	00000000 	udf	#0
 260:	61001ea8 	.inst	0x61001ea8 ; undefined
 264:	00000000 	udf	#0
 268:	61001f04 	.inst	0x61001f04 ; undefined
		} else if(int_group == GROUP_0) {
 26c:	00000000 	udf	#0
 270:	61001f04 	.inst	0x61001f04 ; undefined
 274:	00000000 	udf	#0
			gicd_igroup  &= (~(0x01 << int_id));
 278:	61001f2c 	.inst	0x61001f2c ; undefined
 27c:	00000000 	udf	#0
 280:	00000001 	udf	#1
 284:	00000000 	udf	#0
 288:	00000001 	udf	#1
 28c:	00000000 	udf	#0
 290:	00000001 	udf	#1
 294:	00000000 	udf	#0
			gicd_igrpmod &= (0x01 << int_id);
 298:	00000001 	udf	#1
 29c:	00000000 	udf	#0
 2a0:	00000001 	udf	#1
 2a4:	00000000 	udf	#0
 2a8:	00000001 	udf	#1
 2ac:	00000000 	udf	#0
 2b0:	61001f2c 	.inst	0x61001f2c ; undefined
		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
 2b4:	00000000 	udf	#0
 2b8:	6100200c 	.inst	0x6100200c ; undefined
 2bc:	00000000 	udf	#0
 2c0:	6100200c 	.inst	0x6100200c ; undefined
 2c4:	00000000 	udf	#0
 2c8:	61002064 	.inst	0x61002064 ; undefined
 2cc:	00000000 	udf	#0
 2d0:	61002064 	.inst	0x61002064 ; undefined
 2d4:	00000000 	udf	#0
 2d8:	61002108 	.inst	0x61002108 ; undefined
 2dc:	00000000 	udf	#0
 2e0:	00000001 	udf	#1
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
 2e4:	00000000 	udf	#0
 2e8:	00000001 	udf	#1
 2ec:	00000000 	udf	#0
 2f0:	00000001 	udf	#1
 2f4:	00000000 	udf	#0
 2f8:	00000001 	udf	#1
 2fc:	00000000 	udf	#0
 300:	00000001 	udf	#1
 304:	00000000 	udf	#0
 308:	00000001 	udf	#1
 30c:	00000000 	udf	#0
 310:	00000001 	udf	#1
		gic_dist_wait();
 314:	00000000 	udf	#0
}
 318:	00000001 	udf	#1
	...
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
 330:	61002108 	.inst	0x61002108 ; undefined
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
 334:	00000000 	udf	#0
 338:	61002138 	.inst	0x61002138 ; undefined
	...
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
 350:	61002138 	.inst	0x61002138 ; undefined
 354:	00000000 	udf	#0
 358:	6100219c 	.inst	0x6100219c ; undefined
	...
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
 370:	6100219c 	.inst	0x6100219c ; undefined
 374:	00000000 	udf	#0
    block.bit.xfer_block_size = BlockSize;
 378:	610022e4 	.inst	0x610022e4 ; undefined
	...
    block.bit.blockcount_r = BlockNum;
 390:	610022e4 	.inst	0x610022e4 ; undefined
 394:	00000000 	udf	#0
 398:	61002358 	.inst	0x61002358 ; undefined
 39c:	00000000 	udf	#0
 3a0:	61002358 	.inst	0x61002358 ; undefined
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
 3a4:	00000000 	udf	#0
 3a8:	61002484 	.inst	0x61002484 ; undefined
 3ac:	00000000 	udf	#0
 3b0:	61002484 	.inst	0x61002484 ; undefined
 3b4:	00000000 	udf	#0
 3b8:	61002bb0 	.inst	0x61002bb0 ; undefined
 3bc:	00000000 	udf	#0
 3c0:	61002bb0 	.inst	0x61002bb0 ; undefined
 3c4:	00000000 	udf	#0
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
 3c8:	61002c60 	.inst	0x61002c60 ; undefined
	...
 3e0:	61002c60 	.inst	0x61002c60 ; undefined
 3e4:	00000000 	udf	#0
 3e8:	61002c88 	.inst	0x61002c88 ; undefined
	...
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
 400:	61002c88 	.inst	0x61002c88 ; undefined
 404:	00000000 	udf	#0
 408:	61002cfc 	.inst	0x61002cfc ; undefined
	...
	MMC_WAIT_CMD_COMPLETE(SDIO);
 420:	61002cfc 	.inst	0x61002cfc ; undefined
 424:	00000000 	udf	#0
 428:	61002d54 	.inst	0x61002d54 ; undefined
 42c:	00000000 	udf	#0
 430:	61002d54 	.inst	0x61002d54 ; undefined
 434:	00000000 	udf	#0
 438:	61002d6c 	.inst	0x61002d6c ; undefined
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
 43c:	00000000 	udf	#0
 440:	61002d6c 	.inst	0x61002d6c ; undefined
 444:	00000000 	udf	#0
 448:	61002d84 	.inst	0x61002d84 ; undefined
 44c:	00000000 	udf	#0
 450:	61002d84 	.inst	0x61002d84 ; undefined
 454:	00000000 	udf	#0
 458:	61002dc4 	.inst	0x61002dc4 ; undefined
 45c:	00000000 	udf	#0
 460:	00000001 	udf	#1
	return MMC_SUCCESS;
 464:	00000000 	udf	#0
}
 468:	00000001 	udf	#1
 46c:	00000000 	udf	#0
 470:	61002dc4 	.inst	0x61002dc4 ; undefined
 474:	00000000 	udf	#0
 478:	61002e18 	.inst	0x61002e18 ; undefined
 47c:	00000000 	udf	#0
 480:	00000001 	udf	#1
 484:	00000000 	udf	#0
 488:	00000001 	udf	#1
	...
 4a0:	61002e18 	.inst	0x61002e18 ; undefined
 4a4:	00000000 	udf	#0
 4a8:	61002e1c 	.inst	0x61002e1c ; undefined
 4ac:	00000000 	udf	#0
 4b0:	61002e1c 	.inst	0x61002e1c ; undefined
 4b4:	00000000 	udf	#0
 4b8:	61002e3c 	.inst	0x61002e3c ; undefined
 4bc:	00000000 	udf	#0
 4c0:	61002e3c 	.inst	0x61002e3c ; undefined
 4c4:	00000000 	udf	#0
 4c8:	61002e5c 	.inst	0x61002e5c ; undefined
 4cc:	00000000 	udf	#0
 4d0:	61002e5c 	.inst	0x61002e5c ; undefined
 4d4:	00000000 	udf	#0
 4d8:	61002e7c 	.inst	0x61002e7c ; undefined
 4dc:	00000000 	udf	#0
 4e0:	61002e7c 	.inst	0x61002e7c ; undefined
 4e4:	00000000 	udf	#0
 4e8:	61002e9c 	.inst	0x61002e9c ; undefined
 4ec:	00000000 	udf	#0
 4f0:	61002e9c 	.inst	0x61002e9c ; undefined
 4f4:	00000000 	udf	#0
 4f8:	61002ebc 	.inst	0x61002ebc ; undefined
 4fc:	00000000 	udf	#0
 500:	00000001 	udf	#1
 504:	00000000 	udf	#0
 508:	00000001 	udf	#1
 50c:	00000000 	udf	#0
 510:	00000001 	udf	#1
 514:	00000000 	udf	#0
 518:	00000001 	udf	#1
 51c:	00000000 	udf	#0
 520:	61002ebc 	.inst	0x61002ebc ; undefined
 524:	00000000 	udf	#0
 528:	61002edc 	.inst	0x61002edc ; undefined
	...
 540:	00000001 	udf	#1
 544:	00000000 	udf	#0
 548:	00000001 	udf	#1
 54c:	00000000 	udf	#0
 550:	00000001 	udf	#1
 554:	00000000 	udf	#0
 558:	00000001 	udf	#1
 55c:	00000000 	udf	#0
 560:	61002edc 	.inst	0x61002edc ; undefined
 564:	00000000 	udf	#0
 568:	61002f6c 	.inst	0x61002f6c ; undefined
 56c:	00000000 	udf	#0
 570:	00000001 	udf	#1
 574:	00000000 	udf	#0
 578:	00000001 	udf	#1
 57c:	00000000 	udf	#0
 580:	61002f6c 	.inst	0x61002f6c ; undefined
 584:	00000000 	udf	#0
 588:	61002fa8 	.inst	0x61002fa8 ; undefined
	...
 5a0:	61002fa8 	.inst	0x61002fa8 ; undefined
 5a4:	00000000 	udf	#0
 5a8:	61003380 	.inst	0x61003380 ; undefined
	...
 5c0:	61003380 	.inst	0x61003380 ; undefined
 5c4:	00000000 	udf	#0
 5c8:	610033a0 	.inst	0x610033a0 ; undefined
 5cc:	00000000 	udf	#0
 5d0:	610033a0 	.inst	0x610033a0 ; undefined
 5d4:	00000000 	udf	#0
 5d8:	61003458 	.inst	0x61003458 ; undefined
 5dc:	00000000 	udf	#0
 5e0:	61003458 	.inst	0x61003458 ; undefined
 5e4:	00000000 	udf	#0
 5e8:	61003510 	.inst	0x61003510 ; undefined
 5ec:	00000000 	udf	#0
 5f0:	61003510 	.inst	0x61003510 ; undefined
 5f4:	00000000 	udf	#0
 5f8:	610035b8 	.inst	0x610035b8 ; undefined
 5fc:	00000000 	udf	#0
 600:	610035b8 	.inst	0x610035b8 ; undefined
 604:	00000000 	udf	#0
 608:	61003664 	.inst	0x61003664 ; undefined
 60c:	00000000 	udf	#0
 610:	61003664 	.inst	0x61003664 ; undefined
 614:	00000000 	udf	#0
 618:	610036a8 	.inst	0x610036a8 ; undefined
 61c:	00000000 	udf	#0
 620:	610036a8 	.inst	0x610036a8 ; undefined
 624:	00000000 	udf	#0
 628:	61003710 	.inst	0x61003710 ; undefined
 62c:	00000000 	udf	#0
 630:	00000001 	udf	#1
 634:	00000000 	udf	#0
 638:	00000001 	udf	#1
 63c:	00000000 	udf	#0
 640:	00000001 	udf	#1
 644:	00000000 	udf	#0
 648:	00000001 	udf	#1
 64c:	00000000 	udf	#0
 650:	00000001 	udf	#1
 654:	00000000 	udf	#0
 658:	00000001 	udf	#1
 65c:	00000000 	udf	#0
 660:	00000001 	udf	#1
 664:	00000000 	udf	#0
 668:	00000001 	udf	#1
 66c:	00000000 	udf	#0
 670:	00000001 	udf	#1
 674:	00000000 	udf	#0
 678:	00000001 	udf	#1
 67c:	00000000 	udf	#0
 680:	00000001 	udf	#1
 684:	00000000 	udf	#0
 688:	00000001 	udf	#1
 68c:	00000000 	udf	#0
 690:	00000001 	udf	#1
 694:	00000000 	udf	#0
 698:	00000001 	udf	#1
 69c:	00000000 	udf	#0
 6a0:	00000001 	udf	#1
 6a4:	00000000 	udf	#0
 6a8:	00000001 	udf	#1
 6ac:	00000000 	udf	#0
 6b0:	00000001 	udf	#1
 6b4:	00000000 	udf	#0
 6b8:	00000001 	udf	#1
 6bc:	00000000 	udf	#0
 6c0:	00000001 	udf	#1
 6c4:	00000000 	udf	#0
 6c8:	00000001 	udf	#1
 6cc:	00000000 	udf	#0
 6d0:	00000001 	udf	#1
 6d4:	00000000 	udf	#0
 6d8:	00000001 	udf	#1
 6dc:	00000000 	udf	#0
 6e0:	00000001 	udf	#1
 6e4:	00000000 	udf	#0
 6e8:	00000001 	udf	#1
 6ec:	00000000 	udf	#0
 6f0:	00000001 	udf	#1
 6f4:	00000000 	udf	#0
 6f8:	00000001 	udf	#1
 6fc:	00000000 	udf	#0
 700:	00000001 	udf	#1
 704:	00000000 	udf	#0
 708:	00000001 	udf	#1
 70c:	00000000 	udf	#0
 710:	00000001 	udf	#1
 714:	00000000 	udf	#0
 718:	00000001 	udf	#1
 71c:	00000000 	udf	#0
 720:	00000001 	udf	#1
 724:	00000000 	udf	#0
 728:	00000001 	udf	#1
 72c:	00000000 	udf	#0
 730:	00000001 	udf	#1
 734:	00000000 	udf	#0
 738:	00000001 	udf	#1
 73c:	00000000 	udf	#0
 740:	00000001 	udf	#1
 744:	00000000 	udf	#0
 748:	00000001 	udf	#1
 74c:	00000000 	udf	#0
 750:	00000001 	udf	#1
 754:	00000000 	udf	#0
 758:	00000001 	udf	#1
 75c:	00000000 	udf	#0
 760:	00000001 	udf	#1
 764:	00000000 	udf	#0
 768:	00000001 	udf	#1
 76c:	00000000 	udf	#0
 770:	00000001 	udf	#1
 774:	00000000 	udf	#0
 778:	00000001 	udf	#1
 77c:	00000000 	udf	#0
 780:	00000001 	udf	#1
 784:	00000000 	udf	#0
 788:	00000001 	udf	#1
 78c:	00000000 	udf	#0
 790:	00000001 	udf	#1
 794:	00000000 	udf	#0
 798:	00000001 	udf	#1
 79c:	00000000 	udf	#0
 7a0:	00000001 	udf	#1
 7a4:	00000000 	udf	#0
 7a8:	00000001 	udf	#1
	...
 7c0:	00000001 	udf	#1
 7c4:	00000000 	udf	#0
 7c8:	00000001 	udf	#1
 7cc:	00000000 	udf	#0
 7d0:	00000001 	udf	#1
 7d4:	00000000 	udf	#0
 7d8:	00000001 	udf	#1
 7dc:	00000000 	udf	#0
 7e0:	61003710 	.inst	0x61003710 ; undefined
 7e4:	00000000 	udf	#0
 7e8:	61003768 	.inst	0x61003768 ; undefined
 7ec:	00000000 	udf	#0
 7f0:	61003768 	.inst	0x61003768 ; undefined
 7f4:	00000000 	udf	#0
 7f8:	610037e4 	.inst	0x610037e4 ; undefined
 7fc:	00000000 	udf	#0
 800:	610037e4 	.inst	0x610037e4 ; undefined
 804:	00000000 	udf	#0
 808:	610037fc 	.inst	0x610037fc ; undefined
	...
 820:	610037fc 	.inst	0x610037fc ; undefined
 824:	00000000 	udf	#0
 828:	61003814 	.inst	0x61003814 ; undefined
 82c:	00000000 	udf	#0
 830:	61003814 	.inst	0x61003814 ; undefined
 834:	00000000 	udf	#0
 838:	61003838 	.inst	0x61003838 ; undefined
 83c:	00000000 	udf	#0
 840:	61003838 	.inst	0x61003838 ; undefined
 844:	00000000 	udf	#0
 848:	61003a60 	.inst	0x61003a60 ; undefined
 84c:	00000000 	udf	#0
 850:	61003a60 	.inst	0x61003a60 ; undefined
 854:	00000000 	udf	#0
 858:	61003ac8 	.inst	0x61003ac8 ; undefined
 85c:	00000000 	udf	#0
 860:	61003ac8 	.inst	0x61003ac8 ; undefined
 864:	00000000 	udf	#0
 868:	61003b8c 	.inst	0x61003b8c ; undefined
 86c:	00000000 	udf	#0
 870:	61003b8c 	.inst	0x61003b8c ; undefined
 874:	00000000 	udf	#0
 878:	61003c50 	.inst	0x61003c50 ; undefined
 87c:	00000000 	udf	#0
 880:	00000001 	udf	#1
 884:	00000000 	udf	#0
 888:	00000001 	udf	#1
 88c:	00000000 	udf	#0
 890:	00000001 	udf	#1
 894:	00000000 	udf	#0
 898:	00000001 	udf	#1
 89c:	00000000 	udf	#0
 8a0:	00000001 	udf	#1
 8a4:	00000000 	udf	#0
 8a8:	00000001 	udf	#1
 8ac:	00000000 	udf	#0
 8b0:	61003c50 	.inst	0x61003c50 ; undefined
 8b4:	00000000 	udf	#0
 8b8:	61003cd4 	.inst	0x61003cd4 ; undefined
 8bc:	00000000 	udf	#0
 8c0:	00000001 	udf	#1
 8c4:	00000000 	udf	#0
 8c8:	00000001 	udf	#1
 8cc:	00000000 	udf	#0
 8d0:	00000001 	udf	#1
 8d4:	00000000 	udf	#0
 8d8:	00000001 	udf	#1
 8dc:	00000000 	udf	#0
 8e0:	61003cd4 	.inst	0x61003cd4 ; undefined
 8e4:	00000000 	udf	#0
 8e8:	61003e50 	.inst	0x61003e50 ; undefined
 8ec:	00000000 	udf	#0
 8f0:	61003e50 	.inst	0x61003e50 ; undefined
 8f4:	00000000 	udf	#0
 8f8:	6100425c 	.inst	0x6100425c ; undefined
 8fc:	00000000 	udf	#0
 900:	6100425c 	.inst	0x6100425c ; undefined
 904:	00000000 	udf	#0
 908:	61004500 	.inst	0x61004500 ; undefined
 90c:	00000000 	udf	#0
 910:	61004500 	.inst	0x61004500 ; undefined
 914:	00000000 	udf	#0
 918:	610050b4 	.inst	0x610050b4 ; undefined
	...
 930:	610050b4 	.inst	0x610050b4 ; undefined
 934:	00000000 	udf	#0
 938:	61005230 	.inst	0x61005230 ; undefined
 93c:	00000000 	udf	#0
 940:	61005230 	.inst	0x61005230 ; undefined
 944:	00000000 	udf	#0
 948:	61005b3c 	.inst	0x61005b3c ; undefined
 94c:	00000000 	udf	#0
 950:	61005b3c 	.inst	0x61005b3c ; undefined
 954:	00000000 	udf	#0
 958:	61005d04 	.inst	0x61005d04 ; undefined
 95c:	00000000 	udf	#0
 960:	61005d04 	.inst	0x61005d04 ; undefined
 964:	00000000 	udf	#0
 968:	61005df4 	.inst	0x61005df4 ; undefined
 96c:	00000000 	udf	#0
 970:	61005df4 	.inst	0x61005df4 ; undefined
 974:	00000000 	udf	#0
 978:	610060b0 	.inst	0x610060b0 ; undefined
 97c:	00000000 	udf	#0
 980:	610060b0 	.inst	0x610060b0 ; undefined
 984:	00000000 	udf	#0
 988:	61006384 	.inst	0x61006384 ; undefined
	...
 9a0:	61006384 	.inst	0x61006384 ; undefined
 9a4:	00000000 	udf	#0
 9a8:	6100639c 	.inst	0x6100639c ; undefined
	...
 9c0:	00000001 	udf	#1
 9c4:	00000000 	udf	#0
 9c8:	00000001 	udf	#1
 9cc:	00000000 	udf	#0
 9d0:	00000001 	udf	#1
 9d4:	00000000 	udf	#0
 9d8:	00000001 	udf	#1
 9dc:	00000000 	udf	#0
 9e0:	6100639c 	.inst	0x6100639c ; undefined
 9e4:	00000000 	udf	#0
 9e8:	61006504 	.inst	0x61006504 ; undefined
 9ec:	00000000 	udf	#0
 9f0:	61006504 	.inst	0x61006504 ; undefined
 9f4:	00000000 	udf	#0
 9f8:	610065d8 	.inst	0x610065d8 ; undefined
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
{
   0:	3a434347 	ccmn	w26, w3, #0x7, mi  // mi = first
   4:	4e472820 	trn1	v0.8h, v1.8h, v7.8h
   8:	6f542055 	umlal2	v21.4s, v2.8h, v4.h[1]
   c:	68636c6f 	.inst	0x68636c6f ; undefined
	panic();
  10:	206e6961 	.inst	0x206e6961 ; undefined
}
  14:	20726f66 	.inst	0x20726f66 ; undefined
  18:	20656874 	.inst	0x20656874 ; undefined
  1c:	206d7241 	.inst	0x206d7241 ; undefined
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
  20:	68637241 	.inst	0x68637241 ; undefined
  24:	63657469 	.inst	0x63657469 ; undefined
  28:	65727574 	fnmls	z20.h, p5/m, z11.h, z18.h
  2c:	2e313120 	usubw	v0.8h, v9.8h, v17.8b
	return 0;
  30:	30322d32 	adr	x18, 645d5 <__stack_size+0x605d5>
}
  34:	302e3232 	adr	x18, 5c679 <__stack_size+0x58679>
  38:	61282032 	.inst	0x61282032 ; undefined
    __delay(delay_cnt);
  3c:	312d6d72 	adds	w18, w11, #0xb5b
  40:	34312e31 	cbz	w17, 62604 <__stack_size+0x5e604>
}
  44:	31202929 	adds	w9, w9, #0x80a
  48:	2e322e31 	uqsub	v17.8b, v17.8b, v18.8b
  4c:	30322031 	adr	x17, 64451 <__stack_size+0x60451>
    } while(Tconsumed < DelayCnt);
  50:	31303232 	adds	w18, w17, #0xc0c
    return 0;
  54:	Address 0x0000000000000054 is out of bounds.


Disassembly of section .debug_frame:

0000000000000000 <.debug_frame>:
{
       0:	0000000c 	udf	#12
       4:	ffffffff 	.inst	0xffffffff ; undefined
       8:	78040001 	sturh	w1, [x0, #64]
       c:	001f0c1e 	.inst	0x001f0c1e ; undefined
	panic();
      10:	0000001c 	udf	#28
}
      14:	00000000 	udf	#0
      18:	61001510 	.inst	0x61001510 ; undefined
      1c:	00000000 	udf	#0
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	00000024 	udf	#36
      24:	00000000 	udf	#0
      28:	47100e41 	.inst	0x47100e41 ; undefined
      2c:	0000000e 	udf	#14
	return 0;
      30:	0000001c 	udf	#28
}
      34:	00000000 	udf	#0
      38:	61001558 	.inst	0x61001558 ; undefined
    __delay(delay_cnt);
      3c:	00000000 	udf	#0
      40:	00000020 	udf	#32
}
      44:	00000000 	udf	#0
      48:	46100e41 	.inst	0x46100e41 ; undefined
      4c:	0000000e 	udf	#14
    } while(Tconsumed < DelayCnt);
      50:	0000001c 	udf	#28
    return 0;
      54:	00000000 	udf	#0
}
      58:	61001578 	.inst	0x61001578 ; undefined
      5c:	00000000 	udf	#0
    MTIMER_OUT_CONDITION(MMC_XFER_TIMEOUT_VAL, &mtimer, \
      60:	0000001c 	udf	#28
      64:	00000000 	udf	#0
      68:	45100e41 	.inst	0x45100e41 ; undefined
      6c:	0000000e 	udf	#14
    if(Mtimer_IsTimerOut(&mtimer)){
      70:	0000001c 	udf	#28
      74:	00000000 	udf	#0
      78:	61001594 	.inst	0x61001594 ; undefined
      7c:	00000000 	udf	#0
      80:	00000018 	udf	#24
        error_stat_check(r);
      84:	00000000 	udf	#0
      88:	44100e41 	.inst	0x44100e41 ; undefined
        return MMC_XFER_TIMEOUT;
      8c:	0000000e 	udf	#14
      90:	00000024 	udf	#36
        if(r.bit.xfer_complete == 1){
      94:	00000000 	udf	#0
      98:	610015ac 	.inst	0x610015ac ; undefined
        r.bit.dma_interrupt = 0x1;
      9c:	00000000 	udf	#0
      a0:	0000004c 	udf	#76
      a4:	00000000 	udf	#0
        REG_WRITE(&(ptr->error_int_stat_r__normal_int_stat.d32), r.d32);
      a8:	9d100e41 	.inst	0x9d100e41 ; undefined
      ac:	51019e02 	sub	w2, w16, #0x67
      b0:	000eddde 	.inst	0x000eddde ; undefined
      b4:	00000000 	udf	#0
      b8:	0000000c 	udf	#12
      bc:	ffffffff 	.inst	0xffffffff ; undefined
      c0:	78040001 	sturh	w1, [x0, #64]
        return MMC_SUCCESS;
      c4:	001f0c1e 	.inst	0x001f0c1e ; undefined
}
      c8:	0000001c 	udf	#28
      cc:	000000b8 	udf	#184
            break;
      d0:	610015f8 	.inst	0x610015f8 ; undefined
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d4:	00000000 	udf	#0
      d8:	00000028 	udf	#40
      dc:	00000000 	udf	#0
            retval = Uart_event_modem;
      e0:	48200e41 	.inst	0x48200e41 ; undefined
            break;
      e4:	0000000e 	udf	#14
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	0000001c 	udf	#28
      ec:	000000b8 	udf	#184
      f0:	61001620 	.inst	0x61001620 ; undefined
        	retval =Uart_event_thre;
      f4:	00000000 	udf	#0
      f8:	00000024 	udf	#36
        	break;
      fc:	00000000 	udf	#0
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	47100e41 	.inst	0x47100e41 ; undefined
     104:	0000000e 	udf	#14
     108:	0000001c 	udf	#28
        	retval = Uart_event_timeout;
     10c:	000000b8 	udf	#184
     110:	61001644 	.inst	0x61001644 ; undefined
        	break;
     114:	00000000 	udf	#0
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	00000028 	udf	#40
     11c:	00000000 	udf	#0
     120:	48200e41 	.inst	0x48200e41 ; undefined
        	retval = Received_data_available;
     124:	0000000e 	udf	#14
     128:	0000001c 	udf	#28
            break;
     12c:	000000b8 	udf	#184
	...
        	printf("Overrun/parity/ framing errors or break interrupt");
     138:	00000018 	udf	#24
        	retval = Receiver_line_status;
     13c:	00000000 	udf	#0
     140:	44100e41 	.inst	0x44100e41 ; undefined
            break;
     144:	0000000e 	udf	#14
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	0000001c 	udf	#28
     14c:	000000b8 	udf	#184
     150:	6100166c 	.inst	0x6100166c ; undefined
        	retval = Uart_event_busy;
     154:	00000000 	udf	#0
     158:	00000028 	udf	#40
            break;
     15c:	00000000 	udf	#0
            retval = 0;
     160:	48200e41 	.inst	0x48200e41 ; undefined
            break;
     164:	0000000e 	udf	#14
    return retval;
     168:	0000001c 	udf	#28
}
     16c:	000000b8 	udf	#184
     170:	61001694 	.inst	0x61001694 ; undefined
		u32 gicd_igroup  = readl_relaxed(GICD_IGROUPR  + int_id / 32);
     174:	00000000 	udf	#0
     178:	00000018 	udf	#24
     17c:	00000000 	udf	#0
     180:	44100e41 	.inst	0x44100e41 ; undefined
     184:	0000000e 	udf	#14
     188:	0000001c 	udf	#28
     18c:	000000b8 	udf	#184
		u32 gicd_igrpmod = readl_relaxed(GICD_IGRPMODR + int_id / 32);
     190:	610016ac 	.inst	0x610016ac ; undefined
     194:	00000000 	udf	#0
     198:	00000028 	udf	#40
     19c:	00000000 	udf	#0
     1a0:	48200e41 	.inst	0x48200e41 ; undefined
     1a4:	0000000e 	udf	#14
     1a8:	0000001c 	udf	#28
     1ac:	000000b8 	udf	#184
     1b0:	610016d4 	.inst	0x610016d4 ; undefined
     1b4:	00000000 	udf	#0
     1b8:	00000024 	udf	#36
     1bc:	00000000 	udf	#0
     1c0:	47200e41 	.inst	0x47200e41 ; undefined
		writel_relaxed(0, GICD_CTLR);
     1c4:	0000000e 	udf	#14
     1c8:	0000001c 	udf	#28
     1cc:	000000b8 	udf	#184
		gic_dist_wait();
     1d0:	61001534 	.inst	0x61001534 ; undefined
		if (int_group == GROUP_1_NONSECURE) {
     1d4:	00000000 	udf	#0
     1d8:	00000024 	udf	#36
     1dc:	00000000 	udf	#0
			gicd_igroup  |= (0x01 << int_id);
     1e0:	47100e41 	.inst	0x47100e41 ; undefined
     1e4:	0000000e 	udf	#14
     1e8:	0000001c 	udf	#28
     1ec:	000000b8 	udf	#184
     1f0:	610016f8 	.inst	0x610016f8 ; undefined
     1f4:	00000000 	udf	#0
     1f8:	00000024 	udf	#36
			gicd_igrpmod &= (~(0x01 << int_id));
     1fc:	00000000 	udf	#0
     200:	47100e41 	.inst	0x47100e41 ; undefined
     204:	0000000e 	udf	#14
     208:	0000001c 	udf	#28
     20c:	000000b8 	udf	#184
     210:	6100171c 	.inst	0x6100171c ; undefined
     214:	00000000 	udf	#0
     218:	00000020 	udf	#32
     21c:	00000000 	udf	#0
		} else if (int_group == GROUP_1_SECURE) {
     220:	46200e41 	.inst	0x46200e41 ; undefined
     224:	0000000e 	udf	#14
     228:	00000014 	udf	#20
			gicd_igroup  &= (~(0x01 << int_id));
     22c:	000000b8 	udf	#184
     230:	6100173c 	.inst	0x6100173c ; undefined
     234:	00000000 	udf	#0
     238:	0000000c 	udf	#12
     23c:	00000000 	udf	#0
     240:	00000024 	udf	#36
     244:	000000b8 	udf	#184
	...
			gicd_igrpmod |= (0x01 << int_id);
     250:	00000098 	udf	#152
     254:	00000000 	udf	#0
     258:	9d300e41 	.inst	0x9d300e41 ; undefined
     25c:	64059e06 	.inst	0x64059e06 ; undefined
     260:	000eddde 	.inst	0x000eddde ; undefined
     264:	00000000 	udf	#0
     268:	00000024 	udf	#36
		} else if(int_group == GROUP_0) {
     26c:	000000b8 	udf	#184
	...
			gicd_igroup  &= (~(0x01 << int_id));
     278:	00000030 	udf	#48
     27c:	00000000 	udf	#0
     280:	9d200e41 	.inst	0x9d200e41 ; undefined
     284:	4a039e04 	.inst	0x4a039e04 ; undefined
     288:	000eddde 	.inst	0x000eddde ; undefined
     28c:	00000000 	udf	#0
     290:	00000024 	udf	#36
     294:	000000b8 	udf	#184
	...
			gicd_igrpmod &= (0x01 << int_id);
     2a0:	00000030 	udf	#48
     2a4:	00000000 	udf	#0
     2a8:	9d200e41 	.inst	0x9d200e41 ; undefined
     2ac:	4a039e04 	.inst	0x4a039e04 ; undefined
     2b0:	000eddde 	.inst	0x000eddde ; undefined
		writel_relaxed(gicd_igrpmod, GICD_IGRPMODR + int_id / 8);
     2b4:	00000000 	udf	#0
     2b8:	00000024 	udf	#36
     2bc:	000000b8 	udf	#184
     2c0:	61001748 	.inst	0x61001748 ; undefined
     2c4:	00000000 	udf	#0
     2c8:	00000084 	udf	#132
     2cc:	00000000 	udf	#0
     2d0:	9d400e41 	.inst	0x9d400e41 ; undefined
     2d4:	5f079e08 	.inst	0x5f079e08 ; undefined
     2d8:	000eddde 	.inst	0x000eddde ; undefined
     2dc:	00000000 	udf	#0
     2e0:	00000024 	udf	#36
		writel_relaxed(gicd_igroup, GICD_IGROUPR + int_id / 8);
     2e4:	000000b8 	udf	#184
     2e8:	610017cc 	.inst	0x610017cc ; undefined
     2ec:	00000000 	udf	#0
     2f0:	0000001c 	udf	#28
     2f4:	00000000 	udf	#0
     2f8:	9d100e41 	.inst	0x9d100e41 ; undefined
     2fc:	45019e02 	.inst	0x45019e02 ; undefined
     300:	000eddde 	.inst	0x000eddde ; undefined
     304:	00000000 	udf	#0
     308:	00000024 	udf	#36
     30c:	000000b8 	udf	#184
     310:	610017e8 	.inst	0x610017e8 ; undefined
		gic_dist_wait();
     314:	00000000 	udf	#0
}
     318:	0000001c 	udf	#28
     31c:	00000000 	udf	#0
     320:	9d100e41 	.inst	0x9d100e41 ; undefined
    reg.bit.auto_cmd_enable = MMC_XM_AUTO_CMD12_ENABLE;
     324:	45019e02 	.inst	0x45019e02 ; undefined
     328:	000eddde 	.inst	0x000eddde ; undefined
     32c:	00000000 	udf	#0
     330:	0000001c 	udf	#28
    reg.bit.resp_type_select = MMC_C_RESP_LEN_48;
     334:	000000b8 	udf	#184
     338:	61001804 	.inst	0x61001804 ; undefined
     33c:	00000000 	udf	#0
     340:	00000028 	udf	#40
    reg.bit.data_present_sel = MMC_C_DATA_PRESENT;
     344:	00000000 	udf	#0
     348:	48200e41 	.inst	0x48200e41 ; undefined
     34c:	0000000e 	udf	#14
    reg.bit.cmd_index = SD_CMD_WRITE_MULT_BLOCK;
     350:	00000024 	udf	#36
     354:	000000b8 	udf	#184
     358:	6100182c 	.inst	0x6100182c ; undefined
     35c:	00000000 	udf	#0
    block.d32 = REG_READ(&(SDIO->blockcount_r__blocksize));
     360:	0000034c 	udf	#844
     364:	00000000 	udf	#0
     368:	9d400e41 	.inst	0x9d400e41 ; undefined
     36c:	02079e08 	.inst	0x02079e08 ; undefined
     370:	0eddded1 	.inst	0x0eddded1 ; undefined
     374:	00000000 	udf	#0
    block.bit.xfer_block_size = BlockSize;
     378:	00000024 	udf	#36
     37c:	000000b8 	udf	#184
     380:	61001b78 	.inst	0x61001b78 ; undefined
     384:	00000000 	udf	#0
     388:	0000011c 	udf	#284
     38c:	00000000 	udf	#0
    block.bit.blockcount_r = BlockNum;
     390:	9d400e41 	.inst	0x9d400e41 ; undefined
     394:	02079e08 	.inst	0x02079e08 ; undefined
     398:	0eddde45 	.inst	0x0eddde45 ; undefined
     39c:	00000000 	udf	#0
     3a0:	00000024 	udf	#36
    REG_WRITE(&(SDIO->blockcount_r__blocksize.d32), block.d32);
     3a4:	000000b8 	udf	#184
     3a8:	61001c94 	.inst	0x61001c94 ; undefined
     3ac:	00000000 	udf	#0
     3b0:	00000134 	udf	#308
     3b4:	00000000 	udf	#0
     3b8:	9d300e41 	.inst	0x9d300e41 ; undefined
     3bc:	02059e06 	.inst	0x02059e06 ; undefined
     3c0:	0eddde4b 	.inst	0x0eddde4b ; undefined
     3c4:	00000000 	udf	#0
    REG_WRITE(&(SDIO->cmd_r__xfer_mode.d32), reg.d32);
     3c8:	00000024 	udf	#36
     3cc:	000000b8 	udf	#184
     3d0:	61001dc8 	.inst	0x61001dc8 ; undefined
     3d4:	00000000 	udf	#0
     3d8:	00000060 	udf	#96
     3dc:	00000000 	udf	#0
     3e0:	9d200e41 	.inst	0x9d200e41 ; undefined
     3e4:	56039e04 	.inst	0x56039e04 ; undefined
     3e8:	000eddde 	.inst	0x000eddde ; undefined
    MMC_PRINT("block.d32 is %x\r\n", block.d32);
     3ec:	00000000 	udf	#0
     3f0:	00000024 	udf	#36
     3f4:	000000b8 	udf	#184
	...
    MMC_PRINT("reg.d32 is %x\r\n", reg.d32);
     400:	00000040 	udf	#64
     404:	00000000 	udf	#0
     408:	9d200e41 	.inst	0x9d200e41 ; undefined
     40c:	4e039e04 	.inst	0x4e039e04 ; undefined
     410:	000eddde 	.inst	0x000eddde ; undefined
	MMC_WAIT_CMD_COMPLETE(SDIO);
     414:	00000000 	udf	#0
     418:	00000024 	udf	#36
     41c:	000000b8 	udf	#184
     420:	61001e28 	.inst	0x61001e28 ; undefined
     424:	00000000 	udf	#0
     428:	00000040 	udf	#64
     42c:	00000000 	udf	#0
     430:	9d200e41 	.inst	0x9d200e41 ; undefined
     434:	4e039e04 	.inst	0x4e039e04 ; undefined
     438:	000eddde 	.inst	0x000eddde ; undefined
    MMC_WAIT_TRANSFER_COMPLETE(SDIO);
     43c:	00000000 	udf	#0
     440:	00000024 	udf	#36
     444:	000000b8 	udf	#184
     448:	61001e68 	.inst	0x61001e68 ; undefined
     44c:	00000000 	udf	#0
     450:	00000040 	udf	#64
     454:	00000000 	udf	#0
     458:	9d100e41 	.inst	0x9d100e41 ; undefined
     45c:	4e019e02 	.inst	0x4e019e02 ; undefined
     460:	000eddde 	.inst	0x000eddde ; undefined
	return MMC_SUCCESS;
     464:	00000000 	udf	#0
}
     468:	00000024 	udf	#36
     46c:	000000b8 	udf	#184
     470:	61001ea8 	.inst	0x61001ea8 ; undefined
     474:	00000000 	udf	#0
     478:	0000005c 	udf	#92
     47c:	00000000 	udf	#0
     480:	9d100e41 	.inst	0x9d100e41 ; undefined
     484:	55019e02 	.inst	0x55019e02 ; undefined
     488:	000eddde 	.inst	0x000eddde ; undefined
     48c:	00000000 	udf	#0
     490:	00000024 	udf	#36
     494:	000000b8 	udf	#184
     498:	61001f04 	.inst	0x61001f04 ; undefined
     49c:	00000000 	udf	#0
     4a0:	00000028 	udf	#40
     4a4:	00000000 	udf	#0
     4a8:	9d100e41 	.inst	0x9d100e41 ; undefined
     4ac:	48019e02 	stlxrh	w1, w2, [x16]
     4b0:	000eddde 	.inst	0x000eddde ; undefined
     4b4:	00000000 	udf	#0
     4b8:	00000024 	udf	#36
     4bc:	000000b8 	udf	#184
	...
     4c8:	00000064 	udf	#100
     4cc:	00000000 	udf	#0
     4d0:	9d300e41 	.inst	0x9d300e41 ; undefined
     4d4:	57059e06 	.inst	0x57059e06 ; undefined
     4d8:	000eddde 	.inst	0x000eddde ; undefined
     4dc:	00000000 	udf	#0
     4e0:	00000024 	udf	#36
     4e4:	000000b8 	udf	#184
	...
     4f0:	0000004c 	udf	#76
     4f4:	00000000 	udf	#0
     4f8:	9d300e41 	.inst	0x9d300e41 ; undefined
     4fc:	51059e06 	sub	w6, w16, #0x167
     500:	000eddde 	.inst	0x000eddde ; undefined
     504:	00000000 	udf	#0
     508:	00000024 	udf	#36
     50c:	000000b8 	udf	#184
	...
     518:	0000004c 	udf	#76
     51c:	00000000 	udf	#0
     520:	9d300e41 	.inst	0x9d300e41 ; undefined
     524:	51059e06 	sub	w6, w16, #0x167
     528:	000eddde 	.inst	0x000eddde ; undefined
     52c:	00000000 	udf	#0
     530:	00000024 	udf	#36
     534:	000000b8 	udf	#184
     538:	61001f2c 	.inst	0x61001f2c ; undefined
     53c:	00000000 	udf	#0
     540:	000000e0 	udf	#224
     544:	00000000 	udf	#0
     548:	9d300e41 	.inst	0x9d300e41 ; undefined
     54c:	76059e06 	.inst	0x76059e06 ; undefined
     550:	000eddde 	.inst	0x000eddde ; undefined
     554:	00000000 	udf	#0
     558:	00000024 	udf	#36
     55c:	000000b8 	udf	#184
     560:	6100200c 	.inst	0x6100200c ; undefined
     564:	00000000 	udf	#0
     568:	00000058 	udf	#88
     56c:	00000000 	udf	#0
     570:	9d200e41 	.inst	0x9d200e41 ; undefined
     574:	54039e04 	b.mi	7934 <__stack_size+0x3934>  // b.first
     578:	000eddde 	.inst	0x000eddde ; undefined
     57c:	00000000 	udf	#0
     580:	00000024 	udf	#36
     584:	000000b8 	udf	#184
     588:	61002064 	.inst	0x61002064 ; undefined
     58c:	00000000 	udf	#0
     590:	000000a4 	udf	#164
     594:	00000000 	udf	#0
     598:	9d200e41 	.inst	0x9d200e41 ; undefined
     59c:	67039e04 	.inst	0x67039e04 ; undefined
     5a0:	000eddde 	.inst	0x000eddde ; undefined
     5a4:	00000000 	udf	#0
     5a8:	00000014 	udf	#20
     5ac:	000000b8 	udf	#184
	...
     5b8:	0000000c 	udf	#12
     5bc:	00000000 	udf	#0
     5c0:	00000014 	udf	#20
     5c4:	000000b8 	udf	#184
	...
     5d0:	0000000c 	udf	#12
     5d4:	00000000 	udf	#0
     5d8:	00000024 	udf	#36
     5dc:	000000b8 	udf	#184
	...
     5e8:	000000d8 	udf	#216
     5ec:	00000000 	udf	#0
     5f0:	9d300e41 	.inst	0x9d300e41 ; undefined
     5f4:	74059e06 	.inst	0x74059e06 ; undefined
     5f8:	000eddde 	.inst	0x000eddde ; undefined
     5fc:	00000000 	udf	#0
     600:	00000024 	udf	#36
     604:	000000b8 	udf	#184
	...
     610:	00000324 	udf	#804
     614:	00000000 	udf	#0
     618:	9d400e41 	.inst	0x9d400e41 ; undefined
     61c:	02079e08 	.inst	0x02079e08 ; undefined
     620:	0edddec7 	.inst	0x0edddec7 ; undefined
     624:	00000000 	udf	#0
     628:	0000000c 	udf	#12
     62c:	ffffffff 	.inst	0xffffffff ; undefined
     630:	78040001 	sturh	w1, [x0, #64]
     634:	001f0c1e 	.inst	0x001f0c1e ; undefined
     638:	0000001c 	udf	#28
     63c:	00000628 	udf	#1576
     640:	61002108 	.inst	0x61002108 ; undefined
     644:	00000000 	udf	#0
     648:	00000030 	udf	#48
     64c:	00000000 	udf	#0
     650:	9d300e41 	.inst	0x9d300e41 ; undefined
     654:	00059e06 	.inst	0x00059e06 ; undefined
     658:	0000000c 	udf	#12
     65c:	ffffffff 	.inst	0xffffffff ; undefined
     660:	78040001 	sturh	w1, [x0, #64]
     664:	001f0c1e 	.inst	0x001f0c1e ; undefined
     668:	0000001c 	udf	#28
     66c:	00000658 	udf	#1624
     670:	61002138 	.inst	0x61002138 ; undefined
     674:	00000000 	udf	#0
     678:	00000064 	udf	#100
     67c:	00000000 	udf	#0
     680:	57300e41 	.inst	0x57300e41 ; undefined
     684:	0000000e 	udf	#14
     688:	0000000c 	udf	#12
     68c:	ffffffff 	.inst	0xffffffff ; undefined
     690:	78040001 	sturh	w1, [x0, #64]
     694:	001f0c1e 	.inst	0x001f0c1e ; undefined
     698:	0000001c 	udf	#28
     69c:	00000688 	udf	#1672
     6a0:	6100219c 	.inst	0x6100219c ; undefined
     6a4:	00000000 	udf	#0
     6a8:	00000148 	udf	#328
     6ac:	00000000 	udf	#0
     6b0:	02400e41 	.inst	0x02400e41 ; undefined
     6b4:	00000e50 	udf	#3664
     6b8:	0000000c 	udf	#12
     6bc:	ffffffff 	.inst	0xffffffff ; undefined
     6c0:	78040001 	sturh	w1, [x0, #64]
     6c4:	001f0c1e 	.inst	0x001f0c1e ; undefined
     6c8:	00000024 	udf	#36
     6cc:	000006b8 	udf	#1720
     6d0:	610022e4 	.inst	0x610022e4 ; undefined
     6d4:	00000000 	udf	#0
     6d8:	00000074 	udf	#116
     6dc:	00000000 	udf	#0
     6e0:	9d300e41 	.inst	0x9d300e41 ; undefined
     6e4:	5b059e06 	.inst	0x5b059e06 ; undefined
     6e8:	000eddde 	.inst	0x000eddde ; undefined
     6ec:	00000000 	udf	#0
     6f0:	00000024 	udf	#36
     6f4:	000006b8 	udf	#1720
     6f8:	61002358 	.inst	0x61002358 ; undefined
     6fc:	00000000 	udf	#0
     700:	0000012c 	udf	#300
     704:	00000000 	udf	#0
     708:	9d500e41 	.inst	0x9d500e41 ; undefined
     70c:	02099e0a 	.inst	0x02099e0a ; undefined
     710:	0eddde49 	.inst	0x0eddde49 ; undefined
     714:	00000000 	udf	#0
     718:	0000002c 	udf	#44
     71c:	000006b8 	udf	#1720
     720:	61002484 	.inst	0x61002484 ; undefined
     724:	00000000 	udf	#0
     728:	0000072c 	udf	#1836
     72c:	00000000 	udf	#0
     730:	9d700e41 	.inst	0x9d700e41 ; undefined
     734:	420d9e0e 	.inst	0x420d9e0e ; undefined
     738:	c7030c93 	.inst	0xc7030c93 ; undefined
     73c:	d3ddde01 	.inst	0xd3ddde01 ; undefined
     740:	0000000e 	udf	#14
     744:	00000000 	udf	#0
     748:	00000024 	udf	#36
     74c:	000006b8 	udf	#1720
     750:	61002bb0 	.inst	0x61002bb0 ; undefined
     754:	00000000 	udf	#0
     758:	000000b0 	udf	#176
     75c:	00000000 	udf	#0
     760:	02b00e41 	.inst	0x02b00e41 ; undefined
     764:	259e269d 	cmple	p13.s, p1/z, z20.s, #-2
     768:	0eddde6a 	.inst	0x0eddde6a ; undefined
     76c:	00000000 	udf	#0
     770:	0000000c 	udf	#12
     774:	ffffffff 	.inst	0xffffffff ; undefined
     778:	78040001 	sturh	w1, [x0, #64]
     77c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     780:	00000024 	udf	#36
     784:	00000770 	udf	#1904
     788:	61002c60 	.inst	0x61002c60 ; undefined
     78c:	00000000 	udf	#0
     790:	00000028 	udf	#40
     794:	00000000 	udf	#0
     798:	9d200e41 	.inst	0x9d200e41 ; undefined
     79c:	48039e04 	stlxrh	w3, w4, [x16]
     7a0:	000eddde 	.inst	0x000eddde ; undefined
     7a4:	00000000 	udf	#0
     7a8:	0000000c 	udf	#12
     7ac:	ffffffff 	.inst	0xffffffff ; undefined
     7b0:	78040001 	sturh	w1, [x0, #64]
     7b4:	001f0c1e 	.inst	0x001f0c1e ; undefined
     7b8:	0000001c 	udf	#28
     7bc:	000007a8 	udf	#1960
     7c0:	61002c88 	.inst	0x61002c88 ; undefined
     7c4:	00000000 	udf	#0
     7c8:	00000074 	udf	#116
     7cc:	00000000 	udf	#0
     7d0:	5b100e41 	.inst	0x5b100e41 ; undefined
     7d4:	0000000e 	udf	#14
     7d8:	0000000c 	udf	#12
     7dc:	ffffffff 	.inst	0xffffffff ; undefined
     7e0:	78040001 	sturh	w1, [x0, #64]
     7e4:	001f0c1e 	.inst	0x001f0c1e ; undefined
     7e8:	0000001c 	udf	#28
     7ec:	000007d8 	udf	#2008
     7f0:	61002cfc 	.inst	0x61002cfc ; undefined
     7f4:	00000000 	udf	#0
     7f8:	00000058 	udf	#88
     7fc:	00000000 	udf	#0
     800:	54300e41 	b.ne	609c8 <__stack_size+0x5c9c8>  // b.any
     804:	0000000e 	udf	#14
     808:	0000001c 	udf	#28
     80c:	000007d8 	udf	#2008
     810:	61002d54 	.inst	0x61002d54 ; undefined
     814:	00000000 	udf	#0
     818:	00000018 	udf	#24
     81c:	00000000 	udf	#0
     820:	44100e41 	.inst	0x44100e41 ; undefined
     824:	0000000e 	udf	#14
     828:	0000001c 	udf	#28
     82c:	000007d8 	udf	#2008
     830:	61002d6c 	.inst	0x61002d6c ; undefined
     834:	00000000 	udf	#0
     838:	00000018 	udf	#24
     83c:	00000000 	udf	#0
     840:	44100e41 	.inst	0x44100e41 ; undefined
     844:	0000000e 	udf	#14
     848:	00000024 	udf	#36
     84c:	000007d8 	udf	#2008
     850:	61002d84 	.inst	0x61002d84 ; undefined
     854:	00000000 	udf	#0
     858:	00000040 	udf	#64
     85c:	00000000 	udf	#0
     860:	9d300e41 	.inst	0x9d300e41 ; undefined
     864:	4e059e06 	.inst	0x4e059e06 ; undefined
     868:	000eddde 	.inst	0x000eddde ; undefined
     86c:	00000000 	udf	#0
     870:	00000024 	udf	#36
     874:	000007d8 	udf	#2008
	...
     880:	00000050 	udf	#80
     884:	00000000 	udf	#0
     888:	9d300e41 	.inst	0x9d300e41 ; undefined
     88c:	52059e06 	eor	w6, w16, #0xf807f807
     890:	000eddde 	.inst	0x000eddde ; undefined
     894:	00000000 	udf	#0
     898:	00000024 	udf	#36
     89c:	000007d8 	udf	#2008
     8a0:	61002dc4 	.inst	0x61002dc4 ; undefined
     8a4:	00000000 	udf	#0
     8a8:	00000054 	udf	#84
     8ac:	00000000 	udf	#0
     8b0:	9d300e41 	.inst	0x9d300e41 ; undefined
     8b4:	53059e06 	.inst	0x53059e06 ; undefined
     8b8:	000eddde 	.inst	0x000eddde ; undefined
     8bc:	00000000 	udf	#0
     8c0:	00000024 	udf	#36
     8c4:	000007d8 	udf	#2008
	...
     8d0:	0000003c 	udf	#60
     8d4:	00000000 	udf	#0
     8d8:	9d300e41 	.inst	0x9d300e41 ; undefined
     8dc:	4d059e06 	.inst	0x4d059e06 ; undefined
     8e0:	000eddde 	.inst	0x000eddde ; undefined
     8e4:	00000000 	udf	#0
     8e8:	0000000c 	udf	#12
     8ec:	ffffffff 	.inst	0xffffffff ; undefined
     8f0:	78040001 	sturh	w1, [x0, #64]
     8f4:	001f0c1e 	.inst	0x001f0c1e ; undefined
     8f8:	00000014 	udf	#20
     8fc:	000008e8 	udf	#2280
     900:	61002e18 	.inst	0x61002e18 ; undefined
     904:	00000000 	udf	#0
     908:	00000004 	udf	#4
     90c:	00000000 	udf	#0
     910:	00000024 	udf	#36
     914:	000008e8 	udf	#2280
     918:	61002e1c 	.inst	0x61002e1c ; undefined
     91c:	00000000 	udf	#0
     920:	00000020 	udf	#32
     924:	00000000 	udf	#0
     928:	9d200e41 	.inst	0x9d200e41 ; undefined
     92c:	46039e04 	.inst	0x46039e04 ; undefined
     930:	000eddde 	.inst	0x000eddde ; undefined
     934:	00000000 	udf	#0
     938:	00000024 	udf	#36
     93c:	000008e8 	udf	#2280
     940:	61002e3c 	.inst	0x61002e3c ; undefined
     944:	00000000 	udf	#0
     948:	00000020 	udf	#32
     94c:	00000000 	udf	#0
     950:	9d200e41 	.inst	0x9d200e41 ; undefined
     954:	46039e04 	.inst	0x46039e04 ; undefined
     958:	000eddde 	.inst	0x000eddde ; undefined
     95c:	00000000 	udf	#0
     960:	00000024 	udf	#36
     964:	000008e8 	udf	#2280
     968:	61002e5c 	.inst	0x61002e5c ; undefined
     96c:	00000000 	udf	#0
     970:	00000020 	udf	#32
     974:	00000000 	udf	#0
     978:	9d200e41 	.inst	0x9d200e41 ; undefined
     97c:	46039e04 	.inst	0x46039e04 ; undefined
     980:	000eddde 	.inst	0x000eddde ; undefined
     984:	00000000 	udf	#0
     988:	00000024 	udf	#36
     98c:	000008e8 	udf	#2280
     990:	61002e7c 	.inst	0x61002e7c ; undefined
     994:	00000000 	udf	#0
     998:	00000020 	udf	#32
     99c:	00000000 	udf	#0
     9a0:	9d200e41 	.inst	0x9d200e41 ; undefined
     9a4:	46039e04 	.inst	0x46039e04 ; undefined
     9a8:	000eddde 	.inst	0x000eddde ; undefined
     9ac:	00000000 	udf	#0
     9b0:	00000024 	udf	#36
     9b4:	000008e8 	udf	#2280
     9b8:	61002e9c 	.inst	0x61002e9c ; undefined
     9bc:	00000000 	udf	#0
     9c0:	00000020 	udf	#32
     9c4:	00000000 	udf	#0
     9c8:	9d200e41 	.inst	0x9d200e41 ; undefined
     9cc:	46039e04 	.inst	0x46039e04 ; undefined
     9d0:	000eddde 	.inst	0x000eddde ; undefined
     9d4:	00000000 	udf	#0
     9d8:	00000024 	udf	#36
     9dc:	000008e8 	udf	#2280
	...
     9e8:	00000018 	udf	#24
     9ec:	00000000 	udf	#0
     9f0:	9d100e41 	.inst	0x9d100e41 ; undefined
     9f4:	44019e02 	.inst	0x44019e02 ; undefined
     9f8:	000eddde 	.inst	0x000eddde ; undefined
     9fc:	00000000 	udf	#0
     a00:	00000024 	udf	#36
     a04:	000008e8 	udf	#2280
	...
     a10:	00000020 	udf	#32
     a14:	00000000 	udf	#0
     a18:	9d200e41 	.inst	0x9d200e41 ; undefined
     a1c:	46039e04 	.inst	0x46039e04 ; undefined
     a20:	000eddde 	.inst	0x000eddde ; undefined
     a24:	00000000 	udf	#0
     a28:	00000024 	udf	#36
     a2c:	000008e8 	udf	#2280
     a30:	61002ebc 	.inst	0x61002ebc ; undefined
     a34:	00000000 	udf	#0
     a38:	00000020 	udf	#32
     a3c:	00000000 	udf	#0
     a40:	9d200e41 	.inst	0x9d200e41 ; undefined
     a44:	46039e04 	.inst	0x46039e04 ; undefined
     a48:	000eddde 	.inst	0x000eddde ; undefined
     a4c:	00000000 	udf	#0
     a50:	0000000c 	udf	#12
     a54:	ffffffff 	.inst	0xffffffff ; undefined
     a58:	78040001 	sturh	w1, [x0, #64]
     a5c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     a60:	00000014 	udf	#20
     a64:	00000a50 	udf	#2640
	...
     a70:	0000001c 	udf	#28
     a74:	00000000 	udf	#0
     a78:	00000014 	udf	#20
     a7c:	00000a50 	udf	#2640
	...
     a88:	0000001c 	udf	#28
     a8c:	00000000 	udf	#0
     a90:	00000024 	udf	#36
     a94:	00000a50 	udf	#2640
     a98:	61002edc 	.inst	0x61002edc ; undefined
     a9c:	00000000 	udf	#0
     aa0:	00000090 	udf	#144
     aa4:	00000000 	udf	#0
     aa8:	9d300e41 	.inst	0x9d300e41 ; undefined
     aac:	62059e06 	.inst	0x62059e06 ; undefined
     ab0:	000eddde 	.inst	0x000eddde ; undefined
     ab4:	00000000 	udf	#0
     ab8:	00000024 	udf	#36
     abc:	00000a50 	udf	#2640
	...
     ac8:	0000003c 	udf	#60
     acc:	00000000 	udf	#0
     ad0:	9d300e41 	.inst	0x9d300e41 ; undefined
     ad4:	4d059e06 	.inst	0x4d059e06 ; undefined
     ad8:	000eddde 	.inst	0x000eddde ; undefined
     adc:	00000000 	udf	#0
     ae0:	00000024 	udf	#36
     ae4:	00000a50 	udf	#2640
     ae8:	61002f6c 	.inst	0x61002f6c ; undefined
     aec:	00000000 	udf	#0
     af0:	0000003c 	udf	#60
     af4:	00000000 	udf	#0
     af8:	9d100e41 	.inst	0x9d100e41 ; undefined
     afc:	4d019e02 	.inst	0x4d019e02 ; undefined
     b00:	000eddde 	.inst	0x000eddde ; undefined
     b04:	00000000 	udf	#0
     b08:	0000000c 	udf	#12
     b0c:	ffffffff 	.inst	0xffffffff ; undefined
     b10:	78040001 	sturh	w1, [x0, #64]
     b14:	001f0c1e 	.inst	0x001f0c1e ; undefined
     b18:	00000014 	udf	#20
     b1c:	00000b08 	udf	#2824
     b20:	61002fa8 	.inst	0x61002fa8 ; undefined
     b24:	00000000 	udf	#0
     b28:	000003d8 	udf	#984
     b2c:	00000000 	udf	#0
     b30:	0000000c 	udf	#12
     b34:	ffffffff 	.inst	0xffffffff ; undefined
     b38:	78040001 	sturh	w1, [x0, #64]
     b3c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     b40:	0000001c 	udf	#28
     b44:	00000b30 	udf	#2864
     b48:	61003380 	.inst	0x61003380 ; undefined
     b4c:	00000000 	udf	#0
     b50:	00000020 	udf	#32
     b54:	00000000 	udf	#0
     b58:	46200e41 	.inst	0x46200e41 ; undefined
     b5c:	0000000e 	udf	#14
     b60:	00000024 	udf	#36
     b64:	00000b30 	udf	#2864
     b68:	610033a0 	.inst	0x610033a0 ; undefined
     b6c:	00000000 	udf	#0
     b70:	000000b8 	udf	#184
     b74:	00000000 	udf	#0
     b78:	9d300e41 	.inst	0x9d300e41 ; undefined
     b7c:	6c059e06 	stnp	d6, d7, [x16, #88]
     b80:	000eddde 	.inst	0x000eddde ; undefined
     b84:	00000000 	udf	#0
     b88:	0000001c 	udf	#28
     b8c:	00000b30 	udf	#2864
     b90:	61003458 	.inst	0x61003458 ; undefined
     b94:	00000000 	udf	#0
     b98:	000000b8 	udf	#184
     b9c:	00000000 	udf	#0
     ba0:	6c100e41 	stnp	d1, d3, [x18, #256]
     ba4:	0000000e 	udf	#14
     ba8:	0000001c 	udf	#28
     bac:	00000b30 	udf	#2864
     bb0:	61003510 	.inst	0x61003510 ; undefined
     bb4:	00000000 	udf	#0
     bb8:	000000a8 	udf	#168
     bbc:	00000000 	udf	#0
     bc0:	68100e41 	.inst	0x68100e41 ; undefined
     bc4:	0000000e 	udf	#14
     bc8:	0000001c 	udf	#28
     bcc:	00000b30 	udf	#2864
     bd0:	610035b8 	.inst	0x610035b8 ; undefined
     bd4:	00000000 	udf	#0
     bd8:	000000ac 	udf	#172
     bdc:	00000000 	udf	#0
     be0:	69100e41 	stgp	x1, x3, [x18, #512]
     be4:	0000000e 	udf	#14
     be8:	0000001c 	udf	#28
     bec:	00000b30 	udf	#2864
     bf0:	61003664 	.inst	0x61003664 ; undefined
     bf4:	00000000 	udf	#0
     bf8:	00000044 	udf	#68
     bfc:	00000000 	udf	#0
     c00:	4f100e41 	.inst	0x4f100e41 ; undefined
     c04:	0000000e 	udf	#14
     c08:	0000001c 	udf	#28
     c0c:	00000b30 	udf	#2864
     c10:	610036a8 	.inst	0x610036a8 ; undefined
     c14:	00000000 	udf	#0
     c18:	00000068 	udf	#104
     c1c:	00000000 	udf	#0
     c20:	58100e41 	ldr	x1, 20de8 <__stack_size+0x1cde8>
     c24:	0000000e 	udf	#14
     c28:	0000001c 	udf	#28
     c2c:	00000b30 	udf	#2864
	...
     c38:	00000068 	udf	#104
     c3c:	00000000 	udf	#0
     c40:	58100e41 	ldr	x1, 20e08 <__stack_size+0x1ce08>
     c44:	0000000e 	udf	#14
     c48:	0000001c 	udf	#28
     c4c:	00000b30 	udf	#2864
	...
     c58:	00000060 	udf	#96
     c5c:	00000000 	udf	#0
     c60:	56200e41 	.inst	0x56200e41 ; undefined
     c64:	0000000e 	udf	#14
     c68:	0000001c 	udf	#28
     c6c:	00000b30 	udf	#2864
	...
     c78:	0000004c 	udf	#76
     c7c:	00000000 	udf	#0
     c80:	51100e41 	sub	w1, w18, #0x403
     c84:	0000000e 	udf	#14
     c88:	0000001c 	udf	#28
     c8c:	00000b30 	udf	#2864
	...
     c98:	0000003c 	udf	#60
     c9c:	00000000 	udf	#0
     ca0:	4d100e41 	.inst	0x4d100e41 ; undefined
     ca4:	0000000e 	udf	#14
     ca8:	0000001c 	udf	#28
     cac:	00000b30 	udf	#2864
	...
     cb8:	0000003c 	udf	#60
     cbc:	00000000 	udf	#0
     cc0:	4d100e41 	.inst	0x4d100e41 ; undefined
     cc4:	0000000e 	udf	#14
     cc8:	0000001c 	udf	#28
     ccc:	00000b30 	udf	#2864
	...
     cd8:	0000004c 	udf	#76
     cdc:	00000000 	udf	#0
     ce0:	51100e41 	sub	w1, w18, #0x403
     ce4:	0000000e 	udf	#14
     ce8:	00000024 	udf	#36
     cec:	00000b30 	udf	#2864
	...
     cf8:	00000054 	udf	#84
     cfc:	00000000 	udf	#0
     d00:	9d200e41 	.inst	0x9d200e41 ; undefined
     d04:	53039e04 	.inst	0x53039e04 ; undefined
     d08:	000eddde 	.inst	0x000eddde ; undefined
     d0c:	00000000 	udf	#0
     d10:	0000001c 	udf	#28
     d14:	00000b30 	udf	#2864
	...
     d20:	0000003c 	udf	#60
     d24:	00000000 	udf	#0
     d28:	4d100e41 	.inst	0x4d100e41 ; undefined
     d2c:	0000000e 	udf	#14
     d30:	0000001c 	udf	#28
     d34:	00000b30 	udf	#2864
	...
     d40:	00000040 	udf	#64
     d44:	00000000 	udf	#0
     d48:	4e100e41 	.inst	0x4e100e41 ; undefined
     d4c:	0000000e 	udf	#14
     d50:	0000001c 	udf	#28
     d54:	00000b30 	udf	#2864
	...
     d60:	0000003c 	udf	#60
     d64:	00000000 	udf	#0
     d68:	4d100e41 	.inst	0x4d100e41 ; undefined
     d6c:	0000000e 	udf	#14
     d70:	0000001c 	udf	#28
     d74:	00000b30 	udf	#2864
	...
     d80:	00000040 	udf	#64
     d84:	00000000 	udf	#0
     d88:	4e100e41 	.inst	0x4e100e41 ; undefined
     d8c:	0000000e 	udf	#14
     d90:	0000001c 	udf	#28
     d94:	00000b30 	udf	#2864
	...
     da0:	0000003c 	udf	#60
     da4:	00000000 	udf	#0
     da8:	4d100e41 	.inst	0x4d100e41 ; undefined
     dac:	0000000e 	udf	#14
     db0:	0000001c 	udf	#28
     db4:	00000b30 	udf	#2864
	...
     dc0:	00000054 	udf	#84
     dc4:	00000000 	udf	#0
     dc8:	53200e41 	.inst	0x53200e41 ; undefined
     dcc:	0000000e 	udf	#14
     dd0:	00000024 	udf	#36
     dd4:	00000b30 	udf	#2864
	...
     de0:	00000070 	udf	#112
     de4:	00000000 	udf	#0
     de8:	9d300e41 	.inst	0x9d300e41 ; undefined
     dec:	5a059e06 	.inst	0x5a059e06 ; undefined
     df0:	000eddde 	.inst	0x000eddde ; undefined
     df4:	00000000 	udf	#0
     df8:	0000001c 	udf	#28
     dfc:	00000b30 	udf	#2864
	...
     e08:	000000d8 	udf	#216
     e0c:	00000000 	udf	#0
     e10:	74100e41 	.inst	0x74100e41 ; undefined
     e14:	0000000e 	udf	#14
     e18:	0000001c 	udf	#28
     e1c:	00000b30 	udf	#2864
	...
     e28:	000000d8 	udf	#216
     e2c:	00000000 	udf	#0
     e30:	74100e41 	.inst	0x74100e41 ; undefined
     e34:	0000000e 	udf	#14
     e38:	00000024 	udf	#36
     e3c:	00000b30 	udf	#2864
	...
     e48:	00000174 	udf	#372
     e4c:	00000000 	udf	#0
     e50:	9d300e41 	.inst	0x9d300e41 ; undefined
     e54:	02059e06 	.inst	0x02059e06 ; undefined
     e58:	0eddde5b 	.inst	0x0eddde5b ; undefined
     e5c:	00000000 	udf	#0
     e60:	0000001c 	udf	#28
     e64:	00000b30 	udf	#2864
	...
     e70:	00000058 	udf	#88
     e74:	00000000 	udf	#0
     e78:	54200e41 	b.ne	41040 <__stack_size+0x3d040>  // b.any
     e7c:	0000000e 	udf	#14
     e80:	00000024 	udf	#36
     e84:	00000b30 	udf	#2864
	...
     e90:	00000054 	udf	#84
     e94:	00000000 	udf	#0
     e98:	9d300e41 	.inst	0x9d300e41 ; undefined
     e9c:	53059e06 	.inst	0x53059e06 ; undefined
     ea0:	000eddde 	.inst	0x000eddde ; undefined
     ea4:	00000000 	udf	#0
     ea8:	00000024 	udf	#36
     eac:	00000b30 	udf	#2864
	...
     eb8:	00000054 	udf	#84
     ebc:	00000000 	udf	#0
     ec0:	9d300e41 	.inst	0x9d300e41 ; undefined
     ec4:	53059e06 	.inst	0x53059e06 ; undefined
     ec8:	000eddde 	.inst	0x000eddde ; undefined
     ecc:	00000000 	udf	#0
     ed0:	0000001c 	udf	#28
     ed4:	00000b30 	udf	#2864
	...
     ee0:	00000028 	udf	#40
     ee4:	00000000 	udf	#0
     ee8:	48100e41 	stxrh	w16, w1, [x18]
     eec:	0000000e 	udf	#14
     ef0:	0000001c 	udf	#28
     ef4:	00000b30 	udf	#2864
	...
     f00:	00000028 	udf	#40
     f04:	00000000 	udf	#0
     f08:	48100e41 	stxrh	w16, w1, [x18]
     f0c:	0000000e 	udf	#14
     f10:	0000001c 	udf	#28
     f14:	00000b30 	udf	#2864
	...
     f20:	00000028 	udf	#40
     f24:	00000000 	udf	#0
     f28:	48100e41 	stxrh	w16, w1, [x18]
     f2c:	0000000e 	udf	#14
     f30:	0000001c 	udf	#28
     f34:	00000b30 	udf	#2864
	...
     f40:	00000028 	udf	#40
     f44:	00000000 	udf	#0
     f48:	48100e41 	stxrh	w16, w1, [x18]
     f4c:	0000000e 	udf	#14
     f50:	0000000c 	udf	#12
     f54:	ffffffff 	.inst	0xffffffff ; undefined
     f58:	78040001 	sturh	w1, [x0, #64]
     f5c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     f60:	00000024 	udf	#36
     f64:	00000f50 	udf	#3920
	...
     f70:	00000060 	udf	#96
     f74:	00000000 	udf	#0
     f78:	9d400e41 	.inst	0x9d400e41 ; undefined
     f7c:	56079e08 	.inst	0x56079e08 ; undefined
     f80:	000eddde 	.inst	0x000eddde ; undefined
     f84:	00000000 	udf	#0
     f88:	0000001c 	udf	#28
     f8c:	00000f50 	udf	#3920
	...
     f98:	00000034 	udf	#52
     f9c:	00000000 	udf	#0
     fa0:	4b100e41 	sub	w1, w18, w16, lsl #3
     fa4:	0000000e 	udf	#14
     fa8:	00000024 	udf	#36
     fac:	00000f50 	udf	#3920
     fb0:	61003710 	.inst	0x61003710 ; undefined
     fb4:	00000000 	udf	#0
     fb8:	00000058 	udf	#88
     fbc:	00000000 	udf	#0
     fc0:	9d200e41 	.inst	0x9d200e41 ; undefined
     fc4:	54039e04 	b.mi	8384 <__stack_size+0x4384>  // b.first
     fc8:	000eddde 	.inst	0x000eddde ; undefined
     fcc:	00000000 	udf	#0
     fd0:	00000024 	udf	#36
     fd4:	00000f50 	udf	#3920
     fd8:	61003768 	.inst	0x61003768 ; undefined
     fdc:	00000000 	udf	#0
     fe0:	0000007c 	udf	#124
     fe4:	00000000 	udf	#0
     fe8:	9d300e41 	.inst	0x9d300e41 ; undefined
     fec:	5d059e06 	.inst	0x5d059e06 ; undefined
     ff0:	000eddde 	.inst	0x000eddde ; undefined
     ff4:	00000000 	udf	#0
     ff8:	0000001c 	udf	#28
     ffc:	00000f50 	udf	#3920
    1000:	610037e4 	.inst	0x610037e4 ; undefined
    1004:	00000000 	udf	#0
    1008:	00000018 	udf	#24
    100c:	00000000 	udf	#0
    1010:	44100e41 	.inst	0x44100e41 ; undefined
    1014:	0000000e 	udf	#14
    1018:	0000000c 	udf	#12
    101c:	ffffffff 	.inst	0xffffffff ; undefined
    1020:	78040001 	sturh	w1, [x0, #64]
    1024:	001f0c1e 	.inst	0x001f0c1e ; undefined
    1028:	0000001c 	udf	#28
    102c:	00001018 	udf	#4120
    1030:	610037fc 	.inst	0x610037fc ; undefined
    1034:	00000000 	udf	#0
    1038:	00000018 	udf	#24
    103c:	00000000 	udf	#0
    1040:	44100e41 	.inst	0x44100e41 ; undefined
    1044:	0000000e 	udf	#14
    1048:	0000001c 	udf	#28
    104c:	00001018 	udf	#4120
    1050:	61003814 	.inst	0x61003814 ; undefined
    1054:	00000000 	udf	#0
    1058:	00000024 	udf	#36
    105c:	00000000 	udf	#0
    1060:	47100e41 	.inst	0x47100e41 ; undefined
    1064:	0000000e 	udf	#14
    1068:	00000024 	udf	#36
    106c:	00001018 	udf	#4120
    1070:	61003838 	.inst	0x61003838 ; undefined
    1074:	00000000 	udf	#0
    1078:	00000228 	udf	#552
    107c:	00000000 	udf	#0
    1080:	9d200e41 	.inst	0x9d200e41 ; undefined
    1084:	02039e04 	.inst	0x02039e04 ; undefined
    1088:	0eddde88 	.inst	0x0eddde88 ; undefined
    108c:	00000000 	udf	#0
    1090:	00000024 	udf	#36
    1094:	00001018 	udf	#4120
    1098:	61003a60 	.inst	0x61003a60 ; undefined
    109c:	00000000 	udf	#0
    10a0:	00000068 	udf	#104
    10a4:	00000000 	udf	#0
    10a8:	9d300e41 	.inst	0x9d300e41 ; undefined
    10ac:	58059e06 	ldr	x6, c46c <__stack_size+0x846c>
    10b0:	000eddde 	.inst	0x000eddde ; undefined
    10b4:	00000000 	udf	#0
    10b8:	00000024 	udf	#36
    10bc:	00001018 	udf	#4120
    10c0:	61003ac8 	.inst	0x61003ac8 ; undefined
    10c4:	00000000 	udf	#0
    10c8:	000000c4 	udf	#196
    10cc:	00000000 	udf	#0
    10d0:	9d300e41 	.inst	0x9d300e41 ; undefined
    10d4:	6f059e06 	.inst	0x6f059e06 ; undefined
    10d8:	000eddde 	.inst	0x000eddde ; undefined
    10dc:	00000000 	udf	#0
    10e0:	00000024 	udf	#36
    10e4:	00001018 	udf	#4120
    10e8:	61003b8c 	.inst	0x61003b8c ; undefined
    10ec:	00000000 	udf	#0
    10f0:	000000c4 	udf	#196
    10f4:	00000000 	udf	#0
    10f8:	9d300e41 	.inst	0x9d300e41 ; undefined
    10fc:	6f059e06 	.inst	0x6f059e06 ; undefined
    1100:	000eddde 	.inst	0x000eddde ; undefined
    1104:	00000000 	udf	#0
    1108:	00000024 	udf	#36
    110c:	00001018 	udf	#4120
	...
    1118:	000000c4 	udf	#196
    111c:	00000000 	udf	#0
    1120:	9d300e41 	.inst	0x9d300e41 ; undefined
    1124:	6f059e06 	.inst	0x6f059e06 ; undefined
    1128:	000eddde 	.inst	0x000eddde ; undefined
    112c:	00000000 	udf	#0
    1130:	00000024 	udf	#36
    1134:	00001018 	udf	#4120
	...
    1140:	000000d0 	udf	#208
    1144:	00000000 	udf	#0
    1148:	9d300e41 	.inst	0x9d300e41 ; undefined
    114c:	72059e06 	ands	w6, w16, #0xf807f807
    1150:	000eddde 	.inst	0x000eddde ; undefined
    1154:	00000000 	udf	#0
    1158:	00000024 	udf	#36
    115c:	00001018 	udf	#4120
	...
    1168:	000000c4 	udf	#196
    116c:	00000000 	udf	#0
    1170:	9d300e41 	.inst	0x9d300e41 ; undefined
    1174:	6f059e06 	.inst	0x6f059e06 ; undefined
    1178:	000eddde 	.inst	0x000eddde ; undefined
    117c:	00000000 	udf	#0
    1180:	00000024 	udf	#36
    1184:	00001018 	udf	#4120
    1188:	61003c50 	.inst	0x61003c50 ; undefined
    118c:	00000000 	udf	#0
    1190:	00000084 	udf	#132
    1194:	00000000 	udf	#0
    1198:	9d300e41 	.inst	0x9d300e41 ; undefined
    119c:	5f059e06 	.inst	0x5f059e06 ; undefined
    11a0:	000eddde 	.inst	0x000eddde ; undefined
    11a4:	00000000 	udf	#0
    11a8:	00000024 	udf	#36
    11ac:	00001018 	udf	#4120
	...
    11b8:	00000050 	udf	#80
    11bc:	00000000 	udf	#0
    11c0:	9d300e41 	.inst	0x9d300e41 ; undefined
    11c4:	52059e06 	eor	w6, w16, #0xf807f807
    11c8:	000eddde 	.inst	0x000eddde ; undefined
    11cc:	00000000 	udf	#0
    11d0:	00000024 	udf	#36
    11d4:	00001018 	udf	#4120
	...
    11e0:	000000cc 	udf	#204
    11e4:	00000000 	udf	#0
    11e8:	9d400e41 	.inst	0x9d400e41 ; undefined
    11ec:	71079e08 	subs	w8, w16, #0x1e7
    11f0:	000eddde 	.inst	0x000eddde ; undefined
    11f4:	00000000 	udf	#0
    11f8:	00000024 	udf	#36
    11fc:	00001018 	udf	#4120
    1200:	61003cd4 	.inst	0x61003cd4 ; undefined
    1204:	00000000 	udf	#0
    1208:	0000017c 	udf	#380
    120c:	00000000 	udf	#0
    1210:	9d400e41 	.inst	0x9d400e41 ; undefined
    1214:	02079e08 	.inst	0x02079e08 ; undefined
    1218:	0eddde5d 	.inst	0x0eddde5d ; undefined
    121c:	00000000 	udf	#0
    1220:	00000024 	udf	#36
    1224:	00001018 	udf	#4120
    1228:	61003e50 	.inst	0x61003e50 ; undefined
    122c:	00000000 	udf	#0
    1230:	0000040c 	udf	#1036
    1234:	00000000 	udf	#0
    1238:	9d300e41 	.inst	0x9d300e41 ; undefined
    123c:	03059e06 	.inst	0x03059e06 ; undefined
    1240:	ddde0101 	.inst	0xddde0101 ; undefined
    1244:	0000000e 	udf	#14
    1248:	00000024 	udf	#36
    124c:	00001018 	udf	#4120
    1250:	6100425c 	.inst	0x6100425c ; undefined
    1254:	00000000 	udf	#0
    1258:	000002a4 	udf	#676
    125c:	00000000 	udf	#0
    1260:	9d400e41 	.inst	0x9d400e41 ; undefined
    1264:	02079e08 	.inst	0x02079e08 ; undefined
    1268:	0edddea7 	.inst	0x0edddea7 ; undefined
    126c:	00000000 	udf	#0
    1270:	00000024 	udf	#36
    1274:	00001018 	udf	#4120
    1278:	61004500 	.inst	0x61004500 ; undefined
    127c:	00000000 	udf	#0
    1280:	00000bb4 	udf	#2996
    1284:	00000000 	udf	#0
    1288:	9d300e41 	.inst	0x9d300e41 ; undefined
    128c:	03059e06 	.inst	0x03059e06 ; undefined
    1290:	ddde02eb 	.inst	0xddde02eb ; undefined
    1294:	0000000e 	udf	#14
    1298:	0000000c 	udf	#12
    129c:	ffffffff 	.inst	0xffffffff ; undefined
    12a0:	78040001 	sturh	w1, [x0, #64]
    12a4:	001f0c1e 	.inst	0x001f0c1e ; undefined
    12a8:	00000024 	udf	#36
    12ac:	00001298 	udf	#4760
    12b0:	610050b4 	.inst	0x610050b4 ; undefined
    12b4:	00000000 	udf	#0
    12b8:	0000017c 	udf	#380
    12bc:	00000000 	udf	#0
    12c0:	9d400e41 	.inst	0x9d400e41 ; undefined
    12c4:	02079e08 	.inst	0x02079e08 ; undefined
    12c8:	0eddde5d 	.inst	0x0eddde5d ; undefined
    12cc:	00000000 	udf	#0
    12d0:	00000024 	udf	#36
    12d4:	00001298 	udf	#4760
    12d8:	61005230 	.inst	0x61005230 ; undefined
    12dc:	00000000 	udf	#0
    12e0:	0000090c 	udf	#2316
    12e4:	00000000 	udf	#0
    12e8:	9d300e41 	.inst	0x9d300e41 ; undefined
    12ec:	03059e06 	.inst	0x03059e06 ; undefined
    12f0:	ddde0241 	.inst	0xddde0241 ; undefined
    12f4:	0000000e 	udf	#14
    12f8:	00000024 	udf	#36
    12fc:	00001298 	udf	#4760
    1300:	61005b3c 	.inst	0x61005b3c ; undefined
    1304:	00000000 	udf	#0
    1308:	000001c8 	udf	#456
    130c:	00000000 	udf	#0
    1310:	9d200e41 	.inst	0x9d200e41 ; undefined
    1314:	02039e04 	.inst	0x02039e04 ; undefined
    1318:	0eddde70 	.inst	0x0eddde70 ; undefined
    131c:	00000000 	udf	#0
    1320:	00000024 	udf	#36
    1324:	00001298 	udf	#4760
    1328:	61005d04 	.inst	0x61005d04 ; undefined
    132c:	00000000 	udf	#0
    1330:	000000f0 	udf	#240
    1334:	00000000 	udf	#0
    1338:	9d200e41 	.inst	0x9d200e41 ; undefined
    133c:	7a039e04 	.inst	0x7a039e04 ; undefined
    1340:	000eddde 	.inst	0x000eddde ; undefined
    1344:	00000000 	udf	#0
    1348:	00000024 	udf	#36
    134c:	00001298 	udf	#4760
    1350:	61005df4 	.inst	0x61005df4 ; undefined
    1354:	00000000 	udf	#0
    1358:	000002bc 	udf	#700
    135c:	00000000 	udf	#0
    1360:	9d600e41 	.inst	0x9d600e41 ; undefined
    1364:	020b9e0c 	.inst	0x020b9e0c ; undefined
    1368:	0edddead 	.inst	0x0edddead ; undefined
    136c:	00000000 	udf	#0
    1370:	00000024 	udf	#36
    1374:	00001298 	udf	#4760
    1378:	610060b0 	.inst	0x610060b0 ; undefined
    137c:	00000000 	udf	#0
    1380:	000002d4 	udf	#724
    1384:	00000000 	udf	#0
    1388:	9d600e41 	.inst	0x9d600e41 ; undefined
    138c:	020b9e0c 	.inst	0x020b9e0c ; undefined
    1390:	0edddeb3 	.inst	0x0edddeb3 ; undefined
    1394:	00000000 	udf	#0
    1398:	0000000c 	udf	#12
    139c:	ffffffff 	.inst	0xffffffff ; undefined
    13a0:	78040001 	sturh	w1, [x0, #64]
    13a4:	001f0c1e 	.inst	0x001f0c1e ; undefined
    13a8:	00000024 	udf	#36
    13ac:	00001398 	udf	#5016
    13b0:	61006384 	.inst	0x61006384 ; undefined
    13b4:	00000000 	udf	#0
    13b8:	00000018 	udf	#24
    13bc:	00000000 	udf	#0
    13c0:	9d100e41 	.inst	0x9d100e41 ; undefined
    13c4:	44019e02 	.inst	0x44019e02 ; undefined
    13c8:	000eddde 	.inst	0x000eddde ; undefined
    13cc:	00000000 	udf	#0
    13d0:	0000000c 	udf	#12
    13d4:	ffffffff 	.inst	0xffffffff ; undefined
    13d8:	78040001 	sturh	w1, [x0, #64]
    13dc:	001f0c1e 	.inst	0x001f0c1e ; undefined
    13e0:	00000024 	udf	#36
    13e4:	000013d0 	udf	#5072
	...
    13f0:	00000418 	udf	#1048
    13f4:	00000000 	udf	#0
    13f8:	9d700e41 	.inst	0x9d700e41 ; undefined
    13fc:	030d9e0e 	.inst	0x030d9e0e ; undefined
    1400:	ddde0104 	.inst	0xddde0104 ; undefined
    1404:	0000000e 	udf	#14
    1408:	00000024 	udf	#36
    140c:	000013d0 	udf	#5072
	...
    1418:	00000470 	udf	#1136
    141c:	00000000 	udf	#0
    1420:	9d700e41 	.inst	0x9d700e41 ; undefined
    1424:	030d9e0e 	.inst	0x030d9e0e ; undefined
    1428:	ddde011a 	.inst	0xddde011a ; undefined
    142c:	0000000e 	udf	#14
    1430:	0000002c 	udf	#44
    1434:	000013d0 	udf	#5072
    1438:	6100639c 	.inst	0x6100639c ; undefined
    143c:	00000000 	udf	#0
    1440:	00000168 	udf	#360
    1444:	00000000 	udf	#0
    1448:	10a00e41 	adr	x1, fffffffffff41610 <_sp+0xffffffff9ef01610>
    144c:	02849d41 	.inst	0x02849d41 ; undefined
    1450:	0202839e 	.inst	0x0202839e ; undefined
    1454:	0ededd57 	.inst	0x0ededd57 ; undefined
	...
    1460:	00000024 	udf	#36
    1464:	000013d0 	udf	#5072
    1468:	61006504 	.inst	0x61006504 ; undefined
    146c:	00000000 	udf	#0
    1470:	000000d4 	udf	#212
    1474:	00000000 	udf	#0
    1478:	29800e42 	stp	w2, w3, [x18, #0]!
    147c:	05909d41 	.inst	0x05909d41 ; undefined
    1480:	71058f9e 	subs	w30, w28, #0x163
    1484:	000ededd 	.inst	0x000ededd ; undefined
