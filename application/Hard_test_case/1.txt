
hard_test.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000061000000 <_start>:
#ifdef DEBUG
	bl uart0_init_simple
	bl print_boot_el
	isb
#endif
	b setup_vector
    61000000:	14000001 	b	61000004 <setup_vector>

0000000061000004 <setup_vector>:
	 * x1 = CurrentELï¼Œ
	 * 0xc --> el3_entry
	 * 0x8 --> el2_entry
	 * 0x4 --> el1_entry
	**/
	switch_el x1, el3_entry, el2_entry, el1_entry
    61000004:	d5384241 	mrs	x1, currentel
    61000008:	f100303f 	cmp	x1, #0xc
    6100000c:	540000a0 	b.eq	61000020 <el3_entry>  // b.none
    61000010:	f100203f 	cmp	x1, #0x8
    61000014:	540003a0 	b.eq	61000088 <el2_entry>  // b.none
    61000018:	f100103f 	cmp	x1, #0x4
    6100001c:	54000460 	b.eq	610000a8 <el1_entry>  // b.none

0000000061000020 <el3_entry>:
	/* execute el3 */
el3_entry:
	mrs     x0, mpidr_el1
    61000020:	d53800a0 	mrs	x0, mpidr_el1
	ldr	x1, =0x00ff
    61000024:	580005a1 	ldr	x1, 610000d8 <main_entry+0x14>
	and	x0, x0, x1
    61000028:	8a010000 	and	x0, x0, x1

	cmp x0, #0
    6100002c:	f100001f 	cmp	x0, #0x0

	/*if primary cpu, continue boot */
	b.eq 0f
    61000030:	54000040 	b.eq	61000038 <el3_entry+0x18>  // b.none

	/*if secondary cpu, loop here*/
	b .
    61000034:	14000000 	b	61000034 <el3_entry+0x14>

0:
	adr	x0, vectors
    61000038:	10003e40 	adr	x0, 61000800 <vectors>
	msr vbar_el3, x0
    6100003c:	d51ec000 	msr	vbar_el3, x0
	mrs	x0, scr_el3
    61000040:	d53e1100 	mrs	x0, scr_el3
	/* x0 = x0 | 0xf */
	orr	x0, x0, #0xf			/* SCR_EL3.NS|IRQ|FIQ|EA */
    61000044:	b2400c00 	orr	x0, x0, #0xf
	msr	scr_el3, x0
    61000048:	d51e1100 	msr	scr_el3, x0
	msr	cptr_el3, xzr			/* Enable FP/SIMD */
    6100004c:	d51e115f 	msr	cptr_el3, xzr
	/* set up stack point */
	ldr x28, =_sp
    61000050:	5800049c 	ldr	x28, 610000e0 <main_entry+0x1c>
	mov sp, x28
    61000054:	9100039f 	mov	sp, x28
#ifdef COUNTER_FREQUENCY
	ldr	x0, =COUNTER_FREQUENCY
    61000058:	58000480 	ldr	x0, 610000e8 <main_entry+0x24>
	msr	cntfrq_el0, x0			/* Initialize CNTFRQ */
    6100005c:	d51be000 	msr	cntfrq_el0, x0
#endif
/* switch to el1 */
#ifdef SWITCH_TO_EL1_FROM_EL3
	switch_el3_to_el1
    61000060:	58000495 	ldr	x21, 610000f0 <main_entry+0x2c>
    61000064:	d51e1115 	msr	scr_el3, x21
    61000068:	58000495 	ldr	x21, 610000f8 <main_entry+0x34>
    6100006c:	d5181015 	msr	sctlr_el1, x21
    61000070:	58000495 	ldr	x21, 61000100 <main_entry+0x3c>
    61000074:	d51e4015 	msr	spsr_el3, x21
    61000078:	10000195 	adr	x21, 610000a8 <el1_entry>
    6100007c:	d51e4035 	msr	elr_el3, x21
    61000080:	d69f03e0 	eret
#endif
	b   main_entry
    61000084:	14000010 	b	610000c4 <main_entry>

0000000061000088 <el2_entry>:

/* el2 */
.align 3
el2_entry:
	adr	x0, vectors
    61000088:	10003bc0 	adr	x0, 61000800 <vectors>
	msr	vbar_el2, x0
    6100008c:	d51cc000 	msr	vbar_el2, x0
	mov	x0, #0x33ff
    61000090:	d2867fe0 	mov	x0, #0x33ff                	// #13311
	msr	cptr_el2, x0			/* Enable FP/SIMD */
    61000094:	d51c1140 	msr	cptr_el2, x0
	/* set up stack point */
	ldr x28, =_sp
    61000098:	5800025c 	ldr	x28, 610000e0 <main_entry+0x1c>
	mov sp, x28
    6100009c:	9100039f 	mov	sp, x28
	b   main_entry
    610000a0:	14000009 	b	610000c4 <main_entry>
    610000a4:	d503201f 	nop

00000000610000a8 <el1_entry>:

/* el1 */
.align 3
el1_entry:
	/* set up stack point */
	ldr x28, =_sp
    610000a8:	580001dc 	ldr	x28, 610000e0 <main_entry+0x1c>
	mov sp, x28
    610000ac:	9100039f 	mov	sp, x28
	adr	x0, vectors
    610000b0:	10003a80 	adr	x0, 61000800 <vectors>
	msr	vbar_el1, x0
    610000b4:	d518c000 	msr	vbar_el1, x0
	mov	x0, #3 << 20
    610000b8:	d2a00600 	mov	x0, #0x300000              	// #3145728
	msr	cpacr_el1, x0			/* Enable FP/SIMD */
    610000bc:	d5181040 	msr	cpacr_el1, x0
	b   main_entry
    610000c0:	14000001 	b	610000c4 <main_entry>

00000000610000c4 <main_entry>:

main_entry:
	isb
    610000c4:	d5033fdf 	isb
#ifdef DEBUG
	bl uart0_init_simple
	bl print_el
#endif
	/* clear bss */
	bl clear_bss
    610000c8:	94000018 	bl	61000128 <clear_bss>

	/* Processor specific initialization */
	bl	lowlevel_init
    610000cc:	9400000f 	bl	61000108 <lowlevel_init>

	//123

	/* jump to main */
	bl	main
    610000d0:	94000ed0 	bl	61003c10 <main>

	/* hang */
	b .
    610000d4:	14000000 	b	610000d4 <main_entry+0x10>
    610000d8:	000000ff 	udf	#255
    610000dc:	00000000 	udf	#0
    610000e0:	61040000 	.inst	0x61040000 ; undefined
    610000e4:	00000000 	udf	#0
    610000e8:	02faf080 	.inst	0x02faf080 ; undefined
    610000ec:	00000000 	udf	#0
    610000f0:	00000400 	udf	#1024
	...
    61000100:	000001c5 	udf	#453
    61000104:	00000000 	udf	#0

0000000061000108 <lowlevel_init>:
#include <linkage.h>
#include <macro.h>

WEAK(lowlevel_init)
	/* Save LR */
	stp	x29, x30, [sp, #-16]!
    61000108:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!

	// do cpu lowlevel init here
	bl _premain_init
    6100010c:	940008f5 	bl	610024e0 <_premain_init>

	/* Restore LR */
	ldp	x29, x30, [sp],#16
    61000110:	a8c17bfd 	ldp	x29, x30, [sp], #16

	ret
    61000114:	d65f03c0 	ret

0000000061000118 <clear_mem>:

/* clean mem using zero
*/
.globl clear_mem
clear_mem:
	str  xzr, [x0], #8
    61000118:	f800841f 	str	xzr, [x0], #8
	subs x1,  x1,   #8
    6100011c:	f1002021 	subs	x1, x1, #0x8
	b.gt clear_mem
    61000120:	54ffffcc 	b.gt	61000118 <clear_mem>
	ret
    61000124:	d65f03c0 	ret

0000000061000128 <clear_bss>:

/* clear bss*/
.globl clear_bss
clear_bss:
	/* Save LR */
	mov x25, lr
    61000128:	aa1e03f9 	mov	x25, x30

	ldr	x0, =_bss_start
    6100012c:	580000e0 	ldr	x0, 61000148 <clear_bss+0x20>
	ldr	x1, =_bss_end
    61000130:	58000101 	ldr	x1, 61000150 <clear_bss+0x28>
	sub	x1, x1, x0
    61000134:	cb000021 	sub	x1, x1, x0
	bl 	clear_mem
    61000138:	97fffff8 	bl	61000118 <clear_mem>

	/* Restore LR and return */
	mov lr, x25
    6100013c:	aa1903fe 	mov	x30, x25
	ret
    61000140:	d65f03c0 	ret
    61000144:	00000000 	udf	#0
    61000148:	61005000 	.inst	0x61005000 ; undefined
    6100014c:	00000000 	udf	#0
    61000150:	61005000 	.inst	0x61005000 ; undefined
	...

0000000061000800 <vectors>:
.globl	vectors
vectors:
	/* Current EL Synchronous exception with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!		       
    61000800:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000804:	940000ff 	bl	61000c00 <_exception_entry>
	bl	do_bad_sync
    61000808:	940006da 	bl	61002370 <do_bad_sync>
	b	exception_exit
    6100080c:	14000122 	b	61000c94 <exception_exit>
    61000810:	d503201f 	nop
    61000814:	d503201f 	nop
    61000818:	d503201f 	nop
    6100081c:	d503201f 	nop
    61000820:	d503201f 	nop
    61000824:	d503201f 	nop
    61000828:	d503201f 	nop
    6100082c:	d503201f 	nop
    61000830:	d503201f 	nop
    61000834:	d503201f 	nop
    61000838:	d503201f 	nop
    6100083c:	d503201f 	nop
    61000840:	d503201f 	nop
    61000844:	d503201f 	nop
    61000848:	d503201f 	nop
    6100084c:	d503201f 	nop
    61000850:	d503201f 	nop
    61000854:	d503201f 	nop
    61000858:	d503201f 	nop
    6100085c:	d503201f 	nop
    61000860:	d503201f 	nop
    61000864:	d503201f 	nop
    61000868:	d503201f 	nop
    6100086c:	d503201f 	nop
    61000870:	d503201f 	nop
    61000874:	d503201f 	nop
    61000878:	d503201f 	nop
    6100087c:	d503201f 	nop

	/* Current EL irq exception with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61000880:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000884:	940000df 	bl	61000c00 <_exception_entry>
	bl	do_bad_irq
    61000888:	940006c2 	bl	61002390 <do_bad_irq>
	b	exception_exit
    6100088c:	14000102 	b	61000c94 <exception_exit>
    61000890:	d503201f 	nop
    61000894:	d503201f 	nop
    61000898:	d503201f 	nop
    6100089c:	d503201f 	nop
    610008a0:	d503201f 	nop
    610008a4:	d503201f 	nop
    610008a8:	d503201f 	nop
    610008ac:	d503201f 	nop
    610008b0:	d503201f 	nop
    610008b4:	d503201f 	nop
    610008b8:	d503201f 	nop
    610008bc:	d503201f 	nop
    610008c0:	d503201f 	nop
    610008c4:	d503201f 	nop
    610008c8:	d503201f 	nop
    610008cc:	d503201f 	nop
    610008d0:	d503201f 	nop
    610008d4:	d503201f 	nop
    610008d8:	d503201f 	nop
    610008dc:	d503201f 	nop
    610008e0:	d503201f 	nop
    610008e4:	d503201f 	nop
    610008e8:	d503201f 	nop
    610008ec:	d503201f 	nop
    610008f0:	d503201f 	nop
    610008f4:	d503201f 	nop
    610008f8:	d503201f 	nop
    610008fc:	d503201f 	nop

	/* Current EL fiq exception with sp0 */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61000900:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000904:	940000bf 	bl	61000c00 <_exception_entry>
	bl	do_bad_fiq
    61000908:	940006aa 	bl	610023b0 <do_bad_fiq>
	b	exception_exit
    6100090c:	140000e2 	b	61000c94 <exception_exit>
    61000910:	d503201f 	nop
    61000914:	d503201f 	nop
    61000918:	d503201f 	nop
    6100091c:	d503201f 	nop
    61000920:	d503201f 	nop
    61000924:	d503201f 	nop
    61000928:	d503201f 	nop
    6100092c:	d503201f 	nop
    61000930:	d503201f 	nop
    61000934:	d503201f 	nop
    61000938:	d503201f 	nop
    6100093c:	d503201f 	nop
    61000940:	d503201f 	nop
    61000944:	d503201f 	nop
    61000948:	d503201f 	nop
    6100094c:	d503201f 	nop
    61000950:	d503201f 	nop
    61000954:	d503201f 	nop
    61000958:	d503201f 	nop
    6100095c:	d503201f 	nop
    61000960:	d503201f 	nop
    61000964:	d503201f 	nop
    61000968:	d503201f 	nop
    6100096c:	d503201f 	nop
    61000970:	d503201f 	nop
    61000974:	d503201f 	nop
    61000978:	d503201f 	nop
    6100097c:	d503201f 	nop

	/* Current EL Error with sp0 */
	.align	7	
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!	
    61000980:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000984:	9400009f 	bl	61000c00 <_exception_entry>
	bl	do_bad_error
    61000988:	94000692 	bl	610023d0 <do_bad_error>
	b	exception_exit
    6100098c:	140000c2 	b	61000c94 <exception_exit>
    61000990:	d503201f 	nop
    61000994:	d503201f 	nop
    61000998:	d503201f 	nop
    6100099c:	d503201f 	nop
    610009a0:	d503201f 	nop
    610009a4:	d503201f 	nop
    610009a8:	d503201f 	nop
    610009ac:	d503201f 	nop
    610009b0:	d503201f 	nop
    610009b4:	d503201f 	nop
    610009b8:	d503201f 	nop
    610009bc:	d503201f 	nop
    610009c0:	d503201f 	nop
    610009c4:	d503201f 	nop
    610009c8:	d503201f 	nop
    610009cc:	d503201f 	nop
    610009d0:	d503201f 	nop
    610009d4:	d503201f 	nop
    610009d8:	d503201f 	nop
    610009dc:	d503201f 	nop
    610009e0:	d503201f 	nop
    610009e4:	d503201f 	nop
    610009e8:	d503201f 	nop
    610009ec:	d503201f 	nop
    610009f0:	d503201f 	nop
    610009f4:	d503201f 	nop
    610009f8:	d503201f 	nop
    610009fc:	d503201f 	nop

	/* Current EL (SP_ELx) Synchronous Handler */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!		 
    61000a00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000a04:	9400007f 	bl	61000c00 <_exception_entry>
	bl	do_sync_handle
    61000a08:	9400067a 	bl	610023f0 <do_sync_handle>
	b	exception_exit
    61000a0c:	140000a2 	b	61000c94 <exception_exit>
    61000a10:	d503201f 	nop
    61000a14:	d503201f 	nop
    61000a18:	d503201f 	nop
    61000a1c:	d503201f 	nop
    61000a20:	d503201f 	nop
    61000a24:	d503201f 	nop
    61000a28:	d503201f 	nop
    61000a2c:	d503201f 	nop
    61000a30:	d503201f 	nop
    61000a34:	d503201f 	nop
    61000a38:	d503201f 	nop
    61000a3c:	d503201f 	nop
    61000a40:	d503201f 	nop
    61000a44:	d503201f 	nop
    61000a48:	d503201f 	nop
    61000a4c:	d503201f 	nop
    61000a50:	d503201f 	nop
    61000a54:	d503201f 	nop
    61000a58:	d503201f 	nop
    61000a5c:	d503201f 	nop
    61000a60:	d503201f 	nop
    61000a64:	d503201f 	nop
    61000a68:	d503201f 	nop
    61000a6c:	d503201f 	nop
    61000a70:	d503201f 	nop
    61000a74:	d503201f 	nop
    61000a78:	d503201f 	nop
    61000a7c:	d503201f 	nop

	/* Current EL (SP_ELx) irq Handler */
	.align	7
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!
    61000a80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000a84:	9400005f 	bl	61000c00 <_exception_entry>
	bl	do_irq_handle
    61000a88:	94000314 	bl	610016d8 <do_irq_handle>
	b	exception_exit
    61000a8c:	14000082 	b	61000c94 <exception_exit>
    61000a90:	d503201f 	nop
    61000a94:	d503201f 	nop
    61000a98:	d503201f 	nop
    61000a9c:	d503201f 	nop
    61000aa0:	d503201f 	nop
    61000aa4:	d503201f 	nop
    61000aa8:	d503201f 	nop
    61000aac:	d503201f 	nop
    61000ab0:	d503201f 	nop
    61000ab4:	d503201f 	nop
    61000ab8:	d503201f 	nop
    61000abc:	d503201f 	nop
    61000ac0:	d503201f 	nop
    61000ac4:	d503201f 	nop
    61000ac8:	d503201f 	nop
    61000acc:	d503201f 	nop
    61000ad0:	d503201f 	nop
    61000ad4:	d503201f 	nop
    61000ad8:	d503201f 	nop
    61000adc:	d503201f 	nop
    61000ae0:	d503201f 	nop
    61000ae4:	d503201f 	nop
    61000ae8:	d503201f 	nop
    61000aec:	d503201f 	nop
    61000af0:	d503201f 	nop
    61000af4:	d503201f 	nop
    61000af8:	d503201f 	nop
    61000afc:	d503201f 	nop

	 /* Current EL (SP_ELx) FIQ Handler */
	.align	7	
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!	
    61000b00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000b04:	9400003f 	bl	61000c00 <_exception_entry>
	bl	do_fiq
    61000b08:	94000642 	bl	61002410 <do_fiq>
	b	exception_exit
    61000b0c:	14000062 	b	61000c94 <exception_exit>
    61000b10:	d503201f 	nop
    61000b14:	d503201f 	nop
    61000b18:	d503201f 	nop
    61000b1c:	d503201f 	nop
    61000b20:	d503201f 	nop
    61000b24:	d503201f 	nop
    61000b28:	d503201f 	nop
    61000b2c:	d503201f 	nop
    61000b30:	d503201f 	nop
    61000b34:	d503201f 	nop
    61000b38:	d503201f 	nop
    61000b3c:	d503201f 	nop
    61000b40:	d503201f 	nop
    61000b44:	d503201f 	nop
    61000b48:	d503201f 	nop
    61000b4c:	d503201f 	nop
    61000b50:	d503201f 	nop
    61000b54:	d503201f 	nop
    61000b58:	d503201f 	nop
    61000b5c:	d503201f 	nop
    61000b60:	d503201f 	nop
    61000b64:	d503201f 	nop
    61000b68:	d503201f 	nop
    61000b6c:	d503201f 	nop
    61000b70:	d503201f 	nop
    61000b74:	d503201f 	nop
    61000b78:	d503201f 	nop
    61000b7c:	d503201f 	nop

	/* Current EL (SP_ELx) Error Handler */
	.align	7	
	/* store lr(x30) before entry exception */
	stp	x29, x30, [sp, #-16]!	 
    61000b80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	_exception_entry
    61000b84:	9400001f 	bl	61000c00 <_exception_entry>
	bl	do_error
    61000b88:	9400062a 	bl	61002430 <do_error>
	b	exception_exit
    61000b8c:	14000042 	b	61000c94 <exception_exit>
    61000b90:	d503201f 	nop
    61000b94:	d503201f 	nop
    61000b98:	d503201f 	nop
    61000b9c:	d503201f 	nop
    61000ba0:	d503201f 	nop
    61000ba4:	d503201f 	nop
    61000ba8:	d503201f 	nop
    61000bac:	d503201f 	nop
    61000bb0:	d503201f 	nop
    61000bb4:	d503201f 	nop
    61000bb8:	d503201f 	nop
    61000bbc:	d503201f 	nop
    61000bc0:	d503201f 	nop
    61000bc4:	d503201f 	nop
    61000bc8:	d503201f 	nop
    61000bcc:	d503201f 	nop
    61000bd0:	d503201f 	nop
    61000bd4:	d503201f 	nop
    61000bd8:	d503201f 	nop
    61000bdc:	d503201f 	nop
    61000be0:	d503201f 	nop
    61000be4:	d503201f 	nop
    61000be8:	d503201f 	nop
    61000bec:	d503201f 	nop
    61000bf0:	d503201f 	nop
    61000bf4:	d503201f 	nop
    61000bf8:	d503201f 	nop
    61000bfc:	d503201f 	nop

0000000061000c00 <_exception_entry>:
	.align 10 

/* save x0~x30 to sp */
/* return: x0=sp, x1=esr_eln,x2=elr_eln,(n=1,2,3)*/
_exception_entry:
	stp	x27, x28, [sp, #-16]!
    61000c00:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
	stp	x25, x26, [sp, #-16]!
    61000c04:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
	stp	x23, x24, [sp, #-16]!
    61000c08:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
	stp	x21, x22, [sp, #-16]!
    61000c0c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
	stp	x19, x20, [sp, #-16]!
    61000c10:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
	stp	x17, x18, [sp, #-16]!
    61000c14:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
	stp	x15, x16, [sp, #-16]!
    61000c18:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
	stp	x13, x14, [sp, #-16]!
    61000c1c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
	stp	x11, x12, [sp, #-16]!
    61000c20:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
	stp	x9, x10,  [sp, #-16]!
    61000c24:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
	stp	x7, x8,   [sp, #-16]!
    61000c28:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
	stp	x5, x6,   [sp, #-16]!
    61000c2c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
	stp	x3, x4,   [sp, #-16]!
    61000c30:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
	stp	x1, x2,   [sp, #-16]!
    61000c34:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
	b	_save_el_regs			/* jump to the second part */
    61000c38:	14000001 	b	61000c3c <_save_el_regs>

0000000061000c3c <_save_el_regs>:
/*
 * Save exception specific context: ESR and ELR,spsr for all exception levels.
 * This is the second part of the shared routine called into from all entries.
 */
_save_el_regs:
	switch_el x11, 3f, 2f, 1f
    61000c3c:	d538424b 	mrs	x11, currentel
    61000c40:	f100317f 	cmp	x11, #0xc
    61000c44:	540000a0 	b.eq	61000c58 <_save_el_regs+0x1c>  // b.none
    61000c48:	f100217f 	cmp	x11, #0x8
    61000c4c:	540000e0 	b.eq	61000c68 <_save_el_regs+0x2c>  // b.none
    61000c50:	f100117f 	cmp	x11, #0x4
    61000c54:	54000120 	b.eq	61000c78 <_save_el_regs+0x3c>  // b.none
3:	mrs	x1, esr_el3
    61000c58:	d53e5201 	mrs	x1, esr_el3
	mrs	x2, elr_el3
    61000c5c:	d53e4022 	mrs	x2, elr_el3
	mrs x3, spsr_el3
    61000c60:	d53e4003 	mrs	x3, spsr_el3
	b	0f
    61000c64:	14000008 	b	61000c84 <_save_el_regs+0x48>
2:	mrs	x1, esr_el2
    61000c68:	d53c5201 	mrs	x1, esr_el2
	mrs	x2, elr_el2
    61000c6c:	d53c4022 	mrs	x2, elr_el2
	mrs x3, spsr_el2
    61000c70:	d53c4003 	mrs	x3, spsr_el2
	b	0f
    61000c74:	14000004 	b	61000c84 <_save_el_regs+0x48>
1:	mrs	x1, esr_el1
    61000c78:	d5385201 	mrs	x1, esr_el1
	mrs	x2, elr_el1
    61000c7c:	d5384022 	mrs	x2, elr_el1
	mrs x3, spsr_el1
    61000c80:	d5384003 	mrs	x3, spsr_el1
0:
	stp	x2, x0, [sp, #-16]!
    61000c84:	a9bf03e2 	stp	x2, x0, [sp, #-16]!
	stp	x3, x1, [sp, #-16]!
    61000c88:	a9bf07e3 	stp	x3, x1, [sp, #-16]!
	mov	x0, sp
    61000c8c:	910003e0 	mov	x0, sp
	ret
    61000c90:	d65f03c0 	ret

0000000061000c94 <exception_exit>:
/*
 * Restore the exception return address, for all exception levels.
 * This is the first part of the shared routine called into from all entries.
 */
exception_exit:
	ldp	x3, x1, [sp],#16
    61000c94:	a8c107e3 	ldp	x3, x1, [sp], #16
	ldp	x2, x0, [sp],#16
    61000c98:	a8c103e2 	ldp	x2, x0, [sp], #16
	switch_el x11, 3f, 2f, 1f
    61000c9c:	d538424b 	mrs	x11, currentel
    61000ca0:	f100317f 	cmp	x11, #0xc
    61000ca4:	540000a0 	b.eq	61000cb8 <exception_exit+0x24>  // b.none
    61000ca8:	f100217f 	cmp	x11, #0x8
    61000cac:	540000a0 	b.eq	61000cc0 <exception_exit+0x2c>  // b.none
    61000cb0:	f100117f 	cmp	x11, #0x4
    61000cb4:	540000a0 	b.eq	61000cc8 <exception_exit+0x34>  // b.none
3:	msr	elr_el3, x2
    61000cb8:	d51e4022 	msr	elr_el3, x2
	b	_restore_regs
    61000cbc:	14000005 	b	61000cd0 <_restore_regs>
2:	msr	elr_el2, x2
    61000cc0:	d51c4022 	msr	elr_el2, x2
	b	_restore_regs
    61000cc4:	14000003 	b	61000cd0 <_restore_regs>
1:	msr	elr_el1, x2
    61000cc8:	d5184022 	msr	elr_el1, x2
	b	_restore_regs		/* jump to the second part */
    61000ccc:	14000001 	b	61000cd0 <_restore_regs>

0000000061000cd0 <_restore_regs>:
/*
 * Restore the general purpose registers from the exception stack, then return.
 * This is the second part of the shared routine called into from all entries.
 */
_restore_regs:
	ldp	x1, x2,   [sp],#16
    61000cd0:	a8c10be1 	ldp	x1, x2, [sp], #16
	ldp	x3, x4,   [sp],#16
    61000cd4:	a8c113e3 	ldp	x3, x4, [sp], #16
	ldp	x5, x6,   [sp],#16
    61000cd8:	a8c11be5 	ldp	x5, x6, [sp], #16
	ldp	x7, x8,   [sp],#16
    61000cdc:	a8c123e7 	ldp	x7, x8, [sp], #16
	ldp	x9, x10,  [sp],#16
    61000ce0:	a8c12be9 	ldp	x9, x10, [sp], #16
	ldp	x11, x12, [sp],#16
    61000ce4:	a8c133eb 	ldp	x11, x12, [sp], #16
	ldp	x13, x14, [sp],#16
    61000ce8:	a8c13bed 	ldp	x13, x14, [sp], #16
	ldp	x15, x16, [sp],#16
    61000cec:	a8c143ef 	ldp	x15, x16, [sp], #16
	ldp	x17, x18, [sp],#16
    61000cf0:	a8c14bf1 	ldp	x17, x18, [sp], #16
	ldp	x19, x20, [sp],#16
    61000cf4:	a8c153f3 	ldp	x19, x20, [sp], #16
	ldp	x21, x22, [sp],#16
    61000cf8:	a8c15bf5 	ldp	x21, x22, [sp], #16
	ldp	x23, x24, [sp],#16
    61000cfc:	a8c163f7 	ldp	x23, x24, [sp], #16
	ldp	x25, x26, [sp],#16
    61000d00:	a8c16bf9 	ldp	x25, x26, [sp], #16
	ldp	x27, x28, [sp],#16
    61000d04:	a8c173fb 	ldp	x27, x28, [sp], #16
	ldp	x29, x30, [sp],#16
    61000d08:	a8c17bfd 	ldp	x29, x30, [sp], #16
	eret
    61000d0c:	d69f03e0 	eret

Disassembly of section .text.__raw_writel:

0000000061000d10 <__raw_writel>:
	asm volatile("strh %w0, [%1]" : : "rZ" (val), "r" (addr));
}

#define __raw_writel __raw_writel
static __always_inline void __raw_writel(u32 val, volatile void __iomem *addr)
{
    61000d10:	d10043ff 	sub	sp, sp, #0x10
    61000d14:	b9000fe0 	str	w0, [sp, #12]
    61000d18:	f90003e1 	str	x1, [sp]
	asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
    61000d1c:	b9400fe0 	ldr	w0, [sp, #12]
    61000d20:	f94003e1 	ldr	x1, [sp]
    61000d24:	b9000020 	str	w0, [x1]
}
    61000d28:	d503201f 	nop
    61000d2c:	910043ff 	add	sp, sp, #0x10
    61000d30:	d65f03c0 	ret

0000000061000d34 <__raw_writel>:
{
    61000d34:	d10043ff 	sub	sp, sp, #0x10
    61000d38:	b9000fe0 	str	w0, [sp, #12]
    61000d3c:	f90003e1 	str	x1, [sp]
	asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
    61000d40:	b9400fe0 	ldr	w0, [sp, #12]
    61000d44:	f94003e1 	ldr	x1, [sp]
    61000d48:	b9000020 	str	w0, [x1]
}
    61000d4c:	d503201f 	nop
    61000d50:	910043ff 	add	sp, sp, #0x10
    61000d54:	d65f03c0 	ret

Disassembly of section .text.generic_timer_enable:

0000000061000d58 <generic_timer_enable>:
 * @desc  : enable generic timer
 * @param {*}
 * @return {*}
 */
static int generic_timer_enable(void)
{
    61000d58:	d10043ff 	sub	sp, sp, #0x10
	unsigned int v = 1;
    61000d5c:	52800020 	mov	w0, #0x1                   	// #1
    61000d60:	b9000fe0 	str	w0, [sp, #12]
	asm volatile(
    61000d64:	b9400fe0 	ldr	w0, [sp, #12]
    61000d68:	d51be220 	msr	cntp_ctl_el0, x0
		"msr cntp_ctl_el0, %x[v]"
		:
		: [v]"r"(v)
		: "memory");
	return 0;
    61000d6c:	52800000 	mov	w0, #0x0                   	// #0
}
    61000d70:	910043ff 	add	sp, sp, #0x10
    61000d74:	d65f03c0 	ret

Disassembly of section .text.generic_timer_reset:

0000000061000d78 <generic_timer_reset>:
 * @desc  : reset generic timer tval
 * @param {unsigned int} val
 * @return {*}
 */
int generic_timer_reset(unsigned int val)
{
    61000d78:	d10043ff 	sub	sp, sp, #0x10
    61000d7c:	b9000fe0 	str	w0, [sp, #12]
	asm volatile(
    61000d80:	b9400fe0 	ldr	w0, [sp, #12]
    61000d84:	d51be200 	msr	cntp_tval_el0, x0
		"msr cntp_tval_el0, %x[timer_val]"
		:
		: [timer_val] "r" (val)
		: "memory");

	return 0;
    61000d88:	52800000 	mov	w0, #0x0                   	// #0
}
    61000d8c:	910043ff 	add	sp, sp, #0x10
    61000d90:	d65f03c0 	ret

Disassembly of section .text.generic_timer_get_freq:

0000000061000d94 <generic_timer_get_freq>:

unsigned int generic_timer_get_freq(void)
{
    61000d94:	d10043ff 	sub	sp, sp, #0x10
	unsigned int freq;

	asm volatile(
    61000d98:	d53be000 	mrs	x0, cntfrq_el0
    61000d9c:	b9000fe0 	str	w0, [sp, #12]
		"mrs %0, cntfrq_el0"
		: "=r" (freq)
		:
		: "memory");

	return freq;
    61000da0:	b9400fe0 	ldr	w0, [sp, #12]
}
    61000da4:	910043ff 	add	sp, sp, #0x10
    61000da8:	d65f03c0 	ret

Disassembly of section .text.generic_timer_init:

0000000061000dac <generic_timer_init>:


void generic_timer_init(void)
{
    61000dac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61000db0:	910003fd 	mov	x29, sp
	generic_timer_rate = generic_timer_get_freq();
    61000db4:	97fffff8 	bl	61000d94 <generic_timer_get_freq>
    61000db8:	2a0003e1 	mov	w1, w0
    61000dbc:	90000020 	adrp	x0, 61004000 <spi_test+0x244>
    61000dc0:	911b4000 	add	x0, x0, #0x6d0
    61000dc4:	b9000001 	str	w1, [x0]

	// printf("cntp freq:0x%x\r\n", generic_timer_rate);
	// generic_timer_rate /= HZ;

	writel_relaxed(0x1,(void *)0xf8e05000UL);
    61000dc8:	d28a0001 	mov	x1, #0x5000                	// #20480
    61000dcc:	f2bf1c01 	movk	x1, #0xf8e0, lsl #16
    61000dd0:	52800020 	mov	w0, #0x1                   	// #1
    61000dd4:	97ffffcf 	bl	61000d10 <__raw_writel>

	generic_timer_enable();
    61000dd8:	97ffffe0 	bl	61000d58 <generic_timer_enable>
	generic_timer_reset(generic_timer_rate);
    61000ddc:	90000020 	adrp	x0, 61004000 <spi_test+0x244>
    61000de0:	911b4000 	add	x0, x0, #0x6d0
    61000de4:	b9400000 	ldr	w0, [x0]
    61000de8:	97ffffe4 	bl	61000d78 <generic_timer_reset>

	// enable the irq until call register_irq to install irq handler
	//gicv3_enable_irq(GENERIC_TIMER_IRQ);
}
    61000dec:	d503201f 	nop
    61000df0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61000df4:	d65f03c0 	ret

Disassembly of section .text.gic_write_eoir:

0000000061000df8 <gic_write_eoir>:
 * These system registers are 32 bits, but we make sure that the compiler
 * sets the GP register's most significant bits to 0 with an explicit cast.
 */

static inline void gic_write_eoir(u32 irq)
{
    61000df8:	d10083ff 	sub	sp, sp, #0x20
    61000dfc:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(irq, SYS_ICC_EOIR1_EL1);
    61000e00:	b9400fe0 	ldr	w0, [sp, #12]
    61000e04:	f9000fe0 	str	x0, [sp, #24]
    61000e08:	f9400fe0 	ldr	x0, [sp, #24]
    61000e0c:	d518cc20 	msr	s3_0_c12_c12_1, x0
	isb();
    61000e10:	d5033fdf 	isb
}
    61000e14:	d503201f 	nop
    61000e18:	910083ff 	add	sp, sp, #0x20
    61000e1c:	d65f03c0 	ret

Disassembly of section .text.gic_read_iar_common:

0000000061000e20 <gic_read_iar_common>:
	write_sysreg_s(irq, SYS_ICC_DIR_EL1);
	isb();
}

static inline u64 gic_read_iar_common(void)
{
    61000e20:	d10043ff 	sub	sp, sp, #0x10
    61000e24:	d538cc00 	mrs	x0, s3_0_c12_c12_0
	u64 irqstat;

	irqstat = read_sysreg_s(SYS_ICC_IAR1_EL1);
    61000e28:	f90007e0 	str	x0, [sp, #8]
    61000e2c:	f94007e0 	ldr	x0, [sp, #8]
    61000e30:	f90003e0 	str	x0, [sp]
	dsb(sy);
    61000e34:	d5033f9f 	dsb	sy
	return irqstat;
    61000e38:	f94003e0 	ldr	x0, [sp]
}
    61000e3c:	910043ff 	add	sp, sp, #0x10
    61000e40:	d65f03c0 	ret

Disassembly of section .text.gic_write_ctlr:

0000000061000e44 <gic_write_ctlr>:

	return irqstat;
}

static inline void gic_write_ctlr(u32 val)
{
    61000e44:	d10083ff 	sub	sp, sp, #0x20
    61000e48:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_CTLR_EL1);
    61000e4c:	b9400fe0 	ldr	w0, [sp, #12]
    61000e50:	f9000fe0 	str	x0, [sp, #24]
    61000e54:	f9400fe0 	ldr	x0, [sp, #24]
    61000e58:	d518cc80 	msr	s3_0_c12_c12_4, x0
	isb();
    61000e5c:	d5033fdf 	isb
}
    61000e60:	d503201f 	nop
    61000e64:	910083ff 	add	sp, sp, #0x20
    61000e68:	d65f03c0 	ret

Disassembly of section .text.gic_write_grpen1:

0000000061000e6c <gic_write_grpen1>:
{
	return read_sysreg_s(SYS_ICC_CTLR_EL1);
}

static inline void gic_write_grpen1(u32 val)
{
    61000e6c:	d10083ff 	sub	sp, sp, #0x20
    61000e70:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_IGRPEN1_EL1);
    61000e74:	b9400fe0 	ldr	w0, [sp, #12]
    61000e78:	f9000fe0 	str	x0, [sp, #24]
    61000e7c:	f9400fe0 	ldr	x0, [sp, #24]
    61000e80:	d518cce0 	msr	s3_0_c12_c12_7, x0
	isb();
    61000e84:	d5033fdf 	isb
}
    61000e88:	d503201f 	nop
    61000e8c:	910083ff 	add	sp, sp, #0x20
    61000e90:	d65f03c0 	ret

Disassembly of section .text.gic_read_sre:

0000000061000e94 <gic_read_sre>:
{
	write_sysreg_s(val, SYS_ICC_SGI1R_EL1);
}

static inline u32 gic_read_sre(void)
{
    61000e94:	d10043ff 	sub	sp, sp, #0x10
    61000e98:	d538cca0 	mrs	x0, icc_sre_el1
	return read_sysreg_s(SYS_ICC_SRE_EL1);
    61000e9c:	f90007e0 	str	x0, [sp, #8]
    61000ea0:	f94007e0 	ldr	x0, [sp, #8]
}
    61000ea4:	910043ff 	add	sp, sp, #0x10
    61000ea8:	d65f03c0 	ret

Disassembly of section .text.gic_write_sre:

0000000061000eac <gic_write_sre>:

static inline void gic_write_sre(u32 val)
{
    61000eac:	d10083ff 	sub	sp, sp, #0x20
    61000eb0:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_SRE_EL1);
    61000eb4:	b9400fe0 	ldr	w0, [sp, #12]
    61000eb8:	f9000fe0 	str	x0, [sp, #24]
    61000ebc:	f9400fe0 	ldr	x0, [sp, #24]
    61000ec0:	d518cca0 	msr	icc_sre_el1, x0
	isb();
    61000ec4:	d5033fdf 	isb
}
    61000ec8:	d503201f 	nop
    61000ecc:	910083ff 	add	sp, sp, #0x20
    61000ed0:	d65f03c0 	ret

Disassembly of section .text.gic_write_bpr1:

0000000061000ed4 <gic_write_bpr1>:

static inline void gic_write_bpr1(u32 val)
{
    61000ed4:	d10083ff 	sub	sp, sp, #0x20
    61000ed8:	b9000fe0 	str	w0, [sp, #12]
	write_sysreg_s(val, SYS_ICC_BPR1_EL1);
    61000edc:	b9400fe0 	ldr	w0, [sp, #12]
    61000ee0:	f9000fe0 	str	x0, [sp, #24]
    61000ee4:	f9400fe0 	ldr	x0, [sp, #24]
    61000ee8:	d518cc60 	msr	s3_0_c12_c12_3, x0
}
    61000eec:	d503201f 	nop
    61000ef0:	910083ff 	add	sp, sp, #0x20
    61000ef4:	d65f03c0 	ret

Disassembly of section .text.__raw_writeq:

0000000061000ef8 <__raw_writeq>:

#define __raw_writeq __raw_writeq
static inline void __raw_writeq(u64 val, volatile void __iomem *addr)
{
    61000ef8:	d10043ff 	sub	sp, sp, #0x10
    61000efc:	f90007e0 	str	x0, [sp, #8]
    61000f00:	f90003e1 	str	x1, [sp]
	asm volatile("str %x0, [%1]" : : "rZ" (val), "r" (addr));
    61000f04:	f94007e0 	ldr	x0, [sp, #8]
    61000f08:	f94003e1 	ldr	x1, [sp]
    61000f0c:	f9000020 	str	x0, [x1]
}
    61000f10:	d503201f 	nop
    61000f14:	910043ff 	add	sp, sp, #0x10
    61000f18:	d65f03c0 	ret

Disassembly of section .text.__raw_readl:

0000000061000f1c <__raw_readl>:
	return val;
}

#define __raw_readl __raw_readl
static __always_inline u32 __raw_readl(const volatile void __iomem *addr)
{
    61000f1c:	d10083ff 	sub	sp, sp, #0x20
    61000f20:	f90007e0 	str	x0, [sp, #8]
	u32 val;
	asm volatile("ldr %w0, [%1]" \
    61000f24:	f94007e0 	ldr	x0, [sp, #8]
    61000f28:	b9400000 	ldr	w0, [x0]
    61000f2c:	b9001fe0 	str	w0, [sp, #28]
		     : "=r" (val) : "r" (addr));
	return val;
    61000f30:	b9401fe0 	ldr	w0, [sp, #28]
}
    61000f34:	910083ff 	add	sp, sp, #0x20
    61000f38:	d65f03c0 	ret

Disassembly of section .text.cpu_relax:

0000000061000f3c <cpu_relax>:

#ifndef __ASSEMBLY__

static inline void cpu_relax(void)
{
	asm volatile("yield" ::: "memory");
    61000f3c:	d503203f 	yield
}
    61000f40:	d503201f 	nop
    61000f44:	d65f03c0 	ret

Disassembly of section .text.gic_do_wait_for_rwp:

0000000061000f48 <gic_do_wait_for_rwp>:

	gicv3_enable_irq(int_id);
}

static void gic_do_wait_for_rwp(void __iomem *rwp_addr)
{
    61000f48:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61000f4c:	910003fd 	mov	x29, sp
    61000f50:	f9000fe0 	str	x0, [sp, #24]
	u32_t count = 1000000;	/* 1s! */
    61000f54:	52884800 	mov	w0, #0x4240                	// #16960
    61000f58:	72a001e0 	movk	w0, #0xf, lsl #16
    61000f5c:	b9003fe0 	str	w0, [sp, #60]

	while (readl(rwp_addr) & GICD_CTLR_RWP) {
    61000f60:	1400000a 	b	61000f88 <gic_do_wait_for_rwp+0x40>
		count--;
    61000f64:	b9403fe0 	ldr	w0, [sp, #60]
    61000f68:	51000400 	sub	w0, w0, #0x1
    61000f6c:	b9003fe0 	str	w0, [sp, #60]
		if (!count) {
    61000f70:	b9403fe0 	ldr	w0, [sp, #60]
    61000f74:	7100001f 	cmp	w0, #0x0
    61000f78:	54000240 	b.eq	61000fc0 <gic_do_wait_for_rwp+0x78>  // b.none
			gic_print("RWP timeout, gone fishing\n");
			return;
		}
		cpu_relax();
    61000f7c:	97fffff0 	bl	61000f3c <cpu_relax>
		_delay_ms(1);
    61000f80:	52800020 	mov	w0, #0x1                   	// #1
    61000f84:	940004e5 	bl	61002318 <_delay_ms>
	while (readl(rwp_addr) & GICD_CTLR_RWP) {
    61000f88:	f9400fe0 	ldr	x0, [sp, #24]
    61000f8c:	97ffffe4 	bl	61000f1c <__raw_readl>
    61000f90:	b9003be0 	str	w0, [sp, #56]
    61000f94:	b9403be0 	ldr	w0, [sp, #56]
    61000f98:	b90037e0 	str	w0, [sp, #52]
    61000f9c:	d50331bf 	dmb	oshld
    61000fa0:	b94037e0 	ldr	w0, [sp, #52]
    61000fa4:	ca000000 	eor	x0, x0, x0
    61000fa8:	b5000000 	cbnz	x0, 61000fa8 <gic_do_wait_for_rwp+0x60>
    61000fac:	f90017e0 	str	x0, [sp, #40]
    61000fb0:	b94037e0 	ldr	w0, [sp, #52]
    61000fb4:	7100001f 	cmp	w0, #0x0
    61000fb8:	54fffd6b 	b.lt	61000f64 <gic_do_wait_for_rwp+0x1c>  // b.tstop
    61000fbc:	14000002 	b	61000fc4 <gic_do_wait_for_rwp+0x7c>
			return;
    61000fc0:	d503201f 	nop
	}
}
    61000fc4:	a8c47bfd 	ldp	x29, x30, [sp], #64
    61000fc8:	d65f03c0 	ret

Disassembly of section .text.gic_dist_wait:

0000000061000fcc <gic_dist_wait>:

static void gic_dist_wait(void)
{
    61000fcc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61000fd0:	910003fd 	mov	x29, sp
	gic_do_wait_for_rwp(GICD_BASE);
    61000fd4:	d2bba000 	mov	x0, #0xdd000000            	// #3707764736
    61000fd8:	97ffffdc 	bl	61000f48 <gic_do_wait_for_rwp>
}
    61000fdc:	d503201f 	nop
    61000fe0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61000fe4:	d65f03c0 	ret

Disassembly of section .text.gic_redist_wait:

0000000061000fe8 <gic_redist_wait>:

static void gic_redist_wait(void)
{
    61000fe8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61000fec:	910003fd 	mov	x29, sp
	gic_do_wait_for_rwp(GICR_RD_BASE);
    61000ff0:	d2bba080 	mov	x0, #0xdd040000            	// #3708026880
    61000ff4:	97ffffd5 	bl	61000f48 <gic_do_wait_for_rwp>
}
    61000ff8:	d503201f 	nop
    61000ffc:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61001000:	d65f03c0 	ret

Disassembly of section .text.gic_mpidr_to_affinity:

0000000061001004 <gic_mpidr_to_affinity>:

static u64 gic_mpidr_to_affinity(unsigned long mpidr)
{
    61001004:	d10083ff 	sub	sp, sp, #0x20
    61001008:	f90007e0 	str	x0, [sp, #8]
	u64 aff;
	aff = ((u64)MPIDR_AFFINITY_LEVEL(mpidr, 3) << 32 |
    6100100c:	f94007e1 	ldr	x1, [sp, #8]
    61001010:	b2405fe0 	mov	x0, #0xffffff              	// #16777215
    61001014:	f2c01fe0 	movk	x0, #0xff, lsl #32
    61001018:	8a000020 	and	x0, x1, x0
    6100101c:	f9000fe0 	str	x0, [sp, #24]
		MPIDR_AFFINITY_LEVEL(mpidr, 2) << 16 |
		MPIDR_AFFINITY_LEVEL(mpidr, 1) << 8  |
		MPIDR_AFFINITY_LEVEL(mpidr, 0));

	return aff;
    61001020:	f9400fe0 	ldr	x0, [sp, #24]
}
    61001024:	910083ff 	add	sp, sp, #0x20
    61001028:	d65f03c0 	ret

Disassembly of section .text.gicv3_dist_init:

000000006100102c <gicv3_dist_init>:

static void gicv3_dist_init(u32 int_group)
{
    6100102c:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61001030:	910003fd 	mov	x29, sp
    61001034:	b9001fe0 	str	w0, [sp, #28]
	u32 spi_itline_nums, cpu_nums, gic_irqs;
	u32 gicd_typer;
	u64 affinity;

	/* Disable the distributor */
	writel_relaxed(0, GICD_CTLR);
    61001038:	d2bba001 	mov	x1, #0xdd000000            	// #3707764736
    6100103c:	52800000 	mov	w0, #0x0                   	// #0
    61001040:	97ffff3d 	bl	61000d34 <__raw_writel>
	gic_dist_wait();
    61001044:	97ffffe2 	bl	61000fcc <gic_dist_wait>

	gicd_typer = readl_relaxed(GICD_TYPER);
    61001048:	d2800080 	mov	x0, #0x4                   	// #4
    6100104c:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001050:	97ffffb3 	bl	61000f1c <__raw_readl>
    61001054:	b9003be0 	str	w0, [sp, #56]
    61001058:	b9403be0 	ldr	w0, [sp, #56]
    6100105c:	b90037e0 	str	w0, [sp, #52]
	spi_itline_nums = gicd_typer & GICD_ITLines_Numbers;
    61001060:	b94037e0 	ldr	w0, [sp, #52]
    61001064:	12001000 	and	w0, w0, #0x1f
    61001068:	b90033e0 	str	w0, [sp, #48]
	gic_irqs = min((spi_itline_nums + 1) * 32, 1020);
    6100106c:	b94033e0 	ldr	w0, [sp, #48]
    61001070:	11000400 	add	w0, w0, #0x1
    61001074:	531b6800 	lsl	w0, w0, #5
    61001078:	52807f81 	mov	w1, #0x3fc                 	// #1020
    6100107c:	710ff01f 	cmp	w0, #0x3fc
    61001080:	1a819000 	csel	w0, w0, w1, ls  // ls = plast
    61001084:	b9002fe0 	str	w0, [sp, #44]
	gic_print("support irq amount: %d\n", gic_irqs);

	/*
	 * Set all global interrupts to be level triggered, active low.
	 */
	for (i = 32; i < gic_irqs; i += 16)
    61001088:	52800400 	mov	w0, #0x20                  	// #32
    6100108c:	b9003fe0 	str	w0, [sp, #60]
    61001090:	1400000d 	b	610010c4 <gicv3_dist_init+0x98>
		writel_relaxed(GICD_INT_ACTLOW_LVLTRIG, GICD_ICFGR + i / 4);
    61001094:	b9403fe0 	ldr	w0, [sp, #60]
    61001098:	53027c00 	lsr	w0, w0, #2
    6100109c:	2a0003e1 	mov	w1, w0
    610010a0:	d2818000 	mov	x0, #0xc00                 	// #3072
    610010a4:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610010a8:	8b000020 	add	x0, x1, x0
    610010ac:	aa0003e1 	mov	x1, x0
    610010b0:	52800000 	mov	w0, #0x0                   	// #0
    610010b4:	97ffff20 	bl	61000d34 <__raw_writel>
	for (i = 32; i < gic_irqs; i += 16)
    610010b8:	b9403fe0 	ldr	w0, [sp, #60]
    610010bc:	11004000 	add	w0, w0, #0x10
    610010c0:	b9003fe0 	str	w0, [sp, #60]
    610010c4:	b9403fe1 	ldr	w1, [sp, #60]
    610010c8:	b9402fe0 	ldr	w0, [sp, #44]
    610010cc:	6b00003f 	cmp	w1, w0
    610010d0:	54fffe23 	b.cc	61001094 <gicv3_dist_init+0x68>  // b.lo, b.ul, b.last

	/*
	 * Set priority on all global interrupts.
	 */
	for (i = 32; i < gic_irqs; i += 4)
    610010d4:	52800400 	mov	w0, #0x20                  	// #32
    610010d8:	b9003fe0 	str	w0, [sp, #60]
    610010dc:	1400000c 	b	6100110c <gicv3_dist_init+0xe0>
		writel_relaxed(GICD_INT_DEF_PRI_X4, GICD_IPRIORITYR + i);
    610010e0:	b9403fe1 	ldr	w1, [sp, #60]
    610010e4:	d2808000 	mov	x0, #0x400                 	// #1024
    610010e8:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610010ec:	8b000020 	add	x0, x1, x0
    610010f0:	aa0003e1 	mov	x1, x0
    610010f4:	52941400 	mov	w0, #0xa0a0                	// #41120
    610010f8:	72b41400 	movk	w0, #0xa0a0, lsl #16
    610010fc:	97ffff0e 	bl	61000d34 <__raw_writel>
	for (i = 32; i < gic_irqs; i += 4)
    61001100:	b9403fe0 	ldr	w0, [sp, #60]
    61001104:	11001000 	add	w0, w0, #0x4
    61001108:	b9003fe0 	str	w0, [sp, #60]
    6100110c:	b9403fe1 	ldr	w1, [sp, #60]
    61001110:	b9402fe0 	ldr	w0, [sp, #44]
    61001114:	6b00003f 	cmp	w1, w0
    61001118:	54fffe43 	b.cc	610010e0 <gicv3_dist_init+0xb4>  // b.lo, b.ul, b.last

	/*
	 * Deactivate and disable all SPIs. Leave the PPI and SGIs
	 * alone as they are in the redistributor registers on GICv3.
	 */
	for (i = 32; i < gic_irqs; i += 32) {
    6100111c:	52800400 	mov	w0, #0x20                  	// #32
    61001120:	b9003fe0 	str	w0, [sp, #60]
    61001124:	14000016 	b	6100117c <gicv3_dist_init+0x150>
		writel_relaxed(GICD_INT_EN_CLR_X32, GICD_ACTIVE_CLEAR + i / 8);
    61001128:	b9403fe0 	ldr	w0, [sp, #60]
    6100112c:	53037c00 	lsr	w0, w0, #3
    61001130:	2a0003e1 	mov	w1, w0
    61001134:	d2807000 	mov	x0, #0x380                 	// #896
    61001138:	f2bba000 	movk	x0, #0xdd00, lsl #16
    6100113c:	8b000020 	add	x0, x1, x0
    61001140:	aa0003e1 	mov	x1, x0
    61001144:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001148:	97fffefb 	bl	61000d34 <__raw_writel>
		writel_relaxed(GICD_INT_EN_CLR_X32, GICD_ICENABLER + i / 8);
    6100114c:	b9403fe0 	ldr	w0, [sp, #60]
    61001150:	53037c00 	lsr	w0, w0, #3
    61001154:	2a0003e1 	mov	w1, w0
    61001158:	d2803000 	mov	x0, #0x180                 	// #384
    6100115c:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001160:	8b000020 	add	x0, x1, x0
    61001164:	aa0003e1 	mov	x1, x0
    61001168:	12800000 	mov	w0, #0xffffffff            	// #-1
    6100116c:	97fffef2 	bl	61000d34 <__raw_writel>
	for (i = 32; i < gic_irqs; i += 32) {
    61001170:	b9403fe0 	ldr	w0, [sp, #60]
    61001174:	11008000 	add	w0, w0, #0x20
    61001178:	b9003fe0 	str	w0, [sp, #60]
    6100117c:	b9403fe1 	ldr	w1, [sp, #60]
    61001180:	b9402fe0 	ldr	w0, [sp, #44]
    61001184:	6b00003f 	cmp	w1, w0
    61001188:	54fffd03 	b.cc	61001128 <gicv3_dist_init+0xfc>  // b.lo, b.ul, b.last
	}
	gic_dist_wait();
    6100118c:	97ffff90 	bl	61000fcc <gic_dist_wait>
	/* there setting depend the running secure state */
	if (int_group == 2) {
    61001190:	b9401fe0 	ldr	w0, [sp, #28]
    61001194:	7100081f 	cmp	w0, #0x2
    61001198:	54000561 	b.ne	61001244 <gicv3_dist_init+0x218>  // b.any
		 /* group 1 non-secure*/
		 /* gicd.ctrl.ds = 1 */
		for (i = 32; i < gic_irqs; i += 32)
    6100119c:	52800400 	mov	w0, #0x20                  	// #32
    610011a0:	b9003fe0 	str	w0, [sp, #60]
    610011a4:	1400000d 	b	610011d8 <gicv3_dist_init+0x1ac>
			writel_relaxed(0xffffffff, GICD_IGROUPR + i / 8);
    610011a8:	b9403fe0 	ldr	w0, [sp, #60]
    610011ac:	53037c00 	lsr	w0, w0, #3
    610011b0:	2a0003e1 	mov	w1, w0
    610011b4:	d2801000 	mov	x0, #0x80                  	// #128
    610011b8:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610011bc:	8b000020 	add	x0, x1, x0
    610011c0:	aa0003e1 	mov	x1, x0
    610011c4:	12800000 	mov	w0, #0xffffffff            	// #-1
    610011c8:	97fffedb 	bl	61000d34 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32)
    610011cc:	b9403fe0 	ldr	w0, [sp, #60]
    610011d0:	11008000 	add	w0, w0, #0x20
    610011d4:	b9003fe0 	str	w0, [sp, #60]
    610011d8:	b9403fe1 	ldr	w1, [sp, #60]
    610011dc:	b9402fe0 	ldr	w0, [sp, #44]
    610011e0:	6b00003f 	cmp	w1, w0
    610011e4:	54fffe23 	b.cc	610011a8 <gicv3_dist_init+0x17c>  // b.lo, b.ul, b.last
		for (i = 32; i < gic_irqs; i += 32)
    610011e8:	52800400 	mov	w0, #0x20                  	// #32
    610011ec:	b9003fe0 	str	w0, [sp, #60]
    610011f0:	1400000d 	b	61001224 <gicv3_dist_init+0x1f8>
			writel_relaxed(0, GICD_IGRPMODR + i / 8);
    610011f4:	b9403fe0 	ldr	w0, [sp, #60]
    610011f8:	53037c00 	lsr	w0, w0, #3
    610011fc:	2a0003e1 	mov	w1, w0
    61001200:	d281a000 	mov	x0, #0xd00                 	// #3328
    61001204:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001208:	8b000020 	add	x0, x1, x0
    6100120c:	aa0003e1 	mov	x1, x0
    61001210:	52800000 	mov	w0, #0x0                   	// #0
    61001214:	97fffec8 	bl	61000d34 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32)
    61001218:	b9403fe0 	ldr	w0, [sp, #60]
    6100121c:	11008000 	add	w0, w0, #0x20
    61001220:	b9003fe0 	str	w0, [sp, #60]
    61001224:	b9403fe1 	ldr	w1, [sp, #60]
    61001228:	b9402fe0 	ldr	w0, [sp, #44]
    6100122c:	6b00003f 	cmp	w1, w0
    61001230:	54fffe23 	b.cc	610011f4 <gicv3_dist_init+0x1c8>  // b.lo, b.ul, b.last
		 /* Enable distributor with ARE, no secure Group1 */
		writel_relaxed(GICD_CTLR_ARE_NS | GICD_CTLR_ENABLE_G1A | GICD_CTLR_ENABLE_G1, GICD_CTLR);
    61001234:	d2bba001 	mov	x1, #0xdd000000            	// #3707764736
    61001238:	52800260 	mov	w0, #0x13                  	// #19
    6100123c:	97fffebe 	bl	61000d34 <__raw_writel>
    61001240:	1400002d 	b	610012f4 <gicv3_dist_init+0x2c8>
	} else if ( int_group == 1) {
    61001244:	b9401fe0 	ldr	w0, [sp, #28]
    61001248:	7100041f 	cmp	w0, #0x1
    6100124c:	54000541 	b.ne	610012f4 <gicv3_dist_init+0x2c8>  // b.any
		 /* group 1 secure*/
		 /* gicd.ctrl.ds = 1 */
		for (i = 32; i < gic_irqs; i += 32)
    61001250:	52800400 	mov	w0, #0x20                  	// #32
    61001254:	b9003fe0 	str	w0, [sp, #60]
    61001258:	1400000d 	b	6100128c <gicv3_dist_init+0x260>
			writel_relaxed(0, GICD_IGROUPR + i / 8);
    6100125c:	b9403fe0 	ldr	w0, [sp, #60]
    61001260:	53037c00 	lsr	w0, w0, #3
    61001264:	2a0003e1 	mov	w1, w0
    61001268:	d2801000 	mov	x0, #0x80                  	// #128
    6100126c:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001270:	8b000020 	add	x0, x1, x0
    61001274:	aa0003e1 	mov	x1, x0
    61001278:	52800000 	mov	w0, #0x0                   	// #0
    6100127c:	97fffeae 	bl	61000d34 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32)
    61001280:	b9403fe0 	ldr	w0, [sp, #60]
    61001284:	11008000 	add	w0, w0, #0x20
    61001288:	b9003fe0 	str	w0, [sp, #60]
    6100128c:	b9403fe1 	ldr	w1, [sp, #60]
    61001290:	b9402fe0 	ldr	w0, [sp, #44]
    61001294:	6b00003f 	cmp	w1, w0
    61001298:	54fffe23 	b.cc	6100125c <gicv3_dist_init+0x230>  // b.lo, b.ul, b.last
		for (i = 32; i < gic_irqs; i += 32)
    6100129c:	52800400 	mov	w0, #0x20                  	// #32
    610012a0:	b9003fe0 	str	w0, [sp, #60]
    610012a4:	1400000d 	b	610012d8 <gicv3_dist_init+0x2ac>
			writel_relaxed(0xffffffff, GICD_IGRPMODR + i / 8);
    610012a8:	b9403fe0 	ldr	w0, [sp, #60]
    610012ac:	53037c00 	lsr	w0, w0, #3
    610012b0:	2a0003e1 	mov	w1, w0
    610012b4:	d281a000 	mov	x0, #0xd00                 	// #3328
    610012b8:	f2bba000 	movk	x0, #0xdd00, lsl #16
    610012bc:	8b000020 	add	x0, x1, x0
    610012c0:	aa0003e1 	mov	x1, x0
    610012c4:	12800000 	mov	w0, #0xffffffff            	// #-1
    610012c8:	97fffe9b 	bl	61000d34 <__raw_writel>
		for (i = 32; i < gic_irqs; i += 32)
    610012cc:	b9403fe0 	ldr	w0, [sp, #60]
    610012d0:	11008000 	add	w0, w0, #0x20
    610012d4:	b9003fe0 	str	w0, [sp, #60]
    610012d8:	b9403fe1 	ldr	w1, [sp, #60]
    610012dc:	b9402fe0 	ldr	w0, [sp, #44]
    610012e0:	6b00003f 	cmp	w1, w0
    610012e4:	54fffe23 	b.cc	610012a8 <gicv3_dist_init+0x27c>  // b.lo, b.ul, b.last
		 /* Enable distributor with ARE, secure Group1 */
		writel_relaxed((1<<4) | (1<<2), GICD_CTLR);
    610012e8:	d2bba001 	mov	x1, #0xdd000000            	// #3707764736
    610012ec:	52800280 	mov	w0, #0x14                  	// #20
    610012f0:	97fffe91 	bl	61000d34 <__raw_writel>
	}

	gic_dist_wait();
    610012f4:	97ffff36 	bl	61000fcc <gic_dist_wait>
	/*
	 * Set all global interrupts to the boot CPU only. ARE must be enabled.
	 */
	affinity = gic_mpidr_to_affinity(0);
    610012f8:	d2800000 	mov	x0, #0x0                   	// #0
    610012fc:	97ffff42 	bl	61001004 <gic_mpidr_to_affinity>
    61001300:	f90013e0 	str	x0, [sp, #32]
	for (i = 32; i < gic_irqs; i++)
    61001304:	52800400 	mov	w0, #0x20                  	// #32
    61001308:	b9003fe0 	str	w0, [sp, #60]
    6100130c:	1400000d 	b	61001340 <gicv3_dist_init+0x314>
		writeq_relaxed(affinity, GICD_IROUTER + i * 8);
    61001310:	b9403fe0 	ldr	w0, [sp, #60]
    61001314:	531d7000 	lsl	w0, w0, #3
    61001318:	2a0003e1 	mov	w1, w0
    6100131c:	d28c0000 	mov	x0, #0x6000                	// #24576
    61001320:	f2bba000 	movk	x0, #0xdd00, lsl #16
    61001324:	8b000020 	add	x0, x1, x0
    61001328:	aa0003e1 	mov	x1, x0
    6100132c:	f94013e0 	ldr	x0, [sp, #32]
    61001330:	97fffef2 	bl	61000ef8 <__raw_writeq>
	for (i = 32; i < gic_irqs; i++)
    61001334:	b9403fe0 	ldr	w0, [sp, #60]
    61001338:	11000400 	add	w0, w0, #0x1
    6100133c:	b9003fe0 	str	w0, [sp, #60]
    61001340:	b9403fe1 	ldr	w1, [sp, #60]
    61001344:	b9402fe0 	ldr	w0, [sp, #44]
    61001348:	6b00003f 	cmp	w1, w0
    6100134c:	54fffe23 	b.cc	61001310 <gicv3_dist_init+0x2e4>  // b.lo, b.ul, b.last

	gic_dist_wait();
    61001350:	97ffff1f 	bl	61000fcc <gic_dist_wait>
}
    61001354:	d503201f 	nop
    61001358:	a8c47bfd 	ldp	x29, x30, [sp], #64
    6100135c:	d65f03c0 	ret

Disassembly of section .text.gic_enable_redist:

0000000061001360 <gic_enable_redist>:

static void gic_enable_redist(bool enable)
{
    61001360:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
    61001364:	910003fd 	mov	x29, sp
    61001368:	39007fe0 	strb	w0, [sp, #31]
	u32 count = 1000000;	/* 1s! */
    6100136c:	52884800 	mov	w0, #0x4240                	// #16960
    61001370:	72a001e0 	movk	w0, #0xf, lsl #16
    61001374:	b9003fe0 	str	w0, [sp, #60]
	u32 val;

	val = readl_relaxed(GICR_WAKER);
    61001378:	d2800280 	mov	x0, #0x14                  	// #20
    6100137c:	f2bba080 	movk	x0, #0xdd04, lsl #16
    61001380:	97fffee7 	bl	61000f1c <__raw_readl>
    61001384:	b90037e0 	str	w0, [sp, #52]
    61001388:	b94037e0 	ldr	w0, [sp, #52]
    6100138c:	b9003be0 	str	w0, [sp, #56]
	if (enable)
    61001390:	39407fe0 	ldrb	w0, [sp, #31]
    61001394:	7100001f 	cmp	w0, #0x0
    61001398:	540000a0 	b.eq	610013ac <gic_enable_redist+0x4c>  // b.none
		/* Wake up this CPU redistributor */
		val &= ~GICR_WAKER_ProcessorSleep;
    6100139c:	b9403be0 	ldr	w0, [sp, #56]
    610013a0:	121e7800 	and	w0, w0, #0xfffffffd
    610013a4:	b9003be0 	str	w0, [sp, #56]
    610013a8:	14000004 	b	610013b8 <gic_enable_redist+0x58>
	else
		val |= GICR_WAKER_ProcessorSleep;
    610013ac:	b9403be0 	ldr	w0, [sp, #56]
    610013b0:	321f0000 	orr	w0, w0, #0x2
    610013b4:	b9003be0 	str	w0, [sp, #56]
	writel_relaxed(val, GICR_WAKER);
    610013b8:	d2800281 	mov	x1, #0x14                  	// #20
    610013bc:	f2bba081 	movk	x1, #0xdd04, lsl #16
    610013c0:	b9403be0 	ldr	w0, [sp, #56]
    610013c4:	97fffe5c 	bl	61000d34 <__raw_writel>

	if (!enable) {		/* Check that GICR_WAKER is writeable */
    610013c8:	39407fe0 	ldrb	w0, [sp, #31]
    610013cc:	52000000 	eor	w0, w0, #0x1
    610013d0:	12001c00 	and	w0, w0, #0xff
    610013d4:	7100001f 	cmp	w0, #0x0
    610013d8:	540003a0 	b.eq	6100144c <gic_enable_redist+0xec>  // b.none
		val = readl_relaxed(GICR_WAKER);
    610013dc:	d2800280 	mov	x0, #0x14                  	// #20
    610013e0:	f2bba080 	movk	x0, #0xdd04, lsl #16
    610013e4:	97fffece 	bl	61000f1c <__raw_readl>
    610013e8:	b90033e0 	str	w0, [sp, #48]
    610013ec:	b94033e0 	ldr	w0, [sp, #48]
    610013f0:	b9003be0 	str	w0, [sp, #56]
		if (!(val & GICR_WAKER_ProcessorSleep))
    610013f4:	b9403be0 	ldr	w0, [sp, #56]
    610013f8:	121f0000 	and	w0, w0, #0x2
    610013fc:	7100001f 	cmp	w0, #0x0
    61001400:	54000340 	b.eq	61001468 <gic_enable_redist+0x108>  // b.none
			return;	/* No PM support in this redistributor */
	}

	while (--count) {
    61001404:	14000012 	b	6100144c <gic_enable_redist+0xec>
		val = readl_relaxed(GICR_WAKER);
    61001408:	d2800280 	mov	x0, #0x14                  	// #20
    6100140c:	f2bba080 	movk	x0, #0xdd04, lsl #16
    61001410:	97fffec3 	bl	61000f1c <__raw_readl>
    61001414:	b9002fe0 	str	w0, [sp, #44]
    61001418:	b9402fe0 	ldr	w0, [sp, #44]
    6100141c:	b9003be0 	str	w0, [sp, #56]
		if (enable ^ (bool)(val & GICR_WAKER_ChildrenAsleep))
    61001420:	39407fe0 	ldrb	w0, [sp, #31]
    61001424:	b9403be1 	ldr	w1, [sp, #56]
    61001428:	121e0021 	and	w1, w1, #0x4
    6100142c:	7100003f 	cmp	w1, #0x0
    61001430:	1a9f07e1 	cset	w1, ne  // ne = any
    61001434:	12001c21 	and	w1, w1, #0xff
    61001438:	6b01001f 	cmp	w0, w1
    6100143c:	540001a1 	b.ne	61001470 <gic_enable_redist+0x110>  // b.any
			break;
		cpu_relax();
    61001440:	97fffebf 	bl	61000f3c <cpu_relax>
		_delay_ms(1);
    61001444:	52800020 	mov	w0, #0x1                   	// #1
    61001448:	940003b4 	bl	61002318 <_delay_ms>
	while (--count) {
    6100144c:	b9403fe0 	ldr	w0, [sp, #60]
    61001450:	51000400 	sub	w0, w0, #0x1
    61001454:	b9003fe0 	str	w0, [sp, #60]
    61001458:	b9403fe0 	ldr	w0, [sp, #60]
    6100145c:	7100001f 	cmp	w0, #0x0
    61001460:	54fffd41 	b.ne	61001408 <gic_enable_redist+0xa8>  // b.any
    61001464:	14000004 	b	61001474 <gic_enable_redist+0x114>
			return;	/* No PM support in this redistributor */
    61001468:	d503201f 	nop
    6100146c:	14000002 	b	61001474 <gic_enable_redist+0x114>
			break;
    61001470:	d503201f 	nop
	}

	if (!count)
		gic_print("redistributor failed to %s...\n", enable ? "wakeup" : "sleep");
}
    61001474:	a8c47bfd 	ldp	x29, x30, [sp], #64
    61001478:	d65f03c0 	ret

Disassembly of section .text.gicv3_redist_init:

000000006100147c <gicv3_redist_init>:

static void gicv3_redist_init(u32 int_group)
{
    6100147c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61001480:	910003fd 	mov	x29, sp
    61001484:	b9001fe0 	str	w0, [sp, #28]
	u32 i;
	u32 nr = 1;
    61001488:	52800020 	mov	w0, #0x1                   	// #1
    6100148c:	b9002be0 	str	w0, [sp, #40]
	gic_enable_redist(true);
    61001490:	52800020 	mov	w0, #0x1                   	// #1
    61001494:	97ffffb3 	bl	61001360 <gic_enable_redist>

	if (int_group == 2) {
    61001498:	b9401fe0 	ldr	w0, [sp, #28]
    6100149c:	7100081f 	cmp	w0, #0x2
    610014a0:	54000141 	b.ne	610014c8 <gicv3_redist_init+0x4c>  // b.any
		/* Configure SGIs/PPIs as non-secure Group-1 */
		writel_relaxed(0xffffffff, GICR_SGI_IGROUPR0);
    610014a4:	d2801001 	mov	x1, #0x80                  	// #128
    610014a8:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    610014ac:	12800000 	mov	w0, #0xffffffff            	// #-1
    610014b0:	97fffe21 	bl	61000d34 <__raw_writel>
		writel_relaxed(0x0,  GICR_SGI_IGRPMOD0);
    610014b4:	d281a001 	mov	x1, #0xd00                 	// #3328
    610014b8:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    610014bc:	52800000 	mov	w0, #0x0                   	// #0
    610014c0:	97fffe1d 	bl	61000d34 <__raw_writel>
    610014c4:	1400000c 	b	610014f4 <gicv3_redist_init+0x78>
	} else if ( int_group == 1) {
    610014c8:	b9401fe0 	ldr	w0, [sp, #28]
    610014cc:	7100041f 	cmp	w0, #0x1
    610014d0:	54000121 	b.ne	610014f4 <gicv3_redist_init+0x78>  // b.any
		/* Configure SGIs/PPIs as secure Group-1 */
		writel_relaxed(0x0, GICR_SGI_IGROUPR0);
    610014d4:	d2801001 	mov	x1, #0x80                  	// #128
    610014d8:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    610014dc:	52800000 	mov	w0, #0x0                   	// #0
    610014e0:	97fffe15 	bl	61000d34 <__raw_writel>
		writel_relaxed(0xffffffff,  GICR_SGI_IGRPMOD0);
    610014e4:	d281a001 	mov	x1, #0xd00                 	// #3328
    610014e8:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    610014ec:	12800000 	mov	w0, #0xffffffff            	// #-1
    610014f0:	97fffe11 	bl	61000d34 <__raw_writel>

	/*
	 * Deal with the banked PPI and SGI interrupts - disable all
	 * private interrupts. Make sure everything is deactivated.
	 */
	writel_relaxed(GICD_INT_EN_CLR_X32, GICR_SGI_ACTIVE_CLEAR);
    610014f4:	d2807001 	mov	x1, #0x380                 	// #896
    610014f8:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    610014fc:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001500:	97fffe0d 	bl	61000d34 <__raw_writel>
	writel_relaxed(GICD_INT_EN_CLR_X32, GICR_SGI_ENABLE_CLEAR);
    61001504:	d2803001 	mov	x1, #0x180                 	// #384
    61001508:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    6100150c:	12800000 	mov	w0, #0xffffffff            	// #-1
    61001510:	97fffe09 	bl	61000d34 <__raw_writel>

	/*
	 * Set priority on PPI and SGI interrupts
	 */
	for (i = 0; i < 8; i += 1)
    61001514:	b9002fff 	str	wzr, [sp, #44]
    61001518:	1400000e 	b	61001550 <gicv3_redist_init+0xd4>
		writel_relaxed(GICD_INT_DEF_PRI_X4, GICR_SGI_PRI + i * 4);
    6100151c:	b9402fe0 	ldr	w0, [sp, #44]
    61001520:	531e7400 	lsl	w0, w0, #2
    61001524:	2a0003e1 	mov	w1, w0
    61001528:	d2808000 	mov	x0, #0x400                 	// #1024
    6100152c:	f2bba0a0 	movk	x0, #0xdd05, lsl #16
    61001530:	8b000020 	add	x0, x1, x0
    61001534:	aa0003e1 	mov	x1, x0
    61001538:	52941400 	mov	w0, #0xa0a0                	// #41120
    6100153c:	72b41400 	movk	w0, #0xa0a0, lsl #16
    61001540:	97fffdfd 	bl	61000d34 <__raw_writel>
	for (i = 0; i < 8; i += 1)
    61001544:	b9402fe0 	ldr	w0, [sp, #44]
    61001548:	11000400 	add	w0, w0, #0x1
    6100154c:	b9002fe0 	str	w0, [sp, #44]
    61001550:	b9402fe0 	ldr	w0, [sp, #44]
    61001554:	71001c1f 	cmp	w0, #0x7
    61001558:	54fffe29 	b.ls	6100151c <gicv3_redist_init+0xa0>  // b.plast

	/* SGI: edge-triggered */
	writel_relaxed(GICR_SGI_EDGE_TRIG, GICR_SGI_ICFGR0);
    6100155c:	d2818001 	mov	x1, #0xc00                 	// #3072
    61001560:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001564:	3201f3e0 	mov	w0, #0xaaaaaaaa            	// #-1431655766
    61001568:	97fffdf3 	bl	61000d34 <__raw_writel>
	/* PPI: level-triggered */
	writel_relaxed(GICR_SGI_LEVEL_TRIG, GICR_SGI_ICFGR1);
    6100156c:	d2818081 	mov	x1, #0xc04                 	// #3076
    61001570:	f2bba0a1 	movk	x1, #0xdd05, lsl #16
    61001574:	52800000 	mov	w0, #0x0                   	// #0
    61001578:	97fffdef 	bl	61000d34 <__raw_writel>

	gic_redist_wait();
    6100157c:	97fffe9b 	bl	61000fe8 <gic_redist_wait>
}
    61001580:	d503201f 	nop
    61001584:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61001588:	d65f03c0 	ret

Disassembly of section .text.gic_enable_sre:

000000006100158c <gic_enable_sre>:


static bool gic_enable_sre(void)
{
    6100158c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61001590:	910003fd 	mov	x29, sp
	u32 val;
	val = gic_read_sre();
    61001594:	97fffe40 	bl	61000e94 <gic_read_sre>
    61001598:	b9001fe0 	str	w0, [sp, #28]
	if (val & ICC_SRE_EL1_SRE)
    6100159c:	b9401fe0 	ldr	w0, [sp, #28]
    610015a0:	12000000 	and	w0, w0, #0x1
    610015a4:	7100001f 	cmp	w0, #0x0
    610015a8:	54000060 	b.eq	610015b4 <gic_enable_sre+0x28>  // b.none
		return true;
    610015ac:	52800020 	mov	w0, #0x1                   	// #1
    610015b0:	1400000d 	b	610015e4 <gic_enable_sre+0x58>

	val |= ICC_SRE_EL1_SRE;
    610015b4:	b9401fe0 	ldr	w0, [sp, #28]
    610015b8:	32000000 	orr	w0, w0, #0x1
    610015bc:	b9001fe0 	str	w0, [sp, #28]
	gic_write_sre(val);
    610015c0:	b9401fe0 	ldr	w0, [sp, #28]
    610015c4:	97fffe3a 	bl	61000eac <gic_write_sre>
	val = gic_read_sre();
    610015c8:	97fffe33 	bl	61000e94 <gic_read_sre>
    610015cc:	b9001fe0 	str	w0, [sp, #28]

	return !!(val & ICC_SRE_EL1_SRE);
    610015d0:	b9401fe0 	ldr	w0, [sp, #28]
    610015d4:	12000000 	and	w0, w0, #0x1
    610015d8:	7100001f 	cmp	w0, #0x0
    610015dc:	1a9f07e0 	cset	w0, ne  // ne = any
    610015e0:	12001c00 	and	w0, w0, #0xff
}
    610015e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    610015e8:	d65f03c0 	ret

Disassembly of section .text.gicv3_cpu_sysregs_init:

00000000610015ec <gicv3_cpu_sysregs_init>:

	return pribits;
}

static void gicv3_cpu_sysregs_init(void)
{
    610015ec:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    610015f0:	910003fd 	mov	x29, sp
	/* no nmi */
	write_gicreg(0, ICC_AP1R1_EL1);
    610015f4:	f9000fff 	str	xzr, [sp, #24]
    610015f8:	f9400fe0 	ldr	x0, [sp, #24]
    610015fc:	d518c920 	msr	s3_0_c12_c9_1, x0
	/* Set priority mask register */
	write_gicreg(DEFAULT_PMR_VALUE, ICC_PMR_EL1);
    61001600:	d2801e00 	mov	x0, #0xf0                  	// #240
    61001604:	f9000be0 	str	x0, [sp, #16]
    61001608:	f9400be0 	ldr	x0, [sp, #16]
    6100160c:	d5184600 	msr	s3_0_c4_c6_0, x0

	gic_write_bpr1(0);
    61001610:	52800000 	mov	w0, #0x0                   	// #0
    61001614:	97fffe30 	bl	61000ed4 <gic_write_bpr1>
	/* eoi mode */
	gic_write_ctlr(ICC_CTLR_EL1_EOImode_drop_dir);
    61001618:	52800000 	mov	w0, #0x0                   	// #0
    6100161c:	97fffe0a 	bl	61000e44 <gic_write_ctlr>

	isb();
    61001620:	d5033fdf 	isb
	/* enable group1 */
	gic_write_grpen1(1);
    61001624:	52800020 	mov	w0, #0x1                   	// #1
    61001628:	97fffe11 	bl	61000e6c <gic_write_grpen1>

}
    6100162c:	d503201f 	nop
    61001630:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61001634:	d65f03c0 	ret

Disassembly of section .text.gicv3_cpu_memory_map_init:

0000000061001638 <gicv3_cpu_memory_map_init>:

static void gicv3_cpu_memory_map_init(void)
{
    61001638:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    6100163c:	910003fd 	mov	x29, sp
	/* Set priority mask register */
	writel_relaxed(DEFAULT_PMR_VALUE, GICC_PMR);
    61001640:	d2800081 	mov	x1, #0x4                   	// #4
    61001644:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    61001648:	52801e00 	mov	w0, #0xf0                  	// #240
    6100164c:	97fffdba 	bl	61000d34 <__raw_writel>

	writel_relaxed(0x0, GICC_BPR);
    61001650:	d2800101 	mov	x1, #0x8                   	// #8
    61001654:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    61001658:	52800000 	mov	w0, #0x0                   	// #0
    6100165c:	97fffdb6 	bl	61000d34 <__raw_writel>
	/* enable group1, eoimode0 */
	writel_relaxed((1<0) | (1<1) | (0<9), GICC_CTRL);
    61001660:	d2bf1801 	mov	x1, #0xf8c00000            	// #4173332480
    61001664:	52800020 	mov	w0, #0x1                   	// #1
    61001668:	97fffdb3 	bl	61000d34 <__raw_writel>

}
    6100166c:	d503201f 	nop
    61001670:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61001674:	d65f03c0 	ret

Disassembly of section .text.gicv3_cpu_init:

0000000061001678 <gicv3_cpu_init>:
static void gicv3_cpu_init(void)
{
    61001678:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    6100167c:	910003fd 	mov	x29, sp
	int i;
	u32 pribits;

	/* enable sre */
	if (!gic_enable_sre()) {
    61001680:	97ffffc3 	bl	6100158c <gic_enable_sre>
    61001684:	12001c00 	and	w0, w0, #0xff
    61001688:	52000000 	eor	w0, w0, #0x1
    6100168c:	12001c00 	and	w0, w0, #0xff
    61001690:	7100001f 	cmp	w0, #0x0
    61001694:	54000060 	b.eq	610016a0 <gicv3_cpu_init+0x28>  // b.none
		gic_print("GIC: unable to init gic cpu interface by setting system register.\n");
		gic_print("try to init gic cpu interface using memory-mapped register.\n");
		gicv3_cpu_memory_map_init();
    61001698:	97ffffe8 	bl	61001638 <gicv3_cpu_memory_map_init>
		gic_print("init gic cpu interface using system register.\n");
		gicv3_cpu_sysregs_init();
	}


}
    6100169c:	14000002 	b	610016a4 <gicv3_cpu_init+0x2c>
		gicv3_cpu_sysregs_init();
    610016a0:	97ffffd3 	bl	610015ec <gicv3_cpu_sysregs_init>
}
    610016a4:	d503201f 	nop
    610016a8:	a8c17bfd 	ldp	x29, x30, [sp], #16
    610016ac:	d65f03c0 	ret

Disassembly of section .text.gicv3_init:

00000000610016b0 <gicv3_init>:
void gicv3_init(void)
{
    610016b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    610016b4:	910003fd 	mov	x29, sp
    gicv3_dist_init(1);
    610016b8:	52800020 	mov	w0, #0x1                   	// #1
    610016bc:	97fffe5c 	bl	6100102c <gicv3_dist_init>
    gicv3_redist_init(1);
    610016c0:	52800020 	mov	w0, #0x1                   	// #1
    610016c4:	97ffff6e 	bl	6100147c <gicv3_redist_init>
    gicv3_cpu_init();
    610016c8:	97ffffec 	bl	61001678 <gicv3_cpu_init>

    gic_print("gicv3          : enabled.\n");
}
    610016cc:	d503201f 	nop
    610016d0:	a8c17bfd 	ldp	x29, x30, [sp], #16
    610016d4:	d65f03c0 	ret

Disassembly of section .text.do_irq_handle:

00000000610016d8 <do_irq_handle>:
/**
 * @desc  : irq handle implement
 * @flow  : read irq number -> deal with this irq event -> 	write eoi
 */
void do_irq_handle(void)
{
    610016d8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    610016dc:	910003fd 	mov	x29, sp
	u32	int_id;

	/* enable sre */
	if (!gic_enable_sre()) {
    610016e0:	97ffffab 	bl	6100158c <gic_enable_sre>
    610016e4:	12001c00 	and	w0, w0, #0xff
    610016e8:	52000000 	eor	w0, w0, #0x1
    610016ec:	12001c00 	and	w0, w0, #0xff
    610016f0:	7100001f 	cmp	w0, #0x0
    610016f4:	54000120 	b.eq	61001718 <do_irq_handle+0x40>  // b.none
		/* interrupr acknowledge by read gicc_iar*/
		int_id = readl_relaxed(GICC_IAR) & 0xffffff;
    610016f8:	d2800180 	mov	x0, #0xc                   	// #12
    610016fc:	f2bf1800 	movk	x0, #0xf8c0, lsl #16
    61001700:	97fffe07 	bl	61000f1c <__raw_readl>
    61001704:	b9001be0 	str	w0, [sp, #24]
    61001708:	b9401be0 	ldr	w0, [sp, #24]
    6100170c:	12005c00 	and	w0, w0, #0xffffff
    61001710:	b9001fe0 	str	w0, [sp, #28]
    61001714:	14000004 	b	61001724 <do_irq_handle+0x4c>
	} else {
		/* interrupr acknowledge by read iar*/
		int_id = gic_read_iar_common() & 0xffffff;
    61001718:	97fffdc2 	bl	61000e20 <gic_read_iar_common>
    6100171c:	12005c00 	and	w0, w0, #0xffffff
    61001720:	b9001fe0 	str	w0, [sp, #28]
	}

	/* run irq handler function */
	gic_print("%s: interrupt id: %d\n", __func__, int_id);
	void (*p_func)();
	p_func = irq_handler[int_id];
    61001724:	f0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61001728:	911b6000 	add	x0, x0, #0x6d8
    6100172c:	b9401fe1 	ldr	w1, [sp, #28]
    61001730:	f8617800 	ldr	x0, [x0, x1, lsl #3]
    61001734:	f9000be0 	str	x0, [sp, #16]
	if (!p_func) {
    61001738:	f9400be0 	ldr	x0, [sp, #16]
    6100173c:	f100001f 	cmp	x0, #0x0
    61001740:	54000060 	b.eq	6100174c <do_irq_handle+0x74>  // b.none
		gic_print("can not found your irq event handle at irq number: %d\n",int_id);
	} else {
		p_func();
    61001744:	f9400be0 	ldr	x0, [sp, #16]
    61001748:	d63f0000 	blr	x0
	}
	/* write end of interrupt to deactivate the interrupt */

	if (!gic_enable_sre()) {
    6100174c:	97ffff90 	bl	6100158c <gic_enable_sre>
    61001750:	12001c00 	and	w0, w0, #0xff
    61001754:	52000000 	eor	w0, w0, #0x1
    61001758:	12001c00 	and	w0, w0, #0xff
    6100175c:	7100001f 	cmp	w0, #0x0
    61001760:	540000c0 	b.eq	61001778 <do_irq_handle+0xa0>  // b.none
		writel_relaxed(int_id, GICC_EOIR);
    61001764:	d2800201 	mov	x1, #0x10                  	// #16
    61001768:	f2bf1801 	movk	x1, #0xf8c0, lsl #16
    6100176c:	b9401fe0 	ldr	w0, [sp, #28]
    61001770:	97fffd71 	bl	61000d34 <__raw_writel>
	} else {
		gic_write_eoir(int_id);
	}
}
    61001774:	14000003 	b	61001780 <do_irq_handle+0xa8>
		gic_write_eoir(int_id);
    61001778:	b9401fe0 	ldr	w0, [sp, #28]
    6100177c:	97fffd9f 	bl	61000df8 <gic_write_eoir>
}
    61001780:	d503201f 	nop
    61001784:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61001788:	d65f03c0 	ret

Disassembly of section .text.__assert:

000000006100178c <__assert>:
#include <cdefs.h>
#include <stdio.h>

 __attribute__((weak)) void __dead2 __assert(const char *file, unsigned int line,
		      const char *assertion)
{
    6100178c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61001790:	910003fd 	mov	x29, sp
    61001794:	f90017e0 	str	x0, [sp, #40]
    61001798:	b90027e1 	str	w1, [sp, #36]
    6100179c:	f9000fe2 	str	x2, [sp, #24]
	printf("ASSERT: %s:%d:%s\n", file, line, assertion);
    610017a0:	f9400fe3 	ldr	x3, [sp, #24]
    610017a4:	b94027e2 	ldr	w2, [sp, #36]
    610017a8:	f94017e1 	ldr	x1, [sp, #40]
    610017ac:	f0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610017b0:	91102000 	add	x0, x0, #0x408
    610017b4:	94000287 	bl	610021d0 <printf>
	while (1)
    610017b8:	14000000 	b	610017b8 <__assert+0x2c>

Disassembly of section .text.memset:

00000000610017bc <memset>:
#include <stddef.h>
#include <string.h>
#include <stdint.h>

void *memset(void *dst, int val, size_t count)
{
    610017bc:	d10103ff 	sub	sp, sp, #0x40
    610017c0:	f9000fe0 	str	x0, [sp, #24]
    610017c4:	b90017e1 	str	w1, [sp, #20]
    610017c8:	f90007e2 	str	x2, [sp, #8]
	uint8_t *ptr = dst;
    610017cc:	f9400fe0 	ldr	x0, [sp, #24]
    610017d0:	f9001fe0 	str	x0, [sp, #56]
	uint64_t *ptr64;
	uint64_t fill = (unsigned char)val;
    610017d4:	b94017e0 	ldr	w0, [sp, #20]
    610017d8:	12001c00 	and	w0, w0, #0xff
    610017dc:	92401c00 	and	x0, x0, #0xff
    610017e0:	f90017e0 	str	x0, [sp, #40]

	/* Simplify code below by making sure we write at least one byte. */
	if (count == 0U) {
    610017e4:	f94007e0 	ldr	x0, [sp, #8]
    610017e8:	f100001f 	cmp	x0, #0x0
    610017ec:	54000241 	b.ne	61001834 <memset+0x78>  // b.any
		return dst;
    610017f0:	f9400fe0 	ldr	x0, [sp, #24]
    610017f4:	14000042 	b	610018fc <memset+0x140>
	}

	/* Handle the first part, until the pointer becomes 64-bit aligned. */
	while (((uintptr_t)ptr & 7U) != 0U) {
		*ptr = (uint8_t)val;
    610017f8:	b94017e0 	ldr	w0, [sp, #20]
    610017fc:	12001c01 	and	w1, w0, #0xff
    61001800:	f9401fe0 	ldr	x0, [sp, #56]
    61001804:	39000001 	strb	w1, [x0]
		ptr++;
    61001808:	f9401fe0 	ldr	x0, [sp, #56]
    6100180c:	91000400 	add	x0, x0, #0x1
    61001810:	f9001fe0 	str	x0, [sp, #56]
		if (--count == 0U) {
    61001814:	f94007e0 	ldr	x0, [sp, #8]
    61001818:	d1000400 	sub	x0, x0, #0x1
    6100181c:	f90007e0 	str	x0, [sp, #8]
    61001820:	f94007e0 	ldr	x0, [sp, #8]
    61001824:	f100001f 	cmp	x0, #0x0
    61001828:	54000061 	b.ne	61001834 <memset+0x78>  // b.any
			return dst;
    6100182c:	f9400fe0 	ldr	x0, [sp, #24]
    61001830:	14000033 	b	610018fc <memset+0x140>
	while (((uintptr_t)ptr & 7U) != 0U) {
    61001834:	f9401fe0 	ldr	x0, [sp, #56]
    61001838:	92400800 	and	x0, x0, #0x7
    6100183c:	f100001f 	cmp	x0, #0x0
    61001840:	54fffdc1 	b.ne	610017f8 <memset+0x3c>  // b.any
		}
	}

	/* Duplicate the fill byte to the rest of the 64-bit word. */
	fill |= fill << 8;
    61001844:	f94017e0 	ldr	x0, [sp, #40]
    61001848:	d378dc00 	lsl	x0, x0, #8
    6100184c:	f94017e1 	ldr	x1, [sp, #40]
    61001850:	aa000020 	orr	x0, x1, x0
    61001854:	f90017e0 	str	x0, [sp, #40]
	fill |= fill << 16;
    61001858:	f94017e0 	ldr	x0, [sp, #40]
    6100185c:	d370bc00 	lsl	x0, x0, #16
    61001860:	f94017e1 	ldr	x1, [sp, #40]
    61001864:	aa000020 	orr	x0, x1, x0
    61001868:	f90017e0 	str	x0, [sp, #40]
	fill |= fill << 32;
    6100186c:	f94017e0 	ldr	x0, [sp, #40]
    61001870:	d3607c00 	lsl	x0, x0, #32
    61001874:	f94017e1 	ldr	x1, [sp, #40]
    61001878:	aa000020 	orr	x0, x1, x0
    6100187c:	f90017e0 	str	x0, [sp, #40]

	/* Use 64-bit writes for as long as possible. */
	ptr64 = (uint64_t *)ptr;
    61001880:	f9401fe0 	ldr	x0, [sp, #56]
    61001884:	f9001be0 	str	x0, [sp, #48]
	for (; count >= 8U; count -= 8) {
    61001888:	1400000a 	b	610018b0 <memset+0xf4>
		*ptr64 = fill;
    6100188c:	f9401be0 	ldr	x0, [sp, #48]
    61001890:	f94017e1 	ldr	x1, [sp, #40]
    61001894:	f9000001 	str	x1, [x0]
		ptr64++;
    61001898:	f9401be0 	ldr	x0, [sp, #48]
    6100189c:	91002000 	add	x0, x0, #0x8
    610018a0:	f9001be0 	str	x0, [sp, #48]
	for (; count >= 8U; count -= 8) {
    610018a4:	f94007e0 	ldr	x0, [sp, #8]
    610018a8:	d1002000 	sub	x0, x0, #0x8
    610018ac:	f90007e0 	str	x0, [sp, #8]
    610018b0:	f94007e0 	ldr	x0, [sp, #8]
    610018b4:	f1001c1f 	cmp	x0, #0x7
    610018b8:	54fffea8 	b.hi	6100188c <memset+0xd0>  // b.pmore
	}

	/* Handle the remaining part byte-per-byte. */
	ptr = (uint8_t *)ptr64;
    610018bc:	f9401be0 	ldr	x0, [sp, #48]
    610018c0:	f9001fe0 	str	x0, [sp, #56]
	while (count-- > 0U)  {
    610018c4:	14000008 	b	610018e4 <memset+0x128>
		*ptr = (uint8_t)val;
    610018c8:	b94017e0 	ldr	w0, [sp, #20]
    610018cc:	12001c01 	and	w1, w0, #0xff
    610018d0:	f9401fe0 	ldr	x0, [sp, #56]
    610018d4:	39000001 	strb	w1, [x0]
		ptr++;
    610018d8:	f9401fe0 	ldr	x0, [sp, #56]
    610018dc:	91000400 	add	x0, x0, #0x1
    610018e0:	f9001fe0 	str	x0, [sp, #56]
	while (count-- > 0U)  {
    610018e4:	f94007e0 	ldr	x0, [sp, #8]
    610018e8:	d1000401 	sub	x1, x0, #0x1
    610018ec:	f90007e1 	str	x1, [sp, #8]
    610018f0:	f100001f 	cmp	x0, #0x0
    610018f4:	54fffea1 	b.ne	610018c8 <memset+0x10c>  // b.any
	}

	return dst;
    610018f8:	f9400fe0 	ldr	x0, [sp, #24]
}
    610018fc:	910103ff 	add	sp, sp, #0x40
    61001900:	d65f03c0 	ret

Disassembly of section .text.string_print:

0000000061001904 <string_print>:
	(((_lcount) > 1)  ? va_arg(_args, unsigned long long int) :	\
	(((_lcount) == 1) ? va_arg(_args, unsigned long int) :		\
			    va_arg(_args, unsigned int)))

static int string_print(const char *str)
{
    61001904:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61001908:	910003fd 	mov	x29, sp
    6100190c:	f9000fe0 	str	x0, [sp, #24]
	int count = 0;
    61001910:	b9002fff 	str	wzr, [sp, #44]

	assert(str != NULL);
    61001914:	f9400fe0 	ldr	x0, [sp, #24]
    61001918:	f100001f 	cmp	x0, #0x0
    6100191c:	54000201 	b.ne	6100195c <string_print+0x58>  // b.any
    61001920:	f0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61001924:	91108002 	add	x2, x0, #0x420
    61001928:	528003c1 	mov	w1, #0x1e                  	// #30
    6100192c:	f0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61001930:	9110c000 	add	x0, x0, #0x430
    61001934:	97ffff96 	bl	6100178c <__assert>

	for ( ; *str != '\0'; str++) {
		(void)putchar(*str);
    61001938:	f9400fe0 	ldr	x0, [sp, #24]
    6100193c:	39400000 	ldrb	w0, [x0]
    61001940:	94000250 	bl	61002280 <putchar>
		count++;
    61001944:	b9402fe0 	ldr	w0, [sp, #44]
    61001948:	11000400 	add	w0, w0, #0x1
    6100194c:	b9002fe0 	str	w0, [sp, #44]
	for ( ; *str != '\0'; str++) {
    61001950:	f9400fe0 	ldr	x0, [sp, #24]
    61001954:	91000400 	add	x0, x0, #0x1
    61001958:	f9000fe0 	str	x0, [sp, #24]
    6100195c:	f9400fe0 	ldr	x0, [sp, #24]
    61001960:	39400000 	ldrb	w0, [x0]
    61001964:	7100001f 	cmp	w0, #0x0
    61001968:	54fffe81 	b.ne	61001938 <string_print+0x34>  // b.any
	}

	return count;
    6100196c:	b9402fe0 	ldr	w0, [sp, #44]
}
    61001970:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61001974:	d65f03c0 	ret

Disassembly of section .text.unsigned_num_print:

0000000061001978 <unsigned_num_print>:

static int unsigned_num_print(unsigned long long int unum, unsigned int radix,
			      char padc, int padn)
{
    61001978:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    6100197c:	910003fd 	mov	x29, sp
    61001980:	f90017e0 	str	x0, [sp, #40]
    61001984:	b90027e1 	str	w1, [sp, #36]
    61001988:	39008fe2 	strb	w2, [sp, #35]
    6100198c:	b9001fe3 	str	w3, [sp, #28]
	/* Just need enough space to store 64 bit decimal integer */
	char num_buf[20];
	int i = 0, count = 0;
    61001990:	b9004fff 	str	wzr, [sp, #76]
    61001994:	b9004bff 	str	wzr, [sp, #72]
	unsigned int rem;

	do {
		rem = unum % radix;
    61001998:	b94027e1 	ldr	w1, [sp, #36]
    6100199c:	f94017e0 	ldr	x0, [sp, #40]
    610019a0:	9ac10802 	udiv	x2, x0, x1
    610019a4:	9b017c41 	mul	x1, x2, x1
    610019a8:	cb010000 	sub	x0, x0, x1
    610019ac:	b90047e0 	str	w0, [sp, #68]
		if (rem < 0xa)
    610019b0:	b94047e0 	ldr	w0, [sp, #68]
    610019b4:	7100241f 	cmp	w0, #0x9
    610019b8:	54000128 	b.hi	610019dc <unsigned_num_print+0x64>  // b.pmore
			num_buf[i] = '0' + rem;
    610019bc:	b94047e0 	ldr	w0, [sp, #68]
    610019c0:	12001c00 	and	w0, w0, #0xff
    610019c4:	1100c000 	add	w0, w0, #0x30
    610019c8:	12001c02 	and	w2, w0, #0xff
    610019cc:	b9804fe0 	ldrsw	x0, [sp, #76]
    610019d0:	9100c3e1 	add	x1, sp, #0x30
    610019d4:	38206822 	strb	w2, [x1, x0]
    610019d8:	14000008 	b	610019f8 <unsigned_num_print+0x80>
		else
			num_buf[i] = 'a' + (rem - 0xa);
    610019dc:	b94047e0 	ldr	w0, [sp, #68]
    610019e0:	12001c00 	and	w0, w0, #0xff
    610019e4:	11015c00 	add	w0, w0, #0x57
    610019e8:	12001c02 	and	w2, w0, #0xff
    610019ec:	b9804fe0 	ldrsw	x0, [sp, #76]
    610019f0:	9100c3e1 	add	x1, sp, #0x30
    610019f4:	38206822 	strb	w2, [x1, x0]
		i++;
    610019f8:	b9404fe0 	ldr	w0, [sp, #76]
    610019fc:	11000400 	add	w0, w0, #0x1
    61001a00:	b9004fe0 	str	w0, [sp, #76]
		unum /= radix;
    61001a04:	b94027e0 	ldr	w0, [sp, #36]
    61001a08:	f94017e1 	ldr	x1, [sp, #40]
    61001a0c:	9ac00820 	udiv	x0, x1, x0
    61001a10:	f90017e0 	str	x0, [sp, #40]
	} while (unum > 0U);
    61001a14:	f94017e0 	ldr	x0, [sp, #40]
    61001a18:	f100001f 	cmp	x0, #0x0
    61001a1c:	54fffbe1 	b.ne	61001998 <unsigned_num_print+0x20>  // b.any

	if (padn > 0) {
    61001a20:	b9401fe0 	ldr	w0, [sp, #28]
    61001a24:	7100001f 	cmp	w0, #0x0
    61001a28:	540002cd 	b.le	61001a80 <unsigned_num_print+0x108>
		while (i < padn) {
    61001a2c:	14000009 	b	61001a50 <unsigned_num_print+0xd8>
			(void)putchar(padc);
    61001a30:	39408fe0 	ldrb	w0, [sp, #35]
    61001a34:	94000213 	bl	61002280 <putchar>
			count++;
    61001a38:	b9404be0 	ldr	w0, [sp, #72]
    61001a3c:	11000400 	add	w0, w0, #0x1
    61001a40:	b9004be0 	str	w0, [sp, #72]
			padn--;
    61001a44:	b9401fe0 	ldr	w0, [sp, #28]
    61001a48:	51000400 	sub	w0, w0, #0x1
    61001a4c:	b9001fe0 	str	w0, [sp, #28]
		while (i < padn) {
    61001a50:	b9404fe1 	ldr	w1, [sp, #76]
    61001a54:	b9401fe0 	ldr	w0, [sp, #28]
    61001a58:	6b00003f 	cmp	w1, w0
    61001a5c:	54fffeab 	b.lt	61001a30 <unsigned_num_print+0xb8>  // b.tstop
		}
	}

	while (--i >= 0) {
    61001a60:	14000008 	b	61001a80 <unsigned_num_print+0x108>
		(void)putchar(num_buf[i]);
    61001a64:	b9804fe0 	ldrsw	x0, [sp, #76]
    61001a68:	9100c3e1 	add	x1, sp, #0x30
    61001a6c:	38606820 	ldrb	w0, [x1, x0]
    61001a70:	94000204 	bl	61002280 <putchar>
		count++;
    61001a74:	b9404be0 	ldr	w0, [sp, #72]
    61001a78:	11000400 	add	w0, w0, #0x1
    61001a7c:	b9004be0 	str	w0, [sp, #72]
	while (--i >= 0) {
    61001a80:	b9404fe0 	ldr	w0, [sp, #76]
    61001a84:	51000400 	sub	w0, w0, #0x1
    61001a88:	b9004fe0 	str	w0, [sp, #76]
    61001a8c:	b9404fe0 	ldr	w0, [sp, #76]
    61001a90:	7100001f 	cmp	w0, #0x0
    61001a94:	54fffe8a 	b.ge	61001a64 <unsigned_num_print+0xec>  // b.tcont
	}

	return count;
    61001a98:	b9404be0 	ldr	w0, [sp, #72]
}
    61001a9c:	a8c57bfd 	ldp	x29, x30, [sp], #80
    61001aa0:	d65f03c0 	ret

Disassembly of section .text.vprintf:

0000000061001aa4 <vprintf>:
 *
 * The print exits on all other formats specifiers other than valid
 * combinations of the above specifiers.
 *******************************************************************/
int vprintf(const char *fmt, va_list args)
{
    61001aa4:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
    61001aa8:	910003fd 	mov	x29, sp
    61001aac:	f9000bf3 	str	x19, [sp, #16]
    61001ab0:	f90017e0 	str	x0, [sp, #40]
    61001ab4:	aa0103f3 	mov	x19, x1
	int l_count;
	long long int num;
	unsigned long long int unum;
	char *str;
	char padc = '\0'; /* Padding character */
    61001ab8:	39017fff 	strb	wzr, [sp, #95]
	int padn; /* Number of characters to pad */
	int count = 0; /* Number of printed characters */
    61001abc:	b90057ff 	str	wzr, [sp, #84]

	while (*fmt != '\0') {
    61001ac0:	140001bc 	b	610021b0 <vprintf+0x70c>
		l_count = 0;
    61001ac4:	b9006fff 	str	wzr, [sp, #108]
		padn = 0;
    61001ac8:	b9005bff 	str	wzr, [sp, #88]

		if (*fmt == '%') {
    61001acc:	f94017e0 	ldr	x0, [sp, #40]
    61001ad0:	39400000 	ldrb	w0, [x0]
    61001ad4:	7100941f 	cmp	w0, #0x25
    61001ad8:	540035a1 	b.ne	6100218c <vprintf+0x6e8>  // b.any
			fmt++;
    61001adc:	f94017e0 	ldr	x0, [sp, #40]
    61001ae0:	91000400 	add	x0, x0, #0x1
    61001ae4:	f90017e0 	str	x0, [sp, #40]
			/* Check the format specifier */
loop:
			switch (*fmt) {
    61001ae8:	f94017e0 	ldr	x0, [sp, #40]
    61001aec:	39400000 	ldrb	w0, [x0]
    61001af0:	7101e81f 	cmp	w0, #0x7a
    61001af4:	540024a0 	b.eq	61001f88 <vprintf+0x4e4>  // b.none
    61001af8:	7101e81f 	cmp	w0, #0x7a
    61001afc:	540033cc 	b.gt	61002174 <vprintf+0x6d0>
    61001b00:	7101e01f 	cmp	w0, #0x78
    61001b04:	540019c0 	b.eq	61001e3c <vprintf+0x398>  // b.none
    61001b08:	7101e01f 	cmp	w0, #0x78
    61001b0c:	5400334c 	b.gt	61002174 <vprintf+0x6d0>
    61001b10:	7101d41f 	cmp	w0, #0x75
    61001b14:	54002540 	b.eq	61001fbc <vprintf+0x518>  // b.none
    61001b18:	7101d41f 	cmp	w0, #0x75
    61001b1c:	540032cc 	b.gt	61002174 <vprintf+0x6d0>
    61001b20:	7101cc1f 	cmp	w0, #0x73
    61001b24:	54000f80 	b.eq	61001d14 <vprintf+0x270>  // b.none
    61001b28:	7101cc1f 	cmp	w0, #0x73
    61001b2c:	5400324c 	b.gt	61002174 <vprintf+0x6d0>
    61001b30:	7101c01f 	cmp	w0, #0x70
    61001b34:	540012a0 	b.eq	61001d88 <vprintf+0x2e4>  // b.none
    61001b38:	7101c01f 	cmp	w0, #0x70
    61001b3c:	540031cc 	b.gt	61002174 <vprintf+0x6d0>
    61001b40:	7101b01f 	cmp	w0, #0x6c
    61001b44:	540022e0 	b.eq	61001fa0 <vprintf+0x4fc>  // b.none
    61001b48:	7101b01f 	cmp	w0, #0x6c
    61001b4c:	5400314c 	b.gt	61002174 <vprintf+0x6d0>
    61001b50:	7101a41f 	cmp	w0, #0x69
    61001b54:	540001e0 	b.eq	61001b90 <vprintf+0xec>  // b.none
    61001b58:	7101a41f 	cmp	w0, #0x69
    61001b5c:	540030cc 	b.gt	61002174 <vprintf+0x6d0>
    61001b60:	7101901f 	cmp	w0, #0x64
    61001b64:	54000160 	b.eq	61001b90 <vprintf+0xec>  // b.none
    61001b68:	7101901f 	cmp	w0, #0x64
    61001b6c:	5400304c 	b.gt	61002174 <vprintf+0x6d0>
    61001b70:	7100941f 	cmp	w0, #0x25
    61001b74:	54000080 	b.eq	61001b84 <vprintf+0xe0>  // b.none
    61001b78:	7100c01f 	cmp	w0, #0x30
    61001b7c:	54002c60 	b.eq	61002108 <vprintf+0x664>  // b.none
    61001b80:	1400017d 	b	61002174 <vprintf+0x6d0>
			case '%':
				(void)putchar('%');
    61001b84:	528004a0 	mov	w0, #0x25                  	// #37
    61001b88:	940001be 	bl	61002280 <putchar>
				break;
    61001b8c:	1400017c 	b	6100217c <vprintf+0x6d8>
			case 'i': /* Fall through to next one */
			case 'd':
				num = get_num_va_args(args, l_count);
    61001b90:	b9406fe0 	ldr	w0, [sp, #108]
    61001b94:	7100041f 	cmp	w0, #0x1
    61001b98:	540002ed 	b.le	61001bf4 <vprintf+0x150>
    61001b9c:	b9401a61 	ldr	w1, [x19, #24]
    61001ba0:	f9400260 	ldr	x0, [x19]
    61001ba4:	7100003f 	cmp	w1, #0x0
    61001ba8:	540000ab 	b.lt	61001bbc <vprintf+0x118>  // b.tstop
    61001bac:	91003c01 	add	x1, x0, #0xf
    61001bb0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001bb4:	f9000261 	str	x1, [x19]
    61001bb8:	1400000d 	b	61001bec <vprintf+0x148>
    61001bbc:	11002022 	add	w2, w1, #0x8
    61001bc0:	b9001a62 	str	w2, [x19, #24]
    61001bc4:	b9401a62 	ldr	w2, [x19, #24]
    61001bc8:	7100005f 	cmp	w2, #0x0
    61001bcc:	540000ad 	b.le	61001be0 <vprintf+0x13c>
    61001bd0:	91003c01 	add	x1, x0, #0xf
    61001bd4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001bd8:	f9000261 	str	x1, [x19]
    61001bdc:	14000004 	b	61001bec <vprintf+0x148>
    61001be0:	f9400662 	ldr	x2, [x19, #8]
    61001be4:	93407c20 	sxtw	x0, w1
    61001be8:	8b000040 	add	x0, x2, x0
    61001bec:	f9400000 	ldr	x0, [x0]
    61001bf0:	14000030 	b	61001cb0 <vprintf+0x20c>
    61001bf4:	b9406fe0 	ldr	w0, [sp, #108]
    61001bf8:	7100041f 	cmp	w0, #0x1
    61001bfc:	540002e1 	b.ne	61001c58 <vprintf+0x1b4>  // b.any
    61001c00:	b9401a61 	ldr	w1, [x19, #24]
    61001c04:	f9400260 	ldr	x0, [x19]
    61001c08:	7100003f 	cmp	w1, #0x0
    61001c0c:	540000ab 	b.lt	61001c20 <vprintf+0x17c>  // b.tstop
    61001c10:	91003c01 	add	x1, x0, #0xf
    61001c14:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001c18:	f9000261 	str	x1, [x19]
    61001c1c:	1400000d 	b	61001c50 <vprintf+0x1ac>
    61001c20:	11002022 	add	w2, w1, #0x8
    61001c24:	b9001a62 	str	w2, [x19, #24]
    61001c28:	b9401a62 	ldr	w2, [x19, #24]
    61001c2c:	7100005f 	cmp	w2, #0x0
    61001c30:	540000ad 	b.le	61001c44 <vprintf+0x1a0>
    61001c34:	91003c01 	add	x1, x0, #0xf
    61001c38:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001c3c:	f9000261 	str	x1, [x19]
    61001c40:	14000004 	b	61001c50 <vprintf+0x1ac>
    61001c44:	f9400662 	ldr	x2, [x19, #8]
    61001c48:	93407c20 	sxtw	x0, w1
    61001c4c:	8b000040 	add	x0, x2, x0
    61001c50:	f9400000 	ldr	x0, [x0]
    61001c54:	14000017 	b	61001cb0 <vprintf+0x20c>
    61001c58:	b9401a61 	ldr	w1, [x19, #24]
    61001c5c:	f9400260 	ldr	x0, [x19]
    61001c60:	7100003f 	cmp	w1, #0x0
    61001c64:	540000ab 	b.lt	61001c78 <vprintf+0x1d4>  // b.tstop
    61001c68:	91002c01 	add	x1, x0, #0xb
    61001c6c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001c70:	f9000261 	str	x1, [x19]
    61001c74:	1400000d 	b	61001ca8 <vprintf+0x204>
    61001c78:	11002022 	add	w2, w1, #0x8
    61001c7c:	b9001a62 	str	w2, [x19, #24]
    61001c80:	b9401a62 	ldr	w2, [x19, #24]
    61001c84:	7100005f 	cmp	w2, #0x0
    61001c88:	540000ad 	b.le	61001c9c <vprintf+0x1f8>
    61001c8c:	91002c01 	add	x1, x0, #0xb
    61001c90:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001c94:	f9000261 	str	x1, [x19]
    61001c98:	14000004 	b	61001ca8 <vprintf+0x204>
    61001c9c:	f9400662 	ldr	x2, [x19, #8]
    61001ca0:	93407c20 	sxtw	x0, w1
    61001ca4:	8b000040 	add	x0, x2, x0
    61001ca8:	b9400000 	ldr	w0, [x0]
    61001cac:	93407c00 	sxtw	x0, w0
    61001cb0:	f90023e0 	str	x0, [sp, #64]
				if (num < 0) {
    61001cb4:	f94023e0 	ldr	x0, [sp, #64]
    61001cb8:	f100001f 	cmp	x0, #0x0
    61001cbc:	5400014a 	b.ge	61001ce4 <vprintf+0x240>  // b.tcont
					(void)putchar('-');
    61001cc0:	528005a0 	mov	w0, #0x2d                  	// #45
    61001cc4:	9400016f 	bl	61002280 <putchar>
					unum = (unsigned long long int)-num;
    61001cc8:	f94023e0 	ldr	x0, [sp, #64]
    61001ccc:	cb0003e0 	neg	x0, x0
    61001cd0:	f90033e0 	str	x0, [sp, #96]
					padn--;
    61001cd4:	b9405be0 	ldr	w0, [sp, #88]
    61001cd8:	51000400 	sub	w0, w0, #0x1
    61001cdc:	b9005be0 	str	w0, [sp, #88]
    61001ce0:	14000003 	b	61001cec <vprintf+0x248>
				} else
					unum = (unsigned long long int)num;
    61001ce4:	f94023e0 	ldr	x0, [sp, #64]
    61001ce8:	f90033e0 	str	x0, [sp, #96]

				count += unsigned_num_print(unum, 10,
    61001cec:	b9405be3 	ldr	w3, [sp, #88]
    61001cf0:	39417fe2 	ldrb	w2, [sp, #95]
    61001cf4:	52800141 	mov	w1, #0xa                   	// #10
    61001cf8:	f94033e0 	ldr	x0, [sp, #96]
    61001cfc:	97ffff1f 	bl	61001978 <unsigned_num_print>
    61001d00:	2a0003e1 	mov	w1, w0
    61001d04:	b94057e0 	ldr	w0, [sp, #84]
    61001d08:	0b010000 	add	w0, w0, w1
    61001d0c:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61001d10:	1400011b 	b	6100217c <vprintf+0x6d8>
			case 's':
				str = va_arg(args, char *);
    61001d14:	b9401a61 	ldr	w1, [x19, #24]
    61001d18:	f9400260 	ldr	x0, [x19]
    61001d1c:	7100003f 	cmp	w1, #0x0
    61001d20:	540000ab 	b.lt	61001d34 <vprintf+0x290>  // b.tstop
    61001d24:	91003c01 	add	x1, x0, #0xf
    61001d28:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001d2c:	f9000261 	str	x1, [x19]
    61001d30:	1400000d 	b	61001d64 <vprintf+0x2c0>
    61001d34:	11002022 	add	w2, w1, #0x8
    61001d38:	b9001a62 	str	w2, [x19, #24]
    61001d3c:	b9401a62 	ldr	w2, [x19, #24]
    61001d40:	7100005f 	cmp	w2, #0x0
    61001d44:	540000ad 	b.le	61001d58 <vprintf+0x2b4>
    61001d48:	91003c01 	add	x1, x0, #0xf
    61001d4c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001d50:	f9000261 	str	x1, [x19]
    61001d54:	14000004 	b	61001d64 <vprintf+0x2c0>
    61001d58:	f9400662 	ldr	x2, [x19, #8]
    61001d5c:	93407c20 	sxtw	x0, w1
    61001d60:	8b000040 	add	x0, x2, x0
    61001d64:	f9400000 	ldr	x0, [x0]
    61001d68:	f90027e0 	str	x0, [sp, #72]
				count += string_print(str);
    61001d6c:	f94027e0 	ldr	x0, [sp, #72]
    61001d70:	97fffee5 	bl	61001904 <string_print>
    61001d74:	2a0003e1 	mov	w1, w0
    61001d78:	b94057e0 	ldr	w0, [sp, #84]
    61001d7c:	0b010000 	add	w0, w0, w1
    61001d80:	b90057e0 	str	w0, [sp, #84]
				break;
    61001d84:	140000fe 	b	6100217c <vprintf+0x6d8>
			case 'p':
				unum = (uintptr_t)va_arg(args, void *);
    61001d88:	b9401a61 	ldr	w1, [x19, #24]
    61001d8c:	f9400260 	ldr	x0, [x19]
    61001d90:	7100003f 	cmp	w1, #0x0
    61001d94:	540000ab 	b.lt	61001da8 <vprintf+0x304>  // b.tstop
    61001d98:	91003c01 	add	x1, x0, #0xf
    61001d9c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001da0:	f9000261 	str	x1, [x19]
    61001da4:	1400000d 	b	61001dd8 <vprintf+0x334>
    61001da8:	11002022 	add	w2, w1, #0x8
    61001dac:	b9001a62 	str	w2, [x19, #24]
    61001db0:	b9401a62 	ldr	w2, [x19, #24]
    61001db4:	7100005f 	cmp	w2, #0x0
    61001db8:	540000ad 	b.le	61001dcc <vprintf+0x328>
    61001dbc:	91003c01 	add	x1, x0, #0xf
    61001dc0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001dc4:	f9000261 	str	x1, [x19]
    61001dc8:	14000004 	b	61001dd8 <vprintf+0x334>
    61001dcc:	f9400662 	ldr	x2, [x19, #8]
    61001dd0:	93407c20 	sxtw	x0, w1
    61001dd4:	8b000040 	add	x0, x2, x0
    61001dd8:	f9400000 	ldr	x0, [x0]
    61001ddc:	f90033e0 	str	x0, [sp, #96]
				if (unum > 0U) {
    61001de0:	f94033e0 	ldr	x0, [sp, #96]
    61001de4:	f100001f 	cmp	x0, #0x0
    61001de8:	54000160 	b.eq	61001e14 <vprintf+0x370>  // b.none
					count += string_print("0x");
    61001dec:	f0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61001df0:	91118000 	add	x0, x0, #0x460
    61001df4:	97fffec4 	bl	61001904 <string_print>
    61001df8:	2a0003e1 	mov	w1, w0
    61001dfc:	b94057e0 	ldr	w0, [sp, #84]
    61001e00:	0b010000 	add	w0, w0, w1
    61001e04:	b90057e0 	str	w0, [sp, #84]
					padn -= 2;
    61001e08:	b9405be0 	ldr	w0, [sp, #88]
    61001e0c:	51000800 	sub	w0, w0, #0x2
    61001e10:	b9005be0 	str	w0, [sp, #88]
				}

				count += unsigned_num_print(unum, 16,
    61001e14:	b9405be3 	ldr	w3, [sp, #88]
    61001e18:	39417fe2 	ldrb	w2, [sp, #95]
    61001e1c:	52800201 	mov	w1, #0x10                  	// #16
    61001e20:	f94033e0 	ldr	x0, [sp, #96]
    61001e24:	97fffed5 	bl	61001978 <unsigned_num_print>
    61001e28:	2a0003e1 	mov	w1, w0
    61001e2c:	b94057e0 	ldr	w0, [sp, #84]
    61001e30:	0b010000 	add	w0, w0, w1
    61001e34:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61001e38:	140000d1 	b	6100217c <vprintf+0x6d8>
			case 'x':
				unum = get_unum_va_args(args, l_count);
    61001e3c:	b9406fe0 	ldr	w0, [sp, #108]
    61001e40:	7100041f 	cmp	w0, #0x1
    61001e44:	540002ed 	b.le	61001ea0 <vprintf+0x3fc>
    61001e48:	b9401a61 	ldr	w1, [x19, #24]
    61001e4c:	f9400260 	ldr	x0, [x19]
    61001e50:	7100003f 	cmp	w1, #0x0
    61001e54:	540000ab 	b.lt	61001e68 <vprintf+0x3c4>  // b.tstop
    61001e58:	91003c01 	add	x1, x0, #0xf
    61001e5c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001e60:	f9000261 	str	x1, [x19]
    61001e64:	1400000d 	b	61001e98 <vprintf+0x3f4>
    61001e68:	11002022 	add	w2, w1, #0x8
    61001e6c:	b9001a62 	str	w2, [x19, #24]
    61001e70:	b9401a62 	ldr	w2, [x19, #24]
    61001e74:	7100005f 	cmp	w2, #0x0
    61001e78:	540000ad 	b.le	61001e8c <vprintf+0x3e8>
    61001e7c:	91003c01 	add	x1, x0, #0xf
    61001e80:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001e84:	f9000261 	str	x1, [x19]
    61001e88:	14000004 	b	61001e98 <vprintf+0x3f4>
    61001e8c:	f9400662 	ldr	x2, [x19, #8]
    61001e90:	93407c20 	sxtw	x0, w1
    61001e94:	8b000040 	add	x0, x2, x0
    61001e98:	f9400000 	ldr	x0, [x0]
    61001e9c:	14000030 	b	61001f5c <vprintf+0x4b8>
    61001ea0:	b9406fe0 	ldr	w0, [sp, #108]
    61001ea4:	7100041f 	cmp	w0, #0x1
    61001ea8:	540002e1 	b.ne	61001f04 <vprintf+0x460>  // b.any
    61001eac:	b9401a61 	ldr	w1, [x19, #24]
    61001eb0:	f9400260 	ldr	x0, [x19]
    61001eb4:	7100003f 	cmp	w1, #0x0
    61001eb8:	540000ab 	b.lt	61001ecc <vprintf+0x428>  // b.tstop
    61001ebc:	91003c01 	add	x1, x0, #0xf
    61001ec0:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001ec4:	f9000261 	str	x1, [x19]
    61001ec8:	1400000d 	b	61001efc <vprintf+0x458>
    61001ecc:	11002022 	add	w2, w1, #0x8
    61001ed0:	b9001a62 	str	w2, [x19, #24]
    61001ed4:	b9401a62 	ldr	w2, [x19, #24]
    61001ed8:	7100005f 	cmp	w2, #0x0
    61001edc:	540000ad 	b.le	61001ef0 <vprintf+0x44c>
    61001ee0:	91003c01 	add	x1, x0, #0xf
    61001ee4:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001ee8:	f9000261 	str	x1, [x19]
    61001eec:	14000004 	b	61001efc <vprintf+0x458>
    61001ef0:	f9400662 	ldr	x2, [x19, #8]
    61001ef4:	93407c20 	sxtw	x0, w1
    61001ef8:	8b000040 	add	x0, x2, x0
    61001efc:	f9400000 	ldr	x0, [x0]
    61001f00:	14000017 	b	61001f5c <vprintf+0x4b8>
    61001f04:	b9401a61 	ldr	w1, [x19, #24]
    61001f08:	f9400260 	ldr	x0, [x19]
    61001f0c:	7100003f 	cmp	w1, #0x0
    61001f10:	540000ab 	b.lt	61001f24 <vprintf+0x480>  // b.tstop
    61001f14:	91002c01 	add	x1, x0, #0xb
    61001f18:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001f1c:	f9000261 	str	x1, [x19]
    61001f20:	1400000d 	b	61001f54 <vprintf+0x4b0>
    61001f24:	11002022 	add	w2, w1, #0x8
    61001f28:	b9001a62 	str	w2, [x19, #24]
    61001f2c:	b9401a62 	ldr	w2, [x19, #24]
    61001f30:	7100005f 	cmp	w2, #0x0
    61001f34:	540000ad 	b.le	61001f48 <vprintf+0x4a4>
    61001f38:	91002c01 	add	x1, x0, #0xb
    61001f3c:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001f40:	f9000261 	str	x1, [x19]
    61001f44:	14000004 	b	61001f54 <vprintf+0x4b0>
    61001f48:	f9400662 	ldr	x2, [x19, #8]
    61001f4c:	93407c20 	sxtw	x0, w1
    61001f50:	8b000040 	add	x0, x2, x0
    61001f54:	b9400000 	ldr	w0, [x0]
    61001f58:	2a0003e0 	mov	w0, w0
    61001f5c:	f90033e0 	str	x0, [sp, #96]
				count += unsigned_num_print(unum, 16,
    61001f60:	b9405be3 	ldr	w3, [sp, #88]
    61001f64:	39417fe2 	ldrb	w2, [sp, #95]
    61001f68:	52800201 	mov	w1, #0x10                  	// #16
    61001f6c:	f94033e0 	ldr	x0, [sp, #96]
    61001f70:	97fffe82 	bl	61001978 <unsigned_num_print>
    61001f74:	2a0003e1 	mov	w1, w0
    61001f78:	b94057e0 	ldr	w0, [sp, #84]
    61001f7c:	0b010000 	add	w0, w0, w1
    61001f80:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61001f84:	1400007e 	b	6100217c <vprintf+0x6d8>
			case 'z':
				if (sizeof(size_t) == 8U)
					l_count = 2;
    61001f88:	52800040 	mov	w0, #0x2                   	// #2
    61001f8c:	b9006fe0 	str	w0, [sp, #108]

				fmt++;
    61001f90:	f94017e0 	ldr	x0, [sp, #40]
    61001f94:	91000400 	add	x0, x0, #0x1
    61001f98:	f90017e0 	str	x0, [sp, #40]
				goto loop;
    61001f9c:	17fffed3 	b	61001ae8 <vprintf+0x44>
			case 'l':
				l_count++;
    61001fa0:	b9406fe0 	ldr	w0, [sp, #108]
    61001fa4:	11000400 	add	w0, w0, #0x1
    61001fa8:	b9006fe0 	str	w0, [sp, #108]
				fmt++;
    61001fac:	f94017e0 	ldr	x0, [sp, #40]
    61001fb0:	91000400 	add	x0, x0, #0x1
    61001fb4:	f90017e0 	str	x0, [sp, #40]
				goto loop;
    61001fb8:	17fffecc 	b	61001ae8 <vprintf+0x44>
			case 'u':
				unum = get_unum_va_args(args, l_count);
    61001fbc:	b9406fe0 	ldr	w0, [sp, #108]
    61001fc0:	7100041f 	cmp	w0, #0x1
    61001fc4:	540002ed 	b.le	61002020 <vprintf+0x57c>
    61001fc8:	b9401a61 	ldr	w1, [x19, #24]
    61001fcc:	f9400260 	ldr	x0, [x19]
    61001fd0:	7100003f 	cmp	w1, #0x0
    61001fd4:	540000ab 	b.lt	61001fe8 <vprintf+0x544>  // b.tstop
    61001fd8:	91003c01 	add	x1, x0, #0xf
    61001fdc:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61001fe0:	f9000261 	str	x1, [x19]
    61001fe4:	1400000d 	b	61002018 <vprintf+0x574>
    61001fe8:	11002022 	add	w2, w1, #0x8
    61001fec:	b9001a62 	str	w2, [x19, #24]
    61001ff0:	b9401a62 	ldr	w2, [x19, #24]
    61001ff4:	7100005f 	cmp	w2, #0x0
    61001ff8:	540000ad 	b.le	6100200c <vprintf+0x568>
    61001ffc:	91003c01 	add	x1, x0, #0xf
    61002000:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002004:	f9000261 	str	x1, [x19]
    61002008:	14000004 	b	61002018 <vprintf+0x574>
    6100200c:	f9400662 	ldr	x2, [x19, #8]
    61002010:	93407c20 	sxtw	x0, w1
    61002014:	8b000040 	add	x0, x2, x0
    61002018:	f9400000 	ldr	x0, [x0]
    6100201c:	14000030 	b	610020dc <vprintf+0x638>
    61002020:	b9406fe0 	ldr	w0, [sp, #108]
    61002024:	7100041f 	cmp	w0, #0x1
    61002028:	540002e1 	b.ne	61002084 <vprintf+0x5e0>  // b.any
    6100202c:	b9401a61 	ldr	w1, [x19, #24]
    61002030:	f9400260 	ldr	x0, [x19]
    61002034:	7100003f 	cmp	w1, #0x0
    61002038:	540000ab 	b.lt	6100204c <vprintf+0x5a8>  // b.tstop
    6100203c:	91003c01 	add	x1, x0, #0xf
    61002040:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002044:	f9000261 	str	x1, [x19]
    61002048:	1400000d 	b	6100207c <vprintf+0x5d8>
    6100204c:	11002022 	add	w2, w1, #0x8
    61002050:	b9001a62 	str	w2, [x19, #24]
    61002054:	b9401a62 	ldr	w2, [x19, #24]
    61002058:	7100005f 	cmp	w2, #0x0
    6100205c:	540000ad 	b.le	61002070 <vprintf+0x5cc>
    61002060:	91003c01 	add	x1, x0, #0xf
    61002064:	927df021 	and	x1, x1, #0xfffffffffffffff8
    61002068:	f9000261 	str	x1, [x19]
    6100206c:	14000004 	b	6100207c <vprintf+0x5d8>
    61002070:	f9400662 	ldr	x2, [x19, #8]
    61002074:	93407c20 	sxtw	x0, w1
    61002078:	8b000040 	add	x0, x2, x0
    6100207c:	f9400000 	ldr	x0, [x0]
    61002080:	14000017 	b	610020dc <vprintf+0x638>
    61002084:	b9401a61 	ldr	w1, [x19, #24]
    61002088:	f9400260 	ldr	x0, [x19]
    6100208c:	7100003f 	cmp	w1, #0x0
    61002090:	540000ab 	b.lt	610020a4 <vprintf+0x600>  // b.tstop
    61002094:	91002c01 	add	x1, x0, #0xb
    61002098:	927df021 	and	x1, x1, #0xfffffffffffffff8
    6100209c:	f9000261 	str	x1, [x19]
    610020a0:	1400000d 	b	610020d4 <vprintf+0x630>
    610020a4:	11002022 	add	w2, w1, #0x8
    610020a8:	b9001a62 	str	w2, [x19, #24]
    610020ac:	b9401a62 	ldr	w2, [x19, #24]
    610020b0:	7100005f 	cmp	w2, #0x0
    610020b4:	540000ad 	b.le	610020c8 <vprintf+0x624>
    610020b8:	91002c01 	add	x1, x0, #0xb
    610020bc:	927df021 	and	x1, x1, #0xfffffffffffffff8
    610020c0:	f9000261 	str	x1, [x19]
    610020c4:	14000004 	b	610020d4 <vprintf+0x630>
    610020c8:	f9400662 	ldr	x2, [x19, #8]
    610020cc:	93407c20 	sxtw	x0, w1
    610020d0:	8b000040 	add	x0, x2, x0
    610020d4:	b9400000 	ldr	w0, [x0]
    610020d8:	2a0003e0 	mov	w0, w0
    610020dc:	f90033e0 	str	x0, [sp, #96]
				count += unsigned_num_print(unum, 10,
    610020e0:	b9405be3 	ldr	w3, [sp, #88]
    610020e4:	39417fe2 	ldrb	w2, [sp, #95]
    610020e8:	52800141 	mov	w1, #0xa                   	// #10
    610020ec:	f94033e0 	ldr	x0, [sp, #96]
    610020f0:	97fffe22 	bl	61001978 <unsigned_num_print>
    610020f4:	2a0003e1 	mov	w1, w0
    610020f8:	b94057e0 	ldr	w0, [sp, #84]
    610020fc:	0b010000 	add	w0, w0, w1
    61002100:	b90057e0 	str	w0, [sp, #84]
							    padc, padn);
				break;
    61002104:	1400001e 	b	6100217c <vprintf+0x6d8>
			case '0':
				padc = '0';
    61002108:	52800600 	mov	w0, #0x30                  	// #48
    6100210c:	39017fe0 	strb	w0, [sp, #95]
				padn = 0;
    61002110:	b9005bff 	str	wzr, [sp, #88]
				fmt++;
    61002114:	f94017e0 	ldr	x0, [sp, #40]
    61002118:	91000400 	add	x0, x0, #0x1
    6100211c:	f90017e0 	str	x0, [sp, #40]

				for (;;) {
					char ch = *fmt;
    61002120:	f94017e0 	ldr	x0, [sp, #40]
    61002124:	39400000 	ldrb	w0, [x0]
    61002128:	3900ffe0 	strb	w0, [sp, #63]
					if ((ch < '0') || (ch > '9')) {
    6100212c:	3940ffe0 	ldrb	w0, [sp, #63]
    61002130:	7100bc1f 	cmp	w0, #0x2f
    61002134:	54ffcda9 	b.ls	61001ae8 <vprintf+0x44>  // b.plast
    61002138:	3940ffe0 	ldrb	w0, [sp, #63]
    6100213c:	7100e41f 	cmp	w0, #0x39
    61002140:	54000049 	b.ls	61002148 <vprintf+0x6a4>  // b.plast
						goto loop;
    61002144:	17fffe69 	b	61001ae8 <vprintf+0x44>
					}
					padn = (padn * 10) + (ch - '0');
    61002148:	b9405be1 	ldr	w1, [sp, #88]
    6100214c:	52800140 	mov	w0, #0xa                   	// #10
    61002150:	1b007c21 	mul	w1, w1, w0
    61002154:	3940ffe0 	ldrb	w0, [sp, #63]
    61002158:	5100c000 	sub	w0, w0, #0x30
    6100215c:	0b000020 	add	w0, w1, w0
    61002160:	b9005be0 	str	w0, [sp, #88]
					fmt++;
    61002164:	f94017e0 	ldr	x0, [sp, #40]
    61002168:	91000400 	add	x0, x0, #0x1
    6100216c:	f90017e0 	str	x0, [sp, #40]
				for (;;) {
    61002170:	17ffffec 	b	61002120 <vprintf+0x67c>
				}
				assert(0); /* Unreachable */
			default:
				/* Exit on any other format specifier */
				return -1;
    61002174:	12800000 	mov	w0, #0xffffffff            	// #-1
    61002178:	14000013 	b	610021c4 <vprintf+0x720>
			}
			fmt++;
    6100217c:	f94017e0 	ldr	x0, [sp, #40]
    61002180:	91000400 	add	x0, x0, #0x1
    61002184:	f90017e0 	str	x0, [sp, #40]
			continue;
    61002188:	1400000a 	b	610021b0 <vprintf+0x70c>
		}
		(void)putchar(*fmt);
    6100218c:	f94017e0 	ldr	x0, [sp, #40]
    61002190:	39400000 	ldrb	w0, [x0]
    61002194:	9400003b 	bl	61002280 <putchar>
		fmt++;
    61002198:	f94017e0 	ldr	x0, [sp, #40]
    6100219c:	91000400 	add	x0, x0, #0x1
    610021a0:	f90017e0 	str	x0, [sp, #40]
		count++;
    610021a4:	b94057e0 	ldr	w0, [sp, #84]
    610021a8:	11000400 	add	w0, w0, #0x1
    610021ac:	b90057e0 	str	w0, [sp, #84]
	while (*fmt != '\0') {
    610021b0:	f94017e0 	ldr	x0, [sp, #40]
    610021b4:	39400000 	ldrb	w0, [x0]
    610021b8:	7100001f 	cmp	w0, #0x0
    610021bc:	54ffc841 	b.ne	61001ac4 <vprintf+0x20>  // b.any
	}

	return count;
    610021c0:	b94057e0 	ldr	w0, [sp, #84]
}
    610021c4:	f9400bf3 	ldr	x19, [sp, #16]
    610021c8:	a8c77bfd 	ldp	x29, x30, [sp], #112
    610021cc:	d65f03c0 	ret

Disassembly of section .text.printf:

00000000610021d0 <printf>:

int printf(const char *fmt, ...)
{
    610021d0:	a9ad7bfd 	stp	x29, x30, [sp, #-304]!
    610021d4:	910003fd 	mov	x29, sp
    610021d8:	f9001fe0 	str	x0, [sp, #56]
    610021dc:	f9007fe1 	str	x1, [sp, #248]
    610021e0:	f90083e2 	str	x2, [sp, #256]
    610021e4:	f90087e3 	str	x3, [sp, #264]
    610021e8:	f9008be4 	str	x4, [sp, #272]
    610021ec:	f9008fe5 	str	x5, [sp, #280]
    610021f0:	f90093e6 	str	x6, [sp, #288]
    610021f4:	f90097e7 	str	x7, [sp, #296]
    610021f8:	3d801fe0 	str	q0, [sp, #112]
    610021fc:	3d8023e1 	str	q1, [sp, #128]
    61002200:	3d8027e2 	str	q2, [sp, #144]
    61002204:	3d802be3 	str	q3, [sp, #160]
    61002208:	3d802fe4 	str	q4, [sp, #176]
    6100220c:	3d8033e5 	str	q5, [sp, #192]
    61002210:	3d8037e6 	str	q6, [sp, #208]
    61002214:	3d803be7 	str	q7, [sp, #224]
	int count;
	va_list va;

	va_start(va, fmt);
    61002218:	9104c3e0 	add	x0, sp, #0x130
    6100221c:	f90027e0 	str	x0, [sp, #72]
    61002220:	9104c3e0 	add	x0, sp, #0x130
    61002224:	f9002be0 	str	x0, [sp, #80]
    61002228:	9103c3e0 	add	x0, sp, #0xf0
    6100222c:	f9002fe0 	str	x0, [sp, #88]
    61002230:	128006e0 	mov	w0, #0xffffffc8            	// #-56
    61002234:	b90063e0 	str	w0, [sp, #96]
    61002238:	12800fe0 	mov	w0, #0xffffff80            	// #-128
    6100223c:	b90067e0 	str	w0, [sp, #100]
	count = vprintf(fmt, va);
    61002240:	f94027e0 	ldr	x0, [sp, #72]
    61002244:	f9000be0 	str	x0, [sp, #16]
    61002248:	f9402be0 	ldr	x0, [sp, #80]
    6100224c:	f9000fe0 	str	x0, [sp, #24]
    61002250:	f9402fe0 	ldr	x0, [sp, #88]
    61002254:	f90013e0 	str	x0, [sp, #32]
    61002258:	f94033e0 	ldr	x0, [sp, #96]
    6100225c:	f90017e0 	str	x0, [sp, #40]
    61002260:	910043e0 	add	x0, sp, #0x10
    61002264:	aa0003e1 	mov	x1, x0
    61002268:	f9401fe0 	ldr	x0, [sp, #56]
    6100226c:	97fffe0e 	bl	61001aa4 <vprintf>
    61002270:	b9006fe0 	str	w0, [sp, #108]
	va_end(va);

	return count;
    61002274:	b9406fe0 	ldr	w0, [sp, #108]
}
    61002278:	a8d37bfd 	ldp	x29, x30, [sp], #304
    6100227c:	d65f03c0 	ret

Disassembly of section .text.putchar:

0000000061002280 <putchar>:

#include <stdio.h>
#include "nuclei_sdk_hal.h"

int putchar(int c)
{
    61002280:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002284:	910003fd 	mov	x29, sp
    61002288:	b9001fe0 	str	w0, [sp, #28]
	return uart_write(SOC_DEBUG_UART, c);
    6100228c:	b9401fe0 	ldr	w0, [sp, #28]
    61002290:	12001c00 	and	w0, w0, #0xff
    61002294:	2a0003e1 	mov	w1, w0
    61002298:	d2bf0800 	mov	x0, #0xf8400000            	// #4164943872
    6100229c:	940003cf 	bl	610031d8 <uart_write>
}
    610022a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    610022a4:	d65f03c0 	ret

Disassembly of section .text.__delay:

00000000610022a8 <__delay>:
 * @desc  : cpu delay by reading system counter 
 * @param {u64_t} count
 * @return {*}
 */
static void __delay(u64_t count)
{
    610022a8:	d100c3ff 	sub	sp, sp, #0x30
    610022ac:	f90007e0 	str	x0, [sp, #8]
	u64_t tEnd, tCur;
	tCur = read_sysreg(CNTPCT_EL0);
    610022b0:	d53be020 	mrs	x0, cntpct_el0
    610022b4:	f90017e0 	str	x0, [sp, #40]
    610022b8:	f94017e0 	ldr	x0, [sp, #40]
    610022bc:	f90013e0 	str	x0, [sp, #32]
	tEnd = tCur +count;
    610022c0:	f94013e1 	ldr	x1, [sp, #32]
    610022c4:	f94007e0 	ldr	x0, [sp, #8]
    610022c8:	8b000020 	add	x0, x1, x0
    610022cc:	f9000fe0 	str	x0, [sp, #24]
	do {
		tCur = read_sysreg(CNTPCT_EL0);
    610022d0:	d53be020 	mrs	x0, cntpct_el0
    610022d4:	f9000be0 	str	x0, [sp, #16]
    610022d8:	f9400be0 	ldr	x0, [sp, #16]
    610022dc:	f90013e0 	str	x0, [sp, #32]
	} while (tCur < tEnd);
    610022e0:	f94013e1 	ldr	x1, [sp, #32]
    610022e4:	f9400fe0 	ldr	x0, [sp, #24]
    610022e8:	eb00003f 	cmp	x1, x0
    610022ec:	54ffff23 	b.cc	610022d0 <__delay+0x28>  // b.lo, b.ul, b.last
}
    610022f0:	d503201f 	nop
    610022f4:	d503201f 	nop
    610022f8:	9100c3ff 	add	sp, sp, #0x30
    610022fc:	d65f03c0 	ret

Disassembly of section .text.syscnt_get_freq:

0000000061002300 <syscnt_get_freq>:
 * @desc  : get cpu system counter freq
 * @param {*}
 * @return: system counter freq
 */
static u64_t syscnt_get_freq(void)
{
    61002300:	d10043ff 	sub	sp, sp, #0x10
	unsigned int freq;

	asm volatile(
    61002304:	d53be000 	mrs	x0, cntfrq_el0
    61002308:	b9000fe0 	str	w0, [sp, #12]
		"mrs %0, cntfrq_el0"
		: "=r" (freq)
		:
		: "memory");

	return freq;
    6100230c:	b9400fe0 	ldr	w0, [sp, #12]
}
    61002310:	910043ff 	add	sp, sp, #0x10
    61002314:	d65f03c0 	ret

Disassembly of section .text._delay_ms:

0000000061002318 <_delay_ms>:
    u64_t delay_cnt = (u64_t)(count*freq);
    __delay(delay_cnt);
}

void _delay_ms(u64_t count)
{
    61002318:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    6100231c:	910003fd 	mov	x29, sp
    61002320:	f9000fe0 	str	x0, [sp, #24]
    u64_t freq = syscnt_get_freq();
    61002324:	97fffff7 	bl	61002300 <syscnt_get_freq>
    61002328:	f90017e0 	str	x0, [sp, #40]
    u64_t delay_cnt = (u64_t)(count*(freq/1000));
    6100232c:	f94017e0 	ldr	x0, [sp, #40]
    61002330:	d343fc01 	lsr	x1, x0, #3
    61002334:	d29ef9e0 	mov	x0, #0xf7cf                	// #63439
    61002338:	f2bc6a60 	movk	x0, #0xe353, lsl #16
    6100233c:	f2d374a0 	movk	x0, #0x9ba5, lsl #32
    61002340:	f2e41880 	movk	x0, #0x20c4, lsl #48
    61002344:	9bc07c20 	umulh	x0, x1, x0
    61002348:	d344fc00 	lsr	x0, x0, #4
    6100234c:	f9400fe1 	ldr	x1, [sp, #24]
    61002350:	9b007c20 	mul	x0, x1, x0
    61002354:	f90013e0 	str	x0, [sp, #32]
    __delay(delay_cnt);
    61002358:	f94013e0 	ldr	x0, [sp, #32]
    6100235c:	97ffffd3 	bl	610022a8 <__delay>
}
    61002360:	d503201f 	nop
    61002364:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002368:	d65f03c0 	ret

Disassembly of section .text.panic:

000000006100236c <panic>:

static void panic(void)
{
	error_print("warning: system hang here, waiting for exiting\n");

	while (1)
    6100236c:	14000000 	b	6100236c <panic>

Disassembly of section .text.do_bad_sync:

0000000061002370 <do_bad_sync>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_sync(struct pt_regs *pt_regs, unsigned int esr)
{
    61002370:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002374:	910003fd 	mov	x29, sp
    61002378:	f9000fe0 	str	x0, [sp, #24]
    6100237c:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Synchronous Abort at current el with sp0\" handler, but not found your handle implement.\n");
	panic();
    61002380:	97fffffb 	bl	6100236c <panic>
}
    61002384:	d503201f 	nop
    61002388:	a8c27bfd 	ldp	x29, x30, [sp], #32
    6100238c:	d65f03c0 	ret

Disassembly of section .text.do_bad_irq:

0000000061002390 <do_bad_irq>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_irq(struct pt_regs *pt_regs, unsigned int esr)
{
    61002390:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002394:	910003fd 	mov	x29, sp
    61002398:	f9000fe0 	str	x0, [sp, #24]
    6100239c:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Irq at current el with sp0 \" handler\n, but not found your handle implement.");
	panic();
    610023a0:	97fffff3 	bl	6100236c <panic>
}
    610023a4:	d503201f 	nop
    610023a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    610023ac:	d65f03c0 	ret

Disassembly of section .text.do_bad_fiq:

00000000610023b0 <do_bad_fiq>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_fiq(struct pt_regs *pt_regs, unsigned int esr)
{
    610023b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    610023b4:	910003fd 	mov	x29, sp
    610023b8:	f9000fe0 	str	x0, [sp, #24]
    610023bc:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Fiq at current el with sp0\" handler, but not found your handle implement.\n");
	panic();
    610023c0:	97ffffeb 	bl	6100236c <panic>
}
    610023c4:	d503201f 	nop
    610023c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    610023cc:	d65f03c0 	ret

Disassembly of section .text.do_bad_error:

00000000610023d0 <do_bad_error>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_bad_error(struct pt_regs *pt_regs, unsigned int esr)
{
    610023d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    610023d4:	910003fd 	mov	x29, sp
    610023d8:	f9000fe0 	str	x0, [sp, #24]
    610023dc:	b90017e1 	str	w1, [sp, #20]
	error_print("Bad mode in \"Error at current el with sp0\" handler, but not found your handle implement.\n");
	panic();
    610023e0:	97ffffe3 	bl	6100236c <panic>
}
    610023e4:	d503201f 	nop
    610023e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
    610023ec:	d65f03c0 	ret

Disassembly of section .text.do_sync_handle:

00000000610023f0 <do_sync_handle>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_sync_handle(struct pt_regs *pt_regs, unsigned int esr)
{
    610023f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    610023f4:	910003fd 	mov	x29, sp
    610023f8:	f9000fe0 	str	x0, [sp, #24]
    610023fc:	b90017e1 	str	w1, [sp, #20]
	error_print("\"Synchronous Abort at current el with spx\" handler, but not found your handle implement.\n\r");
	panic();
    61002400:	97ffffdb 	bl	6100236c <panic>
}
    61002404:	d503201f 	nop
    61002408:	a8c27bfd 	ldp	x29, x30, [sp], #32
    6100240c:	d65f03c0 	ret

Disassembly of section .text.do_fiq:

0000000061002410 <do_fiq>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_fiq(struct pt_regs *pt_regs, unsigned int esr)
{
    61002410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002414:	910003fd 	mov	x29, sp
    61002418:	f9000fe0 	str	x0, [sp, #24]
    6100241c:	b90017e1 	str	w1, [sp, #20]
	error_print("\"Fiq at current el with spx\" handler, but not found your handle implement.");
	panic();
    61002420:	97ffffd3 	bl	6100236c <panic>
}
    61002424:	d503201f 	nop
    61002428:	a8c27bfd 	ldp	x29, x30, [sp], #32
    6100242c:	d65f03c0 	ret

Disassembly of section .text.do_error:

0000000061002430 <do_error>:
 * @param {pt_regs} *pt_regs
 * @param {unsigned int} esr
 * @return {*}
 */
__weak void do_error(struct pt_regs *pt_regs, unsigned int esr)
{
    61002430:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61002434:	910003fd 	mov	x29, sp
    61002438:	f9000fe0 	str	x0, [sp, #24]
    6100243c:	b90017e1 	str	w1, [sp, #20]
	error_print("\"Error at current el with spx\" handler, but not found your handle implement.");
	panic();
    61002440:	97ffffcb 	bl	6100236c <panic>
}
    61002444:	d503201f 	nop
    61002448:	a8c27bfd 	ldp	x29, x30, [sp], #32
    6100244c:	d65f03c0 	ret

Disassembly of section .text.SystemBannerPrint:

0000000061002450 <SystemBannerPrint>:

/** @} */ /* End of Doxygen Group NMSIS_Core_ExceptionAndNMI */

/** Banner Print for Nuclei SDK */
void SystemBannerPrint(void)
{
    61002450:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61002454:	910003fd 	mov	x29, sp
#if defined(NUCLEI_BANNER) && (NUCLEI_BANNER == 1)
#ifndef DOWNLOAD_MODE
#error DOWNLOAD_MODE is not defined via build system, please check!
#endif
    const char* download_modes[] = {"FLASHXIP", "FLASH", "ILM", "DDR"};
    61002458:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100245c:	9111a000 	add	x0, x0, #0x468
    61002460:	f9000be0 	str	x0, [sp, #16]
    61002464:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61002468:	9111e000 	add	x0, x0, #0x478
    6100246c:	f9000fe0 	str	x0, [sp, #24]
    61002470:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61002474:	91120000 	add	x0, x0, #0x480
    61002478:	f90013e0 	str	x0, [sp, #32]
    6100247c:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61002480:	91122000 	add	x0, x0, #0x488
    61002484:	f90017e0 	str	x0, [sp, #40]
    printf("Anlogic APU SDK Build Time: %s, %s\r\n", __DATE__, __TIME__);
    61002488:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100248c:	91124002 	add	x2, x0, #0x490
    61002490:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61002494:	91128001 	add	x1, x0, #0x4a0
    61002498:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100249c:	9112c000 	add	x0, x0, #0x4b0
    610024a0:	97ffff4c 	bl	610021d0 <printf>
    printf("Download Mode: %s\r\n", download_modes[DOWNLOAD_MODE]);
    610024a4:	f94013e0 	ldr	x0, [sp, #32]
    610024a8:	aa0003e1 	mov	x1, x0
    610024ac:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610024b0:	91136000 	add	x0, x0, #0x4d8
    610024b4:	97ffff47 	bl	610021d0 <printf>
    printf("CPU Frequency %lu Hz\r\n", SystemCoreClock);
    610024b8:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610024bc:	911b2000 	add	x0, x0, #0x6c8
    610024c0:	b9400000 	ldr	w0, [x0]
    610024c4:	2a0003e1 	mov	w1, w0
    610024c8:	d0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610024cc:	9113c000 	add	x0, x0, #0x4f0
    610024d0:	97ffff40 	bl	610021d0 <printf>
#endif
}
    610024d4:	d503201f 	nop
    610024d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
    610024dc:	d65f03c0 	ret

Disassembly of section .text._premain_init:

00000000610024e0 <_premain_init>:
 * For RISC-V gnu toolchain, _init function might not be called
 * by __libc_init_array function, so we defined a new function
 * to do initialization
 */
void _premain_init(void)
{
    610024e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    610024e4:	910003fd 	mov	x29, sp
#endif
    SystemCoreClock = get_cpu_freq();
    gpio_iof_config(GPIO, IOF0_UART0_MASK, IOF_SEL_0);
    uart_init(SOC_DEBUG_UART, 115200);
#else
    Enablepinmux1();
    610024e8:	9400017c 	bl	61002ad8 <Enablepinmux1>
	AlUart_Init(AL_UART0, 115200, UART_BIT_LENGTH_8, AL_UART_STOP_BIT_1);
    610024ec:	52800003 	mov	w3, #0x0                   	// #0
    610024f0:	52800062 	mov	w2, #0x3                   	// #3
    610024f4:	52984001 	mov	w1, #0xc200                	// #49664
    610024f8:	72a00021 	movk	w1, #0x1, lsl #16
    610024fc:	d2bf0800 	mov	x0, #0xf8400000            	// #4164943872
    61002500:	94000274 	bl	61002ed0 <AlUart_Init>
	/* Display banner after UART initialized */
	SystemBannerPrint();
    61002504:	97ffffd3 	bl	61002450 <SystemBannerPrint>
	gicv3_init();
    61002508:	97fffc6a 	bl	610016b0 <gicv3_init>
	generic_timer_init();
    6100250c:	97fffa28 	bl	61000dac <generic_timer_init>
#endif

}
    61002510:	d503201f 	nop
    61002514:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61002518:	d65f03c0 	ret

Disassembly of section .text.AlI2c_Disable:

000000006100251c <AlI2c_Disable>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_Disable(I2C_TypeDef *i2c)
{
    6100251c:	d10043ff 	sub	sp, sp, #0x10
    61002520:	f90007e0 	str	x0, [sp, #8]
    i2c->IC_ENABLE.ENABLE = I2C_DISABLE;
    61002524:	f94007e1 	ldr	x1, [sp, #8]
    61002528:	b9406c20 	ldr	w0, [x1, #108]
    6100252c:	121f7800 	and	w0, w0, #0xfffffffe
    61002530:	b9006c20 	str	w0, [x1, #108]
}
    61002534:	d503201f 	nop
    61002538:	910043ff 	add	sp, sp, #0x10
    6100253c:	d65f03c0 	ret

Disassembly of section .text.AlI2c_Enable:

0000000061002540 <AlI2c_Enable>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_Enable(I2C_TypeDef *i2c)
{
    61002540:	d10043ff 	sub	sp, sp, #0x10
    61002544:	f90007e0 	str	x0, [sp, #8]
    i2c->IC_ENABLE.ENABLE = I2C_ENABLE;
    61002548:	f94007e1 	ldr	x1, [sp, #8]
    6100254c:	b9406c20 	ldr	w0, [x1, #108]
    61002550:	32000000 	orr	w0, w0, #0x1
    61002554:	b9006c20 	str	w0, [x1, #108]
}
    61002558:	d503201f 	nop
    6100255c:	910043ff 	add	sp, sp, #0x10
    61002560:	d65f03c0 	ret

Disassembly of section .text.AlI2c_SetSclCount:

0000000061002564 <AlI2c_SetSclCount>:
    \param[out]
    \retval
*/
void AlI2c_SetSclCount(I2C_TypeDef *i2c,enum i2c_speed_mode
        mode, enum i2c_scl_phase phase, uint16_t count)
{
    61002564:	d10083ff 	sub	sp, sp, #0x20
    61002568:	f9000fe0 	str	x0, [sp, #24]
    6100256c:	b90017e1 	str	w1, [sp, #20]
    61002570:	b90013e2 	str	w2, [sp, #16]
    61002574:	79001fe3 	strh	w3, [sp, #14]
	if(mode == I2c_speed_high) {
    61002578:	b94017e0 	ldr	w0, [sp, #20]
    6100257c:	71000c1f 	cmp	w0, #0x3
    61002580:	54000181 	b.ne	610025b0 <AlI2c_SetSclCount+0x4c>  // b.any
		if(phase == I2c_scl_low)
    61002584:	b94013e0 	ldr	w0, [sp, #16]
    61002588:	7100001f 	cmp	w0, #0x0
    6100258c:	540000a1 	b.ne	610025a0 <AlI2c_SetSclCount+0x3c>  // b.any
			i2c->IC_HS_SCL_LCNT = count;
    61002590:	79401fe1 	ldrh	w1, [sp, #14]
    61002594:	f9400fe0 	ldr	x0, [sp, #24]
    61002598:	b9002801 	str	w1, [x0, #40]
		else
			i2c->IC_SS_SCL_HCNT = count;
	}
	else
	{}
}
    6100259c:	14000020 	b	6100261c <AlI2c_SetSclCount+0xb8>
			i2c->IC_HS_SCL_HCNT = count;
    610025a0:	79401fe1 	ldrh	w1, [sp, #14]
    610025a4:	f9400fe0 	ldr	x0, [sp, #24]
    610025a8:	b9002401 	str	w1, [x0, #36]
}
    610025ac:	1400001c 	b	6100261c <AlI2c_SetSclCount+0xb8>
	else if(mode == I2c_speed_fast) {
    610025b0:	b94017e0 	ldr	w0, [sp, #20]
    610025b4:	7100081f 	cmp	w0, #0x2
    610025b8:	54000181 	b.ne	610025e8 <AlI2c_SetSclCount+0x84>  // b.any
		if(phase == I2c_scl_low)
    610025bc:	b94013e0 	ldr	w0, [sp, #16]
    610025c0:	7100001f 	cmp	w0, #0x0
    610025c4:	540000a1 	b.ne	610025d8 <AlI2c_SetSclCount+0x74>  // b.any
			i2c->IC_FS_SCL_LCNT = count;
    610025c8:	79401fe1 	ldrh	w1, [sp, #14]
    610025cc:	f9400fe0 	ldr	x0, [sp, #24]
    610025d0:	b9002001 	str	w1, [x0, #32]
}
    610025d4:	14000012 	b	6100261c <AlI2c_SetSclCount+0xb8>
			i2c->IC_FS_SCL_HCNT = count;
    610025d8:	79401fe1 	ldrh	w1, [sp, #14]
    610025dc:	f9400fe0 	ldr	x0, [sp, #24]
    610025e0:	b9001c01 	str	w1, [x0, #28]
}
    610025e4:	1400000e 	b	6100261c <AlI2c_SetSclCount+0xb8>
	else if(mode == I2c_speed_standard) {
    610025e8:	b94017e0 	ldr	w0, [sp, #20]
    610025ec:	7100041f 	cmp	w0, #0x1
    610025f0:	54000161 	b.ne	6100261c <AlI2c_SetSclCount+0xb8>  // b.any
		if(phase == I2c_scl_low)
    610025f4:	b94013e0 	ldr	w0, [sp, #16]
    610025f8:	7100001f 	cmp	w0, #0x0
    610025fc:	540000a1 	b.ne	61002610 <AlI2c_SetSclCount+0xac>  // b.any
			i2c->IC_SS_SCL_LCNT = count;
    61002600:	79401fe1 	ldrh	w1, [sp, #14]
    61002604:	f9400fe0 	ldr	x0, [sp, #24]
    61002608:	b9001801 	str	w1, [x0, #24]
}
    6100260c:	14000004 	b	6100261c <AlI2c_SetSclCount+0xb8>
			i2c->IC_SS_SCL_HCNT = count;
    61002610:	79401fe1 	ldrh	w1, [sp, #14]
    61002614:	f9400fe0 	ldr	x0, [sp, #24]
    61002618:	b9001401 	str	w1, [x0, #20]
}
    6100261c:	d503201f 	nop
    61002620:	910083ff 	add	sp, sp, #0x20
    61002624:	d65f03c0 	ret

Disassembly of section .text.AlI2c_SetSpeedMode:

0000000061002628 <AlI2c_SetSpeedMode>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_SetSpeedMode(I2C_TypeDef *i2c,enum i2c_speed_mode mode)
{
    61002628:	d10043ff 	sub	sp, sp, #0x10
    6100262c:	f90007e0 	str	x0, [sp, #8]
    61002630:	b90007e1 	str	w1, [sp, #4]
    i2c->IC_CON.SPEED = mode;
    61002634:	b94007e0 	ldr	w0, [sp, #4]
    61002638:	12000400 	and	w0, w0, #0x3
    6100263c:	12001c02 	and	w2, w0, #0xff
    61002640:	f94007e1 	ldr	x1, [sp, #8]
    61002644:	b9400020 	ldr	w0, [x1]
    61002648:	331f0440 	bfi	w0, w2, #1, #2
    6100264c:	b9000020 	str	w0, [x1]
}
    61002650:	d503201f 	nop
    61002654:	910043ff 	add	sp, sp, #0x10
    61002658:	d65f03c0 	ret

Disassembly of section .text.AlI2c_SetMasterAddressMode:

000000006100265c <AlI2c_SetMasterAddressMode>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_SetMasterAddressMode(I2C_TypeDef *i2c,enum i2c_address_mode mode)
{
    6100265c:	d10043ff 	sub	sp, sp, #0x10
    61002660:	f90007e0 	str	x0, [sp, #8]
    61002664:	b90007e1 	str	w1, [sp, #4]
    i2c->IC_CON.IC_10BITADDR_MASTER = mode;
    61002668:	b94007e0 	ldr	w0, [sp, #4]
    6100266c:	12000000 	and	w0, w0, #0x1
    61002670:	12001c02 	and	w2, w0, #0xff
    61002674:	f94007e1 	ldr	x1, [sp, #8]
    61002678:	b9400020 	ldr	w0, [x1]
    6100267c:	331c0040 	bfi	w0, w2, #4, #1
    61002680:	b9000020 	str	w0, [x1]
}
    61002684:	d503201f 	nop
    61002688:	910043ff 	add	sp, sp, #0x10
    6100268c:	d65f03c0 	ret

Disassembly of section .text.AlI2c_EnableMaster:

0000000061002690 <AlI2c_EnableMaster>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_EnableMaster(I2C_TypeDef *i2c)
{
    61002690:	d10043ff 	sub	sp, sp, #0x10
    61002694:	f90007e0 	str	x0, [sp, #8]
    i2c->IC_CON.MASTER_MODE = I2C_MAS_ENABLE;
    61002698:	f94007e1 	ldr	x1, [sp, #8]
    6100269c:	b9400020 	ldr	w0, [x1]
    610026a0:	32000000 	orr	w0, w0, #0x1
    610026a4:	b9000020 	str	w0, [x1]
}
    610026a8:	d503201f 	nop
    610026ac:	910043ff 	add	sp, sp, #0x10
    610026b0:	d65f03c0 	ret

Disassembly of section .text.AlI2c_SetTargetAddress:

00000000610026b4 <AlI2c_SetTargetAddress>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_SetTargetAddress(I2C_TypeDef *i2c, uint16_t address)
{
    610026b4:	d10043ff 	sub	sp, sp, #0x10
    610026b8:	f90007e0 	str	x0, [sp, #8]
    610026bc:	79000fe1 	strh	w1, [sp, #6]
    i2c->IC_TAR.IC_TAR = address;
    610026c0:	79400fe0 	ldrh	w0, [sp, #6]
    610026c4:	12002400 	and	w0, w0, #0x3ff
    610026c8:	12003c02 	and	w2, w0, #0xffff
    610026cc:	f94007e1 	ldr	x1, [sp, #8]
    610026d0:	b9400420 	ldr	w0, [x1, #4]
    610026d4:	33002440 	bfxil	w0, w2, #0, #10
    610026d8:	b9000420 	str	w0, [x1, #4]
}
    610026dc:	d503201f 	nop
    610026e0:	910043ff 	add	sp, sp, #0x10
    610026e4:	d65f03c0 	ret

Disassembly of section .text.AlI2c_Write:

00000000610026e8 <AlI2c_Write>:
    \param[in]  i2c: struct of I2C; data: byte to write to FIFO
    \param[out]
    \retval
*/
void AlI2c_Write(I2C_TypeDef *i2c, enum i2c_cmd_type type, uint8_t data)
{
    610026e8:	d10043ff 	sub	sp, sp, #0x10
    610026ec:	f90007e0 	str	x0, [sp, #8]
    610026f0:	b90007e1 	str	w1, [sp, #4]
    610026f4:	39000fe2 	strb	w2, [sp, #3]
    if(type == normal)
    610026f8:	b94007e0 	ldr	w0, [sp, #4]
    610026fc:	7100001f 	cmp	w0, #0x0
    61002700:	540000a1 	b.ne	61002714 <AlI2c_Write+0x2c>  // b.any
    {
//        i2c->IC_DATA_CMD.DAT = data; //[7..0]
//        i2c->IC_DATA_CMD.CMD = I2C_MAS_WRITE; //[8]
//    	i2c->IC_DATA_CMD.STOP = 0x0;//[9]
//    	i2c->IC_DATA_CMD.RESTART = 0x0;//[10]
    	i2c->IC_DATA_CMD.all = RESTART_DISABLE|STOP_DISABLE|CMD_WRITE|data;
    61002704:	39400fe1 	ldrb	w1, [sp, #3]
    61002708:	f94007e0 	ldr	x0, [sp, #8]
    6100270c:	b9001001 	str	w1, [x0, #16]
//    	i2c->IC_DATA_CMD.RESTART = 0x1; // with restart
    	i2c->IC_DATA_CMD.all = RESTART_ENABLE|STOP_ENABLE|CMD_WRITE|data;
    }
    else
    { }
}
    61002710:	1400001b 	b	6100277c <AlI2c_Write+0x94>
    else if(type == stop)
    61002714:	b94007e0 	ldr	w0, [sp, #4]
    61002718:	7100041f 	cmp	w0, #0x1
    6100271c:	540000e1 	b.ne	61002738 <AlI2c_Write+0x50>  // b.any
    	i2c->IC_DATA_CMD.all = RESTART_DISABLE|STOP_ENABLE|CMD_WRITE|data;
    61002720:	39400fe0 	ldrb	w0, [sp, #3]
    61002724:	32170000 	orr	w0, w0, #0x200
    61002728:	2a0003e1 	mov	w1, w0
    6100272c:	f94007e0 	ldr	x0, [sp, #8]
    61002730:	b9001001 	str	w1, [x0, #16]
}
    61002734:	14000012 	b	6100277c <AlI2c_Write+0x94>
    else if(type == restart)
    61002738:	b94007e0 	ldr	w0, [sp, #4]
    6100273c:	7100081f 	cmp	w0, #0x2
    61002740:	540000e1 	b.ne	6100275c <AlI2c_Write+0x74>  // b.any
    	i2c->IC_DATA_CMD.all = RESTART_ENABLE|STOP_DISABLE|CMD_WRITE|data;
    61002744:	39400fe0 	ldrb	w0, [sp, #3]
    61002748:	32160000 	orr	w0, w0, #0x400
    6100274c:	2a0003e1 	mov	w1, w0
    61002750:	f94007e0 	ldr	x0, [sp, #8]
    61002754:	b9001001 	str	w1, [x0, #16]
}
    61002758:	14000009 	b	6100277c <AlI2c_Write+0x94>
    else if(type == stop_restart)
    6100275c:	b94007e0 	ldr	w0, [sp, #4]
    61002760:	71000c1f 	cmp	w0, #0x3
    61002764:	540000c1 	b.ne	6100277c <AlI2c_Write+0x94>  // b.any
    	i2c->IC_DATA_CMD.all = RESTART_ENABLE|STOP_ENABLE|CMD_WRITE|data;
    61002768:	39400fe0 	ldrb	w0, [sp, #3]
    6100276c:	32170400 	orr	w0, w0, #0x600
    61002770:	2a0003e1 	mov	w1, w0
    61002774:	f94007e0 	ldr	x0, [sp, #8]
    61002778:	b9001001 	str	w1, [x0, #16]
}
    6100277c:	d503201f 	nop
    61002780:	910043ff 	add	sp, sp, #0x10
    61002784:	d65f03c0 	ret

Disassembly of section .text.AlI2c_Read:

0000000061002788 <AlI2c_Read>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
uint8_t AlI2c_Read(I2C_TypeDef *i2c)
{
    61002788:	d10043ff 	sub	sp, sp, #0x10
    6100278c:	f90007e0 	str	x0, [sp, #8]
	// read a byte from the DATA_CMD register
	return ((i2c->IC_DATA_CMD.BITS.DAT) & 0xff);
    61002790:	f94007e0 	ldr	x0, [sp, #8]
    61002794:	b9401000 	ldr	w0, [x0, #16]
    61002798:	12001c00 	and	w0, w0, #0xff
}
    6100279c:	910043ff 	add	sp, sp, #0x10
    610027a0:	d65f03c0 	ret

Disassembly of section .text.AlI2c_IssueRead:

00000000610027a4 <AlI2c_IssueRead>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_IssueRead(I2C_TypeDef *i2c, enum i2c_cmd_type type)
{
    610027a4:	d10043ff 	sub	sp, sp, #0x10
    610027a8:	f90007e0 	str	x0, [sp, #8]
    610027ac:	b90007e1 	str	w1, [sp, #4]
    if(type == normal)
    610027b0:	b94007e0 	ldr	w0, [sp, #4]
    610027b4:	7100001f 	cmp	w0, #0x0
    610027b8:	540000a1 	b.ne	610027cc <AlI2c_IssueRead+0x28>  // b.any
    {
    	i2c->IC_DATA_CMD.all = RESTART_DISABLE|STOP_DISABLE|CMD_READ;
    610027bc:	f94007e0 	ldr	x0, [sp, #8]
    610027c0:	52802001 	mov	w1, #0x100                 	// #256
    610027c4:	b9001001 	str	w1, [x0, #16]
    {
    	i2c->IC_DATA_CMD.all = RESTART_ENABLE|STOP_ENABLE|CMD_READ;
    }
    else
    { }
}
    610027c8:	14000015 	b	6100281c <AlI2c_IssueRead+0x78>
    else if(type == stop)
    610027cc:	b94007e0 	ldr	w0, [sp, #4]
    610027d0:	7100041f 	cmp	w0, #0x1
    610027d4:	540000a1 	b.ne	610027e8 <AlI2c_IssueRead+0x44>  // b.any
    	i2c->IC_DATA_CMD.all = RESTART_DISABLE|STOP_ENABLE|CMD_READ;
    610027d8:	f94007e0 	ldr	x0, [sp, #8]
    610027dc:	52806001 	mov	w1, #0x300                 	// #768
    610027e0:	b9001001 	str	w1, [x0, #16]
}
    610027e4:	1400000e 	b	6100281c <AlI2c_IssueRead+0x78>
    else if(type == restart)
    610027e8:	b94007e0 	ldr	w0, [sp, #4]
    610027ec:	7100081f 	cmp	w0, #0x2
    610027f0:	540000a1 	b.ne	61002804 <AlI2c_IssueRead+0x60>  // b.any
    	i2c->IC_DATA_CMD.all = RESTART_ENABLE|STOP_DISABLE|CMD_READ;
    610027f4:	f94007e0 	ldr	x0, [sp, #8]
    610027f8:	5280a001 	mov	w1, #0x500                 	// #1280
    610027fc:	b9001001 	str	w1, [x0, #16]
}
    61002800:	14000007 	b	6100281c <AlI2c_IssueRead+0x78>
    else if(type == stop_restart)
    61002804:	b94007e0 	ldr	w0, [sp, #4]
    61002808:	71000c1f 	cmp	w0, #0x3
    6100280c:	54000081 	b.ne	6100281c <AlI2c_IssueRead+0x78>  // b.any
    	i2c->IC_DATA_CMD.all = RESTART_ENABLE|STOP_ENABLE|CMD_READ;
    61002810:	f94007e0 	ldr	x0, [sp, #8]
    61002814:	5280e001 	mov	w1, #0x700                 	// #1792
    61002818:	b9001001 	str	w1, [x0, #16]
}
    6100281c:	d503201f 	nop
    61002820:	910043ff 	add	sp, sp, #0x10
    61002824:	d65f03c0 	ret

Disassembly of section .text.AlI2c_IrqMask:

0000000061002828 <AlI2c_IrqMask>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_IrqMask(I2C_TypeDef *i2c,uint32_t mask)
{
    61002828:	d10043ff 	sub	sp, sp, #0x10
    6100282c:	f90007e0 	str	x0, [sp, #8]
    61002830:	b90007e1 	str	w1, [sp, #4]
	i2c->IC_INTR_MASK.all = mask;
    61002834:	f94007e0 	ldr	x0, [sp, #8]
    61002838:	b94007e1 	ldr	w1, [sp, #4]
    6100283c:	b9003001 	str	w1, [x0, #48]
}
    61002840:	d503201f 	nop
    61002844:	910043ff 	add	sp, sp, #0x10
    61002848:	d65f03c0 	ret

Disassembly of section .text.AlI2c_TxThr:

000000006100284c <AlI2c_TxThr>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_TxThr(I2C_TypeDef *i2c, uint8_t waterlevel)
{
    6100284c:	d10043ff 	sub	sp, sp, #0x10
    61002850:	f90007e0 	str	x0, [sp, #8]
    61002854:	39001fe1 	strb	w1, [sp, #7]
	i2c->IC_TX_TL = waterlevel;
    61002858:	39401fe1 	ldrb	w1, [sp, #7]
    6100285c:	f94007e0 	ldr	x0, [sp, #8]
    61002860:	b9003c01 	str	w1, [x0, #60]
}
    61002864:	d503201f 	nop
    61002868:	910043ff 	add	sp, sp, #0x10
    6100286c:	d65f03c0 	ret

Disassembly of section .text.AlI2c_RxThr:

0000000061002870 <AlI2c_RxThr>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_RxThr(I2C_TypeDef *i2c, uint8_t waterlevel)
{
    61002870:	d10043ff 	sub	sp, sp, #0x10
    61002874:	f90007e0 	str	x0, [sp, #8]
    61002878:	39001fe1 	strb	w1, [sp, #7]
	i2c->IC_RX_TL = waterlevel;
    6100287c:	39401fe1 	ldrb	w1, [sp, #7]
    61002880:	f94007e0 	ldr	x0, [sp, #8]
    61002884:	b9003801 	str	w1, [x0, #56]
}
    61002888:	d503201f 	nop
    6100288c:	910043ff 	add	sp, sp, #0x10
    61002890:	d65f03c0 	ret

Disassembly of section .text.AlI2c_SdaHoldTx:

0000000061002894 <AlI2c_SdaHoldTx>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_SdaHoldTx(I2C_TypeDef *i2c, uint16_t value)
{
    61002894:	d10043ff 	sub	sp, sp, #0x10
    61002898:	f90007e0 	str	x0, [sp, #8]
    6100289c:	79000fe1 	strh	w1, [sp, #6]
	i2c->IC_SDA_HOLD.IC_SDA_TX_HOLD = value;
    610028a0:	f94007e1 	ldr	x1, [sp, #8]
    610028a4:	79400fe2 	ldrh	w2, [sp, #6]
    610028a8:	b9407c20 	ldr	w0, [x1, #124]
    610028ac:	33003c40 	bfxil	w0, w2, #0, #16
    610028b0:	b9007c20 	str	w0, [x1, #124]
}
    610028b4:	d503201f 	nop
    610028b8:	910043ff 	add	sp, sp, #0x10
    610028bc:	d65f03c0 	ret

Disassembly of section .text.AlI2c_Spklen:

00000000610028c0 <AlI2c_Spklen>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_Spklen(I2C_TypeDef *i2c, uint8_t value)
{
    610028c0:	d10043ff 	sub	sp, sp, #0x10
    610028c4:	f90007e0 	str	x0, [sp, #8]
    610028c8:	39001fe1 	strb	w1, [sp, #7]
	i2c->IC_FS_SPKLEN = value;
    610028cc:	39401fe1 	ldrb	w1, [sp, #7]
    610028d0:	f94007e0 	ldr	x0, [sp, #8]
    610028d4:	b900a001 	str	w1, [x0, #160]
}
    610028d8:	d503201f 	nop
    610028dc:	910043ff 	add	sp, sp, #0x10
    610028e0:	d65f03c0 	ret

Disassembly of section .text.AlI2c_IrqClrAll:

00000000610028e4 <AlI2c_IrqClrAll>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
void AlI2c_IrqClrAll(I2C_TypeDef *i2c)
{
    610028e4:	d10083ff 	sub	sp, sp, #0x20
    610028e8:	f90007e0 	str	x0, [sp, #8]
	uint8_t retval;
	retval = (i2c->IC_CLR_INTR.CLR_INTR);
    610028ec:	f94007e0 	ldr	x0, [sp, #8]
    610028f0:	b9404000 	ldr	w0, [x0, #64]
    610028f4:	d3400000 	ubfx	x0, x0, #0, #1
    610028f8:	12001c00 	and	w0, w0, #0xff
    610028fc:	39007fe0 	strb	w0, [sp, #31]
}
    61002900:	d503201f 	nop
    61002904:	910083ff 	add	sp, sp, #0x20
    61002908:	d65f03c0 	ret

Disassembly of section .text.AlI2c_IrqStat:

000000006100290c <AlI2c_IrqStat>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
uint32_t AlI2c_IrqStat(I2C_TypeDef *i2c)
{
    6100290c:	d10043ff 	sub	sp, sp, #0x10
    61002910:	f90007e0 	str	x0, [sp, #8]
	return (i2c->IC_INTR_STAT.all);
    61002914:	f94007e0 	ldr	x0, [sp, #8]
    61002918:	b9402c00 	ldr	w0, [x0, #44]
}
    6100291c:	910043ff 	add	sp, sp, #0x10
    61002920:	d65f03c0 	ret

Disassembly of section .text.AlI2c_Status:

0000000061002924 <AlI2c_Status>:
    \param[in]  i2c: struct of I2C
    \param[out]
    \retval
*/
uint32_t AlI2c_Status(I2C_TypeDef *i2c )
{
    61002924:	d10043ff 	sub	sp, sp, #0x10
    61002928:	f90007e0 	str	x0, [sp, #8]
	return (i2c->IC_STATUS.all);
    6100292c:	f94007e0 	ldr	x0, [sp, #8]
    61002930:	b9407000 	ldr	w0, [x0, #112]
}
    61002934:	910043ff 	add	sp, sp, #0x10
    61002938:	d65f03c0 	ret

Disassembly of section .text.AlI2c_ClockSetup:

000000006100293c <AlI2c_ClockSetup>:

// Utility function which programs the clock count registers for a given
// input clock frequency.
void AlI2c_ClockSetup(I2C_TypeDef *i2c, unsigned ic_clk)
{
    6100293c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61002940:	910003fd 	mov	x29, sp
    61002944:	f9000fe0 	str	x0, [sp, #24]
    61002948:	b90017e1 	str	w1, [sp, #20]

    // ic_clk is the clock speed (in MHz) that is being supplied to the
    // DW_apb_i2c device.  The correct clock count values are determined
    // by using this inconjunction with the minimum high and low signal
    // hold times as per the I2C bus specification.
    ss_scl_high = ((uint16_t) (((SS_MIN_SCL_HIGH * ic_clk) / 1000) + (25-7))); //+25 non-uniqueness
    6100294c:	b94017e1 	ldr	w1, [sp, #20]
    61002950:	5281f400 	mov	w0, #0xfa0                 	// #4000
    61002954:	1b007c21 	mul	w1, w1, w0
    61002958:	5289ba60 	mov	w0, #0x4dd3                	// #19923
    6100295c:	72a20c40 	movk	w0, #0x1062, lsl #16
    61002960:	9ba07c20 	umull	x0, w1, w0
    61002964:	d360fc00 	lsr	x0, x0, #32
    61002968:	53067c00 	lsr	w0, w0, #6
    6100296c:	12003c00 	and	w0, w0, #0xffff
    61002970:	11004800 	add	w0, w0, #0x12
    61002974:	79005fe0 	strh	w0, [sp, #46]
    ss_scl_low = ((uint16_t) (((SS_MIN_SCL_LOW * ic_clk) / 1000) + 25));
    61002978:	b94017e1 	ldr	w1, [sp, #20]
    6100297c:	52824b80 	mov	w0, #0x125c                	// #4700
    61002980:	1b007c21 	mul	w1, w1, w0
    61002984:	5289ba60 	mov	w0, #0x4dd3                	// #19923
    61002988:	72a20c40 	movk	w0, #0x1062, lsl #16
    6100298c:	9ba07c20 	umull	x0, w1, w0
    61002990:	d360fc00 	lsr	x0, x0, #32
    61002994:	53067c00 	lsr	w0, w0, #6
    61002998:	12003c00 	and	w0, w0, #0xffff
    6100299c:	11006400 	add	w0, w0, #0x19
    610029a0:	79005be0 	strh	w0, [sp, #44]
    fs_scl_high = ((uint16_t) (((FS_MIN_SCL_HIGH * ic_clk) / 1000) + (25-7)));
    610029a4:	b94017e1 	ldr	w1, [sp, #20]
    610029a8:	52804b00 	mov	w0, #0x258                 	// #600
    610029ac:	1b007c21 	mul	w1, w1, w0
    610029b0:	5289ba60 	mov	w0, #0x4dd3                	// #19923
    610029b4:	72a20c40 	movk	w0, #0x1062, lsl #16
    610029b8:	9ba07c20 	umull	x0, w1, w0
    610029bc:	d360fc00 	lsr	x0, x0, #32
    610029c0:	53067c00 	lsr	w0, w0, #6
    610029c4:	12003c00 	and	w0, w0, #0xffff
    610029c8:	11004800 	add	w0, w0, #0x12
    610029cc:	790057e0 	strh	w0, [sp, #42]
    fs_scl_low = ((uint16_t) (((FS_MIN_SCL_LOW * ic_clk) / 1000) + 25));
    610029d0:	b94017e1 	ldr	w1, [sp, #20]
    610029d4:	5280a280 	mov	w0, #0x514                 	// #1300
    610029d8:	1b007c21 	mul	w1, w1, w0
    610029dc:	5289ba60 	mov	w0, #0x4dd3                	// #19923
    610029e0:	72a20c40 	movk	w0, #0x1062, lsl #16
    610029e4:	9ba07c20 	umull	x0, w1, w0
    610029e8:	d360fc00 	lsr	x0, x0, #32
    610029ec:	53067c00 	lsr	w0, w0, #6
    610029f0:	12003c00 	and	w0, w0, #0xffff
    610029f4:	11006400 	add	w0, w0, #0x19
    610029f8:	790053e0 	strh	w0, [sp, #40]
    hs_scl_high = ((uint16_t) (((HS_MIN_SCL_HIGH_100PF * ic_clk) / 1000) + (25-7)));
    610029fc:	b94017e1 	ldr	w1, [sp, #20]
    61002a00:	52800780 	mov	w0, #0x3c                  	// #60
    61002a04:	1b007c21 	mul	w1, w1, w0
    61002a08:	5289ba60 	mov	w0, #0x4dd3                	// #19923
    61002a0c:	72a20c40 	movk	w0, #0x1062, lsl #16
    61002a10:	9ba07c20 	umull	x0, w1, w0
    61002a14:	d360fc00 	lsr	x0, x0, #32
    61002a18:	53067c00 	lsr	w0, w0, #6
    61002a1c:	12003c00 	and	w0, w0, #0xffff
    61002a20:	11004800 	add	w0, w0, #0x12
    61002a24:	79004fe0 	strh	w0, [sp, #38]
    hs_scl_low = ((uint16_t) (((HS_MIN_SCL_LOW_100PF * ic_clk) / 1000) + 25));
    61002a28:	b94017e1 	ldr	w1, [sp, #20]
    61002a2c:	52800f00 	mov	w0, #0x78                  	// #120
    61002a30:	1b007c21 	mul	w1, w1, w0
    61002a34:	5289ba60 	mov	w0, #0x4dd3                	// #19923
    61002a38:	72a20c40 	movk	w0, #0x1062, lsl #16
    61002a3c:	9ba07c20 	umull	x0, w1, w0
    61002a40:	d360fc00 	lsr	x0, x0, #32
    61002a44:	53067c00 	lsr	w0, w0, #6
    61002a48:	12003c00 	and	w0, w0, #0xffff
    61002a4c:	11006400 	add	w0, w0, #0x19
    61002a50:	79004be0 	strh	w0, [sp, #36]

    AlI2c_SetSclCount(i2c, I2c_speed_standard, I2c_scl_high, ss_scl_high);
    61002a54:	79405fe3 	ldrh	w3, [sp, #46]
    61002a58:	52800022 	mov	w2, #0x1                   	// #1
    61002a5c:	52800021 	mov	w1, #0x1                   	// #1
    61002a60:	f9400fe0 	ldr	x0, [sp, #24]
    61002a64:	97fffec0 	bl	61002564 <AlI2c_SetSclCount>
    AlI2c_SetSclCount(i2c, I2c_speed_standard, I2c_scl_low, ss_scl_low);
    61002a68:	79405be3 	ldrh	w3, [sp, #44]
    61002a6c:	52800002 	mov	w2, #0x0                   	// #0
    61002a70:	52800021 	mov	w1, #0x1                   	// #1
    61002a74:	f9400fe0 	ldr	x0, [sp, #24]
    61002a78:	97fffebb 	bl	61002564 <AlI2c_SetSclCount>
    AlI2c_SetSclCount(i2c, I2c_speed_fast, I2c_scl_high, fs_scl_high);
    61002a7c:	794057e3 	ldrh	w3, [sp, #42]
    61002a80:	52800022 	mov	w2, #0x1                   	// #1
    61002a84:	52800041 	mov	w1, #0x2                   	// #2
    61002a88:	f9400fe0 	ldr	x0, [sp, #24]
    61002a8c:	97fffeb6 	bl	61002564 <AlI2c_SetSclCount>
    AlI2c_SetSclCount(i2c, I2c_speed_fast, I2c_scl_low, fs_scl_low);
    61002a90:	794053e3 	ldrh	w3, [sp, #40]
    61002a94:	52800002 	mov	w2, #0x0                   	// #0
    61002a98:	52800041 	mov	w1, #0x2                   	// #2
    61002a9c:	f9400fe0 	ldr	x0, [sp, #24]
    61002aa0:	97fffeb1 	bl	61002564 <AlI2c_SetSclCount>
    AlI2c_SetSclCount(i2c, I2c_speed_high, I2c_scl_high, hs_scl_high);
    61002aa4:	79404fe3 	ldrh	w3, [sp, #38]
    61002aa8:	52800022 	mov	w2, #0x1                   	// #1
    61002aac:	52800061 	mov	w1, #0x3                   	// #3
    61002ab0:	f9400fe0 	ldr	x0, [sp, #24]
    61002ab4:	97fffeac 	bl	61002564 <AlI2c_SetSclCount>
    AlI2c_SetSclCount(i2c, I2c_speed_high, I2c_scl_low, hs_scl_low);
    61002ab8:	79404be3 	ldrh	w3, [sp, #36]
    61002abc:	52800002 	mov	w2, #0x0                   	// #0
    61002ac0:	52800061 	mov	w1, #0x3                   	// #3
    61002ac4:	f9400fe0 	ldr	x0, [sp, #24]
    61002ac8:	97fffea7 	bl	61002564 <AlI2c_SetSclCount>
}
    61002acc:	d503201f 	nop
    61002ad0:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002ad4:	d65f03c0 	ret

Disassembly of section .text.Enablepinmux1:

0000000061002ad8 <Enablepinmux1>:
    \retval
*/

 void Enablepinmux1(void)
{ 
     *(uint32_t *)(0xf8803000u) =0x1;	  //QSPI  MIO0
    61002ad8:	d2860000 	mov	x0, #0x3000                	// #12288
    61002adc:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002ae0:	52800021 	mov	w1, #0x1                   	// #1
    61002ae4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803004u) =0x1;
    61002ae8:	d2860080 	mov	x0, #0x3004                	// #12292
    61002aec:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002af0:	52800021 	mov	w1, #0x1                   	// #1
    61002af4:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803008u) =0x1;
    61002af8:	d2860100 	mov	x0, #0x3008                	// #12296
    61002afc:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b00:	52800021 	mov	w1, #0x1                   	// #1
    61002b04:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880300cu) =0x1;
    61002b08:	d2860180 	mov	x0, #0x300c                	// #12300
    61002b0c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b10:	52800021 	mov	w1, #0x1                   	// #1
    61002b14:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803010u) =0x1;
    61002b18:	d2860200 	mov	x0, #0x3010                	// #12304
    61002b1c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b20:	52800021 	mov	w1, #0x1                   	// #1
    61002b24:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803014u) =0x1;
    61002b28:	d2860280 	mov	x0, #0x3014                	// #12308
    61002b2c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b30:	52800021 	mov	w1, #0x1                   	// #1
    61002b34:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803018u) =0x1;   
    61002b38:	d2860300 	mov	x0, #0x3018                	// #12312
    61002b3c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b40:	52800021 	mov	w1, #0x1                   	// #1
    61002b44:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf880301cu) =0x4;    //GPIO MIO7
    61002b48:	d2860380 	mov	x0, #0x301c                	// #12316
    61002b4c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b50:	52800081 	mov	w1, #0x4                   	// #4
    61002b54:	b9000001 	str	w1, [x0]
	 
     *(uint32_t *)(0xf8803020u) =0x1;    //CAN1 MIO8
    61002b58:	d2860400 	mov	x0, #0x3020                	// #12320
    61002b5c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b60:	52800021 	mov	w1, #0x1                   	// #1
    61002b64:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803024u) =0x1;
    61002b68:	d2860480 	mov	x0, #0x3024                	// #12324
    61002b6c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b70:	52800021 	mov	w1, #0x1                   	// #1
    61002b74:	b9000001 	str	w1, [x0]
	 *(uint32_t *)(0xf880340cu) =0x1;    //sel3
    61002b78:	d2868180 	mov	x0, #0x340c                	// #13324
    61002b7c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b80:	52800021 	mov	w1, #0x1                   	// #1
    61002b84:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf8803028u) =0x4;    //GPIO MIO10
    61002b88:	d2860500 	mov	x0, #0x3028                	// #12328
    61002b8c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002b90:	52800081 	mov	w1, #0x4                   	// #4
    61002b94:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880302cu) =0x4;    //GPIO MIO11
    61002b98:	d2860580 	mov	x0, #0x302c                	// #12332
    61002b9c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002ba0:	52800081 	mov	w1, #0x4                   	// #4
    61002ba4:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf8803030u) =0x0;    //I2C1 MIO12
    61002ba8:	d2860600 	mov	x0, #0x3030                	// #12336
    61002bac:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002bb0:	b900001f 	str	wzr, [x0]
     *(uint32_t *)(0xf8803034u) =0x0;    //I2C1 MIO13
    61002bb4:	d2860680 	mov	x0, #0x3034                	// #12340
    61002bb8:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002bbc:	b900001f 	str	wzr, [x0]
     *(uint32_t *)(0xf8803404u) =0x1;
    61002bc0:	d2868080 	mov	x0, #0x3404                	// #13316
    61002bc4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002bc8:	52800021 	mov	w1, #0x1                   	// #1
    61002bcc:	b9000001 	str	w1, [x0]


     *(uint32_t *)(0xf8803038u) =0x4;    //GPIO MIO14
    61002bd0:	d2860700 	mov	x0, #0x3038                	// #12344
    61002bd4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002bd8:	52800081 	mov	w1, #0x4                   	// #4
    61002bdc:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880303cu) =0x4;    //GPIO MIO15
    61002be0:	d2860780 	mov	x0, #0x303c                	// #12348
    61002be4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002be8:	52800081 	mov	w1, #0x4                   	// #4
    61002bec:	b9000001 	str	w1, [x0]

     *(uint32_t *)(0xf8803040u) =0x9;    //spi0  MIO16
    61002bf0:	d2860800 	mov	x0, #0x3040                	// #12352
    61002bf4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002bf8:	52800121 	mov	w1, #0x9                   	// #9
    61002bfc:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803044u) =0x9;    //spi0  MIO17
    61002c00:	d2860880 	mov	x0, #0x3044                	// #12356
    61002c04:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c08:	52800121 	mov	w1, #0x9                   	// #9
    61002c0c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803048u) =0x9;    //spi0  MIO18
    61002c10:	d2860900 	mov	x0, #0x3048                	// #12360
    61002c14:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c18:	52800121 	mov	w1, #0x9                   	// #9
    61002c1c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880304cu) =0x4;    //GPIO MIO19
    61002c20:	d2860980 	mov	x0, #0x304c                	// #12364
    61002c24:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c28:	52800081 	mov	w1, #0x4                   	// #4
    61002c2c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803050u) =0x4;    //GPIO MIO20
    61002c30:	d2860a00 	mov	x0, #0x3050                	// #12368
    61002c34:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c38:	52800081 	mov	w1, #0x4                   	// #4
    61002c3c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803054u) =0x9;    //spi0  MIO21
    61002c40:	d2860a80 	mov	x0, #0x3054                	// #12372
    61002c44:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c48:	52800121 	mov	w1, #0x9                   	// #9
    61002c4c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803424u) =0x1;    //emio_sel9
    61002c50:	d2868480 	mov	x0, #0x3424                	// #13348
    61002c54:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c58:	52800021 	mov	w1, #0x1                   	// #1
    61002c5c:	b9000001 	str	w1, [x0]


     *(uint32_t *)(0xf8803058u) =0x7;        //MIO23/24/25/22 jtag
    61002c60:	d2860b00 	mov	x0, #0x3058                	// #12376
    61002c64:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c68:	528000e1 	mov	w1, #0x7                   	// #7
    61002c6c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf880305cu) =0x7; 
    61002c70:	d2860b80 	mov	x0, #0x305c                	// #12380
    61002c74:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c78:	528000e1 	mov	w1, #0x7                   	// #7
    61002c7c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803060u) =0x7; 
    61002c80:	d2860c00 	mov	x0, #0x3060                	// #12384
    61002c84:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c88:	528000e1 	mov	w1, #0x7                   	// #7
    61002c8c:	b9000001 	str	w1, [x0]
     *(uint32_t *)(0xf8803064u) =0x7; 
    61002c90:	d2860c80 	mov	x0, #0x3064                	// #12388
    61002c94:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002c98:	528000e1 	mov	w1, #0x7                   	// #7
    61002c9c:	b9000001 	str	w1, [x0]
                                         //
	 
	 *(uint32_t *)(0xf8803068u) =0x3;    //uart0  MIO26/27
    61002ca0:	d2860d00 	mov	x0, #0x3068                	// #12392
    61002ca4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002ca8:	52800061 	mov	w1, #0x3                   	// #3
    61002cac:	b9000001 	str	w1, [x0]
	 *(uint32_t *)(0xf880306cu) =0x3;
    61002cb0:	d2860d80 	mov	x0, #0x306c                	// #12396
    61002cb4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002cb8:	52800061 	mov	w1, #0x3                   	// #3
    61002cbc:	b9000001 	str	w1, [x0]
	 *(uint32_t *)(0xf8803410u) =0x1;
    61002cc0:	d2868200 	mov	x0, #0x3410                	// #13328
    61002cc4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002cc8:	52800021 	mov	w1, #0x1                   	// #1
    61002ccc:	b9000001 	str	w1, [x0]

	*(uint32_t *)(0xf8803070u) =0xe;     //rgmii1 mio 28-39
    61002cd0:	d2860e00 	mov	x0, #0x3070                	// #12400
    61002cd4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002cd8:	528001c1 	mov	w1, #0xe                   	// #14
    61002cdc:	b9000001 	str	w1, [x0]
	*(uint32_t *)(0xf8803074u) =0xe;
    61002ce0:	d2860e80 	mov	x0, #0x3074                	// #12404
    61002ce4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002ce8:	528001c1 	mov	w1, #0xe                   	// #14
    61002cec:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803078u) =0xe;
    61002cf0:	d2860f00 	mov	x0, #0x3078                	// #12408
    61002cf4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002cf8:	528001c1 	mov	w1, #0xe                   	// #14
    61002cfc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880307cu) =0xe;
    61002d00:	d2860f80 	mov	x0, #0x307c                	// #12412
    61002d04:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d08:	528001c1 	mov	w1, #0xe                   	// #14
    61002d0c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803080u) =0xe;
    61002d10:	d2861000 	mov	x0, #0x3080                	// #12416
    61002d14:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d18:	528001c1 	mov	w1, #0xe                   	// #14
    61002d1c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803084u) =0xe;
    61002d20:	d2861080 	mov	x0, #0x3084                	// #12420
    61002d24:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d28:	528001c1 	mov	w1, #0xe                   	// #14
    61002d2c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803088u) =0xe;
    61002d30:	d2861100 	mov	x0, #0x3088                	// #12424
    61002d34:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d38:	528001c1 	mov	w1, #0xe                   	// #14
    61002d3c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880308cu) =0xe;
    61002d40:	d2861180 	mov	x0, #0x308c                	// #12428
    61002d44:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d48:	528001c1 	mov	w1, #0xe                   	// #14
    61002d4c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803090u) =0xe;
    61002d50:	d2861200 	mov	x0, #0x3090                	// #12432
    61002d54:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d58:	528001c1 	mov	w1, #0xe                   	// #14
    61002d5c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803094u) =0xe;
    61002d60:	d2861280 	mov	x0, #0x3094                	// #12436
    61002d64:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d68:	528001c1 	mov	w1, #0xe                   	// #14
    61002d6c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803098u) =0xe;
    61002d70:	d2861300 	mov	x0, #0x3098                	// #12440
    61002d74:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d78:	528001c1 	mov	w1, #0xe                   	// #14
    61002d7c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880309cu) =0xe;
    61002d80:	d2861380 	mov	x0, #0x309c                	// #12444
    61002d84:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d88:	528001c1 	mov	w1, #0xe                   	// #14
    61002d8c:	b9000001 	str	w1, [x0]
  

    *(uint32_t *)(0xf88030a0u) =0xa;      //SDIO0 mio40-45
    61002d90:	d2861400 	mov	x0, #0x30a0                	// #12448
    61002d94:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002d98:	52800141 	mov	w1, #0xa                   	// #10
    61002d9c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030a4u) =0xa;
    61002da0:	d2861480 	mov	x0, #0x30a4                	// #12452
    61002da4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002da8:	52800141 	mov	w1, #0xa                   	// #10
    61002dac:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030a8u) =0xa;
    61002db0:	d2861500 	mov	x0, #0x30a8                	// #12456
    61002db4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002db8:	52800141 	mov	w1, #0xa                   	// #10
    61002dbc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030acu) =0xa;
    61002dc0:	d2861580 	mov	x0, #0x30ac                	// #12460
    61002dc4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002dc8:	52800141 	mov	w1, #0xa                   	// #10
    61002dcc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030b0u) =0xa;
    61002dd0:	d2861600 	mov	x0, #0x30b0                	// #12464
    61002dd4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002dd8:	52800141 	mov	w1, #0xa                   	// #10
    61002ddc:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030b4u) =0xa; 
    61002de0:	d2861680 	mov	x0, #0x30b4                	// #12468
    61002de4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002de8:	52800141 	mov	w1, #0xa                   	// #10
    61002dec:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf880342cu) =0x1;     //emio_sel11
    61002df0:	d2868580 	mov	x0, #0x342c                	// #13356
    61002df4:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002df8:	52800021 	mov	w1, #0x1                   	// #1
    61002dfc:	b9000001 	str	w1, [x0]

    *(uint32_t *)(0xf88030b8u) =0x9;      //spi1 mio46-49
    61002e00:	d2861700 	mov	x0, #0x30b8                	// #12472
    61002e04:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e08:	52800121 	mov	w1, #0x9                   	// #9
    61002e0c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030bcu) =0x9;
    61002e10:	d2861780 	mov	x0, #0x30bc                	// #12476
    61002e14:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e18:	52800121 	mov	w1, #0x9                   	// #9
    61002e1c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030c0u) =0x9;
    61002e20:	d2861800 	mov	x0, #0x30c0                	// #12480
    61002e24:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e28:	52800121 	mov	w1, #0x9                   	// #9
    61002e2c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030c4u) =0x9;
    61002e30:	d2861880 	mov	x0, #0x30c4                	// #12484
    61002e34:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e38:	52800121 	mov	w1, #0x9                   	// #9
    61002e3c:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803428u) =0x1;      //emio_sel9
    61002e40:	d2868500 	mov	x0, #0x3428                	// #13352
    61002e44:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e48:	52800021 	mov	w1, #0x1                   	// #1
    61002e4c:	b9000001 	str	w1, [x0]

    *(uint32_t *)(0xf88030c8u) =0x0;      //i2c0 mio50-51
    61002e50:	d2861900 	mov	x0, #0x30c8                	// #12488
    61002e54:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e58:	b900001f 	str	wzr, [x0]
    *(uint32_t *)(0xf88030ccu) =0x0;
    61002e5c:	d2861980 	mov	x0, #0x30cc                	// #12492
    61002e60:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e64:	b900001f 	str	wzr, [x0]
    *(uint32_t *)(0xf8803400u) =0x1;      //emio_sel12
    61002e68:	d2868000 	mov	x0, #0x3400                	// #13312
    61002e6c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e70:	52800021 	mov	w1, #0x1                   	// #1
    61002e74:	b9000001 	str	w1, [x0]
    
    *(uint32_t *)(0xf88030d0u) =0xf;      //mdc1   MIO52-53
    61002e78:	d2861a00 	mov	x0, #0x30d0                	// #12496
    61002e7c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e80:	528001e1 	mov	w1, #0xf                   	// #15
    61002e84:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf88030d4u) =0xf;      //mdio1
    61002e88:	d2861a80 	mov	x0, #0x30d4                	// #12500
    61002e8c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002e90:	528001e1 	mov	w1, #0xf                   	// #15
    61002e94:	b9000001 	str	w1, [x0]
    *(uint32_t *)(0xf8803438u) =0x1;      //emio_sel
    61002e98:	d2868700 	mov	x0, #0x3438                	// #13368
    61002e9c:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002ea0:	52800021 	mov	w1, #0x1                   	// #1
    61002ea4:	b9000001 	str	w1, [x0]

}
    61002ea8:	d503201f 	nop
    61002eac:	d65f03c0 	ret

Disassembly of section .text.setvbuf:

0000000061002eb0 <setvbuf>:
unsigned long strtoul(const char *nptr, char **endptr, int base);
long long strtoll(const char *nptr, char **endptr, int base);
unsigned long long strtoull(const char *nptr, char **endptr, int base);

static int inline setvbuf(FILE * stream, char * buf, int mode,
         size_t size){
    61002eb0:	d10083ff 	sub	sp, sp, #0x20
    61002eb4:	f9000fe0 	str	x0, [sp, #24]
    61002eb8:	f9000be1 	str	x1, [sp, #16]
    61002ebc:	b9000fe2 	str	w2, [sp, #12]
    61002ec0:	f90003e3 	str	x3, [sp]
};
    61002ec4:	d503201f 	nop
    61002ec8:	910083ff 	add	sp, sp, #0x20
    61002ecc:	d65f03c0 	ret

Disassembly of section .text.AlUart_Init:

0000000061002ed0 <AlUart_Init>:
    \param  baudrate: uart buadrate
    \param  bit_length: bit length (5/6/7/8)
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t AlUart_Init(AL_UART_TypeDef *uart, uint32_t baudrate,AL_UART_BIT_LENGTH bit_length, AL_UART_STOP_BIT stopbit)
{
    61002ed0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
    61002ed4:	910003fd 	mov	x29, sp
    61002ed8:	f90017e0 	str	x0, [sp, #40]
    61002edc:	b90027e1 	str	w1, [sp, #36]
    61002ee0:	b90023e2 	str	w2, [sp, #32]
    61002ee4:	b9001fe3 	str	w3, [sp, #28]
    if (__RARELY(uart == NULL)) {
    61002ee8:	f94017e0 	ldr	x0, [sp, #40]
    61002eec:	f100001f 	cmp	x0, #0x0
    61002ef0:	1a9f17e0 	cset	w0, eq  // eq = none
    61002ef4:	12001c00 	and	w0, w0, #0xff
    61002ef8:	92401c00 	and	x0, x0, #0xff
    61002efc:	f100001f 	cmp	x0, #0x0
    61002f00:	54000060 	b.eq	61002f0c <AlUart_Init+0x3c>  // b.none
        return -1;
    61002f04:	12800000 	mov	w0, #0xffffffff            	// #-1
    61002f08:	1400001e 	b	61002f80 <AlUart_Init+0xb0>
    }
    setvbuf(stdout, NULL, _IONBF, 0);
    61002f0c:	d2800003 	mov	x3, #0x0                   	// #0
    61002f10:	52800042 	mov	w2, #0x2                   	// #2
    61002f14:	d2800001 	mov	x1, #0x0                   	// #0
    61002f18:	d2800020 	mov	x0, #0x1                   	// #1
    61002f1c:	97ffffe5 	bl	61002eb0 <setvbuf>
    //AlUart_enablePtime(uart);					//enable programmable THR empty mode
    *(uint32_t *)(0xf8803068U) = 0x3;
    61002f20:	d2860d00 	mov	x0, #0x3068                	// #12392
    61002f24:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002f28:	52800061 	mov	w1, #0x3                   	// #3
    61002f2c:	b9000001 	str	w1, [x0]
	*(uint32_t *)(0xf880306cU) = 0x3;
    61002f30:	d2860d80 	mov	x0, #0x306c                	// #12396
    61002f34:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002f38:	52800061 	mov	w1, #0x3                   	// #3
    61002f3c:	b9000001 	str	w1, [x0]
	*(uint32_t *)(0xf8803410U) = 0x1;
    61002f40:	d2868200 	mov	x0, #0x3410                	// #13328
    61002f44:	f2bf1000 	movk	x0, #0xf880, lsl #16
    61002f48:	52800021 	mov	w1, #0x1                   	// #1
    61002f4c:	b9000001 	str	w1, [x0]
    AlUart_SetBaudrate(uart, baudrate);		//set_baudrate
    61002f50:	b94027e1 	ldr	w1, [sp, #36]
    61002f54:	f94017e0 	ldr	x0, [sp, #40]
    61002f58:	9400000c 	bl	61002f88 <AlUart_SetBaudrate>
    AlUart_DatalengConfig(uart,bit_length);	//set_dataleng
    61002f5c:	b94023e1 	ldr	w1, [sp, #32]
    61002f60:	f94017e0 	ldr	x0, [sp, #40]
    61002f64:	94000037 	bl	61003040 <AlUart_DatalengConfig>
    AlUart_ConfigStopbit(uart,stopbit);		//set_stopbit
    61002f68:	b9401fe1 	ldr	w1, [sp, #28]
    61002f6c:	f94017e0 	ldr	x0, [sp, #40]
    61002f70:	9400005e 	bl	610030e8 <AlUart_ConfigStopbit>
    AlUart_FifoEnable(uart);
    61002f74:	f94017e0 	ldr	x0, [sp, #40]
    61002f78:	94000087 	bl	61003194 <AlUart_FifoEnable>
    return 0;
    61002f7c:	52800000 	mov	w0, #0x0                   	// #0
}
    61002f80:	a8c37bfd 	ldp	x29, x30, [sp], #48
    61002f84:	d65f03c0 	ret

Disassembly of section .text.AlUart_SetBaudrate:

0000000061002f88 <AlUart_SetBaudrate>:
uint8_t AlUart_SetBaudrate(AL_UART_TypeDef *uart, uint32_t baudrate){
    61002f88:	d10043ff 	sub	sp, sp, #0x10
    61002f8c:	f90007e0 	str	x0, [sp, #8]
    61002f90:	b90007e1 	str	w1, [sp, #4]
    uart->LCR 		 |= UART_REG_LCR_DLAB_MASK ;
    61002f94:	f94007e0 	ldr	x0, [sp, #8]
    61002f98:	b9400c00 	ldr	w0, [x0, #12]
    61002f9c:	32190001 	orr	w1, w0, #0x80
    61002fa0:	f94007e0 	ldr	x0, [sp, #8]
    61002fa4:	b9000c01 	str	w1, [x0, #12]
    uart->DLH_IER 	  = ((uint16_t)(uart_clock / (baudrate*16))) >> 8 ;
    61002fa8:	b94007e0 	ldr	w0, [sp, #4]
    61002fac:	531c6c00 	lsl	w0, w0, #4
    61002fb0:	528b4001 	mov	w1, #0x5a00                	// #23040
    61002fb4:	72a04c41 	movk	w1, #0x262, lsl #16
    61002fb8:	1ac00820 	udiv	w0, w1, w0
    61002fbc:	12003c00 	and	w0, w0, #0xffff
    61002fc0:	53087c00 	lsr	w0, w0, #8
    61002fc4:	12003c00 	and	w0, w0, #0xffff
    61002fc8:	2a0003e1 	mov	w1, w0
    61002fcc:	f94007e0 	ldr	x0, [sp, #8]
    61002fd0:	b9000401 	str	w1, [x0, #4]
    uart->RBR_THR_DLL = ((uint8_t)(uart_clock / (baudrate*16))) ;
    61002fd4:	b94007e0 	ldr	w0, [sp, #4]
    61002fd8:	531c6c00 	lsl	w0, w0, #4
    61002fdc:	528b4001 	mov	w1, #0x5a00                	// #23040
    61002fe0:	72a04c41 	movk	w1, #0x262, lsl #16
    61002fe4:	1ac00820 	udiv	w0, w1, w0
    61002fe8:	12001c00 	and	w0, w0, #0xff
    61002fec:	2a0003e1 	mov	w1, w0
    61002ff0:	f94007e0 	ldr	x0, [sp, #8]
    61002ff4:	b9000001 	str	w1, [x0]
    uart->MCR 		 |= UART_REG_MCR_DTR_MASK;
    61002ff8:	f94007e0 	ldr	x0, [sp, #8]
    61002ffc:	b9401000 	ldr	w0, [x0, #16]
    61003000:	32000001 	orr	w1, w0, #0x1
    61003004:	f94007e0 	ldr	x0, [sp, #8]
    61003008:	b9001001 	str	w1, [x0, #16]
    uart->MCR 		 |= UART_REG_MCR_RTS_MASK;
    6100300c:	f94007e0 	ldr	x0, [sp, #8]
    61003010:	b9401000 	ldr	w0, [x0, #16]
    61003014:	321f0001 	orr	w1, w0, #0x2
    61003018:	f94007e0 	ldr	x0, [sp, #8]
    6100301c:	b9001001 	str	w1, [x0, #16]
    uart->LCR 		 &= (uint8_t)(0x7f);
    61003020:	f94007e0 	ldr	x0, [sp, #8]
    61003024:	b9400c00 	ldr	w0, [x0, #12]
    61003028:	12001801 	and	w1, w0, #0x7f
    6100302c:	f94007e0 	ldr	x0, [sp, #8]
    61003030:	b9000c01 	str	w1, [x0, #12]
    return 0;
    61003034:	52800000 	mov	w0, #0x0                   	// #0
}
    61003038:	910043ff 	add	sp, sp, #0x10
    6100303c:	d65f03c0 	ret

Disassembly of section .text.AlUart_DatalengConfig:

0000000061003040 <AlUart_DatalengConfig>:
uint8_t AlUart_DatalengConfig(AL_UART_TypeDef *uart,AL_UART_BIT_LENGTH bit_length){
    61003040:	d10043ff 	sub	sp, sp, #0x10
    61003044:	f90007e0 	str	x0, [sp, #8]
    61003048:	b90007e1 	str	w1, [sp, #4]
	switch (bit_length)
    6100304c:	b94007e0 	ldr	w0, [sp, #4]
    61003050:	7100081f 	cmp	w0, #0x2
    61003054:	540002c0 	b.eq	610030ac <AlUart_DatalengConfig+0x6c>  // b.none
    61003058:	b94007e0 	ldr	w0, [sp, #4]
    6100305c:	7100081f 	cmp	w0, #0x2
    61003060:	54000328 	b.hi	610030c4 <AlUart_DatalengConfig+0x84>  // b.pmore
    61003064:	b94007e0 	ldr	w0, [sp, #4]
    61003068:	7100001f 	cmp	w0, #0x0
    6100306c:	540000a0 	b.eq	61003080 <AlUart_DatalengConfig+0x40>  // b.none
    61003070:	b94007e0 	ldr	w0, [sp, #4]
    61003074:	7100041f 	cmp	w0, #0x1
    61003078:	540000e0 	b.eq	61003094 <AlUart_DatalengConfig+0x54>  // b.none
    6100307c:	14000012 	b	610030c4 <AlUart_DatalengConfig+0x84>
	    {
	    case 0:
	    	uart->LCR |= UART_REG_LCR_DLS_5BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61003080:	f94007e0 	ldr	x0, [sp, #8]
    61003084:	b9400c01 	ldr	w1, [x0, #12]
    61003088:	f94007e0 	ldr	x0, [sp, #8]
    6100308c:	b9000c01 	str	w1, [x0, #12]
	    	break;
    61003090:	14000013 	b	610030dc <AlUart_DatalengConfig+0x9c>
	    case 1:
	    	uart->LCR |= UART_REG_LCR_DLS_6BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61003094:	f94007e0 	ldr	x0, [sp, #8]
    61003098:	b9400c00 	ldr	w0, [x0, #12]
    6100309c:	32000001 	orr	w1, w0, #0x1
    610030a0:	f94007e0 	ldr	x0, [sp, #8]
    610030a4:	b9000c01 	str	w1, [x0, #12]
	    	break;
    610030a8:	1400000d 	b	610030dc <AlUart_DatalengConfig+0x9c>
	    case 2:
	        uart->LCR |= UART_REG_LCR_DLS_7BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    610030ac:	f94007e0 	ldr	x0, [sp, #8]
    610030b0:	b9400c00 	ldr	w0, [x0, #12]
    610030b4:	321f0001 	orr	w1, w0, #0x2
    610030b8:	f94007e0 	ldr	x0, [sp, #8]
    610030bc:	b9000c01 	str	w1, [x0, #12]
	        break;
    610030c0:	14000007 	b	610030dc <AlUart_DatalengConfig+0x9c>
	    default:
	    	uart->LCR |= UART_REG_LCR_DLS_8BITS;
    610030c4:	f94007e0 	ldr	x0, [sp, #8]
    610030c8:	b9400c00 	ldr	w0, [x0, #12]
    610030cc:	32000401 	orr	w1, w0, #0x3
    610030d0:	f94007e0 	ldr	x0, [sp, #8]
    610030d4:	b9000c01 	str	w1, [x0, #12]
	    	break;
    610030d8:	d503201f 	nop
	    }
	return 0;
    610030dc:	52800000 	mov	w0, #0x0                   	// #0
}
    610030e0:	910043ff 	add	sp, sp, #0x10
    610030e4:	d65f03c0 	ret

Disassembly of section .text.AlUart_ConfigStopbit:

00000000610030e8 <AlUart_ConfigStopbit>:
    \param  uart: uart parameter stuct
    \param  stopbit: stop bit (1/2/0.5/1.5)
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t AlUart_ConfigStopbit(AL_UART_TypeDef *uart, AL_UART_STOP_BIT stopbit)
{
    610030e8:	d10043ff 	sub	sp, sp, #0x10
    610030ec:	f90007e0 	str	x0, [sp, #8]
    610030f0:	b90007e1 	str	w1, [sp, #4]
   if (__RARELY(uart == NULL)) {
    610030f4:	f94007e0 	ldr	x0, [sp, #8]
    610030f8:	f100001f 	cmp	x0, #0x0
    610030fc:	1a9f17e0 	cset	w0, eq  // eq = none
    61003100:	12001c00 	and	w0, w0, #0xff
    61003104:	92401c00 	and	x0, x0, #0xff
    61003108:	f100001f 	cmp	x0, #0x0
    6100310c:	54000060 	b.eq	61003118 <AlUart_ConfigStopbit+0x30>  // b.none
        return -1;
    61003110:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003114:	1400001e 	b	6100318c <AlUart_ConfigStopbit+0xa4>
    }
   switch(stopbit)
    61003118:	b94007e0 	ldr	w0, [sp, #4]
    6100311c:	7100001f 	cmp	w0, #0x0
    61003120:	540000a0 	b.eq	61003134 <AlUart_ConfigStopbit+0x4c>  // b.none
    61003124:	b94007e0 	ldr	w0, [sp, #4]
    61003128:	7100041f 	cmp	w0, #0x1
    6100312c:	540000e0 	b.eq	61003148 <AlUart_ConfigStopbit+0x60>  // b.none
    61003130:	14000010 	b	61003170 <AlUart_ConfigStopbit+0x88>
      {
      case 0:
   	   uart->LCR |=  UART_REG_LCR_STOP_1BITS;
    61003134:	f94007e0 	ldr	x0, [sp, #8]
    61003138:	b9400c01 	ldr	w1, [x0, #12]
    6100313c:	f94007e0 	ldr	x0, [sp, #8]
    61003140:	b9000c01 	str	w1, [x0, #12]
   	   break;
    61003144:	14000011 	b	61003188 <AlUart_ConfigStopbit+0xa0>
      case 1:
   	   uart->LCR &= ~UART_REG_LCR_DLS_5BITS;
    61003148:	f94007e0 	ldr	x0, [sp, #8]
    6100314c:	b9400c01 	ldr	w1, [x0, #12]
    61003150:	f94007e0 	ldr	x0, [sp, #8]
    61003154:	b9000c01 	str	w1, [x0, #12]
   	   uart->LCR |=  UART_REG_LCR_STOP_2BITS;
    61003158:	f94007e0 	ldr	x0, [sp, #8]
    6100315c:	b9400c00 	ldr	w0, [x0, #12]
    61003160:	321e0001 	orr	w1, w0, #0x4
    61003164:	f94007e0 	ldr	x0, [sp, #8]
    61003168:	b9000c01 	str	w1, [x0, #12]
   	   break;
    6100316c:	14000007 	b	61003188 <AlUart_ConfigStopbit+0xa0>
      default:
   	   uart->LCR |=  UART_REG_LCR_STOP_2BITS;
    61003170:	f94007e0 	ldr	x0, [sp, #8]
    61003174:	b9400c00 	ldr	w0, [x0, #12]
    61003178:	321e0001 	orr	w1, w0, #0x4
    6100317c:	f94007e0 	ldr	x0, [sp, #8]
    61003180:	b9000c01 	str	w1, [x0, #12]
   	   break;
    61003184:	d503201f 	nop
      }
    return 0;
    61003188:	52800000 	mov	w0, #0x0                   	// #0
}
    6100318c:	910043ff 	add	sp, sp, #0x10
    61003190:	d65f03c0 	ret

Disassembly of section .text.AlUart_FifoEnable:

0000000061003194 <AlUart_FifoEnable>:
    \brief  uart FIFOF enable
    \param  uart: uart parameter stuct
    \retval FCR:  value
*/
uint8_t AlUart_FifoEnable(AL_UART_TypeDef *uart)
{
    61003194:	d10043ff 	sub	sp, sp, #0x10
    61003198:	f90007e0 	str	x0, [sp, #8]

    if (__RARELY(uart == NULL)) {
    6100319c:	f94007e0 	ldr	x0, [sp, #8]
    610031a0:	f100001f 	cmp	x0, #0x0
    610031a4:	1a9f17e0 	cset	w0, eq  // eq = none
    610031a8:	12001c00 	and	w0, w0, #0xff
    610031ac:	92401c00 	and	x0, x0, #0xff
    610031b0:	f100001f 	cmp	x0, #0x0
    610031b4:	54000060 	b.eq	610031c0 <AlUart_FifoEnable+0x2c>  // b.none
        return -1;
    610031b8:	52801fe0 	mov	w0, #0xff                  	// #255
    610031bc:	14000005 	b	610031d0 <AlUart_FifoEnable+0x3c>
    }
    uart ->IIR_FCR = UART_REG_FCR_FIFOE_MASK;
    610031c0:	f94007e0 	ldr	x0, [sp, #8]
    610031c4:	52800021 	mov	w1, #0x1                   	// #1
    610031c8:	b9000801 	str	w1, [x0, #8]
    return 0;
    610031cc:	52800000 	mov	w0, #0x0                   	// #0
}
    610031d0:	910043ff 	add	sp, sp, #0x10
    610031d4:	d65f03c0 	ret

Disassembly of section .text.uart_write:

00000000610031d8 <uart_write>:
    \param  uart: uart parameter stuct
    \param  val: value of TXFIFO
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t uart_write(AL_UART_TypeDef *uart, volatile uint8_t val)
{
    610031d8:	d10043ff 	sub	sp, sp, #0x10
    610031dc:	f90007e0 	str	x0, [sp, #8]
    610031e0:	39001fe1 	strb	w1, [sp, #7]
   if (__RARELY(uart == NULL)) {
    610031e4:	f94007e0 	ldr	x0, [sp, #8]
    610031e8:	f100001f 	cmp	x0, #0x0
    610031ec:	1a9f17e0 	cset	w0, eq  // eq = none
    610031f0:	12001c00 	and	w0, w0, #0xff
    610031f4:	92401c00 	and	x0, x0, #0xff
    610031f8:	f100001f 	cmp	x0, #0x0
    610031fc:	54000060 	b.eq	61003208 <uart_write+0x30>  // b.none
        return -1;
    61003200:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003204:	1400000d 	b	61003238 <uart_write+0x60>
    }
	   while (0==(uart->LSR & 0x20));
    61003208:	d503201f 	nop
    6100320c:	f94007e0 	ldr	x0, [sp, #8]
    61003210:	b9401400 	ldr	w0, [x0, #20]
    61003214:	121b0000 	and	w0, w0, #0x20
    61003218:	7100001f 	cmp	w0, #0x0
    6100321c:	54ffff80 	b.eq	6100320c <uart_write+0x34>  // b.none
	   uart ->RBR_THR_DLL = val & 0xFF ;
    61003220:	39401fe0 	ldrb	w0, [sp, #7]
    61003224:	12001c00 	and	w0, w0, #0xff
    61003228:	2a0003e1 	mov	w1, w0
    6100322c:	f94007e0 	ldr	x0, [sp, #8]
    61003230:	b9000001 	str	w1, [x0]
    return 0;
    61003234:	52800000 	mov	w0, #0x0                   	// #0
}
    61003238:	910043ff 	add	sp, sp, #0x10
    6100323c:	d65f03c0 	ret

Disassembly of section .text.spi_dwc_ssi_disable:

0000000061003240 <spi_dwc_ssi_disable>:
    \param[out] none
    \retval     none
*/

int32_t spi_dwc_ssi_disable(SPI_TypeDef *spi)
{
    61003240:	d10043ff 	sub	sp, sp, #0x10
    61003244:	f90007e0 	str	x0, [sp, #8]
	if (__RARELY(spi == NULL))
    61003248:	f94007e0 	ldr	x0, [sp, #8]
    6100324c:	f100001f 	cmp	x0, #0x0
    61003250:	1a9f17e0 	cset	w0, eq  // eq = none
    61003254:	12001c00 	and	w0, w0, #0xff
    61003258:	92401c00 	and	x0, x0, #0xff
    6100325c:	f100001f 	cmp	x0, #0x0
    61003260:	54000060 	b.eq	6100326c <spi_dwc_ssi_disable+0x2c>  // b.none
	{
		return -1;
    61003264:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003268:	14000004 	b	61003278 <spi_dwc_ssi_disable+0x38>
	}
    spi->SSIENR = SSIC_DIS;
    6100326c:	f94007e0 	ldr	x0, [sp, #8]
    61003270:	b900081f 	str	wzr, [x0, #8]
    return 0;
    61003274:	52800000 	mov	w0, #0x0                   	// #0
}
    61003278:	910043ff 	add	sp, sp, #0x10
    6100327c:	d65f03c0 	ret

Disassembly of section .text.spi_dwc_ssi_enable:

0000000061003280 <spi_dwc_ssi_enable>:
    \param[out] none
    \retval     none
*/

int32_t spi_dwc_ssi_enable(SPI_TypeDef *spi)
{
    61003280:	d10043ff 	sub	sp, sp, #0x10
    61003284:	f90007e0 	str	x0, [sp, #8]
	if (__RARELY(spi == NULL))
    61003288:	f94007e0 	ldr	x0, [sp, #8]
    6100328c:	f100001f 	cmp	x0, #0x0
    61003290:	1a9f17e0 	cset	w0, eq  // eq = none
    61003294:	12001c00 	and	w0, w0, #0xff
    61003298:	92401c00 	and	x0, x0, #0xff
    6100329c:	f100001f 	cmp	x0, #0x0
    610032a0:	54000060 	b.eq	610032ac <spi_dwc_ssi_enable+0x2c>  // b.none
	{
		return -1;
    610032a4:	12800000 	mov	w0, #0xffffffff            	// #-1
    610032a8:	14000005 	b	610032bc <spi_dwc_ssi_enable+0x3c>
	}
    spi->SSIENR = SSIC_EN;
    610032ac:	f94007e0 	ldr	x0, [sp, #8]
    610032b0:	52800021 	mov	w1, #0x1                   	// #1
    610032b4:	b9000801 	str	w1, [x0, #8]
    return 0;
    610032b8:	52800000 	mov	w0, #0x0                   	// #0
}
    610032bc:	910043ff 	add	sp, sp, #0x10
    610032c0:	d65f03c0 	ret

Disassembly of section .text.spi_x1_mode:

00000000610032c4 <spi_x1_mode>:
    \param[out] none
    \retval     none
*/

int32_t spi_x1_mode(SPI_TypeDef *spi)
{
    610032c4:	d10043ff 	sub	sp, sp, #0x10
    610032c8:	f90007e0 	str	x0, [sp, #8]
	if (__RARELY(spi == NULL))
    610032cc:	f94007e0 	ldr	x0, [sp, #8]
    610032d0:	f100001f 	cmp	x0, #0x0
    610032d4:	1a9f17e0 	cset	w0, eq  // eq = none
    610032d8:	12001c00 	and	w0, w0, #0xff
    610032dc:	92401c00 	and	x0, x0, #0xff
    610032e0:	f100001f 	cmp	x0, #0x0
    610032e4:	54000060 	b.eq	610032f0 <spi_x1_mode+0x2c>  // b.none
	{
		return -1;
    610032e8:	12800000 	mov	w0, #0xffffffff            	// #-1
    610032ec:	14000007 	b	61003308 <spi_x1_mode+0x44>
	}
    spi->CTRLR0 &= (~SPI_CTRLR0_SPI_FRF);
    610032f0:	f94007e0 	ldr	x0, [sp, #8]
    610032f4:	b9400000 	ldr	w0, [x0]
    610032f8:	12097401 	and	w1, w0, #0xff9fffff
    610032fc:	f94007e0 	ldr	x0, [sp, #8]
    61003300:	b9000001 	str	w1, [x0]
//	spi->CTRLR0.SPI_FRF = SPI_FRF_X1_MODE;
    return 0;
    61003304:	52800000 	mov	w0, #0x0                   	// #0
}
    61003308:	910043ff 	add	sp, sp, #0x10
    6100330c:	d65f03c0 	ret

Disassembly of section .text.spi_tmod_tx:

0000000061003310 <spi_tmod_tx>:
    \param[in]  spi: SPI
    \param[out] none
    \retval     none
*/
int32_t spi_tmod_tx(SPI_TypeDef *spi)
{
    61003310:	d10043ff 	sub	sp, sp, #0x10
    61003314:	f90007e0 	str	x0, [sp, #8]
	if (__RARELY(spi == NULL))
    61003318:	f94007e0 	ldr	x0, [sp, #8]
    6100331c:	f100001f 	cmp	x0, #0x0
    61003320:	1a9f17e0 	cset	w0, eq  // eq = none
    61003324:	12001c00 	and	w0, w0, #0xff
    61003328:	92401c00 	and	x0, x0, #0xff
    6100332c:	f100001f 	cmp	x0, #0x0
    61003330:	54000060 	b.eq	6100333c <spi_tmod_tx+0x2c>  // b.none
	{
		return -1;
    61003334:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003338:	1400000c 	b	61003368 <spi_tmod_tx+0x58>
	}
	spi->CTRLR0 &=  (~SPI_CTRLR0_TMOD); // clr
    6100333c:	f94007e0 	ldr	x0, [sp, #8]
    61003340:	b9400000 	ldr	w0, [x0]
    61003344:	12167401 	and	w1, w0, #0xfffffcff
    61003348:	f94007e0 	ldr	x0, [sp, #8]
    6100334c:	b9000001 	str	w1, [x0]
	spi->CTRLR0 |= BIT(8);
    61003350:	f94007e0 	ldr	x0, [sp, #8]
    61003354:	b9400000 	ldr	w0, [x0]
    61003358:	32180001 	orr	w1, w0, #0x100
    6100335c:	f94007e0 	ldr	x0, [sp, #8]
    61003360:	b9000001 	str	w1, [x0]
//	spi->CTRLR0.TMOD = TMOD_TX_ONLY;
    return 0;
    61003364:	52800000 	mov	w0, #0x0                   	// #0
}
    61003368:	910043ff 	add	sp, sp, #0x10
    6100336c:	d65f03c0 	ret

Disassembly of section .text.spi_tmod_e2prom:

0000000061003370 <spi_tmod_e2prom>:
    \param[in]  spi: SPI
    \param[out] none
    \retval     none
*/
int32_t spi_tmod_e2prom(SPI_TypeDef *spi)
{
    61003370:	d10043ff 	sub	sp, sp, #0x10
    61003374:	f90007e0 	str	x0, [sp, #8]
	if (__RARELY(spi == NULL))
    61003378:	f94007e0 	ldr	x0, [sp, #8]
    6100337c:	f100001f 	cmp	x0, #0x0
    61003380:	1a9f17e0 	cset	w0, eq  // eq = none
    61003384:	12001c00 	and	w0, w0, #0xff
    61003388:	92401c00 	and	x0, x0, #0xff
    6100338c:	f100001f 	cmp	x0, #0x0
    61003390:	54000060 	b.eq	6100339c <spi_tmod_e2prom+0x2c>  // b.none
	{
		return -1;
    61003394:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003398:	14000007 	b	610033b4 <spi_tmod_e2prom+0x44>
	}
	spi->CTRLR0 |= SPI_CTRLR0_TMOD;
    6100339c:	f94007e0 	ldr	x0, [sp, #8]
    610033a0:	b9400000 	ldr	w0, [x0]
    610033a4:	32180401 	orr	w1, w0, #0x300
    610033a8:	f94007e0 	ldr	x0, [sp, #8]
    610033ac:	b9000001 	str	w1, [x0]
//	spi->CTRLR0.TMOD = TMOD_EEPROM;
	return 0;
    610033b0:	52800000 	mov	w0, #0x0                   	// #0
}
    610033b4:	910043ff 	add	sp, sp, #0x10
    610033b8:	d65f03c0 	ret

Disassembly of section .text.spi_sste_dis:

00000000610033bc <spi_sste_dis>:
    \param[in]  spi: SPIx(x=0,1)
    \param[out] none
    \retval     none
*/
int32_t spi_sste_dis(SPI_TypeDef *spi)
{
    610033bc:	d10043ff 	sub	sp, sp, #0x10
    610033c0:	f90007e0 	str	x0, [sp, #8]
	if (__RARELY(spi == NULL))
    610033c4:	f94007e0 	ldr	x0, [sp, #8]
    610033c8:	f100001f 	cmp	x0, #0x0
    610033cc:	1a9f17e0 	cset	w0, eq  // eq = none
    610033d0:	12001c00 	and	w0, w0, #0xff
    610033d4:	92401c00 	and	x0, x0, #0xff
    610033d8:	f100001f 	cmp	x0, #0x0
    610033dc:	54000060 	b.eq	610033e8 <spi_sste_dis+0x2c>  // b.none
	{
		return -1;
    610033e0:	12800000 	mov	w0, #0xffffffff            	// #-1
    610033e4:	14000007 	b	61003400 <spi_sste_dis+0x44>
	}
	spi->CTRLR0 &= (~SPI_CTRLR0_SSTE);
    610033e8:	f94007e0 	ldr	x0, [sp, #8]
    610033ec:	b9400000 	ldr	w0, [x0]
    610033f0:	12077801 	and	w1, w0, #0xfeffffff
    610033f4:	f94007e0 	ldr	x0, [sp, #8]
    610033f8:	b9000001 	str	w1, [x0]
	return 0;
    610033fc:	52800000 	mov	w0, #0x0                   	// #0
}
    61003400:	910043ff 	add	sp, sp, #0x10
    61003404:	d65f03c0 	ret

Disassembly of section .text.spi_dfs:

0000000061003408 <spi_dfs>:
    \param[in]  spi: SPI
    \param[out] none
    \retval     none
*/
int32_t spi_dfs(SPI_TypeDef *spi, uint32_t len)
{
    61003408:	d10043ff 	sub	sp, sp, #0x10
    6100340c:	f90007e0 	str	x0, [sp, #8]
    61003410:	b90007e1 	str	w1, [sp, #4]
	if (__RARELY(spi == NULL))
    61003414:	f94007e0 	ldr	x0, [sp, #8]
    61003418:	f100001f 	cmp	x0, #0x0
    6100341c:	1a9f17e0 	cset	w0, eq  // eq = none
    61003420:	12001c00 	and	w0, w0, #0xff
    61003424:	92401c00 	and	x0, x0, #0xff
    61003428:	f100001f 	cmp	x0, #0x0
    6100342c:	54000060 	b.eq	61003438 <spi_dfs+0x30>  // b.none
	{
		return -1;
    61003430:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003434:	14000008 	b	61003454 <spi_dfs+0x4c>
	}
	spi->CTRLR0 |= len;
    61003438:	f94007e0 	ldr	x0, [sp, #8]
    6100343c:	b9400001 	ldr	w1, [x0]
    61003440:	b94007e0 	ldr	w0, [sp, #4]
    61003444:	2a000021 	orr	w1, w1, w0
    61003448:	f94007e0 	ldr	x0, [sp, #8]
    6100344c:	b9000001 	str	w1, [x0]
//	spi->CTRLR0.DFS = len;
	return 0;
    61003450:	52800000 	mov	w0, #0x0                   	// #0
}
    61003454:	910043ff 	add	sp, sp, #0x10
    61003458:	d65f03c0 	ret

Disassembly of section .text.spi_ser:

000000006100345c <spi_ser>:
    \param[in]  spi: SPIx(x=0,1)
    \param[out] none
    \retval     none
*/
int32_t spi_ser(SPI_TypeDef *spi, uint32_t slv)
{
    6100345c:	d10043ff 	sub	sp, sp, #0x10
    61003460:	f90007e0 	str	x0, [sp, #8]
    61003464:	b90007e1 	str	w1, [sp, #4]
	if (__RARELY(spi == NULL))
    61003468:	f94007e0 	ldr	x0, [sp, #8]
    6100346c:	f100001f 	cmp	x0, #0x0
    61003470:	1a9f17e0 	cset	w0, eq  // eq = none
    61003474:	12001c00 	and	w0, w0, #0xff
    61003478:	92401c00 	and	x0, x0, #0xff
    6100347c:	f100001f 	cmp	x0, #0x0
    61003480:	54000060 	b.eq	6100348c <spi_ser+0x30>  // b.none
	{
		return -1;
    61003484:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003488:	14000005 	b	6100349c <spi_ser+0x40>
	}
	spi->SER = slv;
    6100348c:	f94007e0 	ldr	x0, [sp, #8]
    61003490:	b94007e1 	ldr	w1, [sp, #4]
    61003494:	b9001001 	str	w1, [x0, #16]
	return 0;
    61003498:	52800000 	mov	w0, #0x0                   	// #0
}
    6100349c:	910043ff 	add	sp, sp, #0x10
    610034a0:	d65f03c0 	ret

Disassembly of section .text.spi_sckdiv_cfg:

00000000610034a4 <spi_sckdiv_cfg>:
    \param[in]  spi: SPI
    \param[out] none
    \retval     none
*/
int32_t spi_sckdiv_cfg(SPI_TypeDef *spi, uint32_t div)
{
    610034a4:	d10043ff 	sub	sp, sp, #0x10
    610034a8:	f90007e0 	str	x0, [sp, #8]
    610034ac:	b90007e1 	str	w1, [sp, #4]
	if (__RARELY(spi == NULL))
    610034b0:	f94007e0 	ldr	x0, [sp, #8]
    610034b4:	f100001f 	cmp	x0, #0x0
    610034b8:	1a9f17e0 	cset	w0, eq  // eq = none
    610034bc:	12001c00 	and	w0, w0, #0xff
    610034c0:	92401c00 	and	x0, x0, #0xff
    610034c4:	f100001f 	cmp	x0, #0x0
    610034c8:	54000060 	b.eq	610034d4 <spi_sckdiv_cfg+0x30>  // b.none
	{
		return -1;
    610034cc:	12800000 	mov	w0, #0xffffffff            	// #-1
    610034d0:	14000005 	b	610034e4 <spi_sckdiv_cfg+0x40>
	}
	spi->BAUDR = (uint32_t) (div);
    610034d4:	f94007e0 	ldr	x0, [sp, #8]
    610034d8:	b94007e1 	ldr	w1, [sp, #4]
    610034dc:	b9001401 	str	w1, [x0, #20]
    return 0;
    610034e0:	52800000 	mov	w0, #0x0                   	// #0
}
    610034e4:	910043ff 	add	sp, sp, #0x10
    610034e8:	d65f03c0 	ret

Disassembly of section .text.spi_txftl_tft:

00000000610034ec <spi_txftl_tft>:
    \param[in]  spi: spi
    \param[out] none
    \retval     none
*/
int32_t spi_txftl_tft(SPI_TypeDef *spi, uint32_t Threshold)
{
    610034ec:	d10043ff 	sub	sp, sp, #0x10
    610034f0:	f90007e0 	str	x0, [sp, #8]
    610034f4:	b90007e1 	str	w1, [sp, #4]
	if (__RARELY(spi == NULL))
    610034f8:	f94007e0 	ldr	x0, [sp, #8]
    610034fc:	f100001f 	cmp	x0, #0x0
    61003500:	1a9f17e0 	cset	w0, eq  // eq = none
    61003504:	12001c00 	and	w0, w0, #0xff
    61003508:	92401c00 	and	x0, x0, #0xff
    6100350c:	f100001f 	cmp	x0, #0x0
    61003510:	54000060 	b.eq	6100351c <spi_txftl_tft+0x30>  // b.none
	{
		return -1;
    61003514:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003518:	14000008 	b	61003538 <spi_txftl_tft+0x4c>
	}
	spi->TXFTLR |= (uint32_t) Threshold;
    6100351c:	f94007e0 	ldr	x0, [sp, #8]
    61003520:	b9401801 	ldr	w1, [x0, #24]
    61003524:	b94007e0 	ldr	w0, [sp, #4]
    61003528:	2a000021 	orr	w1, w1, w0
    6100352c:	f94007e0 	ldr	x0, [sp, #8]
    61003530:	b9001801 	str	w1, [x0, #24]
    return 0;
    61003534:	52800000 	mov	w0, #0x0                   	// #0
}
    61003538:	910043ff 	add	sp, sp, #0x10
    6100353c:	d65f03c0 	ret

Disassembly of section .text.spi_data_transmit:

0000000061003540 <spi_data_transmit>:
    \param[in]  data: data of transmission
    \param[out] none
    \retval     none
*/
int32_t spi_data_transmit(SPI_TypeDef *spi, uint32_t data)
{
    61003540:	d10043ff 	sub	sp, sp, #0x10
    61003544:	f90007e0 	str	x0, [sp, #8]
    61003548:	b90007e1 	str	w1, [sp, #4]
	if (__RARELY(spi == NULL))
    6100354c:	f94007e0 	ldr	x0, [sp, #8]
    61003550:	f100001f 	cmp	x0, #0x0
    61003554:	1a9f17e0 	cset	w0, eq  // eq = none
    61003558:	12001c00 	and	w0, w0, #0xff
    6100355c:	92401c00 	and	x0, x0, #0xff
    61003560:	f100001f 	cmp	x0, #0x0
    61003564:	54000060 	b.eq	61003570 <spi_data_transmit+0x30>  // b.none
	{
		return -1;
    61003568:	12800000 	mov	w0, #0xffffffff            	// #-1
    6100356c:	14000005 	b	61003580 <spi_data_transmit+0x40>
	}
	spi->DRx[0] = data;
    61003570:	f94007e0 	ldr	x0, [sp, #8]
    61003574:	b94007e1 	ldr	w1, [sp, #4]
    61003578:	b9006001 	str	w1, [x0, #96]
    return 0;
    6100357c:	52800000 	mov	w0, #0x0                   	// #0
}
    61003580:	910043ff 	add	sp, sp, #0x10
    61003584:	d65f03c0 	ret

Disassembly of section .text.spi_data_read:

0000000061003588 <spi_data_read>:
    \param[in]  data: data of transmission
    \param[out] none
    \retval     none
*/
uint32_t spi_data_read(SPI_TypeDef *spi)
{
    61003588:	d10043ff 	sub	sp, sp, #0x10
    6100358c:	f90007e0 	str	x0, [sp, #8]
    return spi->DRx[0];
    61003590:	f94007e0 	ldr	x0, [sp, #8]
    61003594:	b9406000 	ldr	w0, [x0, #96]
}
    61003598:	910043ff 	add	sp, sp, #0x10
    6100359c:	d65f03c0 	ret

Disassembly of section .text.spi_sr_tfe:

00000000610035a0 <spi_sr_tfe>:
    \param[in]  spi:
    \param[out] none
    \retval     none
*/
uint32_t spi_sr_tfe(SPI_TypeDef *spi)
{
    610035a0:	d10043ff 	sub	sp, sp, #0x10
    610035a4:	f90007e0 	str	x0, [sp, #8]
    if(spi->SR & SR_TFE_MASK)
    610035a8:	f94007e0 	ldr	x0, [sp, #8]
    610035ac:	b9402800 	ldr	w0, [x0, #40]
    610035b0:	121e0000 	and	w0, w0, #0x4
    610035b4:	7100001f 	cmp	w0, #0x0
    610035b8:	54000060 	b.eq	610035c4 <spi_sr_tfe+0x24>  // b.none
        return SPI_SR_TXFIFO_EMPTY;
    610035bc:	52800020 	mov	w0, #0x1                   	// #1
    610035c0:	14000002 	b	610035c8 <spi_sr_tfe+0x28>
    else
        return SPI_SR_TXFIFO_NOTEMPTY;
    610035c4:	52800000 	mov	w0, #0x0                   	// #0
}
    610035c8:	910043ff 	add	sp, sp, #0x10
    610035cc:	d65f03c0 	ret

Disassembly of section .text.spi_sr_busy:

00000000610035d0 <spi_sr_busy>:
    \param[in]  spi:
    \param[out] none
    \retval     none
*/
uint32_t spi_sr_busy(SPI_TypeDef *spi)
{
    610035d0:	d10043ff 	sub	sp, sp, #0x10
    610035d4:	f90007e0 	str	x0, [sp, #8]
    if(spi->SR & SR_BUSY_MASK)
    610035d8:	f94007e0 	ldr	x0, [sp, #8]
    610035dc:	b9402800 	ldr	w0, [x0, #40]
    610035e0:	12000000 	and	w0, w0, #0x1
    610035e4:	7100001f 	cmp	w0, #0x0
    610035e8:	54000060 	b.eq	610035f4 <spi_sr_busy+0x24>  // b.none
        return SPI_SR_BUSY;
    610035ec:	52800020 	mov	w0, #0x1                   	// #1
    610035f0:	14000002 	b	610035f8 <spi_sr_busy+0x28>
    else
        return SPI_SR_IDLE;
    610035f4:	52800000 	mov	w0, #0x0                   	// #0
}
    610035f8:	910043ff 	add	sp, sp, #0x10
    610035fc:	d65f03c0 	ret

Disassembly of section .text.spi_sr_rfne:

0000000061003600 <spi_sr_rfne>:
    \param[in]  spi:
    \param[out] none
    \retval     1-not empty;0-empty
*/
uint32_t spi_sr_rfne(SPI_TypeDef *spi)
{
    61003600:	d10043ff 	sub	sp, sp, #0x10
    61003604:	f90007e0 	str	x0, [sp, #8]
    if(spi->SR & SR_RFNE_MASK)
    61003608:	f94007e0 	ldr	x0, [sp, #8]
    6100360c:	b9402800 	ldr	w0, [x0, #40]
    61003610:	121d0000 	and	w0, w0, #0x8
    61003614:	7100001f 	cmp	w0, #0x0
    61003618:	54000060 	b.eq	61003624 <spi_sr_rfne+0x24>  // b.none
        return SPI_SR_RXFIFO_NOTEMPTY;
    6100361c:	52800020 	mov	w0, #0x1                   	// #1
    61003620:	14000002 	b	61003628 <spi_sr_rfne+0x28>
    else
        return SPI_SR_RXFIFO_EMPTY;
    61003624:	52800000 	mov	w0, #0x0                   	// #0
}
    61003628:	910043ff 	add	sp, sp, #0x10
    6100362c:	d65f03c0 	ret

Disassembly of section .text.spi_ctrl1_ndf:

0000000061003630 <spi_ctrl1_ndf>:
    \param[in]  spi:
    \param[out] none
    \retval     none
*/
void spi_ctrl1_ndf(SPI_TypeDef *spi, uint32_t num)
{
    61003630:	d10043ff 	sub	sp, sp, #0x10
    61003634:	f90007e0 	str	x0, [sp, #8]
    61003638:	b90007e1 	str	w1, [sp, #4]
	spi->CTRLR1 = num;
    6100363c:	f94007e0 	ldr	x0, [sp, #8]
    61003640:	b94007e1 	ldr	w1, [sp, #4]
    61003644:	b9000401 	str	w1, [x0, #4]
}
    61003648:	d503201f 	nop
    6100364c:	910043ff 	add	sp, sp, #0x10
    61003650:	d65f03c0 	ret

Disassembly of section .text.TEST_I2c_E2prom:

0000000061003654 <TEST_I2c_E2prom>:
/*
* master transmitter:7-bit,master,400Kb/s,FS_CNT
* master receiver:7-bit,master,100Kb/s,SS_CNT
*/
int TEST_I2c_E2prom(I2C_TypeDef *i2c)
{
    61003654:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
    61003658:	910003fd 	mov	x29, sp
    6100365c:	f9000bf3 	str	x19, [sp, #16]
    61003660:	f90017e0 	str	x0, [sp, #40]
	amount0 =15;
    61003664:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003668:	913b6000 	add	x0, x0, #0xed8
    6100366c:	528001e1 	mov	w1, #0xf                   	// #15
    61003670:	39000001 	strb	w1, [x0]
	uint8_t index0 = 0;
    61003674:	39013fff 	strb	wzr, [sp, #79]
	uint8_t data_cnt0 = 0;//record data number has been transfered
    61003678:	39013bff 	strb	wzr, [sp, #78]
	uint32_t delay_cnt = 0;
    6100367c:	b9004bff 	str	wzr, [sp, #72]
	// MASTER-TX config
	AlI2c_Disable(i2c);
    61003680:	f94017e0 	ldr	x0, [sp, #40]
    61003684:	97fffba6 	bl	6100251c <AlI2c_Disable>
	AlI2c_ClockSetup(i2c, I2C_CLOCK); // scl setup
    61003688:	52800c81 	mov	w1, #0x64                  	// #100
    6100368c:	f94017e0 	ldr	x0, [sp, #40]
    61003690:	97fffcab 	bl	6100293c <AlI2c_ClockSetup>
	AlI2c_SetSpeedMode(i2c, I2c_speed_fast); // 400Kb/s
    61003694:	52800041 	mov	w1, #0x2                   	// #2
    61003698:	f94017e0 	ldr	x0, [sp, #40]
    6100369c:	97fffbe3 	bl	61002628 <AlI2c_SetSpeedMode>
	AlI2c_SetMasterAddressMode(i2c, I2c_7bit_address); // 7-bit
    610036a0:	52800001 	mov	w1, #0x0                   	// #0
    610036a4:	f94017e0 	ldr	x0, [sp, #40]
    610036a8:	97fffbed 	bl	6100265c <AlI2c_SetMasterAddressMode>
	AlI2c_EnableMaster(i2c); //master
    610036ac:	f94017e0 	ldr	x0, [sp, #40]
    610036b0:	97fffbf8 	bl	61002690 <AlI2c_EnableMaster>
	AlI2c_SetTargetAddress(i2c,SLAVE_ADDRESS);//target addr
    610036b4:	52800a01 	mov	w1, #0x50                  	// #80
    610036b8:	f94017e0 	ldr	x0, [sp, #40]
    610036bc:	97fffbfe 	bl	610026b4 <AlI2c_SetTargetAddress>
	//set extra options
	AlI2c_IrqMask(i2c,TX_EMPTY_UNMASK|STOP_DET_UNMASK); // unmask TX_EMPTY/STOP_DET
    610036c0:	52804201 	mov	w1, #0x210                 	// #528
    610036c4:	f94017e0 	ldr	x0, [sp, #40]
    610036c8:	97fffc58 	bl	61002828 <AlI2c_IrqMask>
	AlI2c_TxThr(i2c,amount0); // tx-fifo-threhold amount0
    610036cc:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610036d0:	913b6000 	add	x0, x0, #0xed8
    610036d4:	39400000 	ldrb	w0, [x0]
    610036d8:	2a0003e1 	mov	w1, w0
    610036dc:	f94017e0 	ldr	x0, [sp, #40]
    610036e0:	97fffc5b 	bl	6100284c <AlI2c_TxThr>
	AlI2c_SdaHoldTx(i2c,3);// tx-hold=3*ic_clk
    610036e4:	52800061 	mov	w1, #0x3                   	// #3
    610036e8:	f94017e0 	ldr	x0, [sp, #40]
    610036ec:	97fffc6a 	bl	61002894 <AlI2c_SdaHoldTx>
	AlI2c_Spklen(i2c,4);//spike length=4*ic_clk
    610036f0:	52800081 	mov	w1, #0x4                   	// #4
    610036f4:	f94017e0 	ldr	x0, [sp, #40]
    610036f8:	97fffc72 	bl	610028c0 <AlI2c_Spklen>
	AlI2c_IrqClrAll(i2c);//clear all interrupt
    610036fc:	f94017e0 	ldr	x0, [sp, #40]
    61003700:	97fffc79 	bl	610028e4 <AlI2c_IrqClrAll>
	AlI2c_Enable(i2c);
    61003704:	f94017e0 	ldr	x0, [sp, #40]
    61003708:	97fffb8e 	bl	61002540 <AlI2c_Enable>

	//--------------------------------------
	// master-tx start: to page-write e2prom
	//--------------------------------------
	// tx e2prom word addr[15:0]
	AlI2c_Write(i2c, normal, 0x00);//send 1st word-addr byte [15:8]
    6100370c:	52800002 	mov	w2, #0x0                   	// #0
    61003710:	52800001 	mov	w1, #0x0                   	// #0
    61003714:	f94017e0 	ldr	x0, [sp, #40]
    61003718:	97fffbf4 	bl	610026e8 <AlI2c_Write>
	AlI2c_Write(i2c, normal, 0x00);//send 2nd word-addr byte [7:0]
    6100371c:	52800002 	mov	w2, #0x0                   	// #0
    61003720:	52800001 	mov	w1, #0x0                   	// #0
    61003724:	f94017e0 	ldr	x0, [sp, #40]
    61003728:	97fffbf0 	bl	610026e8 <AlI2c_Write>
	// tx page-write data from 0 to amount0-1
	do{
		rdata0_0 = AlI2c_IrqStat(i2c); // read intr stat
    6100372c:	f94017e0 	ldr	x0, [sp, #40]
    61003730:	97fffc77 	bl	6100290c <AlI2c_IrqStat>
    61003734:	2a0003e1 	mov	w1, w0
    61003738:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100373c:	913b7000 	add	x0, x0, #0xedc
    61003740:	b9000001 	str	w1, [x0]
		//STOP_DET not detected
		if((rdata0_0 & STOP_DET_UNMASK) == 0)
    61003744:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003748:	913b7000 	add	x0, x0, #0xedc
    6100374c:	b9400000 	ldr	w0, [x0]
    61003750:	12170000 	and	w0, w0, #0x200
    61003754:	7100001f 	cmp	w0, #0x0
    61003758:	54000741 	b.ne	61003840 <TEST_I2c_E2prom+0x1ec>  // b.any
		{
			//i2c tx operation
			if(data_cnt0 < amount0)
    6100375c:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003760:	913b6000 	add	x0, x0, #0xed8
    61003764:	39400000 	ldrb	w0, [x0]
    61003768:	39413be1 	ldrb	w1, [sp, #78]
    6100376c:	6b00003f 	cmp	w1, w0
    61003770:	54000682 	b.cs	61003840 <TEST_I2c_E2prom+0x1ec>  // b.hs, b.nlast
			{
				//TX_EMPTY detected
				if((rdata0_0 & TX_EMPTY_UNMASK) != 0)
    61003774:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003778:	913b7000 	add	x0, x0, #0xedc
    6100377c:	b9400000 	ldr	w0, [x0]
    61003780:	121c0000 	and	w0, w0, #0x10
    61003784:	7100001f 	cmp	w0, #0x0
    61003788:	540005c0 	b.eq	61003840 <TEST_I2c_E2prom+0x1ec>  // b.none
				{
					//write 4 data into tx-fifo
					for(int i = 0; i < amount0; i++)
    6100378c:	b90047ff 	str	wzr, [sp, #68]
    61003790:	14000025 	b	61003824 <TEST_I2c_E2prom+0x1d0>
					{
						data_cnt0++;
    61003794:	39413be0 	ldrb	w0, [sp, #78]
    61003798:	11000400 	add	w0, w0, #0x1
    6100379c:	39013be0 	strb	w0, [sp, #78]
						//store sent data into array for data check
						ckdata0_0[data_cnt0-1] = data_cnt0-1;
    610037a0:	39413be0 	ldrb	w0, [sp, #78]
    610037a4:	51000403 	sub	w3, w0, #0x1
    610037a8:	39413be0 	ldrb	w0, [sp, #78]
    610037ac:	51000400 	sub	w0, w0, #0x1
    610037b0:	12001c02 	and	w2, w0, #0xff
    610037b4:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610037b8:	913b8001 	add	x1, x0, #0xee0
    610037bc:	93407c60 	sxtw	x0, w3
    610037c0:	38206822 	strb	w2, [x1, x0]
						//printf("write data %d is %d\r\n", i, ckdata0_0[data_cnt0-1]);
						//the last data byte
						if(data_cnt0 == amount0)
    610037c4:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610037c8:	913b6000 	add	x0, x0, #0xed8
    610037cc:	39400000 	ldrb	w0, [x0]
    610037d0:	39413be1 	ldrb	w1, [sp, #78]
    610037d4:	6b00003f 	cmp	w1, w0
    610037d8:	54000121 	b.ne	610037fc <TEST_I2c_E2prom+0x1a8>  // b.any
						{
							//while((AlI2c_Status(i2c) & BIT_MST_ACTIVITY) != 0);
							AlI2c_Write(i2c, stop, data_cnt0-1);//last data
    610037dc:	39413be0 	ldrb	w0, [sp, #78]
    610037e0:	51000400 	sub	w0, w0, #0x1
    610037e4:	12001c00 	and	w0, w0, #0xff
    610037e8:	2a0003e2 	mov	w2, w0
    610037ec:	52800021 	mov	w1, #0x1                   	// #1
    610037f0:	f94017e0 	ldr	x0, [sp, #40]
    610037f4:	97fffbbd 	bl	610026e8 <AlI2c_Write>
							break;
    610037f8:	14000012 	b	61003840 <TEST_I2c_E2prom+0x1ec>
						}
						else
						{
							//while((AlI2c_Status(i2c) & BIT_MST_ACTIVITY) != 0);
							AlI2c_Write(i2c, normal, data_cnt0-1);//tx data
    610037fc:	39413be0 	ldrb	w0, [sp, #78]
    61003800:	51000400 	sub	w0, w0, #0x1
    61003804:	12001c00 	and	w0, w0, #0xff
    61003808:	2a0003e2 	mov	w2, w0
    6100380c:	52800001 	mov	w1, #0x0                   	// #0
    61003810:	f94017e0 	ldr	x0, [sp, #40]
    61003814:	97fffbb5 	bl	610026e8 <AlI2c_Write>
					for(int i = 0; i < amount0; i++)
    61003818:	b94047e0 	ldr	w0, [sp, #68]
    6100381c:	11000400 	add	w0, w0, #0x1
    61003820:	b90047e0 	str	w0, [sp, #68]
    61003824:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003828:	913b6000 	add	x0, x0, #0xed8
    6100382c:	39400000 	ldrb	w0, [x0]
    61003830:	2a0003e1 	mov	w1, w0
    61003834:	b94047e0 	ldr	w0, [sp, #68]
    61003838:	6b01001f 	cmp	w0, w1
    6100383c:	54fffacb 	b.lt	61003794 <TEST_I2c_E2prom+0x140>  // b.tstop
					}
				}
			}
		}

	}while((AlI2c_IrqStat(i2c) & STOP_DET_UNMASK) == 0); // loop shen STOP_DET not detected
    61003840:	f94017e0 	ldr	x0, [sp, #40]
    61003844:	97fffc32 	bl	6100290c <AlI2c_IrqStat>
    61003848:	12170000 	and	w0, w0, #0x200
    6100384c:	7100001f 	cmp	w0, #0x0
    61003850:	54fff6e0 	b.eq	6100372c <TEST_I2c_E2prom+0xd8>  // b.none
	AlI2c_IrqClrAll(i2c);// clr all int
    61003854:	f94017e0 	ldr	x0, [sp, #40]
    61003858:	97fffc23 	bl	610028e4 <AlI2c_IrqClrAll>
	//wait MST_ACTIVITY returns to 0
	while((AlI2c_Status(i2c) & BIT_MST_ACTIVITY) != 0); // until master is completed
    6100385c:	d503201f 	nop
    61003860:	f94017e0 	ldr	x0, [sp, #40]
    61003864:	97fffc30 	bl	61002924 <AlI2c_Status>
    61003868:	121b0000 	and	w0, w0, #0x20
    6100386c:	7100001f 	cmp	w0, #0x0
    61003870:	54ffff81 	b.ne	61003860 <TEST_I2c_E2prom+0x20c>  // b.any
	while the data word is being programmed into the nonvolatile
	EEPROM. All inputs are disabled during this write cycle and the EEPROM will not respond until the write is
	complete.
	*/
	do{
		delay_cnt++;
    61003874:	b9404be0 	ldr	w0, [sp, #72]
    61003878:	11000400 	add	w0, w0, #0x1
    6100387c:	b9004be0 	str	w0, [sp, #72]
	}while(delay_cnt < 3000); // delay > 10ms
    61003880:	b9404be0 	ldr	w0, [sp, #72]
    61003884:	712edc1f 	cmp	w0, #0xbb7
    61003888:	54ffff69 	b.ls	61003874 <TEST_I2c_E2prom+0x220>  // b.plast

	//--------------------------------------
	// master-rx start: to sequential read e2prom
	//--------------------------------------
	// MASTER-RX config
	AlI2c_Disable(i2c);
    6100388c:	f94017e0 	ldr	x0, [sp, #40]
    61003890:	97fffb23 	bl	6100251c <AlI2c_Disable>
	AlI2c_ClockSetup(i2c, I2C_CLOCK); // scl setup
    61003894:	52800c81 	mov	w1, #0x64                  	// #100
    61003898:	f94017e0 	ldr	x0, [sp, #40]
    6100389c:	97fffc28 	bl	6100293c <AlI2c_ClockSetup>
	AlI2c_SetSpeedMode(i2c, I2c_speed_fast); // 400Kb/s
    610038a0:	52800041 	mov	w1, #0x2                   	// #2
    610038a4:	f94017e0 	ldr	x0, [sp, #40]
    610038a8:	97fffb60 	bl	61002628 <AlI2c_SetSpeedMode>
	AlI2c_SetMasterAddressMode(i2c, I2c_7bit_address); // 7-bit
    610038ac:	52800001 	mov	w1, #0x0                   	// #0
    610038b0:	f94017e0 	ldr	x0, [sp, #40]
    610038b4:	97fffb6a 	bl	6100265c <AlI2c_SetMasterAddressMode>
	AlI2c_EnableMaster(i2c); //master
    610038b8:	f94017e0 	ldr	x0, [sp, #40]
    610038bc:	97fffb75 	bl	61002690 <AlI2c_EnableMaster>
	//set extra options
	AlI2c_IrqMask(i2c,TX_EMPTY_UNMASK|STOP_DET_UNMASK|RX_FULL_UNMASK); // unmask TX_EMPTY/STOP_DET/RX_FULL
    610038c0:	52804281 	mov	w1, #0x214                 	// #532
    610038c4:	f94017e0 	ldr	x0, [sp, #40]
    610038c8:	97fffbd8 	bl	61002828 <AlI2c_IrqMask>
	AlI2c_TxThr(i2c,amount0); // tx-fifo-threhold amount0
    610038cc:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610038d0:	913b6000 	add	x0, x0, #0xed8
    610038d4:	39400000 	ldrb	w0, [x0]
    610038d8:	2a0003e1 	mov	w1, w0
    610038dc:	f94017e0 	ldr	x0, [sp, #40]
    610038e0:	97fffbdb 	bl	6100284c <AlI2c_TxThr>
	AlI2c_RxThr(i2c,amount0-1); // rx-fifo-threhold amount0
    610038e4:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610038e8:	913b6000 	add	x0, x0, #0xed8
    610038ec:	39400000 	ldrb	w0, [x0]
    610038f0:	51000400 	sub	w0, w0, #0x1
    610038f4:	12001c00 	and	w0, w0, #0xff
    610038f8:	2a0003e1 	mov	w1, w0
    610038fc:	f94017e0 	ldr	x0, [sp, #40]
    61003900:	97fffbdc 	bl	61002870 <AlI2c_RxThr>
	AlI2c_SdaHoldTx(i2c,5);// tx-hold=5*ic_clk
    61003904:	528000a1 	mov	w1, #0x5                   	// #5
    61003908:	f94017e0 	ldr	x0, [sp, #40]
    6100390c:	97fffbe2 	bl	61002894 <AlI2c_SdaHoldTx>
	AlI2c_Spklen(i2c,5);//spike length=5*ic_clk
    61003910:	528000a1 	mov	w1, #0x5                   	// #5
    61003914:	f94017e0 	ldr	x0, [sp, #40]
    61003918:	97fffbea 	bl	610028c0 <AlI2c_Spklen>
	AlI2c_IrqClrAll(i2c);//clear all interrupt
    6100391c:	f94017e0 	ldr	x0, [sp, #40]
    61003920:	97fffbf1 	bl	610028e4 <AlI2c_IrqClrAll>
	AlI2c_Enable(i2c);
    61003924:	f94017e0 	ldr	x0, [sp, #40]
    61003928:	97fffb06 	bl	61002540 <AlI2c_Enable>

//	//send e2prom data read addr
//	AlI2c_write(i2c, normal, 0x00);//send addr
	//send e2prom data read addr[15:0]
	AlI2c_Write(i2c, normal, 0x00);//send 1st word-addr byte [15:8]
    6100392c:	52800002 	mov	w2, #0x0                   	// #0
    61003930:	52800001 	mov	w1, #0x0                   	// #0
    61003934:	f94017e0 	ldr	x0, [sp, #40]
    61003938:	97fffb6c 	bl	610026e8 <AlI2c_Write>
	AlI2c_Write(i2c, normal, 0x00);//send 2nd word-addr byte [7:0]
    6100393c:	52800002 	mov	w2, #0x0                   	// #0
    61003940:	52800001 	mov	w1, #0x0                   	// #0
    61003944:	f94017e0 	ldr	x0, [sp, #40]
    61003948:	97fffb68 	bl	610026e8 <AlI2c_Write>

	//send read CMD
	data_cnt0 = 0;
    6100394c:	39013bff 	strb	wzr, [sp, #78]
	do{
		rdata0_0 = AlI2c_IrqStat(i2c); // read intr stat
    61003950:	f94017e0 	ldr	x0, [sp, #40]
    61003954:	97fffbee 	bl	6100290c <AlI2c_IrqStat>
    61003958:	2a0003e1 	mov	w1, w0
    6100395c:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003960:	913b7000 	add	x0, x0, #0xedc
    61003964:	b9000001 	str	w1, [x0]
		//STOP_DET not detected
		if((rdata0_0 & STOP_DET_UNMASK) == 0)
    61003968:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100396c:	913b7000 	add	x0, x0, #0xedc
    61003970:	b9400000 	ldr	w0, [x0]
    61003974:	12170000 	and	w0, w0, #0x200
    61003978:	7100001f 	cmp	w0, #0x0
    6100397c:	54000521 	b.ne	61003a20 <TEST_I2c_E2prom+0x3cc>  // b.any
		{
			//i2c tx operation
			if(data_cnt0 < amount0)
    61003980:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003984:	913b6000 	add	x0, x0, #0xed8
    61003988:	39400000 	ldrb	w0, [x0]
    6100398c:	39413be1 	ldrb	w1, [sp, #78]
    61003990:	6b00003f 	cmp	w1, w0
    61003994:	54000462 	b.cs	61003a20 <TEST_I2c_E2prom+0x3cc>  // b.hs, b.nlast
			{
				//TX_EMPTY detected
				if((rdata0_0 & TX_EMPTY_UNMASK) != 0)
    61003998:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100399c:	913b7000 	add	x0, x0, #0xedc
    610039a0:	b9400000 	ldr	w0, [x0]
    610039a4:	121c0000 	and	w0, w0, #0x10
    610039a8:	7100001f 	cmp	w0, #0x0
    610039ac:	540003a0 	b.eq	61003a20 <TEST_I2c_E2prom+0x3cc>  // b.none
				{
					//write amount0 read CMD into tx-fifo
					for(int i = 0; i < amount0; i++)
    610039b0:	b90043ff 	str	wzr, [sp, #64]
    610039b4:	14000014 	b	61003a04 <TEST_I2c_E2prom+0x3b0>
					{
						data_cnt0++;
    610039b8:	39413be0 	ldrb	w0, [sp, #78]
    610039bc:	11000400 	add	w0, w0, #0x1
    610039c0:	39013be0 	strb	w0, [sp, #78]
						//the last data byte
						if(data_cnt0 == amount0)
    610039c4:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    610039c8:	913b6000 	add	x0, x0, #0xed8
    610039cc:	39400000 	ldrb	w0, [x0]
    610039d0:	39413be1 	ldrb	w1, [sp, #78]
    610039d4:	6b00003f 	cmp	w1, w0
    610039d8:	540000a1 	b.ne	610039ec <TEST_I2c_E2prom+0x398>  // b.any
						{
							AlI2c_IssueRead(i2c, stop);//last read CMD
    610039dc:	52800021 	mov	w1, #0x1                   	// #1
    610039e0:	f94017e0 	ldr	x0, [sp, #40]
    610039e4:	97fffb70 	bl	610027a4 <AlI2c_IssueRead>
							break;
    610039e8:	1400000e 	b	61003a20 <TEST_I2c_E2prom+0x3cc>
						}
						else
						{
							AlI2c_IssueRead(i2c, normal);//tx read CMD
    610039ec:	52800001 	mov	w1, #0x0                   	// #0
    610039f0:	f94017e0 	ldr	x0, [sp, #40]
    610039f4:	97fffb6c 	bl	610027a4 <AlI2c_IssueRead>
					for(int i = 0; i < amount0; i++)
    610039f8:	b94043e0 	ldr	w0, [sp, #64]
    610039fc:	11000400 	add	w0, w0, #0x1
    61003a00:	b90043e0 	str	w0, [sp, #64]
    61003a04:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003a08:	913b6000 	add	x0, x0, #0xed8
    61003a0c:	39400000 	ldrb	w0, [x0]
    61003a10:	2a0003e1 	mov	w1, w0
    61003a14:	b94043e0 	ldr	w0, [sp, #64]
    61003a18:	6b01001f 	cmp	w0, w1
    61003a1c:	54fffceb 	b.lt	610039b8 <TEST_I2c_E2prom+0x364>  // b.tstop
						}
					}
				}
			}
		}
	}while((rdata0_0 & STOP_DET_UNMASK) == 0);// loop shen STOP_DET not detected
    61003a20:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003a24:	913b7000 	add	x0, x0, #0xedc
    61003a28:	b9400000 	ldr	w0, [x0]
    61003a2c:	12170000 	and	w0, w0, #0x200
    61003a30:	7100001f 	cmp	w0, #0x0
    61003a34:	54fff8e0 	b.eq	61003950 <TEST_I2c_E2prom+0x2fc>  // b.none

	//while((AlI2c_Status(i2c) & BIT_MST_ACTIVITY) != 0); // until master is completed
	//RX_FULL detected
	rdata0_0 = AlI2c_IrqStat(i2c); // read intr stat
    61003a38:	f94017e0 	ldr	x0, [sp, #40]
    61003a3c:	97fffbb4 	bl	6100290c <AlI2c_IrqStat>
    61003a40:	2a0003e1 	mov	w1, w0
    61003a44:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003a48:	913b7000 	add	x0, x0, #0xedc
    61003a4c:	b9000001 	str	w1, [x0]
	printf("rdata0_0 is %x", rdata0_0 & RX_FULL_UNMASK);
    61003a50:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003a54:	913b7000 	add	x0, x0, #0xedc
    61003a58:	b9400000 	ldr	w0, [x0]
    61003a5c:	121e0000 	and	w0, w0, #0x4
    61003a60:	2a0003e1 	mov	w1, w0
    61003a64:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003a68:	91142000 	add	x0, x0, #0x508
    61003a6c:	97fff9d9 	bl	610021d0 <printf>
	if((rdata0_0 & RX_FULL_UNMASK) != 0)
    61003a70:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003a74:	913b7000 	add	x0, x0, #0xedc
    61003a78:	b9400000 	ldr	w0, [x0]
    61003a7c:	121e0000 	and	w0, w0, #0x4
    61003a80:	7100001f 	cmp	w0, #0x0
    61003a84:	54000460 	b.eq	61003b10 <TEST_I2c_E2prom+0x4bc>  // b.none
	{
		//read 2 data from rx-fifo
		for(int i = 0; i < amount0; i++)
    61003a88:	b9003fff 	str	wzr, [sp, #60]
    61003a8c:	1400001a 	b	61003af4 <TEST_I2c_E2prom+0x4a0>
		{
			ckdata0_1[index0] = AlI2c_Read(i2c); // read rx-fifo data
    61003a90:	39413ff3 	ldrb	w19, [sp, #79]
    61003a94:	f94017e0 	ldr	x0, [sp, #40]
    61003a98:	97fffb3c 	bl	61002788 <AlI2c_Read>
    61003a9c:	12001c02 	and	w2, w0, #0xff
    61003aa0:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003aa4:	913c8001 	add	x1, x0, #0xf20
    61003aa8:	93407e60 	sxtw	x0, w19
    61003aac:	38206822 	strb	w2, [x1, x0]
			printf("rd data %d is %d\r\n", index0, ckdata0_1[index0]);
    61003ab0:	39413fe3 	ldrb	w3, [sp, #79]
    61003ab4:	39413fe2 	ldrb	w2, [sp, #79]
    61003ab8:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003abc:	913c8001 	add	x1, x0, #0xf20
    61003ac0:	93407c40 	sxtw	x0, w2
    61003ac4:	38606820 	ldrb	w0, [x1, x0]
    61003ac8:	2a0003e2 	mov	w2, w0
    61003acc:	2a0303e1 	mov	w1, w3
    61003ad0:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003ad4:	91146000 	add	x0, x0, #0x518
    61003ad8:	97fff9be 	bl	610021d0 <printf>
			index0++;
    61003adc:	39413fe0 	ldrb	w0, [sp, #79]
    61003ae0:	11000400 	add	w0, w0, #0x1
    61003ae4:	39013fe0 	strb	w0, [sp, #79]
		for(int i = 0; i < amount0; i++)
    61003ae8:	b9403fe0 	ldr	w0, [sp, #60]
    61003aec:	11000400 	add	w0, w0, #0x1
    61003af0:	b9003fe0 	str	w0, [sp, #60]
    61003af4:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003af8:	913b6000 	add	x0, x0, #0xed8
    61003afc:	39400000 	ldrb	w0, [x0]
    61003b00:	2a0003e1 	mov	w1, w0
    61003b04:	b9403fe0 	ldr	w0, [sp, #60]
    61003b08:	6b01001f 	cmp	w0, w1
    61003b0c:	54fffc2b 	b.lt	61003a90 <TEST_I2c_E2prom+0x43c>  // b.tstop
		}
	}

	AlI2c_IrqClrAll(i2c);//clear all interrupt
    61003b10:	f94017e0 	ldr	x0, [sp, #40]
    61003b14:	97fffb74 	bl	610028e4 <AlI2c_IrqClrAll>
	//wait MST_ACTIVITY returns to 0
	while((AlI2c_Status(i2c) & BIT_MST_ACTIVITY) != 0); // until master is completed
    61003b18:	d503201f 	nop
    61003b1c:	f94017e0 	ldr	x0, [sp, #40]
    61003b20:	97fffb81 	bl	61002924 <AlI2c_Status>
    61003b24:	121b0000 	and	w0, w0, #0x20
    61003b28:	7100001f 	cmp	w0, #0x0
    61003b2c:	54ffff81 	b.ne	61003b1c <TEST_I2c_E2prom+0x4c8>  // b.any
//	}
//	printf("\r\n");
	//--------------------------------------
	// data check
	//--------------------------------------
	for(int i=0; i < amount0; i++)
    61003b30:	b9003bff 	str	wzr, [sp, #56]
    61003b34:	14000010 	b	61003b74 <TEST_I2c_E2prom+0x520>
	{
		if(ckdata0_0[i] != ckdata0_1[i])
    61003b38:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003b3c:	913b8001 	add	x1, x0, #0xee0
    61003b40:	b9803be0 	ldrsw	x0, [sp, #56]
    61003b44:	38606821 	ldrb	w1, [x1, x0]
    61003b48:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003b4c:	913c8002 	add	x2, x0, #0xf20
    61003b50:	b9803be0 	ldrsw	x0, [sp, #56]
    61003b54:	38606840 	ldrb	w0, [x2, x0]
    61003b58:	6b00003f 	cmp	w1, w0
    61003b5c:	54000060 	b.eq	61003b68 <TEST_I2c_E2prom+0x514>  // b.none
		{
			return -1;
    61003b60:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003b64:	1400000e 	b	61003b9c <TEST_I2c_E2prom+0x548>
	for(int i=0; i < amount0; i++)
    61003b68:	b9403be0 	ldr	w0, [sp, #56]
    61003b6c:	11000400 	add	w0, w0, #0x1
    61003b70:	b9003be0 	str	w0, [sp, #56]
    61003b74:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003b78:	913b6000 	add	x0, x0, #0xed8
    61003b7c:	39400000 	ldrb	w0, [x0]
    61003b80:	2a0003e1 	mov	w1, w0
    61003b84:	b9403be0 	ldr	w0, [sp, #56]
    61003b88:	6b01001f 	cmp	w0, w1
    61003b8c:	54fffd6b 	b.lt	61003b38 <TEST_I2c_E2prom+0x4e4>  // b.tstop
		}
	}

	AlI2c_Disable(i2c);
    61003b90:	f94017e0 	ldr	x0, [sp, #40]
    61003b94:	97fffa62 	bl	6100251c <AlI2c_Disable>
	return 0;
    61003b98:	52800000 	mov	w0, #0x0                   	// #0
}
    61003b9c:	f9400bf3 	ldr	x19, [sp, #16]
    61003ba0:	a8c57bfd 	ldp	x29, x30, [sp], #80
    61003ba4:	d65f03c0 	ret

Disassembly of section .text.iic_test:

0000000061003ba8 <iic_test>:

/*
 * main
 */
int iic_test(void)
{
    61003ba8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61003bac:	910003fd 	mov	x29, sp
	int retval = 0;
    61003bb0:	b9001fff 	str	wzr, [sp, #28]
	printf("* Example: e2prom write and read test.\n");
    61003bb4:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003bb8:	9114c000 	add	x0, x0, #0x530
    61003bbc:	97fff985 	bl	610021d0 <printf>
    // poll-driven master-transmitter example
    retval = TEST_I2c_E2prom(I2C0);
    61003bc0:	d2880000 	mov	x0, #0x4000                	// #16384
    61003bc4:	f2bf0820 	movk	x0, #0xf841, lsl #16
    61003bc8:	97fffea3 	bl	61003654 <TEST_I2c_E2prom>
    61003bcc:	b9001fe0 	str	w0, [sp, #28]

    if(retval == -1)
    61003bd0:	b9401fe0 	ldr	w0, [sp, #28]
    61003bd4:	3100041f 	cmn	w0, #0x1
    61003bd8:	540000c1 	b.ne	61003bf0 <iic_test+0x48>  // b.any
    {
		printf("FAIL: data are not same!\r\n");
    61003bdc:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003be0:	91156000 	add	x0, x0, #0x558
    61003be4:	97fff97b 	bl	610021d0 <printf>
    	return -1;
    61003be8:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003bec:	14000007 	b	61003c08 <iic_test+0x60>
    }
    else
    {
    	printf("Read and write data are the same.\r\n");
    61003bf0:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003bf4:	9115e000 	add	x0, x0, #0x578
    61003bf8:	97fff976 	bl	610021d0 <printf>
		printf("PASS: test success!\r\n");
    61003bfc:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003c00:	91168000 	add	x0, x0, #0x5a0
    61003c04:	97fff973 	bl	610021d0 <printf>
    	//while(1);
    }

}
    61003c08:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61003c0c:	d65f03c0 	ret

Disassembly of section .text.main:

0000000061003c10 <main>:
#include <stdlib.h>
#include "nuclei_sdk_soc.h"
#include "board_nuclei_fpga_eval.h"
#include "../../../SoC/demosoc/Common/Include/demosoc_xec.h"
#include "al9000_test.h"
uint32_t main(){
    61003c10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
    61003c14:	910003fd 	mov	x29, sp
	//SD_Test();
	iic_test();
    61003c18:	97ffffe4 	bl	61003ba8 <iic_test>
	//qspi_test();
	spi_test();
    61003c1c:	94000068 	bl	61003dbc <spi_test>
	benchmark_test();
#endif

	//plps_test();
	//usb_test();
}
    61003c20:	d503201f 	nop
    61003c24:	a8c17bfd 	ldp	x29, x30, [sp], #16
    61003c28:	d65f03c0 	ret

Disassembly of section .text.SReadID:

0000000061003c2c <SReadID>:
/****************function define******************************/
/*
* Read Manufacture ID/ Device ID - in x1-SPI mode
*/
uint32_t SReadID(void)
{
    61003c2c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61003c30:	910003fd 	mov	x29, sp
	//-----------------------------------------------------------
	//sent:
	//inst(0x): 9f (RDID)
	//receive: 3 data items
	//-----------------------------------------------------------
	uint32_t temp = 0;
    61003c34:	b9001fff 	str	wzr, [sp, #28]
	spi_data_transmit(SPI0,CMD_RDID); // tx read id cmd
    61003c38:	528013e1 	mov	w1, #0x9f                  	// #159
    61003c3c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003c40:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003c44:	97fffe3f 	bl	61003540 <spi_data_transmit>
	while(!spi_sr_tfe(SPI0));
    61003c48:	d503201f 	nop
    61003c4c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003c50:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003c54:	97fffe53 	bl	610035a0 <spi_sr_tfe>
    61003c58:	7100001f 	cmp	w0, #0x0
    61003c5c:	54ffff80 	b.eq	61003c4c <SReadID+0x20>  // b.none
	while(spi_sr_busy(SPI0));  // check busy or idle,wait BUSY returns to 0
    61003c60:	d503201f 	nop
    61003c64:	d2880000 	mov	x0, #0x4000                	// #16384
    61003c68:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003c6c:	97fffe59 	bl	610035d0 <spi_sr_busy>
    61003c70:	7100001f 	cmp	w0, #0x0
    61003c74:	54ffff81 	b.ne	61003c64 <SReadID+0x38>  // b.any
	temp |= spi_data_read(SPI0);
    61003c78:	d2880000 	mov	x0, #0x4000                	// #16384
    61003c7c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003c80:	97fffe42 	bl	61003588 <spi_data_read>
    61003c84:	2a0003e1 	mov	w1, w0
    61003c88:	b9401fe0 	ldr	w0, [sp, #28]
    61003c8c:	2a010000 	orr	w0, w0, w1
    61003c90:	b9001fe0 	str	w0, [sp, #28]
	temp |= spi_data_read(SPI0)<<8;
    61003c94:	d2880000 	mov	x0, #0x4000                	// #16384
    61003c98:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003c9c:	97fffe3b 	bl	61003588 <spi_data_read>
    61003ca0:	53185c00 	lsl	w0, w0, #8
    61003ca4:	b9401fe1 	ldr	w1, [sp, #28]
    61003ca8:	2a000020 	orr	w0, w1, w0
    61003cac:	b9001fe0 	str	w0, [sp, #28]
	temp |= spi_data_read(SPI0)<<16;
    61003cb0:	d2880000 	mov	x0, #0x4000                	// #16384
    61003cb4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003cb8:	97fffe34 	bl	61003588 <spi_data_read>
    61003cbc:	53103c00 	lsl	w0, w0, #16
    61003cc0:	b9401fe1 	ldr	w1, [sp, #28]
    61003cc4:	2a000020 	orr	w0, w1, w0
    61003cc8:	b9001fe0 	str	w0, [sp, #28]
	return temp;
    61003ccc:	b9401fe0 	ldr	w0, [sp, #28]
}
    61003cd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61003cd4:	d65f03c0 	ret

Disassembly of section .text.flash_wait_wip:

0000000061003cd8 <flash_wait_wip>:
* 8-bit data frame, x1 mode, EEPROM read
* 	//inst(0x): 05 (RDSR)
*	//receive: 1 data items
*/
uint32_t flash_wait_wip(void)
{
    61003cd8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
    61003cdc:	910003fd 	mov	x29, sp
	uint32_t statreg1 = 0;
    61003ce0:	b9001fff 	str	wzr, [sp, #28]
	//CFG SSIENR
	/*dis ssi*/
	spi_dwc_ssi_disable(SPI0);
    61003ce4:	d2880000 	mov	x0, #0x4000                	// #16384
    61003ce8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003cec:	97fffd55 	bl	61003240 <spi_dwc_ssi_disable>
	//-----------------------------------------------------------
	//program CTRLR0 register
	//8-bit data frame, x1 mode, EEPROM read
	//-----------------------------------------------------------
	/*cfg SPI Data Frame Size.*/
	spi_dfs(SPI0,SPI_DFS_BYTE);   // byte
    61003cf0:	528000e1 	mov	w1, #0x7                   	// #7
    61003cf4:	d2880000 	mov	x0, #0x4000                	// #16384
    61003cf8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003cfc:	97fffdc3 	bl	61003408 <spi_dfs>
	/*Slave Select Toggle disable*/
	spi_sste_dis(SPI0);
    61003d00:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d04:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d08:	97fffdad 	bl	610033bc <spi_sste_dis>
	/*cfg SPI Frame Format*/
	spi_x1_mode(SPI0);
    61003d0c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d10:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d14:	97fffd6c 	bl	610032c4 <spi_x1_mode>
	/*Transfer Mode.*/
	spi_tmod_e2prom(SPI0); // e2prom read
    61003d18:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d1c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d20:	97fffd94 	bl	61003370 <spi_tmod_e2prom>
	//-----------------------------------------------------------
	//program CTRLR1 register
	//receive 1 data items
	//-----------------------------------------------------------
	spi_ctrl1_ndf(SPI0, 0);
    61003d24:	52800001 	mov	w1, #0x0                   	// #0
    61003d28:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d2c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d30:	97fffe40 	bl	61003630 <spi_ctrl1_ndf>
	//-----------------------------------------------------------
    //program TXFTLR register
    //start when 1 data items is present in tx fifo
    //-----------------------------------------------------------
    /*cfg SPI Transmit FIFO Threshold Level*/
	spi_txftl_tft(SPI0, 0); // default
    61003d34:	52800001 	mov	w1, #0x0                   	// #0
    61003d38:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d3c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d40:	97fffdeb 	bl	610034ec <spi_txftl_tft>

	/*en ssi*/
	spi_dwc_ssi_enable(SPI0);
    61003d44:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d48:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d4c:	97fffd4d 	bl	61003280 <spi_dwc_ssi_enable>
	//sent:
	//inst(0x): 05 (RDSR)
	//receive: 1 data items
	//-----------------------------------------------------------
	do{
	spi_data_transmit(SPI0,CMD_RDSR); // tx read status register cmd
    61003d50:	528000a1 	mov	w1, #0x5                   	// #5
    61003d54:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d58:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d5c:	97fffdf9 	bl	61003540 <spi_data_transmit>
	/*check status--wait busy returns to idle*/
	while(!spi_sr_tfe(SPI0)); // wait TFE returns to 1
    61003d60:	d503201f 	nop
    61003d64:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d68:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d6c:	97fffe0d 	bl	610035a0 <spi_sr_tfe>
    61003d70:	7100001f 	cmp	w0, #0x0
    61003d74:	54ffff80 	b.eq	61003d64 <flash_wait_wip+0x8c>  // b.none
	while(spi_sr_busy(SPI0));  // check busy or idle,wait BUSY returns to 0
    61003d78:	d503201f 	nop
    61003d7c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d80:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d84:	97fffe13 	bl	610035d0 <spi_sr_busy>
    61003d88:	7100001f 	cmp	w0, #0x0
    61003d8c:	54ffff81 	b.ne	61003d7c <flash_wait_wip+0xa4>  // b.any
	statreg1 = spi_data_read(SPI0); // read status register1
    61003d90:	d2880000 	mov	x0, #0x4000                	// #16384
    61003d94:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003d98:	97fffdfc 	bl	61003588 <spi_data_read>
    61003d9c:	b9001fe0 	str	w0, [sp, #28]
	}while(statreg1 & SR1_WIP); // check if flash operation complete
    61003da0:	b9401fe0 	ldr	w0, [sp, #28]
    61003da4:	12000000 	and	w0, w0, #0x1
    61003da8:	7100001f 	cmp	w0, #0x0
    61003dac:	54fffd21 	b.ne	61003d50 <flash_wait_wip+0x78>  // b.any
	return statreg1;
    61003db0:	b9401fe0 	ldr	w0, [sp, #28]
}
    61003db4:	a8c27bfd 	ldp	x29, x30, [sp], #32
    61003db8:	d65f03c0 	ret

Disassembly of section .text.spi_test:

0000000061003dbc <spi_test>:



/* main */
int spi_test()
{
    61003dbc:	d120c3ff 	sub	sp, sp, #0x830
    61003dc0:	a9007bfd 	stp	x29, x30, [sp]
    61003dc4:	910003fd 	mov	x29, sp
    61003dc8:	f9000bf3 	str	x19, [sp, #16]
   /***********************AL9000***************************/
    printf("test start\r\n");
    61003dcc:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003dd0:	9116e000 	add	x0, x0, #0x5b8
    61003dd4:	97fff8ff 	bl	610021d0 <printf>
    /*variable init*/
    uint16_t i = 0;
    61003dd8:	79105fff 	strh	wzr, [sp, #2094]
	__attribute__ ((aligned(4)));
    uint32_t wrdata_a[256] = {0};
    61003ddc:	9110a3e0 	add	x0, sp, #0x428
    61003de0:	d2808001 	mov	x1, #0x400                 	// #1024
    61003de4:	aa0103e2 	mov	x2, x1
    61003de8:	52800001 	mov	w1, #0x0                   	// #0
    61003dec:	97fff674 	bl	610017bc <memset>
    uint32_t rddata_a[256] = {0};
    61003df0:	9100a3e0 	add	x0, sp, #0x28
    61003df4:	d2808001 	mov	x1, #0x400                 	// #1024
    61003df8:	aa0103e2 	mov	x2, x1
    61003dfc:	52800001 	mov	w1, #0x0                   	// #0
    61003e00:	97fff66f 	bl	610017bc <memset>
	__attribute__ ((packed));
    for(i=0; i<256; i++)
    61003e04:	79105fff 	strh	wzr, [sp, #2094]
    61003e08:	1400000a 	b	61003e30 <spi_test+0x74>
    {
    	wrdata_a[i] = i;
    61003e0c:	79505fe0 	ldrh	w0, [sp, #2094]
    61003e10:	79505fe2 	ldrh	w2, [sp, #2094]
    61003e14:	93407c00 	sxtw	x0, w0
    61003e18:	d37ef400 	lsl	x0, x0, #2
    61003e1c:	9110a3e1 	add	x1, sp, #0x428
    61003e20:	b8206822 	str	w2, [x1, x0]
    for(i=0; i<256; i++)
    61003e24:	79505fe0 	ldrh	w0, [sp, #2094]
    61003e28:	11000400 	add	w0, w0, #0x1
    61003e2c:	79105fe0 	strh	w0, [sp, #2094]
    61003e30:	79505fe0 	ldrh	w0, [sp, #2094]
    61003e34:	7103fc1f 	cmp	w0, #0xff
    61003e38:	54fffea9 	b.ls	61003e0c <spi_test+0x50>  // b.plast

    /***************************************************************/
    /************************flash ID check*************************/
    /***************************************************************/
#ifdef FLASH_RDID
	uint32_t flash_id = 0;
    61003e3c:	b9082bff 	str	wzr, [sp, #2088]
	//CFG SSIENR
	/*dis ssi*/
	spi_dwc_ssi_disable(SPI0);
    61003e40:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e44:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e48:	97fffcfe 	bl	61003240 <spi_dwc_ssi_disable>
	//-----------------------------------------------------------
	//program CTRLR0 register
	//8-bit data frame, x1 mode, EEPROM read
	//-----------------------------------------------------------
	/*cfg SPI Data Frame Size.*/
	spi_dfs(SPI0,SPI_DFS_BYTE);   // byte
    61003e4c:	528000e1 	mov	w1, #0x7                   	// #7
    61003e50:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e54:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e58:	97fffd6c 	bl	61003408 <spi_dfs>
	/*Slave Select Toggle disable*/
	spi_sste_dis(SPI0);
    61003e5c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e60:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e64:	97fffd56 	bl	610033bc <spi_sste_dis>
	/*cfg SPI Frame Format*/
	spi_x1_mode(SPI0);
    61003e68:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e6c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e70:	97fffd15 	bl	610032c4 <spi_x1_mode>
	/*Transfer Mode.*/
	spi_tmod_e2prom(SPI0); // EEPROM read
    61003e74:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e78:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e7c:	97fffd3d 	bl	61003370 <spi_tmod_e2prom>
	//-----------------------------------------------------------
    //program TXFTLR register
    //start when 1 data items is present in tx fifo
    //-----------------------------------------------------------
    /*cfg SPI Transmit FIFO Threshold Level*/
	spi_txftl_tft(SPI0, 0); // default
    61003e80:	52800001 	mov	w1, #0x0                   	// #0
    61003e84:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e88:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e8c:	97fffd98 	bl	610034ec <spi_txftl_tft>
	//-----------------------------------------------------------
	//program CTRLR1 register
	//receive 3 data items
	//-----------------------------------------------------------
	spi_ctrl1_ndf(SPI0, 2); // receive 2+1 data items
    61003e90:	52800041 	mov	w1, #0x2                   	// #2
    61003e94:	d2880000 	mov	x0, #0x4000                	// #16384
    61003e98:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003e9c:	97fffde5 	bl	61003630 <spi_ctrl1_ndf>

	//-----------------------------------------------------------
	//program SER register
	//choose ss_0_n
	//-----------------------------------------------------------
	spi_ser(SPI0,SER_SS0_EN); // choose ss0--same to emulation platform.
    61003ea0:	52800021 	mov	w1, #0x1                   	// #1
    61003ea4:	d2880000 	mov	x0, #0x4000                	// #16384
    61003ea8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003eac:	97fffd6c 	bl	6100345c <spi_ser>
	//-----------------------------------------------------------
	//program BAUDR register
	//divided by 30 --(30 from design)
	//-----------------------------------------------------------
	/*cfg SPI Clock Divider.*/
	spi_sckdiv_cfg(SPI0, 0x1E);  // divided by 30.
    61003eb0:	528003c1 	mov	w1, #0x1e                  	// #30
    61003eb4:	d2880000 	mov	x0, #0x4000                	// #16384
    61003eb8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003ebc:	97fffd7a 	bl	610034a4 <spi_sckdiv_cfg>
	//-----------------------------------------------------------
	//program SSIENR register
	//enable spi
	//-----------------------------------------------------------
	/*en ssi*/
	spi_dwc_ssi_enable(SPI0);
    61003ec0:	d2880000 	mov	x0, #0x4000                	// #16384
    61003ec4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003ec8:	97fffcee 	bl	61003280 <spi_dwc_ssi_enable>
	//-----------------------------------------------------------
	//sent:
	//inst(0x): 9f (RDID)
	//receive: 3 data items
	//-----------------------------------------------------------
	flash_id = SReadID();
    61003ecc:	97ffff58 	bl	61003c2c <SReadID>
    61003ed0:	b9082be0 	str	w0, [sp, #2088]
	printf("flash_id= 0x%08x\r\n",flash_id); // print flash ID
    61003ed4:	b9482be1 	ldr	w1, [sp, #2088]
    61003ed8:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003edc:	91172000 	add	x0, x0, #0x5c8
    61003ee0:	97fff8bc 	bl	610021d0 <printf>
	/*flash ID check*/
	if(flash_id != S25FL512S_ID)
    61003ee4:	b9482be1 	ldr	w1, [sp, #2088]
    61003ee8:	5284b840 	mov	w0, #0x25c2                	// #9666
    61003eec:	72a00720 	movk	w0, #0x39, lsl #16
    61003ef0:	6b00003f 	cmp	w1, w0
    61003ef4:	540000c0 	b.eq	61003f0c <spi_test+0x150>  // b.none
	{
		printf("FAIL: flash ID check not ok!\r\n");
    61003ef8:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003efc:	91178000 	add	x0, x0, #0x5e0
    61003f00:	97fff8b4 	bl	610021d0 <printf>
		return -1;
    61003f04:	12800000 	mov	w0, #0xffffffff            	// #-1
    61003f08:	1400013c 	b	610043f8 <spi_test+0x63c>
	}
	else
	{
		printf("PASS: flash ID check ok!\r\n");
    61003f0c:	b0000000 	adrp	x0, 61004000 <spi_test+0x244>
    61003f10:	91180000 	add	x0, x0, #0x600
    61003f14:	97fff8af 	bl	610021d0 <printf>
    /************************flash erase****************************/
    /***************************************************************/
#ifdef FLASH_ERASE_WRITE
	//CFG SSIENR
	/*dis ssi*/
	spi_dwc_ssi_disable(SPI0);
    61003f18:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f1c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f20:	97fffcc8 	bl	61003240 <spi_dwc_ssi_disable>
	//-----------------------------------------------------------
	//program CTRLR0 register
	//8-bit data frame, x1 mode, TX only
	//-----------------------------------------------------------
	/*cfg SPI Data Frame Size.*/
	spi_dfs(SPI0,SPI_DFS_BYTE);   // byte
    61003f24:	528000e1 	mov	w1, #0x7                   	// #7
    61003f28:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f2c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f30:	97fffd36 	bl	61003408 <spi_dfs>
	/*Slave Select Toggle disable*/
	spi_sste_dis(SPI0);
    61003f34:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f38:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f3c:	97fffd20 	bl	610033bc <spi_sste_dis>
	/*cfg SPI Frame Format*/
	spi_x1_mode(SPI0);
    61003f40:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f44:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f48:	97fffcdf 	bl	610032c4 <spi_x1_mode>
	/*Transfer Mode.*/
	spi_tmod_tx(SPI0); // TX only
    61003f4c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f50:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f54:	97fffcef 	bl	61003310 <spi_tmod_tx>
	//-----------------------------------------------------------
    //program TXFTLR register
    //start when 1 data items is present in tx fifo
    //-----------------------------------------------------------
    /*cfg SPI Transmit FIFO Threshold Level*/
	spi_txftl_tft(SPI0, 0); // default
    61003f58:	52800001 	mov	w1, #0x0                   	// #0
    61003f5c:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f60:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f64:	97fffd62 	bl	610034ec <spi_txftl_tft>
	//-----------------------------------------------------------
	//program SSIENR register
	//enable spi
	//-----------------------------------------------------------
	/*en ssi*/
	spi_dwc_ssi_enable(SPI0);
    61003f68:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f6c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f70:	97fffcc4 	bl	61003280 <spi_dwc_ssi_enable>

	//-----------------------------------------------------------
	//sent:
	//inst(0x): 06 (WREN)
	//-----------------------------------------------------------
	spi_data_transmit(SPI0,CMD_WREN); // tx read id cmd
    61003f74:	528000c1 	mov	w1, #0x6                   	// #6
    61003f78:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f7c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f80:	97fffd70 	bl	61003540 <spi_data_transmit>
	/*check status--wait busy returns to idle*/
	while(!spi_sr_tfe(SPI0)); // wait TFE returns to 1
    61003f84:	d503201f 	nop
    61003f88:	d2880000 	mov	x0, #0x4000                	// #16384
    61003f8c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003f90:	97fffd84 	bl	610035a0 <spi_sr_tfe>
    61003f94:	7100001f 	cmp	w0, #0x0
    61003f98:	54ffff80 	b.eq	61003f88 <spi_test+0x1cc>  // b.none
	while(spi_sr_busy(SPI0));  // check busyl or idle,wait BUSY returns to 0
    61003f9c:	d503201f 	nop
    61003fa0:	d2880000 	mov	x0, #0x4000                	// #16384
    61003fa4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003fa8:	97fffd8a 	bl	610035d0 <spi_sr_busy>
    61003fac:	7100001f 	cmp	w0, #0x0
    61003fb0:	54ffff81 	b.ne	61003fa0 <spi_test+0x1e4>  // b.any
	//-----------------------------------------------------------
	//chip erase
//	spi_data_transmit(SPI0,CMD_CHIP_ERASE); // tx chip erase cmd

	//sector erase
	spi_data_transmit(SPI0,CMD_SECTOR_ERASE); // tx sector erase cmd
    61003fb4:	52800401 	mov	w1, #0x20                  	// #32
    61003fb8:	d2880000 	mov	x0, #0x4000                	// #16384
    61003fbc:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003fc0:	97fffd60 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[23:16]
    61003fc4:	52800001 	mov	w1, #0x0                   	// #0
    61003fc8:	d2880000 	mov	x0, #0x4000                	// #16384
    61003fcc:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003fd0:	97fffd5c 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[15:8]
    61003fd4:	52800001 	mov	w1, #0x0                   	// #0
    61003fd8:	d2880000 	mov	x0, #0x4000                	// #16384
    61003fdc:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003fe0:	97fffd58 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[7:0]
    61003fe4:	52800001 	mov	w1, #0x0                   	// #0
    61003fe8:	d2880000 	mov	x0, #0x4000                	// #16384
    61003fec:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61003ff0:	97fffd54 	bl	61003540 <spi_data_transmit>

	/*check status--wait busy returns to idle*/
	while(!spi_sr_tfe(SPI0)); // wait TFE returns to 1
    61003ff4:	d503201f 	nop
    61003ff8:	d2880000 	mov	x0, #0x4000                	// #16384
    61003ffc:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004000:	97fffd68 	bl	610035a0 <spi_sr_tfe>
    61004004:	7100001f 	cmp	w0, #0x0
    61004008:	54ffff80 	b.eq	61003ff8 <spi_test+0x23c>  // b.none
	while(spi_sr_busy(SPI0));  // check busy or idle,wait BUSY returns to 0
    6100400c:	d503201f 	nop
    61004010:	d2880000 	mov	x0, #0x4000                	// #16384
    61004014:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004018:	97fffd6e 	bl	610035d0 <spi_sr_busy>
    6100401c:	7100001f 	cmp	w0, #0x0
    61004020:	54ffff81 	b.ne	61004010 <spi_test+0x254>  // b.any

	/******************** check flash status(WIP)*********************/
	flash_wait_wip();
    61004024:	97ffff2d 	bl	61003cd8 <flash_wait_wip>
	/***************************************************************/
	/************************flash write ***************************/
	/***************************************************************/
	//CFG SSIENR
	/*dis ssi*/
	spi_dwc_ssi_disable(SPI0);
    61004028:	d2880000 	mov	x0, #0x4000                	// #16384
    6100402c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004030:	97fffc84 	bl	61003240 <spi_dwc_ssi_disable>
	//-----------------------------------------------------------
	//program CTRLR0 register
	//8-bit data frame, x1 mode, TX only
	//-----------------------------------------------------------
	/*cfg SPI Data Frame Size.*/
	spi_dfs(SPI0,SPI_DFS_BYTE);   // byte
    61004034:	528000e1 	mov	w1, #0x7                   	// #7
    61004038:	d2880000 	mov	x0, #0x4000                	// #16384
    6100403c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004040:	97fffcf2 	bl	61003408 <spi_dfs>
	/*Slave Select Toggle disable*/
	spi_sste_dis(SPI0);
    61004044:	d2880000 	mov	x0, #0x4000                	// #16384
    61004048:	f2bf0800 	movk	x0, #0xf840, lsl #16
    6100404c:	97fffcdc 	bl	610033bc <spi_sste_dis>
	/*cfg SPI Frame Format*/
	spi_x1_mode(SPI0);
    61004050:	d2880000 	mov	x0, #0x4000                	// #16384
    61004054:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004058:	97fffc9b 	bl	610032c4 <spi_x1_mode>
	/*Transfer Mode.*/
	spi_tmod_tx(SPI0); // TX only
    6100405c:	d2880000 	mov	x0, #0x4000                	// #16384
    61004060:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004064:	97fffcab 	bl	61003310 <spi_tmod_tx>

	//-----------------------------------------------------------
    //program TXFTLR register
    //start when 1 data items is present in tx fifo
    //-----------------------------------------------------------
	spi_txftl_tft(SPI0, 0); // default
    61004068:	52800001 	mov	w1, #0x0                   	// #0
    6100406c:	d2880000 	mov	x0, #0x4000                	// #16384
    61004070:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004074:	97fffd1e 	bl	610034ec <spi_txftl_tft>
	/*en ssi*/
	spi_dwc_ssi_enable(SPI0);
    61004078:	d2880000 	mov	x0, #0x4000                	// #16384
    6100407c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004080:	97fffc80 	bl	61003280 <spi_dwc_ssi_enable>

	//-----------------------------------------------------------
	//sent:
	//inst(0x): 06 (WREN)
	//-----------------------------------------------------------
	spi_data_transmit(SPI0,CMD_WREN); // tx write en cmd
    61004084:	528000c1 	mov	w1, #0x6                   	// #6
    61004088:	d2880000 	mov	x0, #0x4000                	// #16384
    6100408c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004090:	97fffd2c 	bl	61003540 <spi_data_transmit>
	/*check status--wait busy returns to idle*/
	while(!spi_sr_tfe(SPI0)); // wait TFE returns to 1
    61004094:	d503201f 	nop
    61004098:	d2880000 	mov	x0, #0x4000                	// #16384
    6100409c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610040a0:	97fffd40 	bl	610035a0 <spi_sr_tfe>
    610040a4:	7100001f 	cmp	w0, #0x0
    610040a8:	54ffff80 	b.eq	61004098 <spi_test+0x2dc>  // b.none
	while(spi_sr_busy(SPI0));  // check busy or idle,wait BUSY returns to 0
    610040ac:	d503201f 	nop
    610040b0:	d2880000 	mov	x0, #0x4000                	// #16384
    610040b4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610040b8:	97fffd46 	bl	610035d0 <spi_sr_busy>
    610040bc:	7100001f 	cmp	w0, #0x0
    610040c0:	54ffff81 	b.ne	610040b0 <spi_test+0x2f4>  // b.any

	//CFG SSIENR
	/*dis ssi*/
	spi_dwc_ssi_disable(SPI0);
    610040c4:	d2880000 	mov	x0, #0x4000                	// #16384
    610040c8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610040cc:	97fffc5d 	bl	61003240 <spi_dwc_ssi_disable>
	//-----------------------------------------------------------
    //program TXFTLR register
    //-----------------------------------------------------------
    /*cfg SPI Transmit FIFO Threshold Level*/
	spi_txftl_tft(SPI0, 0); // default
    610040d0:	52800001 	mov	w1, #0x0                   	// #0
    610040d4:	d2880000 	mov	x0, #0x4000                	// #16384
    610040d8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610040dc:	97fffd04 	bl	610034ec <spi_txftl_tft>

	/*en ssi*/
	spi_dwc_ssi_enable(SPI0);
    610040e0:	d2880000 	mov	x0, #0x4000                	// #16384
    610040e4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610040e8:	97fffc66 	bl	61003280 <spi_dwc_ssi_enable>
	//sent:
	//inst(0x): 02 (PP)
	//addr(0x): 00 00 00
	//data(0x): 256 bytes
	//-----------------------------------------------------------
	spi_data_transmit(SPI0,CMD_PP); // tx Page Program cmd
    610040ec:	52800041 	mov	w1, #0x2                   	// #2
    610040f0:	d2880000 	mov	x0, #0x4000                	// #16384
    610040f4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610040f8:	97fffd12 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[23:16]
    610040fc:	52800001 	mov	w1, #0x0                   	// #0
    61004100:	d2880000 	mov	x0, #0x4000                	// #16384
    61004104:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004108:	97fffd0e 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[15:8]
    6100410c:	52800001 	mov	w1, #0x0                   	// #0
    61004110:	d2880000 	mov	x0, #0x4000                	// #16384
    61004114:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004118:	97fffd0a 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[7:0]
    6100411c:	52800001 	mov	w1, #0x0                   	// #0
    61004120:	d2880000 	mov	x0, #0x4000                	// #16384
    61004124:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004128:	97fffd06 	bl	61003540 <spi_data_transmit>

	//256 bytes
	for(i=0; i<256; i++)
    6100412c:	79105fff 	strh	wzr, [sp, #2094]
    61004130:	14000013 	b	6100417c <spi_test+0x3c0>
	{
		while(!spi_sr_tfe(SPI0));
    61004134:	d503201f 	nop
    61004138:	d2880000 	mov	x0, #0x4000                	// #16384
    6100413c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004140:	97fffd18 	bl	610035a0 <spi_sr_tfe>
    61004144:	7100001f 	cmp	w0, #0x0
    61004148:	54ffff80 	b.eq	61004138 <spi_test+0x37c>  // b.none
		spi_data_transmit(SPI0,wrdata_a[i]); // tx data wrdata_a[i]
    6100414c:	79505fe0 	ldrh	w0, [sp, #2094]
    61004150:	93407c00 	sxtw	x0, w0
    61004154:	d37ef400 	lsl	x0, x0, #2
    61004158:	9110a3e1 	add	x1, sp, #0x428
    6100415c:	b8606820 	ldr	w0, [x1, x0]
    61004160:	2a0003e1 	mov	w1, w0
    61004164:	d2880000 	mov	x0, #0x4000                	// #16384
    61004168:	f2bf0800 	movk	x0, #0xf840, lsl #16
    6100416c:	97fffcf5 	bl	61003540 <spi_data_transmit>
	for(i=0; i<256; i++)
    61004170:	79505fe0 	ldrh	w0, [sp, #2094]
    61004174:	11000400 	add	w0, w0, #0x1
    61004178:	79105fe0 	strh	w0, [sp, #2094]
    6100417c:	79505fe0 	ldrh	w0, [sp, #2094]
    61004180:	7103fc1f 	cmp	w0, #0xff
    61004184:	54fffd89 	b.ls	61004134 <spi_test+0x378>  // b.plast
	}
	/*check status--wait busy returns to idle*/
	while(!spi_sr_tfe(SPI0)); // wait TFE returns to 1
    61004188:	d503201f 	nop
    6100418c:	d2880000 	mov	x0, #0x4000                	// #16384
    61004190:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004194:	97fffd03 	bl	610035a0 <spi_sr_tfe>
    61004198:	7100001f 	cmp	w0, #0x0
    6100419c:	54ffff80 	b.eq	6100418c <spi_test+0x3d0>  // b.none
	while(spi_sr_busy(SPI0));  // check busy or idle,wait BUSY returns to 0
    610041a0:	d503201f 	nop
    610041a4:	d2880000 	mov	x0, #0x4000                	// #16384
    610041a8:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610041ac:	97fffd09 	bl	610035d0 <spi_sr_busy>
    610041b0:	7100001f 	cmp	w0, #0x0
    610041b4:	54ffff81 	b.ne	610041a4 <spi_test+0x3e8>  // b.any
	for(i=0; i<256; i++)
    610041b8:	79105fff 	strh	wzr, [sp, #2094]
    610041bc:	1400000d 	b	610041f0 <spi_test+0x434>
	{
		printf("%3d",wrdata_a[i]); // print write data
    610041c0:	79505fe0 	ldrh	w0, [sp, #2094]
    610041c4:	93407c00 	sxtw	x0, w0
    610041c8:	d37ef400 	lsl	x0, x0, #2
    610041cc:	9110a3e1 	add	x1, sp, #0x428
    610041d0:	b8606820 	ldr	w0, [x1, x0]
    610041d4:	2a0003e1 	mov	w1, w0
    610041d8:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    610041dc:	91188000 	add	x0, x0, #0x620
    610041e0:	97fff7fc 	bl	610021d0 <printf>
	for(i=0; i<256; i++)
    610041e4:	79505fe0 	ldrh	w0, [sp, #2094]
    610041e8:	11000400 	add	w0, w0, #0x1
    610041ec:	79105fe0 	strh	w0, [sp, #2094]
    610041f0:	79505fe0 	ldrh	w0, [sp, #2094]
    610041f4:	7103fc1f 	cmp	w0, #0xff
    610041f8:	54fffe49 	b.ls	610041c0 <spi_test+0x404>  // b.plast
	}
	printf(" \n");
    610041fc:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    61004200:	9118a000 	add	x0, x0, #0x628
    61004204:	97fff7f3 	bl	610021d0 <printf>
	printf("flash write finish. \n");
    61004208:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    6100420c:	9118c000 	add	x0, x0, #0x630
    61004210:	97fff7f0 	bl	610021d0 <printf>
	/******************** check flash status(WIP)*********************/
	flash_wait_wip();
    61004214:	97fffeb1 	bl	61003cd8 <flash_wait_wip>
	/***************************************************************/
#ifdef FLASH_READ
	/*****cfg reg for read******/
	//CFG SSIENR
	/*dis ssi*/
	spi_dwc_ssi_disable(SPI0);
    61004218:	d2880000 	mov	x0, #0x4000                	// #16384
    6100421c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004220:	97fffc08 	bl	61003240 <spi_dwc_ssi_disable>
	//-----------------------------------------------------------
	//program CTRLR0 register
	//8-bit data frame, x1 mode, EEPROM read
	//-----------------------------------------------------------
	/*cfg SPI Data Frame Size.*/
	spi_dfs(SPI0,SPI_DFS_BYTE);   // byte
    61004224:	528000e1 	mov	w1, #0x7                   	// #7
    61004228:	d2880000 	mov	x0, #0x4000                	// #16384
    6100422c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004230:	97fffc76 	bl	61003408 <spi_dfs>
	/*Slave Select Toggle disable*/
	spi_sste_dis(SPI0);
    61004234:	d2880000 	mov	x0, #0x4000                	// #16384
    61004238:	f2bf0800 	movk	x0, #0xf840, lsl #16
    6100423c:	97fffc60 	bl	610033bc <spi_sste_dis>
	/*cfg SPI Frame Format*/
	spi_x1_mode(SPI0);
    61004240:	d2880000 	mov	x0, #0x4000                	// #16384
    61004244:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004248:	97fffc1f 	bl	610032c4 <spi_x1_mode>
	/*Transfer Mode.*/
	spi_tmod_e2prom(SPI0); // e2prom read
    6100424c:	d2880000 	mov	x0, #0x4000                	// #16384
    61004250:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004254:	97fffc47 	bl	61003370 <spi_tmod_e2prom>
	//-----------------------------------------------------------
	//program CTRLR1 register
	//receive 256 data items
	//-----------------------------------------------------------
	spi_ctrl1_ndf(SPI0, 0xFF); // receive 256 data items--FIFO MAX level=64
    61004258:	52801fe1 	mov	w1, #0xff                  	// #255
    6100425c:	d2880000 	mov	x0, #0x4000                	// #16384
    61004260:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004264:	97fffcf3 	bl	61003630 <spi_ctrl1_ndf>
//	spi_ctrl1_ndf(SPI0, 0x1D); // receive 30 data items

	/*en ssi*/
	spi_dwc_ssi_enable(SPI0);
    61004268:	d2880000 	mov	x0, #0x4000                	// #16384
    6100426c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004270:	97fffc04 	bl	61003280 <spi_dwc_ssi_enable>
	//sent:
	//inst(0x): 03 (X1 READ)
	//addr(0x): 00 00 00
	//receive(0x): 256 data items
	//-----------------------------------------------------------
	spi_data_transmit(SPI0,CMD_SREAD); // tx x1 read cmd
    61004274:	52800061 	mov	w1, #0x3                   	// #3
    61004278:	d2880000 	mov	x0, #0x4000                	// #16384
    6100427c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004280:	97fffcb0 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[23:16]
    61004284:	52800001 	mov	w1, #0x0                   	// #0
    61004288:	d2880000 	mov	x0, #0x4000                	// #16384
    6100428c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    61004290:	97fffcac 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[15:8]
    61004294:	52800001 	mov	w1, #0x0                   	// #0
    61004298:	d2880000 	mov	x0, #0x4000                	// #16384
    6100429c:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610042a0:	97fffca8 	bl	61003540 <spi_data_transmit>
	spi_data_transmit(SPI0,0x00); // tx addr[7:0]
    610042a4:	52800001 	mov	w1, #0x0                   	// #0
    610042a8:	d2880000 	mov	x0, #0x4000                	// #16384
    610042ac:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610042b0:	97fffca4 	bl	61003540 <spi_data_transmit>
	/*check status--wait busy returns to idle*/
	while(!spi_sr_tfe(SPI0)); // wait TFE returns to 1
    610042b4:	d503201f 	nop
    610042b8:	d2880000 	mov	x0, #0x4000                	// #16384
    610042bc:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610042c0:	97fffcb8 	bl	610035a0 <spi_sr_tfe>
    610042c4:	7100001f 	cmp	w0, #0x0
    610042c8:	54ffff80 	b.eq	610042b8 <spi_test+0x4fc>  // b.none
//	while(spi_sr_busy(SPI0));  // check busy or idle,wait BUSY returns to 0
	// read 256 bytes
	i=0;   // must init i=0; in case of RXFIFO still empty;
    610042cc:	79105fff 	strh	wzr, [sp, #2094]
	do{
		if(spi_sr_rfne(SPI0))  // RXFIFO not empty
    610042d0:	d2880000 	mov	x0, #0x4000                	// #16384
    610042d4:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610042d8:	97fffcca 	bl	61003600 <spi_sr_rfne>
    610042dc:	7100001f 	cmp	w0, #0x0
    610042e0:	540001a0 	b.eq	61004314 <spi_test+0x558>  // b.none
		{
			rddata_a[i]= spi_data_read(SPI0);
    610042e4:	79505ff3 	ldrh	w19, [sp, #2094]
    610042e8:	d2880000 	mov	x0, #0x4000                	// #16384
    610042ec:	f2bf0800 	movk	x0, #0xf840, lsl #16
    610042f0:	97fffca6 	bl	61003588 <spi_data_read>
    610042f4:	2a0003e2 	mov	w2, w0
    610042f8:	93407e60 	sxtw	x0, w19
    610042fc:	d37ef400 	lsl	x0, x0, #2
    61004300:	9100a3e1 	add	x1, sp, #0x28
    61004304:	b8206822 	str	w2, [x1, x0]
			i++;
    61004308:	79505fe0 	ldrh	w0, [sp, #2094]
    6100430c:	11000400 	add	w0, w0, #0x1
    61004310:	79105fe0 	strh	w0, [sp, #2094]
		}
	}while(i<256);
    61004314:	79505fe0 	ldrh	w0, [sp, #2094]
    61004318:	7103fc1f 	cmp	w0, #0xff
    6100431c:	54fffda9 	b.ls	610042d0 <spi_test+0x514>  // b.plast

	for(i=0; i<256; i++)
    61004320:	79105fff 	strh	wzr, [sp, #2094]
    61004324:	1400000d 	b	61004358 <spi_test+0x59c>
	{
		printf("%3d",rddata_a[i]); // print write data
    61004328:	79505fe0 	ldrh	w0, [sp, #2094]
    6100432c:	93407c00 	sxtw	x0, w0
    61004330:	d37ef400 	lsl	x0, x0, #2
    61004334:	9100a3e1 	add	x1, sp, #0x28
    61004338:	b8606820 	ldr	w0, [x1, x0]
    6100433c:	2a0003e1 	mov	w1, w0
    61004340:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    61004344:	91188000 	add	x0, x0, #0x620
    61004348:	97fff7a2 	bl	610021d0 <printf>
	for(i=0; i<256; i++)
    6100434c:	79505fe0 	ldrh	w0, [sp, #2094]
    61004350:	11000400 	add	w0, w0, #0x1
    61004354:	79105fe0 	strh	w0, [sp, #2094]
    61004358:	79505fe0 	ldrh	w0, [sp, #2094]
    6100435c:	7103fc1f 	cmp	w0, #0xff
    61004360:	54fffe49 	b.ls	61004328 <spi_test+0x56c>  // b.plast
	}
	printf("\n");
    61004364:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    61004368:	91192000 	add	x0, x0, #0x648
    6100436c:	97fff799 	bl	610021d0 <printf>
	printf("flash read finish. \n");
    61004370:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    61004374:	91194000 	add	x0, x0, #0x650
    61004378:	97fff796 	bl	610021d0 <printf>

	//----------- data check----------
	// 256 bytes
	for(i=0; i<256; i++)
    6100437c:	79105fff 	strh	wzr, [sp, #2094]
    61004380:	14000015 	b	610043d4 <spi_test+0x618>
	{
		if(wrdata_a[i] != rddata_a[i])
    61004384:	79505fe0 	ldrh	w0, [sp, #2094]
    61004388:	93407c00 	sxtw	x0, w0
    6100438c:	d37ef400 	lsl	x0, x0, #2
    61004390:	9110a3e1 	add	x1, sp, #0x428
    61004394:	b8606821 	ldr	w1, [x1, x0]
    61004398:	79505fe0 	ldrh	w0, [sp, #2094]
    6100439c:	93407c00 	sxtw	x0, w0
    610043a0:	d37ef400 	lsl	x0, x0, #2
    610043a4:	9100a3e2 	add	x2, sp, #0x28
    610043a8:	b8606840 	ldr	w0, [x2, x0]
    610043ac:	6b00003f 	cmp	w1, w0
    610043b0:	540000c0 	b.eq	610043c8 <spi_test+0x60c>  // b.none
		{
			printf("FAIL: datas are not same!\r\n");
    610043b4:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    610043b8:	9119a000 	add	x0, x0, #0x668
    610043bc:	97fff785 	bl	610021d0 <printf>
			return -1;
    610043c0:	12800000 	mov	w0, #0xffffffff            	// #-1
    610043c4:	1400000d 	b	610043f8 <spi_test+0x63c>
	for(i=0; i<256; i++)
    610043c8:	79505fe0 	ldrh	w0, [sp, #2094]
    610043cc:	11000400 	add	w0, w0, #0x1
    610043d0:	79105fe0 	strh	w0, [sp, #2094]
    610043d4:	79505fe0 	ldrh	w0, [sp, #2094]
    610043d8:	7103fc1f 	cmp	w0, #0xff
    610043dc:	54fffd49 	b.ls	61004384 <spi_test+0x5c8>  // b.plast
		}
	}
	printf("PASS: spi x1 write / read test success!\r\n");
    610043e0:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    610043e4:	911a2000 	add	x0, x0, #0x688
    610043e8:	97fff77a 	bl	610021d0 <printf>
#endif

    printf("test finish\r\n");
    610043ec:	90000000 	adrp	x0, 61004000 <spi_test+0x244>
    610043f0:	911ae000 	add	x0, x0, #0x6b8
    610043f4:	97fff777 	bl	610021d0 <printf>
    //while(1);
}
    610043f8:	f9400bf3 	ldr	x19, [sp, #16]
    610043fc:	a9407bfd 	ldp	x29, x30, [sp]
    61004400:	9120c3ff 	add	sp, sp, #0x830
    61004404:	d65f03c0 	ret

Disassembly of section .rodata:

0000000061004408 <.rodata>:
    61004408:	45535341 	ssubwb	z1.h, z26.h, z19.b
    6100440c:	203a5452 	.inst	0x203a5452 ; undefined
    61004410:	253a7325 	.inst	0x253a7325 ; undefined
    61004414:	73253a64 	.inst	0x73253a64 ; undefined
    61004418:	0000000a 	udf	#10
    6100441c:	00000000 	udf	#0
    61004420:	20727473 	.inst	0x20727473 ; undefined
    61004424:	4e203d21 	cmge	v1.16b, v9.16b, v0.16b
    61004428:	004c4c55 	.inst	0x004c4c55 ; undefined
    6100442c:	00000000 	udf	#0
    61004430:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    61004434:	6f532f2e 	.inst	0x6f532f2e ; undefined
    61004438:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    6100443c:	70616f6d 	adr	x13, 610c722b <_sp+0x8722b>
    61004440:	6f432f75 	.inst	0x6f432f75 ; undefined
    61004444:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    61004448:	756f532f 	.inst	0x756f532f ; undefined
    6100444c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    61004450:	6362694c 	.inst	0x6362694c ; undefined
    61004454:	6972702f 	ldpsw	x15, x28, [x1, #-112]
    61004458:	2e66746e 	uabd	v14.4h, v3.4h, v6.4h
    6100445c:	00000063 	udf	#99
    61004460:	00007830 	udf	#30768
    61004464:	00000000 	udf	#0
    61004468:	53414c46 	.inst	0x53414c46 ; undefined
    6100446c:	50495848 	adr	x8, 61096f76 <_sp+0x56f76>
	...
    61004478:	53414c46 	.inst	0x53414c46 ; undefined
    6100447c:	00000048 	udf	#72
    61004480:	004d4c49 	.inst	0x004d4c49 ; undefined
    61004484:	00000000 	udf	#0
    61004488:	00524444 	.inst	0x00524444 ; undefined
    6100448c:	00000000 	udf	#0
    61004490:	333a3930 	.inst	0x333a3930 ; undefined
    61004494:	30303a32 	adr	x18, 61064bd9 <_sp+0x24bd9>
	...
    610044a0:	206c754a 	.inst	0x206c754a ; undefined
    610044a4:	32203931 	orr	w17, w9, #0x7fff
    610044a8:	00323230 	.inst	0x00323230 ; NYI
    610044ac:	00000000 	udf	#0
    610044b0:	6f6c6e41 	.inst	0x6f6c6e41 ; undefined
    610044b4:	20636967 	.inst	0x20636967 ; undefined
    610044b8:	20555041 	.inst	0x20555041 ; undefined
    610044bc:	204b4453 	.inst	0x204b4453 ; undefined
    610044c0:	6c697542 	ldnp	d2, d29, [x10, #-368]
    610044c4:	69542064 	ldpsw	x4, x8, [x3, #160]
    610044c8:	203a656d 	.inst	0x203a656d ; undefined
    610044cc:	202c7325 	.inst	0x202c7325 ; undefined
    610044d0:	0a0d7325 	and	w5, w25, w13, lsl #28
    610044d4:	00000000 	udf	#0
    610044d8:	6e776f44 	umin	v4.8h, v26.8h, v23.8h
    610044dc:	64616f6c 	.inst	0x64616f6c ; undefined
    610044e0:	646f4d20 	.inst	0x646f4d20 ; undefined
    610044e4:	25203a65 	.inst	0x25203a65 ; undefined
    610044e8:	000a0d73 	.inst	0x000a0d73 ; undefined
    610044ec:	00000000 	udf	#0
    610044f0:	20555043 	.inst	0x20555043 ; undefined
    610044f4:	71657246 	subs	w6, w18, #0x95c, lsl #12
    610044f8:	636e6575 	.inst	0x636e6575 ; undefined
    610044fc:	6c252079 	stnp	d25, d8, [x3, #-432]
    61004500:	7a482075 	.inst	0x7a482075 ; undefined
    61004504:	00000a0d 	udf	#2573
    61004508:	74616472 	.inst	0x74616472 ; undefined
    6100450c:	305f3061 	adr	x1, 610c2b19 <_sp+0x82b19>
    61004510:	20736920 	.inst	0x20736920 ; undefined
    61004514:	00007825 	udf	#30757
    61004518:	64206472 	.inst	0x64206472 ; undefined
    6100451c:	20617461 	.inst	0x20617461 ; undefined
    61004520:	69206425 	stgp	x5, x25, [x1, #-1024]
    61004524:	64252073 	fmul	z19.h, z3.h, z5.h[0]
    61004528:	00000a0d 	udf	#2573
    6100452c:	00000000 	udf	#0
    61004530:	7845202a 	ldurh	w10, [x1, #82]
    61004534:	6c706d61 	ldnp	d1, d27, [x11, #-256]
    61004538:	65203a65 	.inst	0x65203a65 ; undefined
    6100453c:	6f727032 	fcmla	v18.8h, v1.8h, v18.h[1], #270
    61004540:	7277206d 	.inst	0x7277206d ; undefined
    61004544:	20657469 	.inst	0x20657469 ; undefined
    61004548:	20646e61 	.inst	0x20646e61 ; undefined
    6100454c:	64616572 	.inst	0x64616572 ; undefined
    61004550:	73657420 	.inst	0x73657420 ; undefined
    61004554:	000a2e74 	.inst	0x000a2e74 ; undefined
    61004558:	4c494146 	.inst	0x4c494146 ; undefined
    6100455c:	6164203a 	.inst	0x6164203a ; undefined
    61004560:	61206174 	.inst	0x61206174 ; undefined
    61004564:	6e206572 	umax	v18.16b, v11.16b, v0.16b
    61004568:	7320746f 	.inst	0x7320746f ; undefined
    6100456c:	21656d61 	.inst	0x21656d61 ; undefined
    61004570:	00000a0d 	udf	#2573
    61004574:	00000000 	udf	#0
    61004578:	64616552 	.inst	0x64616552 ; undefined
    6100457c:	646e6120 	.inst	0x646e6120 ; undefined
    61004580:	69727720 	ldpsw	x0, x29, [x25, #-112]
    61004584:	64206574 	.inst	0x64206574 ; undefined
    61004588:	20617461 	.inst	0x20617461 ; undefined
    6100458c:	20657261 	.inst	0x20657261 ; undefined
    61004590:	20656874 	.inst	0x20656874 ; undefined
    61004594:	656d6173 	fnmls	z19.h, p0/m, z11.h, z13.h
    61004598:	000a0d2e 	.inst	0x000a0d2e ; undefined
    6100459c:	00000000 	udf	#0
    610045a0:	53534150 	.inst	0x53534150 ; undefined
    610045a4:	6574203a 	fmls	z26.h, p0/m, z1.h, z20.h
    610045a8:	73207473 	.inst	0x73207473 ; undefined
    610045ac:	65636375 	fnmls	z21.h, p0/m, z27.h, z3.h
    610045b0:	0d217373 	.inst	0x0d217373 ; undefined
    610045b4:	0000000a 	udf	#10
    610045b8:	74736574 	.inst	0x74736574 ; undefined
    610045bc:	61747320 	.inst	0x61747320 ; undefined
    610045c0:	0a0d7472 	and	w18, w3, w13, lsl #29
    610045c4:	00000000 	udf	#0
    610045c8:	73616c66 	.inst	0x73616c66 ; undefined
    610045cc:	64695f68 	.inst	0x64695f68 ; undefined
    610045d0:	7830203d 	ldeorh	w16, w29, [x1]
    610045d4:	78383025 	ldseth	w24, w5, [x1]
    610045d8:	00000a0d 	udf	#2573
    610045dc:	00000000 	udf	#0
    610045e0:	4c494146 	.inst	0x4c494146 ; undefined
    610045e4:	6c66203a 	ldnp	d26, d8, [x1, #-416]
    610045e8:	20687361 	.inst	0x20687361 ; undefined
    610045ec:	63204449 	.inst	0x63204449 ; undefined
    610045f0:	6b636568 	.inst	0x6b636568 ; undefined
    610045f4:	746f6e20 	.inst	0x746f6e20 ; undefined
    610045f8:	216b6f20 	.inst	0x216b6f20 ; undefined
    610045fc:	00000a0d 	udf	#2573
    61004600:	53534150 	.inst	0x53534150 ; undefined
    61004604:	6c66203a 	ldnp	d26, d8, [x1, #-416]
    61004608:	20687361 	.inst	0x20687361 ; undefined
    6100460c:	63204449 	.inst	0x63204449 ; undefined
    61004610:	6b636568 	.inst	0x6b636568 ; undefined
    61004614:	216b6f20 	.inst	0x216b6f20 ; undefined
    61004618:	00000a0d 	udf	#2573
    6100461c:	00000000 	udf	#0
    61004620:	00643325 	.inst	0x00643325 ; undefined
    61004624:	00000000 	udf	#0
    61004628:	00000a20 	udf	#2592
    6100462c:	00000000 	udf	#0
    61004630:	73616c66 	.inst	0x73616c66 ; undefined
    61004634:	72772068 	.inst	0x72772068 ; undefined
    61004638:	20657469 	.inst	0x20657469 ; undefined
    6100463c:	696e6966 	ldpsw	x6, x26, [x11, #-144]
    61004640:	202e6873 	.inst	0x202e6873 ; undefined
    61004644:	0000000a 	udf	#10
    61004648:	0000000a 	udf	#10
    6100464c:	00000000 	udf	#0
    61004650:	73616c66 	.inst	0x73616c66 ; undefined
    61004654:	65722068 	fmls	z8.h, p0/m, z3.h, z18.h
    61004658:	66206461 	.inst	0x66206461 ; undefined
    6100465c:	73696e69 	.inst	0x73696e69 ; undefined
    61004660:	0a202e68 	bic	w8, w19, w0, lsl #11
    61004664:	00000000 	udf	#0
    61004668:	4c494146 	.inst	0x4c494146 ; undefined
    6100466c:	6164203a 	.inst	0x6164203a ; undefined
    61004670:	20736174 	.inst	0x20736174 ; undefined
    61004674:	20657261 	.inst	0x20657261 ; undefined
    61004678:	20746f6e 	.inst	0x20746f6e ; undefined
    6100467c:	656d6173 	fnmls	z19.h, p0/m, z11.h, z13.h
    61004680:	000a0d21 	.inst	0x000a0d21 ; undefined
    61004684:	00000000 	udf	#0
    61004688:	53534150 	.inst	0x53534150 ; undefined
    6100468c:	7073203a 	adr	x26, 610eaa93 <_sp+0xaaa93>
    61004690:	31782069 	adds	w9, w3, #0xe08, lsl #12
    61004694:	69727720 	ldpsw	x0, x29, [x25, #-112]
    61004698:	2f206574 	sqshlu	v20.2s, v11.2s, #0
    6100469c:	61657220 	.inst	0x61657220 ; undefined
    610046a0:	65742064 	fmls	z4.h, p0/m, z3.h, z20.h
    610046a4:	73207473 	.inst	0x73207473 ; undefined
    610046a8:	65636375 	fnmls	z21.h, p0/m, z27.h, z3.h
    610046ac:	0d217373 	.inst	0x0d217373 ; undefined
    610046b0:	0000000a 	udf	#10
    610046b4:	00000000 	udf	#0
    610046b8:	74736574 	.inst	0x74736574 ; undefined
    610046bc:	6e696620 	umax	v0.8h, v17.8h, v9.8h
    610046c0:	0d687369 	.inst	0x0d687369 ; undefined
    610046c4:	Address 0x00000000610046c4 is out of bounds.


Disassembly of section .data:

00000000610046c8 <SystemCoreClock>:
uint32_t SystemCoreClock = SYSTEM_CLOCK;  /* System Clock Frequency (Core Clock) */
    610046c8:	02faf080 	.inst	0x02faf080 ; undefined

Disassembly of section .bss:

00000000610046d0 <generic_timer_rate>:
	...

00000000610046d8 <irq_handler>:
	...

0000000061004ed8 <amount0>:
uint8_t amount0;	//byte_data transfer number
    61004ed8:	00000000 	udf	#0

0000000061004edc <rdata0_0>:
uint32_t rdata0_0;	//
    61004edc:	00000000 	udf	#0

0000000061004ee0 <ckdata0_0>:
	...

0000000061004f20 <ckdata0_1>:
	...

Disassembly of section .stack:

000000006103c000 <_heap_end>:
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
{
       0:	00000060 	udf	#96
       4:	00460004 	.inst	0x00460004 ; undefined
	panic();
       8:	01040000 	.inst	0x01040000 ; undefined
}
       c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
      10:	01010100 	.inst	0x01010100 ; undefined
      14:	00000001 	udf	#1
{
      18:	01000001 	.inst	0x01000001 ; undefined
      1c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	6f532f2e 	.inst	0x6f532f2e ; undefined
      24:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
      28:	70616f6d 	adr	x13, c2e17 <__stack_size+0xbee17>
      2c:	6f432f75 	.inst	0x6f432f75 ; undefined
	return 0;
      30:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
}
      34:	756f532f 	.inst	0x756f532f ; undefined
      38:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]

void _delay_us(u64_t count)
{
    u64_t freq = syscnt_get_freq();
    u64_t delay_cnt = (u64_t)(count*(freq/1000000));
    __delay(delay_cnt);
      3c:	00434347 	.inst	0x00434347 ; undefined
      40:	776f6c00 	.inst	0x776f6c00 ; undefined
}
      44:	6576656c 	fnmls	z12.h, p1/m, z11.h, z22.h
      48:	00532e6c 	.inst	0x00532e6c ; undefined
      4c:	00000001 	udf	#1
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
      50:	08020900 	stxrb	w2, w0, [x8]
      54:	00610001 	.inst	0x00610001 ; undefined
      58:	18000000 	ldr	w0, 58 <__stack_size-0x3fa8>
      5c:	02222323 	.inst	0x02222323 ; undefined
      60:	01010001 	.inst	0x01010001 ; undefined
      64:	00000062 	udf	#98
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
      68:	00410004 	.inst	0x00410004 ; undefined
      6c:	01040000 	.inst	0x01040000 ; undefined
      70:	0d0efb01 	.inst	0x0d0efb01 ; undefined
      74:	01010100 	.inst	0x01010100 ; undefined
      78:	00000001 	udf	#1
	return 0;
      7c:	01000001 	.inst	0x01000001 ; undefined
}
      80:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
      84:	6f532f2e 	.inst	0x6f532f2e ; undefined
	else
		addr = GICD_IPRIORITYR;

	pri = readl_relaxed(addr + (int_id & 0xfffffffc));

	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
      88:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
      8c:	70616f6d 	adr	x13, c2e7b <__stack_size+0xbee7b>
      90:	6f432f75 	.inst	0x6f432f75 ; undefined
      94:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
      98:	756f532f 	.inst	0x756f532f ; undefined
      9c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
      a0:	00434347 	.inst	0x00434347 ; undefined
      a4:	6d656d00 	ldp	d0, d27, [x8, #-432]
      a8:	0100532e 	.inst	0x0100532e ; undefined

	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
      ac:	00000000 	udf	#0
      b0:	01180209 	.inst	0x01180209 ; undefined
      b4:	00006100 	udf	#24832
      b8:	21190000 	.inst	0x21190000 ; undefined
      bc:	22262121 	.inst	0x22262121 ; undefined
      c0:	23212121 	.inst	0x23212121 ; undefined
      c4:	00060221 	.inst	0x00060221 ; undefined
      c8:	008e0101 	.inst	0x008e0101 ; undefined

	return 0;
      cc:	00040000 	.inst	0x00040000 ; undefined
}
      d0:	0000004d 	udf	#77
      d4:	fb010104 	.inst	0xfb010104 ; undefined
            // no interrupt has occurred
            retval = FALSE;
            retval = Uart_event_none;
            break;
        case Uart_event_modem:
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d8:	01000d0e 	.inst	0x01000d0e ; undefined
      dc:	00010101 	.inst	0x00010101 ; undefined
            retval = Uart_event_modem;
      e0:	00010000 	.inst	0x00010000 ; undefined
            break;
      e4:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
        case Uart_event_thre:
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
      ec:	2f436f53 	.inst	0x2f436f53 ; undefined
      f0:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
        	retval =Uart_event_thre;
      f4:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
      f8:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
        	break;
      fc:	532f6e6f 	.inst	0x532f6e6f ; undefined
        case Uart_event_timeout:
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	6372756f 	.inst	0x6372756f ; undefined
     104:	43472f65 	.inst	0x43472f65 ; undefined
     108:	73000043 	.inst	0x73000043 ; undefined
        	retval = Uart_event_timeout;
     10c:	74726174 	.inst	0x74726174 ; undefined
     110:	615f7075 	.inst	0x615f7075 ; undefined
        	break;
     114:	68637261 	.inst	0x68637261 ; undefined
        case Received_data_available:
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	532e3436 	.inst	0x532e3436 ; undefined
     11c:	00000100 	udf	#256
     120:	02090000 	.inst	0x02090000 ; undefined
        	retval = Received_data_available;
     124:	61000000 	.inst	0x61000000 ; undefined
     128:	00000000 	udf	#0
            break;
     12c:	03011e03 	.inst	0x03011e03 ; undefined
        case Receiver_line_status:
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	2177200b 	.inst	0x2177200b ; undefined
     134:	23232221 	.inst	0x23232221 ; undefined
     138:	22212123 	.inst	0x22212123 ; undefined
        	retval = Receiver_line_status;
     13c:	21222121 	.inst	0x21222121 ; undefined
     140:	92242122 	and	x2, x9, #0xf000001ff000001f
            break;
     144:	21212125 	.inst	0x21212125 ; undefined
        case Uart_event_busy:
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	34212122 	cbz	w2, 4256c <__stack_size+0x3e56c>
     14c:	21212121 	.inst	0x21212121 ; undefined
     150:	26232121 	.inst	0x26232121 ; undefined
        	retval = Uart_event_busy;
     154:	02232523 	.inst	0x02232523 ; undefined
     158:	0101000d 	.inst	0x0101000d ; undefined
            break;
     15c:	000000bf 	udf	#191
        default:
            // If we've reached this point, the value read from the
            // iir_fcr register is unrecognized.
            retval = 0;
     160:	00450004 	.inst	0x00450004 ; undefined
            break;
     164:	01040000 	.inst	0x01040000 ; undefined
    }

    // If an interrupt has occurred, pass it to the user listener
    // function.
    return retval;
     168:	0d0efb01 	.inst	0x0d0efb01 ; undefined
}
     16c:	01010100 	.inst	0x01010100 ; undefined
     170:	00000001 	udf	#1
     174:	01000001 	.inst	0x01000001 ; undefined
     178:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     17c:	6f532f2e 	.inst	0x6f532f2e ; undefined
     180:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     184:	70616f6d 	adr	x13, c2f73 <__stack_size+0xbef73>
     188:	6f432f75 	.inst	0x6f432f75 ; undefined
     18c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     190:	756f532f 	.inst	0x756f532f ; undefined
     194:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     198:	00434347 	.inst	0x00434347 ; undefined
     19c:	63657600 	.inst	0x63657600 ; undefined
     1a0:	73726f74 	.inst	0x73726f74 ; undefined
     1a4:	0100532e 	.inst	0x0100532e ; undefined
     1a8:	00000000 	udf	#0
     1ac:	08000209 	stxrb	w0, w9, [x16]
     1b0:	00006100 	udf	#24832
     1b4:	0c030000 	.inst	0x0c030000 ; undefined
     1b8:	21212101 	.inst	0x21212101 ; undefined
     1bc:	2121bf08 	.inst	0x2121bf08 ; undefined
     1c0:	21bf0821 	.inst	0x21bf0821 ; undefined
     1c4:	bf082121 	.inst	0xbf082121 ; undefined
     1c8:	08212121 	.inst	0x08212121 ; undefined
     1cc:	212121bf 	.inst	0x212121bf ; undefined
     1d0:	2121bf08 	.inst	0x2121bf08 ; undefined
     1d4:	21bf0821 	.inst	0x21bf0821 ; undefined
     1d8:	bf082121 	.inst	0xbf082121 ; undefined
     1dc:	03212121 	.inst	0x03212121 ; undefined
     1e0:	21ba080a 	.inst	0x21ba080a ; undefined
     1e4:	21212121 	.inst	0x21212121 ; undefined
     1e8:	21212121 	.inst	0x21212121 ; undefined
     1ec:	21212121 	.inst	0x21212121 ; undefined
     1f0:	21752721 	.inst	0x21752721 ; undefined
     1f4:	21212121 	.inst	0x21212121 ; undefined
     1f8:	21212121 	.inst	0x21212121 ; undefined
     1fc:	21212221 	.inst	0x21212221 ; undefined
     200:	21212821 	.inst	0x21212821 ; undefined
     204:	21212175 	.inst	0x21212175 ; undefined
     208:	21272121 	.inst	0x21272121 ; undefined
     20c:	21212121 	.inst	0x21212121 ; undefined
     210:	21212121 	.inst	0x21212121 ; undefined
     214:	21212121 	.inst	0x21212121 ; undefined
     218:	01022121 	.inst	0x01022121 ; undefined
     21c:	36010100 	tbz	w0, #0, 223c <__stack_size-0x1dc4>
     220:	04000001 	add	z1.b, p0/m, z1.b, z0.b
     224:	00008c00 	udf	#35840
     228:	01010400 	.inst	0x01010400 ; undefined
     22c:	000d0efb 	.inst	0x000d0efb ; undefined
     230:	01010101 	.inst	0x01010101 ; undefined
     234:	01000000 	.inst	0x01000000 ; undefined
     238:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
     23c:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     240:	436f532f 	.inst	0x436f532f ; undefined
     244:	6d65642f 	ldp	d15, d25, [x1, #-432]
     248:	7570616f 	.inst	0x7570616f ; undefined
     24c:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     250:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     254:	6c636e49 	ldnp	d9, d27, [x18, #-464]
     258:	00656475 	.inst	0x00656475 ; undefined
     25c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     260:	6f532f2e 	.inst	0x6f532f2e ; undefined
     264:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     268:	70616f6d 	adr	x13, c3057 <__stack_size+0xbf057>
     26c:	6f432f75 	.inst	0x6f432f75 ; undefined
     270:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     274:	756f532f 	.inst	0x756f532f ; undefined
     278:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     27c:	656e6547 	fnmls	z7.h, p1/m, z10.h, z14.h
     280:	5f636972 	.inst	0x5f636972 ; undefined
     284:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
     288:	72732f72 	.inst	0x72732f72 ; undefined
     28c:	69000063 	stgp	x3, x0, [x3]
     290:	00682e6f 	.inst	0x00682e6f ; undefined
     294:	67000001 	.inst	0x67000001 ; undefined
     298:	72656e65 	.inst	0x72656e65 ; undefined
     29c:	745f6369 	.inst	0x745f6369 ; undefined
     2a0:	72656d69 	.inst	0x72656d69 ; undefined
     2a4:	0200632e 	.inst	0x0200632e ; undefined
     2a8:	79740000 	ldrh	w0, [x0, #6656]
     2ac:	682e6570 	.inst	0x682e6570 ; undefined
     2b0:	00000100 	udf	#256
     2b4:	00010500 	.inst	0x00010500 ; undefined
     2b8:	0d100209 	.inst	0x0d100209 ; undefined
     2bc:	00006100 	udf	#24832
     2c0:	18030000 	ldr	w0, 62c0 <__stack_size+0x22c0>
     2c4:	3d020501 	str	b1, [x8, #129]
     2c8:	023d0105 	.inst	0x023d0105 ; undefined
     2cc:	01010003 	.inst	0x01010003 ; undefined
     2d0:	01050204 	.inst	0x01050204 ; undefined
     2d4:	58020900 	ldr	x0, 43f4 <__stack_size+0x3f4>
     2d8:	0061000d 	.inst	0x0061000d ; undefined
     2dc:	03000000 	.inst	0x03000000 ; undefined
     2e0:	0f050117 	.inst	0x0f050117 ; undefined
     2e4:	2f020521 	mvni	v1.2s, #0x49
     2e8:	05330905 	ext	z5.b, z5.b, z8.b, #154
     2ec:	02022101 	.inst	0x02022101 ; undefined
     2f0:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     2f4:	00010502 	.inst	0x00010502 ; undefined
     2f8:	0d780209 	.inst	0x0d780209 ; undefined
     2fc:	00006100 	udf	#24832
     300:	27030000 	.inst	0x27030000 ; undefined
     304:	2f020501 	mvni	v1.2s, #0x48
     308:	05340905 	ext	z5.b, z5.b, z8.b, #162
     30c:	02022101 	.inst	0x02022101 ; undefined
     310:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     314:	00010502 	.inst	0x00010502 ; undefined
     318:	0d940209 	st1	{v9.b}[0], [x16], x20
     31c:	00006100 	udf	#24832
     320:	32030000 	orr	w0, w0, #0x20000000
     324:	23020501 	.inst	0x23020501 ; undefined
     328:	05340905 	ext	z5.b, z5.b, z8.b, #162
     32c:	02022101 	.inst	0x02022101 ; undefined
     330:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     334:	00010502 	.inst	0x00010502 ; undefined
     338:	0dac0209 	st2	{v9.b, v10.b}[0], [x16], x12
     33c:	00006100 	udf	#24832
     340:	c0030000 	.inst	0xc0030000 ; undefined
     344:	17050100 	b	fffffffffc140744 <_sp+0xffffffff9b100744>
     348:	2e15052f 	.inst	0x2e15052f ; undefined
     34c:	4c410205 	.inst	0x4c410205 ; undefined
     350:	4e010521 	dup	v1.16b, v9.b[0]
     354:	01000302 	.inst	0x01000302 ; undefined
     358:	0006d701 	.inst	0x0006d701 ; undefined
     35c:	c0000400 	.inst	0xc0000400 ; undefined
     360:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     364:	0efb0101 	.inst	0x0efb0101 ; undefined
     368:	0101000d 	.inst	0x0101000d ; undefined
     36c:	00000101 	udf	#257
     370:	00000100 	udf	#256
     374:	2f2e2e01 	.inst	0x2f2e2e01 ; undefined
     378:	532f2e2e 	.inst	0x532f2e2e ; undefined
     37c:	642f436f 	.inst	0x642f436f ; undefined
     380:	616f6d65 	.inst	0x616f6d65 ; undefined
     384:	432f7570 	.inst	0x432f7570 ; undefined
     388:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     38c:	6f532f6e 	.inst	0x6f532f6e ; undefined
     390:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     394:	6369472f 	.inst	0x6369472f ; undefined
     398:	3030355f 	adr	xzr, 60a41 <__stack_size+0x5ca41>
     39c:	636e692f 	.inst	0x636e692f ; undefined
     3a0:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     3a4:	532f2e2e 	.inst	0x532f2e2e ; undefined
     3a8:	642f436f 	.inst	0x642f436f ; undefined
     3ac:	616f6d65 	.inst	0x616f6d65 ; undefined
     3b0:	432f7570 	.inst	0x432f7570 ; undefined
     3b4:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     3b8:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
     3bc:	64756c63 	.inst	0x64756c63 ; undefined
     3c0:	2e2e0065 	uaddl	v5.8h, v3.8b, v14.8b
     3c4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     3c8:	2f436f53 	.inst	0x2f436f53 ; undefined
     3cc:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     3d0:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     3d4:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     3d8:	532f6e6f 	.inst	0x532f6e6f ; undefined
     3dc:	6372756f 	.inst	0x6372756f ; undefined
     3e0:	69472f65 	ldpsw	x5, x11, [x27, #56]
     3e4:	30355f63 	adr	x3, 6afd1 <__stack_size+0x66fd1>
     3e8:	72732f30 	.inst	0x72732f30 ; undefined
     3ec:	67000063 	.inst	0x67000063 ; undefined
     3f0:	765f6369 	.inst	0x765f6369 ; undefined
     3f4:	00682e33 	.inst	0x00682e33 ; undefined
     3f8:	69000001 	stgp	x1, x0, [x0]
     3fc:	00682e6f 	.inst	0x00682e6f ; undefined
     400:	63000002 	.inst	0x63000002 ; undefined
     404:	682e7570 	.inst	0x682e7570 ; undefined
     408:	00000200 	udf	#512
     40c:	5f636967 	.inst	0x5f636967 ; undefined
     410:	632e3376 	.inst	0x632e3376 ; undefined
     414:	00000300 	udf	#768
     418:	65707974 	fnmls	z20.h, p6/m, z11.h, z16.h
     41c:	0200682e 	.inst	0x0200682e ; undefined
     420:	05000000 	orr	z0.s, z0.s, #0x1
     424:	02090001 	.inst	0x02090001 ; undefined
     428:	61000df8 	.inst	0x61000df8 ; undefined
     42c:	00000000 	udf	#0
     430:	05011603 	orr	z3.b, z3.b, #0x40
     434:	054b2f02 	.inst	0x054b2f02 ; undefined
     438:	03022101 	.inst	0x03022101 ; undefined
     43c:	05010100 	orr	z0.s, z0.s, #0x1ff
     440:	02090001 	.inst	0x02090001 ; undefined
     444:	61000e20 	.inst	0x61000e20 ; undefined
     448:	00000000 	udf	#0
     44c:	05012203 	orr	z3.s, z3.s, #0xf0001fff
     450:	0a05310c 	and	w12, w8, w5, lsl #12
     454:	2102052e 	.inst	0x2102052e ; undefined
     458:	05210905 	ext	z5.b, z5.b, z8.b, #10
     45c:	02022101 	.inst	0x02022101 ; undefined
     460:	05010100 	orr	z0.s, z0.s, #0x1ff
     464:	02090001 	.inst	0x02090001 ; undefined
     468:	61000e44 	.inst	0x61000e44 ; undefined
     46c:	00000000 	udf	#0
     470:	05013e03 	orr	z3.b, z3.b, #0x2
     474:	054b2f02 	.inst	0x054b2f02 ; undefined
     478:	03022101 	.inst	0x03022101 ; undefined
     47c:	05010100 	orr	z0.s, z0.s, #0x1ff
     480:	02090001 	.inst	0x02090001 ; undefined
	...
     48c:	0100c403 	.inst	0x0100c403 ; undefined
     490:	052f0905 	ext	z5.b, z5.b, z8.b, #122
     494:	02022f01 	.inst	0x02022f01 ; undefined
     498:	05010100 	orr	z0.s, z0.s, #0x1ff
     49c:	02090001 	.inst	0x02090001 ; undefined
     4a0:	61000e6c 	.inst	0x61000e6c ; undefined
     4a4:	00000000 	udf	#0
     4a8:	0100c903 	.inst	0x0100c903 ; undefined
     4ac:	4b2f0205 	sub	w5, w16, w15, uxtb
     4b0:	02210105 	.inst	0x02210105 ; undefined
     4b4:	01010003 	.inst	0x01010003 ; undefined
     4b8:	09000105 	.inst	0x09000105 ; undefined
     4bc:	000e9402 	.inst	0x000e9402 ; undefined
     4c0:	00000061 	udf	#97
     4c4:	00d40300 	.inst	0x00d40300 ; undefined
     4c8:	2f090501 	ushr	v1.8b, v8.8b, #7
     4cc:	022f0105 	.inst	0x022f0105 ; undefined
     4d0:	01010002 	.inst	0x01010002 ; undefined
     4d4:	09000105 	.inst	0x09000105 ; undefined
     4d8:	000eac02 	.inst	0x000eac02 ; undefined
     4dc:	00000061 	udf	#97
     4e0:	00d90300 	.inst	0x00d90300 ; undefined
     4e4:	2f020501 	mvni	v1.2s, #0x48
     4e8:	2101054b 	.inst	0x2101054b ; undefined
     4ec:	01000302 	.inst	0x01000302 ; undefined
     4f0:	00010501 	.inst	0x00010501 ; undefined
     4f4:	0ed40209 	.inst	0x0ed40209 ; undefined
     4f8:	00006100 	udf	#24832
     4fc:	df030000 	.inst	0xdf030000 ; undefined
     500:	02050100 	.inst	0x02050100 ; undefined
     504:	4b01052f 	sub	w15, w9, w1, lsl #1
     508:	01000302 	.inst	0x01000302 ; undefined
     50c:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
     510:	02090001 	.inst	0x02090001 ; undefined
     514:	61000d34 	.inst	0x61000d34 ; undefined
     518:	00000000 	udf	#0
     51c:	05011803 	orr	z3.s, z3.s, #0x20000000
     520:	01053d02 	.inst	0x01053d02 ; undefined
     524:	0003023d 	.inst	0x0003023d ; undefined
     528:	02040101 	.inst	0x02040101 ; undefined
     52c:	09000105 	.inst	0x09000105 ; undefined
     530:	000ef802 	.inst	0x000ef802 ; undefined
     534:	00000061 	udf	#97
     538:	011e0300 	.inst	0x011e0300 ; undefined
     53c:	053d0205 	ext	z5.b, z5.b, z16.b, #232
     540:	03023d01 	.inst	0x03023d01 ; undefined
     544:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     548:	00010502 	.inst	0x00010502 ; undefined
     54c:	0f1c0209 	.inst	0x0f1c0209 ; undefined
     550:	00006100 	udf	#24832
     554:	38030000 	sturb	w0, [x0, #48]
     558:	30020501 	adr	x1, 45f9 <__stack_size+0x5f9>
     55c:	053e0905 	ext	z5.b, z5.b, z8.b, #242
     560:	02022101 	.inst	0x02022101 ; undefined
     564:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     568:	00010503 	.inst	0x00010503 ; undefined
     56c:	0f3c0209 	.inst	0x0f3c0209 ; undefined
     570:	00006100 	udf	#24832
     574:	05180000 	mov	z0.b, p8/z, #0
     578:	01051302 	.inst	0x01051302 ; undefined
     57c:	00020221 	.inst	0x00020221 ; undefined
     580:	04040101 	.inst	0x04040101 ; undefined
     584:	09000105 	.inst	0x09000105 ; undefined
     588:	00000002 	udf	#2
     58c:	00000000 	udf	#0
     590:	01210300 	.inst	0x01210300 ; undefined
     594:	054b0505 	.inst	0x054b0505 ; undefined
     598:	02054116 	.inst	0x02054116 ; undefined
     59c:	3703055a 	tbnz	w26, #0, 6644 <__stack_size+0x2644>
     5a0:	02260105 	.inst	0x02260105 ; undefined
     5a4:	01010002 	.inst	0x01010002 ; undefined
     5a8:	01050404 	.inst	0x01050404 ; undefined
     5ac:	48020900 	stxrh	w2, w0, [x8]
     5b0:	0061000f 	.inst	0x0061000f ; undefined
     5b4:	03000000 	.inst	0x03000000 ; undefined
     5b8:	0805012d 	stxrb	w5, w13, [x9]
     5bc:	05213e3d 	.inst	0x05213e3d ; undefined
     5c0:	03053d06 	.inst	0x03053d06 ; undefined
     5c4:	09052140 	.inst	0x09052140 ; undefined
     5c8:	052e7903 	.inst	0x052e7903 ; undefined
     5cc:	0105da04 	.inst	0x0105da04 ; undefined
     5d0:	00020225 	.inst	0x00020225 ; undefined
     5d4:	04040101 	.inst	0x04040101 ; undefined
     5d8:	09000105 	.inst	0x09000105 ; undefined
     5dc:	000fcc02 	.inst	0x000fcc02 ; undefined
     5e0:	00000061 	udf	#97
     5e4:	013c0300 	.inst	0x013c0300 ; undefined
     5e8:	052f0205 	ext	z5.b, z5.b, z16.b, #120
     5ec:	03022f01 	.inst	0x03022f01 ; undefined
     5f0:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     5f4:	00010504 	.inst	0x00010504 ; undefined
     5f8:	0fe80209 	.inst	0x0fe80209 ; undefined
     5fc:	00006100 	udf	#24832
     600:	c1030000 	.inst	0xc1030000 ; undefined
     604:	02050100 	.inst	0x02050100 ; undefined
     608:	2f01052f 	mvni	v15.2s, #0x29
     60c:	01000302 	.inst	0x01000302 ; undefined
     610:	05040401 	.inst	0x05040401 ; undefined
     614:	02090001 	.inst	0x02090001 ; undefined
     618:	61001004 	.inst	0x61001004 ; undefined
     61c:	00000000 	udf	#0
     620:	0100c603 	.inst	0x0100c603 ; undefined
     624:	05300605 	ext	z5.b, z5.b, z16.b, #129
     628:	01055d09 	.inst	0x01055d09 ; undefined
     62c:	00020221 	.inst	0x00020221 ; undefined
     630:	04040101 	.inst	0x04040101 ; undefined
     634:	09000105 	.inst	0x09000105 ; undefined
     638:	00102c02 	.inst	0x00102c02 ; undefined
     63c:	00000061 	udf	#97
     640:	00d10300 	.inst	0x00d10300 ; undefined
     644:	43020501 	.inst	0x43020501 ; undefined
     648:	220f053d 	.inst	0x220f053d ; undefined
     64c:	05580d05 	mov	z5.h, p8/z, #104
     650:	0d052112 	.inst	0x0d052112 ; undefined
     654:	3c0b053d 	str	b29, [x9], #176
     658:	05510905 	mov	z5.h, p1/z, #72
     65c:	03052e02 	.inst	0x03052e02 ; undefined
     660:	03040200 	.inst	0x03040200 ; undefined
     664:	001f0521 	.inst	0x001f0521 ; undefined
     668:	8f030402 	.inst	0x8f030402 ; undefined
     66c:	02001105 	.inst	0x02001105 ; undefined
     670:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     674:	02055009 	.inst	0x02055009 ; undefined
     678:	0003052e 	.inst	0x0003052e ; undefined
     67c:	21030402 	.inst	0x21030402 ; undefined
     680:	02001f05 	.inst	0x02001f05 ; undefined
     684:	05810304 	and	z4.s, z4.s, #0x1ffffff
     688:	04020011 	.inst	0x04020011 ; undefined
     68c:	09053c01 	.inst	0x09053c01 ; undefined
     690:	2e020551 	.inst	0x2e020551 ; undefined
     694:	02000305 	.inst	0x02000305 ; undefined
     698:	00210304 	.inst	0x00210304 ; NYI
     69c:	91030402 	add	x2, x0, #0xc1
     6a0:	02001f05 	.inst	0x02001f05 ; undefined
     6a4:	058e0304 	.inst	0x058e0304 ; undefined
     6a8:	04020011 	.inst	0x04020011 ; undefined
     6ac:	02053c01 	.inst	0x02053c01 ; undefined
     6b0:	2205054e 	.inst	0x2205054e ; undefined
     6b4:	053f0a05 	ext	z5.b, z5.b, z16.b, #250
     6b8:	04052e03 	.inst	0x04052e03 ; undefined
     6bc:	03040200 	.inst	0x03040200 ; undefined
     6c0:	00200521 	.inst	0x00200521 ; NYI
     6c4:	8f030402 	.inst	0x8f030402 ; undefined
     6c8:	02001205 	.inst	0x02001205 ; undefined
     6cc:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     6d0:	03054c0a 	.inst	0x03054c0a ; undefined
     6d4:	0004052e 	.inst	0x0004052e ; undefined
     6d8:	21030402 	.inst	0x21030402 ; undefined
     6dc:	02002005 	.inst	0x02002005 ; undefined
     6e0:	058f0304 	.inst	0x058f0304 ; undefined
     6e4:	04020012 	.inst	0x04020012 ; undefined
     6e8:	03053c01 	.inst	0x03053c01 ; undefined
     6ec:	4b0c054d 	sub	w13, w10, w12, lsl #1
     6f0:	053f0a05 	ext	z5.b, z5.b, z16.b, #250
     6f4:	04052e03 	.inst	0x04052e03 ; undefined
     6f8:	03040200 	.inst	0x03040200 ; undefined
     6fc:	00200521 	.inst	0x00200521 ; NYI
     700:	8f030402 	.inst	0x8f030402 ; undefined
     704:	02001205 	.inst	0x02001205 ; undefined
     708:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     70c:	03054c0a 	.inst	0x03054c0a ; undefined
     710:	0004052e 	.inst	0x0004052e ; undefined
     714:	21030402 	.inst	0x21030402 ; undefined
     718:	02002005 	.inst	0x02002005 ; undefined
     71c:	058f0304 	.inst	0x058f0304 ; undefined
     720:	04020012 	.inst	0x04020012 ; undefined
     724:	03053c01 	.inst	0x03053c01 ; undefined
     728:	3f02054d 	.inst	0x3f02054d ; undefined
     72c:	05240d05 	ext	z5.b, z5.b, z8.b, #35
     730:	02053d09 	.inst	0x02053d09 ; undefined
     734:	0003052e 	.inst	0x0003052e ; undefined
     738:	21030402 	.inst	0x21030402 ; undefined
     73c:	02001e05 	.inst	0x02001e05 ; undefined
     740:	058f0304 	.inst	0x058f0304 ; undefined
     744:	04020011 	.inst	0x04020011 ; undefined
     748:	02053c01 	.inst	0x02053c01 ; undefined
     74c:	2101054d 	.inst	0x2101054d ; undefined
     750:	01000302 	.inst	0x01000302 ; undefined
     754:	05040401 	.inst	0x05040401 ; undefined
     758:	02090001 	.inst	0x02090001 ; undefined
     75c:	61001360 	.inst	0x61001360 ; undefined
     760:	00000000 	udf	#0
     764:	01019703 	.inst	0x01019703 ; undefined
     768:	053d0605 	ext	z5.b, z5.b, z16.b, #233
     76c:	06053f08 	.inst	0x06053f08 ; undefined
     770:	21050558 	.inst	0x21050558 ; undefined
     774:	4c3e0705 	.inst	0x4c3e0705 ; undefined
     778:	053d0205 	ext	z5.b, z5.b, z16.b, #232
     77c:	05054c06 	.inst	0x05054c06 ; undefined
     780:	2f09053c 	ushr	v28.8b, v9.8b, #7
     784:	05580705 	mov	z5.h, p8/z, #56
     788:	0605210d 	.inst	0x0605210d ; undefined
     78c:	3208052e 	orr	w14, w9, #0x3000000
     790:	05210905 	ext	z5.b, z5.b, z8.b, #10
     794:	05215807 	.inst	0x05215807 ; undefined
     798:	1005201b 	adr	x27, ab98 <__stack_size+0x6b98>
     79c:	3c06052e 	str	b14, [x9], #96
     7a0:	21300305 	.inst	0x21300305 ; undefined
     7a4:	05290905 	ext	z5.b, z5.b, z8.b, #74
     7a8:	05347104 	trn1	z4.b, z8.b, z20.b
     7ac:	02022701 	.inst	0x02022701 ; undefined
     7b0:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     7b4:	00010504 	.inst	0x00010504 ; undefined
     7b8:	147c0209 	b	1f00fdc <__stack_size+0x1efcfdc>
     7bc:	00006100 	udf	#24832
     7c0:	b6030000 	tbz	x0, #32, 67c0 <__stack_size+0x27c0>
     7c4:	06050101 	.inst	0x06050101 ; undefined
     7c8:	2f02053e 	mvni	v30.2s, #0x49
     7cc:	05300505 	ext	z5.b, z5.b, z8.b, #129
     7d0:	054b3e03 	.inst	0x054b3e03 ; undefined
     7d4:	0305590c 	.inst	0x0305590c ; undefined
     7d8:	02054b3e 	.inst	0x02054b3e ; undefined
     7dc:	09054b51 	.inst	0x09054b51 ; undefined
     7e0:	2002054f 	.inst	0x2002054f ; undefined
     7e4:	02000305 	.inst	0x02000305 ; undefined
     7e8:	05210304 	ext	z4.b, z4.b, z24.b, #8
     7ec:	04020017 	.inst	0x04020017 ; undefined
     7f0:	10059d03 	adr	x3, bb90 <__stack_size+0x7b90>
     7f4:	01040200 	.inst	0x01040200 ; undefined
     7f8:	4002053c 	.inst	0x4002053c ; undefined
     7fc:	01054c4c 	.inst	0x01054c4c ; undefined
     800:	00030221 	.inst	0x00030221 ; undefined
     804:	04040101 	.inst	0x04040101 ; undefined
     808:	09000105 	.inst	0x09000105 ; undefined
     80c:	00158c02 	.inst	0x00158c02 ; undefined
     810:	00000061 	udf	#97
     814:	01dc0300 	.inst	0x01dc0300 ; undefined
     818:	30080501 	adr	x1, 108b9 <__stack_size+0xc8b9>
     81c:	052f0a05 	ext	z5.b, z5.b, z16.b, #122
     820:	0a052e05 	and	w5, w16, w5, lsl #11
     824:	3006052f 	adr	x15, c8c9 <__stack_size+0x88c9>
     828:	053d0205 	ext	z5.b, z5.b, z16.b, #232
     82c:	10052f08 	adr	x8, ae0c <__stack_size+0x6e0c>
     830:	2e090530 	.inst	0x2e090530 ; undefined
     834:	023d0105 	.inst	0x023d0105 ; undefined
     838:	01010002 	.inst	0x01010002 ; undefined
     83c:	01050404 	.inst	0x01050404 ; undefined
     840:	00020900 	.inst	0x00020900 ; undefined
     844:	00000000 	udf	#0
     848:	03000000 	.inst	0x03000000 ; undefined
     84c:	050101ea 	orr	z10.s, z10.s, #0xffff
     850:	0a05310c 	and	w12, w8, w5, lsl #12
     854:	09053d2f 	.inst	0x09053d2f ; undefined
     858:	01053e3d 	.inst	0x01053e3d ; undefined
     85c:	00020221 	.inst	0x00020221 ; undefined
     860:	04040101 	.inst	0x04040101 ; undefined
     864:	09000105 	.inst	0x09000105 ; undefined
     868:	0015ec02 	.inst	0x0015ec02 ; undefined
     86c:	00000061 	udf	#97
     870:	01f60300 	.inst	0x01f60300 ; undefined
     874:	30020501 	adr	x1, 4915 <__stack_size+0x915>
     878:	30304c3e 	adr	x30, 611fd <__stack_size+0x5d1fd>
     87c:	30010522 	adr	x2, 2921 <__stack_size-0x16df>
     880:	01000302 	.inst	0x01000302 ; undefined
     884:	05040401 	.inst	0x05040401 ; undefined
     888:	02090001 	.inst	0x02090001 ; undefined
     88c:	61001638 	.inst	0x61001638 ; undefined
     890:	00000000 	udf	#0
     894:	01028703 	.inst	0x01028703 ; undefined
     898:	4c300205 	.inst	0x4c300205 ; undefined
     89c:	3e01054c 	.inst	0x3e01054c ; undefined
     8a0:	01000302 	.inst	0x01000302 ; undefined
     8a4:	05040401 	.inst	0x05040401 ; undefined
     8a8:	02090001 	.inst	0x02090001 ; undefined
     8ac:	61001678 	.inst	0x61001678 ; undefined
     8b0:	00000000 	udf	#0
     8b4:	01029103 	.inst	0x01029103 ; undefined
     8b8:	05330705 	ext	z5.b, z5.b, z24.b, #153
     8bc:	05052e06 	.inst	0x05052e06 ; undefined
     8c0:	3103052e 	adds	w14, w9, #0xc1
     8c4:	05270105 	ext	z5.b, z5.b, z8.b, #56
     8c8:	01051c03 	.inst	0x01051c03 ; undefined
     8cc:	00030224 	.inst	0x00030224 ; undefined
     8d0:	04040101 	.inst	0x04040101 ; undefined
     8d4:	09000105 	.inst	0x09000105 ; undefined
     8d8:	0016b002 	.inst	0x0016b002 ; undefined
     8dc:	00000061 	udf	#97
     8e0:	02a20300 	.inst	0x02a20300 ; undefined
     8e4:	2f050501 	mvni	v1.2s, #0xa8
     8e8:	01052f2f 	.inst	0x01052f2f ; undefined
     8ec:	00030223 	.inst	0x00030223 ; undefined
     8f0:	04040101 	.inst	0x04040101 ; undefined
     8f4:	09000105 	.inst	0x09000105 ; undefined
     8f8:	00000002 	udf	#2
     8fc:	00000000 	udf	#0
     900:	02ac0300 	.inst	0x02ac0300 ; undefined
     904:	4b0f0501 	sub	w1, w8, w15, lsl #1
     908:	054a0605 	.inst	0x054a0605 ; undefined
     90c:	2e052128 	ext	v8.8b, v9.8b, v5.8b, #4
     910:	2e110558 	.inst	0x2e110558 ; undefined
     914:	053e0205 	ext	z5.b, z5.b, z16.b, #240
     918:	03023d01 	.inst	0x03023d01 ; undefined
     91c:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
     920:	00010504 	.inst	0x00010504 ; undefined
     924:	00000209 	udf	#521
     928:	00000000 	udf	#0
     92c:	b9030000 	str	w0, [x0, #768]
     930:	05050102 	.inst	0x05050102 ; undefined
     934:	3d08053e 	str	b30, [x9, #513]
     938:	3e02054c 	.inst	0x3e02054c ; undefined
     93c:	023d0105 	.inst	0x023d0105 ; undefined
     940:	01010003 	.inst	0x01010003 ; undefined
     944:	01050404 	.inst	0x01050404 ; undefined
     948:	00020900 	.inst	0x00020900 ; undefined
     94c:	00000000 	udf	#0
     950:	03000000 	.inst	0x03000000 ; undefined
     954:	050102c9 	orr	z9.s, z9.s, #0x7fffff
     958:	08053f05 	stxrb	w5, w5, [x24]
     95c:	02054c3d 	.inst	0x02054c3d ; undefined
     960:	3d01053e 	str	b30, [x9, #65]
     964:	01000302 	.inst	0x01000302 ; undefined
     968:	05040401 	.inst	0x05040401 ; undefined
     96c:	02090001 	.inst	0x02090001 ; undefined
     970:	610016d8 	.inst	0x610016d8 ; undefined
     974:	00000000 	udf	#0
     978:	0102d903 	.inst	0x0102d903 ; undefined
     97c:	05320705 	ext	z5.b, z5.b, z24.b, #145
     980:	05052e06 	.inst	0x05052e06 ; undefined
     984:	300c052e 	adr	x14, 18a29 <__stack_size+0x14a29>
     988:	05580a05 	mov	z5.h, p8/z, #80
     98c:	0a053f0c 	and	w12, w24, w5, lsl #15
     990:	34090520 	cbz	w0, 12a34 <__stack_size+0xea34>
     994:	05590505 	mov	z5.h, p9/z, #40
     998:	07053f03 	.inst	0x07053f03 ; undefined
     99c:	2e060532 	.inst	0x2e060532 ; undefined
     9a0:	052e0505 	ext	z5.b, z5.b, z8.b, #113
     9a4:	01052f03 	.inst	0x01052f03 ; undefined
     9a8:	1e03054e 	.inst	0x1e03054e ; undefined
     9ac:	02300105 	.inst	0x02300105 ; undefined
     9b0:	01010003 	.inst	0x01010003 ; undefined
     9b4:	01050404 	.inst	0x01050404 ; undefined
     9b8:	00020900 	.inst	0x00020900 ; undefined
     9bc:	00000000 	udf	#0
     9c0:	03000000 	.inst	0x03000000 ; undefined
     9c4:	050102f8 	orr	z24.s, z24.s, #0xffffff
     9c8:	01051309 	.inst	0x01051309 ; undefined
     9cc:	00020225 	.inst	0x00020225 ; undefined
     9d0:	04040101 	.inst	0x04040101 ; undefined
     9d4:	09000105 	.inst	0x09000105 ; undefined
     9d8:	00000002 	udf	#2
     9dc:	00000000 	udf	#0
     9e0:	03810300 	.inst	0x03810300 ; undefined
     9e4:	13090501 	sbfiz	w1, w8, #23, #2
     9e8:	02250105 	.inst	0x02250105 ; undefined
     9ec:	01010002 	.inst	0x01010002 ; undefined
     9f0:	01050404 	.inst	0x01050404 ; undefined
     9f4:	00020900 	.inst	0x00020900 ; undefined
     9f8:	00000000 	udf	#0
     9fc:	03000000 	.inst	0x03000000 ; undefined
     a00:	0501038d 	orr	z13.s, z13.s, #0x1fffffff
     a04:	0a054e05 	and	w5, w16, w5, lsl #19
     a08:	3105053e 	adds	w30, w9, #0x141
     a0c:	4c3d0805 	.inst	0x4c3d0805 ; undefined
     a10:	8206053e 	.inst	0x8206053e ; undefined
     a14:	05222c05 	tbx	z5.b, z0.b, z2.b
     a18:	0c053c18 	.inst	0x0c053c18 ; undefined
     a1c:	3c54052e 	ldr	b14, [x9], #-192
     a20:	053c4005 	.inst	0x053c4005 ; undefined
     a24:	02052e06 	.inst	0x02052e06 ; undefined
     a28:	84090530 	ld1sb	{z16.s}, p1/z, [x9, z9.s, uxtw]
     a2c:	02210105 	.inst	0x02210105 ; undefined
     a30:	01010002 	.inst	0x01010002 ; undefined
     a34:	0000009b 	udf	#155
     a38:	00760004 	.inst	0x00760004 ; undefined
     a3c:	01040000 	.inst	0x01040000 ; undefined
     a40:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     a44:	01010100 	.inst	0x01010100 ; undefined
     a48:	00000001 	udf	#1
     a4c:	01000001 	.inst	0x01000001 ; undefined
     a50:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     a54:	6f532f2e 	.inst	0x6f532f2e ; undefined
     a58:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     a5c:	70616f6d 	adr	x13, c384b <__stack_size+0xbf84b>
     a60:	6f432f75 	.inst	0x6f432f75 ; undefined
     a64:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     a68:	756f532f 	.inst	0x756f532f ; undefined
     a6c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     a70:	6362694c 	.inst	0x6362694c ; undefined
     a74:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     a78:	532f2e2e 	.inst	0x532f2e2e ; undefined
     a7c:	642f436f 	.inst	0x642f436f ; undefined
     a80:	616f6d65 	.inst	0x616f6d65 ; undefined
     a84:	432f7570 	.inst	0x432f7570 ; undefined
     a88:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     a8c:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
     a90:	64756c63 	.inst	0x64756c63 ; undefined
     a94:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
     a98:	00006362 	udf	#25442
     a9c:	65737361 	fnmls	z1.h, p4/m, z27.h, z19.h
     aa0:	632e7472 	.inst	0x632e7472 ; undefined
     aa4:	00000100 	udf	#256
     aa8:	69647473 	ldpsw	x19, x29, [x3, #-224]
     aac:	00682e6f 	.inst	0x00682e6f ; undefined
     ab0:	00000002 	udf	#2
     ab4:	09000105 	.inst	0x09000105 ; undefined
     ab8:	00178c02 	.inst	0x00178c02 ; undefined
     abc:	00000061 	udf	#97
     ac0:	010c0300 	.inst	0x010c0300 ; undefined
     ac4:	05590205 	mov	z5.h, p9/z, #16
     ac8:	04020008 	.inst	0x04020008 ; undefined
     acc:	01026701 	.inst	0x01026701 ; undefined
     ad0:	4e010100 	tbl	v0.16b, {v8.16b}, v1.16b
     ad4:	04000001 	add	z1.b, p0/m, z1.b, z0.b
     ad8:	0000bf00 	udf	#48896
     adc:	01010400 	.inst	0x01010400 ; undefined
     ae0:	000d0efb 	.inst	0x000d0efb ; undefined
     ae4:	01010101 	.inst	0x01010101 ; undefined
     ae8:	01000000 	.inst	0x01000000 ; undefined
     aec:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
     af0:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     af4:	436f532f 	.inst	0x436f532f ; undefined
     af8:	6d65642f 	ldp	d15, d25, [x1, #-432]
     afc:	7570616f 	.inst	0x7570616f ; undefined
     b00:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     b04:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     b08:	72756f53 	.inst	0x72756f53 ; undefined
     b0c:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     b10:	00636269 	.inst	0x00636269 ; undefined
     b14:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     b18:	6f532f2e 	.inst	0x6f532f2e ; undefined
     b1c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     b20:	70616f6d 	adr	x13, c390f <__stack_size+0xbf90f>
     b24:	6f432f75 	.inst	0x6f432f75 ; undefined
     b28:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     b2c:	636e492f 	.inst	0x636e492f ; undefined
     b30:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
     b34:	62696c2f 	.inst	0x62696c2f ; undefined
     b38:	61612f63 	.inst	0x61612f63 ; undefined
     b3c:	36686372 	tbz	w18, #13, 17a8 <__stack_size-0x2858>
     b40:	2e2e0034 	uaddl	v20.8h, v1.8b, v14.8b
     b44:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     b48:	2f436f53 	.inst	0x2f436f53 ; undefined
     b4c:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     b50:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     b54:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     b58:	492f6e6f 	.inst	0x492f6e6f ; undefined
     b5c:	756c636e 	.inst	0x756c636e ; undefined
     b60:	6c2f6564 	stnp	d4, d25, [x11, #-272]
     b64:	00636269 	.inst	0x00636269 ; undefined
     b68:	6d656d00 	ldp	d0, d27, [x8, #-432]
     b6c:	2e746573 	umax	v19.4h, v11.4h, v20.4h
     b70:	00010063 	.inst	0x00010063 ; undefined
     b74:	64747300 	.inst	0x64747300 ; undefined
     b78:	5f666564 	.inst	0x5f666564 ; undefined
     b7c:	0200682e 	.inst	0x0200682e ; undefined
     b80:	74730000 	.inst	0x74730000 ; undefined
     b84:	746e6964 	.inst	0x746e6964 ; undefined
     b88:	00682e5f 	.inst	0x00682e5f ; undefined
     b8c:	73000002 	.inst	0x73000002 ; undefined
     b90:	6e696474 	umax	v20.8h, v3.8h, v9.8h
     b94:	00682e74 	.inst	0x00682e74 ; undefined
     b98:	00000003 	udf	#3
     b9c:	09000105 	.inst	0x09000105 ; undefined
     ba0:	0017bc02 	.inst	0x0017bc02 ; undefined
     ba4:	00000061 	udf	#97
     ba8:	010b0300 	.inst	0x010b0300 ; undefined
     bac:	054b0b05 	.inst	0x054b0b05 ; undefined
     bb0:	0b053012 	add	w18, w0, w5, lsl #12
     bb4:	3105052e 	adds	w14, w9, #0x141
     bb8:	333d0a05 	.inst	0x333d0a05 ; undefined
     bbc:	052e0805 	ext	z5.b, z5.b, z0.b, #114
     bc0:	053d2f06 	tbx	z6.b, z24.b, z29.b
     bc4:	0a05670b 	and	w11, w24, w5, lsl #25
     bc8:	2019052a 	.inst	0x2019052a ; undefined
     bcc:	05201f05 	ext	z5.b, z5.b, z24.b, #7
     bd0:	2e09030f 	ext	v15.8b, v24.8b, v9.8b, #0
     bd4:	052e0705 	ext	z5.b, z5.b, z24.b, #113
     bd8:	07053d0f 	.inst	0x07053d0f ; undefined
     bdc:	3d0f052e 	str	b14, [x9, #961]
     be0:	052e0705 	ext	z5.b, z5.b, z24.b, #113
     be4:	02053f08 	.inst	0x02053f08 ; undefined
     be8:	000a052f 	.inst	0x000a052f ; undefined
     bec:	21020402 	.inst	0x21020402 ; undefined
     bf0:	02000805 	.inst	0x02000805 ; undefined
     bf4:	053d0204 	ext	z4.b, z4.b, z16.b, #232
     bf8:	0402001c 	.inst	0x0402001c ; undefined
     bfc:	0f053a02 	.inst	0x0f053a02 ; undefined
     c00:	01040200 	.inst	0x01040200 ; undefined
     c04:	4206053c 	.inst	0x4206053c ; undefined
     c08:	052f0805 	ext	z5.b, z5.b, z0.b, #122
     c0c:	0805210a 	stxrb	w5, w10, [x8]
     c10:	2f06052e 	mvni	v14.2s, #0xc9
     c14:	053a0e05 	ext	z5.b, z5.b, z16.b, #211
     c18:	09053c11 	.inst	0x09053c11 ; undefined
     c1c:	21010533 	.inst	0x21010533 ; undefined
     c20:	01000202 	.inst	0x01000202 ; undefined
     c24:	0002c701 	.inst	0x0002c701 ; undefined
     c28:	9c000400 	ldr	q0, ca8 <__stack_size-0x3358>
     c2c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     c30:	0efb0101 	.inst	0x0efb0101 ; undefined
     c34:	0101000d 	.inst	0x0101000d ; undefined
     c38:	00000101 	udf	#257
     c3c:	00000100 	udf	#256
     c40:	2f2e2e01 	.inst	0x2f2e2e01 ; undefined
     c44:	532f2e2e 	.inst	0x532f2e2e ; undefined
     c48:	642f436f 	.inst	0x642f436f ; undefined
     c4c:	616f6d65 	.inst	0x616f6d65 ; undefined
     c50:	432f7570 	.inst	0x432f7570 ; undefined
     c54:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     c58:	6f532f6e 	.inst	0x6f532f6e ; undefined
     c5c:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     c60:	62694c2f 	.inst	0x62694c2f ; undefined
     c64:	2e2e0063 	uaddl	v3.8h, v3.8b, v14.8b
     c68:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     c6c:	2f436f53 	.inst	0x2f436f53 ; undefined
     c70:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     c74:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     c78:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     c7c:	492f6e6f 	.inst	0x492f6e6f ; undefined
     c80:	756c636e 	.inst	0x756c636e ; undefined
     c84:	6c2f6564 	stnp	d4, d25, [x11, #-272]
     c88:	00636269 	.inst	0x00636269 ; undefined
     c8c:	69727000 	ldpsw	x0, x28, [x0, #-112]
     c90:	2e66746e 	uabd	v14.4h, v3.4h, v6.4h
     c94:	00010063 	.inst	0x00010063 ; undefined
     c98:	64747300 	.inst	0x64747300 ; undefined
     c9c:	682e6f69 	.inst	0x682e6f69 ; undefined
     ca0:	00000200 	udf	#512
     ca4:	65737361 	fnmls	z1.h, p4/m, z27.h, z19.h
     ca8:	682e7472 	.inst	0x682e7472 ; undefined
     cac:	00000200 	udf	#512
     cb0:	69647473 	ldpsw	x19, x29, [x3, #-224]
     cb4:	682e746e 	.inst	0x682e746e ; undefined
     cb8:	00000200 	udf	#512
     cbc:	6975623c 	ldpsw	x28, x24, [x17, #-88]
     cc0:	692d746c 	stgp	x12, x29, [x3, #-608]
     cc4:	00003e6e 	udf	#15982
     cc8:	05000000 	orr	z0.s, z0.s, #0x1
     ccc:	02090001 	.inst	0x02090001 ; undefined
     cd0:	61001904 	.inst	0x61001904 ; undefined
     cd4:	00000000 	udf	#0
     cd8:	05011a03 	orr	z3.s, z3.s, #0xe0003fff
     cdc:	02053d06 	.inst	0x02053d06 ; undefined
     ce0:	04020022 	.inst	0x04020022 ; undefined
     ce4:	053c0601 	ext	z1.b, z1.b, z16.b, #225
     ce8:	04020011 	.inst	0x04020011 ; undefined
     cec:	05690602 	ext	z2.b, {z16.b, z17.b}, #73
     cf0:	04020009 	.inst	0x04020009 ; undefined
     cf4:	08052e02 	stxrb	w5, w2, [x16]
     cf8:	02040200 	.inst	0x02040200 ; undefined
     cfc:	001b0521 	.inst	0x001b0521 ; undefined
     d00:	3a020402 	.inst	0x3a020402 ; undefined
     d04:	02000a05 	.inst	0x02000a05 ; undefined
     d08:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     d0c:	0402000f 	.inst	0x0402000f ; undefined
     d10:	09052e01 	.inst	0x09052e01 ; undefined
     d14:	21010533 	.inst	0x21010533 ; undefined
     d18:	01000202 	.inst	0x01000202 ; undefined
     d1c:	00010501 	.inst	0x00010501 ; undefined
     d20:	19780209 	.inst	0x19780209 ; undefined
     d24:	00006100 	udf	#24832
     d28:	29030000 	stp	w0, w0, [x0, #24]
     d2c:	69060501 	stgp	x1, x1, [x8, #192]
     d30:	05200d05 	ext	z5.b, z5.b, z8.b, #3
     d34:	0705240e 	.inst	0x0705240e ; undefined
     d38:	21060558 	.inst	0x21060558 ; undefined
     d3c:	053d1505 	ext	z5.b, z5.b, z8.b, #237
     d40:	15054a0f 	b	415357c <__stack_size+0x414f57c>
     d44:	4a0f054c 	eor	w12, w10, w15, lsl #1
     d48:	053d0405 	ext	z5.b, z5.b, z0.b, #233
     d4c:	10053d08 	adr	x8, b4ec <__stack_size+0x74ec>
     d50:	3e05054b 	.inst	0x3e05054b ; undefined
     d54:	053d0905 	ext	z5.b, z5.b, z8.b, #234
     d58:	0905210a 	.inst	0x0905210a ; undefined
     d5c:	3d08052f 	str	b15, [x9, #513]
     d60:	05390c05 	ext	z5.b, z5.b, z0.b, #203
     d64:	18055108 	ldr	w8, b784 <__stack_size+0x7784>
     d68:	3c090521 	str	b1, [x9], #144
     d6c:	05210805 	ext	z5.b, z5.b, z0.b, #10
     d70:	09053a0d 	.inst	0x09053a0d ; undefined
     d74:	2101056b 	.inst	0x2101056b ; undefined
     d78:	01000202 	.inst	0x01000202 ; undefined
     d7c:	00010501 	.inst	0x00010501 ; undefined
     d80:	1aa40209 	.inst	0x1aa40209 ; undefined
     d84:	00006100 	udf	#24832
     d88:	de030000 	.inst	0xde030000 ; undefined
     d8c:	07050100 	.inst	0x07050100 ; undefined
     d90:	2206055d 	.inst	0x2206055d ; undefined
     d94:	05220805 	ext	z5.b, z5.b, z0.b, #18
     d98:	0805210b 	stxrb	w5, w11, [x8]
     d9c:	22070521 	.inst	0x22070521 ; undefined
     da0:	052e0605 	ext	z5.b, z5.b, z16.b, #113
     da4:	0c052f07 	.inst	0x0c052f07 ; undefined
     da8:	2e04053f 	.inst	0x2e04053f ; undefined
     dac:	25020b05 	cmpge	p5.b, p2/z, z24.b, #2
     db0:	2f050514 	mvni	v20.2s, #0xa8
     db4:	00230b05 	.inst	0x00230b05 ; NYI
     db8:	06020402 	.inst	0x06020402 ; undefined
     dbc:	053c8208 	.inst	0x053c8208 ; undefined
     dc0:	04020009 	.inst	0x04020009 ; undefined
     dc4:	2c020608 	stnp	s8, s1, [x16, #16]
     dc8:	00080512 	.inst	0x00080512 ; undefined
     dcc:	21080402 	.inst	0x21080402 ; undefined
     dd0:	053d0c05 	ext	z5.b, z5.b, z0.b, #235
     dd4:	0b052f25 	add	w5, w25, w5, lsl #11
     dd8:	210a052e 	.inst	0x210a052e ; undefined
     ddc:	054c0b05 	.inst	0x054c0b05 ; undefined
     de0:	0b05300e 	add	w14, w0, w5, lsl #12
     de4:	3e050566 	.inst	0x3e050566 ; undefined
     de8:	05220905 	ext	z5.b, z5.b, z8.b, #18
     dec:	0559080e 	mov	z14.h, p9/z, #64
     df0:	05053c0b 	.inst	0x05053c0b ; undefined
     df4:	2217053d 	.inst	0x2217053d ; undefined
     df8:	4a080a05 	eor	w5, w16, w8, lsl #2
     dfc:	05210805 	ext	z5.b, z5.b, z0.b, #10
     e00:	0c053d0f 	.inst	0x0c053d0f ; undefined
     e04:	3d0b054a 	str	b10, [x10, #705]
     e08:	053f0e05 	ext	z5.b, z5.b, z16.b, #251
     e0c:	0505660b 	.inst	0x0505660b ; undefined
     e10:	220c053e 	.inst	0x220c053e ; undefined
     e14:	02040200 	.inst	0x02040200 ; undefined
     e18:	3c820806 	.inst	0x3c820806 ; undefined
     e1c:	02000a05 	.inst	0x02000a05 ; undefined
     e20:	02060804 	.inst	0x02060804 ; undefined
     e24:	0e05122c 	tbx	v12.8b, {v17.16b}, v5.8b
     e28:	08040200 	stxrb	w4, w0, [x16]
     e2c:	000b0521 	.inst	0x000b0521 ; undefined
     e30:	66080402 	.inst	0x66080402 ; undefined
     e34:	02000505 	.inst	0x02000505 ; undefined
     e38:	053e0804 	ext	z4.b, z4.b, z0.b, #242
     e3c:	0805230e 	stxrb	w5, w14, [x24]
     e40:	3d050530 	str	b16, [x9, #321]
     e44:	05220c05 	ext	z5.b, z5.b, z0.b, #19
     e48:	05053d08 	.inst	0x05053d08 ; undefined
     e4c:	220c053d 	.inst	0x220c053d ; undefined
     e50:	02040200 	.inst	0x02040200 ; undefined
     e54:	3c820806 	.inst	0x3c820806 ; undefined
     e58:	02000a05 	.inst	0x02000a05 ; undefined
     e5c:	02060804 	.inst	0x02060804 ; undefined
     e60:	0e05122c 	tbx	v12.8b, {v17.16b}, v5.8b
     e64:	08040200 	stxrb	w4, w0, [x16]
     e68:	000b0521 	.inst	0x000b0521 ; undefined
     e6c:	66080402 	.inst	0x66080402 ; undefined
     e70:	02000505 	.inst	0x02000505 ; undefined
     e74:	053e0804 	ext	z4.b, z4.b, z0.b, #242
     e78:	052f220a 	mov	z10.b, z16.b[7]
     e7c:	0b052108 	add	w8, w8, w5, lsl #8
     e80:	3d09053f 	str	b31, [x9, #577]
     e84:	02001505 	.inst	0x02001505 ; undefined
     e88:	053c0104 	ext	z4.b, z4.b, z8.b, #224
     e8c:	13053d07 	sbfx	w7, w8, #5, #11
     e90:	3c1f0522 	str	b2, [x9], #-16
     e94:	052e0b05 	ext	z5.b, z5.b, z24.b, #114
     e98:	0e052f09 	smov	w9, v24.b[2]
     e9c:	053c7a03 	.inst	0x053c7a03 ; undefined
     ea0:	200b030c 	.inst	0x200b030c ; undefined
     ea4:	05300705 	ext	z5.b, z5.b, z24.b, #129
     ea8:	11053d04 	add	w4, w8, #0x14f
     eac:	2e090522 	.inst	0x2e090522 ; undefined
     eb0:	05210605 	ext	z5.b, z5.b, z16.b, #9
     eb4:	09053d08 	.inst	0x09053d08 ; undefined
     eb8:	3c7fae03 	.inst	0x3c7fae03 ; undefined
     ebc:	052e0e05 	ext	z5.b, z5.b, z16.b, #115
     ec0:	00d50309 	.inst	0x00d50309 ; undefined
     ec4:	2101052e 	.inst	0x2101052e ; undefined
     ec8:	01000302 	.inst	0x01000302 ; undefined
     ecc:	00010501 	.inst	0x00010501 ; undefined
     ed0:	21d00209 	.inst	0x21d00209 ; undefined
     ed4:	00006100 	udf	#24832
     ed8:	c0030000 	.inst	0xc0030000 ; undefined
     edc:	02050101 	.inst	0x02050101 ; undefined
     ee0:	0a052408 	and	w8, w0, w5, lsl #9
     ee4:	cb09059f 	sub	xzr, x12, x9, lsl #1
     ee8:	02210105 	.inst	0x02210105 ; undefined
     eec:	01010002 	.inst	0x01010002 ; undefined
     ef0:	000000d4 	udf	#212
     ef4:	00b30004 	.inst	0x00b30004 ; undefined
     ef8:	01040000 	.inst	0x01040000 ; undefined
     efc:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     f00:	01010100 	.inst	0x01010100 ; undefined
     f04:	00000001 	udf	#1
     f08:	01000001 	.inst	0x01000001 ; undefined
     f0c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     f10:	6f532f2e 	.inst	0x6f532f2e ; undefined
     f14:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     f18:	70616f6d 	adr	x13, c3d07 <__stack_size+0xbfd07>
     f1c:	6f432f75 	.inst	0x6f432f75 ; undefined
     f20:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     f24:	756f532f 	.inst	0x756f532f ; undefined
     f28:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     f2c:	6362694c 	.inst	0x6362694c ; undefined
     f30:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     f34:	532f2e2e 	.inst	0x532f2e2e ; undefined
     f38:	642f436f 	.inst	0x642f436f ; undefined
     f3c:	616f6d65 	.inst	0x616f6d65 ; undefined
     f40:	432f7570 	.inst	0x432f7570 ; undefined
     f44:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     f48:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
     f4c:	64756c63 	.inst	0x64756c63 ; undefined
     f50:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
     f54:	2e006362 	.inst	0x2e006362 ; undefined
     f58:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     f5c:	436f532f 	.inst	0x436f532f ; undefined
     f60:	6d65642f 	ldp	d15, d25, [x1, #-432]
     f64:	636f736f 	.inst	0x636f736f ; undefined
     f68:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     f6c:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     f70:	6c636e49 	ldnp	d9, d27, [x18, #-464]
     f74:	00656475 	.inst	0x00656475 ; undefined
     f78:	74757000 	.inst	0x74757000 ; undefined
     f7c:	72616863 	.inst	0x72616863 ; undefined
     f80:	0100632e 	.inst	0x0100632e ; undefined
     f84:	74730000 	.inst	0x74730000 ; undefined
     f88:	746e6964 	.inst	0x746e6964 ; undefined
     f8c:	0200682e 	.inst	0x0200682e ; undefined
     f90:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
     f94:	6f736f6d 	.inst	0x6f736f6d ; undefined
     f98:	00682e63 	.inst	0x00682e63 ; undefined
     f9c:	41000003 	.inst	0x41000003 ; undefined
     fa0:	61755f4c 	.inst	0x61755f4c ; undefined
     fa4:	682e7472 	.inst	0x682e7472 ; undefined
     fa8:	00000300 	udf	#768
     fac:	00010500 	.inst	0x00010500 ; undefined
     fb0:	22800209 	.inst	0x22800209 ; undefined
     fb4:	00006100 	udf	#24832
     fb8:	0a030000 	and	w0, w0, w3
     fbc:	3d090501 	str	b1, [x8, #577]
     fc0:	02590105 	.inst	0x02590105 ; undefined
     fc4:	01010002 	.inst	0x01010002 ; undefined
     fc8:	0000012c 	udf	#300
     fcc:	006a0004 	.inst	0x006a0004 ; undefined
     fd0:	01040000 	.inst	0x01040000 ; undefined
     fd4:	0d0efb01 	.inst	0x0d0efb01 ; undefined
     fd8:	01010100 	.inst	0x01010100 ; undefined
     fdc:	00000001 	udf	#1
     fe0:	01000001 	.inst	0x01000001 ; undefined
     fe4:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     fe8:	6f532f2e 	.inst	0x6f532f2e ; undefined
     fec:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     ff0:	70616f6d 	adr	x13, c3ddf <__stack_size+0xbfddf>
     ff4:	6f432f75 	.inst	0x6f432f75 ; undefined
     ff8:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     ffc:	756f532f 	.inst	0x756f532f ; undefined
    1000:	00656372 	.inst	0x00656372 ; undefined
    1004:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    1008:	6f532f2e 	.inst	0x6f532f2e ; undefined
    100c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1010:	70616f6d 	adr	x13, c3dff <__stack_size+0xbfdff>
    1014:	6f432f75 	.inst	0x6f432f75 ; undefined
    1018:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    101c:	636e492f 	.inst	0x636e492f ; undefined
    1020:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    1024:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
    1028:	2e79616c 	rsubhn	v12.4h, v11.4s, v25.4s
    102c:	00010063 	.inst	0x00010063 ; undefined
    1030:	70797400 	adr	x0, f3eb3 <__stack_size+0xefeb3>
    1034:	00682e65 	.inst	0x00682e65 ; undefined
    1038:	00000002 	udf	#2
    103c:	09000105 	.inst	0x09000105 ; undefined
    1040:	0022a802 	.inst	0x0022a802 ; NYI
    1044:	00000061 	udf	#97
    1048:	01190300 	.inst	0x01190300 ; undefined
    104c:	05300905 	ext	z5.b, z5.b, z8.b, #130
    1050:	05213c07 	.inst	0x05213c07 ; undefined
    1054:	0402000a 	.inst	0x0402000a ; undefined
    1058:	08054c01 	stxrb	w5, w1, [x0]
    105c:	01040200 	.inst	0x01040200 ; undefined
    1060:	0010053c 	.inst	0x0010053c ; undefined
    1064:	21010402 	.inst	0x21010402 ; undefined
    1068:	024b0105 	.inst	0x024b0105 ; undefined
    106c:	01010004 	.inst	0x01010004 ; undefined
    1070:	09000105 	.inst	0x09000105 ; undefined
    1074:	00230002 	.inst	0x00230002 ; NYI
    1078:	00000061 	udf	#97
    107c:	01280300 	.inst	0x01280300 ; undefined
    1080:	05230205 	ext	z5.b, z5.b, z16.b, #24
    1084:	01053409 	.inst	0x01053409 ; undefined
    1088:	00020221 	.inst	0x00020221 ; undefined
    108c:	01050101 	.inst	0x01050101 ; undefined
    1090:	00020900 	.inst	0x00020900 ; undefined
    1094:	00000000 	udf	#0
    1098:	03000000 	.inst	0x03000000 ; undefined
    109c:	12050136 	and	w22, w9, #0x8000000
    10a0:	2f0b053d 	ushr	v29.8b, v9.8b, #5
    10a4:	054b0505 	.inst	0x054b0505 ; undefined
    10a8:	03022f01 	.inst	0x03022f01 ; undefined
    10ac:	05010100 	orr	z0.s, z0.s, #0x1ff
    10b0:	02090001 	.inst	0x02090001 ; undefined
    10b4:	61002318 	.inst	0x61002318 ; undefined
    10b8:	00000000 	udf	#0
    10bc:	05013d03 	orr	z3.h, z3.h, #0xfe03
    10c0:	2a053d12 	orr	w18, w8, w5, lsl #15
    10c4:	820b052f 	.inst	0x820b052f ; undefined
    10c8:	053d0505 	ext	z5.b, z5.b, z8.b, #233
    10cc:	03022f01 	.inst	0x03022f01 ; undefined
    10d0:	05010100 	orr	z0.s, z0.s, #0x1ff
    10d4:	02090001 	.inst	0x02090001 ; undefined
	...
    10e0:	0100c403 	.inst	0x0100c403 ; undefined
    10e4:	053d1205 	ext	z5.b, z5.b, z16.b, #236
    10e8:	0b052f2a 	add	w10, w25, w5, lsl #11
    10ec:	3d050574 	str	b20, [x11, #321]
    10f0:	022f0105 	.inst	0x022f0105 ; undefined
    10f4:	01010003 	.inst	0x01010003 ; undefined
    10f8:	00000175 	udf	#373
    10fc:	00760004 	.inst	0x00760004 ; undefined
    1100:	01040000 	.inst	0x01040000 ; undefined
    1104:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    1108:	01010100 	.inst	0x01010100 ; undefined
    110c:	00000001 	udf	#1
    1110:	01000001 	.inst	0x01000001 ; undefined
    1114:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    1118:	6f532f2e 	.inst	0x6f532f2e ; undefined
    111c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1120:	70616f6d 	adr	x13, c3f0f <__stack_size+0xbff0f>
    1124:	6f432f75 	.inst	0x6f432f75 ; undefined
    1128:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    112c:	756f532f 	.inst	0x756f532f ; undefined
    1130:	00656372 	.inst	0x00656372 ; undefined
    1134:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    1138:	6f532f2e 	.inst	0x6f532f2e ; undefined
    113c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1140:	70616f6d 	adr	x13, c3f2f <__stack_size+0xbff2f>
    1144:	6f432f75 	.inst	0x6f432f75 ; undefined
    1148:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    114c:	636e492f 	.inst	0x636e492f ; undefined
    1150:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    1154:	78650000 	ldaddlh	w5, w0, [x0]
    1158:	74706563 	.inst	0x74706563 ; undefined
    115c:	5f6e6f69 	.inst	0x5f6e6f69 ; undefined
    1160:	632e3436 	.inst	0x632e3436 ; undefined
    1164:	00000100 	udf	#256
    1168:	65637865 	fnmls	z5.h, p6/m, z3.h, z3.h
    116c:	6f697470 	uqshl	v16.2d, v3.2d, #41
    1170:	00682e6e 	.inst	0x00682e6e ; undefined
    1174:	00000002 	udf	#2
    1178:	09000105 	.inst	0x09000105 ; undefined
    117c:	00236c02 	.inst	0x00236c02 ; NYI
    1180:	00000061 	udf	#97
    1184:	01140300 	.inst	0x01140300 ; undefined
    1188:	02000805 	.inst	0x02000805 ; undefined
    118c:	02150104 	.inst	0x02150104 ; undefined
    1190:	01010001 	.inst	0x01010001 ; undefined
    1194:	09000105 	.inst	0x09000105 ; undefined
    1198:	00237002 	.inst	0x00237002 ; NYI
    119c:	00000061 	udf	#97
    11a0:	01230300 	.inst	0x01230300 ; undefined
    11a4:	054c0205 	.inst	0x054c0205 ; undefined
    11a8:	03022101 	.inst	0x03022101 ; undefined
    11ac:	05010100 	orr	z0.s, z0.s, #0x1ff
    11b0:	02090001 	.inst	0x02090001 ; undefined
    11b4:	61002390 	.inst	0x61002390 ; undefined
    11b8:	00000000 	udf	#0
    11bc:	05013003 	orr	z3.s, z3.s, #0x4000000
    11c0:	01054c02 	.inst	0x01054c02 ; undefined
    11c4:	00030221 	.inst	0x00030221 ; undefined
    11c8:	01050101 	.inst	0x01050101 ; undefined
    11cc:	b0020900 	adrp	x0, 4122000 <__stack_size+0x411e000>
    11d0:	00610023 	.inst	0x00610023 ; undefined
    11d4:	03000000 	.inst	0x03000000 ; undefined
    11d8:	0205013d 	.inst	0x0205013d ; undefined
    11dc:	2101054c 	.inst	0x2101054c ; undefined
    11e0:	01000302 	.inst	0x01000302 ; undefined
    11e4:	00010501 	.inst	0x00010501 ; undefined
    11e8:	23d00209 	.inst	0x23d00209 ; undefined
    11ec:	00006100 	udf	#24832
    11f0:	ca030000 	eor	x0, x0, x3
    11f4:	02050100 	.inst	0x02050100 ; undefined
    11f8:	2101054c 	.inst	0x2101054c ; undefined
    11fc:	01000302 	.inst	0x01000302 ; undefined
    1200:	00010501 	.inst	0x00010501 ; undefined
    1204:	23f00209 	.inst	0x23f00209 ; undefined
    1208:	00006100 	udf	#24832
    120c:	d7030000 	.inst	0xd7030000 ; undefined
    1210:	02050100 	.inst	0x02050100 ; undefined
    1214:	2101054c 	.inst	0x2101054c ; undefined
    1218:	01000302 	.inst	0x01000302 ; undefined
    121c:	00010501 	.inst	0x00010501 ; undefined
    1220:	00000209 	udf	#521
    1224:	00000000 	udf	#0
    1228:	e4030000 	.inst	0xe4030000 ; undefined
    122c:	02050100 	.inst	0x02050100 ; undefined
    1230:	21010530 	.inst	0x21010530 ; undefined
    1234:	01000302 	.inst	0x01000302 ; undefined
    1238:	00010501 	.inst	0x00010501 ; undefined
    123c:	24100209 	cmphs	p9.b, p0/z, z16.b, z16.b
    1240:	00006100 	udf	#24832
    1244:	f0030000 	adrp	x0, 6004000 <__stack_size+0x6000000>
    1248:	02050100 	.inst	0x02050100 ; undefined
    124c:	2101054c 	.inst	0x2101054c ; undefined
    1250:	01000302 	.inst	0x01000302 ; undefined
    1254:	00010501 	.inst	0x00010501 ; undefined
    1258:	24300209 	cmphs	p9.b, p0/z, z16.b, #64
    125c:	00006100 	udf	#24832
    1260:	fd030000 	str	d0, [x0, #1536]
    1264:	02050100 	.inst	0x02050100 ; undefined
    1268:	2101054c 	.inst	0x2101054c ; undefined
    126c:	01000302 	.inst	0x01000302 ; undefined
    1270:	0001a701 	.inst	0x0001a701 ; undefined
    1274:	05000400 	orr	z0.h, z0.h, #0x1
    1278:	04000001 	add	z1.b, p0/m, z1.b, z0.b
    127c:	0efb0101 	.inst	0x0efb0101 ; undefined
    1280:	0101000d 	.inst	0x0101000d ; undefined
    1284:	00000101 	udf	#257
    1288:	00000100 	udf	#256
    128c:	2f2e2e01 	.inst	0x2f2e2e01 ; undefined
    1290:	532f2e2e 	.inst	0x532f2e2e ; undefined
    1294:	642f436f 	.inst	0x642f436f ; undefined
    1298:	616f6d65 	.inst	0x616f6d65 ; undefined
    129c:	432f7570 	.inst	0x432f7570 ; undefined
    12a0:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    12a4:	6f532f6e 	.inst	0x6f532f6e ; undefined
    12a8:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
    12ac:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    12b0:	532f2e2e 	.inst	0x532f2e2e ; undefined
    12b4:	642f436f 	.inst	0x642f436f ; undefined
    12b8:	616f6d65 	.inst	0x616f6d65 ; undefined
    12bc:	432f7570 	.inst	0x432f7570 ; undefined
    12c0:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    12c4:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    12c8:	64756c63 	.inst	0x64756c63 ; undefined
    12cc:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
    12d0:	2e006362 	.inst	0x2e006362 ; undefined
    12d4:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    12d8:	436f532f 	.inst	0x436f532f ; undefined
    12dc:	6d65642f 	ldp	d15, d25, [x1, #-432]
    12e0:	636f736f 	.inst	0x636f736f ; undefined
    12e4:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    12e8:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    12ec:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    12f0:	00656475 	.inst	0x00656475 ; undefined
    12f4:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    12f8:	4d4e2f2e 	.inst	0x4d4e2f2e ; undefined
    12fc:	2f534953 	mls	v19.4h, v10.4h, v3.h[5]
    1300:	65726f43 	fnmls	z3.h, p3/m, z26.h, z18.h
    1304:	636e492f 	.inst	0x636e492f ; undefined
    1308:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    130c:	79730000 	ldrh	w0, [x0, #6528]
    1310:	6d657473 	ldp	d19, d29, [x3, #-432]
    1314:	6d65645f 	ldp	d31, d25, [x2, #-432]
    1318:	7570616f 	.inst	0x7570616f ; undefined
    131c:	0100632e 	.inst	0x0100632e ; undefined
    1320:	74730000 	.inst	0x74730000 ; undefined
    1324:	746e6964 	.inst	0x746e6964 ; undefined
    1328:	0200682e 	.inst	0x0200682e ; undefined
    132c:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
    1330:	6f736f6d 	.inst	0x6f736f6d ; undefined
    1334:	00682e63 	.inst	0x00682e63 ; undefined
    1338:	63000003 	.inst	0x63000003 ; undefined
    133c:	5f65726f 	sqdmlsl	s15, h19, v5.h[2]
    1340:	74616566 	.inst	0x74616566 ; undefined
    1344:	5f657275 	sqdmlsl	s21, h19, v5.h[2]
    1348:	696c6365 	ldpsw	x5, x24, [x27, #-160]
    134c:	00682e63 	.inst	0x00682e63 ; undefined
    1350:	41000004 	.inst	0x41000004 ; undefined
    1354:	61755f4c 	.inst	0x61755f4c ; undefined
    1358:	682e7472 	.inst	0x682e7472 ; undefined
    135c:	00000300 	udf	#768
    1360:	69647473 	ldpsw	x19, x29, [x3, #-224]
    1364:	00682e6f 	.inst	0x00682e6f ; undefined
    1368:	73000002 	.inst	0x73000002 ; undefined
    136c:	65747379 	fnmls	z25.h, p4/m, z27.h, z20.h
    1370:	65645f6d 	fnmla	z13.h, p7/m, z27.h, z4.h
    1374:	6f736f6d 	.inst	0x6f736f6d ; undefined
    1378:	00682e63 	.inst	0x00682e63 ; undefined
    137c:	00000003 	udf	#3
    1380:	09000105 	.inst	0x09000105 ; undefined
    1384:	00000002 	udf	#2
    1388:	00000000 	udf	#0
    138c:	00e70300 	.inst	0x00e70300 ; undefined
    1390:	18150501 	ldr	w1, 2b430 <__stack_size+0x27430>
    1394:	02590105 	.inst	0x02590105 ; undefined
    1398:	01010002 	.inst	0x01010002 ; undefined
    139c:	09000105 	.inst	0x09000105 ; undefined
    13a0:	00000002 	udf	#2
    13a4:	00000000 	udf	#0
    13a8:	00f90300 	.inst	0x00f90300 ; undefined
    13ac:	17150501 	b	fffffffffc5427b0 <_sp+0xffffffff9b5027b0>
    13b0:	02590105 	.inst	0x02590105 ; undefined
    13b4:	01010002 	.inst	0x01010002 ; undefined
    13b8:	09000105 	.inst	0x09000105 ; undefined
    13bc:	00245002 	.inst	0x00245002 ; NYI
    13c0:	00000061 	udf	#97
    13c4:	01860300 	.inst	0x01860300 ; undefined
    13c8:	33110501 	bfi	w1, w8, #15, #2
    13cc:	75bb0505 	.inst	0x75bb0505 ; undefined
    13d0:	76010559 	.inst	0x76010559 ; undefined
    13d4:	01000302 	.inst	0x01000302 ; undefined
    13d8:	00010501 	.inst	0x00010501 ; undefined
    13dc:	00000209 	udf	#521
    13e0:	00000000 	udf	#0
    13e4:	a5030000 	ld1rqw	{z0.s}, p0/z, [x0, x3, lsl #2]
    13e8:	02050101 	.inst	0x02050101 ; undefined
    13ec:	4b090588 	sub	w8, w12, w9, lsl #1
    13f0:	02210105 	.inst	0x02210105 ; undefined
    13f4:	01010002 	.inst	0x01010002 ; undefined
    13f8:	09000105 	.inst	0x09000105 ; undefined
    13fc:	0024e002 	.inst	0x0024e002 ; NYI
    1400:	00000061 	udf	#97
    1404:	01ba0300 	.inst	0x01ba0300 ; undefined
    1408:	03050501 	.inst	0x03050501 ; undefined
    140c:	02052e0e 	.inst	0x02052e0e ; undefined
    1410:	21216821 	.inst	0x21216821 ; undefined
    1414:	02230105 	.inst	0x02230105 ; undefined
    1418:	01010003 	.inst	0x01010003 ; undefined
    141c:	000004fa 	udf	#1274
    1420:	00b50004 	.inst	0x00b50004 ; undefined
    1424:	01040000 	.inst	0x01040000 ; undefined
    1428:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    142c:	01010100 	.inst	0x01010100 ; undefined
    1430:	00000001 	udf	#1
    1434:	01000001 	.inst	0x01000001 ; undefined
    1438:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    143c:	6f532f2e 	.inst	0x6f532f2e ; undefined
    1440:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1444:	6f736f6d 	.inst	0x6f736f6d ; undefined
    1448:	6f432f63 	.inst	0x6f432f63 ; undefined
    144c:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    1450:	756f532f 	.inst	0x756f532f ; undefined
    1454:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    1458:	76697244 	.inst	0x76697244 ; undefined
    145c:	2f737265 	fcmla	v5.4h, v19.4h, v19.h[1], #270
    1460:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    1464:	532f2e2e 	.inst	0x532f2e2e ; undefined
    1468:	642f436f 	.inst	0x642f436f ; undefined
    146c:	616f6d65 	.inst	0x616f6d65 ; undefined
    1470:	432f7570 	.inst	0x432f7570 ; undefined
    1474:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    1478:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    147c:	64756c63 	.inst	0x64756c63 ; undefined
    1480:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
    1484:	2e006362 	.inst	0x2e006362 ; undefined
    1488:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    148c:	436f532f 	.inst	0x436f532f ; undefined
    1490:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1494:	636f736f 	.inst	0x636f736f ; undefined
    1498:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    149c:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    14a0:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    14a4:	00656475 	.inst	0x00656475 ; undefined
    14a8:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    14ac:	2e633269 	usubw	v9.4s, v19.4s, v3.4h
    14b0:	00010063 	.inst	0x00010063 ; undefined
    14b4:	64747300 	.inst	0x64747300 ; undefined
    14b8:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    14bc:	00020068 	.inst	0x00020068 ; undefined
    14c0:	6d656400 	ldp	d0, d25, [x0, #-432]
    14c4:	636f736f 	.inst	0x636f736f ; undefined
    14c8:	0300682e 	.inst	0x0300682e ; undefined
    14cc:	4c410000 	.inst	0x4c410000 ; undefined
    14d0:	6332695f 	.inst	0x6332695f ; undefined
    14d4:	0300682e 	.inst	0x0300682e ; undefined
    14d8:	05000000 	orr	z0.s, z0.s, #0x1
    14dc:	02090001 	.inst	0x02090001 ; undefined
    14e0:	6100251c 	.inst	0x6100251c ; undefined
    14e4:	00000000 	udf	#0
    14e8:	05011003 	orr	z3.s, z3.s, #0x40000000
    14ec:	01052f1b 	.inst	0x01052f1b ; undefined
    14f0:	0003024b 	.inst	0x0003024b ; undefined
    14f4:	01050101 	.inst	0x01050101 ; undefined
    14f8:	40020900 	.inst	0x40020900 ; undefined
    14fc:	00610025 	.inst	0x00610025 ; undefined
    1500:	03000000 	.inst	0x03000000 ; undefined
    1504:	1b05011b 	madd	w27, w8, w5, w0
    1508:	4b01052f 	sub	w15, w9, w1, lsl #1
    150c:	01000302 	.inst	0x01000302 ; undefined
    1510:	00010501 	.inst	0x00010501 ; undefined
    1514:	25640209 	whilege	p9.h, w16, w4
    1518:	00006100 	udf	#24832
    151c:	27030000 	.inst	0x27030000 ; undefined
    1520:	59040501 	.inst	0x59040501 ; undefined
    1524:	053d0505 	ext	z5.b, z5.b, z8.b, #233
    1528:	01053d18 	.inst	0x01053d18 ; undefined
    152c:	053c1203 	ext	z3.b, z3.b, z16.b, #228
    1530:	20700318 	.inst	0x20700318 ; undefined
    1534:	10030105 	adr	x5, 7554 <__stack_size+0x3554>
    1538:	0309053c 	.inst	0x0309053c ; undefined
    153c:	05052072 	.inst	0x05052072 ; undefined
    1540:	3d18053d 	str	b29, [x9, #1537]
    1544:	0c030105 	.inst	0x0c030105 ; undefined
    1548:	0318053c 	.inst	0x0318053c ; undefined
    154c:	01052076 	.inst	0x01052076 ; undefined
    1550:	053c0a03 	ext	z3.b, z3.b, z16.b, #226
    1554:	20780309 	.inst	0x20780309 ; undefined
    1558:	053d0505 	ext	z5.b, z5.b, z8.b, #233
    155c:	01053d18 	.inst	0x01053d18 ; undefined
    1560:	1c180542 	ldr	s2, 31608 <__stack_size+0x2d608>
    1564:	02400105 	.inst	0x02400105 ; undefined
    1568:	01010003 	.inst	0x01010003 ; undefined
    156c:	09000105 	.inst	0x09000105 ; undefined
    1570:	00262802 	.inst	0x00262802 ; NYI
    1574:	00000061 	udf	#97
    1578:	00c50300 	.inst	0x00c50300 ; undefined
    157c:	3d170501 	str	b1, [x8, #1473]
    1580:	02750105 	.inst	0x02750105 ; undefined
    1584:	01010003 	.inst	0x01010003 ; undefined
    1588:	09000105 	.inst	0x09000105 ; undefined
    158c:	00265c02 	.inst	0x00265c02 ; NYI
    1590:	00000061 	udf	#97
    1594:	00d00300 	.inst	0x00d00300 ; undefined
    1598:	3d250501 	str	b1, [x8, #2369]
    159c:	02750105 	.inst	0x02750105 ; undefined
    15a0:	01010003 	.inst	0x01010003 ; undefined
    15a4:	09000105 	.inst	0x09000105 ; undefined
    15a8:	00000002 	udf	#2
    15ac:	00000000 	udf	#0
    15b0:	00db0300 	.inst	0x00db0300 ; undefined
    15b4:	3d240501 	str	b1, [x8, #2305]
    15b8:	02750105 	.inst	0x02750105 ; undefined
    15bc:	01010003 	.inst	0x01010003 ; undefined
    15c0:	09000105 	.inst	0x09000105 ; undefined
    15c4:	00269002 	.inst	0x00269002 ; NYI
    15c8:	00000061 	udf	#97
    15cc:	00e60300 	.inst	0x00e60300 ; undefined
    15d0:	2f1d0501 	ushr	v1.4h, v8.4h, #3
    15d4:	024b0105 	.inst	0x024b0105 ; undefined
    15d8:	01010003 	.inst	0x01010003 ; undefined
    15dc:	09000105 	.inst	0x09000105 ; undefined
    15e0:	00000002 	udf	#2
    15e4:	00000000 	udf	#0
    15e8:	00f10300 	.inst	0x00f10300 ; undefined
    15ec:	2f220501 	ushr	v1.2s, v8.2s, #30
    15f0:	024b0105 	.inst	0x024b0105 ; undefined
    15f4:	01010003 	.inst	0x01010003 ; undefined
    15f8:	09000105 	.inst	0x09000105 ; undefined
    15fc:	0026b402 	.inst	0x0026b402 ; NYI
    1600:	00000061 	udf	#97
    1604:	00ff0300 	.inst	0x00ff0300 ; undefined
    1608:	3d180501 	str	b1, [x8, #1537]
    160c:	02750105 	.inst	0x02750105 ; undefined
    1610:	01010003 	.inst	0x01010003 ; undefined
    1614:	09000105 	.inst	0x09000105 ; undefined
    1618:	00000002 	udf	#2
    161c:	00000000 	udf	#0
    1620:	01890300 	.inst	0x01890300 ; undefined
    1624:	3d180501 	str	b1, [x8, #1537]
    1628:	02750105 	.inst	0x02750105 ; undefined
    162c:	01010003 	.inst	0x01010003 ; undefined
    1630:	09000105 	.inst	0x09000105 ; undefined
    1634:	0026e802 	.inst	0x0026e802 ; NYI
    1638:	00000061 	udf	#97
    163c:	01940300 	.inst	0x01940300 ; undefined
    1640:	4b070501 	sub	w1, w8, w7, lsl #1
    1644:	05424305 	eor	z5.d, z5.d, #0xff0000000001ffff
    1648:	0105201b 	.inst	0x0105201b ; undefined
    164c:	052e1603 	ext	z3.b, z3.b, z16.b, #117
    1650:	206c030c 	.inst	0x206c030c ; undefined
    1654:	05404205 	eor	z5.s, z5.s, #0xff0001ff
    1658:	01053c1b 	.inst	0x01053c1b ; undefined
    165c:	052e1003 	ext	z3.b, z3.b, z0.b, #116
    1660:	2072030c 	.inst	0x2072030c ; undefined
    1664:	05404205 	eor	z5.s, z5.s, #0xff0001ff
    1668:	01053c1b 	.inst	0x01053c1b ; undefined
    166c:	052e0a03 	ext	z3.b, z3.b, z16.b, #114
    1670:	2078030c 	.inst	0x2078030c ; undefined
    1674:	05404105 	eor	z5.s, z5.s, #0xff000001
    1678:	01053c1b 	.inst	0x01053c1b ; undefined
    167c:	00030232 	.inst	0x00030232 ; undefined
    1680:	01050101 	.inst	0x01050101 ; undefined
    1684:	00020900 	.inst	0x00020900 ; undefined
    1688:	00000000 	udf	#0
    168c:	03000000 	.inst	0x03000000 ; undefined
    1690:	050101ba 	orr	z26.s, z26.s, #0x3fff
    1694:	0705301b 	.inst	0x0705301b ; undefined
    1698:	2f0d054a 	ushr	v10.8b, v10.8b, #3
    169c:	210c053e 	.inst	0x210c053e ; undefined
    16a0:	02210105 	.inst	0x02210105 ; undefined
    16a4:	01010002 	.inst	0x01010002 ; undefined
    16a8:	09000105 	.inst	0x09000105 ; undefined
    16ac:	00278802 	.inst	0x00278802 ; NYI
    16b0:	00000061 	udf	#97
    16b4:	01ca0300 	.inst	0x01ca0300 ; undefined
    16b8:	30260501 	adr	x1, 4d759 <__stack_size+0x49759>
    16bc:	023d0105 	.inst	0x023d0105 ; undefined
    16c0:	01010002 	.inst	0x01010002 ; undefined
    16c4:	09000105 	.inst	0x09000105 ; undefined
    16c8:	0027a402 	.inst	0x0027a402 ; NYI
    16cc:	00000061 	udf	#97
    16d0:	01d90300 	.inst	0x01d90300 ; undefined
    16d4:	3d070501 	str	b1, [x8, #449]
    16d8:	053e1b05 	ext	z5.b, z5.b, z24.b, #246
    16dc:	3c100301 	stur	b1, [x24, #-256]
    16e0:	72030c05 	ands	w5, w0, #0xe0000001
    16e4:	3e1b0520 	.inst	0x3e1b0520 ; undefined
    16e8:	0c030105 	.inst	0x0c030105 ; undefined
    16ec:	030c053c 	.inst	0x030c053c ; undefined
    16f0:	1b052076 	madd	w22, w3, w5, w8
    16f4:	4401053e 	.inst	0x4401053e ; undefined
    16f8:	7a030c05 	.inst	0x7a030c05 ; undefined
    16fc:	3e1b0520 	.inst	0x3e1b0520 ; undefined
    1700:	02400105 	.inst	0x02400105 ; undefined
    1704:	01010003 	.inst	0x01010003 ; undefined
    1708:	09000105 	.inst	0x09000105 ; undefined
    170c:	00282802 	.inst	0x00282802 ; NYI
    1710:	00000061 	udf	#97
    1714:	01f50300 	.inst	0x01f50300 ; undefined
    1718:	3d180501 	str	b1, [x8, #1537]
    171c:	023d0105 	.inst	0x023d0105 ; undefined
    1720:	01010003 	.inst	0x01010003 ; undefined
    1724:	09000105 	.inst	0x09000105 ; undefined
    1728:	00284c02 	.inst	0x00284c02 ; NYI
    172c:	00000061 	udf	#97
    1730:	02800300 	.inst	0x02800300 ; undefined
    1734:	3d100501 	str	b1, [x8, #1025]
    1738:	023d0105 	.inst	0x023d0105 ; undefined
    173c:	01010003 	.inst	0x01010003 ; undefined
    1740:	09000105 	.inst	0x09000105 ; undefined
    1744:	00287002 	.inst	0x00287002 ; NYI
    1748:	00000061 	udf	#97
    174c:	028b0300 	.inst	0x028b0300 ; undefined
    1750:	3d100501 	str	b1, [x8, #1025]
    1754:	023d0105 	.inst	0x023d0105 ; undefined
    1758:	01010003 	.inst	0x01010003 ; undefined
    175c:	09000105 	.inst	0x09000105 ; undefined
    1760:	00000002 	udf	#2
    1764:	00000000 	udf	#0
    1768:	02960300 	.inst	0x02960300 ; undefined
    176c:	3d220501 	str	b1, [x8, #2177]
    1770:	02590105 	.inst	0x02590105 ; undefined
    1774:	01010003 	.inst	0x01010003 ; undefined
    1778:	09000105 	.inst	0x09000105 ; undefined
    177c:	00289402 	.inst	0x00289402 ; NYI
    1780:	00000061 	udf	#97
    1784:	02a10300 	.inst	0x02a10300 ; undefined
    1788:	3d220501 	str	b1, [x8, #2177]
    178c:	02590105 	.inst	0x02590105 ; undefined
    1790:	01010003 	.inst	0x01010003 ; undefined
    1794:	09000105 	.inst	0x09000105 ; undefined
    1798:	00000002 	udf	#2
    179c:	00000000 	udf	#0
    17a0:	02ac0300 	.inst	0x02ac0300 ; undefined
    17a4:	3d140501 	str	b1, [x8, #1281]
    17a8:	023d0105 	.inst	0x023d0105 ; undefined
    17ac:	01010003 	.inst	0x01010003 ; undefined
    17b0:	09000105 	.inst	0x09000105 ; undefined
    17b4:	0028c002 	.inst	0x0028c002 ; NYI
    17b8:	00000061 	udf	#97
    17bc:	02b70300 	.inst	0x02b70300 ; undefined
    17c0:	3d140501 	str	b1, [x8, #1281]
    17c4:	023d0105 	.inst	0x023d0105 ; undefined
    17c8:	01010003 	.inst	0x01010003 ; undefined
    17cc:	09000105 	.inst	0x09000105 ; undefined
    17d0:	0028e402 	.inst	0x0028e402 ; NYI
    17d4:	00000061 	udf	#97
    17d8:	02c20300 	.inst	0x02c20300 ; undefined
    17dc:	301c0501 	adr	x1, 3987d <__stack_size+0x3587d>
    17e0:	054a0905 	.inst	0x054a0905 ; undefined
    17e4:	03022101 	.inst	0x03022101 ; undefined
    17e8:	05010100 	orr	z0.s, z0.s, #0x1ff
    17ec:	02090001 	.inst	0x02090001 ; undefined
    17f0:	6100290c 	.inst	0x6100290c ; undefined
    17f4:	00000000 	udf	#0
    17f8:	0102cf03 	.inst	0x0102cf03 ; undefined
    17fc:	052f1b05 	ext	z5.b, z5.b, z24.b, #126
    1800:	02022f01 	.inst	0x02022f01 ; undefined
    1804:	05010100 	orr	z0.s, z0.s, #0x1ff
    1808:	02090001 	.inst	0x02090001 ; undefined
    180c:	61002924 	.inst	0x61002924 ; undefined
    1810:	00000000 	udf	#0
    1814:	0102da03 	.inst	0x0102da03 ; undefined
    1818:	052f1805 	ext	z5.b, z5.b, z0.b, #126
    181c:	02022f01 	.inst	0x02022f01 ; undefined
    1820:	05010100 	orr	z0.s, z0.s, #0x1ff
    1824:	02090001 	.inst	0x02090001 ; undefined
    1828:	6100293c 	.inst	0x6100293c ; undefined
    182c:	00000000 	udf	#0
    1830:	0102e103 	.inst	0x0102e103 ; undefined
    1834:	09033205 	.inst	0x09033205 ; undefined
    1838:	3c3c054a 	.inst	0x3c3c054a ; undefined
    183c:	05581405 	mov	z5.h, p8/z, #-96
    1840:	30052011 	adr	x17, bc41 <__stack_size+0x7c41>
    1844:	3c3a052f 	.inst	0x3c3a052f ; undefined
    1848:	05581305 	mov	z5.h, p8/z, #-104
    184c:	32052010 	orr	w16, w0, #0xf800000f
    1850:	3c3c052f 	.inst	0x3c3c052f ; undefined
    1854:	05581405 	mov	z5.h, p8/z, #-96
    1858:	30052011 	adr	x17, bc59 <__stack_size+0x7c59>
    185c:	3c3a052f 	.inst	0x3c3a052f ; undefined
    1860:	05581305 	mov	z5.h, p8/z, #-104
    1864:	38052010 	sturb	w16, [x0, #82]
    1868:	3c42052f 	ldr	b15, [x9], #32
    186c:	05581405 	mov	z5.h, p8/z, #-96
    1870:	36052011 	tbz	w17, #0, ffffffffffffbc70 <_sp+0xffffffff9efbbc70>
    1874:	3c40052f 	ldr	b15, [x9], #0
    1878:	05581305 	mov	z5.h, p8/z, #-104
    187c:	05052010 	.inst	0x05052010 ; undefined
    1880:	59595930 	.inst	0x59595930 ; undefined
    1884:	01055959 	.inst	0x01055959 ; undefined
    1888:	00030259 	.inst	0x00030259 ; undefined
    188c:	01050101 	.inst	0x01050101 ; undefined
    1890:	00020900 	.inst	0x00020900 ; undefined
    1894:	00000000 	udf	#0
    1898:	03000000 	.inst	0x03000000 ; undefined
    189c:	05010380 	orr	z0.s, z0.s, #0x1fffffff
    18a0:	01053d24 	.inst	0x01053d24 ; undefined
    18a4:	00030275 	.inst	0x00030275 ; undefined
    18a8:	01050101 	.inst	0x01050101 ; undefined
    18ac:	00020900 	.inst	0x00020900 ; undefined
    18b0:	00000000 	udf	#0
    18b4:	03000000 	.inst	0x03000000 ; undefined
    18b8:	0501038b 	orr	z11.s, z11.s, #0x1fffffff
    18bc:	01053d25 	.inst	0x01053d25 ; undefined
    18c0:	00030275 	.inst	0x00030275 ; undefined
    18c4:	01050101 	.inst	0x01050101 ; undefined
    18c8:	00020900 	.inst	0x00020900 ; undefined
    18cc:	00000000 	udf	#0
    18d0:	03000000 	.inst	0x03000000 ; undefined
    18d4:	05010396 	orr	z22.s, z22.s, #0x1fffffff
    18d8:	01053d23 	.inst	0x01053d23 ; undefined
    18dc:	0003023d 	.inst	0x0003023d ; undefined
    18e0:	01050101 	.inst	0x01050101 ; undefined
    18e4:	00020900 	.inst	0x00020900 ; undefined
    18e8:	00000000 	udf	#0
    18ec:	03000000 	.inst	0x03000000 ; undefined
    18f0:	050103a1 	orr	z1.s, z1.s, #0x3fffffff
    18f4:	01053d23 	.inst	0x01053d23 ; undefined
    18f8:	0003023d 	.inst	0x0003023d ; undefined
    18fc:	01050101 	.inst	0x01050101 ; undefined
    1900:	00020900 	.inst	0x00020900 ; undefined
    1904:	00000000 	udf	#0
    1908:	03000000 	.inst	0x03000000 ; undefined
    190c:	050103ac 	orr	z12.s, z12.s, #0x3fffffff
    1910:	01053d2b 	.inst	0x01053d2b ; undefined
    1914:	00030275 	.inst	0x00030275 ; undefined
    1918:	02100101 	.inst	0x02100101 ; undefined
    191c:	00040000 	.inst	0x00040000 ; undefined
    1920:	0000007e 	udf	#126
    1924:	fb010104 	.inst	0xfb010104 ; undefined
    1928:	01000d0e 	.inst	0x01000d0e ; undefined
    192c:	00010101 	.inst	0x00010101 ; undefined
    1930:	00010000 	.inst	0x00010000 ; undefined
    1934:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    1938:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    193c:	2f436f53 	.inst	0x2f436f53 ; undefined
    1940:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    1944:	2f636f73 	.inst	0x2f636f73 ; undefined
    1948:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    194c:	532f6e6f 	.inst	0x532f6e6f ; undefined
    1950:	6372756f 	.inst	0x6372756f ; undefined
    1954:	72442f65 	.inst	0x72442f65 ; undefined
    1958:	72657669 	.inst	0x72657669 ; undefined
    195c:	2e002f73 	.inst	0x2e002f73 ; undefined
    1960:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1964:	436f532f 	.inst	0x436f532f ; undefined
    1968:	6d65642f 	ldp	d15, d25, [x1, #-432]
    196c:	7570616f 	.inst	0x7570616f ; undefined
    1970:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1974:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1978:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    197c:	2f656475 	.inst	0x2f656475 ; undefined
    1980:	6362696c 	.inst	0x6362696c ; undefined
    1984:	4c410000 	.inst	0x4c410000 ; undefined
    1988:	6e69705f 	uabdl2	v31.4s, v2.8h, v9.8h
    198c:	2e78756d 	uabd	v13.4h, v11.4h, v24.4h
    1990:	00010063 	.inst	0x00010063 ; undefined
    1994:	64747300 	.inst	0x64747300 ; undefined
    1998:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    199c:	00020068 	.inst	0x00020068 ; undefined
    19a0:	01050000 	.inst	0x01050000 ; undefined
    19a4:	d8020900 	prfm	pldl1keep, 5ac4 <__stack_size+0x1ac4>
    19a8:	0061002a 	.inst	0x0061002a ; undefined
    19ac:	03000000 	.inst	0x03000000 ; undefined
    19b0:	0605010f 	.inst	0x0605010f ; undefined
    19b4:	2e210513 	uhadd	v19.8b, v8.8b, v1.8b
    19b8:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    19bc:	06052e21 	.inst	0x06052e21 ; undefined
    19c0:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    19c4:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    19c8:	06052e21 	.inst	0x06052e21 ; undefined
    19cc:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    19d0:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    19d4:	06052e21 	.inst	0x06052e21 ; undefined
    19d8:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    19dc:	05300605 	ext	z5.b, z5.b, z16.b, #129
    19e0:	06052e21 	.inst	0x06052e21 ; undefined
    19e4:	2e210530 	uhadd	v16.8b, v9.8b, v1.8b
    19e8:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    19ec:	03052e21 	.inst	0x03052e21 ; undefined
    19f0:	2e1e052f 	.inst	0x2e1e052f ; undefined
    19f4:	05300605 	ext	z5.b, z5.b, z16.b, #129
    19f8:	06052e21 	.inst	0x06052e21 ; undefined
    19fc:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1a00:	05300605 	ext	z5.b, z5.b, z16.b, #129
    1a04:	06052e21 	.inst	0x06052e21 ; undefined
    1a08:	2e210521 	uhadd	v1.8b, v9.8b, v1.8b
    1a0c:	05210605 	ext	z5.b, z5.b, z16.b, #9
    1a10:	06052e21 	.inst	0x06052e21 ; undefined
    1a14:	2e210531 	uhadd	v17.8b, v9.8b, v1.8b
    1a18:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1a1c:	06052e21 	.inst	0x06052e21 ; undefined
    1a20:	2e210530 	uhadd	v16.8b, v9.8b, v1.8b
    1a24:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1a28:	06052e21 	.inst	0x06052e21 ; undefined
    1a2c:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1a30:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1a34:	06052e21 	.inst	0x06052e21 ; undefined
    1a38:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1a3c:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1a40:	06052e21 	.inst	0x06052e21 ; undefined
    1a44:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1a48:	05310605 	ext	z5.b, z5.b, z16.b, #137
    1a4c:	06052e21 	.inst	0x06052e21 ; undefined
    1a50:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1a54:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1a58:	06052e21 	.inst	0x06052e21 ; undefined
    1a5c:	2e21052f 	uhadd	v15.8b, v9.8b, v1.8b
    1a60:	05310305 	ext	z5.b, z5.b, z24.b, #136
    1a64:	03052e1e 	.inst	0x03052e1e ; undefined
    1a68:	2e1e052f 	.inst	0x2e1e052f ; undefined
    1a6c:	052f0305 	ext	z5.b, z5.b, z24.b, #120
    1a70:	02052e1e 	.inst	0x02052e1e ; undefined
    1a74:	2e1d0530 	.inst	0x2e1d0530 ; undefined
    1a78:	052f0205 	ext	z5.b, z5.b, z16.b, #120
    1a7c:	05052e1d 	.inst	0x05052e1d ; undefined
    1a80:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1a84:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1a88:	05052e20 	.inst	0x05052e20 ; undefined
    1a8c:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1a90:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1a94:	05052e20 	.inst	0x05052e20 ; undefined
    1a98:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1a9c:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1aa0:	05052e20 	.inst	0x05052e20 ; undefined
    1aa4:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1aa8:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1aac:	05052e20 	.inst	0x05052e20 ; undefined
    1ab0:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1ab4:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1ab8:	05052e20 	.inst	0x05052e20 ; undefined
    1abc:	2e200531 	uhadd	v17.8b, v9.8b, v0.8b
    1ac0:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1ac4:	05052e20 	.inst	0x05052e20 ; undefined
    1ac8:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1acc:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1ad0:	05052e20 	.inst	0x05052e20 ; undefined
    1ad4:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1ad8:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1adc:	05052e20 	.inst	0x05052e20 ; undefined
    1ae0:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1ae4:	05300505 	ext	z5.b, z5.b, z8.b, #129
    1ae8:	05052e20 	.inst	0x05052e20 ; undefined
    1aec:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1af0:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1af4:	05052e20 	.inst	0x05052e20 ; undefined
    1af8:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1afc:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1b00:	05052e20 	.inst	0x05052e20 ; undefined
    1b04:	2e200530 	uhadd	v16.8b, v9.8b, v0.8b
    1b08:	05210505 	ext	z5.b, z5.b, z8.b, #9
    1b0c:	05052e20 	.inst	0x05052e20 ; undefined
    1b10:	2e200521 	uhadd	v1.8b, v9.8b, v0.8b
    1b14:	05300505 	ext	z5.b, z5.b, z8.b, #129
    1b18:	05052e20 	.inst	0x05052e20 ; undefined
    1b1c:	2e20052f 	uhadd	v15.8b, v9.8b, v0.8b
    1b20:	052f0505 	ext	z5.b, z5.b, z8.b, #121
    1b24:	01052e20 	.inst	0x01052e20 ; undefined
    1b28:	00020230 	.inst	0x00020230 ; undefined
    1b2c:	064e0101 	.inst	0x064e0101 ; undefined
    1b30:	00040000 	.inst	0x00040000 ; undefined
    1b34:	00000109 	udf	#265
    1b38:	fb010104 	.inst	0xfb010104 ; undefined
    1b3c:	01000d0e 	.inst	0x01000d0e ; undefined
    1b40:	00010101 	.inst	0x00010101 ; undefined
    1b44:	00010000 	.inst	0x00010000 ; undefined
    1b48:	2e2e0100 	uaddl	v0.8h, v8.8b, v14.8b
    1b4c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    1b50:	2f436f53 	.inst	0x2f436f53 ; undefined
    1b54:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    1b58:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
    1b5c:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    1b60:	492f6e6f 	.inst	0x492f6e6f ; undefined
    1b64:	756c636e 	.inst	0x756c636e ; undefined
    1b68:	6c2f6564 	stnp	d4, d25, [x11, #-272]
    1b6c:	00636269 	.inst	0x00636269 ; undefined
    1b70:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    1b74:	6f532f2e 	.inst	0x6f532f2e ; undefined
    1b78:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    1b7c:	6f736f6d 	.inst	0x6f736f6d ; undefined
    1b80:	6f432f63 	.inst	0x6f432f63 ; undefined
    1b84:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    1b88:	756f532f 	.inst	0x756f532f ; undefined
    1b8c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    1b90:	76697244 	.inst	0x76697244 ; undefined
    1b94:	2f737265 	fcmla	v5.4h, v19.4h, v19.h[1], #270
    1b98:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    1b9c:	532f2e2e 	.inst	0x532f2e2e ; undefined
    1ba0:	642f436f 	.inst	0x642f436f ; undefined
    1ba4:	616f6d65 	.inst	0x616f6d65 ; undefined
    1ba8:	432f7570 	.inst	0x432f7570 ; undefined
    1bac:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    1bb0:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    1bb4:	64756c63 	.inst	0x64756c63 ; undefined
    1bb8:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
    1bbc:	612f6362 	.inst	0x612f6362 ; undefined
    1bc0:	68637261 	.inst	0x68637261 ; undefined
    1bc4:	2e003436 	.inst	0x2e003436 ; undefined
    1bc8:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1bcc:	436f532f 	.inst	0x436f532f ; undefined
    1bd0:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1bd4:	636f736f 	.inst	0x636f736f ; undefined
    1bd8:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1bdc:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1be0:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    1be4:	00656475 	.inst	0x00656475 ; undefined
    1be8:	64747300 	.inst	0x64747300 ; undefined
    1bec:	2e62696c 	.inst	0x2e62696c ; undefined
    1bf0:	00010068 	.inst	0x00010068 ; undefined
    1bf4:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    1bf8:	74726175 	.inst	0x74726175 ; undefined
    1bfc:	0200632e 	.inst	0x0200632e ; undefined
    1c00:	74730000 	.inst	0x74730000 ; undefined
    1c04:	66656464 	.inst	0x66656464 ; undefined
    1c08:	00682e5f 	.inst	0x00682e5f ; undefined
    1c0c:	73000003 	.inst	0x73000003 ; undefined
    1c10:	6e696474 	umax	v20.8h, v3.8h, v9.8h
    1c14:	00682e74 	.inst	0x00682e74 ; undefined
    1c18:	64000001 	.inst	0x64000001 ; undefined
    1c1c:	736f6d65 	.inst	0x736f6d65 ; undefined
    1c20:	682e636f 	.inst	0x682e636f ; undefined
    1c24:	00000400 	udf	#1024
    1c28:	755f4c41 	.inst	0x755f4c41 ; undefined
    1c2c:	2e747261 	uabdl	v1.4s, v19.4h, v20.4h
    1c30:	00040068 	.inst	0x00040068 ; undefined
    1c34:	64747300 	.inst	0x64747300 ; undefined
    1c38:	682e6f69 	.inst	0x682e6f69 ; undefined
    1c3c:	00000100 	udf	#256
    1c40:	00160500 	.inst	0x00160500 ; undefined
    1c44:	2eb00209 	uaddl	v9.2d, v16.2s, v16.2s
    1c48:	00006100 	udf	#24832
    1c4c:	30030000 	adr	x0, 7c4d <__stack_size+0x3c4d>
    1c50:	59010501 	.inst	0x59010501 ; undefined
    1c54:	01000302 	.inst	0x01000302 ; undefined
    1c58:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1c5c:	02090001 	.inst	0x02090001 ; undefined
    1c60:	61002ed0 	.inst	0x61002ed0 ; undefined
    1c64:	00000000 	udf	#0
    1c68:	05011303 	orr	z3.s, z3.s, #0xc07fffff
    1c6c:	08056709 	stxrb	w5, w9, [x24]
    1c70:	2f100558 	ushr	v24.4h, v10.4h, #16
    1c74:	5a300505 	.inst	0x5a300505 ; undefined
    1c78:	052e2005 	mov	z5.h, z0.h[3]
    1c7c:	1d052f02 	.inst	0x1d052f02 ; undefined
    1c80:	2f02052e 	mvni	v14.2s, #0x49
    1c84:	052e1d05 	ext	z5.b, z5.b, z8.b, #119
    1c88:	3d3d2f05 	str	b5, [x24, #3915]
    1c8c:	2f0c053d 	ushr	v29.8b, v9.8b, #4
    1c90:	02210105 	.inst	0x02210105 ; undefined
    1c94:	01010002 	.inst	0x01010002 ; undefined
    1c98:	45050204 	.inst	0x45050204 ; undefined
    1c9c:	88020900 	stxr	w2, w0, [x8]
    1ca0:	0061002f 	.inst	0x0061002f ; undefined
    1ca4:	03000000 	.inst	0x03000000 ; undefined
    1ca8:	12050122 	and	w2, w9, #0x8000000
    1cac:	593a053d 	.inst	0x593a053d ; undefined
    1cb0:	052e1905 	ext	z5.b, z5.b, z8.b, #118
    1cb4:	16054a41 	b	fffffffff81545b8 <_sp+0xffffffff971145b8>
    1cb8:	2f3a053c 	ushr	v28.2s, v9.2s, #6
    1cbc:	052e1a05 	ext	z5.b, z5.b, z16.b, #118
    1cc0:	12055817 	and	w23, w0, #0xf803ffff
    1cc4:	0559592f 	mov	z15.h, p9/m, #-55
    1cc8:	0105590c 	.inst	0x0105590c ; undefined
    1ccc:	00020221 	.inst	0x00020221 ; undefined
    1cd0:	02040101 	.inst	0x02040101 ; undefined
    1cd4:	09005305 	.inst	0x09005305 ; undefined
    1cd8:	00304002 	.inst	0x00304002 ; NYI
    1cdc:	00000061 	udf	#97
    1ce0:	012b0300 	.inst	0x012b0300 ; undefined
    1ce4:	053d0205 	ext	z5.b, z5.b, z16.b, #232
    1ce8:	0705cb11 	.inst	0x0705cb11 ; undefined
    1cec:	2211054b 	.inst	0x2211054b ; undefined
    1cf0:	05590705 	mov	z5.h, p9/z, #56
    1cf4:	0a052214 	and	w20, w16, w5, lsl #8
    1cf8:	22110559 	.inst	0x22110559 ; undefined
    1cfc:	05590705 	mov	z5.h, p9/z, #56
    1d00:	01052209 	.inst	0x01052209 ; undefined
    1d04:	00020221 	.inst	0x00020221 ; undefined
    1d08:	02040101 	.inst	0x02040101 ; undefined
    1d0c:	09000105 	.inst	0x09000105 ; undefined
    1d10:	0030e802 	.inst	0x0030e802 ; NYI
    1d14:	00000061 	udf	#97
    1d18:	00c40300 	.inst	0x00c40300 ; undefined
    1d1c:	3d080501 	str	b1, [x8, #513]
    1d20:	05580705 	mov	z5.h, p8/z, #56
    1d24:	04052f10 	.inst	0x04052f10 ; undefined
    1d28:	77120530 	.inst	0x77120530 ; undefined
    1d2c:	054b0805 	.inst	0x054b0805 ; undefined
    1d30:	054b2212 	.inst	0x054b2212 ; undefined
    1d34:	12055908 	and	w8, w8, #0xf803ffff
    1d38:	59080522 	.inst	0x59080522 ; undefined
    1d3c:	05220c05 	ext	z5.b, z5.b, z0.b, #19
    1d40:	02022101 	.inst	0x02022101 ; undefined
    1d44:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1d48:	00010502 	.inst	0x00010502 ; undefined
    1d4c:	31940209 	.inst	0x31940209 ; undefined
    1d50:	00006100 	udf	#24832
    1d54:	dd030000 	.inst	0xdd030000 ; undefined
    1d58:	09050100 	.inst	0x09050100 ; undefined
    1d5c:	58080530 	ldr	x16, 11e00 <__stack_size+0xde00>
    1d60:	052f1005 	ext	z5.b, z5.b, z0.b, #124
    1d64:	0c053014 	.inst	0x0c053014 ; undefined
    1d68:	2101053d 	.inst	0x2101053d ; undefined
    1d6c:	01000202 	.inst	0x01000202 ; undefined
    1d70:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1d74:	02090001 	.inst	0x02090001 ; undefined
    1d78:	610031d8 	.inst	0x610031d8 ; undefined
    1d7c:	00000000 	udf	#0
    1d80:	0100ec03 	.inst	0x0100ec03 ; undefined
    1d84:	053d0805 	ext	z5.b, z5.b, z0.b, #234
    1d88:	10055807 	adr	x7, c888 <__stack_size+0x8888>
    1d8c:	300b052f 	adr	x15, 17e31 <__stack_size+0x13e31>
    1d90:	02001405 	.inst	0x02001405 ; undefined
    1d94:	05200104 	ext	z4.b, z4.b, z8.b, #0
    1d98:	0402001a 	.inst	0x0402001a ; undefined
    1d9c:	0d052e01 	.inst	0x0d052e01 ; undefined
    1da0:	01040200 	.inst	0x01040200 ; undefined
    1da4:	2f1e0520 	ushr	v0.4h, v9.4h, #2
    1da8:	053c1805 	ext	z5.b, z5.b, z0.b, #230
    1dac:	01052f0c 	.inst	0x01052f0c ; undefined
    1db0:	00020221 	.inst	0x00020221 ; undefined
    1db4:	02040101 	.inst	0x02040101 ; undefined
    1db8:	09000105 	.inst	0x09000105 ; undefined
    1dbc:	00000002 	udf	#2
    1dc0:	00000000 	udf	#0
    1dc4:	00f50300 	.inst	0x00f50300 ; undefined
    1dc8:	3d080501 	str	b1, [x8, #513]
    1dcc:	05580705 	mov	z5.h, p8/z, #56
    1dd0:	0b052f10 	add	w16, w24, w5, lsl #11
    1dd4:	00160530 	.inst	0x00160530 ; undefined
    1dd8:	20010402 	.inst	0x20010402 ; undefined
    1ddc:	02001c05 	.inst	0x02001c05 ; undefined
    1de0:	052e0104 	ext	z4.b, z4.b, z8.b, #112
    1de4:	0402000e 	.inst	0x0402000e ; undefined
    1de8:	1e052001 	.inst	0x1e052001 ; undefined
    1dec:	3c18052f 	str	b15, [x9], #-128
    1df0:	052f0c05 	ext	z5.b, z5.b, z0.b, #123
    1df4:	02022101 	.inst	0x02022101 ; undefined
    1df8:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1dfc:	00010502 	.inst	0x00010502 ; undefined
    1e00:	00000209 	udf	#521
    1e04:	00000000 	udf	#0
    1e08:	83030000 	.inst	0x83030000 ; undefined
    1e0c:	09050101 	.inst	0x09050101 ; undefined
    1e10:	58080530 	ldr	x16, 11eb4 <__stack_size+0xdeb4>
    1e14:	052f1005 	ext	z5.b, z5.b, z0.b, #124
    1e18:	1905300b 	stlurb	w11, [x0, #83]
    1e1c:	01040200 	.inst	0x01040200 ; undefined
    1e20:	00200520 	.inst	0x00200520 ; NYI
    1e24:	2e010402 	.inst	0x2e010402 ; undefined
    1e28:	02000f05 	.inst	0x02000f05 ; undefined
    1e2c:	05200104 	ext	z4.b, z4.b, z8.b, #0
    1e30:	0c052f09 	.inst	0x0c052f09 ; undefined
    1e34:	2f01053e 	mvni	v30.2s, #0x29
    1e38:	01000202 	.inst	0x01000202 ; undefined
    1e3c:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1e40:	02090032 	.inst	0x02090032 ; undefined
	...
    1e4c:	0101b303 	.inst	0x0101b303 ; undefined
    1e50:	052f0905 	ext	z5.b, z5.b, z8.b, #122
    1e54:	10055808 	adr	x8, c954 <__stack_size+0x8954>
    1e58:	3015052f 	adr	x15, 2befd <__stack_size+0x27efd>
    1e5c:	05590c05 	mov	z5.h, p9/z, #96
    1e60:	02022101 	.inst	0x02022101 ; undefined
    1e64:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1e68:	00010502 	.inst	0x00010502 ; undefined
    1e6c:	00000209 	udf	#521
    1e70:	00000000 	udf	#0
    1e74:	bb030000 	.inst	0xbb030000 ; undefined
    1e78:	12050101 	and	w1, w8, #0x8000000
    1e7c:	0105592f 	.inst	0x0105592f ; undefined
    1e80:	00030259 	.inst	0x00030259 ; undefined
    1e84:	02040101 	.inst	0x02040101 ; undefined
    1e88:	09000105 	.inst	0x09000105 ; undefined
    1e8c:	00000002 	udf	#2
    1e90:	00000000 	udf	#0
    1e94:	01c10300 	.inst	0x01c10300 ; undefined
    1e98:	2f050501 	mvni	v1.2s, #0xa8
    1e9c:	052e1b05 	ext	z5.b, z5.b, z24.b, #118
    1ea0:	0e052004 	tbl	v4.8b, {v0.16b, v1.16b}, v5.8b
    1ea4:	5a010530 	.inst	0x5a010530 ; undefined
    1ea8:	01000302 	.inst	0x01000302 ; undefined
    1eac:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1eb0:	02090001 	.inst	0x02090001 ; undefined
	...
    1ebc:	0101ca03 	.inst	0x0101ca03 ; undefined
    1ec0:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    1ec4:	11055805 	add	w5, w0, #0x156
    1ec8:	0c05302f 	.inst	0x0c05302f ; undefined
    1ecc:	21010559 	.inst	0x21010559 ; undefined
    1ed0:	01000202 	.inst	0x01000202 ; undefined
    1ed4:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    1ed8:	02090001 	.inst	0x02090001 ; undefined
	...
    1ee4:	0101d503 	.inst	0x0101d503 ; undefined
    1ee8:	053d0805 	ext	z5.b, z5.b, z0.b, #234
    1eec:	15054a07 	b	4154708 <__stack_size+0x4150708>
    1ef0:	6906052f 	stgp	x15, x1, [x9, #192]
    1ef4:	053f0c05 	ext	z5.b, z5.b, z0.b, #251
    1ef8:	02022101 	.inst	0x02022101 ; undefined
    1efc:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1f00:	00010502 	.inst	0x00010502 ; undefined
    1f04:	00000209 	udf	#521
    1f08:	00000000 	udf	#0
    1f0c:	f8030000 	stur	x0, [x0, #48]
    1f10:	08050101 	stxrb	w5, w1, [x8]
    1f14:	2e1e052f 	.inst	0x2e1e052f ; undefined
    1f18:	05200705 	ext	z5.b, z5.b, z24.b, #1
    1f1c:	01052f11 	.inst	0x01052f11 ; undefined
    1f20:	0003025a 	.inst	0x0003025a ; undefined
    1f24:	02040101 	.inst	0x02040101 ; undefined
    1f28:	09000105 	.inst	0x09000105 ; undefined
    1f2c:	00000002 	udf	#2
    1f30:	00000000 	udf	#0
    1f34:	02810300 	.inst	0x02810300 ; undefined
    1f38:	2f080501 	ushr	v1.8b, v8.8b, #8
    1f3c:	054a0705 	.inst	0x054a0705 ; undefined
    1f40:	01052f11 	.inst	0x01052f11 ; undefined
    1f44:	0003025a 	.inst	0x0003025a ; undefined
    1f48:	02040101 	.inst	0x02040101 ; undefined
    1f4c:	09000105 	.inst	0x09000105 ; undefined
    1f50:	00000002 	udf	#2
    1f54:	00000000 	udf	#0
    1f58:	02890300 	.inst	0x02890300 ; undefined
    1f5c:	2f080501 	ushr	v1.8b, v8.8b, #8
    1f60:	052e1e05 	ext	z5.b, z5.b, z16.b, #119
    1f64:	11052007 	add	w7, w0, #0x148
    1f68:	5a0c052f 	.inst	0x5a0c052f ; undefined
    1f6c:	02210105 	.inst	0x02210105 ; undefined
    1f70:	01010002 	.inst	0x01010002 ; undefined
    1f74:	01050204 	.inst	0x01050204 ; undefined
    1f78:	00020900 	.inst	0x00020900 ; undefined
    1f7c:	00000000 	udf	#0
    1f80:	03000000 	.inst	0x03000000 ; undefined
    1f84:	05010293 	orr	z19.s, z19.s, #0x1fffff
    1f88:	05052f06 	.inst	0x05052f06 ; undefined
    1f8c:	2f12054a 	ushr	v10.4h, v10.4h, #14
    1f90:	055a0d05 	mov	z5.h, p10/z, #104
    1f94:	02022101 	.inst	0x02022101 ; undefined
    1f98:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    1f9c:	00010502 	.inst	0x00010502 ; undefined
    1fa0:	00000209 	udf	#521
    1fa4:	00000000 	udf	#0
    1fa8:	9d030000 	.inst	0x9d030000 ; undefined
    1fac:	05050102 	.inst	0x05050102 ; undefined
    1fb0:	2e1e0532 	.inst	0x2e1e0532 ; undefined
    1fb4:	05200405 	ext	z5.b, z5.b, z0.b, #1
    1fb8:	01052f12 	.inst	0x01052f12 ; undefined
    1fbc:	0003025a 	.inst	0x0003025a ; undefined
    1fc0:	02040101 	.inst	0x02040101 ; undefined
    1fc4:	09000105 	.inst	0x09000105 ; undefined
    1fc8:	00000002 	udf	#2
    1fcc:	00000000 	udf	#0
    1fd0:	02a90300 	.inst	0x02a90300 ; undefined
    1fd4:	3d0a0501 	str	b1, [x8, #641]
    1fd8:	05230b05 	ext	z5.b, z5.b, z24.b, #26
    1fdc:	05222e09 	tbx	z9.b, z16.b, z2.b
    1fe0:	01055a14 	.inst	0x01055a14 ; undefined
    1fe4:	00030267 	.inst	0x00030267 ; undefined
    1fe8:	02040101 	.inst	0x02040101 ; undefined
    1fec:	09000105 	.inst	0x09000105 ; undefined
    1ff0:	00000002 	udf	#2
    1ff4:	00000000 	udf	#0
    1ff8:	02b70300 	.inst	0x02b70300 ; undefined
    1ffc:	4b0a0501 	sub	w1, w8, w10, lsl #1
    2000:	05220c05 	ext	z5.b, z5.b, z0.b, #19
    2004:	05222e0a 	tbx	z10.b, z16.b, z2.b
    2008:	15055906 	b	4158420 <__stack_size+0x4154420>
    200c:	2e17055a 	.inst	0x2e17055a ; undefined
    2010:	052e1505 	ext	z5.b, z5.b, z8.b, #117
    2014:	03023d01 	.inst	0x03023d01 ; undefined
    2018:	04010100 	sub	z0.b, p0/m, z0.b, z8.b
    201c:	00010502 	.inst	0x00010502 ; undefined
    2020:	00000209 	udf	#521
    2024:	00000000 	udf	#0
    2028:	c4030000 	ld1sb	{z0.d}, p0/z, [x0, z3.d, uxtw]
    202c:	02050102 	.inst	0x02050102 ; undefined
    2030:	0812053d 	stxrb	w18, w29, [x9]
    2034:	4b030530 	sub	w16, w9, w3, lsl #1
    2038:	05221205 	ext	z5.b, z5.b, z16.b, #20
    203c:	12055903 	and	w3, w8, #0xf803ffff
    2040:	59030522 	.inst	0x59030522 ; undefined
    2044:	05221205 	ext	z5.b, z5.b, z16.b, #20
    2048:	12055903 	and	w3, w8, #0xf803ffff
    204c:	59030522 	.inst	0x59030522 ; undefined
    2050:	02220105 	.inst	0x02220105 ; undefined
    2054:	01010003 	.inst	0x01010003 ; undefined
    2058:	01050204 	.inst	0x01050204 ; undefined
    205c:	00020900 	.inst	0x00020900 ; undefined
    2060:	00000000 	udf	#0
    2064:	03000000 	.inst	0x03000000 ; undefined
    2068:	050102da 	orr	z26.s, z26.s, #0x7fffff
    206c:	12053d02 	and	w2, w8, #0xf80007ff
    2070:	03053008 	.inst	0x03053008 ; undefined
    2074:	2212054b 	.inst	0x2212054b ; undefined
    2078:	05590305 	mov	z5.h, p9/z, #24
    207c:	03052212 	.inst	0x03052212 ; undefined
    2080:	22120559 	.inst	0x22120559 ; undefined
    2084:	05590305 	mov	z5.h, p9/z, #24
    2088:	03052212 	.inst	0x03052212 ; undefined
    208c:	22010559 	.inst	0x22010559 ; undefined
    2090:	01000302 	.inst	0x01000302 ; undefined
    2094:	05020401 	orr	z1.d, z1.d, #0x1ffffffff
    2098:	02090001 	.inst	0x02090001 ; undefined
	...
    20a4:	0102f103 	.inst	0x0102f103 ; undefined
    20a8:	05411105 	eor	z5.s, z5.s, #0xc000007f
    20ac:	0905230b 	.inst	0x0905230b ; undefined
    20b0:	2f0b052e 	ushr	v14.8b, v9.8b, #5
    20b4:	053e0c05 	ext	z5.b, z5.b, z0.b, #243
    20b8:	14053105 	b	14e4cc <__stack_size+0x14a4cc>
    20bc:	21152402 	.inst	0x21152402 ; undefined
    20c0:	222f0d05 	.inst	0x222f0d05 ; undefined
    20c4:	053d1405 	ext	z5.b, z5.b, z0.b, #237
    20c8:	0a05210d 	and	w13, w8, w5, lsl #8
    20cc:	3d110522 	str	b2, [x9, #1089]
    20d0:	222f0a05 	.inst	0x222f0a05 ; undefined
    20d4:	053d1105 	ext	z5.b, z5.b, z8.b, #236
    20d8:	05222f0a 	tbx	z10.b, z24.b, z2.b
    20dc:	0d053d11 	.inst	0x0d053d11 ; undefined
    20e0:	220a052f 	.inst	0x220a052f ; undefined
    20e4:	053d1105 	ext	z5.b, z5.b, z8.b, #236
    20e8:	0a052f0d 	and	w13, w24, w5, lsl #11
    20ec:	3d110522 	str	b2, [x9, #1089]
    20f0:	052f0d05 	ext	z5.b, z5.b, z8.b, #123
    20f4:	0d052414 	.inst	0x0d052414 ; undefined
    20f8:	250c0521 	cmpge	p1.b, p1/z, z9.b, #12
    20fc:	02210105 	.inst	0x02210105 ; undefined
    2100:	01010002 	.inst	0x01010002 ; undefined
    2104:	01050204 	.inst	0x01050204 ; undefined
    2108:	00020900 	.inst	0x00020900 ; undefined
    210c:	00000000 	udf	#0
    2110:	03000000 	.inst	0x03000000 ; undefined
    2114:	050103ac 	orr	z12.s, z12.s, #0x3fffffff
    2118:	07053008 	.inst	0x07053008 ; undefined
    211c:	2f11054a 	ushr	v10.4h, v10.4h, #15
    2120:	590c0569 	.inst	0x590c0569 ; undefined
    2124:	02210105 	.inst	0x02210105 ; undefined
    2128:	01010002 	.inst	0x01010002 ; undefined
    212c:	01050204 	.inst	0x01050204 ; undefined
    2130:	00020900 	.inst	0x00020900 ; undefined
    2134:	00000000 	udf	#0
    2138:	03000000 	.inst	0x03000000 ; undefined
    213c:	050103b9 	orr	z25.s, z25.s, #0x3fffffff
    2140:	07053e08 	.inst	0x07053e08 ; undefined
    2144:	2f15054a 	ushr	v10.4h, v10.4h, #11
    2148:	05690a05 	ext	z5.b, {z16.b, z17.b}, #74
    214c:	01053e0c 	.inst	0x01053e0c ; undefined
    2150:	00020221 	.inst	0x00020221 ; undefined
    2154:	02040101 	.inst	0x02040101 ; undefined
    2158:	09000105 	.inst	0x09000105 ; undefined
    215c:	00000002 	udf	#2
    2160:	00000000 	udf	#0
    2164:	03c70300 	.inst	0x03c70300 ; undefined
    2168:	3e090501 	.inst	0x3e090501 ; undefined
    216c:	054a0805 	.inst	0x054a0805 ; undefined
    2170:	0b052f16 	add	w22, w24, w5, lsl #11
    2174:	3e0d0569 	.inst	0x3e0d0569 ; undefined
    2178:	02210105 	.inst	0x02210105 ; undefined
    217c:	01010002 	.inst	0x01010002 ; undefined
    2180:	00000464 	udf	#1124
    2184:	00ad0004 	.inst	0x00ad0004 ; undefined
    2188:	01040000 	.inst	0x01040000 ; undefined
    218c:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    2190:	01010100 	.inst	0x01010100 ; undefined
    2194:	00000001 	udf	#1
    2198:	01000001 	.inst	0x01000001 ; undefined
    219c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    21a0:	6f532f2e 	.inst	0x6f532f2e ; undefined
    21a4:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    21a8:	6f736f6d 	.inst	0x6f736f6d ; undefined
    21ac:	6f432f63 	.inst	0x6f432f63 ; undefined
    21b0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    21b4:	756f532f 	.inst	0x756f532f ; undefined
    21b8:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
    21bc:	76697244 	.inst	0x76697244 ; undefined
    21c0:	2f737265 	fcmla	v5.4h, v19.4h, v19.h[1], #270
    21c4:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    21c8:	532f2e2e 	.inst	0x532f2e2e ; undefined
    21cc:	642f436f 	.inst	0x642f436f ; undefined
    21d0:	616f6d65 	.inst	0x616f6d65 ; undefined
    21d4:	432f7570 	.inst	0x432f7570 ; undefined
    21d8:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    21dc:	6e492f6e 	facge	v14.8h, v27.8h, v9.8h
    21e0:	64756c63 	.inst	0x64756c63 ; undefined
    21e4:	696c2f65 	ldpsw	x5, x11, [x27, #-160]
    21e8:	2e006362 	.inst	0x2e006362 ; undefined
    21ec:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    21f0:	436f532f 	.inst	0x436f532f ; undefined
    21f4:	6d65642f 	ldp	d15, d25, [x1, #-432]
    21f8:	636f736f 	.inst	0x636f736f ; undefined
    21fc:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    2200:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    2204:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    2208:	00656475 	.inst	0x00656475 ; undefined
    220c:	396c6100 	ldrb	w0, [x8, #2840]
    2210:	5f303030 	.inst	0x5f303030 ; undefined
    2214:	2e697073 	uabdl	v19.4s, v3.4h, v9.4h
    2218:	00010063 	.inst	0x00010063 ; undefined
    221c:	64747300 	.inst	0x64747300 ; undefined
    2220:	2e746e69 	umin	v9.4h, v19.4h, v20.4h
    2224:	00020068 	.inst	0x00020068 ; undefined
    2228:	6d656400 	ldp	d0, d25, [x0, #-432]
    222c:	636f736f 	.inst	0x636f736f ; undefined
    2230:	0300682e 	.inst	0x0300682e ; undefined
    2234:	05000000 	orr	z0.s, z0.s, #0x1
    2238:	02090001 	.inst	0x02090001 ; undefined
    223c:	61003240 	.inst	0x61003240 ; undefined
    2240:	00000000 	udf	#0
    2244:	05011303 	orr	z3.s, z3.s, #0xc07fffff
    2248:	05052f06 	.inst	0x05052f06 ; undefined
    224c:	300a0558 	adr	x24, 162f5 <__stack_size+0x122f5>
    2250:	05301105 	ext	z5.b, z5.b, z8.b, #132
    2254:	01052f0c 	.inst	0x01052f0c ; undefined
    2258:	00020221 	.inst	0x00020221 ; undefined
    225c:	01050101 	.inst	0x01050101 ; undefined
    2260:	80020900 	.inst	0x80020900 ; undefined
    2264:	00610032 	.inst	0x00610032 ; undefined
    2268:	03000000 	.inst	0x03000000 ; undefined
    226c:	06050123 	.inst	0x06050123 ; undefined
    2270:	5805052f 	ldr	x15, c314 <__stack_size+0x8314>
    2274:	05300a05 	ext	z5.b, z5.b, z16.b, #130
    2278:	0c053011 	.inst	0x0c053011 ; undefined
    227c:	2101053d 	.inst	0x2101053d ; undefined
    2280:	01000202 	.inst	0x01000202 ; undefined
    2284:	00010501 	.inst	0x00010501 ; undefined
    2288:	32c40209 	.inst	0x32c40209 ; undefined
    228c:	00006100 	udf	#24832
    2290:	35030000 	cbnz	w0, 8290 <__stack_size+0x4290>
    2294:	2f060501 	mvni	v1.2s, #0xc8
    2298:	05580505 	mov	z5.h, p8/z, #40
    229c:	1105300a 	add	w10, w0, #0x14c
    22a0:	5a0c0530 	.inst	0x5a0c0530 ; undefined
    22a4:	02210105 	.inst	0x02210105 ; undefined
    22a8:	01010002 	.inst	0x01010002 ; undefined
    22ac:	09000105 	.inst	0x09000105 ; undefined
    22b0:	00000002 	udf	#2
    22b4:	00000000 	udf	#0
    22b8:	00c60300 	.inst	0x00c60300 ; undefined
    22bc:	2f060501 	mvni	v1.2s, #0xc8
    22c0:	05580505 	mov	z5.h, p8/z, #40
    22c4:	0e05300a 	tbx	v10.8b, {v0.16b, v1.16b}, v5.8b
    22c8:	0c055930 	.inst	0x0c055930 ; undefined
    22cc:	2101055a 	.inst	0x2101055a ; undefined
    22d0:	01000202 	.inst	0x01000202 ; undefined
    22d4:	00010501 	.inst	0x00010501 ; undefined
    22d8:	00000209 	udf	#521
    22dc:	00000000 	udf	#0
    22e0:	d8030000 	prfm	pldl1keep, 82e0 <__stack_size+0x42e0>
    22e4:	06050100 	.inst	0x06050100 ; undefined
    22e8:	5805052f 	ldr	x15, c38c <__stack_size+0x838c>
    22ec:	05300a05 	ext	z5.b, z5.b, z16.b, #130
    22f0:	0559300e 	mov	z14.h, p9/z, #-32768
    22f4:	01055a0c 	.inst	0x01055a0c ; undefined
    22f8:	00020221 	.inst	0x00020221 ; undefined
    22fc:	01050101 	.inst	0x01050101 ; undefined
    2300:	00020900 	.inst	0x00020900 ; undefined
    2304:	00000000 	udf	#0
    2308:	03000000 	.inst	0x03000000 ; undefined
    230c:	050100e9 	orr	z9.s, z9.s, #0xff
    2310:	05052f06 	.inst	0x05052f06 ; undefined
    2314:	300a0558 	adr	x24, 163bd <__stack_size+0x123bd>
    2318:	05300e05 	ext	z5.b, z5.b, z16.b, #131
    231c:	01055a0c 	.inst	0x01055a0c ; undefined
    2320:	00020221 	.inst	0x00020221 ; undefined
    2324:	01050101 	.inst	0x01050101 ; undefined
    2328:	10020900 	adr	x0, 6448 <__stack_size+0x2448>
    232c:	00610033 	.inst	0x00610033 ; undefined
    2330:	03000000 	.inst	0x03000000 ; undefined
    2334:	050100f9 	orr	z25.s, z25.s, #0xff
    2338:	05052f06 	.inst	0x05052f06 ; undefined
    233c:	300a0558 	adr	x24, 163e5 <__stack_size+0x123e5>
    2340:	59300e05 	.inst	0x59300e05 ; undefined
    2344:	055a0c05 	mov	z5.h, p10/z, #96
    2348:	02022101 	.inst	0x02022101 ; undefined
    234c:	05010100 	orr	z0.s, z0.s, #0x1ff
    2350:	02090001 	.inst	0x02090001 ; undefined
	...
    235c:	01018a03 	.inst	0x01018a03 ; undefined
    2360:	052f0605 	ext	z5.b, z5.b, z16.b, #121
    2364:	0a055805 	and	w5, w0, w5, lsl #22
    2368:	300e0530 	adr	x16, 1e40d <__stack_size+0x1a40d>
    236c:	5a0c0559 	.inst	0x5a0c0559 ; undefined
    2370:	02210105 	.inst	0x02210105 ; undefined
    2374:	01010002 	.inst	0x01010002 ; undefined
    2378:	09000105 	.inst	0x09000105 ; undefined
    237c:	00337002 	.inst	0x00337002 ; NYI
    2380:	00000061 	udf	#97
    2384:	019b0300 	.inst	0x019b0300 ; undefined
    2388:	2f060501 	mvni	v1.2s, #0xc8
    238c:	05580505 	mov	z5.h, p8/z, #40
    2390:	0e05300a 	tbx	v10.8b, {v0.16b, v1.16b}, v5.8b
    2394:	5a090530 	.inst	0x5a090530 ; undefined
    2398:	02210105 	.inst	0x02210105 ; undefined
    239c:	01010002 	.inst	0x01010002 ; undefined
    23a0:	09000105 	.inst	0x09000105 ; undefined
    23a4:	00000002 	udf	#2
    23a8:	00000000 	udf	#0
    23ac:	01ab0300 	.inst	0x01ab0300 ; undefined
    23b0:	2f060501 	mvni	v1.2s, #0xc8
    23b4:	05580505 	mov	z5.h, p8/z, #40
    23b8:	0e05300a 	tbx	v10.8b, {v0.16b, v1.16b}, v5.8b
    23bc:	5a090530 	.inst	0x5a090530 ; undefined
    23c0:	02210105 	.inst	0x02210105 ; undefined
    23c4:	01010002 	.inst	0x01010002 ; undefined
    23c8:	09000105 	.inst	0x09000105 ; undefined
    23cc:	00000002 	udf	#2
    23d0:	00000000 	udf	#0
    23d4:	01bd0300 	.inst	0x01bd0300 ; undefined
    23d8:	3d060501 	str	b1, [x8, #385]
    23dc:	05580505 	mov	z5.h, p8/z, #40
    23e0:	0e05300a 	tbx	v10.8b, {v0.16b, v1.16b}, v5.8b
    23e4:	59040530 	.inst	0x59040530 ; undefined
    23e8:	6a3e0f05 	bics	w5, w24, w30, lsl #3
    23ec:	055a0905 	mov	z5.h, p10/z, #72
    23f0:	02022101 	.inst	0x02022101 ; undefined
    23f4:	05010100 	orr	z0.s, z0.s, #0x1ff
    23f8:	02090001 	.inst	0x02090001 ; undefined
	...
    2404:	0101d503 	.inst	0x0101d503 ; undefined
    2408:	053d0605 	ext	z5.b, z5.b, z16.b, #233
    240c:	0a055805 	and	w5, w0, w5, lsl #22
    2410:	300e0530 	adr	x16, 1e4b5 <__stack_size+0x1a4b5>
    2414:	05590405 	mov	z5.h, p9/z, #32
    2418:	056a3e0f 	.inst	0x056a3e0f ; undefined
    241c:	01055a09 	.inst	0x01055a09 ; undefined
    2420:	00020221 	.inst	0x00020221 ; undefined
    2424:	01050101 	.inst	0x01050101 ; undefined
    2428:	bc020900 	.inst	0xbc020900 ; undefined
    242c:	00610033 	.inst	0x00610033 ; undefined
    2430:	03000000 	.inst	0x03000000 ; undefined
    2434:	050101ed 	orr	z13.s, z13.s, #0xffff
    2438:	05052f06 	.inst	0x05052f06 ; undefined
    243c:	300a0558 	adr	x24, 164e5 <__stack_size+0x124e5>
    2440:	05300e05 	ext	z5.b, z5.b, z16.b, #131
    2444:	01055909 	.inst	0x01055909 ; undefined
    2448:	00020221 	.inst	0x00020221 ; undefined
    244c:	01050101 	.inst	0x01050101 ; undefined
    2450:	08020900 	stxrb	w2, w0, [x8]
    2454:	00610034 	.inst	0x00610034 ; undefined
    2458:	03000000 	.inst	0x03000000 ; undefined
    245c:	050101fd 	orr	z29.s, z29.s, #0xffff
    2460:	05053d06 	.inst	0x05053d06 ; undefined
    2464:	300a0558 	adr	x24, 1650d <__stack_size+0x1250d>
    2468:	05300e05 	ext	z5.b, z5.b, z16.b, #131
    246c:	01056809 	.inst	0x01056809 ; undefined
    2470:	00020221 	.inst	0x00020221 ; undefined
    2474:	01050101 	.inst	0x01050101 ; undefined
    2478:	5c020900 	ldr	d0, 6598 <__stack_size+0x2598>
    247c:	00610034 	.inst	0x00610034 ; undefined
    2480:	03000000 	.inst	0x03000000 ; undefined
    2484:	0501028e 	orr	z14.s, z14.s, #0x1fffff
    2488:	05053d06 	.inst	0x05053d06 ; undefined
    248c:	300a0558 	adr	x24, 16535 <__stack_size+0x12535>
    2490:	05300b05 	ext	z5.b, z5.b, z24.b, #130
    2494:	01053d09 	.inst	0x01053d09 ; undefined
    2498:	00020221 	.inst	0x00020221 ; undefined
    249c:	01050101 	.inst	0x01050101 ; undefined
    24a0:	a4020900 	ld1rqb	{z0.b}, p2/z, [x8, x2]
    24a4:	00610034 	.inst	0x00610034 ; undefined
    24a8:	03000000 	.inst	0x03000000 ; undefined
    24ac:	0501029f 	orr	z31.s, z31.s, #0x1fffff
    24b0:	05053d06 	.inst	0x05053d06 ; undefined
    24b4:	300a0558 	adr	x24, 1655d <__stack_size+0x1255d>
    24b8:	05300d05 	ext	z5.b, z5.b, z8.b, #131
    24bc:	01053d0c 	.inst	0x01053d0c ; undefined
    24c0:	00020221 	.inst	0x00020221 ; undefined
    24c4:	01050101 	.inst	0x01050101 ; undefined
    24c8:	ec020900 	.inst	0xec020900 ; undefined
    24cc:	00610034 	.inst	0x00610034 ; undefined
    24d0:	03000000 	.inst	0x03000000 ; undefined
    24d4:	050102af 	orr	z15.s, z15.s, #0x3fffff
    24d8:	05053d06 	.inst	0x05053d06 ; undefined
    24dc:	300a0558 	adr	x24, 16585 <__stack_size+0x12585>
    24e0:	05300e05 	ext	z5.b, z5.b, z16.b, #131
    24e4:	0105670c 	.inst	0x0105670c ; undefined
    24e8:	00020221 	.inst	0x00020221 ; undefined
    24ec:	01050101 	.inst	0x01050101 ; undefined
    24f0:	00020900 	.inst	0x00020900 ; undefined
    24f4:	00000000 	udf	#0
    24f8:	03000000 	.inst	0x03000000 ; undefined
    24fc:	050102bf 	orr	z31.s, z31.s, #0x3fffff
    2500:	05053d06 	.inst	0x05053d06 ; undefined
    2504:	300a0558 	adr	x24, 165ad <__stack_size+0x125ad>
    2508:	05300e05 	ext	z5.b, z5.b, z16.b, #131
    250c:	01056709 	.inst	0x01056709 ; undefined
    2510:	00020221 	.inst	0x00020221 ; undefined
    2514:	01050101 	.inst	0x01050101 ; undefined
    2518:	40020900 	.inst	0x40020900 ; undefined
    251c:	00610035 	.inst	0x00610035 ; undefined
    2520:	03000000 	.inst	0x03000000 ; undefined
    2524:	050102cf 	orr	z15.s, z15.s, #0x7fffff
    2528:	05053d06 	.inst	0x05053d06 ; undefined
    252c:	300a0558 	adr	x24, 165d5 <__stack_size+0x125d5>
    2530:	05300e05 	ext	z5.b, z5.b, z16.b, #131
    2534:	01053d0c 	.inst	0x01053d0c ; undefined
    2538:	00020221 	.inst	0x00020221 ; undefined
    253c:	01050101 	.inst	0x01050101 ; undefined
    2540:	88020900 	stxr	w2, w0, [x8]
    2544:	00610035 	.inst	0x00610035 ; undefined
    2548:	03000000 	.inst	0x03000000 ; undefined
    254c:	050102df 	orr	z31.s, z31.s, #0x7fffff
    2550:	01052f14 	.inst	0x01052f14 ; undefined
    2554:	0002022f 	.inst	0x0002022f ; undefined
    2558:	01050101 	.inst	0x01050101 ; undefined
    255c:	a0020900 	.inst	0xa0020900 ; undefined
    2560:	00610035 	.inst	0x00610035 ; undefined
    2564:	03000000 	.inst	0x03000000 ; undefined
    2568:	050102e9 	orr	z9.s, z9.s, #0xffffff
    256c:	10052f0b 	adr	x11, cb4c <__stack_size+0x8b4c>
    2570:	2007052e 	.inst	0x2007052e ; undefined
    2574:	302f1005 	adr	x5, 60775 <__stack_size+0x5c775>
    2578:	02210105 	.inst	0x02210105 ; undefined
    257c:	01010002 	.inst	0x01010002 ; undefined
    2580:	09000105 	.inst	0x09000105 ; undefined
    2584:	0035d002 	.inst	0x0035d002 ; NYI
    2588:	00000061 	udf	#97
    258c:	02f60300 	.inst	0x02f60300 ; undefined
    2590:	2f0b0501 	ushr	v1.8b, v8.8b, #5
    2594:	052e1005 	ext	z5.b, z5.b, z0.b, #116
    2598:	10052007 	adr	x7, c998 <__stack_size+0x8998>
    259c:	0105302f 	.inst	0x0105302f ; undefined
    25a0:	00020221 	.inst	0x00020221 ; undefined
    25a4:	01050101 	.inst	0x01050101 ; undefined
    25a8:	00020900 	.inst	0x00020900 ; undefined
    25ac:	00610036 	.inst	0x00610036 ; undefined
    25b0:	03000000 	.inst	0x03000000 ; undefined
    25b4:	05010384 	orr	z4.s, z4.s, #0x1fffffff
    25b8:	10052f0b 	adr	x11, cb98 <__stack_size+0x8b98>
    25bc:	2007052e 	.inst	0x2007052e ; undefined
    25c0:	302f1005 	adr	x5, 607c1 <__stack_size+0x5c7c1>
    25c4:	02210105 	.inst	0x02210105 ; undefined
    25c8:	01010002 	.inst	0x01010002 ; undefined
    25cc:	09000105 	.inst	0x09000105 ; undefined
    25d0:	00363002 	.inst	0x00363002 ; NYI
    25d4:	00000061 	udf	#97
    25d8:	03920300 	.inst	0x03920300 ; undefined
    25dc:	3d0e0501 	str	b1, [x8, #897]
    25e0:	023d0105 	.inst	0x023d0105 ; undefined
    25e4:	01010003 	.inst	0x01010003 ; undefined
    25e8:	0000026f 	udf	#623
    25ec:	00990004 	.inst	0x00990004 ; undefined
    25f0:	01040000 	.inst	0x01040000 ; undefined
    25f4:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    25f8:	01010100 	.inst	0x01010100 ; undefined
    25fc:	00000001 	udf	#1
    2600:	01000001 	.inst	0x01000001 ; undefined
    2604:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    2608:	6f532f2e 	.inst	0x6f532f2e ; undefined
    260c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    2610:	70616f6d 	adr	x13, c53ff <__stack_size+0xc13ff>
    2614:	6f432f75 	.inst	0x6f432f75 ; undefined
    2618:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    261c:	636e492f 	.inst	0x636e492f ; undefined
    2620:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    2624:	62696c2f 	.inst	0x62696c2f ; undefined
    2628:	2e2e0063 	uaddl	v3.8h, v3.8b, v14.8b
    262c:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    2630:	2f436f53 	.inst	0x2f436f53 ; undefined
    2634:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    2638:	2f636f73 	.inst	0x2f636f73 ; undefined
    263c:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    2640:	492f6e6f 	.inst	0x492f6e6f ; undefined
    2644:	756c636e 	.inst	0x756c636e ; undefined
    2648:	00006564 	udf	#25956
    264c:	5f636969 	.inst	0x5f636969 ; undefined
    2650:	74736574 	.inst	0x74736574 ; undefined
    2654:	0000632e 	udf	#25390
    2658:	74730000 	.inst	0x74730000 ; undefined
    265c:	746e6964 	.inst	0x746e6964 ; undefined
    2660:	0100682e 	.inst	0x0100682e ; undefined
    2664:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
    2668:	6f736f6d 	.inst	0x6f736f6d ; undefined
    266c:	00682e63 	.inst	0x00682e63 ; undefined
    2670:	41000002 	.inst	0x41000002 ; undefined
    2674:	32695f4c 	.inst	0x32695f4c ; undefined
    2678:	00682e63 	.inst	0x00682e63 ; undefined
    267c:	73000002 	.inst	0x73000002 ; undefined
    2680:	6f696474 	sqshlu	v20.2d, v3.2d, #41
    2684:	0100682e 	.inst	0x0100682e ; undefined
    2688:	05000000 	orr	z0.s, z0.s, #0x1
    268c:	02090001 	.inst	0x02090001 ; undefined
    2690:	61003654 	.inst	0x61003654 ; undefined
    2694:	00000000 	udf	#0
    2698:	05011703 	orr	z3.b, z3.b, #0x44
    269c:	214b4b0a 	.inst	0x214b4b0a ; undefined
    26a0:	05210b05 	ext	z5.b, z5.b, z24.b, #10
    26a4:	3d2f2202 	str	b2, [x16, #3016]
    26a8:	3e2f3d3d 	.inst	0x3e2f3d3d ; undefined
    26ac:	3d3d673d 	str	b29, [x25, #3929]
    26b0:	054b342f 	.inst	0x054b342f ; undefined
    26b4:	0c054d0e 	.inst	0x0c054d0e ; undefined
    26b8:	3e10053c 	.inst	0x3e10053c ; undefined
    26bc:	054a0505 	.inst	0x054a0505 ; undefined
    26c0:	06053111 	.inst	0x06053111 ; undefined
    26c4:	3f12053c 	.inst	0x3f12053c ; undefined
    26c8:	054a0705 	.inst	0x054a0705 ; undefined
    26cc:	0605310e 	.inst	0x0605310e ; undefined
    26d0:	22100520 	.inst	0x22100520 ; undefined
    26d4:	053e1a05 	ext	z5.b, z5.b, z16.b, #246
    26d8:	1e052e29 	.inst	0x1e052e29 ; undefined
    26dc:	4d14053c 	.inst	0x4d14053c ; undefined
    26e0:	053c0905 	ext	z5.b, z5.b, z8.b, #226
    26e4:	00753f08 	.inst	0x00753f08 ; undefined
    26e8:	25020402 	cmpge	p2.b, p1/z, z0.b, #2
    26ec:	02002305 	.inst	0x02002305 ; undefined
    26f0:	70030204 	adr	x4, 8733 <__stack_size+0x4733>
    26f4:	00170574 	.inst	0x00170574 ; undefined
    26f8:	3c010402 	str	b2, [x0], #16
    26fc:	17030a05 	b	fffffffffc0c4f10 <_sp+0xffffffff9b084f10>
    2700:	2e1d0574 	.inst	0x2e1d0574 ; undefined
    2704:	05203005 	tbl	z5.b, {z0.b}, z0.b
    2708:	07052f02 	.inst	0x07052f02 ; undefined
    270c:	00090530 	.inst	0x00090530 ; undefined
    2710:	20010402 	.inst	0x20010402 ; undefined
    2714:	02001b05 	.inst	0x02001b05 ; undefined
    2718:	052e0104 	ext	z4.b, z4.b, z8.b, #112
    271c:	0402002f 	.inst	0x0402002f ; undefined
    2720:	0c052001 	.inst	0x0c052001 ; undefined
    2724:	01040200 	.inst	0x01040200 ; undefined
    2728:	00130535 	.inst	0x00130535 ; undefined
    272c:	3d010402 	str	b2, [x0, #65]
    2730:	2f420205 	mla	v5.4h, v16.4h, v2.h[0]
    2734:	303d3d3d 	adr	x29, 7ced9 <__stack_size+0x78ed9>
    2738:	3d83673d 	str	q29, [x25, #3472]
    273c:	4b332f3d 	sub	w29, w25, w19, uxth #3
    2740:	054d0c05 	.inst	0x054d0c05 ; undefined
    2744:	0c05220e 	.inst	0x0c05220e ; undefined
    2748:	3e10053c 	.inst	0x3e10053c ; undefined
    274c:	054a0505 	.inst	0x054a0505 ; undefined
    2750:	06053111 	.inst	0x06053111 ; undefined
    2754:	3f12053c 	.inst	0x3f12053c ; undefined
    2758:	054a0705 	.inst	0x054a0705 ; undefined
    275c:	0605310e 	.inst	0x0605310e ; undefined
    2760:	22100520 	.inst	0x22100520 ; undefined
    2764:	053e1405 	ext	z5.b, z5.b, z0.b, #245
    2768:	08053c09 	stxrb	w5, w9, [x0]
    276c:	02003d3e 	.inst	0x02003d3e ; undefined
    2770:	05240204 	ext	z4.b, z4.b, z16.b, #32
    2774:	04020023 	.inst	0x04020023 ; undefined
    2778:	3c750302 	.inst	0x3c750302 ; undefined
    277c:	02001705 	.inst	0x02001705 ; undefined
    2780:	053c0104 	ext	z4.b, z4.b, z8.b, #224
    2784:	74110313 	.inst	0x74110313 ; undefined
    2788:	054a2605 	.inst	0x054a2605 ; undefined
    278c:	0b05320d 	add	w13, w16, w5, lsl #12
    2790:	3d02053c 	str	b28, [x9, #129]
    2794:	05830f05 	and	z5.d, z5.d, #0xffffffff80ffffff
    2798:	0b054a04 	add	w4, w16, w5, lsl #18
    279c:	20030531 	.inst	0x20030531 ; undefined
    27a0:	02000d05 	.inst	0x02000d05 ; undefined
    27a4:	05220304 	ext	z4.b, z4.b, z24.b, #16
    27a8:	04020018 	.inst	0x04020018 ; undefined
    27ac:	16052003 	b	fffffffff814a7b8 <_sp+0xffffffff9710a7b8>
    27b0:	03040200 	.inst	0x03040200 ; undefined
    27b4:	0004053c 	.inst	0x0004053c ; undefined
    27b8:	4b030402 	sub	w2, w0, w3, lsl #1
    27bc:	02003405 	.inst	0x02003405 ; undefined
    27c0:	05200304 	ext	z4.b, z4.b, z24.b, #0
    27c4:	04020004 	.inst	0x04020004 ; undefined
    27c8:	0a055803 	and	w3, w0, w5, lsl #22
    27cc:	03040200 	.inst	0x03040200 ; undefined
    27d0:	00200559 	.inst	0x00200559 ; NYI
    27d4:	38030402 	strb	w2, [x0], #48
    27d8:	02001405 	.inst	0x02001405 ; undefined
    27dc:	053c0104 	ext	z4.b, z4.b, z8.b, #224
    27e0:	07057c02 	.inst	0x07057c02 ; undefined
    27e4:	00090530 	.inst	0x00090530 ; undefined
    27e8:	20010402 	.inst	0x20010402 ; undefined
    27ec:	02001b05 	.inst	0x02001b05 ; undefined
    27f0:	052e0104 	ext	z4.b, z4.b, z8.b, #112
    27f4:	0402002f 	.inst	0x0402002f ; undefined
    27f8:	0a052001 	and	w1, w0, w5, lsl #8
    27fc:	052e0b03 	ext	z3.b, z3.b, z24.b, #114
    2800:	0f052002 	.inst	0x0f052002 ; undefined
    2804:	4a1f0522 	eor	w2, w9, wzr, lsl #1
    2808:	054a0505 	.inst	0x054a0505 ; undefined
    280c:	1d05300b 	.inst	0x1d05300b ; undefined
    2810:	02040200 	.inst	0x02040200 ; undefined
    2814:	0011052a 	.inst	0x0011052a ; undefined
    2818:	3c010402 	str	b2, [x0], #16
    281c:	057c0205 	ext	z5.b, {z16.b, z17.b}, #224
    2820:	01052f09 	.inst	0x01052f09 ; undefined
    2824:	00030221 	.inst	0x00030221 ; undefined
    2828:	01050101 	.inst	0x01050101 ; undefined
    282c:	a8020900 	stnp	x0, x2, [x8, #32]
    2830:	0061003b 	.inst	0x0061003b ; undefined
    2834:	03000000 	.inst	0x03000000 ; undefined
    2838:	050101c8 	orr	z8.s, z8.s, #0x7fff
    283c:	02052f06 	.inst	0x02052f06 ; undefined
    2840:	3e0e0521 	.inst	0x3e0e0521 ; undefined
    2844:	054c0705 	.inst	0x054c0705 ; undefined
    2848:	0d053e03 	.inst	0x0d053e03 ; undefined
    284c:	3206053d 	orr	w29, w9, #0xc000000
    2850:	053d0305 	ext	z5.b, z5.b, z24.b, #232
    2854:	02024001 	.inst	0x02024001 ; undefined
    2858:	85010100 	.inst	0x85010100 ; undefined
    285c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2860:	00006100 	udf	#24832
    2864:	01010400 	.inst	0x01010400 ; undefined
    2868:	000d0efb 	.inst	0x000d0efb ; undefined
    286c:	01010101 	.inst	0x01010101 ; undefined
    2870:	01000000 	.inst	0x01000000 ; undefined
    2874:	2e010000 	ext	v0.8b, v0.8b, v1.8b, #0
    2878:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    287c:	436f532f 	.inst	0x436f532f ; undefined
    2880:	6d65642f 	ldp	d15, d25, [x1, #-432]
    2884:	7570616f 	.inst	0x7570616f ; undefined
    2888:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    288c:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    2890:	6c636e49 	ldnp	d9, d27, [x18, #-464]
    2894:	2f656475 	.inst	0x2f656475 ; undefined
    2898:	6362696c 	.inst	0x6362696c ; undefined
    289c:	616d0000 	.inst	0x616d0000 ; undefined
    28a0:	632e6e69 	.inst	0x632e6e69 ; undefined
    28a4:	00000000 	udf	#0
    28a8:	69647473 	ldpsw	x19, x29, [x3, #-224]
    28ac:	682e746e 	.inst	0x682e746e ; undefined
    28b0:	00000100 	udf	#256
    28b4:	30396c61 	adr	x1, 75641 <__stack_size+0x71641>
    28b8:	745f3030 	.inst	0x745f3030 ; undefined
    28bc:	2e747365 	uabdl	v5.4s, v27.4h, v20.4h
    28c0:	00000068 	udf	#104
    28c4:	10050000 	adr	x0, c8c4 <__stack_size+0x88c4>
    28c8:	10020900 	adr	x0, 69e8 <__stack_size+0x29e8>
    28cc:	0061003c 	.inst	0x0061003c ; undefined
    28d0:	03000000 	.inst	0x03000000 ; undefined
    28d4:	0205010e 	.inst	0x0205010e ; undefined
    28d8:	01052230 	.inst	0x01052230 ; undefined
    28dc:	02200d03 	.inst	0x02200d03 ; undefined
    28e0:	01010003 	.inst	0x01010003 ; undefined
    28e4:	0000030a 	udf	#778
    28e8:	009d0004 	.inst	0x009d0004 ; undefined
    28ec:	01040000 	.inst	0x01040000 ; undefined
    28f0:	0d0efb01 	.inst	0x0d0efb01 ; undefined
    28f4:	01010100 	.inst	0x01010100 ; undefined
    28f8:	00000001 	udf	#1
    28fc:	01000001 	.inst	0x01000001 ; undefined
    2900:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
    2904:	6f532f2e 	.inst	0x6f532f2e ; undefined
    2908:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
    290c:	70616f6d 	adr	x13, c56fb <__stack_size+0xc16fb>
    2910:	6f432f75 	.inst	0x6f432f75 ; undefined
    2914:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
    2918:	636e492f 	.inst	0x636e492f ; undefined
    291c:	6564756c 	fnmls	z12.h, p5/m, z11.h, z4.h
    2920:	62696c2f 	.inst	0x62696c2f ; undefined
    2924:	2e2e0063 	uaddl	v3.8h, v3.8b, v14.8b
    2928:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    292c:	2f436f53 	.inst	0x2f436f53 ; undefined
    2930:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    2934:	2f636f73 	.inst	0x2f636f73 ; undefined
    2938:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    293c:	492f6e6f 	.inst	0x492f6e6f ; undefined
    2940:	756c636e 	.inst	0x756c636e ; undefined
    2944:	00006564 	udf	#25956
    2948:	5f697073 	sqdmlsl	s19, h3, v9.h[2]
    294c:	74736574 	.inst	0x74736574 ; undefined
    2950:	0000632e 	udf	#25390
    2954:	74730000 	.inst	0x74730000 ; undefined
    2958:	746e6964 	.inst	0x746e6964 ; undefined
    295c:	0100682e 	.inst	0x0100682e ; undefined
    2960:	65640000 	fmla	z0.h, p0/m, z0.h, z4.h
    2964:	6f736f6d 	.inst	0x6f736f6d ; undefined
    2968:	00682e63 	.inst	0x00682e63 ; undefined
    296c:	61000002 	.inst	0x61000002 ; undefined
    2970:	3030396c 	adr	x12, 6309d <__stack_size+0x5f09d>
    2974:	70735f30 	adr	x16, e955b <__stack_size+0xe555b>
    2978:	00682e69 	.inst	0x00682e69 ; undefined
    297c:	73000002 	.inst	0x73000002 ; undefined
    2980:	6f696474 	sqshlu	v20.2d, v3.2d, #41
    2984:	0100682e 	.inst	0x0100682e ; undefined
    2988:	05000000 	orr	z0.s, z0.s, #0x1
    298c:	02090001 	.inst	0x02090001 ; undefined
    2990:	61003c2c 	.inst	0x61003c2c ; undefined
    2994:	00000000 	udf	#0
    2998:	05012003 	orr	z3.s, z3.s, #0x10000000
    299c:	0205340b 	.inst	0x0205340b ; undefined
    29a0:	4b070521 	sub	w1, w9, w7, lsl #1
    29a4:	02000905 	.inst	0x02000905 ; undefined
    29a8:	05200104 	ext	z4.b, z4.b, z8.b, #0
    29ac:	04020008 	.inst	0x04020008 ; undefined
    29b0:	07053c01 	.inst	0x07053c01 ; undefined
    29b4:	0008052f 	.inst	0x0008052f ; undefined
    29b8:	20010402 	.inst	0x20010402 ; undefined
    29bc:	05590a05 	mov	z5.h, p9/z, #80
    29c0:	0a054a07 	and	w7, w16, w5, lsl #18
    29c4:	3c1d053d 	str	b29, [x9], #-48
    29c8:	05200705 	ext	z5.b, z5.b, z24.b, #1
    29cc:	1d053d0a 	.inst	0x1d053d0a ; undefined
    29d0:	2007053c 	.inst	0x2007053c ; undefined
    29d4:	053d0905 	ext	z5.b, z5.b, z8.b, #234
    29d8:	02022101 	.inst	0x02022101 ; undefined
    29dc:	05010100 	orr	z0.s, z0.s, #0x1ff
    29e0:	02090001 	.inst	0x02090001 ; undefined
    29e4:	61003cd8 	.inst	0x61003cd8 ; undefined
    29e8:	00000000 	udf	#0
    29ec:	05013803 	orr	z3.s, z3.s, #0x2000000
    29f0:	02052f0b 	.inst	0x02052f0b ; undefined
    29f4:	3e4c4223 	.inst	0x3e4c4223 ; undefined
    29f8:	4d50413e 	.inst	0x4d50413e ; undefined
    29fc:	4c070544 	.inst	0x4c070544 ; undefined
    2a00:	02000905 	.inst	0x02000905 ; undefined
    2a04:	05200104 	ext	z4.b, z4.b, z8.b, #0
    2a08:	04020008 	.inst	0x04020008 ; undefined
    2a0c:	07053c01 	.inst	0x07053c01 ; undefined
    2a10:	0008052f 	.inst	0x0008052f ; undefined
    2a14:	20010402 	.inst	0x20010402 ; undefined
    2a18:	05590d05 	mov	z5.h, p9/z, #104
    2a1c:	09054b12 	.inst	0x09054b12 ; undefined
    2a20:	01052f2e 	.inst	0x01052f2e ; undefined
    2a24:	00020221 	.inst	0x00020221 ; undefined
    2a28:	01050101 	.inst	0x01050101 ; undefined
    2a2c:	bc020900 	.inst	0xbc020900 ; undefined
    2a30:	0061003d 	.inst	0x0061003d ; undefined
    2a34:	03000000 	.inst	0x03000000 ; undefined
    2a38:	050100eb 	orr	z11.s, z11.s, #0xff
    2a3c:	0e054c05 	.inst	0x0e054c05 ; undefined
    2a40:	0559223e 	mov	z30.h, p9/z, #4352
    2a44:	05055a0a 	.inst	0x05055a0a ; undefined
    2a48:	000e0520 	.inst	0x000e0520 ; undefined
    2a4c:	22030402 	.inst	0x22030402 ; undefined
    2a50:	02001205 	.inst	0x02001205 ; undefined
    2a54:	05200304 	ext	z4.b, z4.b, z24.b, #0
    2a58:	04020016 	.inst	0x04020016 ; undefined
    2a5c:	0f055603 	orr	v3.2s, #0xb0, lsl #16
    2a60:	01040200 	.inst	0x01040200 ; undefined
    2a64:	030b053c 	.inst	0x030b053c ; undefined
    2a68:	02053c0a 	.inst	0x02053c0a ; undefined
    2a6c:	3e4c4323 	.inst	0x3e4c4323 ; undefined
    2a70:	504f433e 	adr	x30, a12d6 <__stack_size+0x9d2d6>
    2a74:	0d055151 	.inst	0x0d055151 ; undefined
    2a78:	2f020543 	mvni	v3.2s, #0x4a
    2a7c:	054c0405 	.inst	0x054c0405 ; undefined
    2a80:	0a055a03 	and	w3, w16, w5, lsl #22
    2a84:	3203053d 	orr	w29, w9, #0x60000000
    2a88:	0a030205 	and	w5, w16, w3
    2a8c:	3e4c433c 	.inst	0x3e4c433c ; undefined
    2a90:	4251423e 	.inst	0x4251423e ; undefined
    2a94:	054c0705 	.inst	0x054c0705 ; undefined
    2a98:	04020009 	.inst	0x04020009 ; undefined
    2a9c:	08052001 	stxrb	w5, w1, [x0]
    2aa0:	01040200 	.inst	0x01040200 ; undefined
    2aa4:	2f07053c 	mvni	v28.2s, #0xe9
    2aa8:	02000805 	.inst	0x02000805 ; undefined
    2aac:	05200104 	ext	z4.b, z4.b, z8.b, #0
    2ab0:	580b0302 	ldr	x2, 18b10 <__stack_size+0x14b10>
    2ab4:	054b4b4b 	.inst	0x054b4b4b ; undefined
    2ab8:	09054d07 	.inst	0x09054d07 ; undefined
    2abc:	01040200 	.inst	0x01040200 ; undefined
    2ac0:	00080520 	.inst	0x00080520 ; undefined
    2ac4:	3c010402 	str	b2, [x0], #16
    2ac8:	052f0705 	ext	z5.b, z5.b, z24.b, #121
    2acc:	04020008 	.inst	0x04020008 ; undefined
    2ad0:	02052001 	.inst	0x02052001 ; undefined
    2ad4:	4c42265b 	.inst	0x4c42265b ; undefined
    2ad8:	4c423e3e 	.inst	0x4c423e3e ; undefined
    2adc:	4c070542 	.inst	0x4c070542 ; undefined
    2ae0:	02000905 	.inst	0x02000905 ; undefined
    2ae4:	05200104 	ext	z4.b, z4.b, z8.b, #0
    2ae8:	04020008 	.inst	0x04020008 ; undefined
    2aec:	07053c01 	.inst	0x07053c01 ; undefined
    2af0:	0008052f 	.inst	0x0008052f ; undefined
    2af4:	20010402 	.inst	0x20010402 ; undefined
    2af8:	415c0205 	.inst	0x415c0205 ; undefined
    2afc:	3c09034d 	stur	b13, [x26, #144]
    2b00:	054b4b4b 	.inst	0x054b4b4b ; undefined
    2b04:	02054d07 	.inst	0x02054d07 ; undefined
    2b08:	22080520 	.inst	0x22080520 ; undefined
    2b0c:	02000a05 	.inst	0x02000a05 ; undefined
    2b10:	05200104 	ext	z4.b, z4.b, z8.b, #0
    2b14:	04020009 	.inst	0x04020009 ; undefined
    2b18:	03053c01 	.inst	0x03053c01 ; undefined
    2b1c:	02040200 	.inst	0x02040200 ; undefined
    2b20:	0013052f 	.inst	0x0013052f ; undefined
    2b24:	8d020402 	.inst	0x8d020402 ; undefined
    2b28:	02000c05 	.inst	0x02000c05 ; undefined
    2b2c:	053c0104 	ext	z4.b, z4.b, z8.b, #224
    2b30:	09054207 	.inst	0x09054207 ; undefined
    2b34:	01040200 	.inst	0x01040200 ; undefined
    2b38:	00080520 	.inst	0x00080520 ; undefined
    2b3c:	3c010402 	str	b2, [x0], #16
    2b40:	052f0705 	ext	z5.b, z5.b, z24.b, #121
    2b44:	04020008 	.inst	0x04020008 ; undefined
    2b48:	07052001 	.inst	0x07052001 ; undefined
    2b4c:	20020559 	.inst	0x20020559 ; undefined
    2b50:	02000305 	.inst	0x02000305 ; undefined
    2b54:	05220304 	ext	z4.b, z4.b, z24.b, #16
    2b58:	04020013 	.inst	0x04020013 ; undefined
    2b5c:	0c058e03 	.inst	0x0c058e03 ; undefined
    2b60:	01040200 	.inst	0x01040200 ; undefined
    2b64:	4002053c 	.inst	0x4002053c ; undefined
    2b68:	09033e3d 	.inst	0x09033e3d ; undefined
    2b6c:	3e4c4220 	.inst	0x3e4c4220 ; undefined
    2b70:	034e413e 	.inst	0x034e413e ; undefined
    2b74:	4b4b3c09 	sub	w9, w0, w11, lsr #15
    2b78:	4c07054b 	.inst	0x4c07054b ; undefined
    2b7c:	02000905 	.inst	0x02000905 ; undefined
    2b80:	05200104 	ext	z4.b, z4.b, z8.b, #0
    2b84:	04020008 	.inst	0x04020008 ; undefined
    2b88:	03053c01 	.inst	0x03053c01 ; undefined
    2b8c:	22060531 	.inst	0x22060531 ; undefined
    2b90:	053c0505 	ext	z5.b, z5.b, z8.b, #225
    2b94:	1105300c 	add	w12, w0, #0x14c
    2b98:	4a0f0520 	eor	w0, w9, w15, lsl #1
    2b9c:	054b0505 	.inst	0x054b0505 ; undefined
    2ba0:	07053e0a 	.inst	0x07053e0a ; undefined
    2ba4:	2002053e 	.inst	0x2002053e ; undefined
    2ba8:	02000305 	.inst	0x02000305 ; undefined
    2bac:	05220304 	ext	z4.b, z4.b, z24.b, #16
    2bb0:	04020013 	.inst	0x04020013 ; undefined
    2bb4:	0c058e03 	.inst	0x0c058e03 ; undefined
    2bb8:	01040200 	.inst	0x01040200 ; undefined
    2bbc:	4002053c 	.inst	0x4002053c ; undefined
    2bc0:	4007053d 	.inst	0x4007053d ; undefined
    2bc4:	05200205 	ext	z5.b, z5.b, z16.b, #0
    2bc8:	1d05220e 	.inst	0x1d05220e ; undefined
    2bcc:	58050558 	ldr	x24, cc74 <__stack_size+0x8c74>
    2bd0:	05300405 	ext	z5.b, z5.b, z0.b, #129
    2bd4:	13053d0b 	sbfx	w11, w8, #5, #11
    2bd8:	02040200 	.inst	0x02040200 ; undefined
    2bdc:	000c0529 	.inst	0x000c0529 ; undefined
    2be0:	3c010402 	str	b2, [x0], #16
    2be4:	05440205 	.inst	0x05440205 ; undefined
    2be8:	01053f05 	.inst	0x01053f05 ; undefined
    2bec:	0004023e 	.inst	0x0004023e ; undefined
    2bf0:	Address 0x0000000000002bf0 is out of bounds.


Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
{
       0:	00000023 	udf	#35
       4:	00000004 	udf	#4
	panic();
       8:	01080000 	.inst	0x01080000 ; undefined
}
       c:	00000000 	udf	#0
      10:	61000108 	.inst	0x61000108 ; undefined
      14:	00000000 	udf	#0
{
      18:	00000010 	udf	#16
      1c:	00002f00 	udf	#12032
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	00006600 	udf	#26112
      24:	23800100 	.inst	0x23800100 ; undefined
      28:	04000000 	add	z0.b, p0/m, z0.b, z0.b
      2c:	00001400 	udf	#5120
	return 0;
      30:	64010800 	.inst	0x64010800 ; undefined
}
      34:	18000000 	ldr	w0, 34 <__stack_size-0x3fcc>
      38:	00610001 	.inst	0x00610001 ; undefined
    __delay(delay_cnt);
      3c:	40000000 	.inst	0x40000000 ; undefined
      40:	00000072 	udf	#114
}
      44:	0000002f 	udf	#47
      48:	00000066 	udf	#102
      4c:	00248001 	.inst	0x00248001 ; NYI
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
      50:	00040000 	.inst	0x00040000 ; undefined
      54:	00000028 	udf	#40
      58:	00ca0108 	.inst	0x00ca0108 ; undefined
      5c:	00000000 	udf	#0
      60:	00006100 	udf	#24832
      64:	02880000 	.inst	0x02880000 ; undefined
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
      68:	0000009c 	udf	#156
      6c:	0000002f 	udf	#47
      70:	00000066 	udf	#102
      74:	00248001 	.inst	0x00248001 ; NYI
      78:	00040000 	.inst	0x00040000 ; undefined
	return 0;
      7c:	0000003c 	udf	#60
}
      80:	015c0108 	.inst	0x015c0108 ; undefined
      84:	08000000 	stxrb	w0, w0, [x0]
	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
      88:	00006100 	udf	#24832
      8c:	0a900000 	and	w0, w0, w16, asr #0
      90:	000000d2 	udf	#210
      94:	0000002f 	udf	#47
      98:	00000066 	udf	#102
      9c:	01958001 	.inst	0x01958001 ; undefined
      a0:	00040000 	.inst	0x00040000 ; undefined
      a4:	00000050 	udf	#80
      a8:	02200108 	.inst	0x02200108 ; undefined
	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
      ac:	de0c0000 	.inst	0xde0c0000 ; undefined
      b0:	2f000001 	.inst	0x2f000001 ; undefined
	...
      c0:	1f000000 	fmadd	s0, s0, s0, s0
      c4:	02000002 	.inst	0x02000002 ; undefined
      c8:	01cb0508 	.inst	0x01cb0508 ; undefined
	return 0;
      cc:	08020000 	stxrb	w2, w0, [x0]
}
      d0:	00017c07 	.inst	0x00017c07 ; undefined
      d4:	05100200 	mov	z0.b, p0/z, #16
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d8:	00000146 	udf	#326
      dc:	00071002 	.inst	0x00071002 ; undefined
            retval = Uart_event_modem;
      e0:	02000001 	.inst	0x02000001 ; undefined
            break;
      e4:	01140601 	.inst	0x01140601 ; undefined
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	02020000 	.inst	0x02020000 ; undefined
      ec:	0001d405 	.inst	0x0001d405 ; undefined
      f0:	05040300 	.inst	0x05040300 ; undefined
        	retval =Uart_event_thre;
      f4:	00746e69 	.inst	0x00746e69 ; undefined
      f8:	12080102 	and	w2, w8, #0x1000000
        	break;
      fc:	02000001 	.inst	0x02000001 ; undefined
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	01330702 	.inst	0x01330702 ; undefined
     104:	04020000 	.inst	0x04020000 ; undefined
     108:	00018107 	.inst	0x00018107 ; undefined
        	retval = Uart_event_timeout;
     10c:	05080200 	.inst	0x05080200 ; undefined
     110:	000001c6 	udf	#454
        	break;
     114:	77070802 	.inst	0x77070802 ; undefined
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	02000001 	.inst	0x02000001 ; undefined
     11c:	011b0801 	.inst	0x011b0801 ; undefined
     120:	75040000 	.inst	0x75040000 ; undefined
        	retval = Received_data_available;
     124:	03003233 	.inst	0x03003233 ; undefined
     128:	00681634 	.inst	0x00681634 ; undefined
            break;
     12c:	4f050000 	.inst	0x4f050000 ; undefined
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	02000001 	.inst	0x02000001 ; undefined
     134:	00681510 	.inst	0x00681510 ; undefined
     138:	03090000 	.inst	0x03090000 ; undefined
        	retval = Receiver_line_status;
     13c:	610046d0 	.inst	0x610046d0 ; undefined
     140:	00000000 	udf	#0
            break;
     144:	00012006 	.inst	0x00012006 ; undefined
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	06400200 	.inst	0x06400200 ; undefined
     14c:	61000dac 	.inst	0x61000dac ; undefined
     150:	00000000 	udf	#0
        	retval = Uart_event_busy;
     154:	0000004c 	udf	#76
     158:	00000000 	udf	#0
            break;
     15c:	8e079c01 	.inst	0x8e079c01 ; undefined
            retval = 0;
     160:	02000001 	.inst	0x02000001 ; undefined
            break;
     164:	00680e32 	.inst	0x00680e32 ; undefined
    return retval;
     168:	0d940000 	st1	{v0.b}[0], [x0], x20
}
     16c:	00006100 	udf	#24832
     170:	00180000 	.inst	0x00180000 ; undefined
     174:	00000000 	udf	#0
     178:	9c010000 	ldr	q0, 2178 <__stack_size-0x1e88>
     17c:	000000f2 	udf	#242
     180:	0001a005 	.inst	0x0001a005 ; undefined
     184:	0f340200 	.inst	0x0f340200 ; undefined
     188:	00000068 	udf	#104
     18c:	007c9102 	.inst	0x007c9102 ; undefined
     190:	0001a507 	.inst	0x0001a507 ; undefined
     194:	05270200 	ext	z0.b, z0.b, z16.b, #56
     198:	00000053 	udf	#83
     19c:	61000d78 	.inst	0x61000d78 ; undefined
     1a0:	00000000 	udf	#0
     1a4:	0000001c 	udf	#28
     1a8:	00000000 	udf	#0
     1ac:	01249c01 	.inst	0x01249c01 ; undefined
     1b0:	76080000 	.inst	0x76080000 ; undefined
     1b4:	02006c61 	.inst	0x02006c61 ; undefined
     1b8:	00682627 	.inst	0x00682627 ; undefined
     1bc:	91020000 	add	x0, x0, #0x80
     1c0:	6209007c 	.inst	0x6209007c ; undefined
     1c4:	02000001 	.inst	0x02000001 ; undefined
     1c8:	00530c17 	.inst	0x00530c17 ; undefined
     1cc:	0d580000 	.inst	0x0d580000 ; undefined
     1d0:	00006100 	udf	#24832
     1d4:	00200000 	.inst	0x00200000 ; NYI
     1d8:	00000000 	udf	#0
     1dc:	9c010000 	ldr	q0, 21dc <__stack_size-0x1e24>
     1e0:	00000154 	udf	#340
     1e4:	0200760a 	.inst	0x0200760a ; undefined
     1e8:	00680f19 	.inst	0x00680f19 ; undefined
     1ec:	91020000 	add	x0, x0, #0x80
     1f0:	b90b007c 	str	w28, [x3, #2816]
     1f4:	01000001 	.inst	0x01000001 ; undefined
     1f8:	0d101d18 	.inst	0x0d101d18 ; undefined
     1fc:	00006100 	udf	#24832
     200:	00240000 	.inst	0x00240000 ; NYI
     204:	00000000 	udf	#0
     208:	9c010000 	ldr	q0, 2208 <__stack_size-0x1df8>
     20c:	00000191 	udf	#401
     210:	6c617608 	ldnp	d8, d29, [x16, #-496]
     214:	2e180100 	ext	v0.8b, v8.8b, v24.8b, #0
     218:	00000084 	udf	#132
     21c:	0c7c9102 	.inst	0x0c7c9102 ; undefined
     220:	000004ee 	udf	#1262
     224:	914a1801 	add	x1, x0, #0x286, lsl #12
     228:	02000001 	.inst	0x02000001 ; undefined
     22c:	0d007091 	st3	{v17.h-v19.h}[2], [x4]
     230:	00019708 	.inst	0x00019708 ; undefined
     234:	9b000e00 	madd	x0, x16, x0, x3
     238:	0400000a 	add	z10.b, p0/m, z10.b, z0.b
     23c:	00014900 	.inst	0x00014900 ; undefined
     240:	20010800 	.inst	0x20010800 ; undefined
     244:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
     248:	00000364 	udf	#868
     24c:	0000002f 	udf	#47
     250:	000000c0 	udf	#192
	...
     25c:	00000359 	udf	#857
     260:	cb050802 	sub	x2, x0, x5, lsl #2
     264:	02000001 	.inst	0x02000001 ; undefined
     268:	017c0708 	.inst	0x017c0708 ; undefined
     26c:	10020000 	adr	x0, 426c <__stack_size+0x26c>
     270:	00014605 	.inst	0x00014605 ; undefined
     274:	07100200 	.inst	0x07100200 ; undefined
     278:	00000100 	udf	#256
     27c:	14060102 	b	180684 <__stack_size+0x17c684>
     280:	02000001 	.inst	0x02000001 ; undefined
     284:	01d40502 	.inst	0x01d40502 ; undefined
     288:	04030000 	subr	z0.b, p0/m, z0.b, z0.b
     28c:	746e6905 	.inst	0x746e6905 ; undefined
     290:	08010200 	stxrb	w1, w0, [x16]
     294:	00000112 	udf	#274
     298:	33070202 	bfi	w2, w16, #25, #1
     29c:	02000001 	.inst	0x02000001 ; undefined
     2a0:	01810704 	.inst	0x01810704 ; undefined
     2a4:	08020000 	stxrb	w2, w0, [x0]
     2a8:	0001c605 	.inst	0x0001c605 ; undefined
     2ac:	07080200 	.inst	0x07080200 ; undefined
     2b0:	00000177 	udf	#375
     2b4:	1b080102 	madd	w2, w8, w8, w0
     2b8:	04000001 	add	z1.b, p0/m, z1.b, z0.b
     2bc:	00323375 	.inst	0x00323375 ; NYI
     2c0:	68163405 	.inst	0x68163405 ; undefined
     2c4:	05000000 	orr	z0.s, z0.s, #0x1
     2c8:	0000058e 	udf	#1422
     2cc:	68163605 	.inst	0x68163605 ; undefined
     2d0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
     2d4:	00343675 	.inst	0x00343675 ; NYI
     2d8:	761c3a05 	.inst	0x761c3a05 ; undefined
     2dc:	06000000 	.inst	0x06000000 ; undefined
     2e0:	000000b8 	udf	#184
     2e4:	000000b8 	udf	#184
     2e8:	00003007 	udf	#12295
     2ec:	0800ff00 	stlxrb	w0, w0, [x24]
     2f0:	0000be08 	udf	#48648
     2f4:	00c50900 	.inst	0x00c50900 ; undefined
     2f8:	000a0000 	.inst	0x000a0000 ; undefined
     2fc:	0005180b 	.inst	0x0005180b ; undefined
     300:	081f0400 	stxrb	wzr, w0, [x0]
     304:	000000a8 	udf	#168
     308:	46d80309 	.inst	0x46d80309 ; undefined
     30c:	00006100 	udf	#24832
     310:	7b0c0000 	.inst	0x7b0c0000 ; undefined
     314:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     318:	00530338 	.inst	0x00530338 ; undefined
     31c:	00ed0000 	.inst	0x00ed0000 ; undefined
     320:	000a0000 	.inst	0x000a0000 ; undefined
     324:	0005240d 	.inst	0x0005240d ; undefined
     328:	018d0400 	.inst	0x018d0400 ; undefined
     32c:	00005305 	udf	#21253
	...
     338:	0000d800 	udf	#55296
     33c:	00000000 	udf	#0
     340:	739c0100 	.inst	0x739c0100 ; undefined
     344:	0e000001 	tbl	v1.8b, {v0.16b}, v0.8b
     348:	000003ca 	udf	#970
     34c:	20018d04 	.inst	0x20018d04 ; undefined
     350:	00000053 	udf	#83
     354:	0e6c9102 	sqdmlal	v2.4s, v8.4h, v12.4h
     358:	00000532 	udf	#1330
     35c:	2c018d04 	stnp	s4, s3, [x8, #12]
     360:	00000053 	udf	#83
     364:	0f689102 	.inst	0x0f689102 ; undefined
     368:	000004ee 	udf	#1262
     36c:	11018f04 	add	w4, w24, #0x63
     370:	00000173 	udf	#371
     374:	10789102 	adr	x2, f1594 <__stack_size+0xed594>
     378:	00697270 	.inst	0x00697270 ; undefined
     37c:	06019004 	.inst	0x06019004 ; undefined
     380:	00000084 	udf	#132
     384:	11709102 	add	w2, w8, #0xc24, lsl #12
	...
     390:	00000020 	udf	#32
     394:	00000000 	udf	#0
     398:	725f5f10 	.inst	0x725f5f10 ; undefined
     39c:	019c0400 	.inst	0x019c0400 ; undefined
     3a0:	00008408 	udf	#33800
     3a4:	74910200 	.inst	0x74910200 ; undefined
     3a8:	08120000 	stxrb	w18, w0, [x0]
     3ac:	0004b613 	.inst	0x0004b613 ; undefined
     3b0:	01810400 	.inst	0x01810400 ; undefined
     3b4:	00000006 	udf	#6
     3b8:	00000000 	udf	#0
     3bc:	00000c00 	udf	#3072
     3c0:	00000000 	udf	#0
     3c4:	139c0100 	extr	w0, w8, w28, #0
     3c8:	00000499 	udf	#1177
     3cc:	06017804 	.inst	0x06017804 ; undefined
	...
     3d8:	0000000c 	udf	#12
     3dc:	00000000 	udf	#0
     3e0:	2b149c01 	.inst	0x2b149c01 ; undefined
     3e4:	04000003 	add	z3.b, p0/m, z3.b, z0.b
     3e8:	d8060159 	prfm	#0x19, c410 <__stack_size+0x8410>
     3ec:	00610016 	.inst	0x00610016 ; undefined
     3f0:	b4000000 	cbz	x0, 3f0 <__stack_size-0x3c10>
     3f4:	00000000 	udf	#0
     3f8:	01000000 	.inst	0x01000000 ; undefined
     3fc:	00020d9c 	.inst	0x00020d9c ; undefined
     400:	03ca0f00 	.inst	0x03ca0f00 ; undefined
     404:	5b040000 	.inst	0x5b040000 ; undefined
     408:	00840601 	.inst	0x00840601 ; undefined
     40c:	91020000 	add	x0, x0, #0x80
     410:	05ac0f7c 	uzp2	z28.q, z27.q, z12.q
     414:	68040000 	.inst	0x68040000 ; undefined
     418:	00b80901 	.inst	0x00b80901 ; undefined
     41c:	91020000 	add	x0, x0, #0x80
     420:	16f81170 	b	fffffffffbe049e0 <_sp+0xffffffff9adc49e0>
     424:	00006100 	udf	#24832
     428:	00140000 	.inst	0x00140000 ; undefined
     42c:	00000000 	udf	#0
     430:	5f100000 	.inst	0x5f100000 ; undefined
     434:	0400725f 	mls	z31.b, p4/m, z18.b, z0.b
     438:	840c0160 	ld1sb	{z0.s}, p0/z, [x11, z12.s, uxtw]
     43c:	02000000 	.inst	0x02000000 ; undefined
     440:	00007891 	udf	#30865
     444:	00044f14 	.inst	0x00044f14 ; undefined
     448:	01490400 	.inst	0x01490400 ; undefined
     44c:	00000006 	udf	#6
     450:	00000000 	udf	#0
     454:	00004c00 	udf	#19456
     458:	00000000 	udf	#0
     45c:	4d9c0100 	st1	{v0.b}[8], [x8], x28
     460:	0e000002 	tbl	v2.8b, {v0.16b}, v0.8b
     464:	000003ca 	udf	#970
     468:	1b014904 	madd	w4, w8, w1, w18
     46c:	00000053 	udf	#83
     470:	0f6c9102 	.inst	0x0f6c9102 ; undefined
     474:	000004ee 	udf	#1262
     478:	11014b04 	add	w4, w24, #0x52
     47c:	00000173 	udf	#371
     480:	00789102 	.inst	0x00789102 ; undefined
     484:	0003e014 	.inst	0x0003e014 ; undefined
     488:	01390400 	.inst	0x01390400 ; undefined
     48c:	00000006 	udf	#6
     490:	00000000 	udf	#0
     494:	00004c00 	udf	#19456
     498:	00000000 	udf	#0
     49c:	8d9c0100 	.inst	0x8d9c0100 ; undefined
     4a0:	0e000002 	tbl	v2.8b, {v0.16b}, v0.8b
     4a4:	000003ca 	udf	#970
     4a8:	1c013904 	ldr	s4, 2bc8 <__stack_size-0x1438>
     4ac:	00000053 	udf	#83
     4b0:	0f6c9102 	.inst	0x0f6c9102 ; undefined
     4b4:	000004ee 	udf	#1262
     4b8:	11013b04 	add	w4, w24, #0x4e
     4bc:	00000173 	udf	#371
     4c0:	00789102 	.inst	0x00789102 ; undefined
     4c4:	0003f215 	.inst	0x0003f215 ; undefined
     4c8:	012c0400 	.inst	0x012c0400 ; undefined
     4cc:	0000000d 	udf	#13
     4d0:	00000000 	udf	#0
     4d4:	00006400 	udf	#25600
     4d8:	00000000 	udf	#0
     4dc:	ed9c0100 	.inst	0xed9c0100 ; undefined
     4e0:	16000002 	b	fffffffff80004e8 <_sp+0xffffffff96fc04e8>
     4e4:	00717269 	.inst	0x00717269 ; undefined
     4e8:	1f012c04 	fmadd	s4, s0, s1, s11
     4ec:	00000053 	udf	#83
     4f0:	0e6c9102 	sqdmlal	v2.4s, v8.4h, v12.4h
     4f4:	000004ea 	udf	#1258
     4f8:	33012c04 	bfxil	w4, w0, #1, #11
     4fc:	00000173 	udf	#371
     500:	0f609102 	.inst	0x0f609102 ; undefined
     504:	00001767 	udf	#5991
     508:	06012e04 	.inst	0x06012e04 ; undefined
     50c:	00000084 	udf	#132
     510:	0f7c9102 	.inst	0x0f7c9102 ; undefined
     514:	000004ee 	udf	#1262
     518:	11012f04 	add	w4, w24, #0x4b
     51c:	00000173 	udf	#371
     520:	00709102 	.inst	0x00709102 ; undefined
     524:	00044417 	.inst	0x00044417 ; undefined
     528:	01220400 	.inst	0x01220400 ; undefined
     52c:	0016b006 	.inst	0x0016b006 ; undefined
     530:	00000061 	udf	#97
     534:	00002800 	udf	#10240
     538:	00000000 	udf	#0
     53c:	159c0100 	b	670093c <__stack_size+0x66fc93c>
     540:	00000400 	udf	#1024
     544:	0d011104 	.inst	0x0d011104 ; undefined
     548:	61001678 	.inst	0x61001678 ; undefined
     54c:	00000000 	udf	#0
     550:	00000038 	udf	#56
     554:	00000000 	udf	#0
     558:	03409c01 	.inst	0x03409c01 ; undefined
     55c:	69180000 	stgp	x0, x0, [x0, #768]
     560:	01130400 	.inst	0x01130400 ; undefined
     564:	00005306 	udf	#21254
     568:	04ae1900 	sqsub	z0.s, z8.s, z14.s
     56c:	14040000 	b	10056c <__stack_size+0xfc56c>
     570:	00840601 	.inst	0x00840601 ; undefined
     574:	1a000000 	adc	w0, w0, w0
     578:	00000339 	udf	#825
     57c:	0d010704 	.inst	0x0d010704 ; undefined
     580:	61001638 	.inst	0x61001638 ; undefined
     584:	00000000 	udf	#0
     588:	00000040 	udf	#64
     58c:	00000000 	udf	#0
     590:	671b9c01 	.inst	0x671b9c01 ; undefined
     594:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     598:	15ec0df6 	b	7b03d70 <__stack_size+0x7affd70>
     59c:	00006100 	udf	#24832
     5a0:	004c0000 	.inst	0x004c0000 ; undefined
     5a4:	00000000 	udf	#0
     5a8:	9c010000 	ldr	q0, 25a8 <__stack_size-0x1a58>
     5ac:	000003c0 	udf	#960
     5b0:	0015f41c 	.inst	0x0015f41c ; undefined
     5b4:	00000061 	udf	#97
     5b8:	00000c00 	udf	#3072
     5bc:	00000000 	udf	#0
     5c0:	00039e00 	.inst	0x00039e00 ; undefined
     5c4:	05121d00 	mov	z0.b, p2/z, #-24
     5c8:	f9040000 	str	x0, [x0, #2048]
     5cc:	00009c02 	udf	#39938
     5d0:	78910200 	ldursh	x0, [x16, #-240]
     5d4:	16001100 	b	fffffffff80049d4 <_sp+0xffffffff96fc49d4>
     5d8:	00006100 	udf	#24832
     5dc:	00100000 	.inst	0x00100000 ; undefined
     5e0:	00000000 	udf	#0
     5e4:	121d0000 	and	w0, w0, #0x8
     5e8:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     5ec:	009c02fb 	.inst	0x009c02fb ; undefined
     5f0:	91020000 	add	x0, x0, #0x80
     5f4:	1e000070 	.inst	0x1e000070 ; undefined
     5f8:	000004a6 	udf	#1190
     5fc:	840cea04 	prfb	pldl3keep, p2, [z16.s, #12]
	...
     608:	40000000 	.inst	0x40000000 ; undefined
     60c:	00000000 	udf	#0
     610:	01000000 	.inst	0x01000000 ; undefined
     614:	0003f29c 	.inst	0x0003f29c ; undefined
     618:	04ae1d00 	uqsub	z0.s, z8.s, z14.s
     61c:	ec040000 	.inst	0xec040000 ; undefined
     620:	00008406 	udf	#33798
     624:	7c910200 	.inst	0x7c910200 ; undefined
     628:	03a91e00 	.inst	0x03a91e00 ; undefined
     62c:	dc040000 	.inst	0xdc040000 ; undefined
     630:	0004240d 	.inst	0x0004240d ; undefined
     634:	00158c00 	.inst	0x00158c00 ; undefined
     638:	00000061 	udf	#97
     63c:	00006000 	udf	#24576
     640:	00000000 	udf	#0
     644:	249c0100 	cmphs	p0.s, p0/z, z8.s, z28.s
     648:	1f000004 	fmadd	s4, s0, s0, s0
     64c:	006c6176 	.inst	0x006c6176 ; undefined
     650:	8406de04 	prfb	pldl3keep, p7, [x16, x6]
     654:	02000000 	.inst	0x02000000 ; undefined
     658:	02007c91 	.inst	0x02007c91 ; undefined
     65c:	054d0201 	.inst	0x054d0201 ; undefined
     660:	3b1b0000 	.inst	0x3b1b0000 ; undefined
     664:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     668:	147c0db6 	b	1f03d40 <__stack_size+0x1effd40>
     66c:	00006100 	udf	#24832
     670:	01100000 	.inst	0x01100000 ; undefined
     674:	00000000 	udf	#0
     678:	9c010000 	ldr	q0, 2678 <__stack_size-0x1988>
     67c:	00000474 	udf	#1140
     680:	0004e020 	.inst	0x0004e020 ; undefined
     684:	23b60400 	.inst	0x23b60400 ; undefined
     688:	00000084 	udf	#132
     68c:	1f6c9102 	fnmsub	d2, d8, d12, d4
     690:	b8040069 	stur	w9, [x3, #64]
     694:	00008406 	udf	#33798
     698:	7c910200 	.inst	0x7c910200 ; undefined
     69c:	00726e1f 	.inst	0x00726e1f ; undefined
     6a0:	8406b904 	ldnt1b	{z4.s}, p6/z, [z8.s, x6]
     6a4:	02000000 	.inst	0x02000000 ; undefined
     6a8:	1b007891 	madd	w17, w4, w0, w30
     6ac:	000003b8 	udf	#952
     6b0:	600d9704 	.inst	0x600d9704 ; undefined
     6b4:	00610013 	.inst	0x00610013 ; undefined
     6b8:	1c000000 	ldr	s0, 6b8 <__stack_size-0x3948>
     6bc:	00000001 	udf	#1
     6c0:	01000000 	.inst	0x01000000 ; undefined
     6c4:	0005439c 	.inst	0x0005439c ; undefined
     6c8:	11082000 	add	w0, w0, #0x208
     6cc:	97040000 	bl	fffffffffc1006cc <_sp+0xffffffff9b0c06cc>
     6d0:	00042424 	.inst	0x00042424 ; undefined
     6d4:	5f910200 	.inst	0x5f910200 ; undefined
     6d8:	0006751d 	.inst	0x0006751d ; undefined
     6dc:	06990400 	.inst	0x06990400 ; undefined
     6e0:	00000084 	udf	#132
     6e4:	1f7c9102 	fnmsub	d2, d8, d28, d4
     6e8:	006c6176 	.inst	0x006c6176 ; undefined
     6ec:	84069a04 	ldnt1sb	{z4.s}, p6/z, [z16.s, x6]
     6f0:	02000000 	.inst	0x02000000 ; undefined
     6f4:	781c7891 	sttrh	w17, [x4, #-57]
     6f8:	00610013 	.inst	0x00610013 ; undefined
     6fc:	14000000 	b	6fc <__stack_size-0x3904>
     700:	00000000 	udf	#0
     704:	e4000000 	.inst	0xe4000000 ; undefined
     708:	1f000004 	fmadd	s4, s0, s0, s0
     70c:	00725f5f 	.inst	0x00725f5f ; undefined
     710:	84089c04 	ldnt1sb	{z4.s}, p7/z, [z0.s, x8]
     714:	02000000 	.inst	0x02000000 ; undefined
     718:	1c007491 	ldr	s17, 15a8 <__stack_size-0x2a58>
     71c:	610013dc 	.inst	0x610013dc ; undefined
     720:	00000000 	udf	#0
     724:	00000014 	udf	#20
     728:	00000000 	udf	#0
     72c:	00000509 	udf	#1289
     730:	725f5f1f 	.inst	0x725f5f1f ; undefined
     734:	09a50400 	.inst	0x09a50400 ; undefined
     738:	00000084 	udf	#132
     73c:	00709102 	.inst	0x00709102 ; undefined
     740:	00009021 	udf	#36897
     744:	047b0c00 	.inst	0x047b0c00 ; undefined
     748:	38040000 	sturb	w0, [x0, #64]
     74c:	00005303 	udf	#21251
     750:	00052000 	.inst	0x00052000 ; undefined
     754:	11000a00 	add	w0, w16, #0x2
     758:	61001408 	.inst	0x61001408 ; undefined
     75c:	00000000 	udf	#0
     760:	00000014 	udf	#20
     764:	00000000 	udf	#0
     768:	725f5f1f 	.inst	0x725f5f1f ; undefined
     76c:	09ab0400 	.inst	0x09ab0400 ; undefined
     770:	00000084 	udf	#132
     774:	006c9102 	.inst	0x006c9102 ; undefined
     778:	341b0000 	cbz	w0, 36778 <__stack_size+0x32778>
     77c:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     780:	102c0d51 	adr	x17, 58928 <__stack_size+0x54928>
     784:	00006100 	udf	#24832
     788:	03340000 	.inst	0x03340000 ; undefined
     78c:	00000000 	udf	#0
     790:	9c010000 	ldr	q0, 2790 <__stack_size-0x1870>
     794:	000005e7 	udf	#1511
     798:	0004e020 	.inst	0x0004e020 ; undefined
     79c:	21510400 	.inst	0x21510400 ; undefined
     7a0:	00000084 	udf	#132
     7a4:	1f5c9102 	fmsub	d2, d8, d28, d4
     7a8:	53040069 	ubfiz	w9, w3, #28, #1
     7ac:	00008406 	udf	#33798
     7b0:	7c910200 	.inst	0x7c910200 ; undefined
     7b4:	00057e1d 	.inst	0x00057e1d ; undefined
     7b8:	06540400 	.inst	0x06540400 ; undefined
     7bc:	00000084 	udf	#132
     7c0:	22709102 	.inst	0x22709102 ; undefined
     7c4:	00000501 	udf	#1281
     7c8:	84175404 	ld1b	{z4.s}, p5/z, [x0, z23.s, uxtw]
     7cc:	1d000000 	.inst	0x1d000000 ; undefined
     7d0:	00000415 	udf	#1045
     7d4:	84215404 	prfw	pldl3keep, p5, [x0, z1.s, uxtw #2]
     7d8:	02000000 	.inst	0x02000000 ; undefined
     7dc:	b31d6c91 	.inst	0xb31d6c91 ; undefined
     7e0:	04000005 	add	z5.b, p0/m, z5.b, z0.b
     7e4:	00840655 	.inst	0x00840655 ; undefined
     7e8:	91020000 	add	x0, x0, #0x80
     7ec:	042b1d74 	uqsub	z20.b, z11.b, z11.b
     7f0:	56040000 	.inst	0x56040000 ; undefined
     7f4:	00009c06 	udf	#39942
     7f8:	60910200 	.inst	0x60910200 ; undefined
     7fc:	00104811 	.inst	0x00104811 ; undefined
     800:	00000061 	udf	#97
     804:	00001400 	udf	#5120
     808:	00000000 	udf	#0
     80c:	5f5f1f00 	.inst	0x5f5f1f00 ; undefined
     810:	5c040072 	ldr	d18, 881c <__stack_size+0x481c>
     814:	0000840f 	udf	#33807
     818:	78910200 	ldursh	x0, [x16, #-240]
     81c:	1e230000 	ucvtf	s0, w0
     820:	04000004 	add	z4.b, p0/m, z4.b, z0.b
     824:	009c0c46 	.inst	0x009c0c46 ; undefined
     828:	10040000 	adr	x0, 8828 <__stack_size+0x4828>
     82c:	00006100 	udf	#24832
     830:	00280000 	.inst	0x00280000 ; NYI
     834:	00000000 	udf	#0
     838:	9c010000 	ldr	q0, 2838 <__stack_size-0x17c8>
     83c:	00000628 	udf	#1576
     840:	00040f20 	.inst	0x00040f20 ; undefined
     844:	30460400 	adr	x0, 8c8c5 <__stack_size+0x888c5>
     848:	00000030 	udf	#48
     84c:	1f689102 	fnmsub	d2, d8, d8, d4
     850:	00666661 	.inst	0x00666661 ; undefined
     854:	9c064804 	ldr	q4, d154 <__stack_size+0x9154>
     858:	02000000 	.inst	0x02000000 ; undefined
     85c:	24007891 	cmple	p1.b, p6/z, z4.b, z0.d
     860:	00000399 	udf	#921
     864:	e80d4104 	.inst	0xe80d4104 ; undefined
     868:	0061000f 	.inst	0x0061000f ; undefined
     86c:	1c000000 	ldr	s0, 86c <__stack_size-0x3794>
     870:	00000000 	udf	#0
     874:	01000000 	.inst	0x01000000 ; undefined
     878:	02fb249c 	.inst	0x02fb249c ; undefined
     87c:	3c040000 	stur	b0, [x0, #64]
     880:	000fcc0d 	.inst	0x000fcc0d ; undefined
     884:	00000061 	udf	#97
     888:	00001c00 	udf	#7168
     88c:	00000000 	udf	#0
     890:	1b9c0100 	.inst	0x1b9c0100 ; undefined
     894:	00000485 	udf	#1157
     898:	480d2d04 	stxrh	w13, w4, [x8]
     89c:	0061000f 	.inst	0x0061000f ; undefined
     8a0:	84000000 	ld1sb	{z0.s}, p0/z, [x0, z0.s, uxtw]
     8a4:	00000000 	udf	#0
     8a8:	01000000 	.inst	0x01000000 ; undefined
     8ac:	0007189c 	.inst	0x0007189c ; undefined
     8b0:	05a32000 	mov	z0.b, z0.b[33]
     8b4:	2d040000 	stp	s0, s0, [x0, #32]
     8b8:	0001732f 	.inst	0x0001732f ; undefined
     8bc:	58910200 	ldr	x0, fffffffffff228fc <_sp+0xffffffff9eee28fc>
     8c0:	0006751d 	.inst	0x0006751d ; undefined
     8c4:	082f0400 	.inst	0x082f0400 ; undefined
     8c8:	00000090 	udf	#144
     8cc:	257c9102 	.inst	0x257c9102 ; undefined
     8d0:	00000060 	udf	#96
     8d4:	000006b0 	udf	#1712
     8d8:	00047b26 	.inst	0x00047b26 ; undefined
     8dc:	03380400 	.inst	0x03380400 ; undefined
     8e0:	00000053 	udf	#83
     8e4:	1100000a 	add	w10, w0, #0x0
     8e8:	61000f88 	.inst	0x61000f88 ; undefined
     8ec:	00000000 	udf	#0
     8f0:	0000002c 	udf	#44
     8f4:	00000000 	udf	#0
     8f8:	765f5f1f 	.inst	0x765f5f1f ; undefined
     8fc:	09310400 	.inst	0x09310400 ; undefined
     900:	00000084 	udf	#132
     904:	1c749102 	ldr	s2, e9b24 <__stack_size+0xe5b24>
     908:	61000f88 	.inst	0x61000f88 ; undefined
     90c:	00000000 	udf	#0
     910:	00000010 	udf	#16
     914:	00000000 	udf	#0
     918:	000006f5 	udf	#1781
     91c:	725f5f1f 	.inst	0x725f5f1f ; undefined
     920:	09310400 	.inst	0x09310400 ; undefined
     924:	00000084 	udf	#132
     928:	00789102 	.inst	0x00789102 ; undefined
     92c:	000f9c11 	.inst	0x000f9c11 ; undefined
     930:	00000061 	udf	#97
     934:	00001400 	udf	#5120
     938:	00000000 	udf	#0
     93c:	6d741f00 	ldp	d0, d7, [x24, #-192]
     940:	31040070 	adds	w16, w3, #0x100
     944:	00003009 	udf	#12297
     948:	68910200 	stgp	x0, x0, [x16], #544
     94c:	27000000 	.inst	0x27000000 ; undefined
     950:	00000309 	udf	#777
     954:	00062104 	.inst	0x00062104 ; undefined
     958:	00000000 	udf	#0
     95c:	48000000 	stxrh	w0, w0, [x0]
     960:	00000000 	udf	#0
     964:	01000000 	.inst	0x01000000 ; undefined
     968:	0007559c 	.inst	0x0007559c ; undefined
     96c:	03ca2000 	.inst	0x03ca2000 ; undefined
     970:	21040000 	.inst	0x21040000 ; undefined
     974:	00008416 	udf	#33814
     978:	7c910200 	.inst	0x7c910200 ; undefined
     97c:	00051c20 	.inst	0x00051c20 ; undefined
     980:	24210400 	cmphs	p0.b, p1/z, z0.b, #4
     984:	00000173 	udf	#371
     988:	00709102 	.inst	0x00709102 ; undefined
     98c:	00032128 	.inst	0x00032128 ; undefined
     990:	14060300 	b	181590 <__stack_size+0x17d590>
     994:	61000f3c 	.inst	0x61000f3c ; undefined
     998:	00000000 	udf	#0
     99c:	0000000c 	udf	#12
     9a0:	00000000 	udf	#0
     9a4:	15239c01 	b	48e79a8 <__stack_size+0x48e39a8>
     9a8:	02000003 	.inst	0x02000003 ; undefined
     9ac:	00841c38 	.inst	0x00841c38 ; undefined
     9b0:	0f1c0000 	.inst	0x0f1c0000 ; undefined
     9b4:	00006100 	udf	#24832
     9b8:	00200000 	.inst	0x00200000 ; NYI
     9bc:	00000000 	udf	#0
     9c0:	9c010000 	ldr	q0, 29c0 <__stack_size-0x1640>
     9c4:	000007b0 	udf	#1968
     9c8:	0004ee20 	.inst	0x0004ee20 ; undefined
     9cc:	45380200 	sqshrunb	z0.h, z16.s, #8
     9d0:	000007b0 	udf	#1968
     9d4:	1f689102 	fnmsub	d2, d8, d8, d4
     9d8:	006c6176 	.inst	0x006c6176 ; undefined
     9dc:	84063a02 	ldff1sb	{z2.s}, p6/z, [x16, z6.s, uxtw]
     9e0:	02000000 	.inst	0x02000000 ; undefined
     9e4:	08007c91 	stxrb	w0, w17, [x4]
     9e8:	0007b708 	.inst	0x0007b708 ; undefined
     9ec:	b62a2900 	tbz	x0, #37, 4f0c <__stack_size+0xf0c>
     9f0:	2b000007 	adds	w7, w0, w0
     9f4:	000004c4 	udf	#1220
     9f8:	f8141e02 	str	x2, [x16, #-191]!
     9fc:	0061000e 	.inst	0x0061000e ; undefined
     a00:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
     a04:	00000000 	udf	#0
     a08:	01000000 	.inst	0x01000000 ; undefined
     a0c:	0007f99c 	.inst	0x0007f99c ; undefined
     a10:	61762c00 	.inst	0x61762c00 ; undefined
     a14:	1e02006c 	.inst	0x1e02006c ; undefined
     a18:	00009c25 	udf	#39973
     a1c:	78910200 	ldursh	x0, [x16, #-240]
     a20:	0004ee20 	.inst	0x0004ee20 ; undefined
     a24:	411e0200 	.inst	0x411e0200 ; undefined
     a28:	000007f9 	udf	#2041
     a2c:	00709102 	.inst	0x00709102 ; undefined
     a30:	07b60808 	.inst	0x07b60808 ; undefined
     a34:	b92b0000 	str	w0, [x0, #11008]
     a38:	02000001 	.inst	0x02000001 ; undefined
     a3c:	0d341d18 	.inst	0x0d341d18 ; undefined
     a40:	00006100 	udf	#24832
     a44:	00240000 	.inst	0x00240000 ; NYI
     a48:	00000000 	udf	#0
     a4c:	9c010000 	ldr	q0, 2a4c <__stack_size-0x15b4>
     a50:	0000083c 	udf	#2108
     a54:	6c61762c 	ldnp	d12, d29, [x17, #-496]
     a58:	2e180200 	ext	v0.8b, v16.8b, v24.8b, #0
     a5c:	00000084 	udf	#132
     a60:	207c9102 	.inst	0x207c9102 ; undefined
     a64:	000004ee 	udf	#1262
     a68:	f94a1802 	ldr	x2, [x0, #5168]
     a6c:	02000007 	.inst	0x02000007 ; undefined
     a70:	2b007091 	adds	w17, w4, w0, lsl #28
     a74:	000003d1 	udf	#977
     a78:	d4145f01 	svc	#0xa2f8
     a7c:	0061000e 	.inst	0x0061000e ; undefined
     a80:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
     a84:	00000000 	udf	#0
     a88:	01000000 	.inst	0x01000000 ; undefined
     a8c:	00088b9c 	.inst	0x00088b9c ; undefined
     a90:	61762c00 	.inst	0x61762c00 ; undefined
     a94:	5f01006c 	.inst	0x5f01006c ; undefined
     a98:	00008427 	udf	#33831
     a9c:	6c910200 	stp	d0, d0, [x16], #272
     aa0:	000edc11 	.inst	0x000edc11 ; undefined
     aa4:	00000061 	udf	#97
     aa8:	00001000 	udf	#4096
     aac:	00000000 	udf	#0
     ab0:	05121d00 	mov	z0.b, p2/z, #-24
     ab4:	61010000 	.inst	0x61010000 ; undefined
     ab8:	00009c02 	udf	#39938
     abc:	78910200 	ldursh	x0, [x16, #-240]
     ac0:	f32b0000 	.inst	0xf32b0000 ; undefined
     ac4:	01000004 	.inst	0x01000004 ; undefined
     ac8:	0eac1459 	srhadd	v25.2s, v2.2s, v12.2s
     acc:	00006100 	udf	#24832
     ad0:	00280000 	.inst	0x00280000 ; NYI
     ad4:	00000000 	udf	#0
     ad8:	9c010000 	ldr	q0, 2ad8 <__stack_size-0x1528>
     adc:	000008da 	udf	#2266
     ae0:	6c61762c 	ldnp	d12, d29, [x17, #-496]
     ae4:	26590100 	.inst	0x26590100 ; undefined
     ae8:	00000084 	udf	#132
     aec:	116c9102 	add	w2, w8, #0xb24, lsl #12
     af0:	61000eb4 	.inst	0x61000eb4 ; undefined
     af4:	00000000 	udf	#0
     af8:	00000010 	udf	#16
     afc:	00000000 	udf	#0
     b00:	0005121d 	.inst	0x0005121d ; undefined
     b04:	025b0100 	.inst	0x025b0100 ; undefined
     b08:	0000009c 	udf	#156
     b0c:	00789102 	.inst	0x00789102 ; undefined
     b10:	04602300 	.inst	0x04602300 ; undefined
     b14:	54010000 	b.eq	2b14 <__stack_size-0x14ec>  // b.none
     b18:	00008413 	udf	#33811
     b1c:	000e9400 	.inst	0x000e9400 ; undefined
     b20:	00000061 	udf	#97
     b24:	00001800 	udf	#6144
     b28:	00000000 	udf	#0
     b2c:	1e9c0100 	.inst	0x1e9c0100 ; undefined
     b30:	11000009 	add	w9, w0, #0x0
     b34:	61000e98 	.inst	0x61000e98 ; undefined
     b38:	00000000 	udf	#0
     b3c:	0000000c 	udf	#12
     b40:	00000000 	udf	#0
     b44:	0005121d 	.inst	0x0005121d ; undefined
     b48:	09560100 	.inst	0x09560100 ; undefined
     b4c:	0000009c 	udf	#156
     b50:	00789102 	.inst	0x00789102 ; undefined
     b54:	03532b00 	.inst	0x03532b00 ; undefined
     b58:	49010000 	.inst	0x49010000 ; undefined
     b5c:	000e6c14 	.inst	0x000e6c14 ; undefined
     b60:	00000061 	udf	#97
     b64:	00002800 	udf	#10240
     b68:	00000000 	udf	#0
     b6c:	6d9c0100 	stp	d0, d0, [x8, #448]!
     b70:	2c000009 	stnp	s9, s0, [x0]
     b74:	006c6176 	.inst	0x006c6176 ; undefined
     b78:	84294901 	prfw	pldl1strm, p2, [x8, z9.s, uxtw #2]
     b7c:	02000000 	.inst	0x02000000 ; undefined
     b80:	74116c91 	.inst	0x74116c91 ; undefined
     b84:	0061000e 	.inst	0x0061000e ; undefined
     b88:	10000000 	adr	x0, b88 <__stack_size-0x3478>
     b8c:	00000000 	udf	#0
     b90:	1d000000 	.inst	0x1d000000 ; undefined
     b94:	00000512 	udf	#1298
     b98:	9c024b01 	ldr	q1, 54f8 <__stack_size+0x14f8>
     b9c:	02000000 	.inst	0x02000000 ; undefined
     ba0:	00007891 	udf	#30865
     ba4:	00046d23 	.inst	0x00046d23 ; undefined
     ba8:	13440100 	.inst	0x13440100 ; undefined
     bac:	00000084 	udf	#132
	...
     bb8:	00000018 	udf	#24
     bbc:	00000000 	udf	#0
     bc0:	09b19c01 	.inst	0x09b19c01 ; undefined
     bc4:	00110000 	.inst	0x00110000 ; undefined
     bc8:	00000000 	udf	#0
     bcc:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
     bd0:	00000000 	udf	#0
     bd4:	1d000000 	.inst	0x1d000000 ; undefined
     bd8:	00000512 	udf	#1298
     bdc:	9c094601 	ldr	q1, 1349c <__stack_size+0xf49c>
     be0:	02000000 	.inst	0x02000000 ; undefined
     be4:	00007891 	udf	#30865
     be8:	0005942b 	.inst	0x0005942b ; undefined
     bec:	143e0100 	b	f80fec <__stack_size+0xf7cfec>
     bf0:	61000e44 	.inst	0x61000e44 ; undefined
     bf4:	00000000 	udf	#0
     bf8:	00000028 	udf	#40
     bfc:	00000000 	udf	#0
     c00:	0a009c01 	.inst	0x0a009c01 ; undefined
     c04:	762c0000 	.inst	0x762c0000 ; undefined
     c08:	01006c61 	.inst	0x01006c61 ; undefined
     c0c:	0084273e 	.inst	0x0084273e ; undefined
     c10:	91020000 	add	x0, x0, #0x80
     c14:	0e4c116c 	.inst	0x0e4c116c ; undefined
     c18:	00006100 	udf	#24832
     c1c:	00100000 	.inst	0x00100000 ; undefined
     c20:	00000000 	udf	#0
     c24:	121d0000 	and	w0, w0, #0x8
     c28:	01000005 	.inst	0x01000005 ; undefined
     c2c:	009c0240 	.inst	0x009c0240 ; undefined
     c30:	91020000 	add	x0, x0, #0x80
     c34:	23000078 	.inst	0x23000078 ; undefined
     c38:	00000553 	udf	#1363
     c3c:	9c132201 	ldr	q1, 2707c <__stack_size+0x2307c>
     c40:	20000000 	.inst	0x20000000 ; undefined
     c44:	0061000e 	.inst	0x0061000e ; undefined
     c48:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
     c4c:	00000000 	udf	#0
     c50:	01000000 	.inst	0x01000000 ; undefined
     c54:	000a539c 	.inst	0x000a539c ; undefined
     c58:	050a1d00 	.inst	0x050a1d00 ; undefined
     c5c:	24010000 	cmphs	p0.b, p0/z, z0.b, z1.b
     c60:	00009c06 	udf	#39942
     c64:	70910200 	adr	x0, fffffffffff22ca7 <_sp+0xffffffff9eee2ca7>
     c68:	000e2411 	.inst	0x000e2411 ; undefined
     c6c:	00000061 	udf	#97
     c70:	00000c00 	udf	#3072
     c74:	00000000 	udf	#0
     c78:	05121d00 	mov	z0.b, p2/z, #-24
     c7c:	26010000 	.inst	0x26010000 ; undefined
     c80:	00009c0c 	udf	#39948
     c84:	78910200 	ldursh	x0, [x16, #-240]
     c88:	d12d0000 	sub	x0, x0, #0xb40
     c8c:	01000004 	.inst	0x01000004 ; undefined
     c90:	0df81416 	ld2	{v22.b, v23.b}[5], [x0], x24
     c94:	00006100 	udf	#24832
     c98:	00280000 	.inst	0x00280000 ; NYI
     c9c:	00000000 	udf	#0
     ca0:	9c010000 	ldr	q0, 2ca0 <__stack_size-0x1360>
     ca4:	7172692c 	subs	w12, w9, #0xc9a, lsl #12
     ca8:	27160100 	.inst	0x27160100 ; undefined
     cac:	00000084 	udf	#132
     cb0:	116c9102 	add	w2, w8, #0xb24, lsl #12
     cb4:	61000e00 	.inst	0x61000e00 ; undefined
     cb8:	00000000 	udf	#0
     cbc:	00000010 	udf	#16
     cc0:	00000000 	udf	#0
     cc4:	0005121d 	.inst	0x0005121d ; undefined
     cc8:	02180100 	.inst	0x02180100 ; undefined
     ccc:	0000009c 	udf	#156
     cd0:	00789102 	.inst	0x00789102 ; undefined
     cd4:	00b70000 	.inst	0x00b70000 ; undefined
     cd8:	00040000 	.inst	0x00040000 ; undefined
     cdc:	0000044f 	udf	#1103
     ce0:	02200108 	.inst	0x02200108 ; undefined
     ce4:	c30c0000 	.inst	0xc30c0000 ; undefined
     ce8:	2f000005 	.inst	0x2f000005 ; undefined
     cec:	e0000000 	.inst	0xe0000000 ; undefined
     cf0:	00000002 	udf	#2
     cf4:	00000000 	udf	#0
     cf8:	34000000 	cbz	w0, cf8 <__stack_size-0x3308>
     cfc:	0200000a 	.inst	0x0200000a ; undefined
     d00:	017c0708 	.inst	0x017c0708 ; undefined
     d04:	08020000 	stxrb	w2, w0, [x0]
     d08:	0001cb05 	.inst	0x0001cb05 ; undefined
     d0c:	06900300 	.inst	0x06900300 ; undefined
     d10:	14020000 	b	80d10 <__stack_size+0x7cd10>
     d14:	00004e05 	udf	#19973
     d18:	00004e00 	udf	#19968
     d1c:	00550400 	.inst	0x00550400 ; undefined
     d20:	00050000 	.inst	0x00050000 ; undefined
     d24:	69050406 	stgp	x6, x1, [x0, #160]
     d28:	0700746e 	.inst	0x0700746e ; undefined
     d2c:	00006208 	udf	#25096
     d30:	08010200 	stxrb	w1, w0, [x16]
     d34:	0000011b 	udf	#283
     d38:	00005b08 	udf	#23304
     d3c:	05fb0900 	.inst	0x05fb0900 ; undefined
     d40:	0b010000 	add	w0, w0, w1
     d44:	00178c25 	.inst	0x00178c25 ; undefined
     d48:	00000061 	udf	#97
     d4c:	00003000 	udf	#12288
     d50:	00000000 	udf	#0
     d54:	b39c0100 	.inst	0xb39c0100 ; undefined
     d58:	0a000000 	and	w0, w0, w0
     d5c:	000005be 	udf	#1470
     d60:	553a0b01 	.inst	0x553a0b01 ; undefined
     d64:	02000000 	.inst	0x02000000 ; undefined
     d68:	040a7891 	mls	z17.b, p6/m, z4.b, z10.b
     d6c:	01000006 	.inst	0x01000006 ; undefined
     d70:	00b34d0b 	.inst	0x00b34d0b ; undefined
     d74:	91020000 	add	x0, x0, #0x80
     d78:	05f10a74 	.inst	0x05f10a74 ; undefined
     d7c:	0c010000 	.inst	0x0c010000 ; undefined
     d80:	00005515 	udf	#21781
     d84:	68910200 	stgp	x0, x0, [x16], #544
     d88:	07040200 	.inst	0x07040200 ; undefined
     d8c:	00000181 	udf	#385
     d90:	00013500 	.inst	0x00013500 ; undefined
     d94:	dc000400 	.inst	0xdc000400 ; undefined
     d98:	08000004 	stxrb	w0, w4, [x0]
     d9c:	00022001 	.inst	0x00022001 ; undefined
     da0:	06230c00 	.inst	0x06230c00 ; undefined
     da4:	002f0000 	.inst	0x002f0000 ; NYI
     da8:	03000000 	.inst	0x03000000 ; undefined
	...
     db4:	0ad30000 	and	w0, w0, w19, ror #0
     db8:	09020000 	.inst	0x09020000 ; undefined
     dbc:	02000006 	.inst	0x02000006 ; undefined
     dc0:	0035170b 	.inst	0x0035170b ; NYI
     dc4:	08030000 	stxrb	w3, w0, [x0]
     dc8:	00017c07 	.inst	0x00017c07 ; undefined
     dcc:	05080300 	.inst	0x05080300 ; undefined
     dd0:	000001cb 	udf	#459
     dd4:	00061a02 	.inst	0x00061a02 ; undefined
     dd8:	17160300 	b	fffffffffc5819d8 <_sp+0xffffffff9b5419d8>
     ddc:	00000035 	udf	#53
     de0:	46051003 	.inst	0x46051003 ; undefined
     de4:	03000001 	.inst	0x03000001 ; undefined
     de8:	01000710 	.inst	0x01000710 ; undefined
     dec:	01030000 	.inst	0x01030000 ; undefined
     df0:	00011406 	.inst	0x00011406 ; undefined
     df4:	05020300 	orr	z0.d, z0.d, #0x1ffffff
     df8:	000001d4 	udf	#468
     dfc:	69050404 	stgp	x4, x1, [x0, #160]
     e00:	0200746e 	.inst	0x0200746e ; undefined
     e04:	00000663 	udf	#1635
     e08:	7e175904 	.inst	0x7e175904 ; undefined
     e0c:	03000000 	.inst	0x03000000 ; undefined
     e10:	01120801 	.inst	0x01120801 ; undefined
     e14:	02030000 	.inst	0x02030000 ; undefined
     e18:	00013307 	.inst	0x00013307 ; undefined
     e1c:	07040300 	.inst	0x07040300 ; undefined
     e20:	00000181 	udf	#385
     e24:	00061002 	.inst	0x00061002 ; undefined
     e28:	176e0400 	b	fffffffffdb81e28 <_sp+0xffffffff9cb41e28>
     e2c:	00000035 	udf	#53
     e30:	c6050803 	.inst	0xc6050803 ; undefined
     e34:	03000001 	.inst	0x03000001 ; undefined
     e38:	01770708 	.inst	0x01770708 ; undefined
     e3c:	5c050000 	ldr	d0, ae3c <__stack_size+0x6e3c>
     e40:	01000006 	.inst	0x01000006 ; undefined
     e44:	012a070b 	.inst	0x012a070b ; undefined
     e48:	17bc0000 	b	fffffffffef00e48 <_sp+0xffffffff9dec0e48>
     e4c:	00006100 	udf	#24832
     e50:	01480000 	.inst	0x01480000 ; undefined
     e54:	00000000 	udf	#0
     e58:	9c010000 	ldr	q0, 2e58 <__stack_size-0x11a8>
     e5c:	0000012a 	udf	#298
     e60:	74736406 	.inst	0x74736406 ; undefined
     e64:	140b0100 	b	2c1264 <__stack_size+0x2bd264>
     e68:	0000012a 	udf	#298
     e6c:	06589102 	.inst	0x06589102 ; undefined
     e70:	006c6176 	.inst	0x006c6176 ; undefined
     e74:	6b1d0b01 	subs	w1, w24, w29, lsl #2
     e78:	02000000 	.inst	0x02000000 ; undefined
     e7c:	75075491 	.inst	0x75075491 ; undefined
     e80:	01000006 	.inst	0x01000006 ; undefined
     e84:	0029290b 	.inst	0x0029290b ; NYI
     e88:	91020000 	add	x0, x0, #0x80
     e8c:	74700848 	.inst	0x74700848 ; undefined
     e90:	0d010072 	.inst	0x0d010072 ; undefined
     e94:	00012c0b 	.inst	0x00012c0b ; undefined
     e98:	78910200 	ldursh	x0, [x16, #-240]
     e9c:	00065109 	.inst	0x00065109 ; undefined
     ea0:	0c0e0100 	.inst	0x0c0e0100 ; undefined
     ea4:	00000132 	udf	#306
     ea8:	09709102 	.inst	0x09709102 ; undefined
     eac:	00000657 	udf	#1623
     eb0:	430b0f01 	.inst	0x430b0f01 ; undefined
     eb4:	02000000 	.inst	0x02000000 ; undefined
     eb8:	0a006891 	and	w17, w4, w0, lsl #26
     ebc:	72080b08 	ands	w8, w24, #0x7000000
     ec0:	0b000000 	add	w0, w0, w0
     ec4:	00004308 	udf	#17160
     ec8:	03250000 	.inst	0x03250000 ; undefined
     ecc:	00040000 	.inst	0x00040000 ; undefined
     ed0:	00000587 	udf	#1415
     ed4:	02200108 	.inst	0x02200108 ; undefined
     ed8:	d30c0000 	.inst	0xd30c0000 ; undefined
     edc:	2f000006 	.inst	0x2f000006 ; undefined
     ee0:	20000000 	.inst	0x20000000 ; undefined
     ee4:	00000003 	udf	#3
     ee8:	00000000 	udf	#0
     eec:	25000000 	cmpge	p0.b, p0/z, z0.b, #0
     ef0:	0200000c 	.inst	0x0200000c ; undefined
     ef4:	017c0708 	.inst	0x017c0708 ; undefined
     ef8:	08020000 	stxrb	w2, w0, [x0]
     efc:	0001cb05 	.inst	0x0001cb05 ; undefined
     f00:	05100200 	mov	z0.b, p0/z, #16
     f04:	00000146 	udf	#326
     f08:	00071002 	.inst	0x00071002 ; undefined
     f0c:	02000001 	.inst	0x02000001 ; undefined
     f10:	01140601 	.inst	0x01140601 ; undefined
     f14:	02020000 	.inst	0x02020000 ; undefined
     f18:	0001d405 	.inst	0x0001d405 ; undefined
     f1c:	05040300 	.inst	0x05040300 ; undefined
     f20:	00746e69 	.inst	0x00746e69 ; undefined
     f24:	12080102 	and	w2, w8, #0x1000000
     f28:	02000001 	.inst	0x02000001 ; undefined
     f2c:	01330702 	.inst	0x01330702 ; undefined
     f30:	04020000 	.inst	0x04020000 ; undefined
     f34:	00018107 	.inst	0x00018107 ; undefined
     f38:	06100400 	.inst	0x06100400 ; undefined
     f3c:	6e040000 	ext	v0.16b, v0.16b, v4.16b, #0
     f40:	00002917 	udf	#10519
     f44:	05080200 	.inst	0x05080200 ; undefined
     f48:	000001c6 	udf	#454
     f4c:	77070802 	.inst	0x77070802 ; undefined
     f50:	05000001 	orr	z1.s, z1.s, #0x1
     f54:	000006a4 	udf	#1700
     f58:	53051c02 	ubfx	w2, w0, #5, #3
     f5c:	9f000000 	.inst	0x9f000000 ; undefined
     f60:	06000000 	.inst	0x06000000 ; undefined
     f64:	00000053 	udf	#83
     f68:	05fb0700 	.inst	0x05fb0700 ; undefined
     f6c:	0f030000 	.inst	0x0f030000 ; undefined
     f70:	0000bb0e 	udf	#47886
     f74:	00bb0600 	.inst	0x00bb0600 ; undefined
     f78:	68060000 	.inst	0x68060000 ; undefined
     f7c:	06000000 	.inst	0x06000000 ; undefined
     f80:	000000bb 	udf	#187
     f84:	c8080800 	stxr	w8, x0, [x0]
     f88:	02000000 	.inst	0x02000000 ; undefined
     f8c:	011b0801 	.inst	0x011b0801 ; undefined
     f90:	c1090000 	.inst	0xc1090000 ; undefined
     f94:	0a000000 	and	w0, w0, w0
     f98:	00000690 	udf	#1680
     f9c:	5305c001 	.inst	0x5305c001 ; undefined
     fa0:	d0000000 	adrp	x0, 2000 <__stack_size-0x2000>
     fa4:	00610021 	.inst	0x00610021 ; undefined
     fa8:	b0000000 	adrp	x0, 1000 <__stack_size-0x3000>
     fac:	00000000 	udf	#0
     fb0:	01000000 	.inst	0x01000000 ; undefined
     fb4:	0001209c 	.inst	0x0001209c ; undefined
     fb8:	6d660b00 	ldp	d0, d2, [x24, #-416]
     fbc:	c0010074 	.inst	0xc0010074 ; undefined
     fc0:	0000bb18 	udf	#47896
     fc4:	88910300 	stllr	w0, [x24]
     fc8:	750d0c7e 	.inst	0x750d0c7e ; undefined
     fcc:	01000006 	.inst	0x01000006 ; undefined
     fd0:	005306c2 	.inst	0x005306c2 ; undefined
     fd4:	91030000 	add	x0, x0, #0xc0
     fd8:	760e7ebc 	.inst	0x760e7ebc ; undefined
     fdc:	c3010061 	.inst	0xc3010061 ; undefined
     fe0:	0001200a 	.inst	0x0001200a ; undefined
     fe4:	98910300 	ldrsw	x0, fffffffffff23044 <_sp+0xffffffff9eee3044>
     fe8:	010f007e 	.inst	0x010f007e ; undefined
     fec:	20000007 	.inst	0x20000007 ; undefined
     ff0:	015f0005 	.inst	0x015f0005 ; undefined
     ff4:	28100000 	stnp	w0, w0, [x0, #128]
     ff8:	5f000007 	.inst	0x5f000007 ; undefined
     ffc:	00000001 	udf	#1
    1000:	00067b10 	.inst	0x00067b10 ; undefined
    1004:	00015f00 	.inst	0x00015f00 ; undefined
    1008:	1a100800 	.inst	0x1a100800 ; undefined
    100c:	5f000007 	.inst	0x5f000007 ; undefined
    1010:	10000001 	adr	x1, 1010 <__stack_size-0x2ff0>
    1014:	0006c410 	.inst	0x0006c410 ; undefined
    1018:	00005300 	udf	#21248
    101c:	0b101800 	add	w0, w0, w16, lsl #6
    1020:	53000007 	ubfx	w7, w0, #0, #1
    1024:	1c000000 	ldr	s0, 1024 <__stack_size-0x2fdc>
    1028:	0a081100 	and	w0, w8, w8, lsl #4
    102c:	0000068f 	udf	#1679
    1030:	53055e01 	ubfx	w1, w16, #5, #19
    1034:	a4000000 	ld1rqb	{z0.b}, p0/z, [x0, x0]
    1038:	0061001a 	.inst	0x0061001a ; undefined
    103c:	2c000000 	stnp	s0, s0, [x0]
    1040:	00000007 	udf	#7
    1044:	01000000 	.inst	0x01000000 ; undefined
    1048:	00023c9c 	.inst	0x00023c9c ; undefined
    104c:	6d660b00 	ldp	d0, d2, [x24, #-416]
    1050:	5e010074 	sha1c	q20, s3, v1.4s
    1054:	0000bb19 	udf	#47897
    1058:	b8910300 	ldursw	x0, [x24, #-240]
    105c:	0715127f 	.inst	0x0715127f ; undefined
    1060:	5e010000 	sha1c	q0, s0, v1.4s
    1064:	00012026 	.inst	0x00012026 ; undefined
    1068:	00830200 	.inst	0x00830200 ; undefined
    106c:	0006730d 	.inst	0x0006730d ; undefined
    1070:	06600100 	.inst	0x06600100 ; undefined
    1074:	00000053 	udf	#83
    1078:	0e7c9102 	sqdmlal	v2.4s, v8.4h, v28.4h
    107c:	006d756e 	.inst	0x006d756e ; undefined
    1080:	7b106101 	.inst	0x7b106101 ; undefined
    1084:	02000000 	.inst	0x02000000 ; undefined
    1088:	230d5091 	.inst	0x230d5091 ; undefined
    108c:	01000007 	.inst	0x01000007 ; undefined
    1090:	00821962 	.inst	0x00821962 ; undefined
    1094:	91020000 	add	x0, x0, #0x80
    1098:	74730e70 	.inst	0x74730e70 ; undefined
    109c:	63010072 	.inst	0x63010072 ; undefined
    10a0:	00023c08 	.inst	0x00023c08 ; undefined
    10a4:	58910200 	ldr	x0, fffffffffff230e4 <_sp+0xffffffff9eee30e4>
    10a8:	0006ce0d 	.inst	0x0006ce0d ; undefined
    10ac:	07640100 	.inst	0x07640100 ; undefined
    10b0:	000000c1 	udf	#193
    10b4:	0d6f9102 	.inst	0x0d6f9102 ; undefined
    10b8:	000006bf 	udf	#1727
    10bc:	53066501 	ubfx	w1, w8, #6, #20
    10c0:	02000000 	.inst	0x02000000 ; undefined
    10c4:	750d6891 	.inst	0x750d6891 ; undefined
    10c8:	01000006 	.inst	0x01000006 ; undefined
    10cc:	00530666 	.inst	0x00530666 ; undefined
    10d0:	91020000 	add	x0, x0, #0x80
    10d4:	068a1364 	.inst	0x068a1364 ; undefined
    10d8:	6f010000 	.inst	0x6f010000 ; undefined
    10dc:	001ae801 	.inst	0x001ae801 ; undefined
    10e0:	00000061 	udf	#97
    10e4:	21201400 	.inst	0x21201400 ; undefined
    10e8:	00006100 	udf	#24832
    10ec:	00500000 	.inst	0x00500000 ; undefined
    10f0:	00000000 	udf	#0
    10f4:	630e0000 	.inst	0x630e0000 ; undefined
    10f8:	a9010068 	stp	x8, x0, [x3, #16]
    10fc:	0000c10b 	udf	#49419
    1100:	4f910200 	fmlal	v0.4s, v16.4h, v1.h[1]
    1104:	08080000 	stxrb	w8, w0, [x0]
    1108:	000000c1 	udf	#193
    110c:	0006ac15 	.inst	0x0006ac15 ; undefined
    1110:	0c280100 	.inst	0x0c280100 ; undefined
    1114:	00000053 	udf	#83
    1118:	61001978 	.inst	0x61001978 ; undefined
    111c:	00000000 	udf	#0
    1120:	0000012c 	udf	#300
    1124:	00000000 	udf	#0
    1128:	02db9c01 	.inst	0x02db9c01 ; undefined
    112c:	23120000 	.inst	0x23120000 ; undefined
    1130:	01000007 	.inst	0x01000007 ; undefined
    1134:	00823628 	.inst	0x00823628 ; undefined
    1138:	91020000 	add	x0, x0, #0x80
    113c:	06841258 	.inst	0x06841258 ; undefined
    1140:	28010000 	stnp	w0, w0, [x0, #8]
    1144:	00006849 	udf	#26697
    1148:	54910200 	b.eq	fffffffffff23188 <_sp+0xffffffff9eee3188>  // b.none
    114c:	0006ce12 	.inst	0x0006ce12 ; undefined
    1150:	0f290100 	.inst	0x0f290100 ; undefined
    1154:	000000c1 	udf	#193
    1158:	12539102 	.inst	0x12539102 ; undefined
    115c:	000006bf 	udf	#1727
    1160:	53192901 	ubfiz	w1, w8, #7, #11
    1164:	02000000 	.inst	0x02000000 ; undefined
    1168:	6b0d4c91 	subs	w17, w4, w13, lsl #19
    116c:	01000006 	.inst	0x01000006 ; undefined
    1170:	02db072c 	.inst	0x02db072c ; undefined
    1174:	91020000 	add	x0, x0, #0x80
    1178:	00690e60 	.inst	0x00690e60 ; undefined
    117c:	53062d01 	ubfx	w1, w8, #6, #6
    1180:	02000000 	.inst	0x02000000 ; undefined
    1184:	750d7c91 	.inst	0x750d7c91 ; undefined
    1188:	01000006 	.inst	0x01000006 ; undefined
    118c:	00530d2d 	.inst	0x00530d2d ; undefined
    1190:	91020000 	add	x0, x0, #0x80
    1194:	65720e78 	fmla	z24.h, p3/m, z19.h, z18.h
    1198:	2e01006d 	ext	v13.8b, v3.8b, v1.8b, #0
    119c:	0000680f 	udf	#26639
    11a0:	74910200 	.inst	0x74910200 ; undefined
    11a4:	00c11600 	.inst	0x00c11600 ; undefined
    11a8:	02eb0000 	.inst	0x02eb0000 ; undefined
    11ac:	29170000 	stp	w0, w0, [x0, #184]
    11b0:	13000000 	sbfx	w0, w0, #0, #1
    11b4:	06971800 	.inst	0x06971800 ; undefined
    11b8:	1a010000 	adc	w0, w0, w1
    11bc:	0000530c 	udf	#21260
    11c0:	00190400 	.inst	0x00190400 ; undefined
    11c4:	00000061 	udf	#97
    11c8:	00007400 	udf	#29696
    11cc:	00000000 	udf	#0
    11d0:	0b9c0100 	add	w0, w8, w28, asr #0
    11d4:	00727473 	.inst	0x00727473 ; undefined
    11d8:	bb251a01 	.inst	0xbb251a01 ; undefined
    11dc:	02000000 	.inst	0x02000000 ; undefined
    11e0:	750d6891 	.inst	0x750d6891 ; undefined
    11e4:	01000006 	.inst	0x01000006 ; undefined
    11e8:	0053061c 	.inst	0x0053061c ; undefined
    11ec:	91020000 	add	x0, x0, #0x80
    11f0:	4200007c 	.inst	0x4200007c ; undefined
    11f4:	04000002 	add	z2.b, p0/m, z2.b, z0.b
    11f8:	0006f000 	.inst	0x0006f000 ; undefined
    11fc:	20010800 	.inst	0x20010800 ; undefined
    1200:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    1204:	00000761 	udf	#1889
    1208:	0000002f 	udf	#47
    120c:	00000370 	udf	#880
	...
    1218:	00000ef0 	udf	#3824
    121c:	7c070802 	.inst	0x7c070802 ; undefined
    1220:	02000001 	.inst	0x02000001 ; undefined
    1224:	01cb0508 	.inst	0x01cb0508 ; undefined
    1228:	04020000 	.inst	0x04020000 ; undefined
    122c:	00018107 	.inst	0x00018107 ; undefined
    1230:	05100200 	mov	z0.b, p0/z, #16
    1234:	00000146 	udf	#326
    1238:	00071002 	.inst	0x00071002 ; undefined
    123c:	02000001 	.inst	0x02000001 ; undefined
    1240:	01140601 	.inst	0x01140601 ; undefined
    1244:	02020000 	.inst	0x02020000 ; undefined
    1248:	0001d405 	.inst	0x0001d405 ; undefined
    124c:	07b50300 	.inst	0x07b50300 ; undefined
    1250:	57020000 	.inst	0x57020000 ; undefined
    1254:	0000660d 	udf	#26125
    1258:	05040400 	.inst	0x05040400 ; undefined
    125c:	00746e69 	.inst	0x00746e69 ; undefined
    1260:	00066303 	.inst	0x00066303 ; undefined
    1264:	17590200 	b	fffffffffd641a64 <_sp+0xffffffff9c601a64>
    1268:	0000007e 	udf	#126
    126c:	00006d05 	udf	#27909
    1270:	08010200 	stxrb	w1, w0, [x16]
    1274:	00000112 	udf	#274
    1278:	33070202 	bfi	w2, w16, #25, #1
    127c:	03000001 	.inst	0x03000001 ; undefined
    1280:	000007b4 	udf	#1972
    1284:	37165b02 	tbnz	w2, #2, ffffffffffffdde4 <_sp+0xffffffff9efbdde4>
    1288:	05000000 	orr	z0.s, z0.s, #0x1
    128c:	0000008c 	udf	#140
    1290:	c6050802 	.inst	0xc6050802 ; undefined
    1294:	02000001 	.inst	0x02000001 ; undefined
    1298:	01770708 	.inst	0x01770708 ; undefined
    129c:	b0060000 	adrp	x0, c002000 <__stack_size+0xbffe000>
    12a0:	0902fa03 	.inst	0x0902fa03 ; undefined
    12a4:	000001c0 	udf	#448
    12a8:	00075507 	.inst	0x00075507 ; undefined
    12ac:	02fb0300 	.inst	0x02fb0300 ; undefined
    12b0:	00009814 	udf	#38932
    12b4:	43070000 	.inst	0x43070000 ; undefined
    12b8:	03000007 	.inst	0x03000007 ; undefined
    12bc:	981402fc 	ldrsw	x28, 29318 <__stack_size+0x25318>
    12c0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    12c4:	00073b07 	.inst	0x00073b07 ; undefined
    12c8:	02fd0300 	.inst	0x02fd0300 ; undefined
    12cc:	00009814 	udf	#38932
    12d0:	4c080800 	.inst	0x4c080800 ; undefined
    12d4:	03005243 	.inst	0x03005243 ; undefined
    12d8:	981402fe 	ldrsw	x30, 29334 <__stack_size+0x25334>
    12dc:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    12e0:	52434d08 	.inst	0x52434d08 ; undefined
    12e4:	02ff0300 	.inst	0x02ff0300 ; undefined
    12e8:	00009814 	udf	#38932
    12ec:	4c081000 	.inst	0x4c081000 ; undefined
    12f0:	03005253 	.inst	0x03005253 ; undefined
    12f4:	98140300 	ldrsw	x0, 29354 <__stack_size+0x25354>
    12f8:	14000000 	b	12f8 <__stack_size-0x2d08>
    12fc:	52534d08 	.inst	0x52534d08 ; undefined
    1300:	03010300 	.inst	0x03010300 ; undefined
    1304:	00009814 	udf	#38932
    1308:	53081800 	ubfiz	w0, w0, #24, #7
    130c:	03005243 	.inst	0x03005243 ; undefined
    1310:	98140302 	ldrsw	x2, 29370 <__stack_size+0x25370>
    1314:	1c000000 	ldr	s0, 1314 <__stack_size-0x2cec>
    1318:	00079007 	.inst	0x00079007 ; undefined
    131c:	03030300 	.inst	0x03030300 ; undefined
    1320:	0001d014 	.inst	0x0001d014 ; undefined
    1324:	46082000 	.inst	0x46082000 ; undefined
    1328:	03005241 	.inst	0x03005241 ; undefined
    132c:	98140304 	ldrsw	x4, 2938c <__stack_size+0x2538c>
    1330:	70000000 	adr	x0, 1333 <__stack_size-0x2ccd>
    1334:	52465408 	.inst	0x52465408 ; undefined
    1338:	03050300 	.inst	0x03050300 ; undefined
    133c:	00009814 	udf	#38932
    1340:	52087400 	eor	w0, w0, #0xff3fffff
    1344:	03005746 	.inst	0x03005746 ; undefined
    1348:	98140306 	ldrsw	x6, 293a8 <__stack_size+0x253a8>
    134c:	78000000 	sturh	w0, [x0]
    1350:	52535508 	.inst	0x52535508 ; undefined
    1354:	03070300 	.inst	0x03070300 ; undefined
    1358:	00009814 	udf	#38932
    135c:	54087c00 	b.eq	122dc <__stack_size+0xe2dc>  // b.none
    1360:	03004c46 	.inst	0x03004c46 ; undefined
    1364:	98140308 	ldrsw	x8, 293c4 <__stack_size+0x253c4>
    1368:	80000000 	.inst	0x80000000 ; undefined
    136c:	4c465208 	.inst	0x4c465208 ; undefined
    1370:	03090300 	.inst	0x03090300 ; undefined
    1374:	00009814 	udf	#38932
    1378:	4b078400 	.inst	0x4b078400 ; undefined
    137c:	03000007 	.inst	0x03000007 ; undefined
    1380:	e514030a 	.inst	0xe514030a ; undefined
    1384:	88000001 	stxr	w0, w1, [x0]
    1388:	58544808 	ldr	x8, a9c88 <__stack_size+0xa5c88>
    138c:	030b0300 	.inst	0x030b0300 ; undefined
    1390:	00009814 	udf	#38932
    1394:	9e07a400 	.inst	0x9e07a400 ; undefined
    1398:	03000007 	.inst	0x03000007 ; undefined
    139c:	9814030c 	ldrsw	x12, 293fc <__stack_size+0x253fc>
    13a0:	a8000000 	stnp	x0, x0, [x0]
    13a4:	52504308 	.inst	0x52504308 ; undefined
    13a8:	030d0300 	.inst	0x030d0300 ; undefined
    13ac:	00009814 	udf	#38932
    13b0:	0900ac00 	.inst	0x0900ac00 ; undefined
    13b4:	00000098 	udf	#152
    13b8:	000001d0 	udf	#464
    13bc:	0000290a 	udf	#10506
    13c0:	05001300 	orr	z0.s, z0.s, #0xc07fffff
    13c4:	000001c0 	udf	#448
    13c8:	00009809 	udf	#38921
    13cc:	0001e500 	.inst	0x0001e500 ; undefined
    13d0:	00290a00 	.inst	0x00290a00 ; NYI
    13d4:	00060000 	.inst	0x00060000 ; undefined
    13d8:	0001d505 	.inst	0x0001d505 ; undefined
    13dc:	07a40b00 	.inst	0x07a40b00 ; undefined
    13e0:	0e030000 	tbl	v0.8b, {v0.16b}, v3.8b
    13e4:	00ab0203 	.inst	0x00ab0203 ; undefined
    13e8:	300c0000 	adr	x0, 193e9 <__stack_size+0x153e9>
    13ec:	04000007 	add	z7.b, p0/m, z7.b, z0.b
    13f0:	5a090179 	sbc	w25, w11, w9
    13f4:	13000000 	sbfx	w0, w0, #0, #1
    13f8:	0d000002 	st1	{v2.b}[0], [x0]
    13fc:	00000213 	udf	#531
    1400:	0000790d 	udf	#30989
    1404:	080e0000 	stxrb	w14, w0, [x0]
    1408:	000001ea 	udf	#490
    140c:	0006a40f 	.inst	0x0006a40f ; undefined
    1410:	050a0100 	.inst	0x050a0100 ; undefined
    1414:	00000066 	udf	#102
    1418:	61002280 	.inst	0x61002280 ; undefined
    141c:	00000000 	udf	#0
    1420:	00000028 	udf	#40
    1424:	00000000 	udf	#0
    1428:	63109c01 	.inst	0x63109c01 ; undefined
    142c:	110a0100 	add	w0, w8, #0x280
    1430:	00000066 	udf	#102
    1434:	007c9102 	.inst	0x007c9102 ; undefined
    1438:	00023d00 	.inst	0x00023d00 ; undefined
    143c:	d6000400 	.inst	0xd6000400 ; undefined
    1440:	08000007 	stxrb	w0, w7, [x0]
    1444:	00022001 	.inst	0x00022001 ; undefined
    1448:	07bd0c00 	.inst	0x07bd0c00 ; undefined
    144c:	002f0000 	.inst	0x002f0000 ; NYI
    1450:	03900000 	.inst	0x03900000 ; undefined
	...
    145c:	0fc80000 	.inst	0x0fc80000 ; undefined
    1460:	08020000 	stxrb	w2, w0, [x0]
    1464:	0001cb05 	.inst	0x0001cb05 ; undefined
    1468:	07080200 	.inst	0x07080200 ; undefined
    146c:	0000017c 	udf	#380
    1470:	46051002 	.inst	0x46051002 ; undefined
    1474:	02000001 	.inst	0x02000001 ; undefined
    1478:	01000710 	.inst	0x01000710 ; undefined
    147c:	01020000 	.inst	0x01020000 ; undefined
    1480:	00011406 	.inst	0x00011406 ; undefined
    1484:	05020200 	orr	z0.d, z0.d, #0x1ffff
    1488:	000001d4 	udf	#468
    148c:	69050403 	stgp	x3, x1, [x0, #160]
    1490:	0200746e 	.inst	0x0200746e ; undefined
    1494:	01120801 	.inst	0x01120801 ; undefined
    1498:	02020000 	.inst	0x02020000 ; undefined
    149c:	00013307 	.inst	0x00013307 ; undefined
    14a0:	07040200 	.inst	0x07040200 ; undefined
    14a4:	00000181 	udf	#385
    14a8:	c6050802 	.inst	0xc6050802 ; undefined
    14ac:	02000001 	.inst	0x02000001 ; undefined
    14b0:	01770708 	.inst	0x01770708 ; undefined
    14b4:	01020000 	.inst	0x01020000 ; undefined
    14b8:	00011b08 	.inst	0x00011b08 ; undefined
    14bc:	36750400 	tbz	w0, #14, ffffffffffffb53c <_sp+0xffffffff9efbb53c>
    14c0:	3a020034 	adcs	w20, w1, w2
    14c4:	0000761c 	udf	#30236
    14c8:	081c0500 	stxrb	w28, w0, [x8]
    14cc:	3c020000 	stur	b0, [x0, #32]
    14d0:	0000761c 	udf	#30236
    14d4:	08080600 	stxrb	w8, w0, [x16]
    14d8:	44010000 	.inst	0x44010000 ; undefined
    14dc:	00000006 	udf	#6
    14e0:	00000000 	udf	#0
    14e4:	00005000 	udf	#20480
    14e8:	00000000 	udf	#0
    14ec:	e89c0100 	.inst	0xe89c0100 ; undefined
    14f0:	07000000 	.inst	0x07000000 ; undefined
    14f4:	00000675 	udf	#1653
    14f8:	90164401 	adrp	x1, 2c881000 <__stack_size+0x2c87d000>
    14fc:	02000000 	.inst	0x02000000 ; undefined
    1500:	a0086891 	.inst	0xa0086891 ; undefined
    1504:	01000001 	.inst	0x01000001 ; undefined
    1508:	00900b46 	.inst	0x00900b46 ; undefined
    150c:	91020000 	add	x0, x0, #0x80
    1510:	07fe0878 	.inst	0x07fe0878 ; undefined
    1514:	47010000 	.inst	0x47010000 ; undefined
    1518:	0000900b 	udf	#36875
    151c:	70910200 	adr	x0, fffffffffff2355f <_sp+0xffffffff9eee355f>
    1520:	047b0600 	sub	z0.h, z16.h, z27.h
    1524:	3d010000 	str	b0, [x0, #64]
    1528:	00231806 	.inst	0x00231806 ; NYI
    152c:	00000061 	udf	#97
    1530:	00005400 	udf	#21504
    1534:	00000000 	udf	#0
    1538:	349c0100 	cbz	w0, fffffffffff39558 <_sp+0xffffffff9eef9558>
    153c:	07000001 	.inst	0x07000001 ; undefined
    1540:	00000675 	udf	#1653
    1544:	90163d01 	adrp	x1, 2c7a1000 <__stack_size+0x2c79d000>
    1548:	02000000 	.inst	0x02000000 ; undefined
    154c:	a0086891 	.inst	0xa0086891 ; undefined
    1550:	01000001 	.inst	0x01000001 ; undefined
    1554:	00900b3f 	.inst	0x00900b3f ; undefined
    1558:	91020000 	add	x0, x0, #0x80
    155c:	07fe0878 	.inst	0x07fe0878 ; undefined
    1560:	40010000 	.inst	0x40010000 ; undefined
    1564:	0000900b 	udf	#36875
    1568:	70910200 	adr	x0, fffffffffff235ab <_sp+0xffffffff9eee35ab>
    156c:	07f50600 	.inst	0x07f50600 ; undefined
    1570:	36010000 	tbz	w0, #0, 3570 <__stack_size-0xa90>
    1574:	00000006 	udf	#6
    1578:	00000000 	udf	#0
    157c:	00003800 	udf	#14336
    1580:	00000000 	udf	#0
    1584:	809c0100 	.inst	0x809c0100 ; undefined
    1588:	07000001 	.inst	0x07000001 ; undefined
    158c:	00000675 	udf	#1653
    1590:	90153601 	adrp	x1, 2a6c1000 <__stack_size+0x2a6bd000>
    1594:	02000000 	.inst	0x02000000 ; undefined
    1598:	a0086891 	.inst	0xa0086891 ; undefined
    159c:	01000001 	.inst	0x01000001 ; undefined
    15a0:	00900b38 	.inst	0x00900b38 ; undefined
    15a4:	91020000 	add	x0, x0, #0x80
    15a8:	07fe0878 	.inst	0x07fe0878 ; undefined
    15ac:	39010000 	strb	w0, [x0, #64]
    15b0:	0000900b 	udf	#36875
    15b4:	70910200 	adr	x0, fffffffffff235f7 <_sp+0xffffffff9eee35f7>
    15b8:	07e50900 	.inst	0x07e50900 ; undefined
    15bc:	28010000 	stnp	w0, w0, [x0, #8]
    15c0:	0000900e 	udf	#36878
    15c4:	00230000 	.inst	0x00230000 ; NYI
    15c8:	00000061 	udf	#97
    15cc:	00001800 	udf	#6144
    15d0:	00000000 	udf	#0
    15d4:	b29c0100 	.inst	0xb29c0100 ; undefined
    15d8:	08000001 	stxrb	w0, w1, [x0]
    15dc:	000001a0 	udf	#416
    15e0:	680f2a01 	.inst	0x680f2a01 ; undefined
    15e4:	02000000 	.inst	0x02000000 ; undefined
    15e8:	0a007c91 	and	w17, w4, w0, lsl #31
    15ec:	00000822 	udf	#2082
    15f0:	a80d1901 	stnp	x1, x6, [x8, #208]
    15f4:	00610022 	.inst	0x00610022 ; undefined
    15f8:	58000000 	ldr	x0, 15f8 <__stack_size-0x2a08>
    15fc:	00000000 	udf	#0
    1600:	01000000 	.inst	0x01000000 ; undefined
    1604:	0675079c 	.inst	0x0675079c ; undefined
    1608:	19010000 	stlurb	w0, [x0, #16]
    160c:	0000901b 	udf	#36891
    1610:	58910200 	ldr	x0, fffffffffff23650 <_sp+0xffffffff9eee3650>
    1614:	00081208 	.inst	0x00081208 ; undefined
    1618:	081b0100 	stxrb	w27, w0, [x8]
    161c:	00000090 	udf	#144
    1620:	08689102 	.inst	0x08689102 ; undefined
    1624:	00000817 	udf	#2071
    1628:	900e1b01 	adrp	x1, 1c361000 <__stack_size+0x1c35d000>
    162c:	02000000 	.inst	0x02000000 ; undefined
    1630:	b00b7091 	adrp	x17, 16e12000 <__stack_size+0x16e0e000>
    1634:	00610022 	.inst	0x00610022 ; undefined
    1638:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    163c:	00000000 	udf	#0
    1640:	1e000000 	.inst	0x1e000000 ; undefined
    1644:	08000002 	stxrb	w0, w2, [x0]
    1648:	00000512 	udf	#1298
    164c:	84091c01 	ld1sb	{z1.s}, p7/z, [x0, z9.s, uxtw]
    1650:	02000000 	.inst	0x02000000 ; undefined
    1654:	0c007891 	st1	{v17.2s}, [x4]
    1658:	610022d0 	.inst	0x610022d0 ; undefined
    165c:	00000000 	udf	#0
    1660:	0000000c 	udf	#12
    1664:	00000000 	udf	#0
    1668:	00051208 	.inst	0x00051208 ; undefined
    166c:	0a1f0100 	and	w0, w8, wzr
    1670:	00000084 	udf	#132
    1674:	00609102 	.inst	0x00609102 ; undefined
    1678:	026e0000 	.inst	0x026e0000 ; undefined
    167c:	00040000 	.inst	0x00040000 ; undefined
    1680:	000008a4 	udf	#2212
    1684:	02200108 	.inst	0x02200108 ; undefined
    1688:	5e0c0000 	sha1c	q0, s0, v12.4s
    168c:	2f000008 	.inst	0x2f000008 ; undefined
    1690:	f0000000 	adrp	x0, 4000 <__stack_size>
    1694:	00000003 	udf	#3
    1698:	00000000 	udf	#0
    169c:	f8000000 	stur	x0, [x0]
    16a0:	02000010 	.inst	0x02000010 ; undefined
    16a4:	0000082a 	udf	#2090
    16a8:	03020110 	.inst	0x03020110 ; undefined
    16ac:	00006e08 	udf	#28168
    16b0:	082d0300 	.inst	0x082d0300 ; undefined
    16b4:	04020000 	.inst	0x04020000 ; undefined
    16b8:	00006e10 	udf	#28176
    16bc:	65040000 	.inst	0x65040000 ; undefined
    16c0:	0200726c 	.inst	0x0200726c ; undefined
    16c4:	007e1005 	.inst	0x007e1005 ; undefined
    16c8:	05f80000 	.inst	0x05f80000 ; undefined
    16cc:	00727365 	.inst	0x00727365 ; undefined
    16d0:	7e100602 	.inst	0x7e100602 ; undefined
    16d4:	00000000 	udf	#0
    16d8:	08a80601 	.inst	0x08a80601 ; undefined
    16dc:	07020000 	.inst	0x07020000 ; undefined
    16e0:	00007e10 	udf	#32272
    16e4:	00010800 	.inst	0x00010800 ; undefined
    16e8:	00007e07 	udf	#32263
    16ec:	00007e00 	udf	#32256
    16f0:	007e0800 	.inst	0x007e0800 ; undefined
    16f4:	001e0000 	.inst	0x001e0000 ; undefined
    16f8:	7c070809 	.inst	0x7c070809 ; undefined
    16fc:	0a000001 	and	w1, w0, w0
    1700:	0000089f 	udf	#2207
    1704:	300d7d01 	adr	x1, 1c6a5 <__stack_size+0x186a5>
    1708:	00610024 	.inst	0x00610024 ; undefined
    170c:	20000000 	.inst	0x20000000 ; undefined
    1710:	00000000 	udf	#0
    1714:	01000000 	.inst	0x01000000 ; undefined
    1718:	0000c29c 	udf	#49820
    171c:	082a0b00 	.inst	0x082a0b00 ; undefined
    1720:	7d010000 	str	h0, [x0, #128]
    1724:	0000c226 	udf	#49702
    1728:	78910200 	ldursh	x0, [x16, #-240]
    172c:	7273650c 	.inst	0x7273650c ; undefined
    1730:	3c7d0100 	.inst	0x3c7d0100 ; undefined
    1734:	000000c8 	udf	#200
    1738:	00749102 	.inst	0x00749102 ; undefined
    173c:	0029080d 	.inst	0x0029080d ; NYI
    1740:	04090000 	umax	z0.b, p0/m, z0.b, z0.b
    1744:	00018107 	.inst	0x00018107 ; undefined
    1748:	08570a00 	ldxrb	w0, [x16]
    174c:	70010000 	adr	x0, 374f <__stack_size-0x8b1>
    1750:	0024100d 	.inst	0x0024100d ; NYI
    1754:	00000061 	udf	#97
    1758:	00002000 	udf	#8192
    175c:	00000000 	udf	#0
    1760:	0c9c0100 	st4	{v0.8b-v3.8b}, [x8], x28
    1764:	0b000001 	add	w1, w0, w0
    1768:	0000082a 	udf	#2090
    176c:	c2247001 	.inst	0xc2247001 ; undefined
    1770:	02000000 	.inst	0x02000000 ; undefined
    1774:	650c7891 	.inst	0x650c7891 ; undefined
    1778:	01007273 	.inst	0x01007273 ; undefined
    177c:	00c83a70 	.inst	0x00c83a70 ; undefined
    1780:	91020000 	add	x0, x0, #0x80
    1784:	2b0e0074 	adds	w20, w3, w14
    1788:	01000003 	.inst	0x01000003 ; undefined
    178c:	00000d64 	udf	#3428
    1790:	00000000 	udf	#0
    1794:	00180000 	.inst	0x00180000 ; undefined
    1798:	00000000 	udf	#0
    179c:	9c010000 	ldr	q0, 379c <__stack_size-0x864>
    17a0:	0008320a 	.inst	0x0008320a ; undefined
    17a4:	0d570100 	.inst	0x0d570100 ; undefined
    17a8:	610023f0 	.inst	0x610023f0 ; undefined
    17ac:	00000000 	udf	#0
    17b0:	00000020 	udf	#32
    17b4:	00000000 	udf	#0
    17b8:	01639c01 	.inst	0x01639c01 ; undefined
    17bc:	2a0b0000 	orr	w0, w0, w11
    17c0:	01000008 	.inst	0x01000008 ; undefined
    17c4:	00c22c57 	.inst	0x00c22c57 ; undefined
    17c8:	91020000 	add	x0, x0, #0x80
    17cc:	73650c78 	.inst	0x73650c78 ; undefined
    17d0:	57010072 	.inst	0x57010072 ; undefined
    17d4:	0000c842 	udf	#51266
    17d8:	74910200 	.inst	0x74910200 ; undefined
    17dc:	08af0a00 	.inst	0x08af0a00 ; undefined
    17e0:	4a010000 	eor	w0, w0, w1
    17e4:	0023d00d 	.inst	0x0023d00d ; NYI
    17e8:	00000061 	udf	#97
    17ec:	00002000 	udf	#8192
    17f0:	00000000 	udf	#0
    17f4:	a09c0100 	.inst	0xa09c0100 ; undefined
    17f8:	0b000001 	add	w1, w0, w0
    17fc:	0000082a 	udf	#2090
    1800:	c22a4a01 	.inst	0xc22a4a01 ; undefined
    1804:	02000000 	.inst	0x02000000 ; undefined
    1808:	650c7891 	.inst	0x650c7891 ; undefined
    180c:	01007273 	.inst	0x01007273 ; undefined
    1810:	00c8404a 	.inst	0x00c8404a ; undefined
    1814:	91020000 	add	x0, x0, #0x80
    1818:	410a0074 	.inst	0x410a0074 ; undefined
    181c:	01000008 	.inst	0x01000008 ; undefined
    1820:	23b00d3d 	.inst	0x23b00d3d ; undefined
    1824:	00006100 	udf	#24832
    1828:	00200000 	.inst	0x00200000 ; NYI
    182c:	00000000 	udf	#0
    1830:	9c010000 	ldr	q0, 3830 <__stack_size-0x7d0>
    1834:	000001dd 	udf	#477
    1838:	00082a0b 	.inst	0x00082a0b ; undefined
    183c:	283d0100 	stnp	w0, w0, [x8, #-24]
    1840:	000000c2 	udf	#194
    1844:	0c789102 	.inst	0x0c789102 ; undefined
    1848:	00727365 	.inst	0x00727365 ; undefined
    184c:	c83e3d01 	stxp	w30, x1, x15, [x8]
    1850:	02000000 	.inst	0x02000000 ; undefined
    1854:	0a007491 	and	w17, w4, w0, lsl #29
    1858:	0000084c 	udf	#2124
    185c:	900d3001 	adrp	x1, 1a601000 <__stack_size+0x1a5fd000>
    1860:	00610023 	.inst	0x00610023 ; undefined
    1864:	20000000 	.inst	0x20000000 ; undefined
    1868:	00000000 	udf	#0
    186c:	01000000 	.inst	0x01000000 ; undefined
    1870:	00021a9c 	.inst	0x00021a9c ; undefined
    1874:	082a0b00 	.inst	0x082a0b00 ; undefined
    1878:	30010000 	adr	x0, 3879 <__stack_size-0x787>
    187c:	0000c228 	udf	#49704
    1880:	78910200 	ldursh	x0, [x16, #-240]
    1884:	7273650c 	.inst	0x7273650c ; undefined
    1888:	3e300100 	.inst	0x3e300100 ; undefined
    188c:	000000c8 	udf	#200
    1890:	00749102 	.inst	0x00749102 ; undefined
    1894:	00088d0a 	.inst	0x00088d0a ; undefined
    1898:	0d230100 	.inst	0x0d230100 ; undefined
    189c:	61002370 	.inst	0x61002370 ; undefined
    18a0:	00000000 	udf	#0
    18a4:	00000020 	udf	#32
    18a8:	00000000 	udf	#0
    18ac:	02579c01 	.inst	0x02579c01 ; undefined
    18b0:	2a0b0000 	orr	w0, w0, w11
    18b4:	01000008 	.inst	0x01000008 ; undefined
    18b8:	00c22923 	.inst	0x00c22923 ; undefined
    18bc:	91020000 	add	x0, x0, #0x80
    18c0:	73650c78 	.inst	0x73650c78 ; undefined
    18c4:	23010072 	.inst	0x23010072 ; undefined
    18c8:	0000c83f 	udf	#51263
    18cc:	74910200 	.inst	0x74910200 ; undefined
    18d0:	08990f00 	stllrb	w0, [x24]
    18d4:	14010000 	b	418d4 <__stack_size+0x3d8d4>
    18d8:	00236c0d 	.inst	0x00236c0d ; NYI
    18dc:	00000061 	udf	#97
    18e0:	00000400 	udf	#1024
    18e4:	00000000 	udf	#0
    18e8:	009c0100 	.inst	0x009c0100 ; undefined
    18ec:	000006da 	udf	#1754
    18f0:	09a10004 	.inst	0x09a10004 ; undefined
    18f4:	01080000 	.inst	0x01080000 ; undefined
    18f8:	00000220 	udf	#544
    18fc:	000c1f0c 	.inst	0x000c1f0c ; undefined
    1900:	00002f00 	udf	#12032
    1904:	00049000 	.inst	0x00049000 ; undefined
	...
    1910:	00127100 	.inst	0x00127100 ; undefined
    1914:	05080200 	.inst	0x05080200 ; undefined
    1918:	000001cb 	udf	#459
    191c:	7c070802 	.inst	0x7c070802 ; undefined
    1920:	02000001 	.inst	0x02000001 ; undefined
    1924:	01460510 	.inst	0x01460510 ; undefined
    1928:	10020000 	adr	x0, 5928 <__stack_size+0x1928>
    192c:	00010007 	.inst	0x00010007 ; undefined
    1930:	06010200 	.inst	0x06010200 ; undefined
    1934:	00000114 	udf	#276
    1938:	d4050202 	hvc	#0x2810
    193c:	03000001 	.inst	0x03000001 ; undefined
    1940:	000007b5 	udf	#1973
    1944:	5f0d5702 	.inst	0x5f0d5702 ; undefined
    1948:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    194c:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    1950:	63030074 	.inst	0x63030074 ; undefined
    1954:	02000006 	.inst	0x02000006 ; undefined
    1958:	00721759 	.inst	0x00721759 ; undefined
    195c:	01020000 	.inst	0x01020000 ; undefined
    1960:	00011208 	.inst	0x00011208 ; undefined
    1964:	07020200 	.inst	0x07020200 ; undefined
    1968:	00000133 	udf	#307
    196c:	0007b403 	.inst	0x0007b403 ; undefined
    1970:	165b0200 	b	fffffffff96c2170 <_sp+0xffffffff98682170>
    1974:	00000091 	udf	#145
    1978:	00008005 	udf	#32773
    197c:	07040200 	.inst	0x07040200 ; undefined
    1980:	00000181 	udf	#385
    1984:	c6050802 	.inst	0xc6050802 ; undefined
    1988:	02000001 	.inst	0x02000001 ; undefined
    198c:	01770708 	.inst	0x01770708 ; undefined
    1990:	f6060000 	.inst	0xf6060000 ; undefined
    1994:	0700000b 	.inst	0x0700000b ; undefined
    1998:	00009104 	udf	#37124
    199c:	0e3d0300 	saddl	v0.8h, v24.8b, v29.8b
    19a0:	000002f3 	udf	#755
    19a4:	0009a407 	.inst	0x0009a407 ; undefined
    19a8:	b6070000 	tbz	x0, #32, fffffffffffff9a8 <_sp+0xffffffff9efbf9a8>
    19ac:	0100000f 	.inst	0x0100000f ; undefined
    19b0:	0008f707 	.inst	0x0008f707 ; undefined
    19b4:	3d070200 	str	b0, [x16, #448]
    19b8:	0300000f 	.inst	0x0300000f ; undefined
    19bc:	0009ef07 	.inst	0x0009ef07 ; undefined
    19c0:	e7070400 	.inst	0xe7070400 ; undefined
    19c4:	0500000e 	orr	z14.s, z14.s, #0x1
    19c8:	000e2307 	.inst	0x000e2307 ; undefined
    19cc:	62070600 	.inst	0x62070600 ; undefined
    19d0:	0700000b 	.inst	0x0700000b ; undefined
    19d4:	000a5507 	.inst	0x000a5507 ; undefined
    19d8:	cd070800 	.inst	0xcd070800 ; undefined
    19dc:	0900000a 	.inst	0x0900000a ; undefined
    19e0:	000b7f07 	.inst	0x000b7f07 ; undefined
    19e4:	50070a00 	adr	x0, fb26 <__stack_size+0xbb26>
    19e8:	0b00000c 	add	w12, w0, w0
    19ec:	000beb07 	.inst	0x000beb07 ; undefined
    19f0:	5b070c00 	.inst	0x5b070c00 ; undefined
    19f4:	0d00000f 	st1	{v15.b}[0], [x0]
    19f8:	0008bc07 	.inst	0x0008bc07 ; undefined
    19fc:	85070e00 	.inst	0x85070e00 ; undefined
    1a00:	0f000009 	.inst	0x0f000009 ; undefined
    1a04:	00097507 	.inst	0x00097507 ; undefined
    1a08:	d7071000 	.inst	0xd7071000 ; undefined
    1a0c:	1100000d 	add	w13, w0, #0x0
    1a10:	000ed707 	.inst	0x000ed707 ; undefined
    1a14:	a0071200 	.inst	0xa0071200 ; undefined
    1a18:	1300000a 	sbfx	w10, w0, #0, #1
    1a1c:	000d5307 	.inst	0x000d5307 ; undefined
    1a20:	8d071400 	.inst	0x8d071400 ; undefined
    1a24:	1500000e 	b	4001a5c <__stack_size+0x3ffda5c>
    1a28:	000a0d07 	.inst	0x000a0d07 ; undefined
    1a2c:	27071600 	.inst	0x27071600 ; undefined
    1a30:	1700000b 	b	fffffffffc001a5c <_sp+0xffffffff9afc1a5c>
    1a34:	000bd107 	.inst	0x000bd107 ; undefined
    1a38:	6b071800 	subs	w0, w0, w7, lsl #6
    1a3c:	1900000f 	stlurb	w15, [x0]
    1a40:	00102207 	.inst	0x00102207 ; undefined
    1a44:	66071a00 	.inst	0x66071a00 ; undefined
    1a48:	1b000009 	madd	w9, w0, w0, w0
    1a4c:	000a9107 	.inst	0x000a9107 ; undefined
    1a50:	71071c00 	subs	w0, w0, #0x1c7
    1a54:	1d00000d 	.inst	0x1d00000d ; undefined
    1a58:	0009c207 	.inst	0x0009c207 ; undefined
    1a5c:	fa071e00 	.inst	0xfa071e00 ; undefined
    1a60:	1f00000a 	fmadd	s10, s0, s0, s0
    1a64:	000e0507 	.inst	0x000e0507 ; undefined
    1a68:	20072000 	.inst	0x20072000 ; undefined
    1a6c:	2100000f 	.inst	0x2100000f ; undefined
    1a70:	000fd407 	.inst	0x000fd407 ; undefined
    1a74:	70072200 	adr	x0, feb7 <__stack_size+0xbeb7>
    1a78:	2300000b 	.inst	0x2300000b ; undefined
    1a7c:	000d8007 	.inst	0x000d8007 ; undefined
    1a80:	2a072400 	orr	w0, w0, w7, lsl #9
    1a84:	2500000d 	cmpge	p13.b, p0/z, z0.b, #0
    1a88:	000a2b07 	.inst	0x000a2b07 ; undefined
    1a8c:	e0072600 	.inst	0xe0072600 ; undefined
    1a90:	27000009 	.inst	0x27000009 ; undefined
    1a94:	000dc807 	.inst	0x000dc807 ; undefined
    1a98:	c8072800 	stxr	w7, x0, [x0]
    1a9c:	2900000e 	stp	w14, w0, [x0]
    1aa0:	000a7307 	.inst	0x000a7307 ; undefined
    1aa4:	09072a00 	.inst	0x09072a00 ; undefined
    1aa8:	2b000010 	adds	w16, w0, w0
    1aac:	000adc07 	.inst	0x000adc07 ; undefined
    1ab0:	a6072c00 	.inst	0xa6072c00 ; undefined
    1ab4:	2d00000e 	stp	s14, s0, [x0]
    1ab8:	0008cc07 	.inst	0x0008cc07 ; undefined
    1abc:	95072e00 	bl	41cd2bc <__stack_size+0x41c92bc>
    1ac0:	2f000009 	.inst	0x2f000009 ; undefined
    1ac4:	000cb307 	.inst	0x000cb307 ; undefined
    1ac8:	e7073000 	.inst	0xe7073000 ; undefined
    1acc:	3100000d 	adds	w13, w0, #0x0
    1ad0:	0009fe07 	.inst	0x0009fe07 ; undefined
    1ad4:	18073200 	ldr	w0, 10114 <__stack_size+0xc114>
    1ad8:	3300000b 	bfxil	w11, w0, #0, #1
    1adc:	000e5007 	.inst	0x000e5007 ; undefined
    1ae0:	22073400 	.inst	0x22073400 ; undefined
    1ae4:	35000009 	cbnz	w9, 1ae4 <__stack_size-0x251c>
    1ae8:	00101307 	.inst	0x00101307 ; undefined
    1aec:	9d073600 	.inst	0x9d073600 ; undefined
    1af0:	3700000b 	tbnz	w11, #0, 1af0 <__stack_size-0x2510>
    1af4:	000c5f07 	.inst	0x000c5f07 ; undefined
    1af8:	62073800 	.inst	0x62073800 ; undefined
    1afc:	3900000d 	strb	w13, [x0]
    1b00:	00094007 	.inst	0x00094007 ; undefined
    1b04:	1c073a00 	ldr	s0, 10244 <__stack_size+0xc244>
    1b08:	3b00000a 	.inst	0x3b00000a ; undefined
    1b0c:	000df607 	.inst	0x000df607 ; undefined
    1b10:	11073c00 	add	w0, w0, #0x1cf
    1b14:	3d00000f 	str	b15, [x0]
    1b18:	000abe07 	.inst	0x000abe07 ; undefined
    1b1c:	44073e00 	sqrdcmlah	z0.b, z16.b, z7.b, #270
    1b20:	3f00000d 	.inst	0x3f00000d ; undefined
    1b24:	000c1007 	.inst	0x000c1007 ; undefined
    1b28:	a7074000 	.inst	0xa7074000 ; undefined
    1b2c:	4100000f 	.inst	0x4100000f ; undefined
    1b30:	00090607 	.inst	0x00090607 ; undefined
    1b34:	d1074200 	sub	x0, x16, #0x1d0
    1b38:	43000009 	.inst	0x43000009 ; undefined
    1b3c:	000ce607 	.inst	0x000ce607 ; undefined
    1b40:	14074400 	b	1d2b40 <__stack_size+0x1ceb40>
    1b44:	4500000e 	.inst	0x4500000e ; undefined
    1b48:	000a6407 	.inst	0x000a6407 ; undefined
    1b4c:	5b074600 	.inst	0x5b074600 ; undefined
    1b50:	47000009 	.inst	0x47000009 ; undefined
    1b54:	000f7a07 	.inst	0x000f7a07 ; undefined
    1b58:	ec074800 	.inst	0xec074800 ; undefined
    1b5c:	49000008 	.inst	0x49000008 ; undefined
    1b60:	000be007 	.inst	0x000be007 ; undefined
    1b64:	c2074a00 	.inst	0xc2074a00 ; undefined
    1b68:	4b00000b 	sub	w11, w0, w0
    1b6c:	000ca407 	.inst	0x000ca407 ; undefined
    1b70:	af074c00 	.inst	0xaf074c00 ; undefined
    1b74:	4d00000d 	st1	{v13.b}[8], [x0]
    1b78:	000eaf07 	.inst	0x000eaf07 ; undefined
    1b7c:	82074e00 	.inst	0x82074e00 ; undefined
    1b80:	4f00000a 	.inst	0x4f00000a ; undefined
    1b84:	000e4107 	.inst	0x000e4107 ; undefined
    1b88:	b3075000 	.inst	0xb3075000 ; undefined
    1b8c:	51000009 	sub	w9, w0, #0x0
    1b90:	000aeb07 	.inst	0x000aeb07 ; undefined
    1b94:	8e075200 	.inst	0x8e075200 ; undefined
    1b98:	5300000b 	ubfx	w11, w0, #0, #1
    1b9c:	00103107 	.inst	0x00103107 ; undefined
    1ba0:	c5075400 	ld1w	{z0.d}, p5/z, [x0, z7.d, uxtw]
    1ba4:	5500000f 	.inst	0x5500000f ; undefined
    1ba8:	00093107 	.inst	0x00093107 ; undefined
    1bac:	09075600 	.inst	0x09075600 ; undefined
    1bb0:	5700000b 	.inst	0x5700000b ; undefined
    1bb4:	000d1b07 	.inst	0x000d1b07 ; undefined
    1bb8:	5f075800 	fmls	h0, h0, v7.h[4]
    1bbc:	5900000e 	stlurh	w14, [x0]
    1bc0:	000aaf07 	.inst	0x000aaf07 ; undefined
    1bc4:	b9075a00 	str	w0, [x16, #1880]
    1bc8:	5b00000d 	.inst	0x5b00000d ; undefined
    1bcc:	000eb907 	.inst	0x000eb907 ; undefined
    1bd0:	98075c00 	ldrsw	x0, 10750 <__stack_size+0xc750>
    1bd4:	5d00000f 	.inst	0x5d00000f ; undefined
    1bd8:	00094f07 	.inst	0x00094f07 ; undefined
    1bdc:	03005e00 	.inst	0x03005e00 ; undefined
    1be0:	00000e9c 	udf	#3740
    1be4:	a603a703 	.inst	0xa603a703 ; undefined
    1be8:	06000000 	.inst	0x06000000 ; undefined
    1bec:	00000f4d 	udf	#3917
    1bf0:	00910407 	.inst	0x00910407 ; undefined
    1bf4:	7e040000 	.inst	0x7e040000 ; undefined
    1bf8:	00032a0e 	.inst	0x00032a0e ; undefined
    1bfc:	0cf50700 	.inst	0x0cf50700 ; undefined
    1c00:	07000000 	.inst	0x07000000 ; undefined
    1c04:	00000ef6 	udf	#3830
    1c08:	0a3a0701 	bic	w1, w24, w26, lsl #1
    1c0c:	07030000 	.inst	0x07030000 ; undefined
    1c10:	00000d8f 	udf	#3471
    1c14:	0f030003 	.inst	0x0f030003 ; undefined
    1c18:	04000009 	add	z9.b, p0/m, z9.b, z0.b
    1c1c:	02ff0383 	.inst	0x02ff0383 ; undefined
    1c20:	36080000 	tbz	w0, #1, 1c20 <__stack_size-0x23e0>
    1c24:	0700000b 	.inst	0x0700000b ; undefined
    1c28:	00801124 	.inst	0x00801124 ; undefined
    1c2c:	b0090000 	adrp	x0, 12002000 <__stack_size+0x11ffe000>
    1c30:	0902fa03 	.inst	0x0902fa03 ; undefined
    1c34:	00000457 	udf	#1111
    1c38:	0007550a 	.inst	0x0007550a ; undefined
    1c3c:	02fb0300 	.inst	0x02fb0300 ; undefined
    1c40:	00008c14 	udf	#35860
    1c44:	430a0000 	.inst	0x430a0000 ; undefined
    1c48:	03000007 	.inst	0x03000007 ; undefined
    1c4c:	8c1402fc 	.inst	0x8c1402fc ; undefined
    1c50:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    1c54:	00073b0a 	.inst	0x00073b0a ; undefined
    1c58:	02fd0300 	.inst	0x02fd0300 ; undefined
    1c5c:	00008c14 	udf	#35860
    1c60:	4c0b0800 	.inst	0x4c0b0800 ; undefined
    1c64:	03005243 	.inst	0x03005243 ; undefined
    1c68:	8c1402fe 	.inst	0x8c1402fe ; undefined
    1c6c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    1c70:	52434d0b 	.inst	0x52434d0b ; undefined
    1c74:	02ff0300 	.inst	0x02ff0300 ; undefined
    1c78:	00008c14 	udf	#35860
    1c7c:	4c0b1000 	.inst	0x4c0b1000 ; undefined
    1c80:	03005253 	.inst	0x03005253 ; undefined
    1c84:	8c140300 	.inst	0x8c140300 ; undefined
    1c88:	14000000 	b	1c88 <__stack_size-0x2378>
    1c8c:	52534d0b 	.inst	0x52534d0b ; undefined
    1c90:	03010300 	.inst	0x03010300 ; undefined
    1c94:	00008c14 	udf	#35860
    1c98:	530b1800 	ubfiz	w0, w0, #21, #7
    1c9c:	03005243 	.inst	0x03005243 ; undefined
    1ca0:	8c140302 	.inst	0x8c140302 ; undefined
    1ca4:	1c000000 	ldr	s0, 1ca4 <__stack_size-0x235c>
    1ca8:	0007900a 	.inst	0x0007900a ; undefined
    1cac:	03030300 	.inst	0x03030300 ; undefined
    1cb0:	00046714 	.inst	0x00046714 ; undefined
    1cb4:	460b2000 	.inst	0x460b2000 ; undefined
    1cb8:	03005241 	.inst	0x03005241 ; undefined
    1cbc:	8c140304 	.inst	0x8c140304 ; undefined
    1cc0:	70000000 	adr	x0, 1cc3 <__stack_size-0x233d>
    1cc4:	5246540b 	.inst	0x5246540b ; undefined
    1cc8:	03050300 	.inst	0x03050300 ; undefined
    1ccc:	00008c14 	udf	#35860
    1cd0:	520b7400 	eor	w0, w0, #0xffe7ffff
    1cd4:	03005746 	.inst	0x03005746 ; undefined
    1cd8:	8c140306 	.inst	0x8c140306 ; undefined
    1cdc:	78000000 	sturh	w0, [x0]
    1ce0:	5253550b 	.inst	0x5253550b ; undefined
    1ce4:	03070300 	.inst	0x03070300 ; undefined
    1ce8:	00008c14 	udf	#35860
    1cec:	540b7c00 	b.eq	18c6c <__stack_size+0x14c6c>  // b.none
    1cf0:	03004c46 	.inst	0x03004c46 ; undefined
    1cf4:	8c140308 	.inst	0x8c140308 ; undefined
    1cf8:	80000000 	.inst	0x80000000 ; undefined
    1cfc:	4c46520b 	.inst	0x4c46520b ; undefined
    1d00:	03090300 	.inst	0x03090300 ; undefined
    1d04:	00008c14 	udf	#35860
    1d08:	4b0a8400 	.inst	0x4b0a8400 ; undefined
    1d0c:	03000007 	.inst	0x03000007 ; undefined
    1d10:	7c14030a 	stur	h10, [x24, #-192]
    1d14:	88000004 	stxr	w0, w4, [x0]
    1d18:	5854480b 	ldr	x11, aa618 <__stack_size+0xa6618>
    1d1c:	030b0300 	.inst	0x030b0300 ; undefined
    1d20:	00008c14 	udf	#35860
    1d24:	9e0aa400 	.inst	0x9e0aa400 ; undefined
    1d28:	03000007 	.inst	0x03000007 ; undefined
    1d2c:	8c14030c 	.inst	0x8c14030c ; undefined
    1d30:	a8000000 	stnp	x0, x0, [x0]
    1d34:	5250430b 	.inst	0x5250430b ; undefined
    1d38:	030d0300 	.inst	0x030d0300 ; undefined
    1d3c:	00008c14 	udf	#35860
    1d40:	0c00ac00 	st1	{v0.1d, v1.1d}, [x0]
    1d44:	0000008c 	udf	#140
    1d48:	00000467 	udf	#1127
    1d4c:	0000300d 	udf	#12301
    1d50:	05001300 	orr	z0.s, z0.s, #0xc07fffff
    1d54:	00000457 	udf	#1111
    1d58:	00008c0c 	udf	#35852
    1d5c:	00047c00 	.inst	0x00047c00 ; undefined
    1d60:	00300d00 	.inst	0x00300d00 ; NYI
    1d64:	00060000 	.inst	0x00060000 ; undefined
    1d68:	00046c05 	.inst	0x00046c05 ; undefined
    1d6c:	07a40e00 	.inst	0x07a40e00 ; undefined
    1d70:	0e030000 	tbl	v0.8b, {v0.16b}, v3.8b
    1d74:	03420203 	.inst	0x03420203 ; undefined
    1d78:	d50f0000 	sys	#7, C0, C0, #0, x0
    1d7c:	0700000c 	.inst	0x0700000c ; undefined
    1d80:	00009104 	udf	#37124
    1d84:	01300500 	.inst	0x01300500 ; undefined
    1d88:	0004b40e 	.inst	0x0004b40e ; undefined
    1d8c:	0f850700 	.inst	0x0f850700 ; undefined
    1d90:	07000000 	.inst	0x07000000 ; undefined
    1d94:	00000bfb 	udf	#3067
    1d98:	0e7a0701 	shadd	v1.4h, v24.4h, v26.4h
    1d9c:	00020000 	.inst	0x00020000 ; undefined
    1da0:	0008db0e 	.inst	0x0008db0e ; undefined
    1da4:	01340500 	.inst	0x01340500 ; undefined
    1da8:	00048e03 	.inst	0x00048e03 ; undefined
    1dac:	0ff60f00 	.inst	0x0ff60f00 ; undefined
    1db0:	04070000 	.inst	0x04070000 ; undefined
    1db4:	00000091 	udf	#145
    1db8:	0e013c05 	umov	w5, v0.b[0]
    1dbc:	000004ed 	udf	#1261
    1dc0:	000c6e07 	.inst	0x000c6e07 ; undefined
    1dc4:	80070000 	.inst	0x80070000 ; undefined
    1dc8:	0100000c 	.inst	0x0100000c ; undefined
    1dcc:	000c9207 	.inst	0x000c9207 ; undefined
    1dd0:	09070200 	.inst	0x09070200 ; undefined
    1dd4:	0300000d 	.inst	0x0300000d ; undefined
    1dd8:	0cc20e00 	.inst	0x0cc20e00 ; undefined
    1ddc:	41050000 	.inst	0x41050000 ; undefined
    1de0:	04c10301 	sub	z1.d, p0/m, z1.d, z24.d
    1de4:	36100000 	tbz	w0, #2, 1de4 <__stack_size-0x221c>
    1de8:	01000003 	.inst	0x01000003 ; undefined
    1dec:	03090a5a 	.inst	0x03090a5a ; undefined
    1df0:	610046c8 	.inst	0x610046c8 ; undefined
    1df4:	00000000 	udf	#0
    1df8:	00012011 	.inst	0x00012011 ; undefined
    1dfc:	02ce0100 	.inst	0x02ce0100 ; undefined
    1e00:	0000005f 	udf	#95
    1e04:	0000051e 	udf	#1310
    1e08:	44110012 	.inst	0x44110012 ; undefined
    1e0c:	01000004 	.inst	0x01000004 ; undefined
    1e10:	005f02cd 	.inst	0x005f02cd ; undefined
    1e14:	05300000 	ext	z0.b, z0.b, z0.b, #128
    1e18:	00120000 	.inst	0x00120000 ; undefined
    1e1c:	000e6e13 	.inst	0x000e6e13 ; undefined
    1e20:	01740500 	.inst	0x01740500 ; undefined
    1e24:	00005309 	udf	#21257
    1e28:	00055600 	.inst	0x00055600 ; undefined
    1e2c:	05561400 	mov	z0.h, p6/z, #-96
    1e30:	80140000 	.inst	0x80140000 ; undefined
    1e34:	14000000 	b	1e34 <__stack_size-0x21cc>
    1e38:	000004ed 	udf	#1261
    1e3c:	0004b414 	.inst	0x0004b414 ; undefined
    1e40:	08150000 	stxrb	w21, w0, [x0]
    1e44:	00000481 	udf	#1153
    1e48:	000f2f16 	.inst	0x000f2f16 ; undefined
    1e4c:	06ed0300 	.inst	0x06ed0300 ; undefined
    1e50:	00030911 	.inst	0x00030911 ; undefined
    1e54:	02ac0100 	.inst	0x02ac0100 ; undefined
    1e58:	0000005f 	udf	#95
    1e5c:	00000576 	udf	#1398
    1e60:	90170012 	adrp	x18, 2e001000 <__stack_size+0x2dffd000>
    1e64:	06000006 	.inst	0x06000006 ; undefined
    1e68:	005f0514 	.inst	0x005f0514 ; undefined
    1e6c:	058d0000 	.inst	0x058d0000 ; undefined
    1e70:	8d140000 	.inst	0x8d140000 ; undefined
    1e74:	12000005 	and	w5, w0, #0x1
    1e78:	9a081500 	.inst	0x9a081500 ; undefined
    1e7c:	02000005 	.inst	0x02000005 ; undefined
    1e80:	011b0801 	.inst	0x011b0801 ; undefined
    1e84:	93180000 	.inst	0x93180000 ; undefined
    1e88:	19000005 	stlurb	w5, [x0]
    1e8c:	00000da1 	udf	#3489
    1e90:	e006ba01 	.inst	0xe006ba01 ; undefined
    1e94:	00610024 	.inst	0x00610024 ; undefined
    1e98:	3c000000 	stur	b0, [x0]
    1e9c:	00000000 	udf	#0
    1ea0:	01000000 	.inst	0x01000000 ; undefined
    1ea4:	0005de9c 	.inst	0x0005de9c ; undefined
    1ea8:	04441100 	.inst	0x04441100 ; undefined
    1eac:	cd010000 	.inst	0xcd010000 ; undefined
    1eb0:	00005f02 	udf	#24322
    1eb4:	0005cf00 	.inst	0x0005cf00 ; undefined
    1eb8:	1a001200 	.inst	0x1a001200 ; undefined
    1ebc:	00000120 	udf	#288
    1ec0:	5f02ce01 	.inst	0x5f02ce01 ; undefined
    1ec4:	12000000 	and	w0, w0, #0x1
    1ec8:	e31b0000 	.inst	0xe31b0000 ; undefined
    1ecc:	0100000f 	.inst	0x0100000f ; undefined
    1ed0:	005309a5 	.inst	0x005309a5 ; undefined
	...
    1edc:	003c0000 	.inst	0x003c0000 ; NYI
    1ee0:	00000000 	udf	#0
    1ee4:	9c010000 	ldr	q0, 3ee4 <__stack_size-0x11c>
    1ee8:	00000669 	udf	#1641
    1eec:	000bf61c 	.inst	0x000bf61c ; undefined
    1ef0:	26a50100 	.inst	0x26a50100 ; undefined
    1ef4:	000002f3 	udf	#755
    1ef8:	1d7c9102 	.inst	0x1d7c9102 ; undefined
    1efc:	00766873 	.inst	0x00766873 ; undefined
    1f00:	6634a501 	.inst	0x6634a501 ; undefined
    1f04:	02000000 	.inst	0x02000000 ; undefined
    1f08:	581c7b91 	ldr	x17, 3ae78 <__stack_size+0x36e78>
    1f0c:	0100000b 	.inst	0x0100000b ; undefined
    1f10:	032a4ca5 	.inst	0x032a4ca5 ; undefined
    1f14:	91020000 	add	x0, x0, #0x80
    1f18:	766c1d74 	.inst	0x766c1d74 ; undefined
    1f1c:	a501006c 	ld1rqw	{z12.s}, p0/z, [x3, x1, lsl #2]
    1f20:	0000665f 	udf	#26207
    1f24:	7a910200 	.inst	0x7a910200 ; undefined
    1f28:	0005321c 	.inst	0x0005321c ; undefined
    1f2c:	6ca50100 	stp	d0, d0, [x8], #-432
    1f30:	00000066 	udf	#102
    1f34:	1c799102 	ldr	s2, f5154 <__stack_size+0xf1154>
    1f38:	0000051c 	udf	#1308
    1f3c:	697ca501 	ldpsw	x1, x9, [x8, #-28]
    1f40:	02000006 	.inst	0x02000006 ; undefined
    1f44:	091a6891 	.inst	0x091a6891 ; undefined
    1f48:	01000003 	.inst	0x01000003 ; undefined
    1f4c:	005f02ac 	.inst	0x005f02ac ; undefined
    1f50:	00120000 	.inst	0x00120000 ; undefined
    1f54:	19081e00 	.inst	0x19081e00 ; undefined
    1f58:	00000b46 	udf	#2886
    1f5c:	50068601 	adr	x1, f01e <__stack_size+0xb01e>
    1f60:	00610024 	.inst	0x00610024 ; undefined
    1f64:	90000000 	adrp	x0, 1000 <__stack_size-0x3000>
    1f68:	00000000 	udf	#0
    1f6c:	01000000 	.inst	0x01000000 ; undefined
    1f70:	0006999c 	.inst	0x0006999c ; undefined
    1f74:	0e321f00 	and	v0.8b, v24.8b, v18.8b
    1f78:	8c010000 	.inst	0x8c010000 ; undefined
    1f7c:	00069911 	.inst	0x00069911 ; undefined
    1f80:	60910200 	.inst	0x60910200 ; undefined
    1f84:	058d0c00 	.inst	0x058d0c00 ; undefined
    1f88:	06a90000 	.inst	0x06a90000 ; undefined
    1f8c:	300d0000 	adr	x0, 1bf8d <__stack_size+0x17f8d>
    1f90:	03000000 	.inst	0x03000000 ; undefined
    1f94:	0d392000 	.inst	0x0d392000 ; undefined
    1f98:	79010000 	strh	w0, [x0, #128]
    1f9c:	00000006 	udf	#6
    1fa0:	00000000 	udf	#0
    1fa4:	00001c00 	udf	#7168
    1fa8:	00000000 	udf	#0
    1fac:	209c0100 	.inst	0x209c0100 ; undefined
    1fb0:	00000bac 	udf	#2988
    1fb4:	00066701 	.inst	0x00066701 ; undefined
    1fb8:	00000000 	udf	#0
    1fbc:	1c000000 	ldr	s0, 1fbc <__stack_size-0x2044>
    1fc0:	00000000 	udf	#0
    1fc4:	01000000 	.inst	0x01000000 ; undefined
    1fc8:	1297009c 	mov	w28, #0xffff47fb            	// #-47109
    1fcc:	00040000 	.inst	0x00040000 ; undefined
    1fd0:	00000b9b 	udf	#2971
    1fd4:	02200108 	.inst	0x02200108 ; undefined
    1fd8:	1b0c0000 	madd	w0, w0, w12, w0
    1fdc:	2f000019 	.inst	0x2f000019 ; undefined
    1fe0:	f0000000 	adrp	x0, 4000 <__stack_size>
    1fe4:	00000004 	udf	#4
    1fe8:	00000000 	udf	#0
    1fec:	1c000000 	ldr	s0, 1fec <__stack_size-0x2014>
    1ff0:	02000014 	.inst	0x02000014 ; undefined
    1ff4:	017c0708 	.inst	0x017c0708 ; undefined
    1ff8:	08020000 	stxrb	w2, w0, [x0]
    1ffc:	0001cb05 	.inst	0x0001cb05 ; undefined
    2000:	07040200 	.inst	0x07040200 ; undefined
    2004:	00000181 	udf	#385
    2008:	46051002 	.inst	0x46051002 ; undefined
    200c:	02000001 	.inst	0x02000001 ; undefined
    2010:	01000710 	.inst	0x01000710 ; undefined
    2014:	01020000 	.inst	0x01020000 ; undefined
    2018:	00011406 	.inst	0x00011406 ; undefined
    201c:	05020200 	orr	z0.d, z0.d, #0x1ffff
    2020:	000001d4 	udf	#468
    2024:	69050403 	stgp	x3, x1, [x0, #160]
    2028:	0400746e 	mls	z14.b, p5/m, z3.b, z0.b
    202c:	00000663 	udf	#1635
    2030:	6d175902 	stp	d2, d22, [x8, #368]
    2034:	02000000 	.inst	0x02000000 ; undefined
    2038:	01120801 	.inst	0x01120801 ; undefined
    203c:	15040000 	b	410203c <__stack_size+0x40fe03c>
    2040:	02000013 	.inst	0x02000013 ; undefined
    2044:	0080185a 	.inst	0x0080185a ; undefined
    2048:	02020000 	.inst	0x02020000 ; undefined
    204c:	00013307 	.inst	0x00013307 ; undefined
    2050:	07b40400 	.inst	0x07b40400 ; undefined
    2054:	5b020000 	.inst	0x5b020000 ; undefined
    2058:	00003716 	udf	#14102
    205c:	00870500 	.inst	0x00870500 ; undefined
    2060:	08020000 	stxrb	w2, w0, [x0]
    2064:	0001c605 	.inst	0x0001c605 ; undefined
    2068:	07080200 	.inst	0x07080200 ; undefined
    206c:	00000177 	udf	#375
    2070:	37040706 	tbnz	w6, #0, ffffffffffffa150 <_sp+0xffffffff9efba150>
    2074:	03000000 	.inst	0x03000000 ; undefined
    2078:	c20e0115 	.inst	0xc20e0115 ; undefined
    207c:	07000000 	.inst	0x07000000 ; undefined
    2080:	0000152a 	udf	#5418
    2084:	169a0700 	b	fffffffffa683c84 <_sp+0xffffffff99643c84>
    2088:	00010000 	.inst	0x00010000 ; undefined
    208c:	00141908 	.inst	0x00141908 ; undefined
    2090:	01180300 	.inst	0x01180300 ; undefined
    2094:	0000a603 	udf	#42499
    2098:	03040900 	.inst	0x03040900 ; undefined
    209c:	c8090233 	stxr	w9, x19, [x17]
    20a0:	0a000001 	and	w1, w0, w0
    20a4:	000010ca 	udf	#4298
    20a8:	0e023503 	.inst	0x0e023503 ; undefined
    20ac:	00000087 	udf	#135
    20b0:	001f0104 	.inst	0x001f0104 ; undefined
    20b4:	0014a50a 	.inst	0x0014a50a ; undefined
    20b8:	02360300 	.inst	0x02360300 ; undefined
    20bc:	0000870e 	udf	#34574
    20c0:	1d020400 	.inst	0x1d020400 ; undefined
    20c4:	14720a00 	b	1c848c4 <__stack_size+0x1c808c4>
    20c8:	37030000 	tbnz	w0, #0, 80c8 <__stack_size+0x40c8>
    20cc:	00870e02 	.inst	0x00870e02 ; undefined
    20d0:	01040000 	.inst	0x01040000 ; undefined
    20d4:	5d0a001c 	.inst	0x5d0a001c ; undefined
    20d8:	03000018 	.inst	0x03000018 ; undefined
    20dc:	870e0238 	.inst	0x870e0238 ; undefined
    20e0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    20e4:	0a001b01 	and	w1, w24, w0, lsl #6
    20e8:	0000179f 	udf	#6047
    20ec:	0e023903 	zip1	v3.8b, v8.8b, v2.8b
    20f0:	00000087 	udf	#135
    20f4:	001a0104 	.inst	0x001a0104 ; undefined
    20f8:	0010510a 	.inst	0x0010510a ; undefined
    20fc:	023a0300 	.inst	0x023a0300 ; undefined
    2100:	0000870e 	udf	#34574
    2104:	19010400 	.inst	0x19010400 ; undefined
    2108:	19a30a00 	.inst	0x19a30a00 ; undefined
    210c:	3b030000 	.inst	0x3b030000 ; undefined
    2110:	00870e02 	.inst	0x00870e02 ; undefined
    2114:	01040000 	.inst	0x01040000 ; undefined
    2118:	220a0018 	.inst	0x220a0018 ; undefined
    211c:	03000016 	.inst	0x03000016 ; undefined
    2120:	870e023c 	.inst	0x870e023c ; undefined
    2124:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2128:	0a001701 	and	w1, w24, w0, lsl #5
    212c:	0000169f 	udf	#5791
    2130:	0e023d03 	umov	w3, v8.h[0]
    2134:	00000087 	udf	#135
    2138:	00160104 	.inst	0x00160104 ; undefined
    213c:	00153b0a 	.inst	0x00153b0a ; undefined
    2140:	023e0300 	.inst	0x023e0300 ; undefined
    2144:	0000870e 	udf	#34574
    2148:	15010400 	b	4043148 <__stack_size+0x403f148>
    214c:	17ad0a00 	b	fffffffffeb4494c <_sp+0xffffffff9db0494c>
    2150:	3f030000 	.inst	0x3f030000 ; undefined
    2154:	00870e02 	.inst	0x00870e02 ; undefined
    2158:	01040000 	.inst	0x01040000 ; undefined
    215c:	a10a0014 	.inst	0xa10a0014 ; undefined
    2160:	03000011 	.inst	0x03000011 ; undefined
    2164:	870e0240 	.inst	0x870e0240 ; undefined
    2168:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    216c:	0a001004 	and	w4, w0, w0, lsl #4
    2170:	000016c1 	udf	#5825
    2174:	0e024103 	tbl	v3.8b, {v8.16b-v10.16b}, v2.8b
    2178:	00000087 	udf	#135
    217c:	00060a04 	.inst	0x00060a04 ; undefined
    2180:	0010a50a 	.inst	0x0010a50a ; undefined
    2184:	02420300 	.inst	0x02420300 ; undefined
    2188:	0000870e 	udf	#34574
    218c:	00060400 	.inst	0x00060400 ; undefined
    2190:	23080000 	.inst	0x23080000 ; undefined
    2194:	03000015 	.inst	0x03000015 ; undefined
    2198:	cf020243 	.inst	0xcf020243 ; undefined
    219c:	05000000 	orr	z0.s, z0.s, #0x1
    21a0:	000001c8 	udf	#456
    21a4:	45030409 	.inst	0x45030409 ; undefined
    21a8:	02290902 	.inst	0x02290902 ; undefined
    21ac:	b90a0000 	str	w0, [x0, #2560]
    21b0:	03000011 	.inst	0x03000011 ; undefined
    21b4:	870b0247 	.inst	0x870b0247 ; undefined
    21b8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    21bc:	0a00160a 	and	w10, w16, w0, lsl #5
    21c0:	00001986 	udf	#6534
    21c4:	0b024803 	add	w3, w0, w2, lsl #18
    21c8:	00000087 	udf	#135
    21cc:	00150104 	.inst	0x00150104 ; undefined
    21d0:	00180c0a 	.inst	0x00180c0a ; undefined
    21d4:	02490300 	.inst	0x02490300 ; undefined
    21d8:	0000870b 	udf	#34571
    21dc:	14010400 	b	431dc <__stack_size+0x3f1dc>
    21e0:	11b40a00 	.inst	0x11b40a00 ; undefined
    21e4:	4a030000 	eor	w0, w0, w3
    21e8:	00870b02 	.inst	0x00870b02 ; undefined
    21ec:	14040000 	b	1021ec <__stack_size+0xfe1ec>
    21f0:	08000000 	stxrb	w0, w0, [x0]
    21f4:	000015ca 	udf	#5578
    21f8:	02024b03 	.inst	0x02024b03 ; undefined
    21fc:	000001da 	udf	#474
    2200:	00022905 	.inst	0x00022905 ; undefined
    2204:	03040900 	.inst	0x03040900 ; undefined
    2208:	6809024d 	.inst	0x6809024d ; undefined
    220c:	0a000002 	and	w2, w0, w0
    2210:	0000129b 	udf	#4763
    2214:	0b024f03 	add	w3, w24, w2, lsl #19
    2218:	00000087 	udf	#135
    221c:	00160a04 	.inst	0x00160a04 ; undefined
    2220:	0014010a 	.inst	0x0014010a ; undefined
    2224:	02500300 	.inst	0x02500300 ; undefined
    2228:	0000870b 	udf	#34571
    222c:	00160400 	.inst	0x00160400 ; undefined
    2230:	f9080000 	str	x0, [x0, #4096]
    2234:	03000017 	.inst	0x03000017 ; undefined
    2238:	3b020251 	.inst	0x3b020251 ; undefined
    223c:	05000002 	orr	z2.s, z2.s, #0x1
    2240:	00000268 	udf	#616
    2244:	53030409 	ubfiz	w9, w0, #29, #2
    2248:	02da0902 	.inst	0x02da0902 ; undefined
    224c:	440b0000 	.inst	0x440b0000 ; undefined
    2250:	03005441 	.inst	0x03005441 ; undefined
    2254:	870b0255 	.inst	0x870b0255 ; undefined
    2258:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    225c:	0b001808 	add	w8, w0, w0, lsl #6
    2260:	00444d43 	.inst	0x00444d43 ; undefined
    2264:	0b025603 	add	w3, w16, w2, lsl #21
    2268:	00000087 	udf	#135
    226c:	00170104 	.inst	0x00170104 ; undefined
    2270:	00159d0a 	.inst	0x00159d0a ; undefined
    2274:	02570300 	.inst	0x02570300 ; undefined
    2278:	0000870b 	udf	#34571
    227c:	16010400 	b	fffffffff804327c <_sp+0xffffffff9700327c>
    2280:	176c0a00 	b	fffffffffdb04a80 <_sp+0xffffffff9cac4a80>
    2284:	58030000 	ldr	x0, 8284 <__stack_size+0x4284>
    2288:	00870b02 	.inst	0x00870b02 ; undefined
    228c:	01040000 	.inst	0x01040000 ; undefined
    2290:	a20a0015 	.inst	0xa20a0015 ; undefined
    2294:	03000018 	.inst	0x03000018 ; undefined
    2298:	870b0259 	.inst	0x870b0259 ; undefined
    229c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    22a0:	00000015 	udf	#21
    22a4:	00104008 	.inst	0x00104008 ; undefined
    22a8:	025a0300 	.inst	0x025a0300 ; undefined
    22ac:	00027a02 	.inst	0x00027a02 ; undefined
    22b0:	03040c00 	.inst	0x03040c00 ; undefined
    22b4:	0c09025c 	.inst	0x0c09025c ; undefined
    22b8:	0d000003 	st1	{v3.b}[0], [x0]
    22bc:	006c6c61 	.inst	0x006c6c61 ; undefined
    22c0:	0b025e03 	add	w3, w16, w2, lsl #23
    22c4:	00000087 	udf	#135
    22c8:	0011fc0e 	.inst	0x0011fc0e ; undefined
    22cc:	025f0300 	.inst	0x025f0300 ; undefined
    22d0:	0002da13 	.inst	0x0002da13 ; undefined
    22d4:	b5080000 	cbnz	x0, 122d4 <__stack_size+0xe2d4>
    22d8:	03000016 	.inst	0x03000016 ; undefined
    22dc:	e7020260 	.inst	0xe7020260 ; undefined
    22e0:	05000002 	orr	z2.s, z2.s, #0x1
    22e4:	0000030c 	udf	#780
    22e8:	62030409 	.inst	0x62030409 ; undefined
    22ec:	04390902 	.inst	0x04390902 ; undefined
    22f0:	d00a0000 	adrp	x0, 14004000 <__stack_size+0x14000000>
    22f4:	03000012 	.inst	0x03000012 ; undefined
    22f8:	870b0264 	.inst	0x870b0264 ; undefined
    22fc:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2300:	0a001f01 	and	w1, w24, w0, lsl #7
    2304:	000015a2 	udf	#5538
    2308:	0b026503 	add	w3, w8, w2, lsl #25
    230c:	00000087 	udf	#135
    2310:	001e0104 	.inst	0x001e0104 ; undefined
    2314:	0016900a 	.inst	0x0016900a ; undefined
    2318:	02660300 	.inst	0x02660300 ; undefined
    231c:	0000870b 	udf	#34571
    2320:	1d010400 	.inst	0x1d010400 ; undefined
    2324:	18eb0a00 	ldr	w0, fffffffffffd8464 <_sp+0xffffffff9ef98464>
    2328:	67030000 	.inst	0x67030000 ; undefined
    232c:	00870b02 	.inst	0x00870b02 ; undefined
    2330:	01040000 	.inst	0x01040000 ; undefined
    2334:	ff0a001c 	.inst	0xff0a001c ; undefined
    2338:	03000014 	.inst	0x03000014 ; undefined
    233c:	870b0268 	.inst	0x870b0268 ; undefined
    2340:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2344:	0a001b01 	and	w1, w24, w0, lsl #6
    2348:	00001236 	udf	#4662
    234c:	0b026903 	add	w3, w8, w2, lsl #26
    2350:	00000087 	udf	#135
    2354:	001a0104 	.inst	0x001a0104 ; undefined
    2358:	00149b0a 	.inst	0x00149b0a ; undefined
    235c:	026a0300 	.inst	0x026a0300 ; undefined
    2360:	0000870b 	udf	#34571
    2364:	19010400 	.inst	0x19010400 ; undefined
    2368:	12610a00 	.inst	0x12610a00 ; undefined
    236c:	6b030000 	subs	w0, w0, w3
    2370:	00870b02 	.inst	0x00870b02 ; undefined
    2374:	01040000 	.inst	0x01040000 ; undefined
    2378:	2b0a0018 	adds	w24, w0, w10
    237c:	03000018 	.inst	0x03000018 ; undefined
    2380:	870b026c 	.inst	0x870b026c ; undefined
    2384:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2388:	0a001701 	and	w1, w24, w0, lsl #5
    238c:	0000142d 	udf	#5165
    2390:	0b026d03 	add	w3, w8, w2, lsl #27
    2394:	00000087 	udf	#135
    2398:	00160104 	.inst	0x00160104 ; undefined
    239c:	0012fc0a 	.inst	0x0012fc0a ; undefined
    23a0:	026e0300 	.inst	0x026e0300 ; undefined
    23a4:	0000870b 	udf	#34571
    23a8:	15010400 	b	40433a8 <__stack_size+0x403f3a8>
    23ac:	12f10a00 	.inst	0x12f10a00 ; undefined
    23b0:	6f030000 	.inst	0x6f030000 ; undefined
    23b4:	00870b02 	.inst	0x00870b02 ; undefined
    23b8:	01040000 	.inst	0x01040000 ; undefined
    23bc:	940a0014 	bl	28240c <__stack_size+0x27e40c>
    23c0:	03000018 	.inst	0x03000018 ; undefined
    23c4:	870b0270 	.inst	0x870b0270 ; undefined
    23c8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    23cc:	0a001301 	and	w1, w24, w0, lsl #4
    23d0:	0000139c 	udf	#5020
    23d4:	0b027103 	add	w3, w8, w2, lsl #28
    23d8:	00000087 	udf	#135
    23dc:	00120104 	.inst	0x00120104 ; undefined
    23e0:	0012010a 	.inst	0x0012010a ; undefined
    23e4:	02720300 	.inst	0x02720300 ; undefined
    23e8:	0000870b 	udf	#34571
    23ec:	11010400 	add	w0, w0, #0x41
    23f0:	14010a00 	b	44bf0 <__stack_size+0x40bf0>
    23f4:	73030000 	.inst	0x73030000 ; undefined
    23f8:	00870b02 	.inst	0x00870b02 ; undefined
    23fc:	11040000 	add	w0, w0, #0x100
    2400:	08000000 	stxrb	w0, w0, [x0]
    2404:	0000178d 	udf	#6029
    2408:	02027403 	.inst	0x02027403 ; undefined
    240c:	0000031e 	udf	#798
    2410:	7603040c 	.inst	0x7603040c ; undefined
    2414:	046b0902 	.inst	0x046b0902 ; undefined
    2418:	610d0000 	.inst	0x610d0000 ; undefined
    241c:	03006c6c 	.inst	0x03006c6c ; undefined
    2420:	870b0278 	.inst	0x870b0278 ; undefined
    2424:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    2428:	000011fc 	udf	#4604
    242c:	14027903 	b	a0838 <__stack_size+0x9c838>
    2430:	00000439 	udf	#1081
    2434:	13080800 	sbfiz	w0, w0, #24, #3
    2438:	7a030000 	sbcs	w0, w0, w3
    243c:	04460202 	.inst	0x04460202 ; undefined
    2440:	6b050000 	subs	w0, w0, w5
    2444:	09000004 	.inst	0x09000004 ; undefined
    2448:	027c0304 	.inst	0x027c0304 ; undefined
    244c:	00059809 	.inst	0x00059809 ; undefined
    2450:	11620a00 	add	w0, w16, #0x882, lsl #12
    2454:	7e030000 	.inst	0x7e030000 ; undefined
    2458:	00870b02 	.inst	0x00870b02 ; undefined
    245c:	01040000 	.inst	0x01040000 ; undefined
    2460:	a70a001f 	.inst	0xa70a001f ; undefined
    2464:	03000018 	.inst	0x03000018 ; undefined
    2468:	870b027f 	.inst	0x870b027f ; undefined
    246c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2470:	0a001e01 	and	w1, w16, w0, lsl #7
    2474:	00001359 	udf	#4953
    2478:	0b028003 	.inst	0x0b028003 ; undefined
    247c:	00000087 	udf	#135
    2480:	001d0104 	.inst	0x001d0104 ; undefined
    2484:	0018f50a 	.inst	0x0018f50a ; undefined
    2488:	02810300 	.inst	0x02810300 ; undefined
    248c:	0000870b 	udf	#34571
    2490:	1c010400 	ldr	s0, 4510 <__stack_size+0x510>
    2494:	18520a00 	ldr	w0, a65d4 <__stack_size+0xa25d4>
    2498:	82030000 	.inst	0x82030000 ; undefined
    249c:	00870b02 	.inst	0x00870b02 ; undefined
    24a0:	01040000 	.inst	0x01040000 ; undefined
    24a4:	ec0a001b 	.inst	0xec0a001b ; undefined
    24a8:	03000013 	.inst	0x03000013 ; undefined
    24ac:	870b0283 	.inst	0x870b0283 ; undefined
    24b0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    24b4:	0a001a01 	and	w1, w16, w0, lsl #6
    24b8:	00001783 	udf	#6019
    24bc:	0b028403 	.inst	0x0b028403 ; undefined
    24c0:	00000087 	udf	#135
    24c4:	00190104 	.inst	0x00190104 ; undefined
    24c8:	0014680a 	.inst	0x0014680a ; undefined
    24cc:	02850300 	.inst	0x02850300 ; undefined
    24d0:	0000870b 	udf	#34571
    24d4:	18010400 	ldr	w0, 4554 <__stack_size+0x554>
    24d8:	16620a00 	b	fffffffff9884cd8 <_sp+0xffffffff98844cd8>
    24dc:	86030000 	.inst	0x86030000 ; undefined
    24e0:	00870b02 	.inst	0x00870b02 ; undefined
    24e4:	01040000 	.inst	0x01040000 ; undefined
    24e8:	0e0a0017 	tbl	v23.8b, {v0.16b}, v10.8b
    24ec:	03000014 	.inst	0x03000014 ; undefined
    24f0:	870b0287 	.inst	0x870b0287 ; undefined
    24f4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    24f8:	0a001601 	and	w1, w16, w0, lsl #5
    24fc:	0000145c 	udf	#5212
    2500:	0b028803 	.inst	0x0b028803 ; undefined
    2504:	00000087 	udf	#135
    2508:	00150104 	.inst	0x00150104 ; undefined
    250c:	0015300a 	.inst	0x0015300a ; undefined
    2510:	02890300 	.inst	0x02890300 ; undefined
    2514:	0000870b 	udf	#34571
    2518:	14010400 	b	43518 <__stack_size+0x3f518>
    251c:	136f0a00 	.inst	0x136f0a00 ; undefined
    2520:	8a030000 	and	x0, x0, x3
    2524:	00870b02 	.inst	0x00870b02 ; undefined
    2528:	01040000 	.inst	0x01040000 ; undefined
    252c:	1b0a0013 	madd	w19, w0, w10, w0
    2530:	03000012 	.inst	0x03000012 ; undefined
    2534:	870b028b 	.inst	0x870b028b ; undefined
    2538:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    253c:	0a001201 	and	w1, w16, w0, lsl #4
    2540:	0000164f 	udf	#5711
    2544:	0b028c03 	.inst	0x0b028c03 ; undefined
    2548:	00000087 	udf	#135
    254c:	00110104 	.inst	0x00110104 ; undefined
    2550:	0014010a 	.inst	0x0014010a ; undefined
    2554:	028d0300 	.inst	0x028d0300 ; undefined
    2558:	0000870b 	udf	#34571
    255c:	00110400 	.inst	0x00110400 ; undefined
    2560:	da080000 	sbc	x0, x0, x8
    2564:	03000013 	.inst	0x03000013 ; undefined
    2568:	7d02028e 	str	h14, [x20, #256]
    256c:	0c000004 	st4	{v4.8b-v7.8b}, [x0]
    2570:	02900304 	.inst	0x02900304 ; undefined
    2574:	0005ca09 	.inst	0x0005ca09 ; undefined
    2578:	6c610d00 	ldnp	d0, d3, [x8, #-496]
    257c:	9203006c 	and	x12, x3, #0x2000000020000000
    2580:	00870b02 	.inst	0x00870b02 ; undefined
    2584:	fc0e0000 	stur	d0, [x0, #224]
    2588:	03000011 	.inst	0x03000011 ; undefined
    258c:	98140293 	ldrsw	x19, 2a5dc <__stack_size+0x265dc>
    2590:	00000005 	udf	#5
    2594:	00175f08 	.inst	0x00175f08 ; undefined
    2598:	02940300 	.inst	0x02940300 ; undefined
    259c:	0005a502 	.inst	0x0005a502 ; undefined
    25a0:	05ca0500 	.inst	0x05ca0500 ; undefined
    25a4:	04090000 	umax	z0.b, p0/m, z0.b, z0.b
    25a8:	09029603 	.inst	0x09029603 ; undefined
    25ac:	00000609 	udf	#1545
    25b0:	0016190a 	.inst	0x0016190a ; undefined
    25b4:	02980300 	.inst	0x02980300 ; undefined
    25b8:	0000870b 	udf	#34571
    25bc:	1f010400 	fmadd	s0, s0, s1, s1
    25c0:	18a20a00 	ldr	w0, fffffffffff46700 <_sp+0xffffffff9ef06700>
    25c4:	99030000 	stlur	w0, [x0, #48]
    25c8:	00870b02 	.inst	0x00870b02 ; undefined
    25cc:	1f040000 	fmadd	s0, s0, s4, s0
    25d0:	08000000 	stxrb	w0, w0, [x0]
    25d4:	00001713 	udf	#5907
    25d8:	02029a03 	.inst	0x02029a03 ; undefined
    25dc:	000005dc 	udf	#1500
    25e0:	00060905 	.inst	0x00060905 ; undefined
    25e4:	03040900 	.inst	0x03040900 ; undefined
    25e8:	7b09029d 	.inst	0x7b09029d ; undefined
    25ec:	0a000006 	and	w6, w0, w0
    25f0:	00001633 	udf	#5683
    25f4:	0b029f03 	.inst	0x0b029f03 ; undefined
    25f8:	00000087 	udf	#135
    25fc:	001f0104 	.inst	0x001f0104 ; undefined
    2600:	0014ea0a 	.inst	0x0014ea0a ; undefined
    2604:	02a00300 	.inst	0x02a00300 ; undefined
    2608:	0000870b 	udf	#34571
    260c:	1e010400 	.inst	0x1e010400 ; undefined
    2610:	110f0a00 	add	w0, w16, #0x3c2
    2614:	a1030000 	.inst	0xa1030000 ; undefined
    2618:	00870b02 	.inst	0x00870b02 ; undefined
    261c:	01040000 	.inst	0x01040000 ; undefined
    2620:	3f0a001d 	.inst	0x3f0a001d ; undefined
    2624:	03000013 	.inst	0x03000013 ; undefined
    2628:	870b02a2 	.inst	0x870b02a2 ; undefined
    262c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2630:	0a001c01 	and	w1, w0, w0, lsl #7
    2634:	000018a2 	udf	#6306
    2638:	0b02a303 	.inst	0x0b02a303 ; undefined
    263c:	00000087 	udf	#135
    2640:	00001c04 	udf	#7172
    2644:	11050800 	add	w0, w0, #0x142
    2648:	a4030000 	ld1rqb	{z0.b}, p0/z, [x0, x3]
    264c:	061b0202 	.inst	0x061b0202 ; undefined
    2650:	7b050000 	.inst	0x7b050000 ; undefined
    2654:	09000006 	.inst	0x09000006 ; undefined
    2658:	02a60304 	.inst	0x02a60304 ; undefined
    265c:	00077509 	.inst	0x00077509 ; undefined
    2660:	16640a00 	b	fffffffff9904e60 <_sp+0xffffffff988c4e60>
    2664:	a8030000 	stnp	x0, x0, [x0, #48]
    2668:	00870b02 	.inst	0x00870b02 ; undefined
    266c:	01040000 	.inst	0x01040000 ; undefined
    2670:	810a001f 	.inst	0x810a001f ; undefined
    2674:	03000019 	.inst	0x03000019 ; undefined
    2678:	870b02a9 	.inst	0x870b02a9 ; undefined
    267c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2680:	0b001e01 	add	w1, w16, w0, lsl #7
    2684:	00454654 	.inst	0x00454654 ; undefined
    2688:	0b02aa03 	.inst	0x0b02aa03 ; undefined
    268c:	00000087 	udf	#135
    2690:	001d0104 	.inst	0x001d0104 ; undefined
    2694:	0011af0a 	.inst	0x0011af0a ; undefined
    2698:	02ab0300 	.inst	0x02ab0300 ; undefined
    269c:	0000870b 	udf	#34571
    26a0:	1c010400 	ldr	s0, 4720 <__stack_size+0x720>
    26a4:	46520b00 	.inst	0x46520b00 ; undefined
    26a8:	ac030046 	stnp	q6, q0, [x2, #96]
    26ac:	00870b02 	.inst	0x00870b02 ; undefined
    26b0:	01040000 	.inst	0x01040000 ; undefined
    26b4:	de0a001b 	.inst	0xde0a001b ; undefined
    26b8:	03000015 	.inst	0x03000015 ; undefined
    26bc:	870b02ad 	.inst	0x870b02ad ; undefined
    26c0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    26c4:	0a001a01 	and	w1, w16, w0, lsl #6
    26c8:	000017c4 	udf	#6084
    26cc:	0b02ae03 	.inst	0x0b02ae03 ; undefined
    26d0:	00000087 	udf	#135
    26d4:	00190104 	.inst	0x00190104 ; undefined
    26d8:	0018140a 	.inst	0x0018140a ; undefined
    26dc:	02af0300 	.inst	0x02af0300 ; undefined
    26e0:	0000870b 	udf	#34571
    26e4:	18010400 	ldr	w0, 4764 <__stack_size+0x764>
    26e8:	16fd0a00 	b	fffffffffbf44ee8 <_sp+0xffffffff9af04ee8>
    26ec:	b0030000 	adrp	x0, 6003000 <__stack_size+0x5fff000>
    26f0:	00870b02 	.inst	0x00870b02 ; undefined
    26f4:	01040000 	.inst	0x01040000 ; undefined
    26f8:	b10a0017 	adds	x23, x0, #0x280
    26fc:	03000018 	.inst	0x03000018 ; undefined
    2700:	870b02b1 	.inst	0x870b02b1 ; undefined
    2704:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2708:	0a001601 	and	w1, w16, w0, lsl #5
    270c:	0000114c 	udf	#4428
    2710:	0b02b203 	.inst	0x0b02b203 ; undefined
    2714:	00000087 	udf	#135
    2718:	00150104 	.inst	0x00150104 ; undefined
    271c:	0013270a 	.inst	0x0013270a ; undefined
    2720:	02b30300 	.inst	0x02b30300 ; undefined
    2724:	0000870b 	udf	#34571
    2728:	14010400 	b	43728 <__stack_size+0x3f728>
    272c:	18a20a00 	ldr	w0, fffffffffff4686c <_sp+0xffffffff9ef0686c>
    2730:	b4030000 	cbz	x0, 8730 <__stack_size+0x4730>
    2734:	00870b02 	.inst	0x00870b02 ; undefined
    2738:	14040000 	b	102738 <__stack_size+0xfe738>
    273c:	08000000 	stxrb	w0, w0, [x0]
    2740:	000014f0 	udf	#5360
    2744:	0202b503 	.inst	0x0202b503 ; undefined
    2748:	0000068d 	udf	#1677
    274c:	b703040c 	tbnz	x12, #32, 87cc <__stack_size+0x47cc>
    2750:	07a70902 	.inst	0x07a70902 ; undefined
    2754:	610d0000 	.inst	0x610d0000 ; undefined
    2758:	03006c6c 	.inst	0x03006c6c ; undefined
    275c:	870b02b9 	.inst	0x870b02b9 ; undefined
    2760:	0e000000 	tbl	v0.8b, {v0.16b}, v0.8b
    2764:	000011fc 	udf	#4604
    2768:	1102ba03 	add	w3, w16, #0xae
    276c:	00000775 	udf	#1909
    2770:	15190800 	b	4644770 <__stack_size+0x4640770>
    2774:	bb030000 	.inst	0xbb030000 ; undefined
    2778:	07820202 	.inst	0x07820202 ; undefined
    277c:	a7050000 	.inst	0xa7050000 ; undefined
    2780:	09000007 	.inst	0x09000007 ; undefined
    2784:	02bd0304 	.inst	0x02bd0304 ; undefined
    2788:	0007f709 	.inst	0x0007f709 ; undefined
    278c:	150a0a00 	b	4284f8c <__stack_size+0x4280f8c>
    2790:	bf030000 	.inst	0xbf030000 ; undefined
    2794:	00870b02 	.inst	0x00870b02 ; undefined
    2798:	10040000 	adr	x0, a798 <__stack_size+0x6798>
    279c:	ba0a0010 	adcs	x16, x0, x10
    27a0:	03000014 	.inst	0x03000014 ; undefined
    27a4:	870b02c0 	.inst	0x870b02c0 ; undefined
    27a8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    27ac:	0a000808 	and	w8, w0, w0, lsl #2
    27b0:	000018a2 	udf	#6306
    27b4:	0b02c103 	.inst	0x0b02c103 ; undefined
    27b8:	00000087 	udf	#135
    27bc:	00000804 	udf	#2052
    27c0:	15eb0800 	b	7ac47c0 <__stack_size+0x7ac07c0>
    27c4:	c2030000 	.inst	0xc2030000 ; undefined
    27c8:	07b90202 	.inst	0x07b90202 ; undefined
    27cc:	f7050000 	.inst	0xf7050000 ; undefined
    27d0:	09000007 	.inst	0x09000007 ; undefined
    27d4:	02c40304 	.inst	0x02c40304 ; undefined
    27d8:	00084709 	.inst	0x00084709 ; undefined
    27dc:	124f0a00 	.inst	0x124f0a00 ; undefined
    27e0:	c6030000 	.inst	0xc6030000 ; undefined
    27e4:	00870b02 	.inst	0x00870b02 ; undefined
    27e8:	01040000 	.inst	0x01040000 ; undefined
    27ec:	8e0a001f 	.inst	0x8e0a001f ; undefined
    27f0:	03000015 	.inst	0x03000015 ; undefined
    27f4:	870b02c7 	.inst	0x870b02c7 ; undefined
    27f8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    27fc:	0a001e01 	and	w1, w16, w0, lsl #7
    2800:	000018a2 	udf	#6306
    2804:	0b02c803 	.inst	0x0b02c803 ; undefined
    2808:	00000087 	udf	#135
    280c:	00001e04 	udf	#7684
    2810:	16d00800 	b	fffffffffb404810 <_sp+0xffffffff9a3c4810>
    2814:	c9030000 	.inst	0xc9030000 ; undefined
    2818:	08090202 	stxrb	w9, w2, [x16]
    281c:	47050000 	.inst	0x47050000 ; undefined
    2820:	09000008 	.inst	0x09000008 ; undefined
    2824:	02ce03b4 	.inst	0x02ce03b4 ; undefined
    2828:	000a4e09 	.inst	0x000a4e09 ; undefined
    282c:	109e0f00 	adr	x0, fffffffffff3ea0c <_sp+0xffffffff9eefea0c>
    2830:	cf030000 	.inst	0xcf030000 ; undefined
    2834:	01d50f02 	.inst	0x01d50f02 ; undefined
    2838:	0f000000 	.inst	0x0f000000 ; undefined
    283c:	000011b9 	udf	#4537
    2840:	1202d003 	and	w3, w0, #0xc7c7c7c7
    2844:	00000236 	udf	#566
    2848:	129b0f04 	mov	w4, #0xffff2787            	// #-55417
    284c:	d1030000 	sub	x0, x0, #0xc0
    2850:	02751202 	.inst	0x02751202 ; undefined
    2854:	0f080000 	.inst	0x0f080000 ; undefined
    2858:	0000194d 	udf	#6477
    285c:	1402d203 	b	b7068 <__stack_size+0xb3068>
    2860:	00000093 	udf	#147
    2864:	16780f0c 	b	fffffffff9e06494 <_sp+0xffffffff98dc6494>
    2868:	d3030000 	.inst	0xd3030000 ; undefined
    286c:	03191702 	.inst	0x03191702 ; undefined
    2870:	0f100000 	.inst	0x0f100000 ; undefined
    2874:	0000141e 	udf	#5150
    2878:	1402d403 	b	b7884 <__stack_size+0xb3884>
    287c:	00000093 	udf	#147
    2880:	11780f14 	add	w20, w24, #0xe03, lsl #12
    2884:	d5030000 	msr	s0_3_c0_c0_0, x0
    2888:	00931402 	.inst	0x00931402 ; undefined
    288c:	0f180000 	.inst	0x0f180000 ; undefined
    2890:	000014ab 	udf	#5291
    2894:	1402d603 	b	b80a0 <__stack_size+0xb40a0>
    2898:	00000093 	udf	#147
    289c:	11300f1c 	add	w28, w24, #0xc03
    28a0:	d7030000 	.inst	0xd7030000 ; undefined
    28a4:	00931402 	.inst	0x00931402 ; undefined
    28a8:	0f200000 	.inst	0x0f200000 ; undefined
    28ac:	000016ee 	udf	#5870
    28b0:	1402d803 	b	b88bc <__stack_size+0xb48bc>
    28b4:	00000093 	udf	#147
    28b8:	12bb0f24 	mov	w4, #0x2786ffff            	// #663158783
    28bc:	d9030000 	stlur	x0, [x0, #48]
    28c0:	00931402 	.inst	0x00931402 ; undefined
    28c4:	0f280000 	.inst	0x0f280000 ; undefined
    28c8:	0000113f 	udf	#4415
    28cc:	1802da03 	ldr	w3, 840c <__stack_size+0x440c>
    28d0:	00000478 	udf	#1144
    28d4:	14d60f2c 	b	3586584 <__stack_size+0x3582584>
    28d8:	db030000 	.inst	0xdb030000 ; undefined
    28dc:	05d71802 	mov	z2.d, p7/z, #-64
    28e0:	0f300000 	.inst	0x0f300000 ; undefined
    28e4:	0000174e 	udf	#5966
    28e8:	1402dc03 	b	b98f4 <__stack_size+0xb58f4>
    28ec:	00000093 	udf	#147
    28f0:	15940f34 	b	65065c0 <__stack_size+0x65025c0>
    28f4:	dd030000 	.inst	0xdd030000 ; undefined
    28f8:	00931402 	.inst	0x00931402 ; undefined
    28fc:	0f380000 	.inst	0x0f380000 ; undefined
    2900:	000011df 	udf	#4575
    2904:	1402de03 	b	ba110 <__stack_size+0xb6110>
    2908:	00000093 	udf	#147
    290c:	16160f3c 	b	fffffffff85865fc <_sp+0xffffffff975465fc>
    2910:	df030000 	.inst	0xdf030000 ; undefined
    2914:	06161702 	.inst	0x06161702 ; undefined
    2918:	0f400000 	.inst	0x0f400000 ; undefined
    291c:	00001954 	udf	#6484
    2920:	1402e003 	b	ba92c <__stack_size+0xb692c>
    2924:	00000a5e 	udf	#2654
    2928:	16300f44 	b	fffffffff8c06638 <_sp+0xffffffff97bc6638>
    292c:	e1030000 	.inst	0xe1030000 ; undefined
    2930:	06881502 	.inst	0x06881502 ; undefined
    2934:	0f6c0000 	.inst	0x0f6c0000 ; undefined
    2938:	000013be 	udf	#5054
    293c:	1502e203 	b	40bb148 <__stack_size+0x40b7148>
    2940:	000007b4 	udf	#1972
    2944:	131e0f70 	sbfiz	w16, w27, #2, #4
    2948:	e3030000 	.inst	0xe3030000 ; undefined
    294c:	00931402 	.inst	0x00931402 ; undefined
    2950:	0f740000 	.inst	0x0f740000 ; undefined
    2954:	000010fc 	udf	#4348
    2958:	1402e403 	b	bb964 <__stack_size+0xb7964>
    295c:	00000093 	udf	#147
    2960:	128f0f78 	mov	w24, #0xffff8784            	// #-30844
    2964:	e5030000 	.inst	0xe5030000 ; undefined
    2968:	08041702 	stxrb	w4, w2, [x24]
    296c:	0f7c0000 	.inst	0x0f7c0000 ; undefined
    2970:	000013c8 	udf	#5064
    2974:	1402e603 	b	bc180 <__stack_size+0xb8180>
    2978:	00000093 	udf	#147
    297c:	14850f80 	b	214677c <__stack_size+0x214277c>
    2980:	e7030000 	.inst	0xe7030000 ; undefined
    2984:	00931402 	.inst	0x00931402 ; undefined
    2988:	0f840000 	fmlal	v0.2s, v0.2h, v4.h[0]
    298c:	0000163a 	udf	#5690
    2990:	1502e803 	b	40bc99c <__stack_size+0x40b899c>
    2994:	00000854 	udf	#2132
    2998:	13630f88 	.inst	0x13630f88 ; undefined
    299c:	e9030000 	.inst	0xe9030000 ; undefined
    29a0:	00931402 	.inst	0x00931402 ; undefined
    29a4:	0f8c0000 	fmlal	v0.2s, v0.2h, v12.h[0]
    29a8:	000010be 	udf	#4286
    29ac:	1402ea03 	b	bd1b8 <__stack_size+0xb91b8>
    29b0:	00000093 	udf	#147
    29b4:	15f70f90 	b	7dc67f4 <__stack_size+0x7dc27f4>
    29b8:	eb030000 	subs	x0, x0, x3
    29bc:	00931402 	.inst	0x00931402 ; undefined
    29c0:	0f940000 	fmlal	v0.2s, v0.2h, v4.h[1]
    29c4:	000011e8 	udf	#4584
    29c8:	1402ec03 	b	bd9d4 <__stack_size+0xb99d4>
    29cc:	00000093 	udf	#147
    29d0:	11ce0f98 	.inst	0x11ce0f98 ; undefined
    29d4:	ed030000 	.inst	0xed030000 ; undefined
    29d8:	00931402 	.inst	0x00931402 ; undefined
    29dc:	0f9c0000 	fmlal	v0.2s, v0.2h, v12.h[1]
    29e0:	0000195b 	udf	#6491
    29e4:	1402ee03 	b	be1f0 <__stack_size+0xba1f0>
    29e8:	00000093 	udf	#147
    29ec:	19680fa0 	.inst	0x19680fa0 ; undefined
    29f0:	ef030000 	.inst	0xef030000 ; undefined
    29f4:	0a731402 	bic	w2, w0, w19, lsr #5
    29f8:	0fa40000 	fmlal	v0.2s, v0.2h, v4.h[2]
    29fc:	000018ff 	udf	#6399
    2a00:	1402f003 	b	bea0c <__stack_size+0xbaa0c>
    2a04:	00000093 	udf	#147
    2a08:	15550fac 	b	55468b8 <__stack_size+0x55428b8>
    2a0c:	f1030000 	subs	x0, x0, #0xc0
    2a10:	00931402 	.inst	0x00931402 ; undefined
    2a14:	00b00000 	.inst	0x00b00000 ; undefined
    2a18:	00009310 	udf	#37648
    2a1c:	000a5e00 	.inst	0x000a5e00 ; undefined
    2a20:	00291100 	.inst	0x00291100 ; NYI
    2a24:	00090000 	.inst	0x00090000 ; undefined
    2a28:	000a4e05 	.inst	0x000a4e05 ; undefined
    2a2c:	00931000 	.inst	0x00931000 ; undefined
    2a30:	0a730000 	bic	w0, w0, w19, lsr #0
    2a34:	29110000 	stp	w0, w0, [x0, #136]
    2a38:	01000000 	.inst	0x01000000 ; undefined
    2a3c:	0a630500 	bic	w0, w8, w3, lsr #1
    2a40:	a2080000 	.inst	0xa2080000 ; undefined
    2a44:	03000012 	.inst	0x03000012 ; undefined
    2a48:	590302f2 	stlurh	w18, [x23, #48]
    2a4c:	12000008 	and	w8, w0, #0x1
    2a50:	00001843 	udf	#6211
    2a54:	00370407 	.inst	0x00370407 ; NYI
    2a58:	67040000 	.inst	0x67040000 ; undefined
    2a5c:	000aaa06 	.inst	0x000aaa06 ; undefined
    2a60:	127c0700 	.inst	0x127c0700 ; undefined
    2a64:	07010000 	.inst	0x07010000 ; undefined
    2a68:	00001885 	udf	#6277
    2a6c:	15710702 	b	5c44674 <__stack_size+0x5c40674>
    2a70:	00030000 	.inst	0x00030000 ; undefined
    2a74:	0013ad12 	.inst	0x0013ad12 ; undefined
    2a78:	37040700 	tbnz	w0, #0, ffffffffffffab58 <_sp+0xffffffff9efbab58>
    2a7c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    2a80:	0ac9066d 	and	w13, w19, w9, ror #1
    2a84:	6b070000 	subs	w0, w0, w7
    2a88:	00000012 	udf	#18
    2a8c:	00196f07 	.inst	0x00196f07 ; undefined
    2a90:	12000100 	and	w0, w8, #0x1
    2a94:	00001580 	udf	#5504
    2a98:	00370407 	.inst	0x00370407 ; NYI
    2a9c:	76040000 	.inst	0x76040000 ; undefined
    2aa0:	000ae806 	.inst	0x000ae806 ; undefined
    2aa4:	17420700 	b	fffffffffd0846a4 <_sp+0xffffffff9c0446a4>
    2aa8:	07000000 	.inst	0x07000000 ; undefined
    2aac:	00001836 	udf	#6198
    2ab0:	4f120001 	.inst	0x4f120001 ; undefined
    2ab4:	07000014 	.inst	0x07000014 ; undefined
    2ab8:	00003704 	udf	#14084
    2abc:	067b0400 	.inst	0x067b0400 ; undefined
    2ac0:	00000b13 	udf	#2835
    2ac4:	0014e307 	.inst	0x0014e307 ; undefined
    2ac8:	92070000 	and	x0, x0, #0x200000002000000
    2acc:	01000019 	.inst	0x01000019 ; undefined
    2ad0:	0014ce07 	.inst	0x0014ce07 ; undefined
    2ad4:	c9070200 	.inst	0xc9070200 ; undefined
    2ad8:	03000014 	.inst	0x03000014 ; undefined
    2adc:	17d11300 	b	ffffffffff4476dc <_sp+0xffffffff9e4076dc>
    2ae0:	ac010000 	stnp	q0, q0, [x0, #32]
    2ae4:	00000601 	udf	#1537
    2ae8:	00000000 	udf	#0
    2aec:	00340000 	.inst	0x00340000 ; NYI
    2af0:	00000000 	udf	#0
    2af4:	9c010000 	ldr	q0, 4af4 <__stack_size+0xaf4>
    2af8:	00000b53 	udf	#2899
    2afc:	63326914 	.inst	0x63326914 ; undefined
    2b00:	01ac0100 	.inst	0x01ac0100 ; undefined
    2b04:	000b532b 	.inst	0x000b532b ; undefined
    2b08:	78910200 	ldursh	x0, [x16, #-240]
    2b0c:	0012ca15 	.inst	0x0012ca15 ; undefined
    2b10:	01ac0100 	.inst	0x01ac0100 ; undefined
    2b14:	00006138 	udf	#24888
    2b18:	77910200 	.inst	0x77910200 ; undefined
    2b1c:	78081600 	strh	w0, [x16], #129
    2b20:	1300000a 	sbfx	w10, w0, #0, #1
    2b24:	000016da 	udf	#5850
    2b28:	0601a101 	.inst	0x0601a101 ; undefined
	...
    2b34:	00000024 	udf	#36
    2b38:	00000000 	udf	#0
    2b3c:	0b999c01 	.inst	0x0b999c01 ; undefined
    2b40:	69140000 	stgp	x0, x0, [x0, #640]
    2b44:	01006332 	.inst	0x01006332 ; undefined
    2b48:	532701a1 	.inst	0x532701a1 ; undefined
    2b4c:	0200000b 	.inst	0x0200000b ; undefined
    2b50:	ca157891 	eor	x17, x4, x21, lsl #30
    2b54:	01000012 	.inst	0x01000012 ; undefined
    2b58:	873501a1 	.inst	0x873501a1 ; undefined
    2b5c:	02000000 	.inst	0x02000000 ; undefined
    2b60:	13007491 	sbfx	w17, w4, #0, #30
    2b64:	00001871 	udf	#6257
    2b68:	06019601 	.inst	0x06019601 ; undefined
	...
    2b74:	00000024 	udf	#36
    2b78:	00000000 	udf	#0
    2b7c:	0bd99c01 	.inst	0x0bd99c01 ; undefined
    2b80:	69140000 	stgp	x0, x0, [x0, #640]
    2b84:	01006332 	.inst	0x01006332 ; undefined
    2b88:	53270196 	.inst	0x53270196 ; undefined
    2b8c:	0200000b 	.inst	0x0200000b ; undefined
    2b90:	ca157891 	eor	x17, x4, x21, lsl #30
    2b94:	01000012 	.inst	0x01000012 ; undefined
    2b98:	87350196 	.inst	0x87350196 ; undefined
    2b9c:	02000000 	.inst	0x02000000 ; undefined
    2ba0:	13007491 	sbfx	w17, w4, #0, #30
    2ba4:	0000123f 	udf	#4671
    2ba8:	06018b01 	.inst	0x06018b01 ; undefined
	...
    2bb4:	00000034 	udf	#52
    2bb8:	00000000 	udf	#0
    2bbc:	0c199c01 	.inst	0x0c199c01 ; undefined
    2bc0:	69140000 	stgp	x0, x0, [x0, #640]
    2bc4:	01006332 	.inst	0x01006332 ; undefined
    2bc8:	5323018b 	.inst	0x5323018b ; undefined
    2bcc:	0200000b 	.inst	0x0200000b ; undefined
    2bd0:	ca157891 	eor	x17, x4, x21, lsl #30
    2bd4:	01000012 	.inst	0x01000012 ; undefined
    2bd8:	6130018b 	.inst	0x6130018b ; undefined
    2bdc:	02000000 	.inst	0x02000000 ; undefined
    2be0:	13007791 	sbfx	w17, w28, #0, #30
    2be4:	0000171f 	udf	#5919
    2be8:	06018001 	.inst	0x06018001 ; undefined
	...
    2bf4:	00000034 	udf	#52
    2bf8:	00000000 	udf	#0
    2bfc:	0c599c01 	.inst	0x0c599c01 ; undefined
    2c00:	69140000 	stgp	x0, x0, [x0, #640]
    2c04:	01006332 	.inst	0x01006332 ; undefined
    2c08:	532a0180 	.inst	0x532a0180 ; undefined
    2c0c:	0200000b 	.inst	0x0200000b ; undefined
    2c10:	ca157891 	eor	x17, x4, x21, lsl #30
    2c14:	01000012 	.inst	0x01000012 ; undefined
    2c18:	61370180 	.inst	0x61370180 ; undefined
    2c1c:	02000000 	.inst	0x02000000 ; undefined
    2c20:	17007791 	b	fffffffffc020a64 <_sp+0xffffffff9afe0a64>
    2c24:	00001070 	udf	#4208
    2c28:	06016101 	.inst	0x06016101 ; undefined
    2c2c:	6100293c 	.inst	0x6100293c ; undefined
    2c30:	00000000 	udf	#0
    2c34:	0000019c 	udf	#412
    2c38:	00000000 	udf	#0
    2c3c:	0cf99c01 	.inst	0x0cf99c01 ; undefined
    2c40:	69140000 	stgp	x0, x0, [x0, #640]
    2c44:	01006332 	.inst	0x01006332 ; undefined
    2c48:	53240161 	.inst	0x53240161 ; undefined
    2c4c:	0200000b 	.inst	0x0200000b ; undefined
    2c50:	87156891 	.inst	0x87156891 ; undefined
    2c54:	01000011 	.inst	0x01000011 ; undefined
    2c58:	37320161 	tbnz	w1, #6, 6c84 <__stack_size+0x2c84>
    2c5c:	02000000 	.inst	0x02000000 ; undefined
    2c60:	97186491 	bl	fffffffffc61bea4 <_sp+0xffffffff9b5dbea4>
    2c64:	01000019 	.inst	0x01000019 ; undefined
    2c68:	740e0163 	.inst	0x740e0163 ; undefined
    2c6c:	02000000 	.inst	0x02000000 ; undefined
    2c70:	f1187e91 	subs	x17, x20, #0x61f
    2c74:	01000010 	.inst	0x01000010 ; undefined
    2c78:	741b0163 	.inst	0x741b0163 ; undefined
    2c7c:	02000000 	.inst	0x02000000 ; undefined
    2c80:	55187c91 	.inst	0x55187c91 ; undefined
    2c84:	01000012 	.inst	0x01000012 ; undefined
    2c88:	740e0164 	.inst	0x740e0164 ; undefined
    2c8c:	02000000 	.inst	0x02000000 ; undefined
    2c90:	44187a91 	.inst	0x44187a91 ; undefined
    2c94:	01000016 	.inst	0x01000016 ; undefined
    2c98:	741b0164 	.inst	0x741b0164 ; undefined
    2c9c:	02000000 	.inst	0x02000000 ; undefined
    2ca0:	00187891 	.inst	0x00187891 ; undefined
    2ca4:	01000018 	.inst	0x01000018 ; undefined
    2ca8:	740e0165 	.inst	0x740e0165 ; undefined
    2cac:	02000000 	.inst	0x02000000 ; undefined
    2cb0:	6d187691 	stp	d17, d29, [x20, #384]
    2cb4:	01000016 	.inst	0x01000016 ; undefined
    2cb8:	741b0165 	.inst	0x741b0165 ; undefined
    2cbc:	02000000 	.inst	0x02000000 ; undefined
    2cc0:	19007491 	.inst	0x19007491 ; undefined
    2cc4:	000012ae 	udf	#4782
    2cc8:	0a015a01 	and	w1, w16, w1, lsl #22
    2ccc:	00000087 	udf	#135
    2cd0:	61002924 	.inst	0x61002924 ; undefined
    2cd4:	00000000 	udf	#0
    2cd8:	00000018 	udf	#24
    2cdc:	00000000 	udf	#0
    2ce0:	0d2d9c01 	.inst	0x0d2d9c01 ; undefined
    2ce4:	69140000 	stgp	x0, x0, [x0, #640]
    2ce8:	01006332 	.inst	0x01006332 ; undefined
    2cec:	5324015a 	.inst	0x5324015a ; undefined
    2cf0:	0200000b 	.inst	0x0200000b ; undefined
    2cf4:	19007891 	.inst	0x19007891 ; undefined
    2cf8:	000011c0 	udf	#4544
    2cfc:	0a014f01 	and	w1, w24, w1, lsl #19
    2d00:	00000087 	udf	#135
    2d04:	6100290c 	.inst	0x6100290c ; undefined
    2d08:	00000000 	udf	#0
    2d0c:	00000018 	udf	#24
    2d10:	00000000 	udf	#0
    2d14:	0d619c01 	.inst	0x0d619c01 ; undefined
    2d18:	69140000 	stgp	x0, x0, [x0, #640]
    2d1c:	01006332 	.inst	0x01006332 ; undefined
    2d20:	5325014f 	.inst	0x5325014f ; undefined
    2d24:	0200000b 	.inst	0x0200000b ; undefined
    2d28:	13007891 	sbfx	w17, w4, #0, #31
    2d2c:	0000108e 	udf	#4238
    2d30:	06014201 	.inst	0x06014201 ; undefined
    2d34:	610028e4 	.inst	0x610028e4 ; undefined
    2d38:	00000000 	udf	#0
    2d3c:	00000028 	udf	#40
    2d40:	00000000 	udf	#0
    2d44:	0da19c01 	.inst	0x0da19c01 ; undefined
    2d48:	69140000 	stgp	x0, x0, [x0, #640]
    2d4c:	01006332 	.inst	0x01006332 ; undefined
    2d50:	53230142 	.inst	0x53230142 ; undefined
    2d54:	0200000b 	.inst	0x0200000b ; undefined
    2d58:	14186891 	b	61cf9c <__stack_size+0x618f9c>
    2d5c:	01000012 	.inst	0x01000012 ; undefined
    2d60:	610a0144 	.inst	0x610a0144 ; undefined
    2d64:	02000000 	.inst	0x02000000 ; undefined
    2d68:	13007f91 	asr	w17, w28, #0
    2d6c:	00001081 	udf	#4225
    2d70:	06013701 	.inst	0x06013701 ; undefined
    2d74:	610028c0 	.inst	0x610028c0 ; undefined
    2d78:	00000000 	udf	#0
    2d7c:	00000024 	udf	#36
    2d80:	00000000 	udf	#0
    2d84:	0de19c01 	.inst	0x0de19c01 ; undefined
    2d88:	69140000 	stgp	x0, x0, [x0, #640]
    2d8c:	01006332 	.inst	0x01006332 ; undefined
    2d90:	53200137 	.inst	0x53200137 ; undefined
    2d94:	0200000b 	.inst	0x0200000b ; undefined
    2d98:	ca157891 	eor	x17, x4, x21, lsl #30
    2d9c:	01000012 	.inst	0x01000012 ; undefined
    2da0:	612d0137 	.inst	0x612d0137 ; undefined
    2da4:	02000000 	.inst	0x02000000 ; undefined
    2da8:	13007791 	sbfx	w17, w28, #0, #30
    2dac:	00001774 	udf	#6004
    2db0:	06012c01 	.inst	0x06012c01 ; undefined
	...
    2dbc:	00000024 	udf	#36
    2dc0:	00000000 	udf	#0
    2dc4:	0e219c01 	mul	v1.8b, v0.8b, v1.8b
    2dc8:	69140000 	stgp	x0, x0, [x0, #640]
    2dcc:	01006332 	.inst	0x01006332 ; undefined
    2dd0:	5322012c 	.inst	0x5322012c ; undefined
    2dd4:	0200000b 	.inst	0x0200000b ; undefined
    2dd8:	ca157891 	eor	x17, x4, x21, lsl #30
    2ddc:	01000012 	.inst	0x01000012 ; undefined
    2de0:	612f012c 	.inst	0x612f012c ; undefined
    2de4:	02000000 	.inst	0x02000000 ; undefined
    2de8:	13007791 	sbfx	w17, w28, #0, #30
    2dec:	000018c8 	udf	#6344
    2df0:	06012101 	.inst	0x06012101 ; undefined
    2df4:	61002894 	.inst	0x61002894 ; undefined
    2df8:	00000000 	udf	#0
    2dfc:	0000002c 	udf	#44
    2e00:	00000000 	udf	#0
    2e04:	0e619c01 	mul	v1.4h, v0.4h, v1.4h
    2e08:	69140000 	stgp	x0, x0, [x0, #640]
    2e0c:	01006332 	.inst	0x01006332 ; undefined
    2e10:	53230121 	.inst	0x53230121 ; undefined
    2e14:	0200000b 	.inst	0x0200000b ; undefined
    2e18:	ca157891 	eor	x17, x4, x21, lsl #30
    2e1c:	01000012 	.inst	0x01000012 ; undefined
    2e20:	74310121 	.inst	0x74310121 ; undefined
    2e24:	02000000 	.inst	0x02000000 ; undefined
    2e28:	13007691 	sbfx	w17, w20, #0, #30
    2e2c:	000015ac 	udf	#5548
    2e30:	06011601 	.inst	0x06011601 ; undefined
	...
    2e3c:	0000002c 	udf	#44
    2e40:	00000000 	udf	#0
    2e44:	0ea19c01 	mul	v1.2s, v0.2s, v1.2s
    2e48:	69140000 	stgp	x0, x0, [x0, #640]
    2e4c:	01006332 	.inst	0x01006332 ; undefined
    2e50:	53230116 	.inst	0x53230116 ; undefined
    2e54:	0200000b 	.inst	0x0200000b ; undefined
    2e58:	ca157891 	eor	x17, x4, x21, lsl #30
    2e5c:	01000012 	.inst	0x01000012 ; undefined
    2e60:	61300116 	.inst	0x61300116 ; undefined
    2e64:	02000000 	.inst	0x02000000 ; undefined
    2e68:	13007791 	sbfx	w17, w28, #0, #30
    2e6c:	00001684 	udf	#5764
    2e70:	06010b01 	.inst	0x06010b01 ; undefined
    2e74:	61002870 	.inst	0x61002870 ; undefined
    2e78:	00000000 	udf	#0
    2e7c:	00000024 	udf	#36
    2e80:	00000000 	udf	#0
    2e84:	0ee19c01 	.inst	0x0ee19c01 ; undefined
    2e88:	69140000 	stgp	x0, x0, [x0, #640]
    2e8c:	01006332 	.inst	0x01006332 ; undefined
    2e90:	531f010b 	ubfiz	w11, w8, #1, #1
    2e94:	0200000b 	.inst	0x0200000b ; undefined
    2e98:	b3157891 	.inst	0xb3157891 ; undefined
    2e9c:	01000010 	.inst	0x01000010 ; undefined
    2ea0:	612c010b 	.inst	0x612c010b ; undefined
    2ea4:	02000000 	.inst	0x02000000 ; undefined
    2ea8:	13007791 	sbfx	w17, w28, #0, #30
    2eac:	000013f5 	udf	#5109
    2eb0:	06010001 	.inst	0x06010001 ; undefined
    2eb4:	6100284c 	.inst	0x6100284c ; undefined
    2eb8:	00000000 	udf	#0
    2ebc:	00000024 	udf	#36
    2ec0:	00000000 	udf	#0
    2ec4:	0f219c01 	sqrshrn	v1.2s, v0.2d, #31
    2ec8:	69140000 	stgp	x0, x0, [x0, #640]
    2ecc:	01006332 	.inst	0x01006332 ; undefined
    2ed0:	531f0100 	ubfiz	w0, w8, #1, #1
    2ed4:	0200000b 	.inst	0x0200000b ; undefined
    2ed8:	b3157891 	.inst	0xb3157891 ; undefined
    2edc:	01000010 	.inst	0x01000010 ; undefined
    2ee0:	612c0100 	.inst	0x612c0100 ; undefined
    2ee4:	02000000 	.inst	0x02000000 ; undefined
    2ee8:	1a007791 	.inst	0x1a007791 ; undefined
    2eec:	000015bc 	udf	#5564
    2ef0:	2806f501 	stnp	w1, w29, [x8, #52]
    2ef4:	00610028 	.inst	0x00610028 ; undefined
    2ef8:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
    2efc:	00000000 	udf	#0
    2f00:	01000000 	.inst	0x01000000 ; undefined
    2f04:	000f5e9c 	.inst	0x000f5e9c ; undefined
    2f08:	32691b00 	.inst	0x32691b00 ; undefined
    2f0c:	f5010063 	.inst	0xf5010063 ; undefined
    2f10:	000b5321 	.inst	0x000b5321 ; undefined
    2f14:	78910200 	ldursh	x0, [x16, #-240]
    2f18:	0017671c 	.inst	0x0017671c ; undefined
    2f1c:	2ef50100 	.inst	0x2ef50100 ; undefined
    2f20:	00000087 	udf	#135
    2f24:	00749102 	.inst	0x00749102 ; undefined
    2f28:	0017e91a 	.inst	0x0017e91a ; undefined
    2f2c:	06d90100 	.inst	0x06d90100 ; undefined
    2f30:	610027a4 	.inst	0x610027a4 ; undefined
    2f34:	00000000 	udf	#0
    2f38:	00000084 	udf	#132
    2f3c:	00000000 	udf	#0
    2f40:	0f9b9c01 	.inst	0x0f9b9c01 ; undefined
    2f44:	691b0000 	stgp	x0, x0, [x0, #864]
    2f48:	01006332 	.inst	0x01006332 ; undefined
    2f4c:	0b5323d9 	add	w25, w30, w19, lsr #8
    2f50:	91020000 	add	x0, x0, #0x80
    2f54:	14571c78 	b	15ca134 <__stack_size+0x15c6134>
    2f58:	d9010000 	stlur	x0, [x0, #16]
    2f5c:	000ae83a 	.inst	0x000ae83a ; undefined
    2f60:	74910200 	.inst	0x74910200 ; undefined
    2f64:	116d1d00 	add	w0, w8, #0xb47, lsl #12
    2f68:	ca010000 	eor	x0, x0, x1
    2f6c:	00006109 	udf	#24841
    2f70:	00278800 	.inst	0x00278800 ; NYI
    2f74:	00000061 	udf	#97
    2f78:	00001c00 	udf	#7168
    2f7c:	00000000 	udf	#0
    2f80:	cd9c0100 	.inst	0xcd9c0100 ; undefined
    2f84:	1b00000f 	madd	w15, w0, w0, w0
    2f88:	00633269 	.inst	0x00633269 ; undefined
    2f8c:	5321ca01 	.inst	0x5321ca01 ; undefined
    2f90:	0200000b 	.inst	0x0200000b ; undefined
    2f94:	1d007891 	.inst	0x1d007891 ; undefined
    2f98:	0000111c 	udf	#4380
    2f9c:	c206ba01 	.inst	0xc206ba01 ; undefined
	...
    2fa8:	3c000000 	stur	b0, [x0]
    2fac:	00000000 	udf	#0
    2fb0:	01000000 	.inst	0x01000000 ; undefined
    2fb4:	00100e9c 	.inst	0x00100e9c ; undefined
    2fb8:	32691b00 	.inst	0x32691b00 ; undefined
    2fbc:	ba010063 	adcs	x3, x3, x1
    2fc0:	000b5327 	.inst	0x000b5327 ; undefined
    2fc4:	68910200 	stgp	x0, x0, [x16], #544
    2fc8:	0012141e 	.inst	0x0012141e ; undefined
    2fcc:	07bc0100 	.inst	0x07bc0100 ; undefined
    2fd0:	000000c2 	udf	#194
    2fd4:	007c9102 	.inst	0x007c9102 ; undefined
    2fd8:	0017361a 	.inst	0x0017361a ; undefined
    2fdc:	06940100 	.inst	0x06940100 ; undefined
    2fe0:	610026e8 	.inst	0x610026e8 ; undefined
    2fe4:	00000000 	udf	#0
    2fe8:	000000a0 	udf	#160
    2fec:	00000000 	udf	#0
    2ff0:	105a9c01 	adr	x1, b8370 <__stack_size+0xb4370>
    2ff4:	691b0000 	stgp	x0, x0, [x0, #864]
    2ff8:	01006332 	.inst	0x01006332 ; undefined
    2ffc:	0b531f94 	add	w20, w28, w19, lsr #7
    3000:	91020000 	add	x0, x0, #0x80
    3004:	14571c78 	b	15ca1e4 <__stack_size+0x15c61e4>
    3008:	94010000 	bl	43008 <__stack_size+0x3f008>
    300c:	000ae836 	.inst	0x000ae836 ; undefined
    3010:	74910200 	.inst	0x74910200 ; undefined
    3014:	0013971c 	.inst	0x0013971c ; undefined
    3018:	44940100 	sdot	z0.s, z8.b, z20.b
    301c:	00000061 	udf	#97
    3020:	00739102 	.inst	0x00739102 ; undefined
    3024:	0012db1a 	.inst	0x0012db1a ; undefined
    3028:	06890100 	.inst	0x06890100 ; undefined
	...
    3034:	00000034 	udf	#52
    3038:	00000000 	udf	#0
    303c:	10979c01 	adr	x1, fffffffffff323bc <_sp+0xffffffff9eef23bc>
    3040:	691b0000 	stgp	x0, x0, [x0, #864]
    3044:	01006332 	.inst	0x01006332 ; undefined
    3048:	0b532989 	add	w9, w12, w19, lsr #10
    304c:	91020000 	add	x0, x0, #0x80
    3050:	19791c78 	.inst	0x19791c78 ; undefined
    3054:	89010000 	.inst	0x89010000 ; undefined
    3058:	00007437 	udf	#29751
    305c:	76910200 	.inst	0x76910200 ; undefined
    3060:	14381a00 	b	e09860 <__stack_size+0xe05860>
    3064:	7f010000 	.inst	0x7f010000 ; undefined
    3068:	0026b406 	.inst	0x0026b406 ; NYI
    306c:	00000061 	udf	#97
    3070:	00003400 	udf	#13312
    3074:	00000000 	udf	#0
    3078:	d49c0100 	.inst	0xd49c0100 ; undefined
    307c:	1b000010 	madd	w16, w0, w0, w0
    3080:	00633269 	.inst	0x00633269 ; undefined
    3084:	532a7f01 	.inst	0x532a7f01 ; undefined
    3088:	0200000b 	.inst	0x0200000b ; undefined
    308c:	791c7891 	strh	w17, [x4, #3644]
    3090:	01000019 	.inst	0x01000019 ; undefined
    3094:	0074387f 	.inst	0x0074387f ; undefined
    3098:	91020000 	add	x0, x0, #0x80
    309c:	041a0076 	and	z22.b, p0/m, z22.b, z3.b
    30a0:	01000016 	.inst	0x01000016 ; undefined
    30a4:	00000671 	udf	#1649
    30a8:	00000000 	udf	#0
    30ac:	00240000 	.inst	0x00240000 ; NYI
    30b0:	00000000 	udf	#0
    30b4:	9c010000 	ldr	q0, 50b4 <__stack_size+0x10b4>
    30b8:	00001102 	udf	#4354
    30bc:	6332691b 	.inst	0x6332691b ; undefined
    30c0:	25710100 	whilege	p0.h, w8, w17
    30c4:	00000b53 	udf	#2899
    30c8:	00789102 	.inst	0x00789102 ; undefined
    30cc:	00118e1a 	.inst	0x00118e1a ; undefined
    30d0:	06660100 	.inst	0x06660100 ; undefined
    30d4:	61002690 	.inst	0x61002690 ; undefined
    30d8:	00000000 	udf	#0
    30dc:	00000024 	udf	#36
    30e0:	00000000 	udf	#0
    30e4:	11309c01 	add	w1, w0, #0xc27
    30e8:	691b0000 	stgp	x0, x0, [x0, #864]
    30ec:	01006332 	.inst	0x01006332 ; undefined
    30f0:	0b532666 	add	w6, w19, w19, lsr #9
    30f4:	91020000 	add	x0, x0, #0x80
    30f8:	7d1a0078 	str	h24, [x3, #3328]
    30fc:	01000013 	.inst	0x01000013 ; undefined
    3100:	0000065b 	udf	#1627
    3104:	00000000 	udf	#0
    3108:	00340000 	.inst	0x00340000 ; NYI
    310c:	00000000 	udf	#0
    3110:	9c010000 	ldr	q0, 5110 <__stack_size+0x1110>
    3114:	0000116d 	udf	#4461
    3118:	6332691b 	.inst	0x6332691b ; undefined
    311c:	2d5b0100 	ldp	s0, s0, [x8, #216]
    3120:	00000b53 	udf	#2899
    3124:	1c789102 	ldr	s2, f4344 <__stack_size+0xf0344>
    3128:	00001f86 	udf	#8070
    312c:	aa475b01 	orr	x1, x24, x7, lsr #22
    3130:	0200000a 	.inst	0x0200000a ; undefined
    3134:	1a007491 	.inst	0x1a007491 ; undefined
    3138:	000010d6 	udf	#4310
    313c:	5c065001 	ldr	d1, fb3c <__stack_size+0xbb3c>
    3140:	00610026 	.inst	0x00610026 ; undefined
    3144:	34000000 	cbz	w0, 3144 <__stack_size-0xebc>
    3148:	00000000 	udf	#0
    314c:	01000000 	.inst	0x01000000 ; undefined
    3150:	0011aa9c 	.inst	0x0011aa9c ; undefined
    3154:	32691b00 	.inst	0x32691b00 ; undefined
    3158:	50010063 	adr	x3, 5166 <__stack_size+0x1166>
    315c:	000b532e 	.inst	0x000b532e ; undefined
    3160:	78910200 	ldursh	x0, [x16, #-240]
    3164:	001f861c 	.inst	0x001f861c ; undefined
    3168:	48500100 	ldxrh	w0, [x8]
    316c:	00000aaa 	udf	#2730
    3170:	00749102 	.inst	0x00749102 ; undefined
    3174:	0018d81a 	.inst	0x0018d81a ; undefined
    3178:	06450100 	.inst	0x06450100 ; undefined
    317c:	61002628 	.inst	0x61002628 ; undefined
    3180:	00000000 	udf	#0
    3184:	00000034 	udf	#52
    3188:	00000000 	udf	#0
    318c:	11e79c01 	.inst	0x11e79c01 ; undefined
    3190:	691b0000 	stgp	x0, x0, [x0, #864]
    3194:	01006332 	.inst	0x01006332 ; undefined
    3198:	0b532645 	add	w5, w18, w19, lsr #9
    319c:	91020000 	add	x0, x0, #0x80
    31a0:	1f861c78 	.inst	0x1f861c78 ; undefined
    31a4:	45010000 	.inst	0x45010000 ; undefined
    31a8:	000a853e 	.inst	0x000a853e ; undefined
    31ac:	74910200 	.inst	0x74910200 ; undefined
    31b0:	19b81a00 	.inst	0x19b81a00 ; undefined
    31b4:	26010000 	.inst	0x26010000 ; undefined
    31b8:	00256406 	.inst	0x00256406 ; NYI
    31bc:	00000061 	udf	#97
    31c0:	0000c400 	udf	#50176
    31c4:	00000000 	udf	#0
    31c8:	429c0100 	.inst	0x429c0100 ; undefined
    31cc:	1b000012 	madd	w18, w0, w0, w0
    31d0:	00633269 	.inst	0x00633269 ; undefined
    31d4:	53252601 	.inst	0x53252601 ; undefined
    31d8:	0200000b 	.inst	0x0200000b ; undefined
    31dc:	861c7891 	.inst	0x861c7891 ; undefined
    31e0:	0100001f 	.inst	0x0100001f ; undefined
    31e4:	0a850927 	and	w7, w9, w5, asr #2
    31e8:	91020000 	add	x0, x0, #0x80
    31ec:	15881c74 	b	620a3bc <__stack_size+0x62063bc>
    31f0:	27010000 	.inst	0x27010000 ; undefined
    31f4:	000ac922 	.inst	0x000ac922 ; undefined
    31f8:	70910200 	adr	x0, fffffffffff2523b <_sp+0xffffffff9eee523b>
    31fc:	0006751c 	.inst	0x0006751c ; undefined
    3200:	32270100 	orr	w0, w8, #0x2000000
    3204:	00000074 	udf	#116
    3208:	006e9102 	.inst	0x006e9102 ; undefined
    320c:	0015d11a 	.inst	0x0015d11a ; undefined
    3210:	061b0100 	.inst	0x061b0100 ; undefined
    3214:	61002540 	.inst	0x61002540 ; undefined
    3218:	00000000 	udf	#0
    321c:	00000024 	udf	#36
    3220:	00000000 	udf	#0
    3224:	12709c01 	.inst	0x12709c01 ; undefined
    3228:	691b0000 	stgp	x0, x0, [x0, #864]
    322c:	01006332 	.inst	0x01006332 ; undefined
    3230:	0b53201b 	add	w27, w0, w19, lsr #8
    3234:	91020000 	add	x0, x0, #0x80
    3238:	621f0078 	.inst	0x621f0078 ; undefined
    323c:	01000010 	.inst	0x01000010 ; undefined
    3240:	251c0610 	cmpgt	p0.b, p1/z, z16.b, #-4
    3244:	00006100 	udf	#24832
    3248:	00240000 	.inst	0x00240000 ; NYI
    324c:	00000000 	udf	#0
    3250:	9c010000 	ldr	q0, 5250 <__stack_size+0x1250>
    3254:	6332691b 	.inst	0x6332691b ; undefined
    3258:	21100100 	.inst	0x21100100 ; undefined
    325c:	00000b53 	udf	#2899
    3260:	00789102 	.inst	0x00789102 ; undefined
    3264:	0000a000 	udf	#40960
    3268:	c1000400 	.inst	0xc1000400 ; undefined
    326c:	0800000d 	stxrb	w0, w13, [x0]
    3270:	00022001 	.inst	0x00022001 ; undefined
    3274:	19ca0c00 	.inst	0x19ca0c00 ; undefined
    3278:	002f0000 	.inst	0x002f0000 ; NYI
    327c:	06e00000 	.inst	0x06e00000 ; undefined
	...
    3288:	191a0000 	stlurb	w0, [x0, #-96]
    328c:	08020000 	stxrb	w2, w0, [x0]
    3290:	00017c07 	.inst	0x00017c07 ; undefined
    3294:	05080200 	.inst	0x05080200 ; undefined
    3298:	000001cb 	udf	#459
    329c:	81070402 	.inst	0x81070402 ; undefined
    32a0:	02000001 	.inst	0x02000001 ; undefined
    32a4:	01460510 	.inst	0x01460510 ; undefined
    32a8:	10020000 	adr	x0, 72a8 <__stack_size+0x32a8>
    32ac:	00010007 	.inst	0x00010007 ; undefined
    32b0:	06010200 	.inst	0x06010200 ; undefined
    32b4:	00000114 	udf	#276
    32b8:	d4050202 	hvc	#0x2810
    32bc:	03000001 	.inst	0x03000001 ; undefined
    32c0:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    32c4:	01020074 	.inst	0x01020074 ; undefined
    32c8:	00011208 	.inst	0x00011208 ; undefined
    32cc:	07020200 	.inst	0x07020200 ; undefined
    32d0:	00000133 	udf	#307
    32d4:	0007b404 	.inst	0x0007b404 ; undefined
    32d8:	165b0200 	b	fffffffff96c3ad8 <_sp+0xffffffff98683ad8>
    32dc:	00000037 	udf	#55
    32e0:	c6050802 	.inst	0xc6050802 ; undefined
    32e4:	02000001 	.inst	0x02000001 ; undefined
    32e8:	01770708 	.inst	0x01770708 ; undefined
    32ec:	2f050000 	.inst	0x2f050000 ; undefined
    32f0:	0100000f 	.inst	0x0100000f ; undefined
    32f4:	2ad8070f 	orr	w15, w24, w24, ror #1
    32f8:	00006100 	udf	#24832
    32fc:	03d80000 	.inst	0x03d80000 ; undefined
    3300:	00000000 	udf	#0
    3304:	9c010000 	ldr	q0, 5304 <__stack_size+0x1304>
    3308:	000a5100 	.inst	0x000a5100 ; undefined
    330c:	14000400 	b	430c <__stack_size+0x30c>
    3310:	0800000e 	stxrb	w0, w14, [x0]
    3314:	00022001 	.inst	0x00022001 ; undefined
    3318:	1a350c00 	.inst	0x1a350c00 ; undefined
    331c:	002f0000 	.inst	0x002f0000 ; NYI
    3320:	07000000 	.inst	0x07000000 ; undefined
	...
    332c:	1b2e0000 	.inst	0x1b2e0000 ; undefined
    3330:	09020000 	.inst	0x09020000 ; undefined
    3334:	03000006 	.inst	0x03000006 ; undefined
    3338:	0035170b 	.inst	0x0035170b ; NYI
    333c:	08030000 	stxrb	w3, w0, [x0]
    3340:	00017c07 	.inst	0x00017c07 ; undefined
    3344:	05080300 	.inst	0x05080300 ; undefined
    3348:	000001cb 	udf	#459
    334c:	81070403 	.inst	0x81070403 ; undefined
    3350:	03000001 	.inst	0x03000001 ; undefined
    3354:	01460510 	.inst	0x01460510 ; undefined
    3358:	10030000 	adr	x0, 9358 <__stack_size+0x5358>
    335c:	00010007 	.inst	0x00010007 ; undefined
    3360:	06010300 	.inst	0x06010300 ; undefined
    3364:	00000114 	udf	#276
    3368:	d4050203 	smc	#0x2810
    336c:	02000001 	.inst	0x02000001 ; undefined
    3370:	000007b5 	udf	#1973
    3374:	720d5704 	ands	w4, w24, #0xfff801ff
    3378:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    337c:	6e690504 	uhadd	v4.8h, v8.8h, v9.8h
    3380:	63020074 	.inst	0x63020074 ; undefined
    3384:	04000006 	add	z6.b, p0/m, z6.b, z0.b
    3388:	008a1759 	.inst	0x008a1759 ; undefined
    338c:	79050000 	strh	w0, [x0, #640]
    3390:	03000000 	.inst	0x03000000 ; undefined
    3394:	01120801 	.inst	0x01120801 ; undefined
    3398:	15020000 	b	4083398 <__stack_size+0x407f398>
    339c:	04000013 	add	z19.b, p0/m, z19.b, z0.b
    33a0:	009d185a 	.inst	0x009d185a ; undefined
    33a4:	02030000 	.inst	0x02030000 ; undefined
    33a8:	00013307 	.inst	0x00013307 ; undefined
    33ac:	07b40200 	.inst	0x07b40200 ; undefined
    33b0:	5b040000 	.inst	0x5b040000 ; undefined
    33b4:	00004316 	udf	#17174
    33b8:	00a40500 	.inst	0x00a40500 ; undefined
    33bc:	08030000 	stxrb	w3, w0, [x0]
    33c0:	0001c605 	.inst	0x0001c605 ; undefined
    33c4:	07080300 	.inst	0x07080300 ; undefined
    33c8:	00000177 	udf	#375
    33cc:	43040706 	.inst	0x43040706 ; undefined
    33d0:	05000000 	orr	z0.s, z0.s, #0x1
    33d4:	df0e0115 	.inst	0xdf0e0115 ; undefined
    33d8:	07000000 	.inst	0x07000000 ; undefined
    33dc:	0000152a 	udf	#5418
    33e0:	169a0700 	b	fffffffffa684fe0 <_sp+0xffffffff99644fe0>
    33e4:	00010000 	.inst	0x00010000 ; undefined
    33e8:	fa05b008 	.inst	0xfa05b008 ; undefined
    33ec:	01f40902 	.inst	0x01f40902 ; undefined
    33f0:	55090000 	.inst	0x55090000 ; undefined
    33f4:	05000007 	orr	z7.s, z7.s, #0x1
    33f8:	b01402fb 	adrp	x27, 28060000 <__stack_size+0x2805c000>
    33fc:	00000000 	udf	#0
    3400:	00074309 	.inst	0x00074309 ; undefined
    3404:	02fc0500 	.inst	0x02fc0500 ; undefined
    3408:	0000b014 	udf	#45076
    340c:	3b090400 	.inst	0x3b090400 ; undefined
    3410:	05000007 	orr	z7.s, z7.s, #0x1
    3414:	b01402fd 	adrp	x29, 28060000 <__stack_size+0x2805c000>
    3418:	08000000 	stxrb	w0, w0, [x0]
    341c:	52434c0a 	.inst	0x52434c0a ; undefined
    3420:	02fe0500 	.inst	0x02fe0500 ; undefined
    3424:	0000b014 	udf	#45076
    3428:	4d0a0c00 	.inst	0x4d0a0c00 ; undefined
    342c:	05005243 	orr	z3.s, z3.s, #0xffc001ff
    3430:	b01402ff 	adrp	xzr, 28060000 <__stack_size+0x2805c000>
    3434:	10000000 	adr	x0, 3434 <__stack_size-0xbcc>
    3438:	52534c0a 	.inst	0x52534c0a ; undefined
    343c:	03000500 	.inst	0x03000500 ; undefined
    3440:	0000b014 	udf	#45076
    3444:	4d0a1400 	.inst	0x4d0a1400 ; undefined
    3448:	05005253 	orr	z19.s, z19.s, #0xffc001ff
    344c:	b0140301 	adrp	x1, 28064000 <__stack_size+0x28060000>
    3450:	18000000 	ldr	w0, 3450 <__stack_size-0xbb0>
    3454:	5243530a 	.inst	0x5243530a ; undefined
    3458:	03020500 	.inst	0x03020500 ; undefined
    345c:	0000b014 	udf	#45076
    3460:	90091c00 	adrp	x0, 12383000 <__stack_size+0x1237f000>
    3464:	05000007 	orr	z7.s, z7.s, #0x1
    3468:	04140303 	.inst	0x04140303 ; undefined
    346c:	20000002 	.inst	0x20000002 ; undefined
    3470:	5241460a 	.inst	0x5241460a ; undefined
    3474:	03040500 	.inst	0x03040500 ; undefined
    3478:	0000b014 	udf	#45076
    347c:	540a7000 	b.eq	1827c <__stack_size+0x1427c>  // b.none
    3480:	05005246 	orr	z6.s, z6.s, #0xffc001ff
    3484:	b0140305 	adrp	x5, 28064000 <__stack_size+0x28060000>
    3488:	74000000 	.inst	0x74000000 ; undefined
    348c:	5746520a 	.inst	0x5746520a ; undefined
    3490:	03060500 	.inst	0x03060500 ; undefined
    3494:	0000b014 	udf	#45076
    3498:	550a7800 	.inst	0x550a7800 ; undefined
    349c:	05005253 	orr	z19.s, z19.s, #0xffc001ff
    34a0:	b0140307 	adrp	x7, 28064000 <__stack_size+0x28060000>
    34a4:	7c000000 	stur	h0, [x0]
    34a8:	4c46540a 	.inst	0x4c46540a ; undefined
    34ac:	03080500 	.inst	0x03080500 ; undefined
    34b0:	0000b014 	udf	#45076
    34b4:	520a8000 	eor	w0, w0, #0x400040
    34b8:	05004c46 	orr	z6.h, z6.h, #0x380
    34bc:	b0140309 	adrp	x9, 28064000 <__stack_size+0x28060000>
    34c0:	84000000 	ld1sb	{z0.s}, p0/z, [x0, z0.s, uxtw]
    34c4:	00074b09 	.inst	0x00074b09 ; undefined
    34c8:	030a0500 	.inst	0x030a0500 ; undefined
    34cc:	00021914 	.inst	0x00021914 ; undefined
    34d0:	480a8800 	stlxrh	w10, w0, [x0]
    34d4:	05005854 	orr	z20.s, z20.s, #0xe00000
    34d8:	b014030b 	adrp	x11, 28064000 <__stack_size+0x28060000>
    34dc:	a4000000 	ld1rqb	{z0.b}, p0/z, [x0, x0]
    34e0:	00079e09 	.inst	0x00079e09 ; undefined
    34e4:	030c0500 	.inst	0x030c0500 ; undefined
    34e8:	0000b014 	udf	#45076
    34ec:	430aa800 	.inst	0x430aa800 ; undefined
    34f0:	05005250 	orr	z16.s, z16.s, #0xffc001ff
    34f4:	b014030d 	adrp	x13, 28064000 <__stack_size+0x28060000>
    34f8:	ac000000 	stnp	q0, q0, [x0]
    34fc:	00b00b00 	.inst	0x00b00b00 ; undefined
    3500:	02040000 	.inst	0x02040000 ; undefined
    3504:	350c0000 	cbnz	w0, 1b504 <__stack_size+0x17504>
    3508:	13000000 	sbfx	w0, w0, #0, #1
    350c:	01f40500 	.inst	0x01f40500 ; undefined
    3510:	b00b0000 	adrp	x0, 16004000 <__stack_size+0x16000000>
    3514:	19000000 	stlurb	w0, [x0]
    3518:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    351c:	00000035 	udf	#53
    3520:	09050006 	.inst	0x09050006 ; undefined
    3524:	0d000002 	st1	{v2.b}[0], [x0]
    3528:	000007a4 	udf	#1956
    352c:	02030e05 	.inst	0x02030e05 ; undefined
    3530:	000000df 	udf	#223
    3534:	000cd50e 	.inst	0x000cd50e ; undefined
    3538:	43040700 	.inst	0x43040700 ; undefined
    353c:	06000000 	.inst	0x06000000 ; undefined
    3540:	510e0130 	sub	w16, w9, #0x380
    3544:	07000002 	.inst	0x07000002 ; undefined
    3548:	00000f85 	udf	#3973
    354c:	0bfb0700 	.inst	0x0bfb0700 ; undefined
    3550:	07010000 	.inst	0x07010000 ; undefined
    3554:	00000e7a 	udf	#3706
    3558:	db0d0002 	.inst	0xdb0d0002 ; undefined
    355c:	06000008 	.inst	0x06000008 ; undefined
    3560:	2b030134 	adds	w20, w9, w3
    3564:	0e000002 	tbl	v2.8b, {v0.16b}, v0.8b
    3568:	00000ff6 	udf	#4086
    356c:	00430407 	.inst	0x00430407 ; undefined
    3570:	3c060000 	stur	b0, [x0, #96]
    3574:	028a0e01 	.inst	0x028a0e01 ; undefined
    3578:	6e070000 	ext	v0.16b, v0.16b, v7.16b, #0
    357c:	0000000c 	udf	#12
    3580:	000c8007 	.inst	0x000c8007 ; undefined
    3584:	92070100 	and	x0, x8, #0x200000002000000
    3588:	0200000c 	.inst	0x0200000c ; undefined
    358c:	000d0907 	.inst	0x000d0907 ; undefined
    3590:	0d000300 	st1	{v0.b}[0], [x24]
    3594:	00000cc2 	udf	#3266
    3598:	03014106 	.inst	0x03014106 ; undefined
    359c:	0000025e 	udf	#606
    35a0:	001a8a0e 	.inst	0x001a8a0e ; undefined
    35a4:	43040700 	.inst	0x43040700 ; undefined
    35a8:	06000000 	.inst	0x06000000 ; undefined
    35ac:	c3060142 	.inst	0xc3060142 ; undefined
    35b0:	07000002 	.inst	0x07000002 ; undefined
    35b4:	00001d56 	udf	#7510
    35b8:	1c3f0700 	ldr	s0, 81698 <__stack_size+0x7d698>
    35bc:	07010000 	.inst	0x07010000 ; undefined
    35c0:	00001c21 	udf	#7201
    35c4:	1d0e0702 	.inst	0x1d0e0702 ; undefined
    35c8:	00030000 	.inst	0x00030000 ; undefined
    35cc:	001c750e 	.inst	0x001c750e ; undefined
    35d0:	43040700 	.inst	0x43040700 ; undefined
    35d4:	06000000 	.inst	0x06000000 ; undefined
    35d8:	01060148 	.inst	0x01060148 ; undefined
    35dc:	07000003 	.inst	0x07000003 ; undefined
    35e0:	00001b87 	udf	#7047
    35e4:	1c2f0700 	ldr	s0, 616c4 <__stack_size+0x5d6c4>
    35e8:	07010000 	.inst	0x07010000 ; undefined
    35ec:	00001ad8 	udf	#6872
    35f0:	1d9b0702 	.inst	0x1d9b0702 ; undefined
    35f4:	07040000 	.inst	0x07040000 ; undefined
    35f8:	00001a20 	udf	#6688
    35fc:	1a9d0706 	csinc	w6, w24, w29, eq  // eq = none
    3600:	07070000 	.inst	0x07070000 ; undefined
    3604:	00001bdf 	udf	#7135
    3608:	cb0e000c 	sub	x12, x0, x14
    360c:	0700001c 	.inst	0x0700001c ; undefined
    3610:	00004304 	udf	#17156
    3614:	01510600 	.inst	0x01510600 ; undefined
    3618:	00032d06 	.inst	0x00032d06 ; undefined
    361c:	1d2f0700 	.inst	0x1d2f0700 ; undefined
    3620:	07000000 	.inst	0x07000000 ; undefined
    3624:	00001c1e 	udf	#7198
    3628:	1d0b0701 	.inst	0x1d0b0701 ; undefined
    362c:	07020000 	.inst	0x07020000 ; undefined
    3630:	00001b3c 	udf	#6972
    3634:	660e0003 	.inst	0x660e0003 ; undefined
    3638:	0700001d 	.inst	0x0700001d ; undefined
    363c:	00004304 	udf	#17156
    3640:	01670600 	.inst	0x01670600 ; undefined
    3644:	00035f06 	.inst	0x00035f06 ; undefined
    3648:	1c0f0700 	ldr	s0, 21728 <__stack_size+0x1d728>
    364c:	07010000 	.inst	0x07010000 ; undefined
    3650:	00001bf2 	udf	#7154
    3654:	1c010702 	ldr	s2, 5734 <__stack_size+0x1734>
    3658:	07040000 	.inst	0x07040000 ; undefined
    365c:	00001abf 	udf	#6847
    3660:	1d490708 	.inst	0x1d490708 ; undefined
    3664:	000f0000 	.inst	0x000f0000 ; undefined
    3668:	0006900f 	.inst	0x0006900f ; undefined
    366c:	05140700 	mov	z0.b, p4/z, #56
    3670:	00000072 	udf	#114
    3674:	00000376 	udf	#886
    3678:	00037610 	.inst	0x00037610 ; undefined
    367c:	12001100 	and	w0, w8, #0x1f
    3680:	00038308 	.inst	0x00038308 ; undefined
    3684:	08010300 	stxrb	w1, w0, [x24]
    3688:	0000011b 	udf	#283
    368c:	00037c13 	.inst	0x00037c13 ; undefined
    3690:	1cf61400 	ldr	s0, fffffffffffef910 <_sp+0xffffffff9efaf910>
    3694:	c7020000 	.inst	0xc7020000 ; undefined
    3698:	00720501 	.inst	0x00720501 ; undefined
	...
    36a4:	00540000 	.inst	0x00540000 ; undefined
    36a8:	00000000 	udf	#0
    36ac:	9c010000 	ldr	q0, 56ac <__stack_size+0x16ac>
    36b0:	000003cc 	udf	#972
    36b4:	001d6115 	.inst	0x001d6115 ; undefined
    36b8:	01c70200 	.inst	0x01c70200 ; undefined
    36bc:	0003cc26 	.inst	0x0003cc26 ; undefined
    36c0:	68910200 	stgp	x0, x0, [x16], #544
    36c4:	00121416 	.inst	0x00121416 ; undefined
    36c8:	01c90200 	.inst	0x01c90200 ; undefined
    36cc:	00007206 	udf	#29190
    36d0:	7c910200 	.inst	0x7c910200 ; undefined
    36d4:	1e081200 	.inst	0x1e081200 ; undefined
    36d8:	14000002 	b	36e0 <__stack_size-0x920>
    36dc:	00001bb1 	udf	#7089
    36e0:	0501b902 	orr	z2.s, z2.s, #0x3fe00
    36e4:	00000072 	udf	#114
	...
    36f0:	00000054 	udf	#84
    36f4:	00000000 	udf	#0
    36f8:	04169c01 	.inst	0x04169c01 ; undefined
    36fc:	61150000 	.inst	0x61150000 ; undefined
    3700:	0200001d 	.inst	0x0200001d ; undefined
    3704:	cc2401b9 	.inst	0xcc2401b9 ; undefined
    3708:	02000003 	.inst	0x02000003 ; undefined
    370c:	14166891 	b	59d950 <__stack_size+0x599950>
    3710:	02000012 	.inst	0x02000012 ; undefined
    3714:	720901bb 	ands	w27, w13, #0x800000
    3718:	02000000 	.inst	0x02000000 ; undefined
    371c:	17007c91 	b	fffffffffc022960 <_sp+0xffffffff9afe2960>
    3720:	00001cde 	udf	#7390
    3724:	0501ac02 	orr	z2.h, z2.h, #0x800
    3728:	00000072 	udf	#114
	...
    3734:	00000058 	udf	#88
    3738:	00000000 	udf	#0
    373c:	045a9c01 	.inst	0x045a9c01 ; undefined
    3740:	61150000 	.inst	0x61150000 ; undefined
    3744:	0200001d 	.inst	0x0200001d ; undefined
    3748:	cc2e01ac 	.inst	0xcc2e01ac ; undefined
    374c:	02000003 	.inst	0x02000003 ; undefined
    3750:	14166891 	b	59d994 <__stack_size+0x599994>
    3754:	02000012 	.inst	0x02000012 ; undefined
    3758:	720901ae 	ands	w14, w13, #0x800000
    375c:	02000000 	.inst	0x02000000 ; undefined
    3760:	14007c91 	b	229a4 <__stack_size+0x1e9a4>
    3764:	00001b26 	udf	#6950
    3768:	05017102 	orr	z2.s, z2.s, #0x7fc0000
    376c:	00000072 	udf	#114
	...
    3778:	00000174 	udf	#372
    377c:	00000000 	udf	#0
    3780:	04ce9c01 	.inst	0x04ce9c01 ; undefined
    3784:	61150000 	.inst	0x61150000 ; undefined
    3788:	0200001d 	.inst	0x0200001d ; undefined
    378c:	cc2c0171 	.inst	0xcc2c0171 ; undefined
    3790:	02000003 	.inst	0x02000003 ; undefined
    3794:	14166891 	b	59d9d8 <__stack_size+0x5999d8>
    3798:	02000012 	.inst	0x02000012 ; undefined
    379c:	72090173 	ands	w19, w11, #0x800000
    37a0:	02000000 	.inst	0x02000000 ; undefined
    37a4:	52167c91 	.inst	0x52167c91 ; undefined
    37a8:	0200001b 	.inst	0x0200001b ; undefined
    37ac:	72090174 	ands	w20, w11, #0x800000
    37b0:	02000000 	.inst	0x02000000 ; undefined
    37b4:	72187891 	ands	w17, w4, #0xffffff7f
    37b8:	02006765 	.inst	0x02006765 ; undefined
    37bc:	a40e0175 	ld1rqb	{z21.b}, p0/z, [x11, x14]
    37c0:	02000000 	.inst	0x02000000 ; undefined
    37c4:	7d167491 	str	h17, [x4, #2874]
    37c8:	0200001c 	.inst	0x0200001c ; undefined
    37cc:	c3180176 	.inst	0xc3180176 ; undefined
    37d0:	02000002 	.inst	0x02000002 ; undefined
    37d4:	19007091 	stlurb	w17, [x4, #7]
    37d8:	00001cb7 	udf	#7351
    37dc:	06015a02 	.inst	0x06015a02 ; undefined
	...
    37e8:	000000d8 	udf	#216
    37ec:	00000000 	udf	#0
    37f0:	050e9c01 	.inst	0x050e9c01 ; undefined
    37f4:	61150000 	.inst	0x61150000 ; undefined
    37f8:	0200001d 	.inst	0x0200001d ; undefined
    37fc:	cc2b015a 	.inst	0xcc2b015a ; undefined
    3800:	02000003 	.inst	0x02000003 ; undefined
    3804:	d6157891 	.inst	0xd6157891 ; undefined
    3808:	0200001c 	.inst	0x0200001c ; undefined
    380c:	0149015a 	.inst	0x0149015a ; undefined
    3810:	02000003 	.inst	0x02000003 ; undefined
    3814:	19007491 	.inst	0x19007491 ; undefined
    3818:	00001d1b 	udf	#7451
    381c:	06014402 	.inst	0x06014402 ; undefined
	...
    3828:	000000d8 	udf	#216
    382c:	00000000 	udf	#0
    3830:	054e9c01 	.inst	0x054e9c01 ; undefined
    3834:	61150000 	.inst	0x61150000 ; undefined
    3838:	0200001d 	.inst	0x0200001d ; undefined
    383c:	cc2b0144 	.inst	0xcc2b0144 ; undefined
    3840:	02000003 	.inst	0x02000003 ; undefined
    3844:	d6157891 	.inst	0xd6157891 ; undefined
    3848:	0200001c 	.inst	0x0200001c ; undefined
    384c:	97490144 	bl	fffffffffd243d5c <_sp+0xffffffff9c203d5c>
    3850:	02000002 	.inst	0x02000002 ; undefined
    3854:	1a007491 	.inst	0x1a007491 ; undefined
    3858:	00001c5b 	udf	#7259
    385c:	06013702 	.inst	0x06013702 ; undefined
	...
    3868:	00000070 	udf	#112
    386c:	00000000 	udf	#0
    3870:	059e9c01 	.inst	0x059e9c01 ; undefined
    3874:	61150000 	.inst	0x61150000 ; undefined
    3878:	0200001d 	.inst	0x0200001d ; undefined
    387c:	cc290137 	.inst	0xcc290137 ; undefined
    3880:	02000003 	.inst	0x02000003 ; undefined
    3884:	ff156891 	.inst	0xff156891 ; undefined
    3888:	02000019 	.inst	0x02000019 ; undefined
    388c:	2d3f0137 	stp	s23, s0, [x9, #-8]
    3890:	02000003 	.inst	0x02000003 ; undefined
    3894:	72186491 	ands	w17, w4, #0xffffff03
    3898:	02006765 	.inst	0x02006765 ; undefined
    389c:	790a0139 	strh	w25, [x9, #1280]
    38a0:	02000000 	.inst	0x02000000 ; undefined
    38a4:	19007f91 	.inst	0x19007f91 ; undefined
    38a8:	00001a79 	udf	#6777
    38ac:	06012902 	.inst	0x06012902 ; undefined
	...
    38b8:	00000054 	udf	#84
    38bc:	00000000 	udf	#0
    38c0:	05ee9c01 	.inst	0x05ee9c01 ; undefined
    38c4:	61150000 	.inst	0x61150000 ; undefined
    38c8:	0200001d 	.inst	0x0200001d ; undefined
    38cc:	cc280129 	.inst	0xcc280129 ; undefined
    38d0:	02000003 	.inst	0x02000003 ; undefined
    38d4:	ff156891 	.inst	0xff156891 ; undefined
    38d8:	02000019 	.inst	0x02000019 ; undefined
    38dc:	2d3f0129 	stp	s9, s0, [x9, #-8]
    38e0:	02000003 	.inst	0x02000003 ; undefined
    38e4:	72186491 	ands	w17, w4, #0xffffff03
    38e8:	02006765 	.inst	0x02006765 ; undefined
    38ec:	790a012b 	strh	w11, [x9, #1280]
    38f0:	02000000 	.inst	0x02000000 ; undefined
    38f4:	19007f91 	.inst	0x19007f91 ; undefined
    38f8:	00001aad 	udf	#6829
    38fc:	06011d02 	.inst	0x06011d02 ; undefined
	...
    3908:	0000003c 	udf	#60
    390c:	00000000 	udf	#0
    3910:	061e9c01 	.inst	0x061e9c01 ; undefined
    3914:	61150000 	.inst	0x61150000 ; undefined
    3918:	0200001d 	.inst	0x0200001d ; undefined
    391c:	cc29011d 	.inst	0xcc29011d ; undefined
    3920:	02000003 	.inst	0x02000003 ; undefined
    3924:	17007891 	b	fffffffffc021b68 <_sp+0xffffffff9afe1b68>
    3928:	00001b98 	udf	#7064
    392c:	05011302 	orr	z2.s, z2.s, #0xc07fffff
    3930:	00000072 	udf	#114
	...
    393c:	00000040 	udf	#64
    3940:	00000000 	udf	#0
    3944:	06529c01 	.inst	0x06529c01 ; undefined
    3948:	61150000 	.inst	0x61150000 ; undefined
    394c:	0200001d 	.inst	0x0200001d ; undefined
    3950:	cc280113 	.inst	0xcc280113 ; undefined
    3954:	02000003 	.inst	0x02000003 ; undefined
    3958:	17007891 	b	fffffffffc021b9c <_sp+0xffffffff9afe1b9c>
    395c:	00001c83 	udf	#7299
    3960:	05010902 	orr	z2.s, z2.s, #0x800000ff
    3964:	00000072 	udf	#114
	...
    3970:	0000003c 	udf	#60
    3974:	00000000 	udf	#0
    3978:	06869c01 	.inst	0x06869c01 ; undefined
    397c:	61150000 	.inst	0x61150000 ; undefined
    3980:	0200001d 	.inst	0x0200001d ; undefined
    3984:	cc270109 	.inst	0xcc270109 ; undefined
    3988:	02000003 	.inst	0x02000003 ; undefined
    398c:	19007891 	.inst	0x19007891 ; undefined
    3990:	00001bc8 	udf	#7112
    3994:	06010102 	.inst	0x06010102 ; undefined
	...
    39a0:	00000040 	udf	#64
    39a4:	00000000 	udf	#0
    39a8:	06b69c01 	.inst	0x06b69c01 ; undefined
    39ac:	61150000 	.inst	0x61150000 ; undefined
    39b0:	0200001d 	.inst	0x0200001d ; undefined
    39b4:	cc2e0101 	.inst	0xcc2e0101 ; undefined
    39b8:	02000003 	.inst	0x02000003 ; undefined
    39bc:	1b007891 	madd	w17, w4, w0, w30
    39c0:	00001a0a 	udf	#6666
    39c4:	0006f802 	.inst	0x0006f802 ; undefined
    39c8:	00000000 	udf	#0
    39cc:	3c000000 	stur	b0, [x0]
    39d0:	00000000 	udf	#0
    39d4:	01000000 	.inst	0x01000000 ; undefined
    39d8:	0006e49c 	.inst	0x0006e49c ; undefined
    39dc:	1d611c00 	.inst	0x1d611c00 ; undefined
    39e0:	f8020000 	stur	x0, [x0, #32]
    39e4:	0003cc2d 	.inst	0x0003cc2d ; undefined
    39e8:	78910200 	ldursh	x0, [x16, #-240]
    39ec:	1d871d00 	.inst	0x1d871d00 ; undefined
    39f0:	d5020000 	msr	s0_2_c0_c0_0, x0
    39f4:	00007205 	udf	#29189
	...
    3a00:	00005400 	udf	#21504
    3a04:	00000000 	udf	#0
    3a08:	169c0100 	b	fffffffffa703e08 <_sp+0xffffffff996c3e08>
    3a0c:	1c000007 	ldr	s7, 3a0c <__stack_size-0x5f4>
    3a10:	00001d61 	udf	#7521
    3a14:	cc2ad502 	.inst	0xcc2ad502 ; undefined
    3a18:	02000003 	.inst	0x02000003 ; undefined
    3a1c:	1e007891 	.inst	0x1e007891 ; undefined
    3a20:	00001b5e 	udf	#7006
    3a24:	7205ca02 	ands	w2, w16, #0x38383838
	...
    3a30:	4c000000 	st4	{v0.16b-v3.16b}, [x0]
    3a34:	00000000 	udf	#0
    3a38:	01000000 	.inst	0x01000000 ; undefined
    3a3c:	0007489c 	.inst	0x0007489c ; undefined
    3a40:	1d611c00 	.inst	0x1d611c00 ; undefined
    3a44:	ca020000 	eor	x0, x0, x2
    3a48:	0003cc29 	.inst	0x0003cc29 ; undefined
    3a4c:	78910200 	ldursh	x0, [x16, #-240]
    3a50:	1b151b00 	madd	w0, w24, w21, w6
    3a54:	c1020000 	.inst	0xc1020000 ; undefined
    3a58:	00000006 	udf	#6
    3a5c:	00000000 	udf	#0
    3a60:	00003c00 	udf	#15360
    3a64:	00000000 	udf	#0
    3a68:	769c0100 	.inst	0x769c0100 ; undefined
    3a6c:	1c000007 	ldr	s7, 3a6c <__stack_size-0x594>
    3a70:	00001d61 	udf	#7521
    3a74:	cc28c102 	.inst	0xcc28c102 ; undefined
    3a78:	02000003 	.inst	0x02000003 ; undefined
    3a7c:	1b007891 	madd	w17, w4, w0, w30
    3a80:	00001a68 	udf	#6760
    3a84:	0006bb02 	.inst	0x0006bb02 ; undefined
    3a88:	00000000 	udf	#0
    3a8c:	3c000000 	stur	b0, [x0]
    3a90:	00000000 	udf	#0
    3a94:	01000000 	.inst	0x01000000 ; undefined
    3a98:	0007a49c 	.inst	0x0007a49c ; undefined
    3a9c:	1d611c00 	.inst	0x1d611c00 ; undefined
    3aa0:	bb020000 	.inst	0xbb020000 ; undefined
    3aa4:	0003cc28 	.inst	0x0003cc28 ; undefined
    3aa8:	78910200 	ldursh	x0, [x16, #-240]
    3aac:	1c941e00 	ldr	s0, fffffffffff2be6c <_sp+0xffffffff9eeebe6c>
    3ab0:	b4020000 	cbz	x0, 7ab0 <__stack_size+0x3ab0>
    3ab4:	00007909 	udf	#30985
	...
    3ac0:	00004c00 	udf	#19456
    3ac4:	00000000 	udf	#0
    3ac8:	d69c0100 	.inst	0xd69c0100 ; undefined
    3acc:	1c000007 	ldr	s7, 3acc <__stack_size-0x534>
    3ad0:	00001d61 	udf	#7521
    3ad4:	cc2db402 	.inst	0xcc2db402 ; undefined
    3ad8:	02000003 	.inst	0x02000003 ; undefined
    3adc:	1e007891 	.inst	0x1e007891 ; undefined
    3ae0:	00001ace 	udf	#6862
    3ae4:	79098302 	strh	w2, [x24, #1216]
	...
    3af0:	60000000 	.inst	0x60000000 ; undefined
    3af4:	00000000 	udf	#0
    3af8:	01000000 	.inst	0x01000000 ; undefined
    3afc:	0008179c 	.inst	0x0008179c ; undefined
    3b00:	1d611c00 	.inst	0x1d611c00 ; undefined
    3b04:	83020000 	.inst	0x83020000 ; undefined
    3b08:	0003cc24 	.inst	0x0003cc24 ; undefined
    3b0c:	68910200 	stgp	x0, x0, [x16], #544
    3b10:	6765721f 	.inst	0x6765721f ; undefined
    3b14:	0e850200 	.inst	0x0e850200 ; undefined
    3b18:	000000a4 	udf	#164
    3b1c:	007c9102 	.inst	0x007c9102 ; undefined
    3b20:	001ca71e 	.inst	0x001ca71e ; undefined
    3b24:	09750200 	.inst	0x09750200 ; undefined
    3b28:	00000066 	udf	#102
	...
    3b34:	00000068 	udf	#104
    3b38:	00000000 	udf	#0
    3b3c:	08589c01 	ldaxrb	w1, [x0]
    3b40:	611c0000 	.inst	0x611c0000 ; undefined
    3b44:	0200001d 	.inst	0x0200001d ; undefined
    3b48:	03cc2a75 	.inst	0x03cc2a75 ; undefined
    3b4c:	91020000 	add	x0, x0, #0x80
    3b50:	61762078 	.inst	0x61762078 ; undefined
    3b54:	7502006c 	.inst	0x7502006c ; undefined
    3b58:	00008541 	udf	#34113
    3b5c:	77910200 	.inst	0x77910200 ; undefined
    3b60:	07301e00 	.inst	0x07301e00 ; undefined
    3b64:	6c020000 	stnp	d0, d0, [x0, #32]
    3b68:	00006609 	udf	#26121
    3b6c:	0031d800 	.inst	0x0031d800 ; NYI
    3b70:	00000061 	udf	#97
    3b74:	00006800 	udf	#26624
    3b78:	00000000 	udf	#0
    3b7c:	999c0100 	ldapursw	x0, [x8, #-64]
    3b80:	1c000008 	ldr	s8, 3b80 <__stack_size-0x480>
    3b84:	00001d61 	udf	#7521
    3b88:	cc256c02 	.inst	0xcc256c02 ; undefined
    3b8c:	02000003 	.inst	0x02000003 ; undefined
    3b90:	76207891 	.inst	0x76207891 ; undefined
    3b94:	02006c61 	.inst	0x02006c61 ; undefined
    3b98:	00853c6c 	.inst	0x00853c6c ; undefined
    3b9c:	91020000 	add	x0, x0, #0x80
    3ba0:	e81e0077 	.inst	0xe81e0077 ; undefined
    3ba4:	0200001a 	.inst	0x0200001a ; undefined
    3ba8:	0079095d 	.inst	0x0079095d ; undefined
    3bac:	31940000 	.inst	0x31940000 ; undefined
    3bb0:	00006100 	udf	#24832
    3bb4:	00440000 	.inst	0x00440000 ; undefined
    3bb8:	00000000 	udf	#0
    3bbc:	9c010000 	ldr	q0, 5bbc <__stack_size+0x1bbc>
    3bc0:	000008cb 	udf	#2251
    3bc4:	001d611c 	.inst	0x001d611c ; undefined
    3bc8:	2c5d0200 	ldnp	s0, s0, [x16, #232]
    3bcc:	000003cc 	udf	#972
    3bd0:	00789102 	.inst	0x00789102 ; undefined
    3bd4:	001d721e 	.inst	0x001d721e ; undefined
    3bd8:	09440200 	.inst	0x09440200 ; undefined
    3bdc:	00000066 	udf	#102
    3be0:	610030e8 	.inst	0x610030e8 ; undefined
    3be4:	00000000 	udf	#0
    3be8:	000000ac 	udf	#172
    3bec:	00000000 	udf	#0
    3bf0:	090c9c01 	.inst	0x090c9c01 ; undefined
    3bf4:	611c0000 	.inst	0x611c0000 ; undefined
    3bf8:	0200001d 	.inst	0x0200001d ; undefined
    3bfc:	03cc2f44 	.inst	0x03cc2f44 ; undefined
    3c00:	91020000 	add	x0, x0, #0x80
    3c04:	1c6d1c78 	ldr	s24, ddf90 <__stack_size+0xd9f90>
    3c08:	44020000 	.inst	0x44020000 ; undefined
    3c0c:	00025146 	.inst	0x00025146 ; undefined
    3c10:	74910200 	.inst	0x74910200 ; undefined
    3c14:	1b711e00 	.inst	0x1b711e00 ; undefined
    3c18:	2c020000 	stnp	s0, s0, [x0, #16]
    3c1c:	00007909 	udf	#30985
    3c20:	00304000 	.inst	0x00304000 ; NYI
    3c24:	00000061 	udf	#97
    3c28:	0000a800 	udf	#43008
    3c2c:	00000000 	udf	#0
    3c30:	4d9c0100 	st1	{v0.b}[8], [x8], x28
    3c34:	1c000009 	ldr	s9, 3c34 <__stack_size-0x3cc>
    3c38:	00001d61 	udf	#7521
    3c3c:	cc302c02 	.inst	0xcc302c02 ; undefined
    3c40:	02000003 	.inst	0x02000003 ; undefined
    3c44:	fe1c7891 	.inst	0xfe1c7891 ; undefined
    3c48:	0200000f 	.inst	0x0200000f ; undefined
    3c4c:	028a482c 	.inst	0x028a482c ; undefined
    3c50:	91020000 	add	x0, x0, #0x80
    3c54:	fa1e0074 	sbcs	x20, x3, x30
    3c58:	0200001a 	.inst	0x0200001a ; undefined
    3c5c:	00790923 	.inst	0x00790923 ; undefined
    3c60:	2f880000 	mla	v0.2s, v0.2s, v8.s[0]
    3c64:	00006100 	udf	#24832
    3c68:	00b80000 	.inst	0x00b80000 ; undefined
    3c6c:	00000000 	udf	#0
    3c70:	9c010000 	ldr	q0, 5c70 <__stack_size+0x1c70>
    3c74:	0000098e 	udf	#2446
    3c78:	001d611c 	.inst	0x001d611c ; undefined
    3c7c:	2d230200 	stp	s0, s0, [x16, #-232]
    3c80:	000003cc 	udf	#972
    3c84:	1c789102 	ldr	s2, f4ea4 <__stack_size+0xf0ea4>
    3c88:	00001bbf 	udf	#7103
    3c8c:	a43c2302 	.inst	0xa43c2302 ; undefined
    3c90:	02000000 	.inst	0x02000000 ; undefined
    3c94:	1d007491 	.inst	0x1d007491 ; undefined
    3c98:	00000e6e 	udf	#3694
    3c9c:	66091302 	.inst	0x66091302 ; undefined
    3ca0:	d0000000 	adrp	x0, 5000 <__stack_size+0x1000>
    3ca4:	0061002e 	.inst	0x0061002e ; undefined
    3ca8:	b8000000 	stur	w0, [x0]
    3cac:	00000000 	udf	#0
    3cb0:	01000000 	.inst	0x01000000 ; undefined
    3cb4:	0009ed9c 	.inst	0x0009ed9c ; undefined
    3cb8:	1d611c00 	.inst	0x1d611c00 ; undefined
    3cbc:	13020000 	sbfiz	w0, w0, #30, #1
    3cc0:	0003cc26 	.inst	0x0003cc26 ; undefined
    3cc4:	78910200 	ldursh	x0, [x16, #-240]
    3cc8:	001bbf1c 	.inst	0x001bbf1c ; undefined
    3ccc:	35130200 	cbnz	w0, 29d0c <__stack_size+0x25d0c>
    3cd0:	000000a4 	udf	#164
    3cd4:	1c749102 	ldr	s2, ecef4 <__stack_size+0xe8ef4>
    3cd8:	00000ffe 	udf	#4094
    3cdc:	8a511302 	and	x2, x24, x17, lsr #4
    3ce0:	02000002 	.inst	0x02000002 ; undefined
    3ce4:	6d1c7091 	stp	d17, d28, [x4, #448]
    3ce8:	0200001c 	.inst	0x0200001c ; undefined
    3cec:	02516e13 	.inst	0x02516e13 ; undefined
    3cf0:	91020000 	add	x0, x0, #0x80
    3cf4:	0d21006c 	.inst	0x0d21006c ; undefined
    3cf8:	0100001b 	.inst	0x0100001b ; undefined
    3cfc:	00721330 	.inst	0x00721330 ; undefined
    3d00:	2eb00000 	uaddl	v0.2d, v0.2s, v16.2s
    3d04:	00006100 	udf	#24832
    3d08:	00200000 	.inst	0x00200000 ; NYI
    3d0c:	00000000 	udf	#0
    3d10:	9c010000 	ldr	q0, 5d10 <__stack_size+0x1d10>
    3d14:	00000a4c 	udf	#2636
    3d18:	001baa1c 	.inst	0x001baa1c ; undefined
    3d1c:	22300100 	.inst	0x22300100 ; undefined
    3d20:	00000a4c 	udf	#2636
    3d24:	20789102 	.inst	0x20789102 ; undefined
    3d28:	00667562 	.inst	0x00667562 ; undefined
    3d2c:	4e313001 	ssubw2	v1.8h, v0.8h, v17.16b
    3d30:	0200000a 	.inst	0x0200000a ; undefined
    3d34:	861c7091 	.inst	0x861c7091 ; undefined
    3d38:	0100001f 	.inst	0x0100001f ; undefined
    3d3c:	00723a30 	.inst	0x00723a30 ; undefined
    3d40:	91020000 	add	x0, x0, #0x80
    3d44:	1d061c6c 	.inst	0x1d061c6c ; undefined
    3d48:	31010000 	adds	w0, w0, #0x40
    3d4c:	00002911 	udf	#10513
    3d50:	60910200 	.inst	0x60910200 ; undefined
    3d54:	12082200 	and	w0, w16, #0xff000001
    3d58:	00037c08 	.inst	0x00037c08 ; undefined
    3d5c:	07a90000 	.inst	0x07a90000 ; undefined
    3d60:	00040000 	.inst	0x00040000 ; undefined
    3d64:	0000105f 	udf	#4191
    3d68:	02200108 	.inst	0x02200108 ; undefined
    3d6c:	f70c0000 	.inst	0xf70c0000 ; undefined
    3d70:	2f00001d 	.inst	0x2f00001d ; undefined
    3d74:	c0000000 	.inst	0xc0000000 ; undefined
    3d78:	00000008 	udf	#8
    3d7c:	00000000 	udf	#0
    3d80:	80000000 	.inst	0x80000000 ; undefined
    3d84:	02000021 	.inst	0x02000021 ; undefined
    3d88:	017c0708 	.inst	0x017c0708 ; undefined
    3d8c:	08020000 	stxrb	w2, w0, [x0]
    3d90:	0001cb05 	.inst	0x0001cb05 ; undefined
    3d94:	07040200 	.inst	0x07040200 ; undefined
    3d98:	00000181 	udf	#385
    3d9c:	46051002 	.inst	0x46051002 ; undefined
    3da0:	02000001 	.inst	0x02000001 ; undefined
    3da4:	01000710 	.inst	0x01000710 ; undefined
    3da8:	01020000 	.inst	0x01020000 ; undefined
    3dac:	00011406 	.inst	0x00011406 ; undefined
    3db0:	05020200 	orr	z0.d, z0.d, #0x1ffff
    3db4:	000001d4 	udf	#468
    3db8:	0007b503 	.inst	0x0007b503 ; undefined
    3dbc:	0d570200 	.inst	0x0d570200 ; undefined
    3dc0:	00000066 	udf	#102
    3dc4:	69050404 	stgp	x4, x1, [x0, #160]
    3dc8:	0200746e 	.inst	0x0200746e ; undefined
    3dcc:	01120801 	.inst	0x01120801 ; undefined
    3dd0:	02020000 	.inst	0x02020000 ; undefined
    3dd4:	00013307 	.inst	0x00013307 ; undefined
    3dd8:	07b40300 	.inst	0x07b40300 ; undefined
    3ddc:	5b020000 	.inst	0x5b020000 ; undefined
    3de0:	00003716 	udf	#14102
    3de4:	007b0500 	.inst	0x007b0500 ; undefined
    3de8:	08020000 	stxrb	w2, w0, [x0]
    3dec:	0001c605 	.inst	0x0001c605 ; undefined
    3df0:	07080200 	.inst	0x07080200 ; undefined
    3df4:	00000177 	udf	#375
    3df8:	00008706 	udf	#34566
    3dfc:	0000aa00 	udf	#43520
    3e00:	00290700 	.inst	0x00290700 ; NYI
    3e04:	00230000 	.inst	0x00230000 ; NYI
    3e08:	00009a05 	udf	#39429
    3e0c:	01000800 	.inst	0x01000800 ; undefined
    3e10:	09021303 	.inst	0x09021303 ; undefined
    3e14:	00000250 	udf	#592
    3e18:	001e8909 	.inst	0x001e8909 ; undefined
    3e1c:	02140300 	.inst	0x02140300 ; undefined
    3e20:	00008711 	udf	#34577
    3e24:	90090000 	adrp	x0, 12003000 <__stack_size+0x11fff000>
    3e28:	0300001e 	.inst	0x0300001e ; undefined
    3e2c:	87140215 	.inst	0x87140215 ; undefined
    3e30:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    3e34:	001fc809 	.inst	0x001fc809 ; undefined
    3e38:	02160300 	.inst	0x02160300 ; undefined
    3e3c:	00008714 	udf	#34580
    3e40:	6a090800 	ands	w0, w0, w9, lsl #2
    3e44:	0300001f 	.inst	0x0300001f ; undefined
    3e48:	87140217 	.inst	0x87140217 ; undefined
    3e4c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    3e50:	5245530a 	.inst	0x5245530a ; undefined
    3e54:	02180300 	.inst	0x02180300 ; undefined
    3e58:	00008714 	udf	#34580
    3e5c:	30091000 	adr	x0, 1605d <__stack_size+0x1205d>
    3e60:	0300001f 	.inst	0x0300001f ; undefined
    3e64:	87140219 	.inst	0x87140219 ; undefined
    3e68:	14000000 	b	3e68 <__stack_size-0x198>
    3e6c:	001dc309 	.inst	0x001dc309 ; undefined
    3e70:	021a0300 	.inst	0x021a0300 ; undefined
    3e74:	00008714 	udf	#34580
    3e78:	ca091800 	eor	x0, x0, x9, lsl #6
    3e7c:	0300001d 	.inst	0x0300001d ; undefined
    3e80:	8714021b 	.inst	0x8714021b ; undefined
    3e84:	1c000000 	ldr	s0, 3e84 <__stack_size-0x17c>
    3e88:	00132109 	.inst	0x00132109 ; undefined
    3e8c:	021c0300 	.inst	0x021c0300 ; undefined
    3e90:	00008714 	udf	#34580
    3e94:	ff092000 	.inst	0xff092000 ; undefined
    3e98:	03000010 	.inst	0x03000010 ; undefined
    3e9c:	8714021d 	.inst	0x8714021d ; undefined
    3ea0:	24000000 	cmphs	p0.b, p0/z, z0.b, z0.b
    3ea4:	0052530a 	.inst	0x0052530a ; undefined
    3ea8:	14021e03 	b	8b6b4 <__stack_size+0x876b4>
    3eac:	00000087 	udf	#135
    3eb0:	4d490a28 	.inst	0x4d490a28 ; undefined
    3eb4:	1f030052 	fmadd	s18, s2, s3, s0
    3eb8:	00871402 	.inst	0x00871402 ; undefined
    3ebc:	0a2c0000 	bic	w0, w0, w12
    3ec0:	00525349 	.inst	0x00525349 ; undefined
    3ec4:	14022003 	b	8bed0 <__stack_size+0x87ed0>
    3ec8:	00000087 	udf	#135
    3ecc:	1fcf0930 	fmadd	h16, h9, h15, h2
    3ed0:	21030000 	.inst	0x21030000 ; undefined
    3ed4:	00871402 	.inst	0x00871402 ; undefined
    3ed8:	09340000 	.inst	0x09340000 ; undefined
    3edc:	00001e7b 	udf	#7803
    3ee0:	14022203 	b	8c6ec <__stack_size+0x886ec>
    3ee4:	00000087 	udf	#135
    3ee8:	1ed30938 	.inst	0x1ed30938 ; undefined
    3eec:	23030000 	.inst	0x23030000 ; undefined
    3ef0:	00871402 	.inst	0x00871402 ; undefined
    3ef4:	093c0000 	.inst	0x093c0000 ; undefined
    3ef8:	00001fb5 	udf	#8117
    3efc:	14022403 	b	8cf08 <__stack_size+0x88f08>
    3f00:	00000087 	udf	#135
    3f04:	1ecc0940 	.inst	0x1ecc0940 ; undefined
    3f08:	25030000 	cmpge	p0.b, p0/z, z0.b, #3
    3f0c:	00871402 	.inst	0x00871402 ; undefined
    3f10:	0a440000 	and	w0, w0, w4, lsr #0
    3f14:	00524349 	.inst	0x00524349 ; undefined
    3f18:	14022603 	b	8d724 <__stack_size+0x89724>
    3f1c:	00000087 	udf	#135
    3f20:	1ef40948 	fmul	h8, h10, h20
    3f24:	27030000 	.inst	0x27030000 ; undefined
    3f28:	00871402 	.inst	0x00871402 ; undefined
    3f2c:	094c0000 	.inst	0x094c0000 ; undefined
    3f30:	00001dd1 	udf	#7633
    3f34:	14022803 	b	8df40 <__stack_size+0x89f40>
    3f38:	00000087 	udf	#135
    3f3c:	1f280950 	fnmadd	s16, s10, s8, s2
    3f40:	29030000 	stp	w0, w0, [x0, #24]
    3f44:	00871402 	.inst	0x00871402 ; undefined
    3f48:	0a540000 	and	w0, w0, w20, lsr #0
    3f4c:	00524449 	.inst	0x00524449 ; undefined
    3f50:	14022a03 	b	8e75c <__stack_size+0x8a75c>
    3f54:	00000087 	udf	#135
    3f58:	1fa50958 	.inst	0x1fa50958 ; undefined
    3f5c:	2b030000 	adds	w0, w0, w3
    3f60:	00871402 	.inst	0x00871402 ; undefined
    3f64:	0a5c0000 	and	w0, w0, w28, lsr #0
    3f68:	00785244 	.inst	0x00785244 ; undefined
    3f6c:	14022c03 	b	8ef78 <__stack_size+0x8af78>
    3f70:	000000aa 	udf	#170
    3f74:	1db30960 	.inst	0x1db30960 ; undefined
    3f78:	2d030000 	stp	s0, s0, [x0, #24]
    3f7c:	00871402 	.inst	0x00871402 ; undefined
    3f80:	09f00000 	.inst	0x09f00000 ; undefined
    3f84:	0000194d 	udf	#6477
    3f88:	14022e03 	b	8f794 <__stack_size+0x8b794>
    3f8c:	00000087 	udf	#135
    3f90:	1f2109f4 	fnmadd	s20, s15, s1, s2
    3f94:	2f030000 	.inst	0x2f030000 ; undefined
    3f98:	00871402 	.inst	0x00871402 ; undefined
    3f9c:	09f80000 	.inst	0x09f80000 ; undefined
    3fa0:	00001e82 	udf	#7810
    3fa4:	14023003 	b	8ffb0 <__stack_size+0x8bfb0>
    3fa8:	00000087 	udf	#135
    3fac:	560b00fc 	.inst	0x560b00fc ; undefined
    3fb0:	0300001f 	.inst	0x0300001f ; undefined
    3fb4:	af030231 	.inst	0xaf030231 ; undefined
    3fb8:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    3fbc:	00001e97 	udf	#7831
    3fc0:	06019201 	.inst	0x06019201 ; undefined
    3fc4:	61003630 	.inst	0x61003630 ; undefined
    3fc8:	00000000 	udf	#0
    3fcc:	00000024 	udf	#36
    3fd0:	00000000 	udf	#0
    3fd4:	029d9c01 	.inst	0x029d9c01 ; undefined
    3fd8:	730d0000 	.inst	0x730d0000 ; undefined
    3fdc:	01006970 	.inst	0x01006970 ; undefined
    3fe0:	9d210192 	.inst	0x9d210192 ; undefined
    3fe4:	02000002 	.inst	0x02000002 ; undefined
    3fe8:	6e0d7891 	ext	v17.16b, v4.16b, v13.16b, #15
    3fec:	01006d75 	.inst	0x01006d75 ; undefined
    3ff0:	7b2f0192 	.inst	0x7b2f0192 ; undefined
    3ff4:	02000000 	.inst	0x02000000 ; undefined
    3ff8:	0e007491 	.inst	0x0e007491 ; undefined
    3ffc:	00025008 	.inst	0x00025008 ; undefined
    4000:	1f8b0f00 	.inst	0x1f8b0f00 ; undefined
    4004:	84010000 	ld1sb	{z0.s}, p0/z, [x0, z1.s, uxtw]
    4008:	007b0a01 	.inst	0x007b0a01 ; undefined
    400c:	36000000 	tbz	w0, #0, 400c <__stack_size+0xc>
    4010:	00006100 	udf	#24832
    4014:	00300000 	.inst	0x00300000 ; NYI
    4018:	00000000 	udf	#0
    401c:	9c010000 	ldr	q0, 601c <__stack_size+0x201c>
    4020:	000002d7 	udf	#727
    4024:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    4028:	01840100 	.inst	0x01840100 ; undefined
    402c:	00029d23 	.inst	0x00029d23 ; undefined
    4030:	78910200 	ldursh	x0, [x16, #-240]
    4034:	1ec00f00 	.inst	0x1ec00f00 ; undefined
    4038:	76010000 	.inst	0x76010000 ; undefined
    403c:	007b0a01 	.inst	0x007b0a01 ; undefined
    4040:	35d00000 	cbnz	w0, fffffffffffa4040 <_sp+0xffffffff9ef64040>
    4044:	00006100 	udf	#24832
    4048:	00300000 	.inst	0x00300000 ; NYI
    404c:	00000000 	udf	#0
    4050:	9c010000 	ldr	q0, 6050 <__stack_size+0x2050>
    4054:	0000030b 	udf	#779
    4058:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    405c:	01760100 	.inst	0x01760100 ; undefined
    4060:	00029d23 	.inst	0x00029d23 ; undefined
    4064:	78910200 	ldursh	x0, [x16, #-240]
    4068:	1f160f00 	fmadd	s0, s24, s22, s3
    406c:	69010000 	stgp	x0, x0, [x0, #32]
    4070:	007b0a01 	.inst	0x007b0a01 ; undefined
    4074:	35a00000 	cbnz	w0, fffffffffff44074 <_sp+0xffffffff9ef04074>
    4078:	00006100 	udf	#24832
    407c:	00300000 	.inst	0x00300000 ; NYI
    4080:	00000000 	udf	#0
    4084:	9c010000 	ldr	q0, 6084 <__stack_size+0x2084>
    4088:	0000033f 	udf	#831
    408c:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    4090:	01690100 	.inst	0x01690100 ; undefined
    4094:	00029d22 	.inst	0x00029d22 ; undefined
    4098:	78910200 	ldursh	x0, [x16, #-240]
    409c:	1e6d0f00 	fcsel	d0, d24, d13, eq  // eq = none
    40a0:	5f010000 	.inst	0x5f010000 ; undefined
    40a4:	007b0a01 	.inst	0x007b0a01 ; undefined
    40a8:	35880000 	cbnz	w0, fffffffffff140a8 <_sp+0xffffffff9eed40a8>
    40ac:	00006100 	udf	#24832
    40b0:	00180000 	.inst	0x00180000 ; undefined
    40b4:	00000000 	udf	#0
    40b8:	9c010000 	ldr	q0, 60b8 <__stack_size+0x20b8>
    40bc:	00000373 	udf	#883
    40c0:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    40c4:	015f0100 	.inst	0x015f0100 ; undefined
    40c8:	00029d25 	.inst	0x00029d25 ; undefined
    40cc:	78910200 	ldursh	x0, [x16, #-240]
    40d0:	1f360f00 	fnmadd	s0, s24, s22, s3
    40d4:	4f010000 	.inst	0x4f010000 ; undefined
    40d8:	005a0901 	.inst	0x005a0901 ; undefined
    40dc:	35400000 	cbnz	w0, 840dc <__stack_size+0x800dc>
    40e0:	00006100 	udf	#24832
    40e4:	00480000 	.inst	0x00480000 ; undefined
    40e8:	00000000 	udf	#0
    40ec:	9c010000 	ldr	q0, 60ec <__stack_size+0x20ec>
    40f0:	000003b7 	udf	#951
    40f4:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    40f8:	014f0100 	.inst	0x014f0100 ; undefined
    40fc:	00029d28 	.inst	0x00029d28 ; undefined
    4100:	78910200 	ldursh	x0, [x16, #-240]
    4104:	00139710 	.inst	0x00139710 ; undefined
    4108:	014f0100 	.inst	0x014f0100 ; undefined
    410c:	00007b36 	udf	#31542
    4110:	74910200 	.inst	0x74910200 ; undefined
    4114:	1f480f00 	fmadd	d0, d24, d8, d3
    4118:	3f010000 	.inst	0x3f010000 ; undefined
    411c:	005a0901 	.inst	0x005a0901 ; undefined
	...
    4128:	00540000 	.inst	0x00540000 ; undefined
    412c:	00000000 	udf	#0
    4130:	9c010000 	ldr	q0, 6130 <__stack_size+0x2130>
    4134:	000003fb 	udf	#1019
    4138:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    413c:	013f0100 	.inst	0x013f0100 ; undefined
    4140:	00029d24 	.inst	0x00029d24 ; undefined
    4144:	78910200 	ldursh	x0, [x16, #-240]
    4148:	001ded10 	.inst	0x001ded10 ; undefined
    414c:	013f0100 	.inst	0x013f0100 ; undefined
    4150:	00007b32 	udf	#31538
    4154:	74910200 	.inst	0x74910200 ; undefined
    4158:	1f970f00 	.inst	0x1f970f00 ; undefined
    415c:	2f010000 	.inst	0x2f010000 ; undefined
    4160:	005a0901 	.inst	0x005a0901 ; undefined
    4164:	34ec0000 	cbz	w0, fffffffffffdc164 <_sp+0xffffffff9ef9c164>
    4168:	00006100 	udf	#24832
    416c:	00540000 	.inst	0x00540000 ; undefined
    4170:	00000000 	udf	#0
    4174:	9c010000 	ldr	q0, 6174 <__stack_size+0x2174>
    4178:	0000043f 	udf	#1087
    417c:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    4180:	012f0100 	.inst	0x012f0100 ; undefined
    4184:	00029d24 	.inst	0x00029d24 ; undefined
    4188:	78910200 	ldursh	x0, [x16, #-240]
    418c:	001ded10 	.inst	0x001ded10 ; undefined
    4190:	012f0100 	.inst	0x012f0100 ; undefined
    4194:	00007b32 	udf	#31538
    4198:	74910200 	.inst	0x74910200 ; undefined
    419c:	1ea50f00 	.inst	0x1ea50f00 ; undefined
    41a0:	1f010000 	fmadd	s0, s0, s1, s0
    41a4:	005a0901 	.inst	0x005a0901 ; undefined
    41a8:	34a40000 	cbz	w0, fffffffffff4c1a8 <_sp+0xffffffff9ef0c1a8>
    41ac:	00006100 	udf	#24832
    41b0:	00480000 	.inst	0x00480000 ; undefined
    41b4:	00000000 	udf	#0
    41b8:	9c010000 	ldr	q0, 61b8 <__stack_size+0x21b8>
    41bc:	00000483 	udf	#1155
    41c0:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    41c4:	011f0100 	.inst	0x011f0100 ; undefined
    41c8:	00029d25 	.inst	0x00029d25 ; undefined
    41cc:	78910200 	ldursh	x0, [x16, #-240]
    41d0:	7669640d 	.inst	0x7669640d ; undefined
    41d4:	011f0100 	.inst	0x011f0100 ; undefined
    41d8:	00007b33 	udf	#31539
    41dc:	74910200 	.inst	0x74910200 ; undefined
    41e0:	1f620f00 	fnmadd	d0, d24, d2, d3
    41e4:	0e010000 	tbl	v0.8b, {v0.16b}, v1.8b
    41e8:	005a0901 	.inst	0x005a0901 ; undefined
    41ec:	345c0000 	cbz	w0, bc1ec <__stack_size+0xb81ec>
    41f0:	00006100 	udf	#24832
    41f4:	00480000 	.inst	0x00480000 ; undefined
    41f8:	00000000 	udf	#0
    41fc:	9c010000 	ldr	q0, 61fc <__stack_size+0x21fc>
    4200:	000004c7 	udf	#1223
    4204:	6970730d 	ldpsw	x13, x28, [x24, #-128]
    4208:	010e0100 	.inst	0x010e0100 ; undefined
    420c:	00029d1e 	.inst	0x00029d1e ; undefined
    4210:	78910200 	ldursh	x0, [x16, #-240]
    4214:	766c730d 	.inst	0x766c730d ; undefined
    4218:	010e0100 	.inst	0x010e0100 ; undefined
    421c:	00007b2c 	udf	#31532
    4220:	74910200 	.inst	0x74910200 ; undefined
    4224:	1dd91100 	.inst	0x1dd91100 ; undefined
    4228:	fd010000 	str	d0, [x0, #512]
    422c:	00005a09 	udf	#23049
    4230:	00340800 	.inst	0x00340800 ; NYI
    4234:	00000061 	udf	#97
    4238:	00005400 	udf	#21504
    423c:	00000000 	udf	#0
    4240:	089c0100 	stllrb	w0, [x8]
    4244:	12000005 	and	w5, w0, #0x1
    4248:	00697073 	.inst	0x00697073 ; undefined
    424c:	9d1efd01 	.inst	0x9d1efd01 ; undefined
    4250:	02000002 	.inst	0x02000002 ; undefined
    4254:	6c127891 	stnp	d17, d30, [x4, #288]
    4258:	01006e65 	.inst	0x01006e65 ; undefined
    425c:	007b2cfd 	.inst	0x007b2cfd ; undefined
    4260:	91020000 	add	x0, x0, #0x80
    4264:	fa110074 	sbcs	x20, x3, x17
    4268:	0100001e 	.inst	0x0100001e ; undefined
    426c:	005a09ed 	.inst	0x005a09ed ; undefined
    4270:	33bc0000 	.inst	0x33bc0000 ; undefined
    4274:	00006100 	udf	#24832
    4278:	004c0000 	.inst	0x004c0000 ; undefined
    427c:	00000000 	udf	#0
    4280:	9c010000 	ldr	q0, 6280 <__stack_size+0x2280>
    4284:	0000053a 	udf	#1338
    4288:	69707312 	ldpsw	x18, x28, [x24, #-128]
    428c:	23ed0100 	.inst	0x23ed0100 ; undefined
    4290:	0000029d 	udf	#669
    4294:	00789102 	.inst	0x00789102 ; undefined
    4298:	001e2d11 	.inst	0x001e2d11 ; undefined
    429c:	09d50100 	.inst	0x09d50100 ; undefined
    42a0:	0000005a 	udf	#90
	...
    42ac:	00000088 	udf	#136
    42b0:	00000000 	udf	#0
    42b4:	057b9c01 	.inst	0x057b9c01 ; undefined
    42b8:	73120000 	.inst	0x73120000 ; undefined
    42bc:	01006970 	.inst	0x01006970 ; undefined
    42c0:	029d23d5 	.inst	0x029d23d5 ; undefined
    42c4:	91020000 	add	x0, x0, #0x80
    42c8:	61761278 	.inst	0x61761278 ; undefined
    42cc:	d501006c 	msr	s0_1_c0_c0_3, x12
    42d0:	00007b30 	udf	#31536
    42d4:	74910200 	.inst	0x74910200 ; undefined
    42d8:	1eda1100 	.inst	0x1eda1100 ; undefined
    42dc:	bd010000 	str	s0, [x0, #256]
    42e0:	00005a09 	udf	#23049
	...
    42ec:	00008800 	udf	#34816
    42f0:	00000000 	udf	#0
    42f4:	bc9c0100 	.inst	0xbc9c0100 ; undefined
    42f8:	12000005 	and	w5, w0, #0x1
    42fc:	00697073 	.inst	0x00697073 ; undefined
    4300:	9d24bd01 	.inst	0x9d24bd01 ; undefined
    4304:	02000002 	.inst	0x02000002 ; undefined
    4308:	76127891 	.inst	0x76127891 ; undefined
    430c:	01006c61 	.inst	0x01006c61 ; undefined
    4310:	007b31bd 	.inst	0x007b31bd ; undefined
    4314:	91020000 	add	x0, x0, #0x80
    4318:	61110074 	.inst	0x61110074 ; undefined
    431c:	0100001e 	.inst	0x0100001e ; undefined
    4320:	005a09ab 	.inst	0x005a09ab ; undefined
	...
    432c:	004c0000 	.inst	0x004c0000 ; undefined
    4330:	00000000 	udf	#0
    4334:	9c010000 	ldr	q0, 6334 <__stack_size+0x2334>
    4338:	000005ee 	udf	#1518
    433c:	69707312 	ldpsw	x18, x28, [x24, #-128]
    4340:	22ab0100 	.inst	0x22ab0100 ; undefined
    4344:	0000029d 	udf	#669
    4348:	00789102 	.inst	0x00789102 ; undefined
    434c:	001f6f11 	.inst	0x001f6f11 ; undefined
    4350:	099b0100 	.inst	0x099b0100 ; undefined
    4354:	0000005a 	udf	#90
    4358:	61003370 	.inst	0x61003370 ; undefined
    435c:	00000000 	udf	#0
    4360:	0000004c 	udf	#76
    4364:	00000000 	udf	#0
    4368:	06209c01 	.inst	0x06209c01 ; undefined
    436c:	73120000 	.inst	0x73120000 ; undefined
    4370:	01006970 	.inst	0x01006970 ; undefined
    4374:	029d269b 	.inst	0x029d269b ; undefined
    4378:	91020000 	add	x0, x0, #0x80
    437c:	b4110078 	cbz	x24, 26388 <__stack_size+0x22388>
    4380:	0100001e 	.inst	0x0100001e ; undefined
    4384:	005a098a 	.inst	0x005a098a ; undefined
	...
    4390:	00600000 	.inst	0x00600000 ; undefined
    4394:	00000000 	udf	#0
    4398:	9c010000 	ldr	q0, 6398 <__stack_size+0x2398>
    439c:	00000652 	udf	#1618
    43a0:	69707312 	ldpsw	x18, x28, [x24, #-128]
    43a4:	228a0100 	.inst	0x228a0100 ; undefined
    43a8:	0000029d 	udf	#669
    43ac:	00789102 	.inst	0x00789102 ; undefined
    43b0:	001fbc11 	.inst	0x001fbc11 ; undefined
    43b4:	09790100 	.inst	0x09790100 ; undefined
    43b8:	0000005a 	udf	#90
    43bc:	61003310 	.inst	0x61003310 ; undefined
    43c0:	00000000 	udf	#0
    43c4:	00000060 	udf	#96
    43c8:	00000000 	udf	#0
    43cc:	06849c01 	.inst	0x06849c01 ; undefined
    43d0:	73120000 	.inst	0x73120000 ; undefined
    43d4:	01006970 	.inst	0x01006970 ; undefined
    43d8:	029d2279 	.inst	0x029d2279 ; undefined
    43dc:	91020000 	add	x0, x0, #0x80
    43e0:	07110078 	.inst	0x07110078 ; undefined
    43e4:	0100001f 	.inst	0x0100001f ; undefined
    43e8:	005a0969 	.inst	0x005a0969 ; undefined
	...
    43f4:	004c0000 	.inst	0x004c0000 ; undefined
    43f8:	00000000 	udf	#0
    43fc:	9c010000 	ldr	q0, 63fc <__stack_size+0x23fc>
    4400:	000006b6 	udf	#1718
    4404:	69707312 	ldpsw	x18, x28, [x24, #-128]
    4408:	25690100 	whilege	p0.h, w8, w9
    440c:	0000029d 	udf	#669
    4410:	00789102 	.inst	0x00789102 ; undefined
    4414:	001ee811 	.inst	0x001ee811 ; undefined
    4418:	09580100 	.inst	0x09580100 ; undefined
    441c:	0000005a 	udf	#90
	...
    4428:	00000060 	udf	#96
    442c:	00000000 	udf	#0
    4430:	06e89c01 	.inst	0x06e89c01 ; undefined
    4434:	73120000 	.inst	0x73120000 ; undefined
    4438:	01006970 	.inst	0x01006970 ; undefined
    443c:	029d2258 	.inst	0x029d2258 ; undefined
    4440:	91020000 	add	x0, x0, #0x80
    4444:	e1110078 	.inst	0xe1110078 ; undefined
    4448:	0100001d 	.inst	0x0100001d ; undefined
    444c:	005a0946 	.inst	0x005a0946 ; undefined
	...
    4458:	00600000 	.inst	0x00600000 ; undefined
    445c:	00000000 	udf	#0
    4460:	9c010000 	ldr	q0, 6460 <__stack_size+0x2460>
    4464:	0000071a 	udf	#1818
    4468:	69707312 	ldpsw	x18, x28, [x24, #-128]
    446c:	22460100 	.inst	0x22460100 ; undefined
    4470:	0000029d 	udf	#669
    4474:	00789102 	.inst	0x00789102 ; undefined
    4478:	001f7f11 	.inst	0x001f7f11 ; undefined
    447c:	09350100 	.inst	0x09350100 ; undefined
    4480:	0000005a 	udf	#90
    4484:	610032c4 	.inst	0x610032c4 ; undefined
    4488:	00000000 	udf	#0
    448c:	0000004c 	udf	#76
    4490:	00000000 	udf	#0
    4494:	074c9c01 	.inst	0x074c9c01 ; undefined
    4498:	73120000 	.inst	0x73120000 ; undefined
    449c:	01006970 	.inst	0x01006970 ; undefined
    44a0:	029d2235 	.inst	0x029d2235 ; undefined
    44a4:	91020000 	add	x0, x0, #0x80
    44a8:	3a110078 	adcs	w24, w3, w17
    44ac:	0100001e 	.inst	0x0100001e ; undefined
    44b0:	005a0923 	.inst	0x005a0923 ; undefined
    44b4:	32800000 	.inst	0x32800000 ; undefined
    44b8:	00006100 	udf	#24832
    44bc:	00440000 	.inst	0x00440000 ; undefined
    44c0:	00000000 	udf	#0
    44c4:	9c010000 	ldr	q0, 64c4 <__stack_size+0x24c4>
    44c8:	0000077e 	udf	#1918
    44cc:	69707312 	ldpsw	x18, x28, [x24, #-128]
    44d0:	29230100 	stp	w0, w0, [x8, #-232]
    44d4:	0000029d 	udf	#669
    44d8:	00789102 	.inst	0x00789102 ; undefined
    44dc:	001e4d13 	.inst	0x001e4d13 ; undefined
    44e0:	09130100 	.inst	0x09130100 ; undefined
    44e4:	0000005a 	udf	#90
    44e8:	61003240 	.inst	0x61003240 ; undefined
    44ec:	00000000 	udf	#0
    44f0:	00000040 	udf	#64
    44f4:	00000000 	udf	#0
    44f8:	73129c01 	.inst	0x73129c01 ; undefined
    44fc:	01006970 	.inst	0x01006970 ; undefined
    4500:	029d2a13 	.inst	0x029d2a13 ; undefined
    4504:	91020000 	add	x0, x0, #0x80
    4508:	00000078 	udf	#120
    450c:	0400000e 	add	z14.b, p0/m, z14.b, z0.b
    4510:	0011a100 	.inst	0x0011a100 ; undefined
    4514:	20010800 	.inst	0x20010800 ; undefined
    4518:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    451c:	00001fe4 	udf	#8164
    4520:	0000002f 	udf	#47
    4524:	00000a50 	udf	#2640
	...
    4530:	000025e8 	udf	#9704
    4534:	7c070802 	.inst	0x7c070802 ; undefined
    4538:	02000001 	.inst	0x02000001 ; undefined
    453c:	01cb0508 	.inst	0x01cb0508 ; undefined
    4540:	04020000 	.inst	0x04020000 ; undefined
    4544:	00018107 	.inst	0x00018107 ; undefined
    4548:	05100200 	mov	z0.b, p0/z, #16
    454c:	00000146 	udf	#326
    4550:	00071002 	.inst	0x00071002 ; undefined
    4554:	02000001 	.inst	0x02000001 ; undefined
    4558:	01140601 	.inst	0x01140601 ; undefined
    455c:	02020000 	.inst	0x02020000 ; undefined
    4560:	0001d405 	.inst	0x0001d405 ; undefined
    4564:	05040300 	.inst	0x05040300 ; undefined
    4568:	00746e69 	.inst	0x00746e69 ; undefined
    456c:	00066304 	.inst	0x00066304 ; undefined
    4570:	17590200 	b	fffffffffd644d70 <_sp+0xffffffff9c604d70>
    4574:	0000006d 	udf	#109
    4578:	12080102 	and	w2, w8, #0x1000000
    457c:	04000001 	add	z1.b, p0/m, z1.b, z0.b
    4580:	00001315 	udf	#4885
    4584:	80185a02 	.inst	0x80185a02 ; undefined
    4588:	02000000 	.inst	0x02000000 ; undefined
    458c:	01330702 	.inst	0x01330702 ; undefined
    4590:	b4040000 	cbz	x0, c590 <__stack_size+0x8590>
    4594:	02000007 	.inst	0x02000007 ; undefined
    4598:	0037165b 	.inst	0x0037165b ; NYI
    459c:	87050000 	.inst	0x87050000 ; undefined
    45a0:	02000000 	.inst	0x02000000 ; undefined
    45a4:	01c60508 	.inst	0x01c60508 ; undefined
    45a8:	08020000 	stxrb	w2, w0, [x0]
    45ac:	00017707 	.inst	0x00017707 ; undefined
    45b0:	03040600 	.inst	0x03040600 ; undefined
    45b4:	9f090233 	.inst	0x9f090233 ; undefined
    45b8:	07000001 	.inst	0x07000001 ; undefined
    45bc:	000010ca 	udf	#4298
    45c0:	0e023503 	.inst	0x0e023503 ; undefined
    45c4:	00000087 	udf	#135
    45c8:	001f0104 	.inst	0x001f0104 ; undefined
    45cc:	0014a507 	.inst	0x0014a507 ; undefined
    45d0:	02360300 	.inst	0x02360300 ; undefined
    45d4:	0000870e 	udf	#34574
    45d8:	1d020400 	.inst	0x1d020400 ; undefined
    45dc:	14720700 	b	1c861dc <__stack_size+0x1c821dc>
    45e0:	37030000 	tbnz	w0, #0, a5e0 <__stack_size+0x65e0>
    45e4:	00870e02 	.inst	0x00870e02 ; undefined
    45e8:	01040000 	.inst	0x01040000 ; undefined
    45ec:	5d07001c 	.inst	0x5d07001c ; undefined
    45f0:	03000018 	.inst	0x03000018 ; undefined
    45f4:	870e0238 	.inst	0x870e0238 ; undefined
    45f8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    45fc:	07001b01 	.inst	0x07001b01 ; undefined
    4600:	0000179f 	udf	#6047
    4604:	0e023903 	zip1	v3.8b, v8.8b, v2.8b
    4608:	00000087 	udf	#135
    460c:	001a0104 	.inst	0x001a0104 ; undefined
    4610:	00105107 	.inst	0x00105107 ; undefined
    4614:	023a0300 	.inst	0x023a0300 ; undefined
    4618:	0000870e 	udf	#34574
    461c:	19010400 	.inst	0x19010400 ; undefined
    4620:	19a30700 	.inst	0x19a30700 ; undefined
    4624:	3b030000 	.inst	0x3b030000 ; undefined
    4628:	00870e02 	.inst	0x00870e02 ; undefined
    462c:	01040000 	.inst	0x01040000 ; undefined
    4630:	22070018 	.inst	0x22070018 ; undefined
    4634:	03000016 	.inst	0x03000016 ; undefined
    4638:	870e023c 	.inst	0x870e023c ; undefined
    463c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4640:	07001701 	.inst	0x07001701 ; undefined
    4644:	0000169f 	udf	#5791
    4648:	0e023d03 	umov	w3, v8.h[0]
    464c:	00000087 	udf	#135
    4650:	00160104 	.inst	0x00160104 ; undefined
    4654:	00153b07 	.inst	0x00153b07 ; undefined
    4658:	023e0300 	.inst	0x023e0300 ; undefined
    465c:	0000870e 	udf	#34574
    4660:	15010400 	b	4045660 <__stack_size+0x4041660>
    4664:	17ad0700 	b	fffffffffeb46264 <_sp+0xffffffff9db06264>
    4668:	3f030000 	.inst	0x3f030000 ; undefined
    466c:	00870e02 	.inst	0x00870e02 ; undefined
    4670:	01040000 	.inst	0x01040000 ; undefined
    4674:	a1070014 	.inst	0xa1070014 ; undefined
    4678:	03000011 	.inst	0x03000011 ; undefined
    467c:	870e0240 	.inst	0x870e0240 ; undefined
    4680:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4684:	07001004 	.inst	0x07001004 ; undefined
    4688:	000016c1 	udf	#5825
    468c:	0e024103 	tbl	v3.8b, {v8.16b-v10.16b}, v2.8b
    4690:	00000087 	udf	#135
    4694:	00060a04 	.inst	0x00060a04 ; undefined
    4698:	0010a507 	.inst	0x0010a507 ; undefined
    469c:	02420300 	.inst	0x02420300 ; undefined
    46a0:	0000870e 	udf	#34574
    46a4:	00060400 	.inst	0x00060400 ; undefined
    46a8:	23080000 	.inst	0x23080000 ; undefined
    46ac:	03000015 	.inst	0x03000015 ; undefined
    46b0:	a6020243 	.inst	0xa6020243 ; undefined
    46b4:	05000000 	orr	z0.s, z0.s, #0x1
    46b8:	0000019f 	udf	#415
    46bc:	45030406 	.inst	0x45030406 ; undefined
    46c0:	02000902 	.inst	0x02000902 ; undefined
    46c4:	b9070000 	str	w0, [x0, #1792]
    46c8:	03000011 	.inst	0x03000011 ; undefined
    46cc:	870b0247 	.inst	0x870b0247 ; undefined
    46d0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    46d4:	0700160a 	.inst	0x0700160a ; undefined
    46d8:	00001986 	udf	#6534
    46dc:	0b024803 	add	w3, w0, w2, lsl #18
    46e0:	00000087 	udf	#135
    46e4:	00150104 	.inst	0x00150104 ; undefined
    46e8:	00180c07 	.inst	0x00180c07 ; undefined
    46ec:	02490300 	.inst	0x02490300 ; undefined
    46f0:	0000870b 	udf	#34571
    46f4:	14010400 	b	456f4 <__stack_size+0x416f4>
    46f8:	11b40700 	.inst	0x11b40700 ; undefined
    46fc:	4a030000 	eor	w0, w0, w3
    4700:	00870b02 	.inst	0x00870b02 ; undefined
    4704:	14040000 	b	104704 <__stack_size+0x100704>
    4708:	08000000 	stxrb	w0, w0, [x0]
    470c:	000015ca 	udf	#5578
    4710:	02024b03 	.inst	0x02024b03 ; undefined
    4714:	000001b1 	udf	#433
    4718:	00020005 	.inst	0x00020005 ; undefined
    471c:	03040600 	.inst	0x03040600 ; undefined
    4720:	3f09024d 	.inst	0x3f09024d ; undefined
    4724:	07000002 	.inst	0x07000002 ; undefined
    4728:	0000129b 	udf	#4763
    472c:	0b024f03 	add	w3, w24, w2, lsl #19
    4730:	00000087 	udf	#135
    4734:	00160a04 	.inst	0x00160a04 ; undefined
    4738:	00140107 	.inst	0x00140107 ; undefined
    473c:	02500300 	.inst	0x02500300 ; undefined
    4740:	0000870b 	udf	#34571
    4744:	00160400 	.inst	0x00160400 ; undefined
    4748:	f9080000 	str	x0, [x0, #4096]
    474c:	03000017 	.inst	0x03000017 ; undefined
    4750:	12020251 	and	w17, w18, #0x40000000
    4754:	05000002 	orr	z2.s, z2.s, #0x1
    4758:	0000023f 	udf	#575
    475c:	53030406 	ubfiz	w6, w0, #29, #2
    4760:	02b10902 	.inst	0x02b10902 ; undefined
    4764:	44090000 	.inst	0x44090000 ; undefined
    4768:	03005441 	.inst	0x03005441 ; undefined
    476c:	870b0255 	.inst	0x870b0255 ; undefined
    4770:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4774:	09001808 	.inst	0x09001808 ; undefined
    4778:	00444d43 	.inst	0x00444d43 ; undefined
    477c:	0b025603 	add	w3, w16, w2, lsl #21
    4780:	00000087 	udf	#135
    4784:	00170104 	.inst	0x00170104 ; undefined
    4788:	00159d07 	.inst	0x00159d07 ; undefined
    478c:	02570300 	.inst	0x02570300 ; undefined
    4790:	0000870b 	udf	#34571
    4794:	16010400 	b	fffffffff8045794 <_sp+0xffffffff97005794>
    4798:	176c0700 	b	fffffffffdb06398 <_sp+0xffffffff9cac6398>
    479c:	58030000 	ldr	x0, a79c <__stack_size+0x679c>
    47a0:	00870b02 	.inst	0x00870b02 ; undefined
    47a4:	01040000 	.inst	0x01040000 ; undefined
    47a8:	a2070015 	.inst	0xa2070015 ; undefined
    47ac:	03000018 	.inst	0x03000018 ; undefined
    47b0:	870b0259 	.inst	0x870b0259 ; undefined
    47b4:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    47b8:	00000015 	udf	#21
    47bc:	00104008 	.inst	0x00104008 ; undefined
    47c0:	025a0300 	.inst	0x025a0300 ; undefined
    47c4:	00025102 	.inst	0x00025102 ; undefined
    47c8:	03040a00 	.inst	0x03040a00 ; undefined
    47cc:	e309025c 	.inst	0xe309025c ; undefined
    47d0:	0b000002 	add	w2, w0, w0
    47d4:	006c6c61 	.inst	0x006c6c61 ; undefined
    47d8:	0b025e03 	add	w3, w16, w2, lsl #23
    47dc:	00000087 	udf	#135
    47e0:	0011fc0c 	.inst	0x0011fc0c ; undefined
    47e4:	025f0300 	.inst	0x025f0300 ; undefined
    47e8:	0002b113 	.inst	0x0002b113 ; undefined
    47ec:	b5080000 	cbnz	x0, 147ec <__stack_size+0x107ec>
    47f0:	03000016 	.inst	0x03000016 ; undefined
    47f4:	be020260 	.inst	0xbe020260 ; undefined
    47f8:	05000002 	orr	z2.s, z2.s, #0x1
    47fc:	000002e3 	udf	#739
    4800:	62030406 	.inst	0x62030406 ; undefined
    4804:	04100902 	mul	z2.b, p2/m, z2.b, z8.b
    4808:	d0070000 	adrp	x0, e006000 <__stack_size+0xe002000>
    480c:	03000012 	.inst	0x03000012 ; undefined
    4810:	870b0264 	.inst	0x870b0264 ; undefined
    4814:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4818:	07001f01 	.inst	0x07001f01 ; undefined
    481c:	000015a2 	udf	#5538
    4820:	0b026503 	add	w3, w8, w2, lsl #25
    4824:	00000087 	udf	#135
    4828:	001e0104 	.inst	0x001e0104 ; undefined
    482c:	00169007 	.inst	0x00169007 ; undefined
    4830:	02660300 	.inst	0x02660300 ; undefined
    4834:	0000870b 	udf	#34571
    4838:	1d010400 	.inst	0x1d010400 ; undefined
    483c:	18eb0700 	ldr	w0, fffffffffffda91c <_sp+0xffffffff9ef9a91c>
    4840:	67030000 	.inst	0x67030000 ; undefined
    4844:	00870b02 	.inst	0x00870b02 ; undefined
    4848:	01040000 	.inst	0x01040000 ; undefined
    484c:	ff07001c 	.inst	0xff07001c ; undefined
    4850:	03000014 	.inst	0x03000014 ; undefined
    4854:	870b0268 	.inst	0x870b0268 ; undefined
    4858:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    485c:	07001b01 	.inst	0x07001b01 ; undefined
    4860:	00001236 	udf	#4662
    4864:	0b026903 	add	w3, w8, w2, lsl #26
    4868:	00000087 	udf	#135
    486c:	001a0104 	.inst	0x001a0104 ; undefined
    4870:	00149b07 	.inst	0x00149b07 ; undefined
    4874:	026a0300 	.inst	0x026a0300 ; undefined
    4878:	0000870b 	udf	#34571
    487c:	19010400 	.inst	0x19010400 ; undefined
    4880:	12610700 	.inst	0x12610700 ; undefined
    4884:	6b030000 	subs	w0, w0, w3
    4888:	00870b02 	.inst	0x00870b02 ; undefined
    488c:	01040000 	.inst	0x01040000 ; undefined
    4890:	2b070018 	adds	w24, w0, w7
    4894:	03000018 	.inst	0x03000018 ; undefined
    4898:	870b026c 	.inst	0x870b026c ; undefined
    489c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    48a0:	07001701 	.inst	0x07001701 ; undefined
    48a4:	0000142d 	udf	#5165
    48a8:	0b026d03 	add	w3, w8, w2, lsl #27
    48ac:	00000087 	udf	#135
    48b0:	00160104 	.inst	0x00160104 ; undefined
    48b4:	0012fc07 	.inst	0x0012fc07 ; undefined
    48b8:	026e0300 	.inst	0x026e0300 ; undefined
    48bc:	0000870b 	udf	#34571
    48c0:	15010400 	b	40458c0 <__stack_size+0x40418c0>
    48c4:	12f10700 	.inst	0x12f10700 ; undefined
    48c8:	6f030000 	.inst	0x6f030000 ; undefined
    48cc:	00870b02 	.inst	0x00870b02 ; undefined
    48d0:	01040000 	.inst	0x01040000 ; undefined
    48d4:	94070014 	bl	1c4924 <__stack_size+0x1c0924>
    48d8:	03000018 	.inst	0x03000018 ; undefined
    48dc:	870b0270 	.inst	0x870b0270 ; undefined
    48e0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    48e4:	07001301 	.inst	0x07001301 ; undefined
    48e8:	0000139c 	udf	#5020
    48ec:	0b027103 	add	w3, w8, w2, lsl #28
    48f0:	00000087 	udf	#135
    48f4:	00120104 	.inst	0x00120104 ; undefined
    48f8:	00120107 	.inst	0x00120107 ; undefined
    48fc:	02720300 	.inst	0x02720300 ; undefined
    4900:	0000870b 	udf	#34571
    4904:	11010400 	add	w0, w0, #0x41
    4908:	14010700 	b	46508 <__stack_size+0x42508>
    490c:	73030000 	.inst	0x73030000 ; undefined
    4910:	00870b02 	.inst	0x00870b02 ; undefined
    4914:	11040000 	add	w0, w0, #0x100
    4918:	08000000 	stxrb	w0, w0, [x0]
    491c:	0000178d 	udf	#6029
    4920:	02027403 	.inst	0x02027403 ; undefined
    4924:	000002f5 	udf	#757
    4928:	7603040a 	.inst	0x7603040a ; undefined
    492c:	04420902 	.inst	0x04420902 ; undefined
    4930:	610b0000 	.inst	0x610b0000 ; undefined
    4934:	03006c6c 	.inst	0x03006c6c ; undefined
    4938:	870b0278 	.inst	0x870b0278 ; undefined
    493c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    4940:	000011fc 	udf	#4604
    4944:	14027903 	b	a2d50 <__stack_size+0x9ed50>
    4948:	00000410 	udf	#1040
    494c:	13080800 	sbfiz	w0, w0, #24, #3
    4950:	7a030000 	sbcs	w0, w0, w3
    4954:	041d0202 	.inst	0x041d0202 ; undefined
    4958:	42050000 	.inst	0x42050000 ; undefined
    495c:	06000004 	.inst	0x06000004 ; undefined
    4960:	027c0304 	.inst	0x027c0304 ; undefined
    4964:	00056f09 	.inst	0x00056f09 ; undefined
    4968:	11620700 	add	w0, w24, #0x881, lsl #12
    496c:	7e030000 	.inst	0x7e030000 ; undefined
    4970:	00870b02 	.inst	0x00870b02 ; undefined
    4974:	01040000 	.inst	0x01040000 ; undefined
    4978:	a707001f 	.inst	0xa707001f ; undefined
    497c:	03000018 	.inst	0x03000018 ; undefined
    4980:	870b027f 	.inst	0x870b027f ; undefined
    4984:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4988:	07001e01 	.inst	0x07001e01 ; undefined
    498c:	00001359 	udf	#4953
    4990:	0b028003 	.inst	0x0b028003 ; undefined
    4994:	00000087 	udf	#135
    4998:	001d0104 	.inst	0x001d0104 ; undefined
    499c:	0018f507 	.inst	0x0018f507 ; undefined
    49a0:	02810300 	.inst	0x02810300 ; undefined
    49a4:	0000870b 	udf	#34571
    49a8:	1c010400 	ldr	s0, 6a28 <__stack_size+0x2a28>
    49ac:	18520700 	ldr	w0, a8a8c <__stack_size+0xa4a8c>
    49b0:	82030000 	.inst	0x82030000 ; undefined
    49b4:	00870b02 	.inst	0x00870b02 ; undefined
    49b8:	01040000 	.inst	0x01040000 ; undefined
    49bc:	ec07001b 	.inst	0xec07001b ; undefined
    49c0:	03000013 	.inst	0x03000013 ; undefined
    49c4:	870b0283 	.inst	0x870b0283 ; undefined
    49c8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    49cc:	07001a01 	.inst	0x07001a01 ; undefined
    49d0:	00001783 	udf	#6019
    49d4:	0b028403 	.inst	0x0b028403 ; undefined
    49d8:	00000087 	udf	#135
    49dc:	00190104 	.inst	0x00190104 ; undefined
    49e0:	00146807 	.inst	0x00146807 ; undefined
    49e4:	02850300 	.inst	0x02850300 ; undefined
    49e8:	0000870b 	udf	#34571
    49ec:	18010400 	ldr	w0, 6a6c <__stack_size+0x2a6c>
    49f0:	16620700 	b	fffffffff98865f0 <_sp+0xffffffff988465f0>
    49f4:	86030000 	.inst	0x86030000 ; undefined
    49f8:	00870b02 	.inst	0x00870b02 ; undefined
    49fc:	01040000 	.inst	0x01040000 ; undefined
    4a00:	0e070017 	tbl	v23.8b, {v0.16b}, v7.8b
    4a04:	03000014 	.inst	0x03000014 ; undefined
    4a08:	870b0287 	.inst	0x870b0287 ; undefined
    4a0c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4a10:	07001601 	.inst	0x07001601 ; undefined
    4a14:	0000145c 	udf	#5212
    4a18:	0b028803 	.inst	0x0b028803 ; undefined
    4a1c:	00000087 	udf	#135
    4a20:	00150104 	.inst	0x00150104 ; undefined
    4a24:	00153007 	.inst	0x00153007 ; undefined
    4a28:	02890300 	.inst	0x02890300 ; undefined
    4a2c:	0000870b 	udf	#34571
    4a30:	14010400 	b	45a30 <__stack_size+0x41a30>
    4a34:	136f0700 	.inst	0x136f0700 ; undefined
    4a38:	8a030000 	and	x0, x0, x3
    4a3c:	00870b02 	.inst	0x00870b02 ; undefined
    4a40:	01040000 	.inst	0x01040000 ; undefined
    4a44:	1b070013 	madd	w19, w0, w7, w0
    4a48:	03000012 	.inst	0x03000012 ; undefined
    4a4c:	870b028b 	.inst	0x870b028b ; undefined
    4a50:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4a54:	07001201 	.inst	0x07001201 ; undefined
    4a58:	0000164f 	udf	#5711
    4a5c:	0b028c03 	.inst	0x0b028c03 ; undefined
    4a60:	00000087 	udf	#135
    4a64:	00110104 	.inst	0x00110104 ; undefined
    4a68:	00140107 	.inst	0x00140107 ; undefined
    4a6c:	028d0300 	.inst	0x028d0300 ; undefined
    4a70:	0000870b 	udf	#34571
    4a74:	00110400 	.inst	0x00110400 ; undefined
    4a78:	da080000 	sbc	x0, x0, x8
    4a7c:	03000013 	.inst	0x03000013 ; undefined
    4a80:	5402028e 	b.al	8ad0 <__stack_size+0x4ad0>
    4a84:	0a000004 	and	w4, w0, w0
    4a88:	02900304 	.inst	0x02900304 ; undefined
    4a8c:	0005a109 	.inst	0x0005a109 ; undefined
    4a90:	6c610b00 	ldnp	d0, d2, [x24, #-496]
    4a94:	9203006c 	and	x12, x3, #0x2000000020000000
    4a98:	00870b02 	.inst	0x00870b02 ; undefined
    4a9c:	fc0c0000 	stur	d0, [x0, #192]
    4aa0:	03000011 	.inst	0x03000011 ; undefined
    4aa4:	6f140293 	.inst	0x6f140293 ; undefined
    4aa8:	00000005 	udf	#5
    4aac:	00175f08 	.inst	0x00175f08 ; undefined
    4ab0:	02940300 	.inst	0x02940300 ; undefined
    4ab4:	00057c02 	.inst	0x00057c02 ; undefined
    4ab8:	05a10500 	zip2	z0.q, z8.q, z1.q
    4abc:	04060000 	.inst	0x04060000 ; undefined
    4ac0:	09029603 	.inst	0x09029603 ; undefined
    4ac4:	000005e0 	udf	#1504
    4ac8:	00161907 	.inst	0x00161907 ; undefined
    4acc:	02980300 	.inst	0x02980300 ; undefined
    4ad0:	0000870b 	udf	#34571
    4ad4:	1f010400 	fmadd	s0, s0, s1, s1
    4ad8:	18a20700 	ldr	w0, fffffffffff48bb8 <_sp+0xffffffff9ef08bb8>
    4adc:	99030000 	stlur	w0, [x0, #48]
    4ae0:	00870b02 	.inst	0x00870b02 ; undefined
    4ae4:	1f040000 	fmadd	s0, s0, s4, s0
    4ae8:	08000000 	stxrb	w0, w0, [x0]
    4aec:	00001713 	udf	#5907
    4af0:	02029a03 	.inst	0x02029a03 ; undefined
    4af4:	000005b3 	udf	#1459
    4af8:	0005e005 	.inst	0x0005e005 ; undefined
    4afc:	03040600 	.inst	0x03040600 ; undefined
    4b00:	5209029d 	eor	w29, w20, #0x800000
    4b04:	07000006 	.inst	0x07000006 ; undefined
    4b08:	00001633 	udf	#5683
    4b0c:	0b029f03 	.inst	0x0b029f03 ; undefined
    4b10:	00000087 	udf	#135
    4b14:	001f0104 	.inst	0x001f0104 ; undefined
    4b18:	0014ea07 	.inst	0x0014ea07 ; undefined
    4b1c:	02a00300 	.inst	0x02a00300 ; undefined
    4b20:	0000870b 	udf	#34571
    4b24:	1e010400 	.inst	0x1e010400 ; undefined
    4b28:	110f0700 	add	w0, w24, #0x3c1
    4b2c:	a1030000 	.inst	0xa1030000 ; undefined
    4b30:	00870b02 	.inst	0x00870b02 ; undefined
    4b34:	01040000 	.inst	0x01040000 ; undefined
    4b38:	3f07001d 	.inst	0x3f07001d ; undefined
    4b3c:	03000013 	.inst	0x03000013 ; undefined
    4b40:	870b02a2 	.inst	0x870b02a2 ; undefined
    4b44:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4b48:	07001c01 	.inst	0x07001c01 ; undefined
    4b4c:	000018a2 	udf	#6306
    4b50:	0b02a303 	.inst	0x0b02a303 ; undefined
    4b54:	00000087 	udf	#135
    4b58:	00001c04 	udf	#7172
    4b5c:	11050800 	add	w0, w0, #0x142
    4b60:	a4030000 	ld1rqb	{z0.b}, p0/z, [x0, x3]
    4b64:	05f20202 	.inst	0x05f20202 ; undefined
    4b68:	52050000 	eor	w0, w0, #0x8000000
    4b6c:	06000006 	.inst	0x06000006 ; undefined
    4b70:	02a60304 	.inst	0x02a60304 ; undefined
    4b74:	00074c09 	.inst	0x00074c09 ; undefined
    4b78:	16640700 	b	fffffffff9906778 <_sp+0xffffffff988c6778>
    4b7c:	a8030000 	stnp	x0, x0, [x0, #48]
    4b80:	00870b02 	.inst	0x00870b02 ; undefined
    4b84:	01040000 	.inst	0x01040000 ; undefined
    4b88:	8107001f 	.inst	0x8107001f ; undefined
    4b8c:	03000019 	.inst	0x03000019 ; undefined
    4b90:	870b02a9 	.inst	0x870b02a9 ; undefined
    4b94:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4b98:	09001e01 	.inst	0x09001e01 ; undefined
    4b9c:	00454654 	.inst	0x00454654 ; undefined
    4ba0:	0b02aa03 	.inst	0x0b02aa03 ; undefined
    4ba4:	00000087 	udf	#135
    4ba8:	001d0104 	.inst	0x001d0104 ; undefined
    4bac:	0011af07 	.inst	0x0011af07 ; undefined
    4bb0:	02ab0300 	.inst	0x02ab0300 ; undefined
    4bb4:	0000870b 	udf	#34571
    4bb8:	1c010400 	ldr	s0, 6c38 <__stack_size+0x2c38>
    4bbc:	46520900 	.inst	0x46520900 ; undefined
    4bc0:	ac030046 	stnp	q6, q0, [x2, #96]
    4bc4:	00870b02 	.inst	0x00870b02 ; undefined
    4bc8:	01040000 	.inst	0x01040000 ; undefined
    4bcc:	de07001b 	.inst	0xde07001b ; undefined
    4bd0:	03000015 	.inst	0x03000015 ; undefined
    4bd4:	870b02ad 	.inst	0x870b02ad ; undefined
    4bd8:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4bdc:	07001a01 	.inst	0x07001a01 ; undefined
    4be0:	000017c4 	udf	#6084
    4be4:	0b02ae03 	.inst	0x0b02ae03 ; undefined
    4be8:	00000087 	udf	#135
    4bec:	00190104 	.inst	0x00190104 ; undefined
    4bf0:	00181407 	.inst	0x00181407 ; undefined
    4bf4:	02af0300 	.inst	0x02af0300 ; undefined
    4bf8:	0000870b 	udf	#34571
    4bfc:	18010400 	ldr	w0, 6c7c <__stack_size+0x2c7c>
    4c00:	16fd0700 	b	fffffffffbf46800 <_sp+0xffffffff9af06800>
    4c04:	b0030000 	adrp	x0, 6005000 <__stack_size+0x6001000>
    4c08:	00870b02 	.inst	0x00870b02 ; undefined
    4c0c:	01040000 	.inst	0x01040000 ; undefined
    4c10:	b1070017 	adds	x23, x0, #0x1c0
    4c14:	03000018 	.inst	0x03000018 ; undefined
    4c18:	870b02b1 	.inst	0x870b02b1 ; undefined
    4c1c:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4c20:	07001601 	.inst	0x07001601 ; undefined
    4c24:	0000114c 	udf	#4428
    4c28:	0b02b203 	.inst	0x0b02b203 ; undefined
    4c2c:	00000087 	udf	#135
    4c30:	00150104 	.inst	0x00150104 ; undefined
    4c34:	00132707 	.inst	0x00132707 ; undefined
    4c38:	02b30300 	.inst	0x02b30300 ; undefined
    4c3c:	0000870b 	udf	#34571
    4c40:	14010400 	b	45c40 <__stack_size+0x41c40>
    4c44:	18a20700 	ldr	w0, fffffffffff48d24 <_sp+0xffffffff9ef08d24>
    4c48:	b4030000 	cbz	x0, ac48 <__stack_size+0x6c48>
    4c4c:	00870b02 	.inst	0x00870b02 ; undefined
    4c50:	14040000 	b	104c50 <__stack_size+0x100c50>
    4c54:	08000000 	stxrb	w0, w0, [x0]
    4c58:	000014f0 	udf	#5360
    4c5c:	0202b503 	.inst	0x0202b503 ; undefined
    4c60:	00000664 	udf	#1636
    4c64:	b703040a 	tbnz	x10, #32, ace4 <__stack_size+0x6ce4>
    4c68:	077e0902 	.inst	0x077e0902 ; undefined
    4c6c:	610b0000 	.inst	0x610b0000 ; undefined
    4c70:	03006c6c 	.inst	0x03006c6c ; undefined
    4c74:	870b02b9 	.inst	0x870b02b9 ; undefined
    4c78:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    4c7c:	000011fc 	udf	#4604
    4c80:	1102ba03 	add	w3, w16, #0xae
    4c84:	0000074c 	udf	#1868
    4c88:	15190800 	b	4646c88 <__stack_size+0x4642c88>
    4c8c:	bb030000 	.inst	0xbb030000 ; undefined
    4c90:	07590202 	.inst	0x07590202 ; undefined
    4c94:	7e050000 	.inst	0x7e050000 ; undefined
    4c98:	06000007 	.inst	0x06000007 ; undefined
    4c9c:	02bd0304 	.inst	0x02bd0304 ; undefined
    4ca0:	0007ce09 	.inst	0x0007ce09 ; undefined
    4ca4:	150a0700 	b	42868a4 <__stack_size+0x42828a4>
    4ca8:	bf030000 	.inst	0xbf030000 ; undefined
    4cac:	00870b02 	.inst	0x00870b02 ; undefined
    4cb0:	10040000 	adr	x0, ccb0 <__stack_size+0x8cb0>
    4cb4:	ba070010 	adcs	x16, x0, x7
    4cb8:	03000014 	.inst	0x03000014 ; undefined
    4cbc:	870b02c0 	.inst	0x870b02c0 ; undefined
    4cc0:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4cc4:	07000808 	.inst	0x07000808 ; undefined
    4cc8:	000018a2 	udf	#6306
    4ccc:	0b02c103 	.inst	0x0b02c103 ; undefined
    4cd0:	00000087 	udf	#135
    4cd4:	00000804 	udf	#2052
    4cd8:	15eb0800 	b	7ac6cd8 <__stack_size+0x7ac2cd8>
    4cdc:	c2030000 	.inst	0xc2030000 ; undefined
    4ce0:	07900202 	.inst	0x07900202 ; undefined
    4ce4:	ce050000 	eor3	v0.16b, v0.16b, v5.16b, v0.16b
    4ce8:	06000007 	.inst	0x06000007 ; undefined
    4cec:	02c40304 	.inst	0x02c40304 ; undefined
    4cf0:	00081e09 	.inst	0x00081e09 ; undefined
    4cf4:	124f0700 	.inst	0x124f0700 ; undefined
    4cf8:	c6030000 	.inst	0xc6030000 ; undefined
    4cfc:	00870b02 	.inst	0x00870b02 ; undefined
    4d00:	01040000 	.inst	0x01040000 ; undefined
    4d04:	8e07001f 	.inst	0x8e07001f ; undefined
    4d08:	03000015 	.inst	0x03000015 ; undefined
    4d0c:	870b02c7 	.inst	0x870b02c7 ; undefined
    4d10:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4d14:	07001e01 	.inst	0x07001e01 ; undefined
    4d18:	000018a2 	udf	#6306
    4d1c:	0b02c803 	.inst	0x0b02c803 ; undefined
    4d20:	00000087 	udf	#135
    4d24:	00001e04 	udf	#7684
    4d28:	16d00800 	b	fffffffffb406d28 <_sp+0xffffffff9a3c6d28>
    4d2c:	c9030000 	.inst	0xc9030000 ; undefined
    4d30:	07e00202 	.inst	0x07e00202 ; undefined
    4d34:	1e050000 	.inst	0x1e050000 ; undefined
    4d38:	06000008 	.inst	0x06000008 ; undefined
    4d3c:	02ce03b4 	.inst	0x02ce03b4 ; undefined
    4d40:	000a2509 	.inst	0x000a2509 ; undefined
    4d44:	109e0d00 	adr	x0, fffffffffff40ee4 <_sp+0xffffffff9ef00ee4>
    4d48:	cf030000 	.inst	0xcf030000 ; undefined
    4d4c:	01ac0f02 	.inst	0x01ac0f02 ; undefined
    4d50:	0d000000 	st1	{v0.b}[0], [x0]
    4d54:	000011b9 	udf	#4537
    4d58:	1202d003 	and	w3, w0, #0xc7c7c7c7
    4d5c:	0000020d 	udf	#525
    4d60:	129b0d04 	mov	w4, #0xffff2797            	// #-55401
    4d64:	d1030000 	sub	x0, x0, #0xc0
    4d68:	024c1202 	.inst	0x024c1202 ; undefined
    4d6c:	0d080000 	.inst	0x0d080000 ; undefined
    4d70:	0000194d 	udf	#6477
    4d74:	1402d203 	b	b9580 <__stack_size+0xb5580>
    4d78:	00000093 	udf	#147
    4d7c:	16780d0c 	b	fffffffff9e081ac <_sp+0xffffffff98dc81ac>
    4d80:	d3030000 	.inst	0xd3030000 ; undefined
    4d84:	02f01702 	.inst	0x02f01702 ; undefined
    4d88:	0d100000 	.inst	0x0d100000 ; undefined
    4d8c:	0000141e 	udf	#5150
    4d90:	1402d403 	b	b9d9c <__stack_size+0xb5d9c>
    4d94:	00000093 	udf	#147
    4d98:	11780d14 	add	w20, w8, #0xe03, lsl #12
    4d9c:	d5030000 	msr	s0_3_c0_c0_0, x0
    4da0:	00931402 	.inst	0x00931402 ; undefined
    4da4:	0d180000 	.inst	0x0d180000 ; undefined
    4da8:	000014ab 	udf	#5291
    4dac:	1402d603 	b	ba5b8 <__stack_size+0xb65b8>
    4db0:	00000093 	udf	#147
    4db4:	11300d1c 	add	w28, w8, #0xc03
    4db8:	d7030000 	.inst	0xd7030000 ; undefined
    4dbc:	00931402 	.inst	0x00931402 ; undefined
    4dc0:	0d200000 	st2	{v0.b, v1.b}[0], [x0]
    4dc4:	000016ee 	udf	#5870
    4dc8:	1402d803 	b	badd4 <__stack_size+0xb6dd4>
    4dcc:	00000093 	udf	#147
    4dd0:	12bb0d24 	mov	w4, #0x2796ffff            	// #664207359
    4dd4:	d9030000 	stlur	x0, [x0, #48]
    4dd8:	00931402 	.inst	0x00931402 ; undefined
    4ddc:	0d280000 	.inst	0x0d280000 ; undefined
    4de0:	0000113f 	udf	#4415
    4de4:	1802da03 	ldr	w3, a924 <__stack_size+0x6924>
    4de8:	0000044f 	udf	#1103
    4dec:	14d60d2c 	b	358829c <__stack_size+0x358429c>
    4df0:	db030000 	.inst	0xdb030000 ; undefined
    4df4:	05ae1802 	trn1	z2.q, z0.q, z14.q
    4df8:	0d300000 	.inst	0x0d300000 ; undefined
    4dfc:	0000174e 	udf	#5966
    4e00:	1402dc03 	b	bbe0c <__stack_size+0xb7e0c>
    4e04:	00000093 	udf	#147
    4e08:	15940d34 	b	65082d8 <__stack_size+0x65042d8>
    4e0c:	dd030000 	.inst	0xdd030000 ; undefined
    4e10:	00931402 	.inst	0x00931402 ; undefined
    4e14:	0d380000 	.inst	0x0d380000 ; undefined
    4e18:	000011df 	udf	#4575
    4e1c:	1402de03 	b	bc628 <__stack_size+0xb8628>
    4e20:	00000093 	udf	#147
    4e24:	16160d3c 	b	fffffffff8588314 <_sp+0xffffffff97548314>
    4e28:	df030000 	.inst	0xdf030000 ; undefined
    4e2c:	05ed1702 	.inst	0x05ed1702 ; undefined
    4e30:	0d400000 	ld1	{v0.b}[0], [x0]
    4e34:	00001954 	udf	#6484
    4e38:	1402e003 	b	bce44 <__stack_size+0xb8e44>
    4e3c:	00000a35 	udf	#2613
    4e40:	16300d44 	b	fffffffff8c08350 <_sp+0xffffffff97bc8350>
    4e44:	e1030000 	.inst	0xe1030000 ; undefined
    4e48:	065f1502 	.inst	0x065f1502 ; undefined
    4e4c:	0d6c0000 	.inst	0x0d6c0000 ; undefined
    4e50:	000013be 	udf	#5054
    4e54:	1502e203 	b	40bd660 <__stack_size+0x40b9660>
    4e58:	0000078b 	udf	#1931
    4e5c:	131e0d70 	sbfiz	w16, w11, #2, #4
    4e60:	e3030000 	.inst	0xe3030000 ; undefined
    4e64:	00931402 	.inst	0x00931402 ; undefined
    4e68:	0d740000 	.inst	0x0d740000 ; undefined
    4e6c:	000010fc 	udf	#4348
    4e70:	1402e403 	b	bde7c <__stack_size+0xb9e7c>
    4e74:	00000093 	udf	#147
    4e78:	128f0d78 	mov	w24, #0xffff8794            	// #-30828
    4e7c:	e5030000 	.inst	0xe5030000 ; undefined
    4e80:	07db1702 	.inst	0x07db1702 ; undefined
    4e84:	0d7c0000 	.inst	0x0d7c0000 ; undefined
    4e88:	000013c8 	udf	#5064
    4e8c:	1402e603 	b	be698 <__stack_size+0xba698>
    4e90:	00000093 	udf	#147
    4e94:	14850d80 	b	2148494 <__stack_size+0x2144494>
    4e98:	e7030000 	.inst	0xe7030000 ; undefined
    4e9c:	00931402 	.inst	0x00931402 ; undefined
    4ea0:	0d840000 	st1	{v0.b}[0], [x0], x4
    4ea4:	0000163a 	udf	#5690
    4ea8:	1502e803 	b	40beeb4 <__stack_size+0x40baeb4>
    4eac:	0000082b 	udf	#2091
    4eb0:	13630d88 	.inst	0x13630d88 ; undefined
    4eb4:	e9030000 	.inst	0xe9030000 ; undefined
    4eb8:	00931402 	.inst	0x00931402 ; undefined
    4ebc:	0d8c0000 	st1	{v0.b}[0], [x0], x12
    4ec0:	000010be 	udf	#4286
    4ec4:	1402ea03 	b	bf6d0 <__stack_size+0xbb6d0>
    4ec8:	00000093 	udf	#147
    4ecc:	15f70d90 	b	7dc850c <__stack_size+0x7dc450c>
    4ed0:	eb030000 	subs	x0, x0, x3
    4ed4:	00931402 	.inst	0x00931402 ; undefined
    4ed8:	0d940000 	st1	{v0.b}[0], [x0], x20
    4edc:	000011e8 	udf	#4584
    4ee0:	1402ec03 	b	bfeec <__stack_size+0xbbeec>
    4ee4:	00000093 	udf	#147
    4ee8:	11ce0d98 	.inst	0x11ce0d98 ; undefined
    4eec:	ed030000 	.inst	0xed030000 ; undefined
    4ef0:	00931402 	.inst	0x00931402 ; undefined
    4ef4:	0d9c0000 	st1	{v0.b}[0], [x0], x28
    4ef8:	0000195b 	udf	#6491
    4efc:	1402ee03 	b	c0708 <__stack_size+0xbc708>
    4f00:	00000093 	udf	#147
    4f04:	19680da0 	.inst	0x19680da0 ; undefined
    4f08:	ef030000 	.inst	0xef030000 ; undefined
    4f0c:	0a4a1402 	and	w2, w0, w10, lsr #5
    4f10:	0da40000 	st2	{v0.b, v1.b}[0], [x0], x4
    4f14:	000018ff 	udf	#6399
    4f18:	1402f003 	b	c0f24 <__stack_size+0xbcf24>
    4f1c:	00000093 	udf	#147
    4f20:	15550dac 	b	55485d0 <__stack_size+0x55445d0>
    4f24:	f1030000 	subs	x0, x0, #0xc0
    4f28:	00931402 	.inst	0x00931402 ; undefined
    4f2c:	00b00000 	.inst	0x00b00000 ; undefined
    4f30:	0000930e 	udf	#37646
    4f34:	000a3500 	.inst	0x000a3500 ; undefined
    4f38:	00290f00 	.inst	0x00290f00 ; NYI
    4f3c:	00090000 	.inst	0x00090000 ; undefined
    4f40:	000a2505 	.inst	0x000a2505 ; undefined
    4f44:	00930e00 	.inst	0x00930e00 ; undefined
    4f48:	0a4a0000 	and	w0, w0, w10, lsr #0
    4f4c:	290f0000 	stp	w0, w0, [x0, #120]
    4f50:	01000000 	.inst	0x01000000 ; undefined
    4f54:	0a3a0500 	bic	w0, w8, w26, lsl #1
    4f58:	a2080000 	.inst	0xa2080000 ; undefined
    4f5c:	03000012 	.inst	0x03000012 ; undefined
    4f60:	300302f2 	adr	x18, afbd <__stack_size+0x6fbd>
    4f64:	10000008 	adr	x8, 4f64 <__stack_size+0xf64>
    4f68:	00001843 	udf	#6211
    4f6c:	00370407 	.inst	0x00370407 ; NYI
    4f70:	67040000 	.inst	0x67040000 ; undefined
    4f74:	000a8106 	.inst	0x000a8106 ; undefined
    4f78:	127c1100 	.inst	0x127c1100 ; undefined
    4f7c:	11010000 	add	w0, w0, #0x40
    4f80:	00001885 	udf	#6277
    4f84:	15711102 	b	5c4938c <__stack_size+0x5c4538c>
    4f88:	00030000 	.inst	0x00030000 ; undefined
    4f8c:	0013ad10 	.inst	0x0013ad10 ; undefined
    4f90:	37040700 	tbnz	w0, #0, ffffffffffffd070 <_sp+0xffffffff9efbd070>
    4f94:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    4f98:	0aa0066d 	bic	w13, w19, w0, asr #1
    4f9c:	6b110000 	subs	w0, w0, w17
    4fa0:	00000012 	udf	#18
    4fa4:	00196f11 	.inst	0x00196f11 ; undefined
    4fa8:	10000100 	adr	x0, 4fc8 <__stack_size+0xfc8>
    4fac:	0000144f 	udf	#5199
    4fb0:	00370407 	.inst	0x00370407 ; NYI
    4fb4:	7b040000 	.inst	0x7b040000 ; undefined
    4fb8:	000acb06 	.inst	0x000acb06 ; undefined
    4fbc:	14e31100 	b	38c93bc <__stack_size+0x38c53bc>
    4fc0:	11000000 	add	w0, w0, #0x0
    4fc4:	00001992 	udf	#6546
    4fc8:	14ce1101 	b	33893cc <__stack_size+0x33853cc>
    4fcc:	11020000 	add	w0, w0, #0x80
    4fd0:	000014c9 	udf	#5321
    4fd4:	610e0003 	.inst	0x610e0003 ; undefined
    4fd8:	db000000 	.inst	0xdb000000 ; undefined
    4fdc:	0f00000a 	.inst	0x0f00000a ; undefined
    4fe0:	00000029 	udf	#41
    4fe4:	f912003f 	str	xzr, [x1, #9216]
    4fe8:	0100001f 	.inst	0x0100001f ; undefined
    4fec:	0061090d 	.inst	0x0061090d ; undefined
    4ff0:	03090000 	.inst	0x03090000 ; undefined
    4ff4:	61004ed8 	.inst	0x61004ed8 ; undefined
    4ff8:	00000000 	udf	#0
    4ffc:	00200a12 	.inst	0x00200a12 ; NYI
    5000:	0a0e0100 	and	w0, w8, w14
    5004:	00000087 	udf	#135
    5008:	4edc0309 	.inst	0x4edc0309 ; undefined
    500c:	00006100 	udf	#24832
    5010:	1a120000 	adc	w0, w0, w18
    5014:	01000020 	.inst	0x01000020 ; undefined
    5018:	0acb090f 	and	w15, w8, w11, ror #2
    501c:	03090000 	.inst	0x03090000 ; undefined
    5020:	61004ee0 	.inst	0x61004ee0 ; undefined
    5024:	00000000 	udf	#0
    5028:	00202412 	.inst	0x00202412 ; NYI
    502c:	09100100 	.inst	0x09100100 ; undefined
    5030:	00000acb 	udf	#2763
    5034:	4f200309 	.inst	0x4f200309 ; undefined
    5038:	00006100 	udf	#24832
    503c:	6d130000 	stp	d0, d0, [x0, #304]
    5040:	04000011 	add	z17.b, p0/m, z17.b, z0.b
    5044:	00610991 	.inst	0x00610991 ; undefined
    5048:	0b490000 	add	w0, w0, w9, lsr #0
    504c:	49140000 	.inst	0x49140000 ; undefined
    5050:	0000000b 	udf	#11
    5054:	0a4f0815 	and	w21, w0, w15, lsr #2
    5058:	90130000 	adrp	x0, 26005000 <__stack_size+0x26001000>
    505c:	05000006 	orr	z6.s, z6.s, #0x1
    5060:	005a0514 	.inst	0x005a0514 ; undefined
    5064:	0b660000 	.inst	0x0b660000 ; undefined
    5068:	66140000 	.inst	0x66140000 ; undefined
    506c:	1600000b 	b	fffffffff8005098 <_sp+0xffffffff96fc5098>
    5070:	73081500 	.inst	0x73081500 ; undefined
    5074:	0200000b 	.inst	0x0200000b ; undefined
    5078:	011b0801 	.inst	0x011b0801 ; undefined
    507c:	6c170000 	stnp	d0, d0, [x0, #368]
    5080:	1800000b 	ldr	w11, 5080 <__stack_size+0x1080>
    5084:	000017e9 	udf	#6121
    5088:	8f069204 	.inst	0x8f069204 ; undefined
    508c:	1400000b 	b	50b8 <__stack_size+0x10b8>
    5090:	00000b49 	udf	#2889
    5094:	000aa014 	.inst	0x000aa014 ; undefined
    5098:	84180000 	ld1sb	{z0.s}, p0/z, [x0, z24.s, uxtw]
    509c:	04000016 	add	z22.b, p0/m, z22.b, z0.b
    50a0:	0ba60695 	.inst	0x0ba60695 ; undefined
    50a4:	49140000 	.inst	0x49140000 ; undefined
    50a8:	1400000b 	b	50d4 <__stack_size+0x10d4>
    50ac:	00000061 	udf	#97
    50b0:	12ae1300 	mov	w0, #0x8f67ffff            	// #-1889009665
    50b4:	9c040000 	ldr	q0, d0b4 <__stack_size+0x90b4>
    50b8:	0000870a 	udf	#34570
    50bc:	000bbc00 	.inst	0x000bbc00 ; undefined
    50c0:	0b491400 	add	w0, w0, w9, lsr #5
    50c4:	13000000 	sbfx	w0, w0, #0, #1
    50c8:	000011c0 	udf	#4544
    50cc:	870a9b04 	.inst	0x870a9b04 ; undefined
    50d0:	d2000000 	eor	x0, x0, #0x100000001
    50d4:	1400000b 	b	5100 <__stack_size+0x1100>
    50d8:	00000b49 	udf	#2889
    50dc:	17361800 	b	fffffffffcd8b0dc <_sp+0xffffffff9bd4b0dc>
    50e0:	8f040000 	.inst	0x8f040000 ; undefined
    50e4:	000bee06 	.inst	0x000bee06 ; undefined
    50e8:	0b491400 	add	w0, w0, w9, lsr #5
    50ec:	a0140000 	.inst	0xa0140000 ; undefined
    50f0:	1400000a 	b	5118 <__stack_size+0x1118>
    50f4:	00000061 	udf	#97
    50f8:	15d11800 	b	744b0f8 <__stack_size+0x74470f8>
    50fc:	86040000 	.inst	0x86040000 ; undefined
    5100:	000c0006 	.inst	0x000c0006 ; undefined
    5104:	0b491400 	add	w0, w0, w9, lsr #5
    5108:	18000000 	ldr	w0, 5108 <__stack_size+0x1108>
    510c:	0000108e 	udf	#4238
    5110:	12069a04 	and	w4, w16, #0xfc01fc01
    5114:	1400000c 	b	5144 <__stack_size+0x1144>
    5118:	00000b49 	udf	#2889
    511c:	10811800 	adr	x0, fffffffffff0741c <_sp+0xffffffff9eec741c>
    5120:	99040000 	stlur	w0, [x0, #64]
    5124:	000c2906 	.inst	0x000c2906 ; undefined
    5128:	0b491400 	add	w0, w0, w9, lsr #5
    512c:	61140000 	.inst	0x61140000 ; undefined
    5130:	00000000 	udf	#0
    5134:	0018c818 	.inst	0x0018c818 ; undefined
    5138:	06970400 	.inst	0x06970400 ; undefined
    513c:	00000c40 	udf	#3136
    5140:	000b4914 	.inst	0x000b4914 ; undefined
    5144:	00741400 	.inst	0x00741400 ; undefined
    5148:	18000000 	ldr	w0, 5148 <__stack_size+0x1148>
    514c:	000013f5 	udf	#5109
    5150:	57069404 	.inst	0x57069404 ; undefined
    5154:	1400000c 	b	5184 <__stack_size+0x1184>
    5158:	00000b49 	udf	#2889
    515c:	00006114 	udf	#24852
    5160:	bc180000 	stur	s0, [x0, #-128]
    5164:	04000015 	add	z21.b, p0/m, z21.b, z0.b
    5168:	0c6e0693 	.inst	0x0c6e0693 ; undefined
    516c:	49140000 	.inst	0x49140000 ; undefined
    5170:	1400000b 	b	519c <__stack_size+0x119c>
    5174:	00000087 	udf	#135
    5178:	14381800 	b	e0b178 <__stack_size+0xe07178>
    517c:	8d040000 	.inst	0x8d040000 ; undefined
    5180:	000c8506 	.inst	0x000c8506 ; undefined
    5184:	0b491400 	add	w0, w0, w9, lsr #5
    5188:	74140000 	.inst	0x74140000 ; undefined
    518c:	00000000 	udf	#0
    5190:	00118e18 	.inst	0x00118e18 ; undefined
    5194:	068b0400 	.inst	0x068b0400 ; undefined
    5198:	00000c97 	udf	#3223
    519c:	000b4914 	.inst	0x000b4914 ; undefined
    51a0:	d6180000 	.inst	0xd6180000 ; undefined
    51a4:	04000010 	add	z16.b, p0/m, z16.b, z0.b
    51a8:	0cae0689 	.inst	0x0cae0689 ; undefined
    51ac:	49140000 	.inst	0x49140000 ; undefined
    51b0:	1400000b 	b	51dc <__stack_size+0x11dc>
    51b4:	00000a81 	udf	#2689
    51b8:	18d81800 	ldr	w0, fffffffffffb54b8 <_sp+0xffffffff9ef754b8>
    51bc:	88040000 	stxr	w4, w0, [x0]
    51c0:	000cc506 	.inst	0x000cc506 ; undefined
    51c4:	0b491400 	add	w0, w0, w9, lsr #5
    51c8:	5c140000 	ldr	d0, 2d1c8 <__stack_size+0x291c8>
    51cc:	0000000a 	udf	#10
    51d0:	00107018 	.inst	0x00107018 ; undefined
    51d4:	069d0400 	.inst	0x069d0400 ; undefined
    51d8:	00000cdc 	udf	#3292
    51dc:	000b4914 	.inst	0x000b4914 ; undefined
    51e0:	00371400 	.inst	0x00371400 ; NYI
    51e4:	18000000 	ldr	w0, 51e4 <__stack_size+0x11e4>
    51e8:	00001062 	udf	#4194
    51ec:	ee068504 	.inst	0xee068504 ; undefined
    51f0:	1400000c 	b	5220 <__stack_size+0x1220>
    51f4:	00000b49 	udf	#2889
    51f8:	20011900 	.inst	0x20011900 ; undefined
    51fc:	c8010000 	stxr	w1, x0, [x0]
    5200:	00005a05 	udf	#23045
    5204:	003ba800 	.inst	0x003ba800 ; NYI
    5208:	00000061 	udf	#97
    520c:	00006800 	udf	#26624
    5210:	00000000 	udf	#0
    5214:	209c0100 	.inst	0x209c0100 ; undefined
    5218:	1a00000d 	adc	w13, w0, w0
    521c:	00001214 	udf	#4628
    5220:	5a06ca01 	.inst	0x5a06ca01 ; undefined
    5224:	02000000 	.inst	0x02000000 ; undefined
    5228:	1b007c91 	mul	w17, w4, w0
    522c:	00001fd4 	udf	#8148
    5230:	5a051701 	.inst	0x5a051701 ; undefined
    5234:	54000000 	b.eq	5234 <__stack_size+0x1234>  // b.none
    5238:	00610036 	.inst	0x00610036 ; undefined
    523c:	54000000 	b.eq	523c <__stack_size+0x123c>  // b.none
    5240:	00000005 	udf	#5
    5244:	01000000 	.inst	0x01000000 ; undefined
    5248:	32691c9c 	.inst	0x32691c9c ; undefined
    524c:	17010063 	b	fffffffffc0453d8 <_sp+0xffffffff9b0053d8>
    5250:	000b4922 	.inst	0x000b4922 ; undefined
    5254:	58910200 	ldr	x0, fffffffffff27294 <_sp+0xffffffff9eee7294>
    5258:	0020131a 	.inst	0x0020131a ; NYI
    525c:	0a1a0100 	and	w0, w8, w26
    5260:	00000061 	udf	#97
    5264:	1a7f9102 	.inst	0x1a7f9102 ; undefined
    5268:	00001fef 	udf	#8175
    526c:	610a1b01 	.inst	0x610a1b01 ; undefined
    5270:	02000000 	.inst	0x02000000 ; undefined
    5274:	fe1a7e91 	.inst	0xfe1a7e91 ; undefined
    5278:	01000007 	.inst	0x01000007 ; undefined
    527c:	00870b1c 	.inst	0x00870b1c ; undefined
    5280:	91020000 	add	x0, x0, #0x80
    5284:	378c1d78 	tbnz	w24, #17, ffffffffffffd630 <_sp+0xffffffff9efbd630>
    5288:	00006100 	udf	#24832
    528c:	00b40000 	.inst	0x00b40000 ; undefined
    5290:	00000000 	udf	#0
    5294:	0d9d0000 	st1	{v0.b}[0], [x0], x29
    5298:	691e0000 	stgp	x0, x0, [x0, #960]
    529c:	0e3f0100 	saddl	v0.8h, v8.8b, v31.8b
    52a0:	0000005a 	udf	#90
    52a4:	00749102 	.inst	0x00749102 ; undefined
    52a8:	0039b01d 	.inst	0x0039b01d ; NYI
    52ac:	00000061 	udf	#97
    52b0:	00007000 	udf	#28672
    52b4:	00000000 	udf	#0
    52b8:	000dc000 	.inst	0x000dc000 ; undefined
    52bc:	00691e00 	.inst	0x00691e00 ; undefined
    52c0:	5a0e8901 	.inst	0x5a0e8901 ; undefined
    52c4:	02000000 	.inst	0x02000000 ; undefined
    52c8:	1d007091 	.inst	0x1d007091 ; undefined
    52cc:	61003a88 	.inst	0x61003a88 ; undefined
    52d0:	00000000 	udf	#0
    52d4:	00000088 	udf	#136
    52d8:	00000000 	udf	#0
    52dc:	00000de3 	udf	#3555
    52e0:	0100691e 	.inst	0x0100691e ; undefined
    52e4:	005a0ba3 	.inst	0x005a0ba3 ; undefined
    52e8:	91020000 	add	x0, x0, #0x80
    52ec:	301f006c 	adr	x12, 432f9 <__stack_size+0x3f2f9>
    52f0:	0061003b 	.inst	0x0061003b ; undefined
    52f4:	60000000 	.inst	0x60000000 ; undefined
    52f8:	00000000 	udf	#0
    52fc:	1e000000 	.inst	0x1e000000 ; undefined
    5300:	b8010069 	stur	w9, [x3, #16]
    5304:	00005a0a 	udf	#23050
    5308:	68910200 	stgp	x0, x0, [x16], #544
    530c:	c4000000 	ld1sb	{z0.d}, p0/z, [x0, z0.d, uxtw]
    5310:	04000000 	add	z0.b, p0/m, z0.b, z0.b
    5314:	00137700 	.inst	0x00137700 ; undefined
    5318:	20010800 	.inst	0x20010800 ; undefined
    531c:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    5320:	0000202e 	udf	#8238
    5324:	0000002f 	udf	#47
    5328:	00000a80 	udf	#2688
	...
    5334:	0000285b 	udf	#10331
    5338:	7c070802 	.inst	0x7c070802 ; undefined
    533c:	02000001 	.inst	0x02000001 ; undefined
    5340:	01cb0508 	.inst	0x01cb0508 ; undefined
    5344:	04020000 	.inst	0x04020000 ; undefined
    5348:	00018107 	.inst	0x00018107 ; undefined
    534c:	05100200 	mov	z0.b, p0/z, #16
    5350:	00000146 	udf	#326
    5354:	00071002 	.inst	0x00071002 ; undefined
    5358:	02000001 	.inst	0x02000001 ; undefined
    535c:	01140601 	.inst	0x01140601 ; undefined
    5360:	02020000 	.inst	0x02020000 ; undefined
    5364:	0001d405 	.inst	0x0001d405 ; undefined
    5368:	05040300 	.inst	0x05040300 ; undefined
    536c:	00746e69 	.inst	0x00746e69 ; undefined
    5370:	12080102 	and	w2, w8, #0x1000000
    5374:	02000001 	.inst	0x02000001 ; undefined
    5378:	01330702 	.inst	0x01330702 ; undefined
    537c:	b4040000 	cbz	x0, d37c <__stack_size+0x937c>
    5380:	02000007 	.inst	0x02000007 ; undefined
    5384:	0037165b 	.inst	0x0037165b ; NYI
    5388:	08020000 	stxrb	w2, w0, [x0]
    538c:	0001c605 	.inst	0x0001c605 ; undefined
    5390:	07080200 	.inst	0x07080200 ; undefined
    5394:	00000177 	udf	#375
    5398:	00203505 	.inst	0x00203505 ; NYI
    539c:	052a0300 	ext	z0.b, z0.b, z24.b, #80
    53a0:	0000005a 	udf	#90
    53a4:	0000009b 	udf	#155
    53a8:	01070006 	.inst	0x01070006 ; undefined
    53ac:	03000020 	.inst	0x03000020 ; undefined
    53b0:	00a90615 	.inst	0x00a90615 ; undefined
    53b4:	00060000 	.inst	0x00060000 ; undefined
    53b8:	00203e08 	.inst	0x00203e08 ; NYI
    53bc:	0a0f0100 	and	w0, w8, w15
    53c0:	0000006f 	udf	#111
    53c4:	61003c10 	.inst	0x61003c10 ; undefined
    53c8:	00000000 	udf	#0
    53cc:	0000001c 	udf	#28
    53d0:	00000000 	udf	#0
    53d4:	de009c01 	.inst	0xde009c01 ; undefined
    53d8:	04000004 	add	z4.b, p0/m, z4.b, z0.b
    53dc:	0013f700 	.inst	0x0013f700 ; undefined
    53e0:	20010800 	.inst	0x20010800 ; undefined
    53e4:	0c000002 	st4	{v2.8b-v5.8b}, [x0]
    53e8:	00002083 	udf	#8323
    53ec:	0000002f 	udf	#47
    53f0:	00000aa0 	udf	#2720
	...
    53fc:	000028e4 	udf	#10468
    5400:	7c070802 	.inst	0x7c070802 ; undefined
    5404:	02000001 	.inst	0x02000001 ; undefined
    5408:	01cb0508 	.inst	0x01cb0508 ; undefined
    540c:	04020000 	.inst	0x04020000 ; undefined
    5410:	00018107 	.inst	0x00018107 ; undefined
    5414:	05100200 	mov	z0.b, p0/z, #16
    5418:	00000146 	udf	#326
    541c:	00071002 	.inst	0x00071002 ; undefined
    5420:	02000001 	.inst	0x02000001 ; undefined
    5424:	01140601 	.inst	0x01140601 ; undefined
    5428:	02020000 	.inst	0x02020000 ; undefined
    542c:	0001d405 	.inst	0x0001d405 ; undefined
    5430:	07b50300 	.inst	0x07b50300 ; undefined
    5434:	57020000 	.inst	0x57020000 ; undefined
    5438:	0000660d 	udf	#26125
    543c:	05040400 	.inst	0x05040400 ; undefined
    5440:	00746e69 	.inst	0x00746e69 ; undefined
    5444:	12080102 	and	w2, w8, #0x1000000
    5448:	03000001 	.inst	0x03000001 ; undefined
    544c:	00001315 	udf	#4885
    5450:	80185a02 	.inst	0x80185a02 ; undefined
    5454:	02000000 	.inst	0x02000000 ; undefined
    5458:	01330702 	.inst	0x01330702 ; undefined
    545c:	b4030000 	cbz	x0, b45c <__stack_size+0x745c>
    5460:	02000007 	.inst	0x02000007 ; undefined
    5464:	0037165b 	.inst	0x0037165b ; NYI
    5468:	87050000 	.inst	0x87050000 ; undefined
    546c:	02000000 	.inst	0x02000000 ; undefined
    5470:	01c60508 	.inst	0x01c60508 ; undefined
    5474:	08020000 	stxrb	w2, w0, [x0]
    5478:	00017707 	.inst	0x00017707 ; undefined
    547c:	00930600 	.inst	0x00930600 ; undefined
    5480:	00b60000 	.inst	0x00b60000 ; undefined
    5484:	29070000 	stp	w0, w0, [x0, #56]
    5488:	23000000 	.inst	0x23000000 ; undefined
    548c:	00a60500 	.inst	0x00a60500 ; undefined
    5490:	00080000 	.inst	0x00080000 ; undefined
    5494:	02130301 	.inst	0x02130301 ; undefined
    5498:	00025c09 	.inst	0x00025c09 ; undefined
    549c:	1e890900 	.inst	0x1e890900 ; undefined
    54a0:	14030000 	b	c54a0 <__stack_size+0xc14a0>
    54a4:	00931102 	.inst	0x00931102 ; undefined
    54a8:	09000000 	.inst	0x09000000 ; undefined
    54ac:	00001e90 	udf	#7824
    54b0:	14021503 	b	8a8bc <__stack_size+0x868bc>
    54b4:	00000093 	udf	#147
    54b8:	1fc80904 	fmadd	h4, h8, h8, h2
    54bc:	16030000 	b	fffffffff80c54bc <_sp+0xffffffff970854bc>
    54c0:	00931402 	.inst	0x00931402 ; undefined
    54c4:	09080000 	.inst	0x09080000 ; undefined
    54c8:	00001f6a 	udf	#8042
    54cc:	14021703 	b	8b0d8 <__stack_size+0x870d8>
    54d0:	00000093 	udf	#147
    54d4:	45530a0c 	uaddlb	z12.h, z16.b, z19.b
    54d8:	18030052 	ldr	w18, b4e0 <__stack_size+0x74e0>
    54dc:	00931402 	.inst	0x00931402 ; undefined
    54e0:	09100000 	.inst	0x09100000 ; undefined
    54e4:	00001f30 	udf	#7984
    54e8:	14021903 	b	8b8f4 <__stack_size+0x878f4>
    54ec:	00000093 	udf	#147
    54f0:	1dc30914 	.inst	0x1dc30914 ; undefined
    54f4:	1a030000 	adc	w0, w0, w3
    54f8:	00931402 	.inst	0x00931402 ; undefined
    54fc:	09180000 	.inst	0x09180000 ; undefined
    5500:	00001dca 	udf	#7626
    5504:	14021b03 	b	8c110 <__stack_size+0x88110>
    5508:	00000093 	udf	#147
    550c:	1321091c 	.inst	0x1321091c ; undefined
    5510:	1c030000 	ldr	s0, b510 <__stack_size+0x7510>
    5514:	00931402 	.inst	0x00931402 ; undefined
    5518:	09200000 	.inst	0x09200000 ; undefined
    551c:	000010ff 	udf	#4351
    5520:	14021d03 	b	8c92c <__stack_size+0x8892c>
    5524:	00000093 	udf	#147
    5528:	52530a24 	.inst	0x52530a24 ; undefined
    552c:	021e0300 	.inst	0x021e0300 ; undefined
    5530:	00009314 	udf	#37652
    5534:	490a2800 	.inst	0x490a2800 ; undefined
    5538:	0300524d 	.inst	0x0300524d ; undefined
    553c:	9314021f 	.inst	0x9314021f ; undefined
    5540:	2c000000 	stnp	s0, s0, [x0]
    5544:	5253490a 	.inst	0x5253490a ; undefined
    5548:	02200300 	.inst	0x02200300 ; undefined
    554c:	00009314 	udf	#37652
    5550:	cf093000 	.inst	0xcf093000 ; undefined
    5554:	0300001f 	.inst	0x0300001f ; undefined
    5558:	93140221 	.inst	0x93140221 ; undefined
    555c:	34000000 	cbz	w0, 555c <__stack_size+0x155c>
    5560:	001e7b09 	.inst	0x001e7b09 ; undefined
    5564:	02220300 	.inst	0x02220300 ; undefined
    5568:	00009314 	udf	#37652
    556c:	d3093800 	.inst	0xd3093800 ; undefined
    5570:	0300001e 	.inst	0x0300001e ; undefined
    5574:	93140223 	.inst	0x93140223 ; undefined
    5578:	3c000000 	stur	b0, [x0]
    557c:	001fb509 	.inst	0x001fb509 ; undefined
    5580:	02240300 	.inst	0x02240300 ; undefined
    5584:	00009314 	udf	#37652
    5588:	cc094000 	.inst	0xcc094000 ; undefined
    558c:	0300001e 	.inst	0x0300001e ; undefined
    5590:	93140225 	.inst	0x93140225 ; undefined
    5594:	44000000 	.inst	0x44000000 ; undefined
    5598:	5243490a 	.inst	0x5243490a ; undefined
    559c:	02260300 	.inst	0x02260300 ; undefined
    55a0:	00009314 	udf	#37652
    55a4:	f4094800 	.inst	0xf4094800 ; undefined
    55a8:	0300001e 	.inst	0x0300001e ; undefined
    55ac:	93140227 	.inst	0x93140227 ; undefined
    55b0:	4c000000 	st4	{v0.16b-v3.16b}, [x0]
    55b4:	001dd109 	.inst	0x001dd109 ; undefined
    55b8:	02280300 	.inst	0x02280300 ; undefined
    55bc:	00009314 	udf	#37652
    55c0:	28095000 	stnp	w0, w20, [x0, #72]
    55c4:	0300001f 	.inst	0x0300001f ; undefined
    55c8:	93140229 	.inst	0x93140229 ; undefined
    55cc:	54000000 	b.eq	55cc <__stack_size+0x15cc>  // b.none
    55d0:	5244490a 	.inst	0x5244490a ; undefined
    55d4:	022a0300 	.inst	0x022a0300 ; undefined
    55d8:	00009314 	udf	#37652
    55dc:	a5095800 	ld1sh	{z0.d}, p6/z, [x0, x9, lsl #1]
    55e0:	0300001f 	.inst	0x0300001f ; undefined
    55e4:	9314022b 	.inst	0x9314022b ; undefined
    55e8:	5c000000 	ldr	d0, 55e8 <__stack_size+0x15e8>
    55ec:	7852440a 	ldrh	w10, [x0], #-220
    55f0:	022c0300 	.inst	0x022c0300 ; undefined
    55f4:	0000b614 	udf	#46612
    55f8:	b3096000 	.inst	0xb3096000 ; undefined
    55fc:	0300001d 	.inst	0x0300001d ; undefined
    5600:	9314022d 	.inst	0x9314022d ; undefined
    5604:	f0000000 	adrp	x0, 8000 <__stack_size+0x4000>
    5608:	00194d09 	.inst	0x00194d09 ; undefined
    560c:	022e0300 	.inst	0x022e0300 ; undefined
    5610:	00009314 	udf	#37652
    5614:	2109f400 	.inst	0x2109f400 ; undefined
    5618:	0300001f 	.inst	0x0300001f ; undefined
    561c:	9314022f 	.inst	0x9314022f ; undefined
    5620:	f8000000 	stur	x0, [x0]
    5624:	001e8209 	.inst	0x001e8209 ; undefined
    5628:	02300300 	.inst	0x02300300 ; undefined
    562c:	00009314 	udf	#37652
    5630:	0b00fc00 	.inst	0x0b00fc00 ; undefined
    5634:	00001f56 	udf	#8022
    5638:	03023103 	.inst	0x03023103 ; undefined
    563c:	000000bb 	udf	#187
    5640:	001f8b0c 	.inst	0x001f8b0c ; undefined
    5644:	0bb10400 	.inst	0x0bb10400 ; undefined
    5648:	00000087 	udf	#135
    564c:	0000027f 	udf	#639
    5650:	00027f0d 	.inst	0x00027f0d ; undefined
    5654:	080e0000 	stxrb	w14, w0, [x0]
    5658:	0000025c 	udf	#604
    565c:	001fbc0c 	.inst	0x001fbc0c ; undefined
    5660:	0aa10400 	bic	w0, w0, w1, asr #1
    5664:	0000005a 	udf	#90
    5668:	0000029b 	udf	#667
    566c:	00027f0d 	.inst	0x00027f0d ; undefined
    5670:	a50c0000 	ld1rqw	{z0.s}, p0/z, [x0, x12, lsl #2]
    5674:	0400001e 	add	z30.b, p0/m, z30.b, z0.b
    5678:	005a0aaa 	.inst	0x005a0aaa ; undefined
    567c:	02b60000 	.inst	0x02b60000 ; undefined
    5680:	7f0d0000 	.inst	0x7f0d0000 ; undefined
    5684:	0d000002 	st1	{v2.b}[0], [x0]
    5688:	00000087 	udf	#135
    568c:	1f620c00 	fnmadd	d0, d0, d2, d3
    5690:	a9040000 	stp	x0, x0, [x0, #64]
    5694:	00005a0a 	udf	#23050
    5698:	0002d100 	.inst	0x0002d100 ; undefined
    569c:	027f0d00 	.inst	0x027f0d00 ; undefined
    56a0:	870d0000 	.inst	0x870d0000 ; undefined
    56a4:	00000000 	udf	#0
    56a8:	0006900c 	.inst	0x0006900c ; undefined
    56ac:	05140500 	mov	z0.b, p4/z, #40
    56b0:	00000066 	udf	#102
    56b4:	000002e8 	udf	#744
    56b8:	0002e80d 	.inst	0x0002e80d ; undefined
    56bc:	0e000f00 	.inst	0x0e000f00 ; undefined
    56c0:	0002f508 	.inst	0x0002f508 ; undefined
    56c4:	08010200 	stxrb	w1, w0, [x16]
    56c8:	0000011b 	udf	#283
    56cc:	0002ee10 	.inst	0x0002ee10 ; undefined
    56d0:	1e3a0c00 	fcsel	s0, s0, s26, eq  // eq = none
    56d4:	9c040000 	ldr	q0, d6d4 <__stack_size+0x96d4>
    56d8:	00005a0a 	udf	#23050
    56dc:	00031000 	.inst	0x00031000 ; undefined
    56e0:	027f0d00 	.inst	0x027f0d00 ; undefined
    56e4:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    56e8:	00001f97 	udf	#8087
    56ec:	5a0aab04 	.inst	0x5a0aab04 ; undefined
    56f0:	2b000000 	adds	w0, w0, w0
    56f4:	0d000003 	st1	{v3.b}[0], [x0]
    56f8:	0000027f 	udf	#639
    56fc:	0000870d 	udf	#34573
    5700:	97110000 	bl	fffffffffc445700 <_sp+0xffffffff9b405700>
    5704:	0400001e 	add	z30.b, p0/m, z30.b, z0.b
    5708:	034207b2 	.inst	0x034207b2 ; undefined
    570c:	7f0d0000 	.inst	0x7f0d0000 ; undefined
    5710:	0d000002 	st1	{v2.b}[0], [x0]
    5714:	00000087 	udf	#135
    5718:	1f6f0c00 	fnmadd	d0, d0, d15, d3
    571c:	a3040000 	.inst	0xa3040000 ; undefined
    5720:	00005a0a 	udf	#23050
    5724:	00035800 	.inst	0x00035800 ; undefined
    5728:	027f0d00 	.inst	0x027f0d00 ; undefined
    572c:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    5730:	00001f7f 	udf	#8063
    5734:	5a0a9d04 	.inst	0x5a0a9d04 ; undefined
    5738:	6e000000 	ext	v0.16b, v0.16b, v0.16b, #0
    573c:	0d000003 	st1	{v3.b}[0], [x0]
    5740:	0000027f 	udf	#639
    5744:	1efa0c00 	fcsel	h0, h0, h26, eq  // eq = none
    5748:	a7040000 	.inst	0xa7040000 ; undefined
    574c:	00005a0a 	udf	#23050
    5750:	00038400 	.inst	0x00038400 ; undefined
    5754:	027f0d00 	.inst	0x027f0d00 ; undefined
    5758:	0c000000 	st4	{v0.8b-v3.8b}, [x0]
    575c:	00001dd9 	udf	#7641
    5760:	5a0aa804 	.inst	0x5a0aa804 ; undefined
    5764:	9f000000 	.inst	0x9f000000 ; undefined
    5768:	0d000003 	st1	{v3.b}[0], [x0]
    576c:	0000027f 	udf	#639
    5770:	0000870d 	udf	#34573
    5774:	4d0c0000 	.inst	0x4d0c0000 ; undefined
    5778:	0400001e 	add	z30.b, p0/m, z30.b, z0.b
    577c:	005a0a9b 	.inst	0x005a0a9b ; undefined
    5780:	03b50000 	.inst	0x03b50000 ; undefined
    5784:	7f0d0000 	.inst	0x7f0d0000 ; undefined
    5788:	00000002 	udf	#2
    578c:	001e6d0c 	.inst	0x001e6d0c ; undefined
    5790:	0bae0400 	.inst	0x0bae0400 ; undefined
    5794:	00000087 	udf	#135
    5798:	000003cb 	udf	#971
    579c:	00027f0d 	.inst	0x00027f0d ; undefined
    57a0:	c00c0000 	.inst	0xc00c0000 ; undefined
    57a4:	0400001e 	add	z30.b, p0/m, z30.b, z0.b
    57a8:	00870bb0 	.inst	0x00870bb0 ; undefined
    57ac:	03e10000 	.inst	0x03e10000 ; undefined
    57b0:	7f0d0000 	.inst	0x7f0d0000 ; undefined
    57b4:	00000002 	udf	#2
    57b8:	001f160c 	.inst	0x001f160c ; undefined
    57bc:	0baf0400 	.inst	0x0baf0400 ; undefined
    57c0:	00000087 	udf	#135
    57c4:	000003f7 	udf	#1015
    57c8:	00027f0d 	.inst	0x00027f0d ; undefined
    57cc:	360c0000 	tbz	w0, #1, ffffffffffffd7cc <_sp+0xffffffff9efbd7cc>
    57d0:	0400001f 	add	z31.b, p0/m, z31.b, z0.b
    57d4:	005a0aad 	.inst	0x005a0aad ; undefined
    57d8:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
    57dc:	7f0d0000 	.inst	0x7f0d0000 ; undefined
    57e0:	0d000002 	st1	{v2.b}[0], [x0]
    57e4:	00000087 	udf	#135
    57e8:	20351200 	.inst	0x20351200 ; undefined
    57ec:	6b010000 	subs	w0, w0, w1
    57f0:	00006605 	udf	#26117
    57f4:	003dbc00 	.inst	0x003dbc00 ; NYI
    57f8:	00000061 	udf	#97
    57fc:	00064c00 	.inst	0x00064c00 ; undefined
    5800:	00000000 	udf	#0
    5804:	719c0100 	.inst	0x719c0100 ; undefined
    5808:	13000004 	sbfx	w4, w0, #0, #1
    580c:	70010069 	adr	x9, 781b <__stack_size+0x381b>
    5810:	0000740e 	udf	#29710
    5814:	7e910200 	.inst	0x7e910200 ; undefined
    5818:	00206914 	.inst	0x00206914 ; NYI
    581c:	0e720100 	saddl	v0.4s, v8.4h, v18.4h
    5820:	00000471 	udf	#1137
    5824:	77f89103 	.inst	0x77f89103 ; undefined
    5828:	00207214 	.inst	0x00207214 ; NYI
    582c:	0e730100 	saddl	v0.4s, v8.4h, v19.4h
    5830:	00000471 	udf	#1137
    5834:	6ff89103 	.inst	0x6ff89103 ; undefined
    5838:	00205b14 	.inst	0x00205b14 ; NYI
    583c:	0b7f0100 	.inst	0x0b7f0100 ; undefined
    5840:	00000087 	udf	#135
    5844:	00789102 	.inst	0x00789102 ; undefined
    5848:	00008706 	udf	#34566
    584c:	00048100 	.inst	0x00048100 ; undefined
    5850:	00290700 	.inst	0x00290700 ; NYI
    5854:	00ff0000 	.inst	0x00ff0000 ; undefined
    5858:	00204c15 	.inst	0x00204c15 ; NYI
    585c:	0a380100 	bic	w0, w8, w24
    5860:	00000087 	udf	#135
    5864:	61003cd8 	.inst	0x61003cd8 ; undefined
    5868:	00000000 	udf	#0
    586c:	000000e4 	udf	#228
    5870:	00000000 	udf	#0
    5874:	04b39c01 	lsl	z1.d, z0.d, #19
    5878:	43140000 	.inst	0x43140000 ; undefined
    587c:	01000020 	.inst	0x01000020 ; undefined
    5880:	00870b3a 	.inst	0x00870b3a ; undefined
    5884:	91020000 	add	x0, x0, #0x80
    5888:	7b16007c 	.inst	0x7b16007c ; undefined
    588c:	01000020 	.inst	0x01000020 ; undefined
    5890:	00870a20 	.inst	0x00870a20 ; undefined
    5894:	3c2c0000 	.inst	0x3c2c0000 ; undefined
    5898:	00006100 	udf	#24832
    589c:	00ac0000 	.inst	0x00ac0000 ; undefined
    58a0:	00000000 	udf	#0
    58a4:	9c010000 	ldr	q0, 78a4 <__stack_size+0x38a4>
    58a8:	00206414 	.inst	0x00206414 ; NYI
    58ac:	0b270100 	add	w0, w8, w7, uxtb
    58b0:	00000087 	udf	#135
    58b4:	007c9102 	.inst	0x007c9102 ; undefined
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
{
       0:	10001101 	adr	x1, 220 <__stack_size-0x3de0>
       4:	12011117 	and	w23, w8, #0x8000000f
	panic();
       8:	1b0e030f 	madd	w15, w24, w14, w0
}
       c:	130e250e 	sbfiz	w14, w8, #18, #10
      10:	00000005 	udf	#5
      14:	10001101 	adr	x1, 234 <__stack_size-0x3dcc>
{
      18:	12011117 	and	w23, w8, #0x8000000f
      1c:	1b0e030f 	madd	w15, w24, w14, w0
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	130e250e 	sbfiz	w14, w8, #18, #10
      24:	00000005 	udf	#5
      28:	10001101 	adr	x1, 248 <__stack_size-0x3db8>
      2c:	12011117 	and	w23, w8, #0x8000000f
	return 0;
      30:	1b0e030f 	madd	w15, w24, w14, w0
}
      34:	130e250e 	sbfiz	w14, w8, #18, #10
      38:	00000005 	udf	#5
    __delay(delay_cnt);
      3c:	10001101 	adr	x1, 25c <__stack_size-0x3da4>
      40:	12011117 	and	w23, w8, #0x8000000f
}
      44:	1b0e030f 	madd	w15, w24, w14, w0
      48:	130e250e 	sbfiz	w14, w8, #18, #10
      4c:	00000005 	udf	#5
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
      50:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
      54:	030b130e 	.inst	0x030b130e ; undefined
      58:	550e1b0e 	.inst	0x550e1b0e ; undefined
      5c:	10011117 	adr	x23, 227c <__stack_size-0x1d84>
      60:	02000017 	.inst	0x02000017 ; undefined
      64:	0b0b0024 	add	w4, w1, w11
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
      68:	0e030b3e 	.inst	0x0e030b3e ; undefined
      6c:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
      70:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
      74:	0008030b 	.inst	0x0008030b ; undefined
      78:	00160400 	.inst	0x00160400 ; undefined
	return 0;
      7c:	0b3a0803 	add	w3, w0, w26, uxtb #2
}
      80:	0b390b3b 	add	w27, w25, w25, uxtb #2
      84:	00001349 	udf	#4937
	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
      88:	03003405 	.inst	0x03003405 ; undefined
      8c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
      90:	490b390b 	.inst	0x490b390b ; undefined
      94:	00180213 	.inst	0x00180213 ; undefined
      98:	002e0600 	.inst	0x002e0600 ; NYI
      9c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
      a0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
      a4:	19270b39 	.inst	0x19270b39 ; undefined
      a8:	07120111 	.inst	0x07120111 ; undefined
	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
      ac:	42961840 	.inst	0x42961840 ; undefined
      b0:	07000019 	.inst	0x07000019 ; undefined
      b4:	193f012e 	.inst	0x193f012e ; undefined
      b8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
      bc:	0b390b3b 	add	w27, w25, w25, uxtb #2
      c0:	13491927 	.inst	0x13491927 ; undefined
      c4:	07120111 	.inst	0x07120111 ; undefined
      c8:	42971840 	.inst	0x42971840 ; undefined
	return 0;
      cc:	00130119 	.inst	0x00130119 ; undefined
}
      d0:	00050800 	.inst	0x00050800 ; undefined
      d4:	0b3a0803 	add	w3, w0, w26, uxtb #2
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d8:	0b390b3b 	add	w27, w25, w25, uxtb #2
      dc:	18021349 	ldr	w9, 4344 <__stack_size+0x344>
            retval = Uart_event_modem;
      e0:	2e090000 	ext	v0.8b, v0.8b, v9.8b, #0
            break;
      e4:	3a0e0301 	adcs	w1, w24, w14
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	390b3b0b 	strb	w11, [x24, #718]
      ec:	4919270b 	.inst	0x4919270b ; undefined
      f0:	12011113 	and	w19, w8, #0x8000000f
        	retval =Uart_event_thre;
      f4:	97184007 	bl	fffffffffc610110 <_sp+0xffffffff9b5d0110>
      f8:	13011942 	sbfx	w2, w10, #1, #6
        	break;
      fc:	340a0000 	cbz	w0, 140fc <__stack_size+0x100fc>
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	3a080300 	adcs	w0, w24, w8
     104:	390b3b0b 	strb	w11, [x24, #718]
     108:	0213490b 	.inst	0x0213490b ; undefined
        	retval = Uart_event_timeout;
     10c:	0b000018 	add	w24, w0, w0
     110:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
        	break;
     114:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	19270b39 	.inst	0x19270b39 ; undefined
     11c:	07120111 	.inst	0x07120111 ; undefined
     120:	42971840 	.inst	0x42971840 ; undefined
        	retval = Received_data_available;
     124:	00130119 	.inst	0x00130119 ; undefined
     128:	00050c00 	.inst	0x00050c00 ; undefined
            break;
     12c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	0b390b3b 	add	w27, w25, w25, uxtb #2
     134:	18021349 	ldr	w9, 439c <__stack_size+0x39c>
     138:	0f0d0000 	.inst	0x0f0d0000 ; undefined
        	retval = Receiver_line_status;
     13c:	490b0b00 	.inst	0x490b0b00 ; undefined
     140:	0e000013 	tbl	v19.8b, {v0.16b}, v0.8b
            break;
     144:	00000035 	udf	#53
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	01110100 	.inst	0x01110100 ; undefined
     14c:	0b130e25 	add	w5, w17, w19, lsl #3
     150:	0e1b0e03 	dup	v3.8b, w16
        	retval = Uart_event_busy;
     154:	01111755 	.inst	0x01111755 ; undefined
     158:	00001710 	udf	#5904
            break;
     15c:	0b002402 	add	w2, w0, w0, lsl #9
            retval = 0;
     160:	030b3e0b 	.inst	0x030b3e0b ; undefined
            break;
     164:	0300000e 	.inst	0x0300000e ; undefined
    return retval;
     168:	0b0b0024 	add	w4, w1, w11
}
     16c:	08030b3e 	stxrb	w3, w30, [x25]
     170:	16040000 	b	fffffffff8100170 <_sp+0xffffffff970c0170>
     174:	3a080300 	adcs	w0, w24, w8
     178:	390b3b0b 	strb	w11, [x24, #718]
     17c:	0013490b 	.inst	0x0013490b ; undefined
     180:	00160500 	.inst	0x00160500 ; undefined
     184:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     188:	0b390b3b 	add	w27, w25, w25, uxtb #2
     18c:	00001349 	udf	#4937
     190:	49010106 	.inst	0x49010106 ; undefined
     194:	00130113 	.inst	0x00130113 ; undefined
     198:	00210700 	.inst	0x00210700 ; NYI
     19c:	0b2f1349 	add	w9, w26, w15, uxtb #4
     1a0:	0f080000 	.inst	0x0f080000 ; undefined
     1a4:	490b0b00 	.inst	0x490b0b00 ; undefined
     1a8:	09000013 	.inst	0x09000013 ; undefined
     1ac:	13010115 	sbfiz	w21, w8, #31, #1
     1b0:	180a0000 	ldr	w0, 141b0 <__stack_size+0x101b0>
     1b4:	0b000000 	add	w0, w0, w0
     1b8:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     1bc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     1c0:	13490b39 	.inst	0x13490b39 ; undefined
     1c4:	1802193f 	ldr	wzr, 44e8 <__stack_size+0x4e8>
     1c8:	2e0c0000 	ext	v0.8b, v0.8b, v12.8b, #0
     1cc:	03193f01 	.inst	0x03193f01 ; undefined
     1d0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     1d4:	490b390b 	.inst	0x490b390b ; undefined
     1d8:	01193c13 	.inst	0x01193c13 ; undefined
     1dc:	0d000013 	st1	{v19.b}[0], [x0]
     1e0:	193f012e 	.inst	0x193f012e ; undefined
     1e4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     1e8:	0b39053b 	add	w27, w9, w25, uxtb #1
     1ec:	13491927 	.inst	0x13491927 ; undefined
     1f0:	07120111 	.inst	0x07120111 ; undefined
     1f4:	42961840 	.inst	0x42961840 ; undefined
     1f8:	00130119 	.inst	0x00130119 ; undefined
     1fc:	00050e00 	.inst	0x00050e00 ; undefined
     200:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     204:	0b39053b 	add	w27, w9, w25, uxtb #1
     208:	18021349 	ldr	w9, 4470 <__stack_size+0x470>
     20c:	340f0000 	cbz	w0, 1e20c <__stack_size+0x1a20c>
     210:	3a0e0300 	adcs	w0, w24, w14
     214:	39053b0b 	strb	w11, [x24, #334]
     218:	0213490b 	.inst	0x0213490b ; undefined
     21c:	10000018 	adr	x24, 21c <__stack_size-0x3de4>
     220:	08030034 	stxrb	w3, w20, [x1]
     224:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     228:	13490b39 	.inst	0x13490b39 ; undefined
     22c:	00001802 	udf	#6146
     230:	11010b11 	add	w17, w24, #0x42
     234:	00071201 	.inst	0x00071201 ; undefined
     238:	000f1200 	.inst	0x000f1200 ; undefined
     23c:	00000b0b 	udf	#2827
     240:	3f002e13 	.inst	0x3f002e13 ; undefined
     244:	3a0e0319 	adcs	w25, w24, w14
     248:	39053b0b 	strb	w11, [x24, #334]
     24c:	1119270b 	add	w11, w24, #0x649
     250:	40071201 	.inst	0x40071201 ; undefined
     254:	19429718 	.inst	0x19429718 ; undefined
     258:	2e140000 	ext	v0.8b, v0.8b, v20.8b, #0
     25c:	03193f01 	.inst	0x03193f01 ; undefined
     260:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     264:	270b3905 	.inst	0x270b3905 ; undefined
     268:	12011119 	and	w25, w8, #0x8000000f
     26c:	96184007 	bl	fffffffff8610288 <_sp+0xffffffff975d0288>
     270:	13011942 	sbfx	w2, w10, #1, #6
     274:	2e150000 	ext	v0.8b, v0.8b, v21.8b, #0
     278:	3a0e0301 	adcs	w1, w24, w14
     27c:	39053b0b 	strb	w11, [x24, #334]
     280:	1119270b 	add	w11, w24, #0x649
     284:	40071201 	.inst	0x40071201 ; undefined
     288:	19429618 	.inst	0x19429618 ; undefined
     28c:	00001301 	udf	#4865
     290:	03000516 	.inst	0x03000516 ; undefined
     294:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     298:	490b3905 	.inst	0x490b3905 ; undefined
     29c:	00180213 	.inst	0x00180213 ; undefined
     2a0:	002e1700 	.inst	0x002e1700 ; NYI
     2a4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     2a8:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     2ac:	19270b39 	.inst	0x19270b39 ; undefined
     2b0:	07120111 	.inst	0x07120111 ; undefined
     2b4:	42961840 	.inst	0x42961840 ; undefined
     2b8:	18000019 	ldr	w25, 2b8 <__stack_size-0x3d48>
     2bc:	08030034 	stxrb	w3, w20, [x1]
     2c0:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     2c4:	13490b39 	.inst	0x13490b39 ; undefined
     2c8:	34190000 	cbz	w0, 322c8 <__stack_size+0x2e2c8>
     2cc:	3a0e0300 	adcs	w0, w24, w14
     2d0:	39053b0b 	strb	w11, [x24, #334]
     2d4:	0013490b 	.inst	0x0013490b ; undefined
     2d8:	002e1a00 	.inst	0x002e1a00 ; NYI
     2dc:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     2e0:	0b39053b 	add	w27, w9, w25, uxtb #1
     2e4:	01111927 	.inst	0x01111927 ; undefined
     2e8:	18400712 	ldr	w18, 803c8 <__stack_size+0x7c3c8>
     2ec:	00194296 	.inst	0x00194296 ; undefined
     2f0:	012e1b00 	.inst	0x012e1b00 ; undefined
     2f4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     2f8:	0b390b3b 	add	w27, w25, w25, uxtb #2
     2fc:	01111927 	.inst	0x01111927 ; undefined
     300:	18400712 	ldr	w18, 803e0 <__stack_size+0x7c3e0>
     304:	01194296 	.inst	0x01194296 ; undefined
     308:	1c000013 	ldr	s19, 308 <__stack_size-0x3cf8>
     30c:	0111010b 	.inst	0x0111010b ; undefined
     310:	13010712 	sbfx	w18, w24, #1, #1
     314:	341d0000 	cbz	w0, 3a314 <__stack_size+0x36314>
     318:	3a0e0300 	adcs	w0, w24, w14
     31c:	390b3b0b 	strb	w11, [x24, #718]
     320:	0213490b 	.inst	0x0213490b ; undefined
     324:	1e000018 	.inst	0x1e000018 ; undefined
     328:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     32c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     330:	19270b39 	.inst	0x19270b39 ; undefined
     334:	01111349 	.inst	0x01111349 ; undefined
     338:	18400712 	ldr	w18, 80418 <__stack_size+0x7c418>
     33c:	01194296 	.inst	0x01194296 ; undefined
     340:	1f000013 	fmadd	s19, s0, s0, s0
     344:	08030034 	stxrb	w3, w20, [x1]
     348:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     34c:	13490b39 	.inst	0x13490b39 ; undefined
     350:	00001802 	udf	#6146
     354:	03000520 	.inst	0x03000520 ; undefined
     358:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     35c:	490b390b 	.inst	0x490b390b ; undefined
     360:	00180213 	.inst	0x00180213 ; undefined
     364:	010b2100 	.inst	0x010b2100 ; undefined
     368:	00001755 	udf	#5973
     36c:	03003422 	.inst	0x03003422 ; undefined
     370:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     374:	490b390b 	.inst	0x490b390b ; undefined
     378:	23000013 	.inst	0x23000013 ; undefined
     37c:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     380:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     384:	19270b39 	.inst	0x19270b39 ; undefined
     388:	01111349 	.inst	0x01111349 ; undefined
     38c:	18400712 	ldr	w18, 8046c <__stack_size+0x7c46c>
     390:	01194297 	.inst	0x01194297 ; undefined
     394:	24000013 	cmphi	p3.b, p0/z, z0.b, z0.b
     398:	0e03002e 	tbl	v14.8b, {v1.16b}, v3.8b
     39c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     3a0:	19270b39 	.inst	0x19270b39 ; undefined
     3a4:	07120111 	.inst	0x07120111 ; undefined
     3a8:	42961840 	.inst	0x42961840 ; undefined
     3ac:	25000019 	cmpgt	p9.b, p0/z, z0.b, #0
     3b0:	1755010b 	b	fffffffffd5407dc <_sp+0xffffffff9c5007dc>
     3b4:	00001301 	udf	#4865
     3b8:	3f012e26 	.inst	0x3f012e26 ; undefined
     3bc:	3a0e0319 	adcs	w25, w24, w14
     3c0:	390b3b0b 	strb	w11, [x24, #718]
     3c4:	3c13490b 	.inst	0x3c13490b ; undefined
     3c8:	27000019 	.inst	0x27000019 ; undefined
     3cc:	193f012e 	.inst	0x193f012e ; undefined
     3d0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     3d4:	0b390b3b 	add	w27, w25, w25, uxtb #2
     3d8:	01111927 	.inst	0x01111927 ; undefined
     3dc:	18400712 	ldr	w18, 804bc <__stack_size+0x7c4bc>
     3e0:	01194296 	.inst	0x01194296 ; undefined
     3e4:	28000013 	stnp	w19, w0, [x0]
     3e8:	0e03002e 	tbl	v14.8b, {v1.16b}, v3.8b
     3ec:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     3f0:	19270b39 	.inst	0x19270b39 ; undefined
     3f4:	07120111 	.inst	0x07120111 ; undefined
     3f8:	42971840 	.inst	0x42971840 ; undefined
     3fc:	29000019 	stp	w25, w0, [x0]
     400:	00000035 	udf	#53
     404:	4900262a 	.inst	0x4900262a ; undefined
     408:	2b000013 	adds	w19, w0, w0
     40c:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     410:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     414:	19270b39 	.inst	0x19270b39 ; undefined
     418:	07120111 	.inst	0x07120111 ; undefined
     41c:	42971840 	.inst	0x42971840 ; undefined
     420:	00130119 	.inst	0x00130119 ; undefined
     424:	00052c00 	.inst	0x00052c00 ; undefined
     428:	0b3a0803 	add	w3, w0, w26, uxtb #2
     42c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     430:	18021349 	ldr	w9, 4698 <__stack_size+0x698>
     434:	2e2d0000 	uaddl	v0.8h, v0.8b, v13.8b
     438:	3a0e0301 	adcs	w1, w24, w14
     43c:	390b3b0b 	strb	w11, [x24, #718]
     440:	1119270b 	add	w11, w24, #0x649
     444:	40071201 	.inst	0x40071201 ; undefined
     448:	19429718 	.inst	0x19429718 ; undefined
     44c:	01000000 	.inst	0x01000000 ; undefined
     450:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     454:	0e030b13 	.inst	0x0e030b13 ; undefined
     458:	17550e1b 	b	fffffffffd543cc4 <_sp+0xffffffff9c503cc4>
     45c:	17100111 	b	fffffffffc4008a0 <_sp+0xffffffff9b3c08a0>
     460:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
     464:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     468:	000e030b 	.inst	0x000e030b ; undefined
     46c:	012e0300 	.inst	0x012e0300 ; undefined
     470:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     474:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     478:	19270b39 	.inst	0x19270b39 ; undefined
     47c:	193c1349 	.inst	0x193c1349 ; undefined
     480:	00001301 	udf	#4865
     484:	49000504 	.inst	0x49000504 ; undefined
     488:	05000013 	orr	z19.s, z19.s, #0x1
     48c:	00000018 	udf	#24
     490:	0b002406 	add	w6, w0, w0, lsl #9
     494:	030b3e0b 	.inst	0x030b3e0b ; undefined
     498:	07000008 	.inst	0x07000008 ; undefined
     49c:	0b0b000f 	add	w15, w0, w11
     4a0:	00001349 	udf	#4937
     4a4:	49002608 	.inst	0x49002608 ; undefined
     4a8:	09000013 	.inst	0x09000013 ; undefined
     4ac:	193f012e 	.inst	0x193f012e ; undefined
     4b0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     4b4:	0b390b3b 	add	w27, w25, w25, uxtb #2
     4b8:	01871927 	.inst	0x01871927 ; undefined
     4bc:	12011119 	and	w25, w8, #0x8000000f
     4c0:	96184007 	bl	fffffffff86104dc <_sp+0xffffffff975d04dc>
     4c4:	13011942 	sbfx	w2, w10, #1, #6
     4c8:	050a0000 	.inst	0x050a0000 ; undefined
     4cc:	3a0e0300 	adcs	w0, w24, w14
     4d0:	390b3b0b 	strb	w11, [x24, #718]
     4d4:	0213490b 	.inst	0x0213490b ; undefined
     4d8:	00000018 	udf	#24
     4dc:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     4e0:	030b130e 	.inst	0x030b130e ; undefined
     4e4:	550e1b0e 	.inst	0x550e1b0e ; undefined
     4e8:	10011117 	adr	x23, 2708 <__stack_size-0x18f8>
     4ec:	02000017 	.inst	0x02000017 ; undefined
     4f0:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     4f4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     4f8:	13490b39 	.inst	0x13490b39 ; undefined
     4fc:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
     500:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     504:	000e030b 	.inst	0x000e030b ; undefined
     508:	00240400 	.inst	0x00240400 ; NYI
     50c:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     510:	00000803 	udf	#2051
     514:	3f012e05 	.inst	0x3f012e05 ; undefined
     518:	3a0e0319 	adcs	w25, w24, w14
     51c:	390b3b0b 	strb	w11, [x24, #718]
     520:	4919270b 	.inst	0x4919270b ; undefined
     524:	12011113 	and	w19, w8, #0x8000000f
     528:	97184007 	bl	fffffffffc610544 <_sp+0xffffffff9b5d0544>
     52c:	13011942 	sbfx	w2, w10, #1, #6
     530:	05060000 	.inst	0x05060000 ; undefined
     534:	3a080300 	adcs	w0, w24, w8
     538:	390b3b0b 	strb	w11, [x24, #718]
     53c:	0213490b 	.inst	0x0213490b ; undefined
     540:	07000018 	.inst	0x07000018 ; undefined
     544:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     548:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     54c:	13490b39 	.inst	0x13490b39 ; undefined
     550:	00001802 	udf	#6146
     554:	03003408 	.inst	0x03003408 ; undefined
     558:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     55c:	490b390b 	.inst	0x490b390b ; undefined
     560:	00180213 	.inst	0x00180213 ; undefined
     564:	00340900 	.inst	0x00340900 ; NYI
     568:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     56c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     570:	18021349 	ldr	w9, 47d8 <__stack_size+0x7d8>
     574:	0f0a0000 	.inst	0x0f0a0000 ; undefined
     578:	000b0b00 	.inst	0x000b0b00 ; undefined
     57c:	000f0b00 	.inst	0x000f0b00 ; undefined
     580:	13490b0b 	.inst	0x13490b0b ; undefined
     584:	01000000 	.inst	0x01000000 ; undefined
     588:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     58c:	0e030b13 	.inst	0x0e030b13 ; undefined
     590:	17550e1b 	b	fffffffffd543dfc <_sp+0xffffffff9c503dfc>
     594:	17100111 	b	fffffffffc4009d8 <_sp+0xffffffff9b3c09d8>
     598:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
     59c:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     5a0:	000e030b 	.inst	0x000e030b ; undefined
     5a4:	00240300 	.inst	0x00240300 ; NYI
     5a8:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     5ac:	00000803 	udf	#2051
     5b0:	03001604 	.inst	0x03001604 ; undefined
     5b4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     5b8:	490b390b 	.inst	0x490b390b ; undefined
     5bc:	05000013 	orr	z19.s, z19.s, #0x1
     5c0:	193f012e 	.inst	0x193f012e ; undefined
     5c4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     5c8:	0b390b3b 	add	w27, w25, w25, uxtb #2
     5cc:	13491927 	.inst	0x13491927 ; undefined
     5d0:	1301193c 	sbfx	w28, w9, #1, #6
     5d4:	05060000 	.inst	0x05060000 ; undefined
     5d8:	00134900 	.inst	0x00134900 ; undefined
     5dc:	012e0700 	.inst	0x012e0700 ; undefined
     5e0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     5e4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     5e8:	19270b39 	.inst	0x19270b39 ; undefined
     5ec:	3c190187 	stur	b7, [x12, #-112]
     5f0:	00130119 	.inst	0x00130119 ; undefined
     5f4:	000f0800 	.inst	0x000f0800 ; undefined
     5f8:	13490b0b 	.inst	0x13490b0b ; undefined
     5fc:	26090000 	.inst	0x26090000 ; undefined
     600:	00134900 	.inst	0x00134900 ; undefined
     604:	012e0a00 	.inst	0x012e0a00 ; undefined
     608:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     60c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     610:	19270b39 	.inst	0x19270b39 ; undefined
     614:	01111349 	.inst	0x01111349 ; undefined
     618:	18400712 	ldr	w18, 806f8 <__stack_size+0x7c6f8>
     61c:	01194296 	.inst	0x01194296 ; undefined
     620:	0b000013 	add	w19, w0, w0
     624:	08030005 	stxrb	w3, w5, [x0]
     628:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     62c:	13490b39 	.inst	0x13490b39 ; undefined
     630:	00001802 	udf	#6146
     634:	0000180c 	udf	#6156
     638:	00340d00 	.inst	0x00340d00 ; NYI
     63c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     640:	0b390b3b 	add	w27, w25, w25, uxtb #2
     644:	18021349 	ldr	w9, 48ac <__stack_size+0x8ac>
     648:	340e0000 	cbz	w0, 1c648 <__stack_size+0x18648>
     64c:	3a080300 	adcs	w0, w24, w8
     650:	390b3b0b 	strb	w11, [x24, #718]
     654:	0213490b 	.inst	0x0213490b ; undefined
     658:	0f000018 	.inst	0x0f000018 ; undefined
     65c:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
     660:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
     664:	13010b3b 	sbfx	w27, w25, #1, #2
     668:	0d100000 	.inst	0x0d100000 ; undefined
     66c:	490e0300 	.inst	0x490e0300 ; undefined
     670:	340b3813 	cbz	w19, 16d70 <__stack_size+0x12d70>
     674:	11000019 	add	w25, w0, #0x0
     678:	0b0b000f 	add	w15, w0, w11
     67c:	05120000 	mov	z0.b, p2/z, #0
     680:	3a0e0300 	adcs	w0, w24, w14
     684:	390b3b0b 	strb	w11, [x24, #718]
     688:	0213490b 	.inst	0x0213490b ; undefined
     68c:	13000018 	sbfx	w24, w0, #0, #1
     690:	0e03000a 	tbl	v10.8b, {v0.16b}, v3.8b
     694:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     698:	01110b39 	.inst	0x01110b39 ; undefined
     69c:	0b140000 	add	w0, w0, w20
     6a0:	12011101 	and	w1, w8, #0x8000000f
     6a4:	15000007 	b	40006c0 <__stack_size+0x3ffc6c0>
     6a8:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     6ac:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     6b0:	19270b39 	.inst	0x19270b39 ; undefined
     6b4:	01111349 	.inst	0x01111349 ; undefined
     6b8:	18400712 	ldr	w18, 80798 <__stack_size+0x7c798>
     6bc:	01194296 	.inst	0x01194296 ; undefined
     6c0:	16000013 	b	fffffffff800070c <_sp+0xffffffff96fc070c>
     6c4:	13490101 	.inst	0x13490101 ; undefined
     6c8:	00001301 	udf	#4865
     6cc:	49002117 	.inst	0x49002117 ; undefined
     6d0:	000b2f13 	.inst	0x000b2f13 ; undefined
     6d4:	012e1800 	.inst	0x012e1800 ; undefined
     6d8:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     6dc:	0b390b3b 	add	w27, w25, w25, uxtb #2
     6e0:	13491927 	.inst	0x13491927 ; undefined
     6e4:	07120111 	.inst	0x07120111 ; undefined
     6e8:	42961840 	.inst	0x42961840 ; undefined
     6ec:	00000019 	udf	#25
     6f0:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     6f4:	030b130e 	.inst	0x030b130e ; undefined
     6f8:	550e1b0e 	.inst	0x550e1b0e ; undefined
     6fc:	10011117 	adr	x23, 291c <__stack_size-0x16e4>
     700:	02000017 	.inst	0x02000017 ; undefined
     704:	0b0b0024 	add	w4, w1, w11
     708:	0e030b3e 	.inst	0x0e030b3e ; undefined
     70c:	16030000 	b	fffffffff80c070c <_sp+0xffffffff9708070c>
     710:	3a0e0300 	adcs	w0, w24, w14
     714:	390b3b0b 	strb	w11, [x24, #718]
     718:	0013490b 	.inst	0x0013490b ; undefined
     71c:	00240400 	.inst	0x00240400 ; NYI
     720:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     724:	00000803 	udf	#2051
     728:	49003505 	.inst	0x49003505 ; undefined
     72c:	06000013 	.inst	0x06000013 ; undefined
     730:	0b0b0113 	add	w19, w8, w11
     734:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     738:	13010b39 	sbfx	w25, w25, #1, #2
     73c:	0d070000 	.inst	0x0d070000 ; undefined
     740:	3a0e0300 	adcs	w0, w24, w14
     744:	39053b0b 	strb	w11, [x24, #334]
     748:	3813490b 	sttrb	w11, [x8, #-204]
     74c:	0800000b 	stxrb	w0, w11, [x0]
     750:	0803000d 	stxrb	w3, w13, [x0]
     754:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     758:	13490b39 	.inst	0x13490b39 ; undefined
     75c:	00000b38 	udf	#2872
     760:	49010109 	.inst	0x49010109 ; undefined
     764:	00130113 	.inst	0x00130113 ; undefined
     768:	00210a00 	.inst	0x00210a00 ; NYI
     76c:	0b2f1349 	add	w9, w26, w15, uxtb #4
     770:	160b0000 	b	fffffffff82c0770 <_sp+0xffffffff97280770>
     774:	3a0e0300 	adcs	w0, w24, w14
     778:	39053b0b 	strb	w11, [x24, #334]
     77c:	0013490b 	.inst	0x0013490b ; undefined
     780:	012e0c00 	.inst	0x012e0c00 ; undefined
     784:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     788:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     78c:	19270b39 	.inst	0x19270b39 ; undefined
     790:	193c1349 	.inst	0x193c1349 ; undefined
     794:	00001301 	udf	#4865
     798:	4900050d 	.inst	0x4900050d ; undefined
     79c:	0e000013 	tbl	v19.8b, {v0.16b}, v0.8b
     7a0:	0b0b000f 	add	w15, w0, w11
     7a4:	00001349 	udf	#4937
     7a8:	3f012e0f 	.inst	0x3f012e0f ; undefined
     7ac:	3a0e0319 	adcs	w25, w24, w14
     7b0:	390b3b0b 	strb	w11, [x24, #718]
     7b4:	4919270b 	.inst	0x4919270b ; undefined
     7b8:	12011113 	and	w19, w8, #0x8000000f
     7bc:	96184007 	bl	fffffffff86107d8 <_sp+0xffffffff975d07d8>
     7c0:	00001942 	udf	#6466
     7c4:	03000510 	.inst	0x03000510 ; undefined
     7c8:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
     7cc:	490b390b 	.inst	0x490b390b ; undefined
     7d0:	00180213 	.inst	0x00180213 ; undefined
     7d4:	11010000 	add	w0, w0, #0x40
     7d8:	130e2501 	sbfiz	w1, w8, #18, #10
     7dc:	1b0e030b 	madd	w11, w24, w14, w0
     7e0:	1117550e 	add	w14, w8, #0x5d5
     7e4:	00171001 	.inst	0x00171001 ; undefined
     7e8:	00240200 	.inst	0x00240200 ; NYI
     7ec:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     7f0:	00000e03 	udf	#3587
     7f4:	0b002403 	add	w3, w0, w0, lsl #9
     7f8:	030b3e0b 	.inst	0x030b3e0b ; undefined
     7fc:	04000008 	add	z8.b, p0/m, z8.b, z0.b
     800:	08030016 	stxrb	w3, w22, [x0]
     804:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     808:	13490b39 	.inst	0x13490b39 ; undefined
     80c:	16050000 	b	fffffffff814080c <_sp+0xffffffff9710080c>
     810:	3a0e0300 	adcs	w0, w24, w14
     814:	390b3b0b 	strb	w11, [x24, #718]
     818:	0013490b 	.inst	0x0013490b ; undefined
     81c:	012e0600 	.inst	0x012e0600 ; undefined
     820:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     824:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     828:	19270b39 	.inst	0x19270b39 ; undefined
     82c:	07120111 	.inst	0x07120111 ; undefined
     830:	42961840 	.inst	0x42961840 ; undefined
     834:	00130119 	.inst	0x00130119 ; undefined
     838:	00050700 	.inst	0x00050700 ; undefined
     83c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     840:	0b390b3b 	add	w27, w25, w25, uxtb #2
     844:	18021349 	ldr	w9, 4aac <__stack_size+0xaac>
     848:	34080000 	cbz	w0, 10848 <__stack_size+0xc848>
     84c:	3a0e0300 	adcs	w0, w24, w14
     850:	390b3b0b 	strb	w11, [x24, #718]
     854:	0213490b 	.inst	0x0213490b ; undefined
     858:	09000018 	.inst	0x09000018 ; undefined
     85c:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     860:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     864:	19270b39 	.inst	0x19270b39 ; undefined
     868:	01111349 	.inst	0x01111349 ; undefined
     86c:	18400712 	ldr	w18, 8094c <__stack_size+0x7c94c>
     870:	01194297 	.inst	0x01194297 ; undefined
     874:	0a000013 	and	w19, w0, w0
     878:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
     87c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     880:	19270b39 	.inst	0x19270b39 ; undefined
     884:	07120111 	.inst	0x07120111 ; undefined
     888:	42971840 	.inst	0x42971840 ; undefined
     88c:	0b000019 	add	w25, w0, w0
     890:	0111010b 	.inst	0x0111010b ; undefined
     894:	13010712 	sbfx	w18, w24, #1, #1
     898:	0b0c0000 	add	w0, w0, w12
     89c:	12011101 	and	w1, w8, #0x8000000f
     8a0:	00000007 	udf	#7
     8a4:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     8a8:	030b130e 	.inst	0x030b130e ; undefined
     8ac:	550e1b0e 	.inst	0x550e1b0e ; undefined
     8b0:	10011117 	adr	x23, 2ad0 <__stack_size-0x1530>
     8b4:	02000017 	.inst	0x02000017 ; undefined
     8b8:	0e030113 	tbl	v19.8b, {v8.16b}, v3.8b
     8bc:	0b3a050b 	add	w11, w8, w26, uxtb #1
     8c0:	0b390b3b 	add	w27, w25, w25, uxtb #2
     8c4:	00001301 	udf	#4865
     8c8:	03000d03 	.inst	0x03000d03 ; undefined
     8cc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     8d0:	490b390b 	.inst	0x490b390b ; undefined
     8d4:	000b3813 	.inst	0x000b3813 ; undefined
     8d8:	000d0400 	.inst	0x000d0400 ; undefined
     8dc:	0b3a0803 	add	w3, w0, w26, uxtb #2
     8e0:	0b390b3b 	add	w27, w25, w25, uxtb #2
     8e4:	0b381349 	add	w9, w26, w24, uxtb #4
     8e8:	0d050000 	.inst	0x0d050000 ; undefined
     8ec:	3a080300 	adcs	w0, w24, w8
     8f0:	390b3b0b 	strb	w11, [x24, #718]
     8f4:	3813490b 	sttrb	w11, [x8, #-204]
     8f8:	06000005 	.inst	0x06000005 ; undefined
     8fc:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     900:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     904:	13490b39 	.inst	0x13490b39 ; undefined
     908:	00000538 	udf	#1336
     90c:	49010107 	.inst	0x49010107 ; undefined
     910:	00130113 	.inst	0x00130113 ; undefined
     914:	00210800 	.inst	0x00210800 ; NYI
     918:	0b2f1349 	add	w9, w26, w15, uxtb #4
     91c:	24090000 	cmphs	p0.b, p0/z, z0.b, z9.b
     920:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     924:	000e030b 	.inst	0x000e030b ; undefined
     928:	012e0a00 	.inst	0x012e0a00 ; undefined
     92c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     930:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     934:	19270b39 	.inst	0x19270b39 ; undefined
     938:	07120111 	.inst	0x07120111 ; undefined
     93c:	42961840 	.inst	0x42961840 ; undefined
     940:	00130119 	.inst	0x00130119 ; undefined
     944:	00050b00 	.inst	0x00050b00 ; undefined
     948:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     94c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     950:	18021349 	ldr	w9, 4bb8 <__stack_size+0xbb8>
     954:	050c0000 	.inst	0x050c0000 ; undefined
     958:	3a080300 	adcs	w0, w24, w8
     95c:	390b3b0b 	strb	w11, [x24, #718]
     960:	0213490b 	.inst	0x0213490b ; undefined
     964:	0d000018 	st1	{v24.b}[0], [x0]
     968:	0b0b000f 	add	w15, w0, w11
     96c:	00001349 	udf	#4937
     970:	3f002e0e 	.inst	0x3f002e0e ; undefined
     974:	3a0e0319 	adcs	w25, w24, w14
     978:	390b3b0b 	strb	w11, [x24, #718]
     97c:	1201110b 	and	w11, w8, #0x8000000f
     980:	96184007 	bl	fffffffff861099c <_sp+0xffffffff975d099c>
     984:	00001942 	udf	#6466
     988:	03002e0f 	.inst	0x03002e0f ; undefined
     98c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     990:	270b390b 	.inst	0x270b390b ; undefined
     994:	12011119 	and	w25, w8, #0x8000000f
     998:	97184007 	bl	fffffffffc6109b4 <_sp+0xffffffff9b5d09b4>
     99c:	00001942 	udf	#6466
     9a0:	01110100 	.inst	0x01110100 ; undefined
     9a4:	0b130e25 	add	w5, w17, w19, lsl #3
     9a8:	0e1b0e03 	dup	v3.8b, w16
     9ac:	01111755 	.inst	0x01111755 ; undefined
     9b0:	00001710 	udf	#5904
     9b4:	0b002402 	add	w2, w0, w0, lsl #9
     9b8:	030b3e0b 	.inst	0x030b3e0b ; undefined
     9bc:	0300000e 	.inst	0x0300000e ; undefined
     9c0:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     9c4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     9c8:	13490b39 	.inst	0x13490b39 ; undefined
     9cc:	24040000 	cmphs	p0.b, p0/z, z0.b, z4.b
     9d0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     9d4:	0008030b 	.inst	0x0008030b ; undefined
     9d8:	00350500 	.inst	0x00350500 ; NYI
     9dc:	00001349 	udf	#4937
     9e0:	03010406 	.inst	0x03010406 ; undefined
     9e4:	0b0b3e0e 	add	w14, w16, w11, lsl #15
     9e8:	3a13490b 	.inst	0x3a13490b ; undefined
     9ec:	390b3b0b 	strb	w11, [x24, #718]
     9f0:	0013010b 	.inst	0x0013010b ; undefined
     9f4:	00280700 	.inst	0x00280700 ; NYI
     9f8:	0b1c0e03 	add	w3, w16, w28, lsl #3
     9fc:	34080000 	cbz	w0, 109fc <__stack_size+0xc9fc>
     a00:	3a0e0300 	adcs	w0, w24, w14
     a04:	390b3b0b 	strb	w11, [x24, #718]
     a08:	3f13490b 	.inst	0x3f13490b ; undefined
     a0c:	00193c19 	.inst	0x00193c19 ; undefined
     a10:	01130900 	.inst	0x01130900 ; undefined
     a14:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
     a18:	0b39053b 	add	w27, w9, w25, uxtb #1
     a1c:	00001301 	udf	#4865
     a20:	03000d0a 	.inst	0x03000d0a ; undefined
     a24:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     a28:	490b3905 	.inst	0x490b3905 ; undefined
     a2c:	000b3813 	.inst	0x000b3813 ; undefined
     a30:	000d0b00 	.inst	0x000d0b00 ; undefined
     a34:	0b3a0803 	add	w3, w0, w26, uxtb #2
     a38:	0b39053b 	add	w27, w9, w25, uxtb #1
     a3c:	0b381349 	add	w9, w26, w24, uxtb #4
     a40:	010c0000 	.inst	0x010c0000 ; undefined
     a44:	01134901 	.inst	0x01134901 ; undefined
     a48:	0d000013 	st1	{v19.b}[0], [x0]
     a4c:	13490021 	.inst	0x13490021 ; undefined
     a50:	00000b2f 	udf	#2863
     a54:	0300160e 	.inst	0x0300160e ; undefined
     a58:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     a5c:	490b3905 	.inst	0x490b3905 ; undefined
     a60:	0f000013 	.inst	0x0f000013 ; undefined
     a64:	0e030104 	tbl	v4.8b, {v8.16b}, v3.8b
     a68:	0b0b0b3e 	add	w30, w25, w11, lsl #2
     a6c:	0b3a1349 	add	w9, w26, w26, uxtb #4
     a70:	0b39053b 	add	w27, w9, w25, uxtb #1
     a74:	00001301 	udf	#4865
     a78:	47003410 	.inst	0x47003410 ; undefined
     a7c:	3b0b3a13 	.inst	0x3b0b3a13 ; undefined
     a80:	020b390b 	.inst	0x020b390b ; undefined
     a84:	11000018 	add	w24, w0, #0x0
     a88:	193f012e 	.inst	0x193f012e ; undefined
     a8c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     a90:	0b390b3b 	add	w27, w25, w25, uxtb #2
     a94:	193c1349 	.inst	0x193c1349 ; undefined
     a98:	00001301 	udf	#4865
     a9c:	00001812 	udf	#6162
     aa0:	012e1300 	.inst	0x012e1300 ; undefined
     aa4:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     aa8:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     aac:	19270b39 	.inst	0x19270b39 ; undefined
     ab0:	193c1349 	.inst	0x193c1349 ; undefined
     ab4:	00001301 	udf	#4865
     ab8:	49000514 	.inst	0x49000514 ; undefined
     abc:	15000013 	b	4000b08 <__stack_size+0x3ffcb08>
     ac0:	0b0b000f 	add	w15, w0, w11
     ac4:	00001349 	udf	#4937
     ac8:	3f002e16 	.inst	0x3f002e16 ; undefined
     acc:	3a0e0319 	adcs	w25, w24, w14
     ad0:	390b3b0b 	strb	w11, [x24, #718]
     ad4:	3c19270b 	str	b11, [x24], #-110
     ad8:	17000019 	b	fffffffffc000b3c <_sp+0xffffffff9afc0b3c>
     adc:	193f012e 	.inst	0x193f012e ; undefined
     ae0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     ae4:	0b390b3b 	add	w27, w25, w25, uxtb #2
     ae8:	13491927 	.inst	0x13491927 ; undefined
     aec:	1301193c 	sbfx	w28, w9, #1, #6
     af0:	26180000 	.inst	0x26180000 ; undefined
     af4:	00134900 	.inst	0x00134900 ; undefined
     af8:	012e1900 	.inst	0x012e1900 ; undefined
     afc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     b00:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b04:	19270b39 	.inst	0x19270b39 ; undefined
     b08:	07120111 	.inst	0x07120111 ; undefined
     b0c:	42961840 	.inst	0x42961840 ; undefined
     b10:	00130119 	.inst	0x00130119 ; undefined
     b14:	012e1a00 	.inst	0x012e1a00 ; undefined
     b18:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     b1c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b20:	13490b39 	.inst	0x13490b39 ; undefined
     b24:	0000193c 	udf	#6460
     b28:	3f012e1b 	.inst	0x3f012e1b ; undefined
     b2c:	3a0e0319 	adcs	w25, w24, w14
     b30:	390b3b0b 	strb	w11, [x24, #718]
     b34:	4919270b 	.inst	0x4919270b ; undefined
     b38:	12011113 	and	w19, w8, #0x8000000f
     b3c:	96184007 	bl	fffffffff8610b58 <_sp+0xffffffff975d0b58>
     b40:	13011942 	sbfx	w2, w10, #1, #6
     b44:	051c0000 	mov	z0.b, p12/z, #0
     b48:	3a0e0300 	adcs	w0, w24, w14
     b4c:	390b3b0b 	strb	w11, [x24, #718]
     b50:	0213490b 	.inst	0x0213490b ; undefined
     b54:	1d000018 	.inst	0x1d000018 ; undefined
     b58:	08030005 	stxrb	w3, w5, [x0]
     b5c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b60:	13490b39 	.inst	0x13490b39 ; undefined
     b64:	00001802 	udf	#6146
     b68:	0b000f1e 	add	w30, w24, w0, lsl #3
     b6c:	1f00000b 	fmadd	s11, s0, s0, s0
     b70:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
     b74:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     b78:	13490b39 	.inst	0x13490b39 ; undefined
     b7c:	00001802 	udf	#6146
     b80:	3f002e20 	.inst	0x3f002e20 ; undefined
     b84:	3a0e0319 	adcs	w25, w24, w14
     b88:	390b3b0b 	strb	w11, [x24, #718]
     b8c:	1119270b 	add	w11, w24, #0x649
     b90:	40071201 	.inst	0x40071201 ; undefined
     b94:	19429718 	.inst	0x19429718 ; undefined
     b98:	01000000 	.inst	0x01000000 ; undefined
     b9c:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
     ba0:	0e030b13 	.inst	0x0e030b13 ; undefined
     ba4:	17550e1b 	b	fffffffffd544410 <_sp+0xffffffff9c504410>
     ba8:	17100111 	b	fffffffffc400fec <_sp+0xffffffff9b3c0fec>
     bac:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
     bb0:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     bb4:	000e030b 	.inst	0x000e030b ; undefined
     bb8:	00240300 	.inst	0x00240300 ; NYI
     bbc:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     bc0:	00000803 	udf	#2051
     bc4:	03001604 	.inst	0x03001604 ; undefined
     bc8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     bcc:	490b390b 	.inst	0x490b390b ; undefined
     bd0:	05000013 	orr	z19.s, z19.s, #0x1
     bd4:	13490035 	.inst	0x13490035 ; undefined
     bd8:	04060000 	.inst	0x04060000 ; undefined
     bdc:	0b0b3e01 	add	w1, w16, w11, lsl #15
     be0:	3a13490b 	.inst	0x3a13490b ; undefined
     be4:	39053b0b 	strb	w11, [x24, #334]
     be8:	0013010b 	.inst	0x0013010b ; undefined
     bec:	00280700 	.inst	0x00280700 ; NYI
     bf0:	0b1c0e03 	add	w3, w16, w28, lsl #3
     bf4:	16080000 	b	fffffffff8200bf4 <_sp+0xffffffff971c0bf4>
     bf8:	3a0e0300 	adcs	w0, w24, w14
     bfc:	39053b0b 	strb	w11, [x24, #334]
     c00:	0013490b 	.inst	0x0013490b ; undefined
     c04:	01130900 	.inst	0x01130900 ; undefined
     c08:	0b3a0b0b 	add	w11, w24, w26, uxtb #2
     c0c:	0b39053b 	add	w27, w9, w25, uxtb #1
     c10:	00001301 	udf	#4865
     c14:	03000d0a 	.inst	0x03000d0a ; undefined
     c18:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     c1c:	490b3905 	.inst	0x490b3905 ; undefined
     c20:	0d0b0b13 	.inst	0x0d0b0b13 ; undefined
     c24:	380b0c0b 	strb	w11, [x0, #176]!
     c28:	0b00000b 	add	w11, w0, w0
     c2c:	0803000d 	stxrb	w3, w13, [x0]
     c30:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     c34:	13490b39 	.inst	0x13490b39 ; undefined
     c38:	0b0d0b0b 	add	w11, w24, w13, lsl #2
     c3c:	0b380b0c 	add	w12, w24, w24, uxtb #2
     c40:	170c0000 	b	fffffffffc300c40 <_sp+0xffffffff9b2c0c40>
     c44:	3a0b0b01 	.inst	0x3a0b0b01 ; undefined
     c48:	39053b0b 	strb	w11, [x24, #334]
     c4c:	0013010b 	.inst	0x0013010b ; undefined
     c50:	000d0d00 	.inst	0x000d0d00 ; undefined
     c54:	0b3a0803 	add	w3, w0, w26, uxtb #2
     c58:	0b39053b 	add	w27, w9, w25, uxtb #1
     c5c:	00001349 	udf	#4937
     c60:	03000d0e 	.inst	0x03000d0e ; undefined
     c64:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     c68:	490b3905 	.inst	0x490b3905 ; undefined
     c6c:	0f000013 	.inst	0x0f000013 ; undefined
     c70:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
     c74:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     c78:	13490b39 	.inst	0x13490b39 ; undefined
     c7c:	00000b38 	udf	#2872
     c80:	49010110 	.inst	0x49010110 ; undefined
     c84:	00130113 	.inst	0x00130113 ; undefined
     c88:	00211100 	.inst	0x00211100 ; NYI
     c8c:	0b2f1349 	add	w9, w26, w15, uxtb #4
     c90:	04120000 	smulh	z0.b, p0/m, z0.b, z0.b
     c94:	3e0e0301 	.inst	0x3e0e0301 ; undefined
     c98:	490b0b0b 	.inst	0x490b0b0b ; undefined
     c9c:	3b0b3a13 	.inst	0x3b0b3a13 ; undefined
     ca0:	010b390b 	.inst	0x010b390b ; undefined
     ca4:	13000013 	sbfx	w19, w0, #0, #1
     ca8:	193f012e 	.inst	0x193f012e ; undefined
     cac:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     cb0:	0b39053b 	add	w27, w9, w25, uxtb #1
     cb4:	01111927 	.inst	0x01111927 ; undefined
     cb8:	18400712 	ldr	w18, 80d98 <__stack_size+0x7cd98>
     cbc:	01194297 	.inst	0x01194297 ; undefined
     cc0:	14000013 	b	d0c <__stack_size-0x32f4>
     cc4:	08030005 	stxrb	w3, w5, [x0]
     cc8:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     ccc:	13490b39 	.inst	0x13490b39 ; undefined
     cd0:	00001802 	udf	#6146
     cd4:	03000515 	.inst	0x03000515 ; undefined
     cd8:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     cdc:	490b3905 	.inst	0x490b3905 ; undefined
     ce0:	00180213 	.inst	0x00180213 ; undefined
     ce4:	000f1600 	.inst	0x000f1600 ; undefined
     ce8:	13490b0b 	.inst	0x13490b0b ; undefined
     cec:	2e170000 	ext	v0.8b, v0.8b, v23.8b, #0
     cf0:	03193f01 	.inst	0x03193f01 ; undefined
     cf4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     cf8:	270b3905 	.inst	0x270b3905 ; undefined
     cfc:	12011119 	and	w25, w8, #0x8000000f
     d00:	96184007 	bl	fffffffff8610d1c <_sp+0xffffffff975d0d1c>
     d04:	13011942 	sbfx	w2, w10, #1, #6
     d08:	34180000 	cbz	w0, 30d08 <__stack_size+0x2cd08>
     d0c:	3a0e0300 	adcs	w0, w24, w14
     d10:	39053b0b 	strb	w11, [x24, #334]
     d14:	0213490b 	.inst	0x0213490b ; undefined
     d18:	19000018 	stlurb	w24, [x0]
     d1c:	193f012e 	.inst	0x193f012e ; undefined
     d20:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     d24:	0b39053b 	add	w27, w9, w25, uxtb #1
     d28:	13491927 	.inst	0x13491927 ; undefined
     d2c:	07120111 	.inst	0x07120111 ; undefined
     d30:	42971840 	.inst	0x42971840 ; undefined
     d34:	00130119 	.inst	0x00130119 ; undefined
     d38:	012e1a00 	.inst	0x012e1a00 ; undefined
     d3c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     d40:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     d44:	19270b39 	.inst	0x19270b39 ; undefined
     d48:	07120111 	.inst	0x07120111 ; undefined
     d4c:	42971840 	.inst	0x42971840 ; undefined
     d50:	00130119 	.inst	0x00130119 ; undefined
     d54:	00051b00 	.inst	0x00051b00 ; undefined
     d58:	0b3a0803 	add	w3, w0, w26, uxtb #2
     d5c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     d60:	18021349 	ldr	w9, 4fc8 <__stack_size+0xfc8>
     d64:	051c0000 	mov	z0.b, p12/z, #0
     d68:	3a0e0300 	adcs	w0, w24, w14
     d6c:	390b3b0b 	strb	w11, [x24, #718]
     d70:	0213490b 	.inst	0x0213490b ; undefined
     d74:	1d000018 	.inst	0x1d000018 ; undefined
     d78:	193f012e 	.inst	0x193f012e ; undefined
     d7c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     d80:	0b390b3b 	add	w27, w25, w25, uxtb #2
     d84:	13491927 	.inst	0x13491927 ; undefined
     d88:	07120111 	.inst	0x07120111 ; undefined
     d8c:	42971840 	.inst	0x42971840 ; undefined
     d90:	00130119 	.inst	0x00130119 ; undefined
     d94:	00341e00 	.inst	0x00341e00 ; NYI
     d98:	0b3a0e03 	add	w3, w16, w26, uxtb #3
     d9c:	0b390b3b 	add	w27, w25, w25, uxtb #2
     da0:	18021349 	ldr	w9, 5008 <__stack_size+0x1008>
     da4:	2e1f0000 	ext	v0.8b, v0.8b, v31.8b, #0
     da8:	03193f01 	.inst	0x03193f01 ; undefined
     dac:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     db0:	270b390b 	.inst	0x270b390b ; undefined
     db4:	12011119 	and	w25, w8, #0x8000000f
     db8:	97184007 	bl	fffffffffc610dd4 <_sp+0xffffffff9b5d0dd4>
     dbc:	00001942 	udf	#6466
     dc0:	01110100 	.inst	0x01110100 ; undefined
     dc4:	0b130e25 	add	w5, w17, w19, lsl #3
     dc8:	0e1b0e03 	dup	v3.8b, w16
     dcc:	01111755 	.inst	0x01111755 ; undefined
     dd0:	00001710 	udf	#5904
     dd4:	0b002402 	add	w2, w0, w0, lsl #9
     dd8:	030b3e0b 	.inst	0x030b3e0b ; undefined
     ddc:	0300000e 	.inst	0x0300000e ; undefined
     de0:	0b0b0024 	add	w4, w1, w11
     de4:	08030b3e 	stxrb	w3, w30, [x25]
     de8:	16040000 	b	fffffffff8100de8 <_sp+0xffffffff970c0de8>
     dec:	3a0e0300 	adcs	w0, w24, w14
     df0:	390b3b0b 	strb	w11, [x24, #718]
     df4:	0013490b 	.inst	0x0013490b ; undefined
     df8:	002e0500 	.inst	0x002e0500 ; NYI
     dfc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     e00:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     e04:	19270b39 	.inst	0x19270b39 ; undefined
     e08:	07120111 	.inst	0x07120111 ; undefined
     e0c:	42971840 	.inst	0x42971840 ; undefined
     e10:	00000019 	udf	#25
     e14:	25011101 	cmpge	p1.b, p4/z, z8.b, #1
     e18:	030b130e 	.inst	0x030b130e ; undefined
     e1c:	550e1b0e 	.inst	0x550e1b0e ; undefined
     e20:	10011117 	adr	x23, 3040 <__stack_size-0xfc0>
     e24:	02000017 	.inst	0x02000017 ; undefined
     e28:	0e030016 	tbl	v22.8b, {v0.16b}, v3.8b
     e2c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     e30:	13490b39 	.inst	0x13490b39 ; undefined
     e34:	24030000 	cmphs	p0.b, p0/z, z0.b, z3.b
     e38:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
     e3c:	000e030b 	.inst	0x000e030b ; undefined
     e40:	00240400 	.inst	0x00240400 ; NYI
     e44:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
     e48:	00000803 	udf	#2051
     e4c:	49003505 	.inst	0x49003505 ; undefined
     e50:	06000013 	.inst	0x06000013 ; undefined
     e54:	0b3e0104 	add	w4, w8, w30, uxtb
     e58:	13490b0b 	.inst	0x13490b0b ; undefined
     e5c:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     e60:	13010b39 	sbfx	w25, w25, #1, #2
     e64:	28070000 	stnp	w0, w0, [x0, #56]
     e68:	1c0e0300 	ldr	s0, 1cec8 <__stack_size+0x18ec8>
     e6c:	0800000b 	stxrb	w0, w11, [x0]
     e70:	0b0b0113 	add	w19, w8, w11
     e74:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     e78:	13010b39 	sbfx	w25, w25, #1, #2
     e7c:	0d090000 	.inst	0x0d090000 ; undefined
     e80:	3a0e0300 	adcs	w0, w24, w14
     e84:	39053b0b 	strb	w11, [x24, #334]
     e88:	3813490b 	sttrb	w11, [x8, #-204]
     e8c:	0a00000b 	and	w11, w0, w0
     e90:	0803000d 	stxrb	w3, w13, [x0]
     e94:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     e98:	13490b39 	.inst	0x13490b39 ; undefined
     e9c:	00000b38 	udf	#2872
     ea0:	4901010b 	.inst	0x4901010b ; undefined
     ea4:	00130113 	.inst	0x00130113 ; undefined
     ea8:	00210c00 	.inst	0x00210c00 ; NYI
     eac:	0b2f1349 	add	w9, w26, w15, uxtb #4
     eb0:	160d0000 	b	fffffffff8340eb0 <_sp+0xffffffff97300eb0>
     eb4:	3a0e0300 	adcs	w0, w24, w14
     eb8:	39053b0b 	strb	w11, [x24, #334]
     ebc:	0013490b 	.inst	0x0013490b ; undefined
     ec0:	01040e00 	.inst	0x01040e00 ; undefined
     ec4:	0b3e0e03 	add	w3, w16, w30, uxtb #3
     ec8:	13490b0b 	.inst	0x13490b0b ; undefined
     ecc:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     ed0:	13010b39 	sbfx	w25, w25, #1, #2
     ed4:	2e0f0000 	ext	v0.8b, v0.8b, v15.8b, #0
     ed8:	03193f01 	.inst	0x03193f01 ; undefined
     edc:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     ee0:	270b390b 	.inst	0x270b390b ; undefined
     ee4:	3c134919 	.inst	0x3c134919 ; undefined
     ee8:	00130119 	.inst	0x00130119 ; undefined
     eec:	00051000 	.inst	0x00051000 ; undefined
     ef0:	00001349 	udf	#4937
     ef4:	00001811 	udf	#6161
     ef8:	000f1200 	.inst	0x000f1200 ; undefined
     efc:	13490b0b 	.inst	0x13490b0b ; undefined
     f00:	26130000 	.inst	0x26130000 ; undefined
     f04:	00134900 	.inst	0x00134900 ; undefined
     f08:	012e1400 	.inst	0x012e1400 ; undefined
     f0c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     f10:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     f14:	19270b39 	.inst	0x19270b39 ; undefined
     f18:	01111349 	.inst	0x01111349 ; undefined
     f1c:	18400712 	ldr	w18, 80ffc <__stack_size+0x7cffc>
     f20:	01194296 	.inst	0x01194296 ; undefined
     f24:	15000013 	b	4000f70 <__stack_size+0x3ffcf70>
     f28:	0e030005 	tbl	v5.8b, {v0.16b}, v3.8b
     f2c:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     f30:	13490b39 	.inst	0x13490b39 ; undefined
     f34:	00001802 	udf	#6146
     f38:	03003416 	.inst	0x03003416 ; undefined
     f3c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     f40:	490b3905 	.inst	0x490b3905 ; undefined
     f44:	00180213 	.inst	0x00180213 ; undefined
     f48:	012e1700 	.inst	0x012e1700 ; undefined
     f4c:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     f50:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     f54:	19270b39 	.inst	0x19270b39 ; undefined
     f58:	01111349 	.inst	0x01111349 ; undefined
     f5c:	18400712 	ldr	w18, 8103c <__stack_size+0x7d03c>
     f60:	01194297 	.inst	0x01194297 ; undefined
     f64:	18000013 	ldr	w19, f64 <__stack_size-0x309c>
     f68:	08030034 	stxrb	w3, w20, [x1]
     f6c:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
     f70:	13490b39 	.inst	0x13490b39 ; undefined
     f74:	00001802 	udf	#6146
     f78:	3f012e19 	.inst	0x3f012e19 ; undefined
     f7c:	3a0e0319 	adcs	w25, w24, w14
     f80:	39053b0b 	strb	w11, [x24, #334]
     f84:	1119270b 	add	w11, w24, #0x649
     f88:	40071201 	.inst	0x40071201 ; undefined
     f8c:	19429718 	.inst	0x19429718 ; undefined
     f90:	00001301 	udf	#4865
     f94:	3f012e1a 	.inst	0x3f012e1a ; undefined
     f98:	3a0e0319 	adcs	w25, w24, w14
     f9c:	39053b0b 	strb	w11, [x24, #334]
     fa0:	1119270b 	add	w11, w24, #0x649
     fa4:	40071201 	.inst	0x40071201 ; undefined
     fa8:	19429618 	.inst	0x19429618 ; undefined
     fac:	00001301 	udf	#4865
     fb0:	3f012e1b 	.inst	0x3f012e1b ; undefined
     fb4:	3a0e0319 	adcs	w25, w24, w14
     fb8:	390b3b0b 	strb	w11, [x24, #718]
     fbc:	1119270b 	add	w11, w24, #0x649
     fc0:	40071201 	.inst	0x40071201 ; undefined
     fc4:	19429718 	.inst	0x19429718 ; undefined
     fc8:	00001301 	udf	#4865
     fcc:	0300051c 	.inst	0x0300051c ; undefined
     fd0:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
     fd4:	490b390b 	.inst	0x490b390b ; undefined
     fd8:	00180213 	.inst	0x00180213 ; undefined
     fdc:	012e1d00 	.inst	0x012e1d00 ; undefined
     fe0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
     fe4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
     fe8:	19270b39 	.inst	0x19270b39 ; undefined
     fec:	01111349 	.inst	0x01111349 ; undefined
     ff0:	18400712 	ldr	w18, 810d0 <__stack_size+0x7d0d0>
     ff4:	01194296 	.inst	0x01194296 ; undefined
     ff8:	1e000013 	.inst	0x1e000013 ; undefined
     ffc:	193f012e 	.inst	0x193f012e ; undefined
    1000:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1004:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1008:	13491927 	.inst	0x13491927 ; undefined
    100c:	07120111 	.inst	0x07120111 ; undefined
    1010:	42971840 	.inst	0x42971840 ; undefined
    1014:	00130119 	.inst	0x00130119 ; undefined
    1018:	00341f00 	.inst	0x00341f00 ; NYI
    101c:	0b3a0803 	add	w3, w0, w26, uxtb #2
    1020:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1024:	18021349 	ldr	w9, 528c <__stack_size+0x128c>
    1028:	05200000 	ext	z0.b, z0.b, z0.b, #0
    102c:	3a080300 	adcs	w0, w24, w8
    1030:	390b3b0b 	strb	w11, [x24, #718]
    1034:	0213490b 	.inst	0x0213490b ; undefined
    1038:	21000018 	.inst	0x21000018 ; undefined
    103c:	0e03012e 	tbl	v14.8b, {v9.16b}, v3.8b
    1040:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1044:	19270b39 	.inst	0x19270b39 ; undefined
    1048:	01111349 	.inst	0x01111349 ; undefined
    104c:	18400712 	ldr	w18, 8112c <__stack_size+0x7d12c>
    1050:	01194297 	.inst	0x01194297 ; undefined
    1054:	22000013 	.inst	0x22000013 ; undefined
    1058:	0b0b000f 	add	w15, w0, w11
    105c:	01000000 	.inst	0x01000000 ; undefined
    1060:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    1064:	0e030b13 	.inst	0x0e030b13 ; undefined
    1068:	17550e1b 	b	fffffffffd5448d4 <_sp+0xffffffff9c5048d4>
    106c:	17100111 	b	fffffffffc4014b0 <_sp+0xffffffff9b3c14b0>
    1070:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
    1074:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1078:	000e030b 	.inst	0x000e030b ; undefined
    107c:	00160300 	.inst	0x00160300 ; undefined
    1080:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1084:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1088:	00001349 	udf	#4937
    108c:	0b002404 	add	w4, w0, w0, lsl #9
    1090:	030b3e0b 	.inst	0x030b3e0b ; undefined
    1094:	05000008 	orr	z8.s, z8.s, #0x1
    1098:	13490035 	.inst	0x13490035 ; undefined
    109c:	01060000 	.inst	0x01060000 ; undefined
    10a0:	01134901 	.inst	0x01134901 ; undefined
    10a4:	07000013 	.inst	0x07000013 ; undefined
    10a8:	13490021 	.inst	0x13490021 ; undefined
    10ac:	00000b2f 	udf	#2863
    10b0:	0b011308 	add	w8, w24, w1, lsl #4
    10b4:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
    10b8:	010b3905 	.inst	0x010b3905 ; undefined
    10bc:	09000013 	.inst	0x09000013 ; undefined
    10c0:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    10c4:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    10c8:	13490b39 	.inst	0x13490b39 ; undefined
    10cc:	00000b38 	udf	#2872
    10d0:	03000d0a 	.inst	0x03000d0a ; undefined
    10d4:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    10d8:	490b3905 	.inst	0x490b3905 ; undefined
    10dc:	000b3813 	.inst	0x000b3813 ; undefined
    10e0:	00160b00 	.inst	0x00160b00 ; undefined
    10e4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    10e8:	0b39053b 	add	w27, w9, w25, uxtb #1
    10ec:	00001349 	udf	#4937
    10f0:	3f012e0c 	.inst	0x3f012e0c ; undefined
    10f4:	3a0e0319 	adcs	w25, w24, w14
    10f8:	39053b0b 	strb	w11, [x24, #334]
    10fc:	1119270b 	add	w11, w24, #0x649
    1100:	40071201 	.inst	0x40071201 ; undefined
    1104:	19429718 	.inst	0x19429718 ; undefined
    1108:	00001301 	udf	#4865
    110c:	0300050d 	.inst	0x0300050d ; undefined
    1110:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1114:	490b3905 	.inst	0x490b3905 ; undefined
    1118:	00180213 	.inst	0x00180213 ; undefined
    111c:	000f0e00 	.inst	0x000f0e00 ; undefined
    1120:	13490b0b 	.inst	0x13490b0b ; undefined
    1124:	2e0f0000 	ext	v0.8b, v0.8b, v15.8b, #0
    1128:	03193f01 	.inst	0x03193f01 ; undefined
    112c:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1130:	270b3905 	.inst	0x270b3905 ; undefined
    1134:	11134919 	add	w25, w8, #0x4d2
    1138:	40071201 	.inst	0x40071201 ; undefined
    113c:	19429718 	.inst	0x19429718 ; undefined
    1140:	00001301 	udf	#4865
    1144:	03000510 	.inst	0x03000510 ; undefined
    1148:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    114c:	490b3905 	.inst	0x490b3905 ; undefined
    1150:	00180213 	.inst	0x00180213 ; undefined
    1154:	012e1100 	.inst	0x012e1100 ; undefined
    1158:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    115c:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1160:	19270b39 	.inst	0x19270b39 ; undefined
    1164:	01111349 	.inst	0x01111349 ; undefined
    1168:	18400712 	ldr	w18, 81248 <__stack_size+0x7d248>
    116c:	01194297 	.inst	0x01194297 ; undefined
    1170:	12000013 	and	w19, w0, #0x1
    1174:	08030005 	stxrb	w3, w5, [x0]
    1178:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    117c:	13490b39 	.inst	0x13490b39 ; undefined
    1180:	00001802 	udf	#6146
    1184:	3f012e13 	.inst	0x3f012e13 ; undefined
    1188:	3a0e0319 	adcs	w25, w24, w14
    118c:	390b3b0b 	strb	w11, [x24, #718]
    1190:	4919270b 	.inst	0x4919270b ; undefined
    1194:	12011113 	and	w19, w8, #0x8000000f
    1198:	97184007 	bl	fffffffffc6111b4 <_sp+0xffffffff9b5d11b4>
    119c:	00001942 	udf	#6466
    11a0:	01110100 	.inst	0x01110100 ; undefined
    11a4:	0b130e25 	add	w5, w17, w19, lsl #3
    11a8:	0e1b0e03 	dup	v3.8b, w16
    11ac:	01111755 	.inst	0x01111755 ; undefined
    11b0:	00001710 	udf	#5904
    11b4:	0b002402 	add	w2, w0, w0, lsl #9
    11b8:	030b3e0b 	.inst	0x030b3e0b ; undefined
    11bc:	0300000e 	.inst	0x0300000e ; undefined
    11c0:	0b0b0024 	add	w4, w1, w11
    11c4:	08030b3e 	stxrb	w3, w30, [x25]
    11c8:	16040000 	b	fffffffff81011c8 <_sp+0xffffffff970c11c8>
    11cc:	3a0e0300 	adcs	w0, w24, w14
    11d0:	390b3b0b 	strb	w11, [x24, #718]
    11d4:	0013490b 	.inst	0x0013490b ; undefined
    11d8:	00350500 	.inst	0x00350500 ; NYI
    11dc:	00001349 	udf	#4937
    11e0:	0b011306 	add	w6, w24, w1, lsl #4
    11e4:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    11e8:	010b3905 	.inst	0x010b3905 ; undefined
    11ec:	07000013 	.inst	0x07000013 ; undefined
    11f0:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    11f4:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    11f8:	13490b39 	.inst	0x13490b39 ; undefined
    11fc:	0b0d0b0b 	add	w11, w24, w13, lsl #2
    1200:	0b380b0c 	add	w12, w24, w24, uxtb #2
    1204:	16080000 	b	fffffffff8201204 <_sp+0xffffffff971c1204>
    1208:	3a0e0300 	adcs	w0, w24, w14
    120c:	39053b0b 	strb	w11, [x24, #334]
    1210:	0013490b 	.inst	0x0013490b ; undefined
    1214:	000d0900 	.inst	0x000d0900 ; undefined
    1218:	0b3a0803 	add	w3, w0, w26, uxtb #2
    121c:	0b39053b 	add	w27, w9, w25, uxtb #1
    1220:	0b0b1349 	add	w9, w26, w11, lsl #4
    1224:	0b0c0b0d 	add	w13, w24, w12, lsl #2
    1228:	00000b38 	udf	#2872
    122c:	0b01170a 	add	w10, w24, w1, lsl #5
    1230:	3b0b3a0b 	.inst	0x3b0b3a0b ; undefined
    1234:	010b3905 	.inst	0x010b3905 ; undefined
    1238:	0b000013 	add	w19, w0, w0
    123c:	0803000d 	stxrb	w3, w13, [x0]
    1240:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    1244:	13490b39 	.inst	0x13490b39 ; undefined
    1248:	0d0c0000 	.inst	0x0d0c0000 ; undefined
    124c:	3a0e0300 	adcs	w0, w24, w14
    1250:	39053b0b 	strb	w11, [x24, #334]
    1254:	0013490b 	.inst	0x0013490b ; undefined
    1258:	000d0d00 	.inst	0x000d0d00 ; undefined
    125c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1260:	0b39053b 	add	w27, w9, w25, uxtb #1
    1264:	0b381349 	add	w9, w26, w24, uxtb #4
    1268:	010e0000 	.inst	0x010e0000 ; undefined
    126c:	01134901 	.inst	0x01134901 ; undefined
    1270:	0f000013 	.inst	0x0f000013 ; undefined
    1274:	13490021 	.inst	0x13490021 ; undefined
    1278:	00000b2f 	udf	#2863
    127c:	03010410 	.inst	0x03010410 ; undefined
    1280:	0b0b3e0e 	add	w14, w16, w11, lsl #15
    1284:	3a13490b 	.inst	0x3a13490b ; undefined
    1288:	390b3b0b 	strb	w11, [x24, #718]
    128c:	0013010b 	.inst	0x0013010b ; undefined
    1290:	00281100 	.inst	0x00281100 ; NYI
    1294:	0b1c0e03 	add	w3, w16, w28, lsl #3
    1298:	34120000 	cbz	w0, 25298 <__stack_size+0x21298>
    129c:	3a0e0300 	adcs	w0, w24, w14
    12a0:	390b3b0b 	strb	w11, [x24, #718]
    12a4:	3f13490b 	.inst	0x3f13490b ; undefined
    12a8:	00180219 	.inst	0x00180219 ; undefined
    12ac:	012e1300 	.inst	0x012e1300 ; undefined
    12b0:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    12b4:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    12b8:	19270b39 	.inst	0x19270b39 ; undefined
    12bc:	193c1349 	.inst	0x193c1349 ; undefined
    12c0:	00001301 	udf	#4865
    12c4:	49000514 	.inst	0x49000514 ; undefined
    12c8:	15000013 	b	4001314 <__stack_size+0x3ffd314>
    12cc:	0b0b000f 	add	w15, w0, w11
    12d0:	00001349 	udf	#4937
    12d4:	00001816 	udf	#6166
    12d8:	00261700 	.inst	0x00261700 ; NYI
    12dc:	00001349 	udf	#4937
    12e0:	3f012e18 	.inst	0x3f012e18 ; undefined
    12e4:	3a0e0319 	adcs	w25, w24, w14
    12e8:	390b3b0b 	strb	w11, [x24, #718]
    12ec:	3c19270b 	str	b11, [x24], #-110
    12f0:	00130119 	.inst	0x00130119 ; undefined
    12f4:	012e1900 	.inst	0x012e1900 ; undefined
    12f8:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    12fc:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    1300:	19270b39 	.inst	0x19270b39 ; undefined
    1304:	01111349 	.inst	0x01111349 ; undefined
    1308:	18400712 	ldr	w18, 813e8 <__stack_size+0x7d3e8>
    130c:	01194296 	.inst	0x01194296 ; undefined
    1310:	1a000013 	adc	w19, w0, w0
    1314:	0e030034 	tbl	v20.8b, {v1.16b}, v3.8b
    1318:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    131c:	13490b39 	.inst	0x13490b39 ; undefined
    1320:	00001802 	udf	#6146
    1324:	3f012e1b 	.inst	0x3f012e1b ; undefined
    1328:	3a0e0319 	adcs	w25, w24, w14
    132c:	390b3b0b 	strb	w11, [x24, #718]
    1330:	4919270b 	.inst	0x4919270b ; undefined
    1334:	12011113 	and	w19, w8, #0x8000000f
    1338:	96184007 	bl	fffffffff8611354 <_sp+0xffffffff975d1354>
    133c:	00001942 	udf	#6466
    1340:	0300051c 	.inst	0x0300051c ; undefined
    1344:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1348:	490b390b 	.inst	0x490b390b ; undefined
    134c:	00180213 	.inst	0x00180213 ; undefined
    1350:	010b1d00 	.inst	0x010b1d00 ; undefined
    1354:	07120111 	.inst	0x07120111 ; undefined
    1358:	00001301 	udf	#4865
    135c:	0300341e 	.inst	0x0300341e ; undefined
    1360:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1364:	490b390b 	.inst	0x490b390b ; undefined
    1368:	00180213 	.inst	0x00180213 ; undefined
    136c:	010b1f00 	.inst	0x010b1f00 ; undefined
    1370:	07120111 	.inst	0x07120111 ; undefined
    1374:	01000000 	.inst	0x01000000 ; undefined
    1378:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    137c:	0e030b13 	.inst	0x0e030b13 ; undefined
    1380:	17550e1b 	b	fffffffffd544bec <_sp+0xffffffff9c504bec>
    1384:	17100111 	b	fffffffffc4017c8 <_sp+0xffffffff9b3c17c8>
    1388:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
    138c:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1390:	000e030b 	.inst	0x000e030b ; undefined
    1394:	00240300 	.inst	0x00240300 ; NYI
    1398:	0b3e0b0b 	add	w11, w24, w30, uxtb #2
    139c:	00000803 	udf	#2051
    13a0:	03001604 	.inst	0x03001604 ; undefined
    13a4:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    13a8:	490b390b 	.inst	0x490b390b ; undefined
    13ac:	05000013 	orr	z19.s, z19.s, #0x1
    13b0:	193f012e 	.inst	0x193f012e ; undefined
    13b4:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    13b8:	0b390b3b 	add	w27, w25, w25, uxtb #2
    13bc:	193c1349 	.inst	0x193c1349 ; undefined
    13c0:	00001301 	udf	#4865
    13c4:	00001806 	udf	#6150
    13c8:	012e0700 	.inst	0x012e0700 ; undefined
    13cc:	0e03193f 	uzp1	v31.8b, v9.8b, v3.8b
    13d0:	0b3b0b3a 	add	w26, w25, w27, uxtb #2
    13d4:	193c0b39 	.inst	0x193c0b39 ; undefined
    13d8:	00001301 	udf	#4865
    13dc:	3f002e08 	.inst	0x3f002e08 ; undefined
    13e0:	3a0e0319 	adcs	w25, w24, w14
    13e4:	390b3b0b 	strb	w11, [x24, #718]
    13e8:	1113490b 	add	w11, w8, #0x4d2
    13ec:	40071201 	.inst	0x40071201 ; undefined
    13f0:	19429618 	.inst	0x19429618 ; undefined
    13f4:	01000000 	.inst	0x01000000 ; undefined
    13f8:	0e250111 	saddl	v17.8h, v8.8b, v5.8b
    13fc:	0e030b13 	.inst	0x0e030b13 ; undefined
    1400:	17550e1b 	b	fffffffffd544c6c <_sp+0xffffffff9c504c6c>
    1404:	17100111 	b	fffffffffc401848 <_sp+0xffffffff9b3c1848>
    1408:	24020000 	cmphs	p0.b, p0/z, z0.b, z2.b
    140c:	3e0b0b00 	.inst	0x3e0b0b00 ; undefined
    1410:	000e030b 	.inst	0x000e030b ; undefined
    1414:	00160300 	.inst	0x00160300 ; undefined
    1418:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    141c:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1420:	00001349 	udf	#4937
    1424:	0b002404 	add	w4, w0, w0, lsl #9
    1428:	030b3e0b 	.inst	0x030b3e0b ; undefined
    142c:	05000008 	orr	z8.s, z8.s, #0x1
    1430:	13490035 	.inst	0x13490035 ; undefined
    1434:	01060000 	.inst	0x01060000 ; undefined
    1438:	01134901 	.inst	0x01134901 ; undefined
    143c:	07000013 	.inst	0x07000013 ; undefined
    1440:	13490021 	.inst	0x13490021 ; undefined
    1444:	00000b2f 	udf	#2863
    1448:	0b011308 	add	w8, w24, w1, lsl #4
    144c:	3b0b3a05 	.inst	0x3b0b3a05 ; undefined
    1450:	010b3905 	.inst	0x010b3905 ; undefined
    1454:	09000013 	.inst	0x09000013 ; undefined
    1458:	0e03000d 	tbl	v13.8b, {v0.16b}, v3.8b
    145c:	053b0b3a 	ext	z26.b, z26.b, z25.b, #218
    1460:	13490b39 	.inst	0x13490b39 ; undefined
    1464:	00000b38 	udf	#2872
    1468:	03000d0a 	.inst	0x03000d0a ; undefined
    146c:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    1470:	490b3905 	.inst	0x490b3905 ; undefined
    1474:	000b3813 	.inst	0x000b3813 ; undefined
    1478:	00160b00 	.inst	0x00160b00 ; undefined
    147c:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1480:	0b39053b 	add	w27, w9, w25, uxtb #1
    1484:	00001349 	udf	#4937
    1488:	3f012e0c 	.inst	0x3f012e0c ; undefined
    148c:	3a0e0319 	adcs	w25, w24, w14
    1490:	390b3b0b 	strb	w11, [x24, #718]
    1494:	4919270b 	.inst	0x4919270b ; undefined
    1498:	01193c13 	.inst	0x01193c13 ; undefined
    149c:	0d000013 	st1	{v19.b}[0], [x0]
    14a0:	13490005 	.inst	0x13490005 ; undefined
    14a4:	0f0e0000 	.inst	0x0f0e0000 ; undefined
    14a8:	490b0b00 	.inst	0x490b0b00 ; undefined
    14ac:	0f000013 	.inst	0x0f000013 ; undefined
    14b0:	00000018 	udf	#24
    14b4:	49002610 	.inst	0x49002610 ; undefined
    14b8:	11000013 	add	w19, w0, #0x0
    14bc:	193f012e 	.inst	0x193f012e ; undefined
    14c0:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    14c4:	0b390b3b 	add	w27, w25, w25, uxtb #2
    14c8:	193c1927 	.inst	0x193c1927 ; undefined
    14cc:	00001301 	udf	#4865
    14d0:	3f012e12 	.inst	0x3f012e12 ; undefined
    14d4:	3a0e0319 	adcs	w25, w24, w14
    14d8:	390b3b0b 	strb	w11, [x24, #718]
    14dc:	1113490b 	add	w11, w8, #0x4d2
    14e0:	40071201 	.inst	0x40071201 ; undefined
    14e4:	19429618 	.inst	0x19429618 ; undefined
    14e8:	00001301 	udf	#4865
    14ec:	03003413 	.inst	0x03003413 ; undefined
    14f0:	3b0b3a08 	.inst	0x3b0b3a08 ; undefined
    14f4:	490b390b 	.inst	0x490b390b ; undefined
    14f8:	00180213 	.inst	0x00180213 ; undefined
    14fc:	00341400 	.inst	0x00341400 ; NYI
    1500:	0b3a0e03 	add	w3, w16, w26, uxtb #3
    1504:	0b390b3b 	add	w27, w25, w25, uxtb #2
    1508:	18021349 	ldr	w9, 5770 <__stack_size+0x1770>
    150c:	2e150000 	ext	v0.8b, v0.8b, v21.8b, #0
    1510:	03193f01 	.inst	0x03193f01 ; undefined
    1514:	3b0b3a0e 	.inst	0x3b0b3a0e ; undefined
    1518:	270b390b 	.inst	0x270b390b ; undefined
    151c:	11134919 	add	w25, w8, #0x4d2
    1520:	40071201 	.inst	0x40071201 ; undefined
    1524:	19429618 	.inst	0x19429618 ; undefined
    1528:	00001301 	udf	#4865
    152c:	3f012e16 	.inst	0x3f012e16 ; undefined
    1530:	3a0e0319 	adcs	w25, w24, w14
    1534:	390b3b0b 	strb	w11, [x24, #718]
    1538:	4919270b 	.inst	0x4919270b ; undefined
    153c:	12011113 	and	w19, w8, #0x8000000f
    1540:	96184007 	bl	fffffffff861155c <_sp+0xffffffff975d155c>
    1544:	00001942 	udf	#6466
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
{
   0:	0000002c 	udf	#44
   4:	00000002 	udf	#2
	panic();
   8:	00080000 	.inst	0x00080000 ; undefined
}
   c:	00000000 	udf	#0
  10:	61000108 	.inst	0x61000108 ; undefined
  14:	00000000 	udf	#0
{
  18:	00000010 	udf	#16
	...
	return 0;
  30:	0000002c 	udf	#44
}
  34:	00270002 	.inst	0x00270002 ; NYI
  38:	00080000 	.inst	0x00080000 ; undefined
    __delay(delay_cnt);
  3c:	00000000 	udf	#0
  40:	61000118 	.inst	0x61000118 ; undefined
}
  44:	00000000 	udf	#0
  48:	00000040 	udf	#64
	...
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
  60:	0000002c 	udf	#44
  64:	004e0002 	.inst	0x004e0002 ; undefined
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
  68:	00080000 	.inst	0x00080000 ; undefined
  6c:	00000000 	udf	#0
  70:	61000000 	.inst	0x61000000 ; undefined
  74:	00000000 	udf	#0
  78:	00000108 	udf	#264
	...
	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
  90:	0000002c 	udf	#44
  94:	00760002 	.inst	0x00760002 ; undefined
  98:	00080000 	.inst	0x00080000 ; undefined
  9c:	00000000 	udf	#0
  a0:	61000800 	.inst	0x61000800 ; undefined
  a4:	00000000 	udf	#0
  a8:	00000510 	udf	#1296
	...
	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
  c0:	0000006c 	udf	#108
  c4:	009e0002 	.inst	0x009e0002 ; undefined
  c8:	00080000 	.inst	0x00080000 ; undefined
	return 0;
  cc:	00000000 	udf	#0
}
  d0:	61000d10 	.inst	0x61000d10 ; undefined
  d4:	00000000 	udf	#0
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
  d8:	00000024 	udf	#36
  dc:	00000000 	udf	#0
            retval = Uart_event_modem;
  e0:	61000d58 	.inst	0x61000d58 ; undefined
            break;
  e4:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
  e8:	00000020 	udf	#32
  ec:	00000000 	udf	#0
  f0:	61000d78 	.inst	0x61000d78 ; undefined
        	retval =Uart_event_thre;
  f4:	00000000 	udf	#0
  f8:	0000001c 	udf	#28
        	break;
  fc:	00000000 	udf	#0
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
 100:	61000d94 	.inst	0x61000d94 ; undefined
 104:	00000000 	udf	#0
 108:	00000018 	udf	#24
        	retval = Uart_event_timeout;
 10c:	00000000 	udf	#0
 110:	61000dac 	.inst	0x61000dac ; undefined
        	break;
 114:	00000000 	udf	#0
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
 118:	0000004c 	udf	#76
	...
        	printf("Overrun/parity/ framing errors or break interrupt");
 130:	0000022c 	udf	#556
 134:	02370002 	.inst	0x02370002 ; undefined
 138:	00080000 	.inst	0x00080000 ; undefined
        	retval = Receiver_line_status;
 13c:	00000000 	udf	#0
 140:	61000df8 	.inst	0x61000df8 ; undefined
            break;
 144:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
 148:	00000028 	udf	#40
 14c:	00000000 	udf	#0
 150:	61000e20 	.inst	0x61000e20 ; undefined
        	retval = Uart_event_busy;
 154:	00000000 	udf	#0
 158:	00000024 	udf	#36
            break;
 15c:	00000000 	udf	#0
            retval = 0;
 160:	61000e44 	.inst	0x61000e44 ; undefined
            break;
 164:	00000000 	udf	#0
    return retval;
 168:	00000028 	udf	#40
	...
 178:	00000018 	udf	#24
 17c:	00000000 	udf	#0
 180:	61000e6c 	.inst	0x61000e6c ; undefined
 184:	00000000 	udf	#0
 188:	00000028 	udf	#40
 18c:	00000000 	udf	#0
 190:	61000e94 	.inst	0x61000e94 ; undefined
 194:	00000000 	udf	#0
 198:	00000018 	udf	#24
 19c:	00000000 	udf	#0
 1a0:	61000eac 	.inst	0x61000eac ; undefined
 1a4:	00000000 	udf	#0
 1a8:	00000028 	udf	#40
 1ac:	00000000 	udf	#0
 1b0:	61000ed4 	.inst	0x61000ed4 ; undefined
 1b4:	00000000 	udf	#0
 1b8:	00000024 	udf	#36
 1bc:	00000000 	udf	#0
 1c0:	61000d34 	.inst	0x61000d34 ; undefined
 1c4:	00000000 	udf	#0
 1c8:	00000024 	udf	#36
 1cc:	00000000 	udf	#0
 1d0:	61000ef8 	.inst	0x61000ef8 ; undefined
 1d4:	00000000 	udf	#0
 1d8:	00000024 	udf	#36
 1dc:	00000000 	udf	#0
 1e0:	61000f1c 	.inst	0x61000f1c ; undefined
 1e4:	00000000 	udf	#0
 1e8:	00000020 	udf	#32
 1ec:	00000000 	udf	#0
 1f0:	61000f3c 	.inst	0x61000f3c ; undefined
 1f4:	00000000 	udf	#0
 1f8:	0000000c 	udf	#12
	...
 208:	00000048 	udf	#72
 20c:	00000000 	udf	#0
 210:	61000f48 	.inst	0x61000f48 ; undefined
 214:	00000000 	udf	#0
 218:	00000084 	udf	#132
 21c:	00000000 	udf	#0
 220:	61000fcc 	.inst	0x61000fcc ; undefined
 224:	00000000 	udf	#0
 228:	0000001c 	udf	#28
 22c:	00000000 	udf	#0
 230:	61000fe8 	.inst	0x61000fe8 ; undefined
 234:	00000000 	udf	#0
 238:	0000001c 	udf	#28
 23c:	00000000 	udf	#0
 240:	61001004 	.inst	0x61001004 ; undefined
 244:	00000000 	udf	#0
 248:	00000028 	udf	#40
 24c:	00000000 	udf	#0
 250:	6100102c 	.inst	0x6100102c ; undefined
 254:	00000000 	udf	#0
 258:	00000334 	udf	#820
 25c:	00000000 	udf	#0
 260:	61001360 	.inst	0x61001360 ; undefined
 264:	00000000 	udf	#0
 268:	0000011c 	udf	#284
 26c:	00000000 	udf	#0
 270:	6100147c 	.inst	0x6100147c ; undefined
 274:	00000000 	udf	#0
 278:	00000110 	udf	#272
 27c:	00000000 	udf	#0
 280:	6100158c 	.inst	0x6100158c ; undefined
 284:	00000000 	udf	#0
 288:	00000060 	udf	#96
	...
 298:	00000040 	udf	#64
 29c:	00000000 	udf	#0
 2a0:	610015ec 	.inst	0x610015ec ; undefined
 2a4:	00000000 	udf	#0
 2a8:	0000004c 	udf	#76
 2ac:	00000000 	udf	#0
 2b0:	61001638 	.inst	0x61001638 ; undefined
 2b4:	00000000 	udf	#0
 2b8:	00000040 	udf	#64
 2bc:	00000000 	udf	#0
 2c0:	61001678 	.inst	0x61001678 ; undefined
 2c4:	00000000 	udf	#0
 2c8:	00000038 	udf	#56
 2cc:	00000000 	udf	#0
 2d0:	610016b0 	.inst	0x610016b0 ; undefined
 2d4:	00000000 	udf	#0
 2d8:	00000028 	udf	#40
	...
 2e8:	00000064 	udf	#100
	...
 2f8:	0000004c 	udf	#76
	...
 308:	0000004c 	udf	#76
 30c:	00000000 	udf	#0
 310:	610016d8 	.inst	0x610016d8 ; undefined
 314:	00000000 	udf	#0
 318:	000000b4 	udf	#180
	...
 328:	0000000c 	udf	#12
	...
 338:	0000000c 	udf	#12
	...
 348:	000000d8 	udf	#216
	...
 360:	0000002c 	udf	#44
 364:	0cd60002 	ld4	{v2.8b-v5.8b}, [x0], x22
 368:	00080000 	.inst	0x00080000 ; undefined
 36c:	00000000 	udf	#0
 370:	6100178c 	.inst	0x6100178c ; undefined
 374:	00000000 	udf	#0
 378:	00000030 	udf	#48
	...
 390:	0000002c 	udf	#44
 394:	0d910002 	st1	{v2.b}[0], [x0], x17
 398:	00080000 	.inst	0x00080000 ; undefined
 39c:	00000000 	udf	#0
 3a0:	610017bc 	.inst	0x610017bc ; undefined
 3a4:	00000000 	udf	#0
 3a8:	00000148 	udf	#328
	...
 3c0:	0000005c 	udf	#92
 3c4:	0eca0002 	.inst	0x0eca0002 ; undefined
 3c8:	00080000 	.inst	0x00080000 ; undefined
 3cc:	00000000 	udf	#0
 3d0:	61001904 	.inst	0x61001904 ; undefined
 3d4:	00000000 	udf	#0
 3d8:	00000074 	udf	#116
 3dc:	00000000 	udf	#0
 3e0:	61001978 	.inst	0x61001978 ; undefined
 3e4:	00000000 	udf	#0
 3e8:	0000012c 	udf	#300
 3ec:	00000000 	udf	#0
 3f0:	61001aa4 	.inst	0x61001aa4 ; undefined
 3f4:	00000000 	udf	#0
 3f8:	0000072c 	udf	#1836
 3fc:	00000000 	udf	#0
 400:	610021d0 	.inst	0x610021d0 ; undefined
 404:	00000000 	udf	#0
 408:	000000b0 	udf	#176
	...
 420:	0000002c 	udf	#44
 424:	11f30002 	.inst	0x11f30002 ; undefined
 428:	00080000 	.inst	0x00080000 ; undefined
 42c:	00000000 	udf	#0
 430:	61002280 	.inst	0x61002280 ; undefined
 434:	00000000 	udf	#0
 438:	00000028 	udf	#40
	...
 450:	0000006c 	udf	#108
 454:	14390002 	b	e4045c <__stack_size+0xe3c45c>
 458:	00080000 	.inst	0x00080000 ; undefined
 45c:	00000000 	udf	#0
 460:	610022a8 	.inst	0x610022a8 ; undefined
 464:	00000000 	udf	#0
 468:	00000058 	udf	#88
 46c:	00000000 	udf	#0
 470:	61002300 	.inst	0x61002300 ; undefined
 474:	00000000 	udf	#0
 478:	00000018 	udf	#24
	...
 488:	00000038 	udf	#56
 48c:	00000000 	udf	#0
 490:	61002318 	.inst	0x61002318 ; undefined
 494:	00000000 	udf	#0
 498:	00000054 	udf	#84
	...
 4a8:	00000050 	udf	#80
	...
 4c0:	000000ac 	udf	#172
 4c4:	167a0002 	b	fffffffff9e804cc <_sp+0xffffffff98e404cc>
 4c8:	00080000 	.inst	0x00080000 ; undefined
 4cc:	00000000 	udf	#0
 4d0:	6100236c 	.inst	0x6100236c ; undefined
 4d4:	00000000 	udf	#0
 4d8:	00000004 	udf	#4
 4dc:	00000000 	udf	#0
 4e0:	61002370 	.inst	0x61002370 ; undefined
 4e4:	00000000 	udf	#0
 4e8:	00000020 	udf	#32
 4ec:	00000000 	udf	#0
 4f0:	61002390 	.inst	0x61002390 ; undefined
 4f4:	00000000 	udf	#0
 4f8:	00000020 	udf	#32
 4fc:	00000000 	udf	#0
 500:	610023b0 	.inst	0x610023b0 ; undefined
 504:	00000000 	udf	#0
 508:	00000020 	udf	#32
 50c:	00000000 	udf	#0
 510:	610023d0 	.inst	0x610023d0 ; undefined
 514:	00000000 	udf	#0
 518:	00000020 	udf	#32
 51c:	00000000 	udf	#0
 520:	610023f0 	.inst	0x610023f0 ; undefined
 524:	00000000 	udf	#0
 528:	00000020 	udf	#32
	...
 538:	00000018 	udf	#24
 53c:	00000000 	udf	#0
 540:	61002410 	.inst	0x61002410 ; undefined
 544:	00000000 	udf	#0
 548:	00000020 	udf	#32
 54c:	00000000 	udf	#0
 550:	61002430 	.inst	0x61002430 ; undefined
 554:	00000000 	udf	#0
 558:	00000020 	udf	#32
	...
 570:	0000006c 	udf	#108
 574:	18ec0002 	ldr	w2, fffffffffffd8574 <_sp+0xffffffff9ef98574>
 578:	00080000 	.inst	0x00080000 ; undefined
	...
 588:	0000001c 	udf	#28
	...
 598:	0000001c 	udf	#28
 59c:	00000000 	udf	#0
 5a0:	61002450 	.inst	0x61002450 ; undefined
 5a4:	00000000 	udf	#0
 5a8:	00000090 	udf	#144
	...
 5b8:	0000003c 	udf	#60
 5bc:	00000000 	udf	#0
 5c0:	610024e0 	.inst	0x610024e0 ; undefined
 5c4:	00000000 	udf	#0
 5c8:	0000003c 	udf	#60
	...
 5e0:	000001fc 	udf	#508
 5e4:	1fca0002 	fmadd	h2, h0, h10, h0
 5e8:	00080000 	.inst	0x00080000 ; undefined
 5ec:	00000000 	udf	#0
 5f0:	6100251c 	.inst	0x6100251c ; undefined
 5f4:	00000000 	udf	#0
 5f8:	00000024 	udf	#36
 5fc:	00000000 	udf	#0
 600:	61002540 	.inst	0x61002540 ; undefined
 604:	00000000 	udf	#0
 608:	00000024 	udf	#36
 60c:	00000000 	udf	#0
 610:	61002564 	.inst	0x61002564 ; undefined
 614:	00000000 	udf	#0
 618:	000000c4 	udf	#196
 61c:	00000000 	udf	#0
 620:	61002628 	.inst	0x61002628 ; undefined
 624:	00000000 	udf	#0
 628:	00000034 	udf	#52
 62c:	00000000 	udf	#0
 630:	6100265c 	.inst	0x6100265c ; undefined
 634:	00000000 	udf	#0
 638:	00000034 	udf	#52
	...
 648:	00000034 	udf	#52
 64c:	00000000 	udf	#0
 650:	61002690 	.inst	0x61002690 ; undefined
 654:	00000000 	udf	#0
 658:	00000024 	udf	#36
	...
 668:	00000024 	udf	#36
 66c:	00000000 	udf	#0
 670:	610026b4 	.inst	0x610026b4 ; undefined
 674:	00000000 	udf	#0
 678:	00000034 	udf	#52
	...
 688:	00000034 	udf	#52
 68c:	00000000 	udf	#0
 690:	610026e8 	.inst	0x610026e8 ; undefined
 694:	00000000 	udf	#0
 698:	000000a0 	udf	#160
	...
 6a8:	0000003c 	udf	#60
 6ac:	00000000 	udf	#0
 6b0:	61002788 	.inst	0x61002788 ; undefined
 6b4:	00000000 	udf	#0
 6b8:	0000001c 	udf	#28
 6bc:	00000000 	udf	#0
 6c0:	610027a4 	.inst	0x610027a4 ; undefined
 6c4:	00000000 	udf	#0
 6c8:	00000084 	udf	#132
 6cc:	00000000 	udf	#0
 6d0:	61002828 	.inst	0x61002828 ; undefined
 6d4:	00000000 	udf	#0
 6d8:	00000024 	udf	#36
 6dc:	00000000 	udf	#0
 6e0:	6100284c 	.inst	0x6100284c ; undefined
 6e4:	00000000 	udf	#0
 6e8:	00000024 	udf	#36
 6ec:	00000000 	udf	#0
 6f0:	61002870 	.inst	0x61002870 ; undefined
 6f4:	00000000 	udf	#0
 6f8:	00000024 	udf	#36
	...
 708:	0000002c 	udf	#44
 70c:	00000000 	udf	#0
 710:	61002894 	.inst	0x61002894 ; undefined
 714:	00000000 	udf	#0
 718:	0000002c 	udf	#44
	...
 728:	00000024 	udf	#36
 72c:	00000000 	udf	#0
 730:	610028c0 	.inst	0x610028c0 ; undefined
 734:	00000000 	udf	#0
 738:	00000024 	udf	#36
 73c:	00000000 	udf	#0
 740:	610028e4 	.inst	0x610028e4 ; undefined
 744:	00000000 	udf	#0
 748:	00000028 	udf	#40
 74c:	00000000 	udf	#0
 750:	6100290c 	.inst	0x6100290c ; undefined
 754:	00000000 	udf	#0
 758:	00000018 	udf	#24
 75c:	00000000 	udf	#0
 760:	61002924 	.inst	0x61002924 ; undefined
 764:	00000000 	udf	#0
 768:	00000018 	udf	#24
 76c:	00000000 	udf	#0
 770:	6100293c 	.inst	0x6100293c ; undefined
 774:	00000000 	udf	#0
 778:	0000019c 	udf	#412
	...
 788:	00000034 	udf	#52
	...
 798:	00000034 	udf	#52
	...
 7a8:	00000024 	udf	#36
	...
 7b8:	00000024 	udf	#36
	...
 7c8:	00000034 	udf	#52
	...
 7e0:	0000002c 	udf	#44
 7e4:	32650002 	.inst	0x32650002 ; undefined
 7e8:	00080000 	.inst	0x00080000 ; undefined
 7ec:	00000000 	udf	#0
 7f0:	61002ad8 	.inst	0x61002ad8 ; undefined
 7f4:	00000000 	udf	#0
 7f8:	000003d8 	udf	#984
	...
 810:	000001cc 	udf	#460
 814:	33090002 	bfi	w2, w0, #23, #1
 818:	00080000 	.inst	0x00080000 ; undefined
 81c:	00000000 	udf	#0
 820:	61002eb0 	.inst	0x61002eb0 ; undefined
 824:	00000000 	udf	#0
 828:	00000020 	udf	#32
 82c:	00000000 	udf	#0
 830:	61002ed0 	.inst	0x61002ed0 ; undefined
 834:	00000000 	udf	#0
 838:	000000b8 	udf	#184
 83c:	00000000 	udf	#0
 840:	61002f88 	.inst	0x61002f88 ; undefined
 844:	00000000 	udf	#0
 848:	000000b8 	udf	#184
 84c:	00000000 	udf	#0
 850:	61003040 	.inst	0x61003040 ; undefined
 854:	00000000 	udf	#0
 858:	000000a8 	udf	#168
 85c:	00000000 	udf	#0
 860:	610030e8 	.inst	0x610030e8 ; undefined
 864:	00000000 	udf	#0
 868:	000000ac 	udf	#172
 86c:	00000000 	udf	#0
 870:	61003194 	.inst	0x61003194 ; undefined
 874:	00000000 	udf	#0
 878:	00000044 	udf	#68
 87c:	00000000 	udf	#0
 880:	610031d8 	.inst	0x610031d8 ; undefined
 884:	00000000 	udf	#0
 888:	00000068 	udf	#104
	...
 898:	00000068 	udf	#104
	...
 8a8:	00000060 	udf	#96
	...
 8b8:	0000004c 	udf	#76
	...
 8c8:	0000003c 	udf	#60
	...
 8d8:	0000003c 	udf	#60
	...
 8e8:	0000004c 	udf	#76
	...
 8f8:	00000054 	udf	#84
	...
 908:	0000003c 	udf	#60
	...
 918:	00000040 	udf	#64
	...
 928:	0000003c 	udf	#60
	...
 938:	00000040 	udf	#64
	...
 948:	0000003c 	udf	#60
	...
 958:	00000054 	udf	#84
	...
 968:	00000070 	udf	#112
	...
 978:	000000d8 	udf	#216
	...
 988:	000000d8 	udf	#216
	...
 998:	00000174 	udf	#372
	...
 9a8:	00000058 	udf	#88
	...
 9b8:	00000054 	udf	#84
	...
 9c8:	00000054 	udf	#84
	...
 9e0:	0000019c 	udf	#412
 9e4:	3d5e0002 	ldr	b2, [x0, #1920]
 9e8:	00080000 	.inst	0x00080000 ; undefined
 9ec:	00000000 	udf	#0
 9f0:	61003240 	.inst	0x61003240 ; undefined
 9f4:	00000000 	udf	#0
 9f8:	00000040 	udf	#64
 9fc:	00000000 	udf	#0
 a00:	61003280 	.inst	0x61003280 ; undefined
 a04:	00000000 	udf	#0
 a08:	00000044 	udf	#68
 a0c:	00000000 	udf	#0
 a10:	610032c4 	.inst	0x610032c4 ; undefined
 a14:	00000000 	udf	#0
 a18:	0000004c 	udf	#76
	...
 a28:	00000060 	udf	#96
	...
 a38:	00000060 	udf	#96
	...
 a48:	0000004c 	udf	#76
 a4c:	00000000 	udf	#0
 a50:	61003310 	.inst	0x61003310 ; undefined
 a54:	00000000 	udf	#0
 a58:	00000060 	udf	#96
	...
 a68:	00000060 	udf	#96
 a6c:	00000000 	udf	#0
 a70:	61003370 	.inst	0x61003370 ; undefined
 a74:	00000000 	udf	#0
 a78:	0000004c 	udf	#76
	...
 a88:	0000004c 	udf	#76
	...
 a98:	00000088 	udf	#136
	...
 aa8:	00000088 	udf	#136
 aac:	00000000 	udf	#0
 ab0:	610033bc 	.inst	0x610033bc ; undefined
 ab4:	00000000 	udf	#0
 ab8:	0000004c 	udf	#76
 abc:	00000000 	udf	#0
 ac0:	61003408 	.inst	0x61003408 ; undefined
 ac4:	00000000 	udf	#0
 ac8:	00000054 	udf	#84
 acc:	00000000 	udf	#0
 ad0:	6100345c 	.inst	0x6100345c ; undefined
 ad4:	00000000 	udf	#0
 ad8:	00000048 	udf	#72
 adc:	00000000 	udf	#0
 ae0:	610034a4 	.inst	0x610034a4 ; undefined
 ae4:	00000000 	udf	#0
 ae8:	00000048 	udf	#72
 aec:	00000000 	udf	#0
 af0:	610034ec 	.inst	0x610034ec ; undefined
 af4:	00000000 	udf	#0
 af8:	00000054 	udf	#84
	...
 b08:	00000054 	udf	#84
 b0c:	00000000 	udf	#0
 b10:	61003540 	.inst	0x61003540 ; undefined
 b14:	00000000 	udf	#0
 b18:	00000048 	udf	#72
 b1c:	00000000 	udf	#0
 b20:	61003588 	.inst	0x61003588 ; undefined
 b24:	00000000 	udf	#0
 b28:	00000018 	udf	#24
 b2c:	00000000 	udf	#0
 b30:	610035a0 	.inst	0x610035a0 ; undefined
 b34:	00000000 	udf	#0
 b38:	00000030 	udf	#48
 b3c:	00000000 	udf	#0
 b40:	610035d0 	.inst	0x610035d0 ; undefined
 b44:	00000000 	udf	#0
 b48:	00000030 	udf	#48
 b4c:	00000000 	udf	#0
 b50:	61003600 	.inst	0x61003600 ; undefined
 b54:	00000000 	udf	#0
 b58:	00000030 	udf	#48
 b5c:	00000000 	udf	#0
 b60:	61003630 	.inst	0x61003630 ; undefined
 b64:	00000000 	udf	#0
 b68:	00000024 	udf	#36
	...
 b80:	0000003c 	udf	#60
 b84:	450b0002 	.inst	0x450b0002 ; undefined
 b88:	00080000 	.inst	0x00080000 ; undefined
 b8c:	00000000 	udf	#0
 b90:	61003654 	.inst	0x61003654 ; undefined
 b94:	00000000 	udf	#0
 b98:	00000554 	udf	#1364
 b9c:	00000000 	udf	#0
 ba0:	61003ba8 	.inst	0x61003ba8 ; undefined
 ba4:	00000000 	udf	#0
 ba8:	00000068 	udf	#104
	...
 bc0:	0000002c 	udf	#44
 bc4:	530f0002 	ubfiz	w2, w0, #17, #1
 bc8:	00080000 	.inst	0x00080000 ; undefined
 bcc:	00000000 	udf	#0
 bd0:	61003c10 	.inst	0x61003c10 ; undefined
 bd4:	00000000 	udf	#0
 bd8:	0000001c 	udf	#28
	...
 bf0:	0000004c 	udf	#76
 bf4:	53d70002 	.inst	0x53d70002 ; undefined
 bf8:	00080000 	.inst	0x00080000 ; undefined
 bfc:	00000000 	udf	#0
 c00:	61003c2c 	.inst	0x61003c2c ; undefined
 c04:	00000000 	udf	#0
 c08:	000000ac 	udf	#172
 c0c:	00000000 	udf	#0
 c10:	61003cd8 	.inst	0x61003cd8 ; undefined
 c14:	00000000 	udf	#0
 c18:	000000e4 	udf	#228
 c1c:	00000000 	udf	#0
 c20:	61003dbc 	.inst	0x61003dbc ; undefined
 c24:	00000000 	udf	#0
 c28:	0000064c 	udf	#1612
	...

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
{
       0:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
       4:	6f532f2e 	.inst	0x6f532f2e ; undefined
	panic();
       8:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
}
       c:	70616f6d 	adr	x13, c2dfb <__stack_size+0xbedfb>
      10:	6f432f75 	.inst	0x6f432f75 ; undefined
      14:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
{
      18:	756f532f 	.inst	0x756f532f ; undefined
      1c:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	2f434347 	mls	v7.4h, v26.4h, v3.h[0]
      24:	6c776f6c 	ldnp	d12, d27, [x27, #-144]
      28:	6c657665 	ldnp	d5, d29, [x19, #-432]
      2c:	2f00532e 	.inst	0x2f00532e ; undefined
	return 0;
      30:	656d6f68 	fnmls	z8.h, p3/m, z27.h, z13.h
}
      34:	6e65742f 	uabd	v15.8h, v1.8h, v5.8h
      38:	69656667 	ldpsw	x7, x25, [x19, #-216]
    __delay(delay_cnt);
      3c:	2f6f6163 	umlsl	v3.4s, v11.4h, v15.h[2]
      40:	7473616d 	.inst	0x7473616d ; undefined
}
      44:	735f7265 	.inst	0x735f7265 ; undefined
      48:	612f6b64 	.inst	0x612f6b64 ; undefined
      4c:	696c7070 	ldpsw	x16, x28, [x3, #-160]
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
      50:	69746163 	ldpsw	x3, x24, [x11, #-96]
      54:	482f6e6f 	.inst	0x482f6e6f ; undefined
      58:	5f647261 	sqdmlsl	s1, h19, v4.h[2]
      5c:	74736574 	.inst	0x74736574 ; undefined
      60:	7361635f 	.inst	0x7361635f ; undefined
      64:	4e470065 	.inst	0x4e470065 ; undefined
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
      68:	53412055 	.inst	0x53412055 ; undefined
      6c:	332e3220 	.inst	0x332e3220 ; undefined
      70:	2e2e0037 	uaddl	v23.8h, v1.8b, v14.8b
      74:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
      78:	2f436f53 	.inst	0x2f436f53 ; undefined
	return 0;
      7c:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
}
      80:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
      84:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
      88:	532f6e6f 	.inst	0x532f6e6f ; undefined
      8c:	6372756f 	.inst	0x6372756f ; undefined
      90:	43472f65 	.inst	0x43472f65 ; undefined
      94:	656d2f43 	fmls	z3.h, p3/m, z26.h, z13.h
      98:	00532e6d 	.inst	0x00532e6d ; undefined
      9c:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
      a0:	6f532f2e 	.inst	0x6f532f2e ; undefined
      a4:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
      a8:	70616f6d 	adr	x13, c2e97 <__stack_size+0xbee97>
	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
      ac:	6f432f75 	.inst	0x6f432f75 ; undefined
      b0:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
      b4:	756f532f 	.inst	0x756f532f ; undefined
      b8:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
      bc:	2f434347 	mls	v7.4h, v26.4h, v3.h[0]
      c0:	72617473 	.inst	0x72617473 ; undefined
      c4:	5f707574 	sqshl	d20, d11, #48
      c8:	63726161 	.inst	0x63726161 ; undefined
	return 0;
      cc:	2e343668 	cmhi	v8.8b, v19.8b, v20.8b
}
      d0:	2e2e0053 	uaddl	v19.8h, v2.8b, v14.8b
      d4:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d8:	2f436f53 	.inst	0x2f436f53 ; undefined
      dc:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
            retval = Uart_event_modem;
      e0:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
            break;
      e4:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	532f6e6f 	.inst	0x532f6e6f ; undefined
      ec:	6372756f 	.inst	0x6372756f ; undefined
      f0:	43472f65 	.inst	0x43472f65 ; undefined
        	retval =Uart_event_thre;
      f4:	65762f43 	fmls	z3.h, p3/m, z26.h, z22.h
      f8:	726f7463 	.inst	0x726f7463 ; undefined
        	break;
      fc:	00532e73 	.inst	0x00532e73 ; undefined
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	6e695f5f 	uqrshl	v31.8h, v26.8h, v9.8h
     104:	38323174 	ldsetb	w18, w20, [x11]
     108:	736e7520 	.inst	0x736e7520 ; undefined
        	retval = Uart_event_timeout;
     10c:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     110:	6e750064 	uaddl2	v4.4s, v3.8h, v21.8h
        	break;
     114:	6e676973 	.inst	0x6e676973 ; undefined
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	63206465 	.inst	0x63206465 ; undefined
     11c:	00726168 	.inst	0x00726168 ; undefined
     120:	656e6567 	fnmls	z7.h, p1/m, z11.h, z14.h
        	retval = Received_data_available;
     124:	5f636972 	.inst	0x5f636972 ; undefined
     128:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
            break;
     12c:	6e695f72 	uqrshl	v18.8h, v27.8h, v9.8h
        	printf("Overrun/parity/ framing errors or break interrupt");
     130:	73007469 	.inst	0x73007469 ; undefined
     134:	74726f68 	.inst	0x74726f68 ; undefined
     138:	736e7520 	.inst	0x736e7520 ; undefined
        	retval = Receiver_line_status;
     13c:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     140:	6e692064 	usubl2	v4.4s, v3.8h, v9.8h
            break;
     144:	5f5f0074 	.inst	0x5f5f0074 ; undefined
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	31746e69 	adds	w9, w19, #0xd1b, lsl #12
     14c:	67003832 	.inst	0x67003832 ; undefined
     150:	72656e65 	.inst	0x72656e65 ; undefined
        	retval = Uart_event_busy;
     154:	745f6369 	.inst	0x745f6369 ; undefined
     158:	72656d69 	.inst	0x72656d69 ; undefined
            break;
     15c:	7461725f 	.inst	0x7461725f ; undefined
            retval = 0;
     160:	65670065 	fmla	z5.h, p0/m, z3.h, z7.h
            break;
     164:	6972656e 	ldpsw	x14, x25, [x11, #-112]
    return retval;
     168:	69745f63 	ldpsw	x3, x23, [x27, #-96]
}
     16c:	5f72656d 	.inst	0x5f72656d ; undefined
     170:	62616e65 	.inst	0x62616e65 ; undefined
     174:	6c00656c 	stnp	d12, d25, [x11]
     178:	20676e6f 	.inst	0x20676e6f ; undefined
     17c:	676e6f6c 	.inst	0x676e6f6c ; undefined
     180:	736e7520 	.inst	0x736e7520 ; undefined
     184:	656e6769 	fnmls	z9.h, p1/m, z27.h, z14.h
     188:	6e692064 	usubl2	v4.4s, v3.8h, v9.8h
     18c:	65670074 	fmla	z20.h, p0/m, z3.h, z7.h
     190:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     194:	69745f63 	ldpsw	x3, x23, [x27, #-96]
     198:	5f72656d 	.inst	0x5f72656d ; undefined
     19c:	5f746567 	.inst	0x5f746567 ; undefined
     1a0:	71657266 	subs	w6, w19, #0x95c, lsl #12
     1a4:	6e656700 	umax	v0.8h, v24.8h, v5.8h
     1a8:	63697265 	.inst	0x63697265 ; undefined
     1ac:	6d69745f 	ldp	d31, d29, [x2, #-368]
     1b0:	725f7265 	.inst	0x725f7265 ; undefined
     1b4:	74657365 	.inst	0x74657365 ; undefined
     1b8:	725f5f00 	.inst	0x725f5f00 ; undefined
     1bc:	775f7761 	.inst	0x775f7761 ; undefined
     1c0:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
     1c4:	6f6c006c 	mla	v12.8h, v3.8h, v12.h[2]
     1c8:	6c20676e 	stnp	d14, d25, [x27, #-512]
     1cc:	20676e6f 	.inst	0x20676e6f ; undefined
     1d0:	00746e69 	.inst	0x00746e69 ; undefined
     1d4:	726f6873 	.inst	0x726f6873 ; undefined
     1d8:	6e692074 	usubl2	v20.4s, v3.8h, v9.8h
     1dc:	2e2e0074 	uaddl	v20.8h, v3.8b, v14.8b
     1e0:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     1e4:	2f436f53 	.inst	0x2f436f53 ; undefined
     1e8:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     1ec:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     1f0:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     1f4:	532f6e6f 	.inst	0x532f6e6f ; undefined
     1f8:	6372756f 	.inst	0x6372756f ; undefined
     1fc:	65472f65 	fminv	h5, p3, z27.h
     200:	6972656e 	ldpsw	x14, x25, [x11, #-112]
     204:	69745f63 	ldpsw	x3, x23, [x27, #-96]
     208:	2f72656d 	.inst	0x2f72656d ; undefined
     20c:	2f637273 	fcmla	v19.4h, v19.4h, v3.h[1], #270
     210:	656e6567 	fnmls	z7.h, p1/m, z11.h, z14.h
     214:	5f636972 	.inst	0x5f636972 ; undefined
     218:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
     21c:	00632e72 	.inst	0x00632e72 ; undefined
     220:	20554e47 	.inst	0x20554e47 ; undefined
     224:	20373143 	.inst	0x20373143 ; undefined
     228:	322e3131 	orr	w17, w9, #0x7ffc0000
     22c:	3220312e 	orr	w14, w9, #0x1fff
     230:	30323230 	adr	x16, 64875 <__stack_size+0x60875>
     234:	20313131 	.inst	0x20313131 ; undefined
     238:	74736d2d 	.inst	0x74736d2d ; undefined
     23c:	74636972 	.inst	0x74636972 ; undefined
     240:	696c612d 	ldpsw	x13, x24, [x9, #-160]
     244:	2d206e67 	stp	s7, s27, [x19, #-256]
     248:	7570636d 	.inst	0x7570636d ; undefined
     24c:	726f633d 	.inst	0x726f633d ; undefined
     250:	2d786574 	ldp	s20, s25, [x11, #-64]
     254:	20353361 	.inst	0x20353361 ; undefined
     258:	72616d2d 	.inst	0x72616d2d ; undefined
     25c:	613d6863 	.inst	0x613d6863 ; undefined
     260:	38766d72 	.inst	0x38766d72 ; undefined
     264:	2d20612d 	stp	s13, s24, [x9, #-256]
     268:	74696c6d 	.inst	0x74696c6d ; undefined
     26c:	2d656c74 	ldp	s20, s27, [x3, #-216]
     270:	69646e65 	ldpsw	x5, x27, [x19, #-224]
     274:	2d206e61 	stp	s1, s27, [x19, #-256]
     278:	6962616d 	ldpsw	x13, x24, [x11, #-240]
     27c:	36706c3d 	tbz	w29, #14, 1000 <__stack_size-0x3000>
     280:	672d2034 	.inst	0x672d2034 ; undefined
     284:	64672d20 	.inst	0x64672d20 ; undefined
     288:	66726177 	.inst	0x66726177 ; undefined
     28c:	2d20342d 	stp	s13, s13, [x1, #-256]
     290:	65726666 	fnmls	z6.h, p1/m, z19.h, z18.h
     294:	61747365 	.inst	0x61747365 ; undefined
     298:	6e69646e 	umax	v14.8h, v3.8h, v9.8h
     29c:	662d2067 	.inst	0x662d2067 ; undefined
     2a0:	6f2d6f6e 	.inst	0x6f2d6f6e ; undefined
     2a4:	2d74696d 	ldp	s13, s26, [x11, #-96]
     2a8:	6d617266 	ldp	d6, d28, [x19, #-496]
     2ac:	6f702d65 	.inst	0x6f702d65 ; undefined
     2b0:	65746e69 	fnmls	z9.h, p3/m, z19.h, z20.h
     2b4:	662d2072 	.inst	0x662d2072 ; undefined
     2b8:	732d6f6e 	.inst	0x732d6f6e ; undefined
     2bc:	6b636174 	.inst	0x6b636174 ; undefined
     2c0:	6f72702d 	fcmla	v13.8h, v1.8h, v18.h[1], #270
     2c4:	74636574 	.inst	0x74636574 ; undefined
     2c8:	2d20726f 	stp	s15, s28, [x19, #-256]
     2cc:	6e756666 	umax	v6.8h, v19.8h, v21.8h
     2d0:	6f697463 	uqshl	v3.2d, v3.2d, #41
     2d4:	65732d6e 	fmls	z14.h, p3/m, z11.h, z19.h
     2d8:	6f697463 	uqshl	v3.2d, v3.2d, #41
     2dc:	2d20736e 	stp	s14, s28, [x27, #-256]
     2e0:	74616466 	.inst	0x74616466 ; undefined
     2e4:	65732d61 	fmls	z1.h, p3/m, z11.h, z19.h
     2e8:	6f697463 	uqshl	v3.2d, v3.2d, #41
     2ec:	2d20736e 	stp	s14, s28, [x27, #-256]
     2f0:	2d6f6e66 	ldp	s6, s27, [x19, #-136]
     2f4:	6d6d6f63 	ldp	d3, d27, [x27, #-304]
     2f8:	67006e6f 	.inst	0x67006e6f ; undefined
     2fc:	645f6369 	fcmla	z9.h, p0/m, z27.h, z31.h, #270
     300:	5f747369 	sqdmlsl	s9, h27, v4.h[3]
     304:	74696177 	.inst	0x74696177 ; undefined
     308:	71657200 	subs	w0, w16, #0x95c, lsl #12
     30c:	74736575 	.inst	0x74736575 ; undefined
     310:	7172695f 	cmp	w10, #0xc9a, lsl #12
     314:	725f5f00 	.inst	0x725f5f00 ; undefined
     318:	725f7761 	.inst	0x725f7761 ; undefined
     31c:	6c646165 	ldnp	d5, d24, [x11, #-448]
     320:	75706300 	.inst	0x75706300 ; undefined
     324:	6c65725f 	ldnp	d31, d28, [x18, #-432]
     328:	64007861 	.inst	0x64007861 ; undefined
     32c:	72695f6f 	.inst	0x72695f6f ; undefined
     330:	61685f71 	.inst	0x61685f71 ; undefined
     334:	656c646e 	fnmls	z14.h, p1/m, z3.h, z12.h
     338:	63696700 	.inst	0x63696700 ; undefined
     33c:	635f3376 	.inst	0x635f3376 ; undefined
     340:	6d5f7570 	ldp	d16, d29, [x11, #496]
     344:	726f6d65 	.inst	0x726f6d65 ; undefined
     348:	616d5f79 	.inst	0x616d5f79 ; undefined
     34c:	6e695f70 	uqrshl	v16.8h, v27.8h, v9.8h
     350:	67007469 	.inst	0x67007469 ; undefined
     354:	775f6369 	.inst	0x775f6369 ; undefined
     358:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
     35c:	7072675f 	adr	xzr, e5047 <__stack_size+0xe1047>
     360:	00316e65 	.inst	0x00316e65 ; NYI
     364:	2e2f2e2e 	uqsub	v14.8b, v17.8b, v15.8b
     368:	6f532f2e 	.inst	0x6f532f2e ; undefined
     36c:	65642f43 	fmls	z3.h, p3/m, z26.h, z4.h
     370:	70616f6d 	adr	x13, c315f <__stack_size+0xbf15f>
     374:	6f432f75 	.inst	0x6f432f75 ; undefined
     378:	6e6f6d6d 	umin	v13.8h, v11.8h, v15.8h
     37c:	756f532f 	.inst	0x756f532f ; undefined
     380:	2f656372 	umlsl	v18.4s, v27.4h, v5.h[2]
     384:	5f636947 	.inst	0x5f636947 ; undefined
     388:	2f303035 	.inst	0x2f303035 ; undefined
     38c:	2f637273 	fcmla	v19.4h, v19.4h, v3.h[1], #270
     390:	5f636967 	.inst	0x5f636967 ; undefined
     394:	632e3376 	.inst	0x632e3376 ; undefined
     398:	63696700 	.inst	0x63696700 ; undefined
     39c:	6465725f 	.inst	0x6465725f ; undefined
     3a0:	5f747369 	sqdmlsl	s9, h27, v4.h[3]
     3a4:	74696177 	.inst	0x74696177 ; undefined
     3a8:	63696700 	.inst	0x63696700 ; undefined
     3ac:	616e655f 	.inst	0x616e655f ; undefined
     3b0:	5f656c62 	.inst	0x5f656c62 ; undefined
     3b4:	00657273 	.inst	0x00657273 ; undefined
     3b8:	5f636967 	.inst	0x5f636967 ; undefined
     3bc:	62616e65 	.inst	0x62616e65 ; undefined
     3c0:	725f656c 	.inst	0x725f656c ; undefined
     3c4:	73696465 	.inst	0x73696465 ; undefined
     3c8:	6e690074 	uaddl2	v20.4s, v3.8h, v9.8h
     3cc:	64695f74 	.inst	0x64695f74 ; undefined
     3d0:	63696700 	.inst	0x63696700 ; undefined
     3d4:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
     3d8:	625f6574 	.inst	0x625f6574 ; undefined
     3dc:	00317270 	.inst	0x00317270 ; NYI
     3e0:	76636967 	.inst	0x76636967 ; undefined
     3e4:	69645f33 	ldpsw	x19, x23, [x25, #-224]
     3e8:	6c626173 	ldnp	d19, d24, [x11, #-480]
     3ec:	72695f65 	.inst	0x72695f65 ; undefined
     3f0:	69670071 	ldpsw	x17, x0, [x3, #-200]
     3f4:	5f337663 	sqshl	s3, s19, #19
     3f8:	5f746573 	.inst	0x5f746573 ; undefined
     3fc:	00717269 	.inst	0x00717269 ; undefined
     400:	76636967 	.inst	0x76636967 ; undefined
     404:	70635f33 	adr	x19, c6feb <__stack_size+0xc2feb>
     408:	6e695f75 	uqrshl	v21.8h, v27.8h, v9.8h
     40c:	6d007469 	stp	d9, d29, [x3]
     410:	72646970 	.inst	0x72646970 ; undefined
     414:	63696700 	.inst	0x63696700 ; undefined
     418:	7172695f 	cmp	w10, #0xc9a, lsl #12
     41c:	69670073 	ldpsw	x19, x0, [x3, #-200]
     420:	706d5f63 	adr	x3, db00f <__stack_size+0xd700f>
     424:	5f726469 	.inst	0x5f726469 ; undefined
     428:	615f6f74 	.inst	0x615f6f74 ; undefined
     42c:	6e696666 	umax	v6.8h, v19.8h, v9.8h
     430:	00797469 	.inst	0x00797469 ; undefined
     434:	76636967 	.inst	0x76636967 ; undefined
     438:	69645f33 	ldpsw	x19, x23, [x25, #-224]
     43c:	695f7473 	ldpsw	x19, x29, [x3, #248]
     440:	0074696e 	.inst	0x0074696e ; undefined
     444:	76636967 	.inst	0x76636967 ; undefined
     448:	6e695f33 	uqrshl	v19.8h, v25.8h, v9.8h
     44c:	67007469 	.inst	0x67007469 ; undefined
     450:	33766369 	.inst	0x33766369 ; undefined
     454:	616e655f 	.inst	0x616e655f ; undefined
     458:	5f656c62 	.inst	0x5f656c62 ; undefined
     45c:	00717269 	.inst	0x00717269 ; undefined
     460:	5f636967 	.inst	0x5f636967 ; undefined
     464:	64616572 	.inst	0x64616572 ; undefined
     468:	6572735f 	fnmls	z31.h, p4/m, z26.h, z18.h
     46c:	63696700 	.inst	0x63696700 ; undefined
     470:	6165725f 	.inst	0x6165725f ; undefined
     474:	74635f64 	.inst	0x74635f64 ; undefined
     478:	5f00726c 	.inst	0x5f00726c ; undefined
     47c:	616c6564 	.inst	0x616c6564 ; undefined
     480:	736d5f79 	.inst	0x736d5f79 ; undefined
     484:	63696700 	.inst	0x63696700 ; undefined
     488:	5f6f645f 	.inst	0x5f6f645f ; undefined
     48c:	74696177 	.inst	0x74696177 ; undefined
     490:	726f665f 	.inst	0x726f665f ; undefined
     494:	7077725f 	adr	xzr, ef2df <__stack_size+0xeb2df>
     498:	655f5f00 	fcmge	p0.h, p7/z, z24.h, z31.h
     49c:	6c62616e 	ldnp	d14, d24, [x11, #-480]
     4a0:	72695f65 	.inst	0x72695f65 ; undefined
     4a4:	69670071 	ldpsw	x17, x0, [x3, #-200]
     4a8:	65675f63 	fnmla	z3.h, p7/m, z27.h, z7.h
     4ac:	72705f74 	.inst	0x72705f74 ; undefined
     4b0:	74696269 	.inst	0x74696269 ; undefined
     4b4:	5f5f0073 	.inst	0x5f5f0073 ; undefined
     4b8:	61736964 	.inst	0x61736964 ; undefined
     4bc:	5f656c62 	.inst	0x5f656c62 ; undefined
     4c0:	00717269 	.inst	0x00717269 ; undefined
     4c4:	61725f5f 	.inst	0x61725f5f ; undefined
     4c8:	72775f77 	.inst	0x72775f77 ; undefined
     4cc:	71657469 	subs	w9, w3, #0x95d, lsl #12
     4d0:	63696700 	.inst	0x63696700 ; undefined
     4d4:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
     4d8:	655f6574 	fcmne	p4.h, p1/z, z11.h, z31.h
     4dc:	0072696f 	.inst	0x0072696f ; undefined
     4e0:	5f746e69 	.inst	0x5f746e69 ; undefined
     4e4:	756f7267 	.inst	0x756f7267 ; undefined
     4e8:	65720070 	fmla	z16.h, p0/m, z3.h, z18.h
     4ec:	64615f67 	.inst	0x64615f67 ; undefined
     4f0:	67007264 	.inst	0x67007264 ; undefined
     4f4:	775f6369 	.inst	0x775f6369 ; undefined
     4f8:	65746972 	fnmls	z18.h, p2/m, z11.h, z20.h
     4fc:	6572735f 	fnmls	z31.h, p4/m, z26.h, z18.h
     500:	75706300 	.inst	0x75706300 ; undefined
     504:	6d756e5f 	ldp	d31, d27, [x18, #-176]
     508:	72690073 	.inst	0x72690073 ; undefined
     50c:	61747371 	.inst	0x61747371 ; undefined
     510:	5f5f0074 	.inst	0x5f5f0074 ; undefined
     514:	006c6176 	.inst	0x006c6176 ; undefined
     518:	5f717269 	sqdmlsl	s9, h19, v1.h[3]
     51c:	646e6168 	.inst	0x646e6168 ; undefined
     520:	0072656c 	.inst	0x0072656c ; undefined
     524:	76636967 	.inst	0x76636967 ; undefined
     528:	65735f33 	fnmla	z19.h, p7/m, z25.h, z19.h
     52c:	72695f74 	.inst	0x72695f74 ; undefined
     530:	72705f71 	.inst	0x72705f71 ; undefined
     534:	69726f69 	ldpsw	x9, x27, [x27, #-112]
     538:	67007974 	.inst	0x67007974 ; undefined
     53c:	33766369 	.inst	0x33766369 ; undefined
     540:	6465725f 	.inst	0x6465725f ; undefined
     544:	5f747369 	sqdmlsl	s9, h27, v4.h[3]
     548:	74696e69 	.inst	0x74696e69 ; undefined
     54c:	6f425f00 	.inst	0x6f425f00 ; undefined
     550:	67006c6f 	.inst	0x67006c6f ; undefined
     554:	725f6369 	.inst	0x725f6369 ; undefined
     558:	5f646165 	.inst	0x5f646165 ; undefined
     55c:	5f726169 	.inst	0x5f726169 ; undefined
     560:	6d6d6f63 	ldp	d3, d27, [x27, #-304]
     564:	67006e6f 	.inst	0x67006e6f ; undefined
     568:	33766369 	.inst	0x33766369 ; undefined
     56c:	7570635f 	.inst	0x7570635f ; undefined
     570:	7379735f 	.inst	0x7379735f ; undefined
     574:	73676572 	.inst	0x73676572 ; undefined
     578:	696e695f 	ldpsw	xzr, x26, [x10, #-144]
     57c:	70730074 	adr	x20, e658b <__stack_size+0xe258b>
     580:	74695f69 	.inst	0x74695f69 ; undefined
     584:	656e696c 	fnmls	z12.h, p2/m, z11.h, z14.h
     588:	6d756e5f 	ldp	d31, d27, [x18, #-176]
     58c:	33750073 	.inst	0x33750073 ; undefined
     590:	00745f32 	.inst	0x00745f32 ; undefined
     594:	5f636967 	.inst	0x5f636967 ; undefined
     598:	74697277 	.inst	0x74697277 ; undefined
     59c:	74635f65 	.inst	0x74635f65 ; undefined
     5a0:	7200726c 	ands	w12, w19, #0x1fffffff
     5a4:	615f7077 	.inst	0x615f7077 ; undefined
     5a8:	00726464 	.inst	0x00726464 ; undefined
     5ac:	75665f70 	.inst	0x75665f70 ; undefined
     5b0:	6700636e 	.inst	0x6700636e ; undefined
     5b4:	5f646369 	.inst	0x5f646369 ; undefined
     5b8:	65707974 	fnmls	z20.h, p6/m, z11.h, z16.h
     5bc:	69660072 	ldpsw	x18, x0, [x3, #-208]
     5c0:	2e00656c 	.inst	0x2e00656c ; undefined
     5c4:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     5c8:	436f532f 	.inst	0x436f532f ; undefined
     5cc:	6d65642f 	ldp	d15, d25, [x1, #-432]
     5d0:	7570616f 	.inst	0x7570616f ; undefined
     5d4:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     5d8:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     5dc:	72756f53 	.inst	0x72756f53 ; undefined
     5e0:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     5e4:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
     5e8:	65737361 	fnmls	z1.h, p4/m, z27.h, z19.h
     5ec:	632e7472 	.inst	0x632e7472 ; undefined
     5f0:	73736100 	.inst	0x73736100 ; undefined
     5f4:	69747265 	ldpsw	x5, x28, [x19, #-96]
     5f8:	5f006e6f 	.inst	0x5f006e6f ; undefined
     5fc:	7373615f 	.inst	0x7373615f ; undefined
     600:	00747265 	.inst	0x00747265 ; undefined
     604:	656e696c 	fnmls	z12.h, p2/m, z11.h, z14.h
     608:	7a697300 	.inst	0x7a697300 ; undefined
     60c:	00745f65 	.inst	0x00745f65 ; undefined
     610:	746e6975 	.inst	0x746e6975 ; undefined
     614:	5f727470 	sqshl	d16, d3, #50
     618:	69750074 	ldpsw	x20, x0, [x3, #-88]
     61c:	3436746e 	cbz	w14, 6d4a8 <__stack_size+0x694a8>
     620:	2e00745f 	.inst	0x2e00745f ; undefined
     624:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     628:	436f532f 	.inst	0x436f532f ; undefined
     62c:	6d65642f 	ldp	d15, d25, [x1, #-432]
     630:	7570616f 	.inst	0x7570616f ; undefined
     634:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     638:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     63c:	72756f53 	.inst	0x72756f53 ; undefined
     640:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     644:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
     648:	736d656d 	.inst	0x736d656d ; undefined
     64c:	632e7465 	.inst	0x632e7465 ; undefined
     650:	72747000 	.inst	0x72747000 ; undefined
     654:	66003436 	.inst	0x66003436 ; undefined
     658:	006c6c69 	.inst	0x006c6c69 ; undefined
     65c:	736d656d 	.inst	0x736d656d ; undefined
     660:	75007465 	.inst	0x75007465 ; undefined
     664:	38746e69 	.inst	0x38746e69 ; undefined
     668:	6e00745f 	.inst	0x6e00745f ; undefined
     66c:	625f6d75 	.inst	0x625f6d75 ; undefined
     670:	6c006675 	stnp	d21, d25, [x19]
     674:	756f635f 	.inst	0x756f635f ; undefined
     678:	5f00746e 	.inst	0x5f00746e ; undefined
     67c:	5f72675f 	.inst	0x5f72675f ; undefined
     680:	00706f74 	.inst	0x00706f74 ; undefined
     684:	69646172 	ldpsw	x18, x24, [x11, #-224]
     688:	6f6c0078 	mla	v24.8h, v3.8h, v12.h[2]
     68c:	7600706f 	.inst	0x7600706f ; undefined
     690:	6e697270 	uabdl2	v16.4s, v19.8h, v9.8h
     694:	73006674 	.inst	0x73006674 ; undefined
     698:	6e697274 	uabdl2	v20.4s, v19.8h, v9.8h
     69c:	72705f67 	.inst	0x72705f67 ; undefined
     6a0:	00746e69 	.inst	0x00746e69 ; undefined
     6a4:	63747570 	.inst	0x63747570 ; undefined
     6a8:	00726168 	.inst	0x00726168 ; undefined
     6ac:	69736e75 	ldpsw	x21, x27, [x19, #-104]
     6b0:	64656e67 	.inst	0x64656e67 ; undefined
     6b4:	6d756e5f 	ldp	d31, d27, [x18, #-176]
     6b8:	6972705f 	ldpsw	xzr, x28, [x2, #-112]
     6bc:	7000746e 	adr	x14, 154b <__stack_size-0x2ab5>
     6c0:	006e6461 	.inst	0x006e6461 ; undefined
     6c4:	72675f5f 	.inst	0x72675f5f ; undefined
     6c8:	66666f5f 	.inst	0x66666f5f ; undefined
     6cc:	61700073 	.inst	0x61700073 ; undefined
     6d0:	2e006364 	.inst	0x2e006364 ; undefined
     6d4:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     6d8:	436f532f 	.inst	0x436f532f ; undefined
     6dc:	6d65642f 	ldp	d15, d25, [x1, #-432]
     6e0:	7570616f 	.inst	0x7570616f ; undefined
     6e4:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     6e8:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     6ec:	72756f53 	.inst	0x72756f53 ; undefined
     6f0:	4c2f6563 	.inst	0x4c2f6563 ; undefined
     6f4:	2f636269 	umlsl	v9.4s, v19.4h, v3.h[2]
     6f8:	6e697270 	uabdl2	v16.4s, v19.8h, v9.8h
     6fc:	632e6674 	.inst	0x632e6674 ; undefined
     700:	765f5f00 	.inst	0x765f5f00 ; undefined
     704:	696c5f61 	ldpsw	x1, x23, [x27, #-160]
     708:	5f007473 	.inst	0x5f007473 ; undefined
     70c:	5f72765f 	sqshl	d31, d18, #50
     710:	7366666f 	.inst	0x7366666f ; undefined
     714:	67726100 	.inst	0x67726100 ; undefined
     718:	5f5f0073 	.inst	0x5f5f0073 ; undefined
     71c:	745f7276 	.inst	0x745f7276 ; undefined
     720:	7500706f 	.inst	0x7500706f ; undefined
     724:	006d756e 	.inst	0x006d756e ; undefined
     728:	74735f5f 	.inst	0x74735f5f ; undefined
     72c:	006b6361 	.inst	0x006b6361 ; undefined
     730:	74726175 	.inst	0x74726175 ; undefined
     734:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
     738:	49006574 	.inst	0x49006574 ; undefined
     73c:	465f5249 	.inst	0x465f5249 ; undefined
     740:	44005243 	.inst	0x44005243 ; undefined
     744:	495f484c 	.inst	0x495f484c ; undefined
     748:	72005245 	ands	w5, w18, #0x1fffff
     74c:	5f767365 	sqdmlsl	s5, h27, v6.h[3]
     750:	32676572 	.inst	0x32676572 ; undefined
     754:	52425200 	.inst	0x52425200 ; undefined
     758:	5248545f 	.inst	0x5248545f ; undefined
     75c:	4c4c445f 	.inst	0x4c4c445f ; undefined
     760:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     764:	532f2e2e 	.inst	0x532f2e2e ; undefined
     768:	642f436f 	.inst	0x642f436f ; undefined
     76c:	616f6d65 	.inst	0x616f6d65 ; undefined
     770:	432f7570 	.inst	0x432f7570 ; undefined
     774:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     778:	6f532f6e 	.inst	0x6f532f6e ; undefined
     77c:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     780:	62694c2f 	.inst	0x62694c2f ; undefined
     784:	75702f63 	.inst	0x75702f63 ; undefined
     788:	61686374 	.inst	0x61686374 ; undefined
     78c:	00632e72 	.inst	0x00632e72 ; undefined
     790:	65736572 	fnmls	z18.h, p1/m, z11.h, z19.h
     794:	64657672 	.inst	0x64657672 ; undefined
     798:	6765725f 	.inst	0x6765725f ; undefined
     79c:	4d440031 	.inst	0x4d440031 ; undefined
     7a0:	00415341 	.inst	0x00415341 ; undefined
     7a4:	555f4c41 	.inst	0x555f4c41 ; undefined
     7a8:	5f545241 	.inst	0x5f545241 ; undefined
     7ac:	65707954 	fnmls	z20.h, p6/m, z10.h, z16.h
     7b0:	00666544 	.inst	0x00666544 ; undefined
     7b4:	746e6975 	.inst	0x746e6975 ; undefined
     7b8:	745f3233 	.inst	0x745f3233 ; undefined
     7bc:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
     7c0:	532f2e2e 	.inst	0x532f2e2e ; undefined
     7c4:	642f436f 	.inst	0x642f436f ; undefined
     7c8:	616f6d65 	.inst	0x616f6d65 ; undefined
     7cc:	432f7570 	.inst	0x432f7570 ; undefined
     7d0:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
     7d4:	6f532f6e 	.inst	0x6f532f6e ; undefined
     7d8:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
     7dc:	6c65642f 	ldnp	d15, d25, [x1, #-432]
     7e0:	632e7961 	.inst	0x632e7961 ; undefined
     7e4:	73797300 	.inst	0x73797300 ; undefined
     7e8:	5f746e63 	.inst	0x5f746e63 ; undefined
     7ec:	5f746567 	.inst	0x5f746567 ; undefined
     7f0:	71657266 	subs	w6, w19, #0x95c, lsl #12
     7f4:	65645f00 	fnmla	z0.h, p7/m, z24.h, z4.h
     7f8:	5f79616c 	.inst	0x5f79616c ; undefined
     7fc:	65640073 	fmla	z19.h, p0/m, z3.h, z4.h
     800:	5f79616c 	.inst	0x5f79616c ; undefined
     804:	00746e63 	.inst	0x00746e63 ; undefined
     808:	6c65645f 	ldnp	d31, d25, [x2, #-432]
     80c:	755f7961 	.inst	0x755f7961 ; undefined
     810:	45740073 	sqshrunb	z19.s, z3.d, #12
     814:	7400646e 	.inst	0x7400646e ; undefined
     818:	00727543 	.inst	0x00727543 ; undefined
     81c:	5f343675 	.inst	0x5f343675 ; undefined
     820:	5f5f0074 	.inst	0x5f5f0074 ; undefined
     824:	616c6564 	.inst	0x616c6564 ; undefined
     828:	74700079 	.inst	0x74700079 ; undefined
     82c:	6765725f 	.inst	0x6765725f ; undefined
     830:	6f640073 	mla	v19.8h, v3.8h, v4.h[2]
     834:	6e79735f 	uabdl2	v31.4s, v26.8h, v25.8h
     838:	61685f63 	.inst	0x61685f63 ; undefined
     83c:	656c646e 	fnmls	z14.h, p1/m, z3.h, z12.h
     840:	5f6f6400 	.inst	0x5f6f6400 ; undefined
     844:	5f646162 	.inst	0x5f646162 ; undefined
     848:	00716966 	.inst	0x00716966 ; undefined
     84c:	625f6f64 	.inst	0x625f6f64 ; undefined
     850:	695f6461 	ldpsw	x1, x25, [x3, #248]
     854:	64007172 	.inst	0x64007172 ; undefined
     858:	69665f6f 	ldpsw	x15, x23, [x27, #-208]
     85c:	2e2e0071 	uaddl	v17.8h, v3.8b, v14.8b
     860:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
     864:	2f436f53 	.inst	0x2f436f53 ; undefined
     868:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
     86c:	2f757061 	fcmla	v1.4h, v3.4h, v21.h[1], #270
     870:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
     874:	532f6e6f 	.inst	0x532f6e6f ; undefined
     878:	6372756f 	.inst	0x6372756f ; undefined
     87c:	78652f65 	.inst	0x78652f65 ; undefined
     880:	74706563 	.inst	0x74706563 ; undefined
     884:	5f6e6f69 	.inst	0x5f6e6f69 ; undefined
     888:	632e3436 	.inst	0x632e3436 ; undefined
     88c:	5f6f6400 	.inst	0x5f6f6400 ; undefined
     890:	5f646162 	.inst	0x5f646162 ; undefined
     894:	636e7973 	.inst	0x636e7973 ; undefined
     898:	6e617000 	uabdl2	v0.4s, v0.8h, v1.8h
     89c:	64006369 	.inst	0x64006369 ; undefined
     8a0:	72655f6f 	.inst	0x72655f6f ; undefined
     8a4:	00726f72 	.inst	0x00726f72 ; undefined
     8a8:	61747370 	.inst	0x61747370 ; undefined
     8ac:	64006574 	.inst	0x64006574 ; undefined
     8b0:	61625f6f 	.inst	0x61625f6f ; undefined
     8b4:	72655f64 	.inst	0x72655f64 ; undefined
     8b8:	00726f72 	.inst	0x00726f72 ; undefined
     8bc:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     8c0:	64657672 	.inst	0x64657672 ; undefined
     8c4:	495f3231 	.inst	0x495f3231 ; undefined
     8c8:	006e5152 	.inst	0x006e5152 ; undefined
     8cc:	5f434f53 	.inst	0x5f434f53 ; undefined
     8d0:	34544e49 	cbz	w9, a9298 <__stack_size+0xa5298>
     8d4:	52495f36 	.inst	0x52495f36 ; undefined
     8d8:	41006e51 	.inst	0x41006e51 ; undefined
     8dc:	41555f4c 	.inst	0x41555f4c ; undefined
     8e0:	535f5452 	.inst	0x535f5452 ; undefined
     8e4:	5f504f54 	.inst	0x5f504f54 ; undefined
     8e8:	00544942 	.inst	0x00544942 ; undefined
     8ec:	4f495047 	.inst	0x4f495047 ; undefined
     8f0:	52495f32 	.inst	0x52495f32 ; undefined
     8f4:	52006e51 	eor	w17, w18, #0xfffffff
     8f8:	72657365 	.inst	0x72657365 ; undefined
     8fc:	32646576 	.inst	0x32646576 ; undefined
     900:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     904:	4d53006e 	.inst	0x4d53006e ; undefined
     908:	52495f43 	.inst	0x52495f43 ; undefined
     90c:	45006e51 	pmullt	z17.q, z18.d, z0.d
     910:	43494c43 	.inst	0x43494c43 ; undefined
     914:	4952545f 	.inst	0x4952545f ; undefined
     918:	52454747 	.inst	0x52454747 ; undefined
     91c:	7079545f 	adr	xzr, f33a7 <__stack_size+0xef3a7>
     920:	4f530065 	.inst	0x4f530065 ; undefined
     924:	4e495f43 	.inst	0x4e495f43 ; undefined
     928:	5f333554 	.inst	0x5f333554 ; undefined
     92c:	6e515249 	.inst	0x6e515249 ; undefined
     930:	434f5300 	.inst	0x434f5300 ; undefined
     934:	544e495f 	.inst	0x544e495f ; undefined
     938:	495f3638 	.inst	0x495f3638 ; undefined
     93c:	006e5152 	.inst	0x006e5152 ; undefined
     940:	5f434f53 	.inst	0x5f434f53 ; undefined
     944:	35544e49 	cbnz	w9, a930c <__stack_size+0xa530c>
     948:	52495f38 	.inst	0x52495f38 ; undefined
     94c:	53006e51 	ubfx	w17, w18, #0, #28
     950:	495f434f 	.inst	0x495f434f ; undefined
     954:	4d5f544e 	.inst	0x4d5f544e ; undefined
     958:	47005841 	.inst	0x47005841 ; undefined
     95c:	304f4950 	adr	x16, 9f285 <__stack_size+0x9b285>
     960:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     964:	4f53006e 	.inst	0x4f53006e ; undefined
     968:	4e495f43 	.inst	0x4e495f43 ; undefined
     96c:	5f373254 	.inst	0x5f373254 ; undefined
     970:	6e515249 	.inst	0x6e515249 ; undefined
     974:	73655200 	.inst	0x73655200 ; undefined
     978:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     97c:	5f343164 	.inst	0x5f343164 ; undefined
     980:	6e515249 	.inst	0x6e515249 ; undefined
     984:	73655200 	.inst	0x73655200 ; undefined
     988:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     98c:	5f333164 	.inst	0x5f333164 ; undefined
     990:	6e515249 	.inst	0x6e515249 ; undefined
     994:	434f5300 	.inst	0x434f5300 ; undefined
     998:	544e495f 	.inst	0x544e495f ; undefined
     99c:	495f3734 	.inst	0x495f3734 ; undefined
     9a0:	006e5152 	.inst	0x006e5152 ; undefined
     9a4:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     9a8:	64657672 	.inst	0x64657672 ; undefined
     9ac:	52495f30 	.inst	0x52495f30 ; undefined
     9b0:	53006e51 	ubfx	w17, w18, #0, #28
     9b4:	495f434f 	.inst	0x495f434f ; undefined
     9b8:	3138544e 	adds	w14, w2, #0xe15
     9bc:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     9c0:	4f53006e 	.inst	0x4f53006e ; undefined
     9c4:	4e495f43 	.inst	0x4e495f43 ; undefined
     9c8:	5f303354 	.inst	0x5f303354 ; undefined
     9cc:	6e515249 	.inst	0x6e515249 ; undefined
     9d0:	434f5300 	.inst	0x434f5300 ; undefined
     9d4:	544e495f 	.inst	0x544e495f ; undefined
     9d8:	495f3736 	.inst	0x495f3736 ; undefined
     9dc:	006e5152 	.inst	0x006e5152 ; undefined
     9e0:	5f434f53 	.inst	0x5f434f53 ; undefined
     9e4:	33544e49 	.inst	0x33544e49 ; undefined
     9e8:	52495f39 	.inst	0x52495f39 ; undefined
     9ec:	52006e51 	eor	w17, w18, #0xfffffff
     9f0:	72657365 	.inst	0x72657365 ; undefined
     9f4:	33646576 	.inst	0x33646576 ; undefined
     9f8:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     9fc:	4f53006e 	.inst	0x4f53006e ; undefined
     a00:	4e495f43 	.inst	0x4e495f43 ; undefined
     a04:	5f303554 	.inst	0x5f303554 ; undefined
     a08:	6e515249 	.inst	0x6e515249 ; undefined
     a0c:	434f5300 	.inst	0x434f5300 ; undefined
     a10:	544e495f 	.inst	0x544e495f ; undefined
     a14:	495f3232 	.inst	0x495f3232 ; undefined
     a18:	006e5152 	.inst	0x006e5152 ; undefined
     a1c:	5f434f53 	.inst	0x5f434f53 ; undefined
     a20:	35544e49 	cbnz	w9, a93e8 <__stack_size+0xa53e8>
     a24:	52495f39 	.inst	0x52495f39 ; undefined
     a28:	53006e51 	ubfx	w17, w18, #0, #28
     a2c:	495f434f 	.inst	0x495f434f ; undefined
     a30:	3833544e 	.inst	0x3833544e ; undefined
     a34:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     a38:	4345006e 	.inst	0x4345006e ; undefined
     a3c:	5f43494c 	.inst	0x5f43494c ; undefined
     a40:	5447454e 	b.al	8f2e8 <__stack_size+0x8b2e8>
     a44:	5f455649 	shl	d9, d18, #5
     a48:	45474445 	saddwt	z5.h, z2.h, z7.b
     a4c:	4952545f 	.inst	0x4952545f ; undefined
     a50:	52454747 	.inst	0x52454747 ; undefined
     a54:	73655200 	.inst	0x73655200 ; undefined
     a58:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     a5c:	495f3664 	.inst	0x495f3664 ; undefined
     a60:	006e5152 	.inst	0x006e5152 ; undefined
     a64:	5f434f53 	.inst	0x5f434f53 ; undefined
     a68:	37544e49 	tbnz	w9, #10, ffffffffffff9430 <_sp+0xffffffff9efb9430>
     a6c:	52495f30 	.inst	0x52495f30 ; undefined
     a70:	53006e51 	ubfx	w17, w18, #0, #28
     a74:	495f434f 	.inst	0x495f434f ; undefined
     a78:	3234544e 	orr	w14, w2, #0xfffff003
     a7c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     a80:	4f53006e 	.inst	0x4f53006e ; undefined
     a84:	4e495f43 	.inst	0x4e495f43 ; undefined
     a88:	5f393754 	.inst	0x5f393754 ; undefined
     a8c:	6e515249 	.inst	0x6e515249 ; undefined
     a90:	434f5300 	.inst	0x434f5300 ; undefined
     a94:	544e495f 	.inst	0x544e495f ; undefined
     a98:	495f3832 	.inst	0x495f3832 ; undefined
     a9c:	006e5152 	.inst	0x006e5152 ; undefined
     aa0:	5f434f53 	.inst	0x5f434f53 ; undefined
     aa4:	31544e49 	adds	w9, w18, #0x513, lsl #12
     aa8:	52495f39 	.inst	0x52495f39 ; undefined
     aac:	53006e51 	ubfx	w17, w18, #0, #28
     ab0:	495f434f 	.inst	0x495f434f ; undefined
     ab4:	3039544e 	adr	x14, 7353d <__stack_size+0x6f53d>
     ab8:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     abc:	4f53006e 	.inst	0x4f53006e ; undefined
     ac0:	4e495f43 	.inst	0x4e495f43 ; undefined
     ac4:	5f323654 	.inst	0x5f323654 ; undefined
     ac8:	6e515249 	.inst	0x6e515249 ; undefined
     acc:	73655200 	.inst	0x73655200 ; undefined
     ad0:	65767265 	fnmls	z5.h, p4/m, z19.h, z22.h
     ad4:	495f3764 	.inst	0x495f3764 ; undefined
     ad8:	006e5152 	.inst	0x006e5152 ; undefined
     adc:	5f434f53 	.inst	0x5f434f53 ; undefined
     ae0:	34544e49 	cbz	w9, a94a8 <__stack_size+0xa54a8>
     ae4:	52495f34 	.inst	0x52495f34 ; undefined
     ae8:	53006e51 	ubfx	w17, w18, #0, #28
     aec:	495f434f 	.inst	0x495f434f ; undefined
     af0:	3238544e 	orr	w14, w2, #0x3fffff00
     af4:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     af8:	4f53006e 	.inst	0x4f53006e ; undefined
     afc:	4e495f43 	.inst	0x4e495f43 ; undefined
     b00:	5f313354 	.inst	0x5f313354 ; undefined
     b04:	6e515249 	.inst	0x6e515249 ; undefined
     b08:	434f5300 	.inst	0x434f5300 ; undefined
     b0c:	544e495f 	.inst	0x544e495f ; undefined
     b10:	495f3738 	.inst	0x495f3738 ; undefined
     b14:	006e5152 	.inst	0x006e5152 ; undefined
     b18:	5f434f53 	.inst	0x5f434f53 ; undefined
     b1c:	35544e49 	cbnz	w9, a94e4 <__stack_size+0xa54e4>
     b20:	52495f31 	.inst	0x52495f31 ; undefined
     b24:	53006e51 	ubfx	w17, w18, #0, #28
     b28:	495f434f 	.inst	0x495f434f ; undefined
     b2c:	3332544e 	.inst	0x3332544e ; undefined
     b30:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     b34:	7953006e 	ldrh	w14, [x3, #2432]
     b38:	6d657473 	ldp	d19, d29, [x3, #-432]
     b3c:	65726f43 	fnmls	z3.h, p3/m, z26.h, z18.h
     b40:	636f6c43 	.inst	0x636f6c43 ; undefined
     b44:	7953006b 	ldrh	w11, [x3, #2432]
     b48:	6d657473 	ldp	d19, d29, [x3, #-432]
     b4c:	6e6e6142 	rsubhn2	v2.8h, v10.4s, v14.4s
     b50:	72507265 	.inst	0x72507265 ; undefined
     b54:	00746e69 	.inst	0x00746e69 ; undefined
     b58:	67697274 	.inst	0x67697274 ; undefined
     b5c:	646f6d5f 	.inst	0x646f6d5f ; undefined
     b60:	79530065 	ldrh	w5, [x3, #2432]
     b64:	6d695473 	ldp	d19, d21, [x3, #-368]
     b68:	495f7265 	.inst	0x495f7265 ; undefined
     b6c:	006e5152 	.inst	0x006e5152 ; undefined
     b70:	5f434f53 	.inst	0x5f434f53 ; undefined
     b74:	33544e49 	.inst	0x33544e49 ; undefined
     b78:	52495f35 	.inst	0x52495f35 ; undefined
     b7c:	52006e51 	eor	w17, w18, #0xfffffff
     b80:	72657365 	.inst	0x72657365 ; undefined
     b84:	38646576 	.inst	0x38646576 ; undefined
     b88:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     b8c:	4f53006e 	.inst	0x4f53006e ; undefined
     b90:	4e495f43 	.inst	0x4e495f43 ; undefined
     b94:	5f333854 	.inst	0x5f333854 ; undefined
     b98:	6e515249 	.inst	0x6e515249 ; undefined
     b9c:	434f5300 	.inst	0x434f5300 ; undefined
     ba0:	544e495f 	.inst	0x544e495f ; undefined
     ba4:	495f3535 	.inst	0x495f3535 ; undefined
     ba8:	006e5152 	.inst	0x006e5152 ; undefined
     bac:	74737953 	.inst	0x74737953 ; undefined
     bb0:	6f436d65 	.inst	0x6f436d65 ; undefined
     bb4:	6c436572 	ldnp	d18, d25, [x11, #48]
     bb8:	556b636f 	.inst	0x556b636f ; undefined
     bbc:	74616470 	.inst	0x74616470 ; undefined
     bc0:	4f530065 	.inst	0x4f530065 ; undefined
     bc4:	4e495f43 	.inst	0x4e495f43 ; undefined
     bc8:	5f353754 	.inst	0x5f353754 ; undefined
     bcc:	6e515249 	.inst	0x6e515249 ; undefined
     bd0:	434f5300 	.inst	0x434f5300 ; undefined
     bd4:	544e495f 	.inst	0x544e495f ; undefined
     bd8:	495f3432 	.inst	0x495f3432 ; undefined
     bdc:	006e5152 	.inst	0x006e5152 ; undefined
     be0:	4f495047 	.inst	0x4f495047 ; undefined
     be4:	52495f33 	.inst	0x52495f33 ; undefined
     be8:	52006e51 	eor	w17, w18, #0xfffffff
     bec:	72657365 	.inst	0x72657365 ; undefined
     bf0:	31646576 	adds	w22, w11, #0x919, lsl #12
     bf4:	52495f30 	.inst	0x52495f30 ; undefined
     bf8:	41006e51 	.inst	0x41006e51 ; undefined
     bfc:	41555f4c 	.inst	0x41555f4c ; undefined
     c00:	535f5452 	.inst	0x535f5452 ; undefined
     c04:	5f504f54 	.inst	0x5f504f54 ; undefined
     c08:	5f544942 	.inst	0x5f544942 ; undefined
     c0c:	00357031 	.inst	0x00357031 ; NYI
     c10:	5f434f53 	.inst	0x5f434f53 ; undefined
     c14:	36544e49 	tbz	w9, #10, ffffffffffff95dc <_sp+0xffffffff9efb95dc>
     c18:	52495f34 	.inst	0x52495f34 ; undefined
     c1c:	2e006e51 	.inst	0x2e006e51 ; undefined
     c20:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
     c24:	436f532f 	.inst	0x436f532f ; undefined
     c28:	6d65642f 	ldp	d15, d25, [x1, #-432]
     c2c:	7570616f 	.inst	0x7570616f ; undefined
     c30:	6d6f432f 	ldp	d15, d16, [x25, #-272]
     c34:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
     c38:	72756f53 	.inst	0x72756f53 ; undefined
     c3c:	732f6563 	.inst	0x732f6563 ; undefined
     c40:	65747379 	fnmls	z25.h, p4/m, z27.h, z20.h
     c44:	65645f6d 	fnmla	z13.h, p7/m, z27.h, z4.h
     c48:	70616f6d 	adr	x13, c3a37 <__stack_size+0xbfa37>
     c4c:	00632e75 	.inst	0x00632e75 ; undefined
     c50:	65736552 	fnmls	z18.h, p1/m, z10.h, z19.h
     c54:	64657672 	.inst	0x64657672 ; undefined
     c58:	52495f39 	.inst	0x52495f39 ; undefined
     c5c:	53006e51 	ubfx	w17, w18, #0, #28
     c60:	495f434f 	.inst	0x495f434f ; undefined
     c64:	3635544e 	tbz	w14, #6, ffffffffffffb6ec <_sp+0xffffffff9efbb6ec>
     c68:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     c6c:	4155006e 	.inst	0x4155006e ; undefined
     c70:	425f5452 	.inst	0x425f5452 ; undefined
     c74:	4c5f5449 	.inst	0x4c5f5449 ; undefined
     c78:	54474e45 	b.pl	8f640 <__stack_size+0x8b640>  // b.nfrst
     c7c:	00355f48 	.inst	0x00355f48 ; NYI
     c80:	54524155 	.inst	0x54524155 ; undefined
     c84:	5449425f 	.inst	0x5449425f ; undefined
     c88:	4e454c5f 	.inst	0x4e454c5f ; undefined
     c8c:	5f485447 	shl	d7, d2, #8
     c90:	41550036 	.inst	0x41550036 ; undefined
     c94:	425f5452 	.inst	0x425f5452 ; undefined
     c98:	4c5f5449 	.inst	0x4c5f5449 ; undefined
     c9c:	54474e45 	b.pl	8f664 <__stack_size+0x8b664>  // b.nfrst
     ca0:	00375f48 	.inst	0x00375f48 ; NYI
     ca4:	5f434f53 	.inst	0x5f434f53 ; undefined
     ca8:	37544e49 	tbnz	w9, #10, ffffffffffff9670 <_sp+0xffffffff9efb9670>
     cac:	52495f36 	.inst	0x52495f36 ; undefined
     cb0:	53006e51 	ubfx	w17, w18, #0, #28
     cb4:	495f434f 	.inst	0x495f434f ; undefined
     cb8:	3834544e 	.inst	0x3834544e ; undefined
     cbc:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     cc0:	4c41006e 	.inst	0x4c41006e ; undefined
     cc4:	5241555f 	.inst	0x5241555f ; undefined
     cc8:	49425f54 	.inst	0x49425f54 ; undefined
     ccc:	454c5f54 	usubwt	z20.h, z26.h, z12.b
     cd0:	4854474e 	ldxrh	w14, [x26]
     cd4:	5f4c4100 	.inst	0x5f4c4100 ; undefined
     cd8:	74726175 	.inst	0x74726175 ; undefined
     cdc:	6f74735f 	fcmla	v31.8h, v26.8h, v20.h[1], #270
     ce0:	69625f70 	ldpsw	x16, x23, [x27, #-240]
     ce4:	4f530074 	.inst	0x4f530074 ; undefined
     ce8:	4e495f43 	.inst	0x4e495f43 ; undefined
     cec:	5f383654 	.inst	0x5f383654 ; undefined
     cf0:	6e515249 	.inst	0x6e515249 ; undefined
     cf4:	4c434500 	.inst	0x4c434500 ; undefined
     cf8:	4c5f4349 	.inst	0x4c5f4349 ; undefined
     cfc:	4c455645 	.inst	0x4c455645 ; undefined
     d00:	4952545f 	.inst	0x4952545f ; undefined
     d04:	52454747 	.inst	0x52454747 ; undefined
     d08:	52415500 	.inst	0x52415500 ; undefined
     d0c:	49425f54 	.inst	0x49425f54 ; undefined
     d10:	454c5f54 	usubwt	z20.h, z26.h, z12.b
     d14:	4854474e 	ldxrh	w14, [x26]
     d18:	5300385f 	ubfx	wzr, w2, #0, #15
     d1c:	495f434f 	.inst	0x495f434f ; undefined
     d20:	3838544e 	.inst	0x3838544e ; undefined
     d24:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     d28:	4f53006e 	.inst	0x4f53006e ; undefined
     d2c:	4e495f43 	.inst	0x4e495f43 ; undefined
     d30:	5f373354 	.inst	0x5f373354 ; undefined
     d34:	6e515249 	.inst	0x6e515249 ; undefined
     d38:	73795300 	.inst	0x73795300 ; undefined
     d3c:	496d6574 	.inst	0x496d6574 ; undefined
     d40:	0074696e 	.inst	0x0074696e ; undefined
     d44:	5f434f53 	.inst	0x5f434f53 ; undefined
     d48:	36544e49 	tbz	w9, #10, ffffffffffff9710 <_sp+0xffffffff9efb9710>
     d4c:	52495f33 	.inst	0x52495f33 ; undefined
     d50:	53006e51 	ubfx	w17, w18, #0, #28
     d54:	495f434f 	.inst	0x495f434f ; undefined
     d58:	3032544e 	adr	x14, 657e1 <__stack_size+0x617e1>
     d5c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     d60:	4f53006e 	.inst	0x4f53006e ; undefined
     d64:	4e495f43 	.inst	0x4e495f43 ; undefined
     d68:	5f373554 	.inst	0x5f373554 ; undefined
     d6c:	6e515249 	.inst	0x6e515249 ; undefined
     d70:	434f5300 	.inst	0x434f5300 ; undefined
     d74:	544e495f 	.inst	0x544e495f ; undefined
     d78:	495f3932 	.inst	0x495f3932 ; undefined
     d7c:	006e5152 	.inst	0x006e5152 ; undefined
     d80:	5f434f53 	.inst	0x5f434f53 ; undefined
     d84:	33544e49 	.inst	0x33544e49 ; undefined
     d88:	52495f36 	.inst	0x52495f36 ; undefined
     d8c:	45006e51 	pmullt	z17.q, z18.d, z0.d
     d90:	43494c43 	.inst	0x43494c43 ; undefined
     d94:	58414d5f 	ldr	xzr, 8373c <__stack_size+0x7f73c>
     d98:	4952545f 	.inst	0x4952545f ; undefined
     d9c:	52454747 	.inst	0x52454747 ; undefined
     da0:	72705f00 	.inst	0x72705f00 ; undefined
     da4:	69616d65 	ldpsw	x5, x27, [x11, #-248]
     da8:	6e695f6e 	uqrshl	v14.8h, v27.8h, v9.8h
     dac:	58007469 	ldr	x9, 1c38 <__stack_size-0x23c8>
     db0:	5f304345 	.inst	0x5f304345 ; undefined
     db4:	6e515249 	.inst	0x6e515249 ; undefined
     db8:	434f5300 	.inst	0x434f5300 ; undefined
     dbc:	544e495f 	.inst	0x544e495f ; undefined
     dc0:	495f3139 	.inst	0x495f3139 ; undefined
     dc4:	006e5152 	.inst	0x006e5152 ; undefined
     dc8:	5f434f53 	.inst	0x5f434f53 ; undefined
     dcc:	34544e49 	cbz	w9, a9794 <__stack_size+0xa5794>
     dd0:	52495f30 	.inst	0x52495f30 ; undefined
     dd4:	52006e51 	eor	w17, w18, #0xfffffff
     dd8:	72657365 	.inst	0x72657365 ; undefined
     ddc:	31646576 	adds	w22, w11, #0x919, lsl #12
     de0:	52495f35 	.inst	0x52495f35 ; undefined
     de4:	53006e51 	ubfx	w17, w18, #0, #28
     de8:	495f434f 	.inst	0x495f434f ; undefined
     dec:	3934544e 	strb	w14, [x2, #3349]
     df0:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     df4:	4f53006e 	.inst	0x4f53006e ; undefined
     df8:	4e495f43 	.inst	0x4e495f43 ; undefined
     dfc:	5f303654 	.inst	0x5f303654 ; undefined
     e00:	6e515249 	.inst	0x6e515249 ; undefined
     e04:	434f5300 	.inst	0x434f5300 ; undefined
     e08:	544e495f 	.inst	0x544e495f ; undefined
     e0c:	495f3233 	.inst	0x495f3233 ; undefined
     e10:	006e5152 	.inst	0x006e5152 ; undefined
     e14:	5f434f53 	.inst	0x5f434f53 ; undefined
     e18:	36544e49 	tbz	w9, #10, ffffffffffff97e0 <_sp+0xffffffff9efb97e0>
     e1c:	52495f39 	.inst	0x52495f39 ; undefined
     e20:	52006e51 	eor	w17, w18, #0xfffffff
     e24:	72657365 	.inst	0x72657365 ; undefined
     e28:	35646576 	cbnz	w22, c9ad4 <__stack_size+0xc5ad4>
     e2c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     e30:	6f64006e 	mla	v14.8h, v3.8h, v4.h[2]
     e34:	6f6c6e77 	.inst	0x6f6c6e77 ; undefined
     e38:	6d5f6461 	ldp	d1, d25, [x3, #496]
     e3c:	7365646f 	.inst	0x7365646f ; undefined
     e40:	434f5300 	.inst	0x434f5300 ; undefined
     e44:	544e495f 	.inst	0x544e495f ; undefined
     e48:	495f3038 	.inst	0x495f3038 ; undefined
     e4c:	006e5152 	.inst	0x006e5152 ; undefined
     e50:	5f434f53 	.inst	0x5f434f53 ; undefined
     e54:	35544e49 	cbnz	w9, a981c <__stack_size+0xa581c>
     e58:	52495f32 	.inst	0x52495f32 ; undefined
     e5c:	53006e51 	ubfx	w17, w18, #0, #28
     e60:	495f434f 	.inst	0x495f434f ; undefined
     e64:	3938544e 	strb	w14, [x2, #3605]
     e68:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     e6c:	6c41006e 	ldnp	d14, d0, [x3, #16]
     e70:	74726155 	.inst	0x74726155 ; undefined
     e74:	696e495f 	ldpsw	xzr, x18, [x10, #-144]
     e78:	4c410074 	.inst	0x4c410074 ; undefined
     e7c:	5241555f 	.inst	0x5241555f ; undefined
     e80:	54535f54 	.inst	0x54535f54 ; undefined
     e84:	425f504f 	.inst	0x425f504f ; undefined
     e88:	325f5449 	.inst	0x325f5449 ; undefined
     e8c:	434f5300 	.inst	0x434f5300 ; undefined
     e90:	544e495f 	.inst	0x544e495f ; undefined
     e94:	495f3132 	.inst	0x495f3132 ; undefined
     e98:	006e5152 	.inst	0x006e5152 ; undefined
     e9c:	6e515249 	.inst	0x6e515249 ; undefined
     ea0:	7079545f 	adr	xzr, f392b <__stack_size+0xef92b>
     ea4:	44570065 	.inst	0x44570065 ; undefined
     ea8:	52495f54 	.inst	0x52495f54 ; undefined
     eac:	58006e51 	ldr	x17, 1c74 <__stack_size-0x238c>
     eb0:	5f314345 	.inst	0x5f314345 ; undefined
     eb4:	6e515249 	.inst	0x6e515249 ; undefined
     eb8:	434f5300 	.inst	0x434f5300 ; undefined
     ebc:	544e495f 	.inst	0x544e495f ; undefined
     ec0:	495f3239 	.inst	0x495f3239 ; undefined
     ec4:	006e5152 	.inst	0x006e5152 ; undefined
     ec8:	5f434f53 	.inst	0x5f434f53 ; undefined
     ecc:	34544e49 	cbz	w9, a9894 <__stack_size+0xa5894>
     ed0:	52495f31 	.inst	0x52495f31 ; undefined
     ed4:	52006e51 	eor	w17, w18, #0xfffffff
     ed8:	72657365 	.inst	0x72657365 ; undefined
     edc:	31646576 	adds	w22, w11, #0x919, lsl #12
     ee0:	52495f36 	.inst	0x52495f36 ; undefined
     ee4:	52006e51 	eor	w17, w18, #0xfffffff
     ee8:	72657365 	.inst	0x72657365 ; undefined
     eec:	34646576 	cbz	w22, c9b98 <__stack_size+0xc5b98>
     ef0:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     ef4:	4345006e 	.inst	0x4345006e ; undefined
     ef8:	5f43494c 	.inst	0x5f43494c ; undefined
     efc:	54534f50 	.inst	0x54534f50 ; undefined
     f00:	5f455649 	shl	d9, d18, #5
     f04:	45474445 	saddwt	z5.h, z2.h, z7.b
     f08:	4952545f 	.inst	0x4952545f ; undefined
     f0c:	52454747 	.inst	0x52454747 ; undefined
     f10:	434f5300 	.inst	0x434f5300 ; undefined
     f14:	544e495f 	.inst	0x544e495f ; undefined
     f18:	495f3136 	.inst	0x495f3136 ; undefined
     f1c:	006e5152 	.inst	0x006e5152 ; undefined
     f20:	5f434f53 	.inst	0x5f434f53 ; undefined
     f24:	33544e49 	.inst	0x33544e49 ; undefined
     f28:	52495f33 	.inst	0x52495f33 ; undefined
     f2c:	45006e51 	pmullt	z17.q, z18.d, z0.d
     f30:	6c62616e 	ldnp	d14, d24, [x11, #-480]
     f34:	6e697065 	uabdl2	v5.4s, v3.8h, v9.8h
     f38:	3178756d 	adds	w13, w11, #0xe1d, lsl #12
     f3c:	73795300 	.inst	0x73795300 ; undefined
     f40:	656d6954 	fnmls	z20.h, p2/m, z10.h, z13.h
     f44:	5f575372 	.inst	0x5f575372 ; undefined
     f48:	6e515249 	.inst	0x6e515249 ; undefined
     f4c:	4c434500 	.inst	0x4c434500 ; undefined
     f50:	545f4349 	b.ls	bf7b8 <__stack_size+0xbb7b8>  // b.plast
     f54:	47474952 	.inst	0x47474952 ; undefined
     f58:	52005245 	eor	w5, w18, #0x1fffff
     f5c:	72657365 	.inst	0x72657365 ; undefined
     f60:	31646576 	adds	w22, w11, #0x919, lsl #12
     f64:	52495f31 	.inst	0x52495f31 ; undefined
     f68:	53006e51 	ubfx	w17, w18, #0, #28
     f6c:	495f434f 	.inst	0x495f434f ; undefined
     f70:	3532544e 	cbnz	w14, 659f8 <__stack_size+0x619f8>
     f74:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     f78:	5047006e 	adr	x14, 8ef86 <__stack_size+0x8af86>
     f7c:	5f314f49 	.inst	0x5f314f49 ; undefined
     f80:	6e515249 	.inst	0x6e515249 ; undefined
     f84:	5f4c4100 	.inst	0x5f4c4100 ; undefined
     f88:	54524155 	.inst	0x54524155 ; undefined
     f8c:	4f54535f 	.inst	0x4f54535f ; undefined
     f90:	49425f50 	.inst	0x49425f50 ; undefined
     f94:	00315f54 	.inst	0x00315f54 ; NYI
     f98:	5f434f53 	.inst	0x5f434f53 ; undefined
     f9c:	39544e49 	ldrb	w9, [x18, #1299]
     fa0:	52495f33 	.inst	0x52495f33 ; undefined
     fa4:	53006e51 	ubfx	w17, w18, #0, #28
     fa8:	495f434f 	.inst	0x495f434f ; undefined
     fac:	3536544e 	cbnz	w14, 6da34 <__stack_size+0x69a34>
     fb0:	5152495f 	sub	wsp, w10, #0x492, lsl #12
     fb4:	6552006e 	fadd	z14.h, z3.h, z18.h
     fb8:	76726573 	.inst	0x76726573 ; undefined
     fbc:	5f316465 	.inst	0x5f316465 ; undefined
     fc0:	6e515249 	.inst	0x6e515249 ; undefined
     fc4:	434f5300 	.inst	0x434f5300 ; undefined
     fc8:	544e495f 	.inst	0x544e495f ; undefined
     fcc:	495f3538 	.inst	0x495f3538 ; undefined
     fd0:	006e5152 	.inst	0x006e5152 ; undefined
     fd4:	5f434f53 	.inst	0x5f434f53 ; undefined
     fd8:	33544e49 	.inst	0x33544e49 ; undefined
     fdc:	52495f34 	.inst	0x52495f34 ; undefined
     fe0:	45006e51 	pmullt	z17.q, z18.d, z0.d
     fe4:	43494c43 	.inst	0x43494c43 ; undefined
     fe8:	6765525f 	.inst	0x6765525f ; undefined
     fec:	65747369 	fnmls	z9.h, p4/m, z27.h, z20.h
     ff0:	52495f72 	.inst	0x52495f72 ; undefined
     ff4:	4c410051 	.inst	0x4c410051 ; undefined
     ff8:	7261755f 	.inst	0x7261755f ; undefined
     ffc:	69625f74 	ldpsw	x20, x23, [x27, #-240]
    1000:	656c5f74 	fnmla	z20.h, p7/m, z27.h, z12.h
    1004:	6874676e 	.inst	0x6874676e ; undefined
    1008:	44415800 	umlslb	z0.h, z0.b, z1.b
    100c:	52495f43 	.inst	0x52495f43 ; undefined
    1010:	53006e51 	ubfx	w17, w18, #0, #28
    1014:	495f434f 	.inst	0x495f434f ; undefined
    1018:	3435544e 	cbz	w14, 6baa0 <__stack_size+0x67aa0>
    101c:	5152495f 	sub	wsp, w10, #0x492, lsl #12
    1020:	4f53006e 	.inst	0x4f53006e ; undefined
    1024:	4e495f43 	.inst	0x4e495f43 ; undefined
    1028:	5f363254 	.inst	0x5f363254 ; undefined
    102c:	6e515249 	.inst	0x6e515249 ; undefined
    1030:	434f5300 	.inst	0x434f5300 ; undefined
    1034:	544e495f 	.inst	0x544e495f ; undefined
    1038:	495f3438 	.inst	0x495f3438 ; undefined
    103c:	006e5152 	.inst	0x006e5152 ; undefined
    1040:	645f6369 	fcmla	z9.h, p0/m, z27.h, z31.h, #270
    1044:	5f617461 	sqshl	d1, d3, #33
    1048:	5f646d63 	.inst	0x5f646d63 ; undefined
    104c:	73746962 	.inst	0x73746962 ; undefined
    1050:	5f434900 	.inst	0x5f434900 ; undefined
    1054:	56414c53 	.inst	0x56414c53 ; undefined
    1058:	49445f45 	.inst	0x49445f45 ; undefined
    105c:	4c424153 	.inst	0x4c424153 ; undefined
    1060:	6c410045 	ldnp	d5, d0, [x2, #16]
    1064:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    1068:	61736944 	.inst	0x61736944 ; undefined
    106c:	00656c62 	.inst	0x00656c62 ; undefined
    1070:	32496c41 	.inst	0x32496c41 ; undefined
    1074:	6c435f63 	ldnp	d3, d23, [x27, #48]
    1078:	536b636f 	.inst	0x536b636f ; undefined
    107c:	70757465 	adr	x5, ebf0b <__stack_size+0xe7f0b>
    1080:	496c4100 	.inst	0x496c4100 ; undefined
    1084:	535f6332 	.inst	0x535f6332 ; undefined
    1088:	656c6b70 	fnmls	z16.h, p2/m, z27.h, z12.h
    108c:	6c41006e 	ldnp	d14, d0, [x3, #16]
    1090:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    1094:	43717249 	.inst	0x43717249 ; undefined
    1098:	6c41726c 	ldnp	d12, d28, [x19, #16]
    109c:	4349006c 	.inst	0x4349006c ; undefined
    10a0:	4e4f435f 	.inst	0x4e4f435f ; undefined
    10a4:	56535200 	.inst	0x56535200 ; undefined
    10a8:	43495f44 	.inst	0x43495f44 ; undefined
    10ac:	4e4f435f 	.inst	0x4e4f435f ; undefined
    10b0:	7700325f 	.inst	0x7700325f ; undefined
    10b4:	72657461 	.inst	0x72657461 ; undefined
    10b8:	6576656c 	fnmls	z12.h, p1/m, z11.h, z22.h
    10bc:	4349006c 	.inst	0x4349006c ; undefined
    10c0:	414d445f 	.inst	0x414d445f ; undefined
    10c4:	4c44525f 	.inst	0x4c44525f ; undefined
    10c8:	414d0052 	.inst	0x414d0052 ; undefined
    10cc:	52455453 	.inst	0x52455453 ; undefined
    10d0:	444f4d5f 	umlalt	z31.h, z10.b, z15.b
    10d4:	6c410045 	ldnp	d5, d0, [x2, #16]
    10d8:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    10dc:	4d746553 	.inst	0x4d746553 ; undefined
    10e0:	65747361 	fnmls	z1.h, p4/m, z27.h, z20.h
    10e4:	64644172 	bfdot	z18.s, z11.h, z4.h[0]
    10e8:	73736572 	.inst	0x73736572 ; undefined
    10ec:	65646f4d 	fnmls	z13.h, p3/m, z26.h, z4.h
    10f0:	5f737300 	sqdmlsl	s0, h24, v3.h[3]
    10f4:	5f6c6373 	.inst	0x5f6c6373 ; undefined
    10f8:	00776f6c 	.inst	0x00776f6c ; undefined
    10fc:	525f4349 	.inst	0x525f4349 ; undefined
    1100:	524c4658 	.inst	0x524c4658 ; undefined
    1104:	5f636900 	.inst	0x5f636900 ; undefined
    1108:	62616e65 	.inst	0x62616e65 ; undefined
    110c:	5400656c 	b.gt	1db8 <__stack_size-0x2248>
    1110:	4d435f58 	.inst	0x4d435f58 ; undefined
    1114:	4c425f44 	.inst	0x4c425f44 ; undefined
    1118:	004b434f 	.inst	0x004b434f ; undefined
    111c:	32496c41 	.inst	0x32496c41 ; undefined
    1120:	73495f63 	.inst	0x73495f63 ; undefined
    1124:	69467852 	ldpsw	x18, x30, [x2, #48]
    1128:	6d456f66 	ldp	d6, d27, [x27, #80]
    112c:	00797470 	.inst	0x00797470 ; undefined
    1130:	465f4349 	.inst	0x465f4349 ; undefined
    1134:	43535f53 	.inst	0x43535f53 ; undefined
    1138:	434c5f4c 	.inst	0x434c5f4c ; undefined
    113c:	4900544e 	.inst	0x4900544e ; undefined
    1140:	4e495f43 	.inst	0x4e495f43 ; undefined
    1144:	535f5254 	.inst	0x535f5254 ; undefined
    1148:	00544154 	.inst	0x00544154 ; undefined
    114c:	5f564c53 	.inst	0x5f564c53 ; undefined
    1150:	444c4f48 	umlalt	z8.h, z26.b, z12.b
    1154:	5f58525f 	.inst	0x5f58525f ; undefined
    1158:	4f464946 	.inst	0x4f464946 ; undefined
    115c:	4c55465f 	.inst	0x4c55465f ; undefined
    1160:	5f4d004c 	.inst	0x5f4d004c ; undefined
    1164:	555f5852 	.inst	0x555f5852 ; undefined
    1168:	5245444e 	.inst	0x5245444e ; undefined
    116c:	496c4100 	.inst	0x496c4100 ; undefined
    1170:	525f6332 	.inst	0x525f6332 ; undefined
    1174:	00646165 	.inst	0x00646165 ; undefined
    1178:	535f4349 	.inst	0x535f4349 ; undefined
    117c:	43535f53 	.inst	0x43535f53 ; undefined
    1180:	434c5f4c 	.inst	0x434c5f4c ; undefined
    1184:	6900544e 	stgp	x14, x21, [x2]
    1188:	6c635f63 	ldnp	d3, d23, [x27, #-464]
    118c:	6c41006b 	ldnp	d11, d0, [x3, #16]
    1190:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    1194:	62616e45 	.inst	0x62616e45 ; undefined
    1198:	614d656c 	.inst	0x614d656c ; undefined
    119c:	72657473 	.inst	0x72657473 ; undefined
    11a0:	56535200 	.inst	0x56535200 ; undefined
    11a4:	43495f44 	.inst	0x43495f44 ; undefined
    11a8:	4e4f435f 	.inst	0x4e4f435f ; undefined
    11ac:	5200315f 	eor	wsp, w10, #0x1fff
    11b0:	00454e46 	.inst	0x00454e46 ; undefined
    11b4:	44565352 	smlslb	z18.h, z26.b, z22.b
    11b8:	5f43495f 	.inst	0x5f43495f ; undefined
    11bc:	00524154 	.inst	0x00524154 ; undefined
    11c0:	32496c41 	.inst	0x32496c41 ; undefined
    11c4:	72495f63 	.inst	0x72495f63 ; undefined
    11c8:	61745371 	.inst	0x61745371 ; undefined
    11cc:	43490074 	.inst	0x43490074 ; undefined
    11d0:	414e455f 	.inst	0x414e455f ; undefined
    11d4:	5f454c42 	.inst	0x5f454c42 ; undefined
    11d8:	54415453 	.inst	0x54415453 ; undefined
    11dc:	49005355 	.inst	0x49005355 ; undefined
    11e0:	58545f43 	ldr	x3, a9dc8 <__stack_size+0xa5dc8>
    11e4:	004c545f 	.inst	0x004c545f ; undefined
    11e8:	415f4349 	.inst	0x415f4349 ; undefined
    11ec:	475f4b43 	.inst	0x475f4b43 ; undefined
    11f0:	52454e45 	.inst	0x52454e45 ; undefined
    11f4:	435f4c41 	.inst	0x435f4c41 ; undefined
    11f8:	004c4c41 	.inst	0x004c4c41 ; undefined
    11fc:	53544942 	.inst	0x53544942 ; undefined
    1200:	535f5200 	.inst	0x535f5200 ; undefined
    1204:	535f4c43 	.inst	0x535f4c43 ; undefined
    1208:	4b435554 	sub	w20, w10, w3, lsr #21
    120c:	5f54415f 	.inst	0x5f54415f ; undefined
    1210:	00574f4c 	.inst	0x00574f4c ; undefined
    1214:	76746572 	.inst	0x76746572 ; undefined
    1218:	4d006c61 	.inst	0x4d006c61 ; undefined
    121c:	53414d5f 	.inst	0x53414d5f ; undefined
    1220:	5f524554 	.inst	0x5f524554 ; undefined
    1224:	485f4e4f 	ldxrh	w15, [x18]
    1228:	5f444c4f 	.inst	0x5f444c4f ; undefined
    122c:	64616572 	.inst	0x64616572 ; undefined
    1230:	6c6e6f5f 	ldnp	d31, d27, [x26, #-288]
    1234:	5f520079 	.inst	0x5f520079 ; undefined
    1238:	525f4452 	.inst	0x525f4452 ; undefined
    123c:	41005145 	.inst	0x41005145 ; undefined
    1240:	6332496c 	.inst	0x6332496c ; undefined
    1244:	7375425f 	.inst	0x7375425f ; undefined
    1248:	43726c43 	.inst	0x43726c43 ; undefined
    124c:	52006766 	eor	w6, w27, #0x3ffffff
    1250:	45414d44 	uaddwt	z4.h, z10.h, z1.b
    1254:	5f736600 	.inst	0x5f736600 ; undefined
    1258:	5f6c6373 	.inst	0x5f6c6373 ; undefined
    125c:	68676968 	.inst	0x68676968 ; undefined
    1260:	525f5200 	.inst	0x525f5200 ; undefined
    1264:	4f445f58 	.inst	0x4f445f58 ; undefined
    1268:	4900454e 	.inst	0x4900454e ; undefined
    126c:	375f6332 	tbnz	w18, #11, fffffffffffffed0 <_sp+0xffffffff9efbfed0>
    1270:	5f746962 	.inst	0x5f746962 ; undefined
    1274:	72646461 	.inst	0x72646461 ; undefined
    1278:	00737365 	.inst	0x00737365 ; undefined
    127c:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    1280:	65657073 	fnmls	z19.h, p4/m, z3.h, z5.h
    1284:	74735f64 	.inst	0x74735f64 ; undefined
    1288:	61646e61 	.inst	0x61646e61 ; undefined
    128c:	49006472 	.inst	0x49006472 ; undefined
    1290:	44535f43 	umlslt	z3.h, z26.b, z19.b
    1294:	4f485f41 	.inst	0x4f485f41 ; undefined
    1298:	4900444c 	.inst	0x4900444c ; undefined
    129c:	41535f43 	.inst	0x41535f43 ; undefined
    12a0:	32490052 	.inst	0x32490052 ; undefined
    12a4:	79545f43 	ldrh	w3, [x26, #2606]
    12a8:	65446570 	fcmne	p0.h, p1/z, z11.h, z4.h
    12ac:	6c410066 	ldnp	d6, d0, [x3, #16]
    12b0:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    12b4:	74617453 	.inst	0x74617453 ; undefined
    12b8:	49007375 	.inst	0x49007375 ; undefined
    12bc:	53485f43 	.inst	0x53485f43 ; undefined
    12c0:	4c43535f 	.inst	0x4c43535f ; undefined
    12c4:	4e434c5f 	.inst	0x4e434c5f ; undefined
    12c8:	61760054 	.inst	0x61760054 ; undefined
    12cc:	0065756c 	.inst	0x0065756c ; undefined
    12d0:	58525f52 	ldr	x18, a5eb8 <__stack_size+0xa1eb8>
    12d4:	444e555f 	smlslt	z31.h, z10.b, z14.b
    12d8:	41005245 	.inst	0x41005245 ; undefined
    12dc:	6332496c 	.inst	0x6332496c ; undefined
    12e0:	7465535f 	.inst	0x7465535f ; undefined
    12e4:	76616c53 	.inst	0x76616c53 ; undefined
    12e8:	64644165 	bfdot	z5.s, z11.h, z4.h[0]
    12ec:	73736572 	.inst	0x73736572 ; undefined
    12f0:	475f5200 	.inst	0x475f5200 ; undefined
    12f4:	435f4e45 	.inst	0x435f4e45 ; undefined
    12f8:	004c4c41 	.inst	0x004c4c41 ; undefined
    12fc:	54535f52 	.inst	0x54535f52 ; undefined
    1300:	5f545241 	.inst	0x5f545241 ; undefined
    1304:	00544544 	.inst	0x00544544 ; undefined
    1308:	695f6369 	ldpsw	x9, x24, [x27, #248]
    130c:	5f72746e 	sqshl	d14, d3, #50
    1310:	74617473 	.inst	0x74617473 ; undefined
    1314:	6e697500 	uabd	v0.8h, v8.8h, v9.8h
    1318:	5f363174 	.inst	0x5f363174 ; undefined
    131c:	43490074 	.inst	0x43490074 ; undefined
    1320:	4658545f 	.inst	0x4658545f ; undefined
    1324:	5300524c 	ubfx	w12, w18, #0, #21
    1328:	535f4144 	.inst	0x535f4144 ; undefined
    132c:	4b435554 	sub	w20, w10, w3, lsr #21
    1330:	544f4e5f 	.inst	0x544f4e5f ; undefined
    1334:	4345525f 	.inst	0x4345525f ; undefined
    1338:	5245564f 	.inst	0x5245564f ; undefined
    133c:	53004445 	ubfx	w5, w2, #0, #18
    1340:	535f4144 	.inst	0x535f4144 ; undefined
    1344:	4b435554 	sub	w20, w10, w3, lsr #21
    1348:	4345525f 	.inst	0x4345525f ; undefined
    134c:	5245564f 	.inst	0x5245564f ; undefined
    1350:	4e455f59 	.inst	0x4e455f59 ; undefined
    1354:	454c4241 	saddwb	z1.h, z18.h, z12.b
    1358:	525f4d00 	.inst	0x525f4d00 ; undefined
    135c:	55465f58 	.inst	0x55465f58 ; undefined
    1360:	49004c4c 	.inst	0x49004c4c ; undefined
    1364:	4d445f43 	.inst	0x4d445f43 ; undefined
    1368:	44545f41 	umlslt	z1.h, z26.b, z20.b
    136c:	4d00524c 	st1	{v12.h}[6], [x18]
    1370:	5345525f 	.inst	0x5345525f ; undefined
    1374:	54524154 	.inst	0x54524154 ; undefined
    1378:	5445445f 	.inst	0x5445445f ; undefined
    137c:	496c4100 	.inst	0x496c4100 ; undefined
    1380:	535f6332 	.inst	0x535f6332 ; undefined
    1384:	6c537465 	ldnp	d5, d29, [x3, #304]
    1388:	41657661 	.inst	0x41657661 ; undefined
    138c:	65726464 	fnmls	z4.h, p1/m, z3.h, z18.h
    1390:	6f4d7373 	fcmla	v19.8h, v27.8h, v13.h[0], #270
    1394:	64006564 	.inst	0x64006564 ; undefined
    1398:	00617461 	.inst	0x00617461 ; undefined
    139c:	414d5f52 	.inst	0x414d5f52 ; undefined
    13a0:	52455453 	.inst	0x52455453 ; undefined
    13a4:	5f4e4f5f 	.inst	0x5f4e4f5f ; undefined
    13a8:	444c4f48 	umlalt	z8.h, z26.b, z12.b
    13ac:	63326900 	.inst	0x63326900 ; undefined
    13b0:	6464615f 	.inst	0x6464615f ; undefined
    13b4:	73736572 	.inst	0x73736572 ; undefined
    13b8:	646f6d5f 	.inst	0x646f6d5f ; undefined
    13bc:	43490065 	.inst	0x43490065 ; undefined
    13c0:	4154535f 	.inst	0x4154535f ; undefined
    13c4:	00535554 	.inst	0x00535554 ; undefined
    13c8:	545f4349 	b.ls	bfc30 <__stack_size+0xbbc30>  // b.plast
    13cc:	42415f58 	.inst	0x42415f58 ; undefined
    13d0:	535f5452 	.inst	0x535f5452 ; undefined
    13d4:	4352554f 	.inst	0x4352554f ; undefined
    13d8:	63690045 	.inst	0x63690045 ; undefined
    13dc:	746e695f 	.inst	0x746e695f ; undefined
    13e0:	616d5f72 	.inst	0x616d5f72 ; undefined
    13e4:	625f6b73 	.inst	0x625f6b73 ; undefined
    13e8:	00737469 	.inst	0x00737469 ; undefined
    13ec:	44525f4d 	umlslt	z13.h, z26.b, z18.b
    13f0:	5145525f 	sub	wsp, w18, #0x154, lsl #12
    13f4:	496c4100 	.inst	0x496c4100 ; undefined
    13f8:	545f6332 	.inst	0x545f6332 ; undefined
    13fc:	72685478 	.inst	0x72685478 ; undefined
    1400:	56535200 	.inst	0x56535200 ; undefined
    1404:	43495f44 	.inst	0x43495f44 ; undefined
    1408:	4154535f 	.inst	0x4154535f ; undefined
    140c:	5f4d0052 	.inst	0x5f4d0052 ; undefined
    1410:	504f5453 	adr	x19, 9fe9a <__stack_size+0x9be9a>
    1414:	5445445f 	.inst	0x5445445f ; undefined
    1418:	4f4f4200 	.inst	0x4f4f4200 ; undefined
    141c:	4349004c 	.inst	0x4349004c ; undefined
    1420:	5f53535f 	.inst	0x5f53535f ; undefined
    1424:	5f4c4353 	.inst	0x5f4c4353 ; undefined
    1428:	544e4348 	b.hi	9dc90 <__stack_size+0x99c90>  // b.pmore
    142c:	535f5200 	.inst	0x535f5200 ; undefined
    1430:	5f504f54 	.inst	0x5f504f54 ; undefined
    1434:	00544544 	.inst	0x00544544 ; undefined
    1438:	32496c41 	.inst	0x32496c41 ; undefined
    143c:	65535f63 	fcmge	p3.h, p7/z, z27.h, z19.h
    1440:	72615474 	.inst	0x72615474 ; undefined
    1444:	41746567 	.inst	0x41746567 ; undefined
    1448:	65726464 	fnmls	z4.h, p1/m, z3.h, z18.h
    144c:	69007373 	stgp	x19, x28, [x27]
    1450:	635f6332 	.inst	0x635f6332 ; undefined
    1454:	745f646d 	.inst	0x745f646d ; undefined
    1458:	00657079 	.inst	0x00657079 ; undefined
    145c:	54535f4d 	b.le	a8044 <__stack_size+0xa4044>
    1460:	5f545241 	.inst	0x5f545241 ; undefined
    1464:	00544544 	.inst	0x00544544 ; undefined
    1468:	58525f4d 	ldr	x13, a6050 <__stack_size+0xa2050>
    146c:	4e4f445f 	.inst	0x4e4f445f ; undefined
    1470:	43490045 	.inst	0x43490045 ; undefined
    1474:	4230315f 	.inst	0x4230315f ; undefined
    1478:	44415449 	smlslt	z9.h, z2.b, z1.b
    147c:	535f5244 	.inst	0x535f5244 ; undefined
    1480:	4556414c 	saddwb	z12.h, z10.h, z22.b
    1484:	5f434900 	.inst	0x5f434900 ; undefined
    1488:	5f564c53 	.inst	0x5f564c53 ; undefined
    148c:	41544144 	.inst	0x41544144 ; undefined
    1490:	43414e5f 	.inst	0x43414e5f ; undefined
    1494:	4e4f5f4b 	.inst	0x4e4f5f4b ; undefined
    1498:	5200594c 	eor	w12, w10, #0x7fffff
    149c:	5f58545f 	shl	d31, d2, #24
    14a0:	54524241 	b.ne	a5ce8 <__stack_size+0xa1ce8>  // b.any
    14a4:	45505300 	ssubwb	z0.h, z24.h, z16.b
    14a8:	49004445 	.inst	0x49004445 ; undefined
    14ac:	53465f43 	.inst	0x53465f43 ; undefined
    14b0:	4c43535f 	.inst	0x4c43535f ; undefined
    14b4:	4e43485f 	.inst	0x4e43485f ; undefined
    14b8:	43490054 	.inst	0x43490054 ; undefined
    14bc:	4144535f 	.inst	0x4144535f ; undefined
    14c0:	5f58525f 	.inst	0x5f58525f ; undefined
    14c4:	444c4f48 	umlalt	z8.h, z26.b, z12.b
    14c8:	6f747300 	fcmla	v0.8h, v24.8h, v20.h[1], #270
    14cc:	65725f70 	fnmla	z16.h, p7/m, z27.h, z18.h
    14d0:	72617473 	.inst	0x72617473 ; undefined
    14d4:	43490074 	.inst	0x43490074 ; undefined
    14d8:	544e495f 	.inst	0x544e495f ; undefined
    14dc:	414d5f52 	.inst	0x414d5f52 ; undefined
    14e0:	6e004b53 	ext	v19.16b, v26.16b, v0.16b, #9
    14e4:	616d726f 	.inst	0x616d726f ; undefined
    14e8:	4241006c 	.inst	0x4241006c ; undefined
    14ec:	0054524f 	.inst	0x0054524f ; undefined
    14f0:	735f6369 	.inst	0x735f6369 ; undefined
    14f4:	75746174 	.inst	0x75746174 ; undefined
    14f8:	69625f73 	ldpsw	x19, x23, [x27, #-240]
    14fc:	52007374 	eor	w20, w27, #0x1fffffff
    1500:	5f58545f 	shl	d31, d2, #24
    1504:	54504d45 	b.pl	a1eac <__stack_size+0x9deac>  // b.nfrst
    1508:	43490059 	.inst	0x43490059 ; undefined
    150c:	4144535f 	.inst	0x4144535f ; undefined
    1510:	5f58545f 	shl	d31, d2, #24
    1514:	444c4f48 	umlalt	z8.h, z26.b, z12.b
    1518:	5f636900 	.inst	0x5f636900 ; undefined
    151c:	74617473 	.inst	0x74617473 ; undefined
    1520:	69007375 	stgp	x21, x28, [x27]
    1524:	6f635f63 	.inst	0x6f635f63 ; undefined
    1528:	4146006e 	.inst	0x4146006e ; undefined
    152c:	0045534c 	.inst	0x0045534c ; undefined
    1530:	45475f4d 	usubwt	z13.h, z26.h, z7.b
    1534:	41435f4e 	.inst	0x41435f4e ; undefined
    1538:	53004c4c 	ubfx	w12, w2, #0, #20
    153c:	5f504f54 	.inst	0x5f504f54 ; undefined
    1540:	5f544544 	.inst	0x5f544544 ; undefined
    1544:	4d5f4649 	.inst	0x4d5f4649 ; undefined
    1548:	45545341 	ssubwb	z1.h, z26.h, z20.b
    154c:	43415f52 	.inst	0x43415f52 ; undefined
    1550:	45564954 	uaddwb	z20.h, z10.h, z22.b
    1554:	5f434900 	.inst	0x5f434900 ; undefined
    1558:	5f414453 	.inst	0x5f414453 ; undefined
    155c:	43555453 	.inst	0x43555453 ; undefined
    1560:	54415f4b 	b.lt	84148 <__stack_size+0x80148>  // b.tstop
    1564:	574f4c5f 	.inst	0x574f4c5f ; undefined
    1568:	4d49545f 	.inst	0x4d49545f ; undefined
    156c:	54554f45 	b.pl	abf54 <__stack_size+0xa7f54>  // b.nfrst
    1570:	63324900 	.inst	0x63324900 ; undefined
    1574:	6570735f 	fnmls	z31.h, p4/m, z26.h, z16.h
    1578:	685f6465 	.inst	0x685f6465 ; undefined
    157c:	00686769 	.inst	0x00686769 ; undefined
    1580:	5f633269 	sqdmlal	s9, h19, v3.h[2]
    1584:	5f6c6373 	.inst	0x5f6c6373 ; undefined
    1588:	73616870 	.inst	0x73616870 ; undefined
    158c:	44540065 	.inst	0x44540065 ; undefined
    1590:	0045414d 	.inst	0x0045414d ; undefined
    1594:	525f4349 	.inst	0x525f4349 ; undefined
    1598:	4c545f58 	.inst	0x4c545f58 ; undefined
    159c:	4f545300 	.inst	0x4f545300 ; undefined
    15a0:	5f520050 	.inst	0x5f520050 ; undefined
    15a4:	4f5f5852 	.inst	0x4f5f5852 ; undefined
    15a8:	00524556 	.inst	0x00524556 ; undefined
    15ac:	32496c41 	.inst	0x32496c41 ; undefined
    15b0:	64535f63 	fcmla	z3.h, p7/m, z27.h, z19.h, #180
    15b4:	6c6f4861 	ldnp	d1, d18, [x3, #-272]
    15b8:	00785264 	.inst	0x00785264 ; undefined
    15bc:	32496c41 	.inst	0x32496c41 ; undefined
    15c0:	72495f63 	.inst	0x72495f63 ; undefined
    15c4:	73614d71 	.inst	0x73614d71 ; undefined
    15c8:	6369006b 	.inst	0x6369006b ; undefined
    15cc:	7261745f 	.inst	0x7261745f ; undefined
    15d0:	496c4100 	.inst	0x496c4100 ; undefined
    15d4:	455f6332 	sqdmullb	z18.h, z25.b, z31.b
    15d8:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    15dc:	534d0065 	.inst	0x534d0065 ; undefined
    15e0:	43415f54 	.inst	0x43415f54 ; undefined
    15e4:	49564954 	.inst	0x49564954 ; undefined
    15e8:	69005954 	stgp	x20, x22, [x10]
    15ec:	64735f63 	.inst	0x64735f63 ; undefined
    15f0:	6f685f61 	.inst	0x6f685f61 ; undefined
    15f4:	4900646c 	.inst	0x4900646c ; undefined
    15f8:	44535f43 	umlslt	z3.h, z26.b, z19.b
    15fc:	45535f41 	usubwt	z1.h, z26.h, z19.b
    1600:	00505554 	.inst	0x00505554 ; undefined
    1604:	32496c41 	.inst	0x32496c41 ; undefined
    1608:	6e455f63 	.inst	0x6e455f63 ; undefined
    160c:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    1610:	76616c53 	.inst	0x76616c53 ; undefined
    1614:	43490065 	.inst	0x43490065 ; undefined
    1618:	524c435f 	.inst	0x524c435f ; undefined
    161c:	544e495f 	.inst	0x544e495f ; undefined
    1620:	58540052 	ldr	x18, a9628 <__stack_size+0xa5628>
    1624:	504d455f 	adr	xzr, 9bece <__stack_size+0x97ece>
    1628:	435f5954 	.inst	0x435f5954 ; undefined
    162c:	004c5254 	.inst	0x004c5254 ; undefined
    1630:	455f4349 	saddwb	z9.h, z26.h, z31.b
    1634:	4c42414e 	.inst	0x4c42414e ; undefined
    1638:	43490045 	.inst	0x43490045 ; undefined
    163c:	414d445f 	.inst	0x414d445f ; undefined
    1640:	0052435f 	.inst	0x0052435f ; undefined
    1644:	735f7366 	.inst	0x735f7366 ; undefined
    1648:	6c5f6c63 	ldnp	d3, d27, [x3, #496]
    164c:	4d00776f 	.inst	0x4d00776f ; undefined
    1650:	4c43535f 	.inst	0x4c43535f ; undefined
    1654:	5554535f 	.inst	0x5554535f ; undefined
    1658:	415f4b43 	.inst	0x415f4b43 ; undefined
    165c:	4f4c5f54 	.inst	0x4f4c5f54 ; undefined
    1660:	5f4d0057 	.inst	0x5f4d0057 ; undefined
    1664:	49544341 	.inst	0x49544341 ; undefined
    1668:	59544956 	.inst	0x59544956 ; undefined
    166c:	5f736800 	.inst	0x5f736800 ; undefined
    1670:	5f6c6373 	.inst	0x5f6c6373 ; undefined
    1674:	00776f6c 	.inst	0x00776f6c ; undefined
    1678:	445f4349 	smlalb	z9.h, z26.b, z31.b
    167c:	5f415441 	shl	d1, d2, #1
    1680:	00444d43 	.inst	0x00444d43 ; undefined
    1684:	32496c41 	.inst	0x32496c41 ; undefined
    1688:	78525f63 	ldrh	w3, [x27, #-219]!
    168c:	00726854 	.inst	0x00726854 ; undefined
    1690:	58525f52 	ldr	x18, a6278 <__stack_size+0xa2278>
    1694:	4c55465f 	.inst	0x4c55465f ; undefined
    1698:	5254004c 	.inst	0x5254004c ; undefined
    169c:	52004555 	eor	w21, w10, #0x3ffff
    16a0:	49465f58 	.inst	0x49465f58 ; undefined
    16a4:	465f4f46 	.inst	0x465f4f46 ; undefined
    16a8:	5f4c4c55 	.inst	0x5f4c4c55 ; undefined
    16ac:	5f444c48 	.inst	0x5f444c48 ; undefined
    16b0:	4c525443 	.inst	0x4c525443 ; undefined
    16b4:	5f636900 	.inst	0x5f636900 ; undefined
    16b8:	61746164 	.inst	0x61746164 ; undefined
    16bc:	646d635f 	.inst	0x646d635f ; undefined
    16c0:	56535200 	.inst	0x56535200 ; undefined
    16c4:	4d535f44 	.inst	0x4d535f44 ; undefined
    16c8:	5f535542 	shl	d2, d10, #19
    16cc:	00524153 	.inst	0x00524153 ; undefined
    16d0:	645f6369 	fcmla	z9.h, p0/m, z27.h, z31.h, #270
    16d4:	635f616d 	.inst	0x635f616d ; undefined
    16d8:	6c410072 	ldnp	d18, d0, [x3, #16]
    16dc:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    16e0:	54616453 	.inst	0x54616453 ; undefined
    16e4:	6f656d69 	.inst	0x6f656d69 ; undefined
    16e8:	66437475 	.inst	0x66437475 ; undefined
    16ec:	43490067 	.inst	0x43490067 ; undefined
    16f0:	5f53485f 	.inst	0x5f53485f ; undefined
    16f4:	5f4c4353 	.inst	0x5f4c4353 ; undefined
    16f8:	544e4348 	b.hi	9df60 <__stack_size+0x99f60>  // b.pmore
    16fc:	54534d00 	b.eq	a809c <__stack_size+0xa409c>  // b.none
    1700:	4c4f485f 	.inst	0x4c4f485f ; undefined
    1704:	58525f44 	ldr	x4, a62ec <__stack_size+0xa22ec>
    1708:	4649465f 	.inst	0x4649465f ; undefined
    170c:	55465f4f 	.inst	0x55465f4f ; undefined
    1710:	69004c4c 	stgp	x12, x19, [x2]
    1714:	6c635f63 	ldnp	d3, d23, [x27, #-464]
    1718:	6e695f72 	uqrshl	v18.8h, v27.8h, v9.8h
    171c:	41007274 	.inst	0x41007274 ; undefined
    1720:	6332496c 	.inst	0x6332496c ; undefined
    1724:	4678525f 	.inst	0x4678525f ; undefined
    1728:	536c6c75 	.inst	0x536c6c75 ; undefined
    172c:	6f486c63 	.inst	0x6f486c63 ; undefined
    1730:	6643646c 	.inst	0x6643646c ; undefined
    1734:	6c410067 	ldnp	d7, d0, [x3, #16]
    1738:	5f633249 	sqdmlal	s9, h18, v3.h[2]
    173c:	74697257 	.inst	0x74697257 ; undefined
    1740:	32490065 	.inst	0x32490065 ; undefined
    1744:	63735f63 	.inst	0x63735f63 ; undefined
    1748:	6f6c5f6c 	.inst	0x6f6c5f6c ; undefined
    174c:	43490077 	.inst	0x43490077 ; undefined
    1750:	5741525f 	.inst	0x5741525f ; undefined
    1754:	544e495f 	.inst	0x544e495f ; undefined
    1758:	54535f52 	.inst	0x54535f52 ; undefined
    175c:	69005441 	stgp	x1, x21, [x2]
    1760:	6e695f63 	uqrshl	v3.8h, v27.8h, v9.8h
    1764:	6d5f7274 	ldp	d20, d28, [x19, #496]
    1768:	006b7361 	.inst	0x006b7361 ; undefined
    176c:	54534552 	.inst	0x54534552 ; undefined
    1770:	00545241 	.inst	0x00545241 ; undefined
    1774:	32496c41 	.inst	0x32496c41 ; undefined
    1778:	64535f63 	fcmla	z3.h, p7/m, z27.h, z19.h, #180
    177c:	74655361 	.inst	0x74655361 ; undefined
    1780:	4d007075 	st3	{v21.h-v23.h}[6], [x3]
    1784:	5f58545f 	shl	d31, d2, #24
    1788:	54524241 	b.ne	a5fd0 <__stack_size+0xa1fd0>  // b.any
    178c:	5f636900 	.inst	0x5f636900 ; undefined
    1790:	72746e69 	.inst	0x72746e69 ; undefined
    1794:	6174735f 	.inst	0x6174735f ; undefined
    1798:	69625f74 	ldpsw	x20, x23, [x27, #-240]
    179c:	49007374 	.inst	0x49007374 ; undefined
    17a0:	45525f43 	usubwt	z3.h, z26.h, z18.b
    17a4:	52415453 	.inst	0x52415453 ; undefined
    17a8:	4e455f54 	.inst	0x4e455f54 ; undefined
    17ac:	53554200 	.inst	0x53554200 ; undefined
    17b0:	454c435f 	saddwb	z31.h, z26.h, z12.b
    17b4:	465f5241 	.inst	0x465f5241 ; undefined
    17b8:	55544145 	.inst	0x55544145 ; undefined
    17bc:	435f4552 	.inst	0x435f4552 ; undefined
    17c0:	004c5254 	.inst	0x004c5254 ; undefined
    17c4:	5f564c53 	.inst	0x5f564c53 ; undefined
    17c8:	49544341 	.inst	0x49544341 ; undefined
    17cc:	59544956 	.inst	0x59544956 ; undefined
    17d0:	496c4100 	.inst	0x496c4100 ; undefined
    17d4:	535f6332 	.inst	0x535f6332 ; undefined
    17d8:	74536164 	.inst	0x74536164 ; undefined
    17dc:	526b6375 	.inst	0x526b6375 ; undefined
    17e0:	45766365 	addhnb	z5.b, z27.h, z22.h
    17e4:	6766436e 	.inst	0x6766436e ; undefined
    17e8:	496c4100 	.inst	0x496c4100 ; undefined
    17ec:	495f6332 	.inst	0x495f6332 ; undefined
    17f0:	65757373 	fnmls	z19.h, p4/m, z27.h, z21.h
    17f4:	64616552 	.inst	0x64616552 ; undefined
    17f8:	5f636900 	.inst	0x5f636900 ; undefined
    17fc:	00726173 	.inst	0x00726173 ; undefined
    1800:	735f7368 	.inst	0x735f7368 ; undefined
    1804:	685f6c63 	.inst	0x685f6c63 ; undefined
    1808:	00686769 	.inst	0x00686769 ; undefined
    180c:	43455053 	.inst	0x43455053 ; undefined
    1810:	004c4149 	.inst	0x004c4149 ; undefined
    1814:	5f54534d 	.inst	0x5f54534d ; undefined
    1818:	444c4f48 	umlalt	z8.h, z26.b, z12.b
    181c:	5f58545f 	shl	d31, d2, #24
    1820:	4f464946 	.inst	0x4f464946 ; undefined
    1824:	504d455f 	adr	xzr, 9c0ce <__stack_size+0x980ce>
    1828:	52005954 	eor	w20, w10, #0x7fffff
    182c:	5443415f 	.inst	0x5443415f ; undefined
    1830:	54495649 	b.ls	942f8 <__stack_size+0x902f8>  // b.plast
    1834:	32490059 	.inst	0x32490059 ; undefined
    1838:	63735f63 	.inst	0x63735f63 ; undefined
    183c:	69685f6c 	ldpsw	x12, x23, [x27, #-192]
    1840:	69006867 	stgp	x7, x26, [x3]
    1844:	735f6332 	.inst	0x735f6332 ; undefined
    1848:	64656570 	.inst	0x64656570 ; undefined
    184c:	646f6d5f 	.inst	0x646f6d5f ; undefined
    1850:	5f4d0065 	.inst	0x5f4d0065 ; undefined
    1854:	455f5854 	usubwb	z20.h, z2.h, z31.b
    1858:	5954504d 	ldapurh	w13, [x2, #-187]
    185c:	5f434900 	.inst	0x5f434900 ; undefined
    1860:	49423031 	.inst	0x49423031 ; undefined
    1864:	44444154 	smlalb	z20.h, z10.b, z4.b
    1868:	414d5f52 	.inst	0x414d5f52 ; undefined
    186c:	52455453 	.inst	0x52455453 ; undefined
    1870:	496c4100 	.inst	0x496c4100 ; undefined
    1874:	535f6332 	.inst	0x535f6332 ; undefined
    1878:	69546c63 	ldpsw	x3, x27, [x3, #160]
    187c:	756f656d 	.inst	0x756f656d ; undefined
    1880:	67664374 	.inst	0x67664374 ; undefined
    1884:	63324900 	.inst	0x63324900 ; undefined
    1888:	6570735f 	fnmls	z31.h, p4/m, z26.h, z16.h
    188c:	665f6465 	.inst	0x665f6465 ; undefined
    1890:	00747361 	.inst	0x00747361 ; undefined
    1894:	45525f52 	usubwt	z18.h, z26.h, z18.b
    1898:	52415453 	.inst	0x52415453 ; undefined
    189c:	45445f54 	usubwt	z20.h, z26.h, z4.b
    18a0:	53520054 	.inst	0x53520054 ; undefined
    18a4:	4d004456 	.inst	0x4d004456 ; undefined
    18a8:	5f58525f 	.inst	0x5f58525f ; undefined
    18ac:	5245564f 	.inst	0x5245564f ; undefined
    18b0:	564c5300 	.inst	0x564c5300 ; undefined
    18b4:	4c4f485f 	.inst	0x4c4f485f ; undefined
    18b8:	58545f44 	ldr	x4, aa4a0 <__stack_size+0xa64a0>
    18bc:	4649465f 	.inst	0x4649465f ; undefined
    18c0:	4d455f4f 	.inst	0x4d455f4f ; undefined
    18c4:	00595450 	.inst	0x00595450 ; undefined
    18c8:	32496c41 	.inst	0x32496c41 ; undefined
    18cc:	64535f63 	fcmla	z3.h, p7/m, z27.h, z19.h, #180
    18d0:	6c6f4861 	ldnp	d1, d18, [x3, #-272]
    18d4:	00785464 	.inst	0x00785464 ; undefined
    18d8:	32496c41 	.inst	0x32496c41 ; undefined
    18dc:	65535f63 	fcmge	p3.h, p7/z, z27.h, z19.h
    18e0:	65705374 	fnmla	z20.h, p4/m, z27.h, z16.h
    18e4:	6f4d6465 	sqshlu	v5.2d, v3.2d, #13
    18e8:	52006564 	eor	w4, w11, #0x3ffffff
    18ec:	5f58545f 	shl	d31, d2, #24
    18f0:	5245564f 	.inst	0x5245564f ; undefined
    18f4:	545f4d00 	b.eq	c0294 <__stack_size+0xbc294>  // b.none
    18f8:	564f5f58 	.inst	0x564f5f58 ; undefined
    18fc:	49005245 	.inst	0x49005245 ; undefined
    1900:	43535f43 	.inst	0x43535f43 ; undefined
    1904:	54535f4c 	b.gt	a84ec <__stack_size+0xa44ec>
    1908:	5f4b4355 	.inst	0x5f4b4355 ; undefined
    190c:	4c5f5441 	.inst	0x4c5f5441 ; undefined
    1910:	545f574f 	b.nv	c03f8 <__stack_size+0xbc3f8>
    1914:	4f454d49 	.inst	0x4f454d49 ; undefined
    1918:	2e005455 	.inst	0x2e005455 ; undefined
    191c:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1920:	436f532f 	.inst	0x436f532f ; undefined
    1924:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1928:	636f736f 	.inst	0x636f736f ; undefined
    192c:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1930:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1934:	72756f53 	.inst	0x72756f53 ; undefined
    1938:	442f6563 	.inst	0x442f6563 ; undefined
    193c:	65766972 	fnmls	z18.h, p2/m, z11.h, z22.h
    1940:	2f2f7372 	.inst	0x2f2f7372 ; undefined
    1944:	695f4c41 	ldpsw	x1, x19, [x2, #248]
    1948:	632e6332 	.inst	0x632e6332 ; undefined
    194c:	56535200 	.inst	0x56535200 ; undefined
    1950:	00305f44 	.inst	0x00305f44 ; NYI
    1954:	44565352 	smlslb	z18.h, z26.b, z22.b
    1958:	4900335f 	.inst	0x4900335f ; undefined
    195c:	53465f43 	.inst	0x53465f43 ; undefined
    1960:	4b50535f 	sub	wzr, w26, w16, lsr #20
    1964:	004e454c 	.inst	0x004e454c ; undefined
    1968:	44565352 	smlslb	z18.h, z26.b, z22.b
    196c:	4900375f 	.inst	0x4900375f ; undefined
    1970:	315f6332 	adds	w18, w25, #0x7d8, lsl #12
    1974:	74696230 	.inst	0x74696230 ; undefined
    1978:	6464615f 	.inst	0x6464615f ; undefined
    197c:	73736572 	.inst	0x73736572 ; undefined
    1980:	4e465400 	.inst	0x4e465400 ; undefined
    1984:	43470046 	.inst	0x43470046 ; undefined
    1988:	5f524f5f 	.inst	0x5f524f5f ; undefined
    198c:	52415453 	.inst	0x52415453 ; undefined
    1990:	74730054 	.inst	0x74730054 ; undefined
    1994:	7300706f 	.inst	0x7300706f ; undefined
    1998:	63735f73 	.inst	0x63735f73 ; undefined
    199c:	69685f6c 	ldpsw	x12, x23, [x27, #-192]
    19a0:	53006867 	ubfx	w7, w3, #0, #27
    19a4:	5f504f54 	.inst	0x5f504f54 ; undefined
    19a8:	5f544544 	.inst	0x5f544544 ; undefined
    19ac:	44414649 	smlalt	z9.h, z18.b, z1.b
    19b0:	53455244 	.inst	0x53455244 ; undefined
    19b4:	00444553 	.inst	0x00444553 ; undefined
    19b8:	32496c41 	.inst	0x32496c41 ; undefined
    19bc:	65535f63 	fcmge	p3.h, p7/z, z27.h, z19.h
    19c0:	6c635374 	ldnp	d20, d20, [x27, #-464]
    19c4:	6e756f43 	umin	v3.8h, v26.8h, v21.8h
    19c8:	2e2e0074 	uaddl	v20.8h, v3.8b, v14.8b
    19cc:	2f2e2e2f 	.inst	0x2f2e2e2f ; undefined
    19d0:	2f436f53 	.inst	0x2f436f53 ; undefined
    19d4:	6f6d6564 	sqshlu	v4.2d, v11.2d, #45
    19d8:	2f636f73 	.inst	0x2f636f73 ; undefined
    19dc:	6d6d6f43 	ldp	d3, d27, [x26, #-304]
    19e0:	532f6e6f 	.inst	0x532f6e6f ; undefined
    19e4:	6372756f 	.inst	0x6372756f ; undefined
    19e8:	72442f65 	.inst	0x72442f65 ; undefined
    19ec:	72657669 	.inst	0x72657669 ; undefined
    19f0:	412f2f73 	.inst	0x412f2f73 ; undefined
    19f4:	69705f4c 	ldpsw	x12, x23, [x26, #-128]
    19f8:	78756d6e 	.inst	0x78756d6e ; undefined
    19fc:	6900632e 	stgp	x14, x24, [x25]
    1a00:	7265746e 	.inst	0x7265746e ; undefined
    1a04:	74707572 	.inst	0x74707572 ; undefined
    1a08:	6c410073 	ldnp	d19, d0, [x3, #16]
    1a0c:	74726155 	.inst	0x74726155 ; undefined
    1a10:	616e455f 	.inst	0x616e455f ; undefined
    1a14:	4c656c62 	.inst	0x4c656c62 ; undefined
    1a18:	62706f6f 	.inst	0x62706f6f ; undefined
    1a1c:	006b6361 	.inst	0x006b6361 ; undefined
    1a20:	65636552 	fnmls	z18.h, p1/m, z10.h, z3.h
    1a24:	72657669 	.inst	0x72657669 ; undefined
    1a28:	6e696c5f 	umin	v31.8h, v2.8h, v9.8h
    1a2c:	74735f65 	.inst	0x74735f65 ; undefined
    1a30:	73757461 	.inst	0x73757461 ; undefined
    1a34:	2f2e2e00 	.inst	0x2f2e2e00 ; undefined
    1a38:	532f2e2e 	.inst	0x532f2e2e ; undefined
    1a3c:	642f436f 	.inst	0x642f436f ; undefined
    1a40:	736f6d65 	.inst	0x736f6d65 ; undefined
    1a44:	432f636f 	.inst	0x432f636f ; undefined
    1a48:	6f6d6d6f 	.inst	0x6f6d6d6f ; undefined
    1a4c:	6f532f6e 	.inst	0x6f532f6e ; undefined
    1a50:	65637275 	fnmls	z21.h, p4/m, z19.h, z3.h
    1a54:	6972442f 	ldpsw	x15, x17, [x1, #-112]
    1a58:	73726576 	.inst	0x73726576 ; undefined
    1a5c:	4c412f2f 	.inst	0x4c412f2f ; undefined
    1a60:	7261755f 	.inst	0x7261755f ; undefined
    1a64:	00632e74 	.inst	0x00632e74 ; undefined
    1a68:	61556c41 	.inst	0x61556c41 ; undefined
    1a6c:	525f7472 	.inst	0x525f7472 ; undefined
    1a70:	74657365 	.inst	0x74657365 ; undefined
    1a74:	6f666946 	umlsl2	v6.4s, v10.8h, v6.h[6]
    1a78:	556c4100 	.inst	0x556c4100 ; undefined
    1a7c:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1a80:	62616e45 	.inst	0x62616e45 ; undefined
    1a84:	7249656c 	.inst	0x7249656c ; undefined
    1a88:	4c410071 	.inst	0x4c410071 ; undefined
    1a8c:	7261755f 	.inst	0x7261755f ; undefined
    1a90:	78745f74 	.inst	0x78745f74 ; undefined
    1a94:	6972745f 	ldpsw	xzr, x29, [x2, #-112]
    1a98:	72656767 	.inst	0x72656767 ; undefined
    1a9c:	72615500 	.inst	0x72615500 ; undefined
    1aa0:	76655f74 	.inst	0x76655f74 ; undefined
    1aa4:	5f746e65 	.inst	0x5f746e65 ; undefined
    1aa8:	79737562 	ldrh	w2, [x11, #6586]
    1aac:	556c4100 	.inst	0x556c4100 ; undefined
    1ab0:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1ab4:	44746553 	.inst	0x44746553 ; undefined
    1ab8:	6f4d616d 	umlsl2	v13.4s, v11.8h, v13.h[0]
    1abc:	55006564 	.inst	0x55006564 ; undefined
    1ac0:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1ac4:	5f717269 	sqdmlsl	s9, h19, v1.h[3]
    1ac8:	73736465 	.inst	0x73736465 ; undefined
    1acc:	61750069 	.inst	0x61750069 ; undefined
    1ad0:	725f7472 	.inst	0x725f7472 ; undefined
    1ad4:	00646165 	.inst	0x00646165 ; undefined
    1ad8:	74726155 	.inst	0x74726155 ; undefined
    1adc:	6576655f 	fnmls	z31.h, p1/m, z10.h, z22.h
    1ae0:	745f746e 	.inst	0x745f746e ; undefined
    1ae4:	00657268 	.inst	0x00657268 ; undefined
    1ae8:	61556c41 	.inst	0x61556c41 ; undefined
    1aec:	465f7472 	.inst	0x465f7472 ; undefined
    1af0:	456f6669 	addhnt	z9.b, z19.h, z15.h
    1af4:	6c62616e 	ldnp	d14, d24, [x11, #-480]
    1af8:	6c410065 	ldnp	d5, d0, [x3, #16]
    1afc:	74726155 	.inst	0x74726155 ; undefined
    1b00:	7465535f 	.inst	0x7465535f ; undefined
    1b04:	64756142 	.inst	0x64756142 ; undefined
    1b08:	65746172 	fnmls	z18.h, p0/m, z11.h, z20.h
    1b0c:	74657300 	.inst	0x74657300 ; undefined
    1b10:	66756276 	.inst	0x66756276 ; undefined
    1b14:	556c4100 	.inst	0x556c4100 ; undefined
    1b18:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1b1c:	50746553 	adr	x19, ea7c6 <__stack_size+0xe67c6>
    1b20:	74697261 	.inst	0x74697261 ; undefined
    1b24:	6c410079 	ldnp	d25, d0, [x3, #16]
    1b28:	74726155 	.inst	0x74726155 ; undefined
    1b2c:	6573555f 	fnmla	z31.h, p5/m, z10.h, z19.h
    1b30:	71724972 	subs	w18, w11, #0xc92, lsl #12
    1b34:	646e6148 	.inst	0x646e6148 ; undefined
    1b38:	0072656c 	.inst	0x0072656c ; undefined
    1b3c:	4f464946 	.inst	0x4f464946 ; undefined
    1b40:	6c5f325f 	ldnp	d31, d12, [x18, #496]
    1b44:	5f737365 	sqdmlsl	s5, h27, v3.h[3]
    1b48:	6e616874 	fcvtxn2	v20.4s, v3.2d
    1b4c:	6c75665f 	ldnp	d31, d25, [x18, #-176]
    1b50:	6163006c 	.inst	0x6163006c ; undefined
    1b54:	61626c6c 	.inst	0x61626c6c ; undefined
    1b58:	72416b63 	.inst	0x72416b63 ; undefined
    1b5c:	6c410067 	ldnp	d7, d0, [x3, #16]
    1b60:	74726155 	.inst	0x74726155 ; undefined
    1b64:	616e455f 	.inst	0x616e455f ; undefined
    1b68:	50656c62 	adr	x2, cc8f6 <__stack_size+0xc88f6>
    1b6c:	656d6974 	fnmls	z20.h, p2/m, z11.h, z13.h
    1b70:	556c4100 	.inst	0x556c4100 ; undefined
    1b74:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1b78:	61746144 	.inst	0x61746144 ; undefined
    1b7c:	676e656c 	.inst	0x676e656c ; undefined
    1b80:	666e6f43 	.inst	0x666e6f43 ; undefined
    1b84:	55006769 	.inst	0x55006769 ; undefined
    1b88:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1b8c:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1b90:	6f6d5f74 	.inst	0x6f6d5f74 ; undefined
    1b94:	006d6564 	.inst	0x006d6564 ; undefined
    1b98:	61556c41 	.inst	0x61556c41 ; undefined
    1b9c:	445f7472 	sqrdmlsh	z18.h, z3.h, z31.h
    1ba0:	62617369 	.inst	0x62617369 ; undefined
    1ba4:	6641656c 	.inst	0x6641656c ; undefined
    1ba8:	74730063 	.inst	0x74730063 ; undefined
    1bac:	6d616572 	ldp	d18, d25, [x11, #-496]
    1bb0:	556c4100 	.inst	0x556c4100 ; undefined
    1bb4:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1bb8:	746c6148 	.inst	0x746c6148 ; undefined
    1bbc:	62007854 	.inst	0x62007854 ; undefined
    1bc0:	72647561 	.inst	0x72647561 ; undefined
    1bc4:	00657461 	.inst	0x00657461 ; undefined
    1bc8:	61556c41 	.inst	0x61556c41 ; undefined
    1bcc:	445f7472 	sqrdmlsh	z18.h, z3.h, z31.h
    1bd0:	62617369 	.inst	0x62617369 ; undefined
    1bd4:	6f4c656c 	sqshlu	v12.2d, v11.2d, #12
    1bd8:	6162706f 	.inst	0x6162706f ; undefined
    1bdc:	55006b63 	.inst	0x55006b63 ; undefined
    1be0:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1be4:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1be8:	69745f74 	ldpsw	x20, x23, [x27, #-96]
    1bec:	756f656d 	.inst	0x756f656d ; undefined
    1bf0:	61550074 	.inst	0x61550074 ; undefined
    1bf4:	695f7472 	ldpsw	x18, x29, [x3, #248]
    1bf8:	655f7172 	fcmne	p2.h, p4/z, z11.h, z31.h
    1bfc:	69656274 	ldpsw	x20, x24, [x19, #-216]
    1c00:	72615500 	.inst	0x72615500 ; undefined
    1c04:	72695f74 	.inst	0x72695f74 ; undefined
    1c08:	6c655f71 	ldnp	d17, d23, [x27, #-432]
    1c0c:	55006973 	.inst	0x55006973 ; undefined
    1c10:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1c14:	5f717269 	sqdmlsl	s9, h19, v1.h[3]
    1c18:	66627265 	.inst	0x66627265 ; undefined
    1c1c:	58520069 	ldr	x9, a5c28 <__stack_size+0xa1c28>
    1c20:	4649465f 	.inst	0x4649465f ; undefined
    1c24:	5f315f4f 	.inst	0x5f315f4f ; undefined
    1c28:	75665f34 	.inst	0x75665f34 ; undefined
    1c2c:	55006c6c 	.inst	0x55006c6c ; undefined
    1c30:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1c34:	6e657665 	uabd	v5.8h, v19.8h, v5.8h
    1c38:	6f6e5f74 	.inst	0x6f6e5f74 ; undefined
    1c3c:	6300656e 	.inst	0x6300656e ; undefined
    1c40:	61726168 	.inst	0x61726168 ; undefined
    1c44:	72657463 	.inst	0x72657463 ; undefined
    1c48:	6e695f73 	uqrshl	v19.8h, v27.8h, v9.8h
    1c4c:	6568745f 	fnmls	z31.h, p5/m, z2.h, z8.h
    1c50:	4649465f 	.inst	0x4649465f ; undefined
    1c54:	73695f4f 	.inst	0x73695f4f ; undefined
    1c58:	4100325f 	.inst	0x4100325f ; undefined
    1c5c:	7261556c 	.inst	0x7261556c ; undefined
    1c60:	69445f74 	ldpsw	x20, x23, [x27, #32]
    1c64:	6c626173 	ldnp	d19, d24, [x11, #-480]
    1c68:	71724965 	subs	w5, w11, #0xc92, lsl #12
    1c6c:	6f747300 	fcmla	v0.8h, v24.8h, v20.h[1], #270
    1c70:	74696270 	.inst	0x74696270 ; undefined
    1c74:	5f4c4100 	.inst	0x5f4c4100 ; undefined
    1c78:	74726175 	.inst	0x74726175 ; undefined
    1c7c:	6576655f 	fnmls	z31.h, p1/m, z10.h, z22.h
    1c80:	4100746e 	.inst	0x4100746e ; undefined
    1c84:	7261556c 	.inst	0x7261556c ; undefined
    1c88:	6e455f74 	.inst	0x6e455f74 ; undefined
    1c8c:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    1c90:	00636641 	.inst	0x00636641 ; undefined
    1c94:	74726175 	.inst	0x74726175 ; undefined
    1c98:	6165525f 	.inst	0x6165525f ; undefined
    1c9c:	71726964 	subs	w4, w11, #0xc9a, lsl #12
    1ca0:	62616e45 	.inst	0x62616e45 ; undefined
    1ca4:	7500656c 	.inst	0x7500656c ; undefined
    1ca8:	5f747261 	sqdmlsl	s1, h19, v4.h[3]
    1cac:	63616d64 	.inst	0x63616d64 ; undefined
    1cb0:	6972775f 	ldpsw	xzr, x29, [x26, #-112]
    1cb4:	41006574 	.inst	0x41006574 ; undefined
    1cb8:	7261556c 	.inst	0x7261556c ; undefined
    1cbc:	65535f74 	fcmgt	p4.h, p7/z, z27.h, z19.h
    1cc0:	54785274 	.inst	0x54785274 ; undefined
    1cc4:	67676972 	.inst	0x67676972 ; undefined
    1cc8:	41007265 	.inst	0x41007265 ; undefined
    1ccc:	61755f4c 	.inst	0x61755f4c ; undefined
    1cd0:	725f7472 	.inst	0x725f7472 ; undefined
    1cd4:	72745f78 	.inst	0x72745f78 ; undefined
    1cd8:	65676769 	fnmls	z9.h, p1/m, z27.h, z7.h
    1cdc:	6c410072 	ldnp	d18, d0, [x3, #16]
    1ce0:	74726155 	.inst	0x74726155 ; undefined
    1ce4:	616e455f 	.inst	0x616e455f ; undefined
    1ce8:	46656c62 	.inst	0x46656c62 ; undefined
    1cec:	416f6669 	.inst	0x416f6669 ; undefined
    1cf0:	73656363 	.inst	0x73656363 ; undefined
    1cf4:	6c410073 	ldnp	d19, d0, [x3, #16]
    1cf8:	74726155 	.inst	0x74726155 ; undefined
    1cfc:	7365525f 	.inst	0x7365525f ; undefined
    1d00:	54656d75 	.inst	0x54656d75 ; undefined
    1d04:	69730078 	ldpsw	x24, x0, [x3, #-104]
    1d08:	5200657a 	eor	w26, w11, #0x3ffffff
    1d0c:	49465f58 	.inst	0x49465f58 ; undefined
    1d10:	315f4f46 	adds	w6, w26, #0x7d3, lsl #12
    1d14:	7566325f 	.inst	0x7566325f ; undefined
    1d18:	41006c6c 	.inst	0x41006c6c ; undefined
    1d1c:	7261556c 	.inst	0x7261556c ; undefined
    1d20:	65535f74 	fcmgt	p4.h, p7/z, z27.h, z19.h
    1d24:	54785474 	.inst	0x54785474 ; undefined
    1d28:	67676972 	.inst	0x67676972 ; undefined
    1d2c:	6f007265 	.inst	0x6f007265 ; undefined
    1d30:	635f656e 	.inst	0x635f656e ; undefined
    1d34:	61726168 	.inst	0x61726168 ; undefined
    1d38:	72657463 	.inst	0x72657463 ; undefined
    1d3c:	5f6e695f 	.inst	0x5f6e695f ; undefined
    1d40:	5f656874 	.inst	0x5f656874 ; undefined
    1d44:	4f464946 	.inst	0x4f464946 ; undefined
    1d48:	72615500 	.inst	0x72615500 ; undefined
    1d4c:	72695f74 	.inst	0x72695f74 ; undefined
    1d50:	6c615f71 	ldnp	d17, d23, [x27, #-496]
    1d54:	4946006c 	.inst	0x4946006c ; undefined
    1d58:	655f4f46 	fcmge	p6.h, p3/z, z26.h, z31.h
    1d5c:	7974706d 	ldrh	w13, [x3, #6712]
    1d60:	72617500 	.inst	0x72617500 ; undefined
    1d64:	4c410074 	.inst	0x4c410074 ; undefined
    1d68:	7261755f 	.inst	0x7261755f ; undefined
    1d6c:	72695f74 	.inst	0x72695f74 ; undefined
    1d70:	6c410071 	ldnp	d17, d0, [x3, #16]
    1d74:	74726155 	.inst	0x74726155 ; undefined
    1d78:	6e6f435f 	raddhn2	v31.8h, v26.4s, v15.4s
    1d7c:	53676966 	.inst	0x53676966 ; undefined
    1d80:	62706f74 	.inst	0x62706f74 ; undefined
    1d84:	41007469 	.inst	0x41007469 ; undefined
    1d88:	7261556c 	.inst	0x7261556c ; undefined
    1d8c:	69445f74 	ldpsw	x20, x23, [x27, #32]
    1d90:	6c626173 	ldnp	d19, d24, [x11, #-480]
    1d94:	69745065 	ldpsw	x5, x20, [x3, #-96]
    1d98:	5200656d 	eor	w13, w11, #0x3ffffff
    1d9c:	69656365 	ldpsw	x5, x24, [x27, #-216]
    1da0:	5f646576 	.inst	0x5f646576 ; undefined
    1da4:	61746164 	.inst	0x61746164 ; undefined
    1da8:	6176615f 	.inst	0x6176615f ; undefined
    1dac:	62616c69 	.inst	0x62616c69 ; undefined
    1db0:	5200656c 	eor	w12, w11, #0x3ffffff
    1db4:	41535f58 	.inst	0x41535f58 ; undefined
    1db8:	454c504d 	ssubwb	z13.h, z2.h, z12.b
    1dbc:	4c45445f 	.inst	0x4c45445f ; undefined
    1dc0:	54005941 	b.ne	28e8 <__stack_size-0x1718>  // b.any
    1dc4:	4c544658 	.inst	0x4c544658 ; undefined
    1dc8:	58520052 	ldr	x18, a5dd0 <__stack_size+0xa1dd0>
    1dcc:	524c5446 	.inst	0x524c5446 ; undefined
    1dd0:	414d4400 	.inst	0x414d4400 ; undefined
    1dd4:	524c4454 	.inst	0x524c4454 ; undefined
    1dd8:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1ddc:	7366645f 	.inst	0x7366645f ; undefined
    1de0:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1de4:	5f32785f 	.inst	0x5f32785f ; undefined
    1de8:	65646f6d 	fnmls	z13.h, p3/m, z27.h, z4.h
    1dec:	72685400 	.inst	0x72685400 ; undefined
    1df0:	6f687365 	fcmla	v5.8h, v27.8h, v8.h[1], #270
    1df4:	2e00646c 	.inst	0x2e00646c ; undefined
    1df8:	2e2e2f2e 	uqsub	v14.8b, v25.8b, v14.8b
    1dfc:	436f532f 	.inst	0x436f532f ; undefined
    1e00:	6d65642f 	ldp	d15, d25, [x1, #-432]
    1e04:	636f736f 	.inst	0x636f736f ; undefined
    1e08:	6d6f432f 	ldp	d15, d16, [x25, #-272]
    1e0c:	2f6e6f6d 	.inst	0x2f6e6f6d ; undefined
    1e10:	72756f53 	.inst	0x72756f53 ; undefined
    1e14:	442f6563 	.inst	0x442f6563 ; undefined
    1e18:	65766972 	fnmls	z18.h, p2/m, z11.h, z22.h
    1e1c:	2f2f7372 	.inst	0x2f2f7372 ; undefined
    1e20:	30396c61 	adr	x1, 74bad <__stack_size+0x70bad>
    1e24:	735f3030 	.inst	0x735f3030 ; undefined
    1e28:	632e6970 	.inst	0x632e6970 ; undefined
    1e2c:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1e30:	7063735f 	adr	xzr, c8c9b <__stack_size+0xc4c9b>
    1e34:	66635f68 	.inst	0x66635f68 ; undefined
    1e38:	70730067 	adr	x7, e7e47 <__stack_size+0xe3e47>
    1e3c:	77645f69 	.inst	0x77645f69 ; undefined
    1e40:	73735f63 	.inst	0x73735f63 ; undefined
    1e44:	6e655f69 	uqrshl	v9.8h, v27.8h, v5.8h
    1e48:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    1e4c:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1e50:	6377645f 	.inst	0x6377645f ; undefined
    1e54:	6973735f 	ldpsw	xzr, x28, [x26, #-104]
    1e58:	7369645f 	.inst	0x7369645f ; undefined
    1e5c:	656c6261 	fnmls	z1.h, p0/m, z19.h, z12.h
    1e60:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1e64:	6672665f 	.inst	0x6672665f ; undefined
    1e68:	6970735f 	ldpsw	xzr, x28, [x26, #-128]
    1e6c:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1e70:	7461645f 	.inst	0x7461645f ; undefined
    1e74:	65725f61 	fnmla	z1.h, p7/m, z27.h, z18.h
    1e78:	54006461 	b.ne	2b04 <__stack_size-0x14fc>  // b.any
    1e7c:	43494f58 	.inst	0x43494f58 ; undefined
    1e80:	53520052 	.inst	0x53520052 ; undefined
    1e84:	325f4456 	.inst	0x325f4456 ; undefined
    1e88:	52544300 	.inst	0x52544300 ; undefined
    1e8c:	0030524c 	.inst	0x0030524c ; NYI
    1e90:	4c525443 	.inst	0x4c525443 ; undefined
    1e94:	73003152 	.inst	0x73003152 ; undefined
    1e98:	635f6970 	.inst	0x635f6970 ; undefined
    1e9c:	316c7274 	adds	w20, w19, #0xb1c, lsl #12
    1ea0:	66646e5f 	.inst	0x66646e5f ; undefined
    1ea4:	69707300 	ldpsw	x0, x28, [x24, #-128]
    1ea8:	6b63735f 	.inst	0x6b63735f ; undefined
    1eac:	5f766964 	.inst	0x5f766964 ; undefined
    1eb0:	00676663 	.inst	0x00676663 ; undefined
    1eb4:	5f697073 	sqdmlsl	s19, h3, v9.h[2]
    1eb8:	646f6d74 	.inst	0x646f6d74 ; undefined
    1ebc:	0078725f 	.inst	0x0078725f ; undefined
    1ec0:	5f697073 	sqdmlsl	s19, h3, v9.h[2]
    1ec4:	625f7273 	.inst	0x625f7273 ; undefined
    1ec8:	00797375 	.inst	0x00797375 ; undefined
    1ecc:	4954534d 	.inst	0x4954534d ; undefined
    1ed0:	52005243 	eor	w3, w18, #0x1fffff
    1ed4:	43494f58 	.inst	0x43494f58 ; undefined
    1ed8:	70730052 	adr	x18, e7ee3 <__stack_size+0xe3ee3>
    1edc:	63735f69 	.inst	0x63735f69 ; undefined
    1ee0:	5f6c6f70 	.inst	0x5f6c6f70 ; undefined
    1ee4:	00676663 	.inst	0x00676663 ; undefined
    1ee8:	5f697073 	sqdmlsl	s19, h3, v9.h[2]
    1eec:	6d5f3478 	ldp	d24, d13, [x3, #496]
    1ef0:	0065646f 	.inst	0x0065646f ; undefined
    1ef4:	43414d44 	.inst	0x43414d44 ; undefined
    1ef8:	70730052 	adr	x18, e7f03 <__stack_size+0xe3f03>
    1efc:	73735f69 	.inst	0x73735f69 ; undefined
    1f00:	645f6574 	fcmla	z20.h, p1/m, z11.h, z31.h, #270
    1f04:	73007369 	.inst	0x73007369 ; undefined
    1f08:	745f6970 	.inst	0x745f6970 ; undefined
    1f0c:	5f646f6d 	.inst	0x5f646f6d ; undefined
    1f10:	725f7874 	.inst	0x725f7874 ; undefined
    1f14:	70730078 	adr	x24, e7f23 <__stack_size+0xe3f23>
    1f18:	72735f69 	.inst	0x72735f69 ; undefined
    1f1c:	6566745f 	fnmls	z31.h, p5/m, z2.h, z6.h
    1f20:	56535200 	.inst	0x56535200 ; undefined
    1f24:	00315f44 	.inst	0x00315f44 ; NYI
    1f28:	52414d44 	.inst	0x52414d44 ; undefined
    1f2c:	00524c44 	.inst	0x00524c44 ; undefined
    1f30:	44554142 	smlalb	z2.h, z10.b, z21.b
    1f34:	70730052 	adr	x18, e7f3f <__stack_size+0xe3f3f>
    1f38:	61645f69 	.inst	0x61645f69 ; undefined
    1f3c:	745f6174 	.inst	0x745f6174 ; undefined
    1f40:	736e6172 	.inst	0x736e6172 ; undefined
    1f44:	0074696d 	.inst	0x0074696d ; undefined
    1f48:	5f697073 	sqdmlsl	s19, h3, v9.h[2]
    1f4c:	74667872 	.inst	0x74667872 ; undefined
    1f50:	66635f6c 	.inst	0x66635f6c ; undefined
    1f54:	50530067 	adr	x7, a7f62 <__stack_size+0xa3f62>
    1f58:	79545f49 	ldrh	w9, [x26, #2606]
    1f5c:	65446570 	fcmne	p0.h, p1/z, z11.h, z4.h
    1f60:	70730066 	adr	x6, e7f6f <__stack_size+0xe3f6f>
    1f64:	65735f69 	fnmla	z9.h, p7/m, z27.h, z19.h
    1f68:	574d0072 	.inst	0x574d0072 ; undefined
    1f6c:	73005243 	.inst	0x73005243 ; undefined
    1f70:	745f6970 	.inst	0x745f6970 ; undefined
    1f74:	5f646f6d 	.inst	0x5f646f6d ; undefined
    1f78:	72703265 	.inst	0x72703265 ; undefined
    1f7c:	73006d6f 	.inst	0x73006d6f ; undefined
    1f80:	785f6970 	ldtrh	w16, [x11, #-10]
    1f84:	6f6d5f31 	.inst	0x6f6d5f31 ; undefined
    1f88:	73006564 	.inst	0x73006564 ; undefined
    1f8c:	735f6970 	.inst	0x735f6970 ; undefined
    1f90:	66725f72 	.inst	0x66725f72 ; undefined
    1f94:	7300656e 	.inst	0x7300656e ; undefined
    1f98:	745f6970 	.inst	0x745f6970 ; undefined
    1f9c:	6c746678 	ldnp	d24, d25, [x19, #-192]
    1fa0:	7466745f 	.inst	0x7466745f ; undefined
    1fa4:	49535300 	.inst	0x49535300 ; undefined
    1fa8:	45565f43 	usubwt	z3.h, z26.h, z22.b
    1fac:	4f495352 	.inst	0x4f495352 ; undefined
    1fb0:	44495f4e 	umlslt	z14.h, z26.b, z9.b
    1fb4:	55585200 	.inst	0x55585200 ; undefined
    1fb8:	00524349 	.inst	0x00524349 ; undefined
    1fbc:	5f697073 	sqdmlsl	s19, h3, v9.h[2]
    1fc0:	646f6d74 	.inst	0x646f6d74 ; undefined
    1fc4:	0078745f 	.inst	0x0078745f ; undefined
    1fc8:	45495353 	ssubwb	z19.h, z26.h, z9.b
    1fcc:	5200524e 	eor	w14, w18, #0x1fffff
    1fd0:	00525349 	.inst	0x00525349 ; undefined
    1fd4:	54534554 	.inst	0x54534554 ; undefined
    1fd8:	6332495f 	.inst	0x6332495f ; undefined
    1fdc:	7032455f 	adr	xzr, 66887 <__stack_size+0x62887>
    1fe0:	006d6f72 	.inst	0x006d6f72 ; undefined
    1fe4:	5f636969 	.inst	0x5f636969 ; undefined
    1fe8:	74736574 	.inst	0x74736574 ; undefined
    1fec:	6400632e 	.inst	0x6400632e ; undefined
    1ff0:	5f617461 	sqshl	d1, d3, #33
    1ff4:	30746e63 	adr	x3, eadc1 <__stack_size+0xe6dc1>
    1ff8:	6f6d6100 	umlsl2	v0.4s, v8.8h, v13.h[2]
    1ffc:	30746e75 	adr	x21, eadc9 <__stack_size+0xe6dc9>
    2000:	63696900 	.inst	0x63696900 ; undefined
    2004:	7365745f 	.inst	0x7365745f ; undefined
    2008:	64720074 	fmla	z20.h, z3.h, z2.h[6]
    200c:	30617461 	adr	x1, c4e99 <__stack_size+0xc0e99>
    2010:	6900305f 	stgp	xzr, x12, [x2]
    2014:	7865646e 	.inst	0x7865646e ; undefined
    2018:	6b630030 	.inst	0x6b630030 ; undefined
    201c:	61746164 	.inst	0x61746164 ; undefined
    2020:	00305f30 	.inst	0x00305f30 ; NYI
    2024:	61646b63 	.inst	0x61646b63 ; undefined
    2028:	5f306174 	.inst	0x5f306174 ; undefined
    202c:	616d0031 	.inst	0x616d0031 ; undefined
    2030:	632e6e69 	.inst	0x632e6e69 ; undefined
    2034:	69707300 	ldpsw	x0, x28, [x24, #-128]
    2038:	7365745f 	.inst	0x7365745f ; undefined
    203c:	616d0074 	.inst	0x616d0074 ; undefined
    2040:	73006e69 	.inst	0x73006e69 ; undefined
    2044:	72746174 	.inst	0x72746174 ; undefined
    2048:	00316765 	.inst	0x00316765 ; NYI
    204c:	73616c66 	.inst	0x73616c66 ; undefined
    2050:	61775f68 	.inst	0x61775f68 ; undefined
    2054:	775f7469 	.inst	0x775f7469 ; undefined
    2058:	66007069 	.inst	0x66007069 ; undefined
    205c:	6873616c 	.inst	0x6873616c ; undefined
    2060:	0064695f 	.inst	0x0064695f ; undefined
    2064:	706d6574 	adr	x20, dcd13 <__stack_size+0xd8d13>
    2068:	64727700 	.inst	0x64727700 ; undefined
    206c:	5f617461 	sqshl	d1, d3, #33
    2070:	64720061 	fmla	z1.h, z3.h, z2.h[6]
    2074:	61746164 	.inst	0x61746164 ; undefined
    2078:	5300615f 	ubfx	wzr, w10, #0, #25
    207c:	64616552 	.inst	0x64616552 ; undefined
    2080:	73004449 	.inst	0x73004449 ; undefined
    2084:	745f6970 	.inst	0x745f6970 ; undefined
    2088:	2e747365 	uabdl	v5.4s, v27.4h, v20.4h
    208c:	Address 0x000000000000208c is out of bounds.


Disassembly of section .debug_ranges:

0000000000000000 <.debug_ranges>:
{
   0:	61000d10 	.inst	0x61000d10 ; undefined
   4:	00000000 	udf	#0
	panic();
   8:	61000d34 	.inst	0x61000d34 ; undefined
}
   c:	00000000 	udf	#0
  10:	61000d58 	.inst	0x61000d58 ; undefined
  14:	00000000 	udf	#0
{
  18:	61000d78 	.inst	0x61000d78 ; undefined
  1c:	00000000 	udf	#0
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
  20:	61000d78 	.inst	0x61000d78 ; undefined
  24:	00000000 	udf	#0
  28:	61000d94 	.inst	0x61000d94 ; undefined
  2c:	00000000 	udf	#0
	return 0;
  30:	61000d94 	.inst	0x61000d94 ; undefined
}
  34:	00000000 	udf	#0
  38:	61000dac 	.inst	0x61000dac ; undefined
    __delay(delay_cnt);
  3c:	00000000 	udf	#0
  40:	61000dac 	.inst	0x61000dac ; undefined
}
  44:	00000000 	udf	#0
  48:	61000df8 	.inst	0x61000df8 ; undefined
	...
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
  60:	61000f64 	.inst	0x61000f64 ; undefined
  64:	00000000 	udf	#0
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
  68:	61000f88 	.inst	0x61000f88 ; undefined
  6c:	00000000 	udf	#0
  70:	61000fc0 	.inst	0x61000fc0 ; undefined
  74:	00000000 	udf	#0
  78:	61000fc4 	.inst	0x61000fc4 ; undefined
	...
	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
  90:	61001408 	.inst	0x61001408 ; undefined
  94:	00000000 	udf	#0
  98:	6100144c 	.inst	0x6100144c ; undefined
  9c:	00000000 	udf	#0
  a0:	61001470 	.inst	0x61001470 ; undefined
  a4:	00000000 	udf	#0
  a8:	61001474 	.inst	0x61001474 ; undefined
	...
	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
  c0:	61000df8 	.inst	0x61000df8 ; undefined
  c4:	00000000 	udf	#0
  c8:	61000e20 	.inst	0x61000e20 ; undefined
	return 0;
  cc:	00000000 	udf	#0
}
  d0:	61000e20 	.inst	0x61000e20 ; undefined
  d4:	00000000 	udf	#0
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
  d8:	61000e44 	.inst	0x61000e44 ; undefined
  dc:	00000000 	udf	#0
            retval = Uart_event_modem;
  e0:	61000e44 	.inst	0x61000e44 ; undefined
            break;
  e4:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
  e8:	61000e6c 	.inst	0x61000e6c ; undefined
  ec:	00000000 	udf	#0
  f0:	00000001 	udf	#1
        	retval =Uart_event_thre;
  f4:	00000000 	udf	#0
  f8:	00000001 	udf	#1
        	break;
  fc:	00000000 	udf	#0
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
 100:	61000e6c 	.inst	0x61000e6c ; undefined
 104:	00000000 	udf	#0
 108:	61000e94 	.inst	0x61000e94 ; undefined
        	retval = Uart_event_timeout;
 10c:	00000000 	udf	#0
 110:	61000e94 	.inst	0x61000e94 ; undefined
        	break;
 114:	00000000 	udf	#0
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
 118:	61000eac 	.inst	0x61000eac ; undefined
 11c:	00000000 	udf	#0
 120:	61000eac 	.inst	0x61000eac ; undefined
        	retval = Received_data_available;
 124:	00000000 	udf	#0
 128:	61000ed4 	.inst	0x61000ed4 ; undefined
            break;
 12c:	00000000 	udf	#0
        	printf("Overrun/parity/ framing errors or break interrupt");
 130:	61000ed4 	.inst	0x61000ed4 ; undefined
 134:	00000000 	udf	#0
 138:	61000ef8 	.inst	0x61000ef8 ; undefined
        	retval = Receiver_line_status;
 13c:	00000000 	udf	#0
 140:	61000d34 	.inst	0x61000d34 ; undefined
            break;
 144:	00000000 	udf	#0
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
 148:	61000d58 	.inst	0x61000d58 ; undefined
 14c:	00000000 	udf	#0
 150:	61000ef8 	.inst	0x61000ef8 ; undefined
        	retval = Uart_event_busy;
 154:	00000000 	udf	#0
 158:	61000f1c 	.inst	0x61000f1c ; undefined
            break;
 15c:	00000000 	udf	#0
            retval = 0;
 160:	61000f1c 	.inst	0x61000f1c ; undefined
            break;
 164:	00000000 	udf	#0
    return retval;
 168:	61000f3c 	.inst	0x61000f3c ; undefined
}
 16c:	00000000 	udf	#0
 170:	61000f3c 	.inst	0x61000f3c ; undefined
 174:	00000000 	udf	#0
 178:	61000f48 	.inst	0x61000f48 ; undefined
 17c:	00000000 	udf	#0
 180:	00000001 	udf	#1
 184:	00000000 	udf	#0
 188:	00000001 	udf	#1
 18c:	00000000 	udf	#0
 190:	61000f48 	.inst	0x61000f48 ; undefined
 194:	00000000 	udf	#0
 198:	61000fcc 	.inst	0x61000fcc ; undefined
 19c:	00000000 	udf	#0
 1a0:	61000fcc 	.inst	0x61000fcc ; undefined
 1a4:	00000000 	udf	#0
 1a8:	61000fe8 	.inst	0x61000fe8 ; undefined
 1ac:	00000000 	udf	#0
 1b0:	61000fe8 	.inst	0x61000fe8 ; undefined
 1b4:	00000000 	udf	#0
 1b8:	61001004 	.inst	0x61001004 ; undefined
 1bc:	00000000 	udf	#0
 1c0:	61001004 	.inst	0x61001004 ; undefined
 1c4:	00000000 	udf	#0
 1c8:	6100102c 	.inst	0x6100102c ; undefined
 1cc:	00000000 	udf	#0
 1d0:	6100102c 	.inst	0x6100102c ; undefined
 1d4:	00000000 	udf	#0
 1d8:	61001360 	.inst	0x61001360 ; undefined
 1dc:	00000000 	udf	#0
 1e0:	61001360 	.inst	0x61001360 ; undefined
 1e4:	00000000 	udf	#0
 1e8:	6100147c 	.inst	0x6100147c ; undefined
 1ec:	00000000 	udf	#0
 1f0:	6100147c 	.inst	0x6100147c ; undefined
 1f4:	00000000 	udf	#0
 1f8:	6100158c 	.inst	0x6100158c ; undefined
 1fc:	00000000 	udf	#0
 200:	6100158c 	.inst	0x6100158c ; undefined
 204:	00000000 	udf	#0
 208:	610015ec 	.inst	0x610015ec ; undefined
 20c:	00000000 	udf	#0
 210:	00000001 	udf	#1
 214:	00000000 	udf	#0
 218:	00000001 	udf	#1
 21c:	00000000 	udf	#0
 220:	610015ec 	.inst	0x610015ec ; undefined
 224:	00000000 	udf	#0
 228:	61001638 	.inst	0x61001638 ; undefined
 22c:	00000000 	udf	#0
 230:	61001638 	.inst	0x61001638 ; undefined
 234:	00000000 	udf	#0
 238:	61001678 	.inst	0x61001678 ; undefined
 23c:	00000000 	udf	#0
 240:	61001678 	.inst	0x61001678 ; undefined
 244:	00000000 	udf	#0
 248:	610016b0 	.inst	0x610016b0 ; undefined
 24c:	00000000 	udf	#0
 250:	610016b0 	.inst	0x610016b0 ; undefined
 254:	00000000 	udf	#0
 258:	610016d8 	.inst	0x610016d8 ; undefined
 25c:	00000000 	udf	#0
 260:	00000001 	udf	#1
 264:	00000000 	udf	#0
 268:	00000001 	udf	#1
 26c:	00000000 	udf	#0
 270:	00000001 	udf	#1
 274:	00000000 	udf	#0
 278:	00000001 	udf	#1
 27c:	00000000 	udf	#0
 280:	00000001 	udf	#1
 284:	00000000 	udf	#0
 288:	00000001 	udf	#1
 28c:	00000000 	udf	#0
 290:	610016d8 	.inst	0x610016d8 ; undefined
 294:	00000000 	udf	#0
 298:	6100178c 	.inst	0x6100178c ; undefined
 29c:	00000000 	udf	#0
 2a0:	00000001 	udf	#1
 2a4:	00000000 	udf	#0
 2a8:	00000001 	udf	#1
 2ac:	00000000 	udf	#0
 2b0:	00000001 	udf	#1
 2b4:	00000000 	udf	#0
 2b8:	00000001 	udf	#1
 2bc:	00000000 	udf	#0
 2c0:	00000001 	udf	#1
 2c4:	00000000 	udf	#0
 2c8:	00000001 	udf	#1
	...
 2e0:	6100178c 	.inst	0x6100178c ; undefined
 2e4:	00000000 	udf	#0
 2e8:	610017bc 	.inst	0x610017bc ; undefined
	...
 300:	610017bc 	.inst	0x610017bc ; undefined
 304:	00000000 	udf	#0
 308:	61001904 	.inst	0x61001904 ; undefined
	...
 320:	61001904 	.inst	0x61001904 ; undefined
 324:	00000000 	udf	#0
 328:	61001978 	.inst	0x61001978 ; undefined
 32c:	00000000 	udf	#0
 330:	61001978 	.inst	0x61001978 ; undefined
 334:	00000000 	udf	#0
 338:	61001aa4 	.inst	0x61001aa4 ; undefined
 33c:	00000000 	udf	#0
 340:	61001aa4 	.inst	0x61001aa4 ; undefined
 344:	00000000 	udf	#0
 348:	610021d0 	.inst	0x610021d0 ; undefined
 34c:	00000000 	udf	#0
 350:	610021d0 	.inst	0x610021d0 ; undefined
 354:	00000000 	udf	#0
 358:	61002280 	.inst	0x61002280 ; undefined
	...
 370:	61002280 	.inst	0x61002280 ; undefined
 374:	00000000 	udf	#0
 378:	610022a8 	.inst	0x610022a8 ; undefined
	...
 390:	610022a8 	.inst	0x610022a8 ; undefined
 394:	00000000 	udf	#0
 398:	61002300 	.inst	0x61002300 ; undefined
 39c:	00000000 	udf	#0
 3a0:	61002300 	.inst	0x61002300 ; undefined
 3a4:	00000000 	udf	#0
 3a8:	61002318 	.inst	0x61002318 ; undefined
 3ac:	00000000 	udf	#0
 3b0:	00000001 	udf	#1
 3b4:	00000000 	udf	#0
 3b8:	00000001 	udf	#1
 3bc:	00000000 	udf	#0
 3c0:	61002318 	.inst	0x61002318 ; undefined
 3c4:	00000000 	udf	#0
 3c8:	6100236c 	.inst	0x6100236c ; undefined
 3cc:	00000000 	udf	#0
 3d0:	00000001 	udf	#1
 3d4:	00000000 	udf	#0
 3d8:	00000001 	udf	#1
	...
 3f0:	6100236c 	.inst	0x6100236c ; undefined
 3f4:	00000000 	udf	#0
 3f8:	61002370 	.inst	0x61002370 ; undefined
 3fc:	00000000 	udf	#0
 400:	61002370 	.inst	0x61002370 ; undefined
 404:	00000000 	udf	#0
 408:	61002390 	.inst	0x61002390 ; undefined
 40c:	00000000 	udf	#0
 410:	61002390 	.inst	0x61002390 ; undefined
 414:	00000000 	udf	#0
 418:	610023b0 	.inst	0x610023b0 ; undefined
 41c:	00000000 	udf	#0
 420:	610023b0 	.inst	0x610023b0 ; undefined
 424:	00000000 	udf	#0
 428:	610023d0 	.inst	0x610023d0 ; undefined
 42c:	00000000 	udf	#0
 430:	610023d0 	.inst	0x610023d0 ; undefined
 434:	00000000 	udf	#0
 438:	610023f0 	.inst	0x610023f0 ; undefined
 43c:	00000000 	udf	#0
 440:	610023f0 	.inst	0x610023f0 ; undefined
 444:	00000000 	udf	#0
 448:	61002410 	.inst	0x61002410 ; undefined
 44c:	00000000 	udf	#0
 450:	00000001 	udf	#1
 454:	00000000 	udf	#0
 458:	00000001 	udf	#1
 45c:	00000000 	udf	#0
 460:	61002410 	.inst	0x61002410 ; undefined
 464:	00000000 	udf	#0
 468:	61002430 	.inst	0x61002430 ; undefined
 46c:	00000000 	udf	#0
 470:	61002430 	.inst	0x61002430 ; undefined
 474:	00000000 	udf	#0
 478:	61002450 	.inst	0x61002450 ; undefined
	...
 490:	00000001 	udf	#1
 494:	00000000 	udf	#0
 498:	00000001 	udf	#1
 49c:	00000000 	udf	#0
 4a0:	00000001 	udf	#1
 4a4:	00000000 	udf	#0
 4a8:	00000001 	udf	#1
 4ac:	00000000 	udf	#0
 4b0:	61002450 	.inst	0x61002450 ; undefined
 4b4:	00000000 	udf	#0
 4b8:	610024e0 	.inst	0x610024e0 ; undefined
 4bc:	00000000 	udf	#0
 4c0:	00000001 	udf	#1
 4c4:	00000000 	udf	#0
 4c8:	00000001 	udf	#1
 4cc:	00000000 	udf	#0
 4d0:	610024e0 	.inst	0x610024e0 ; undefined
 4d4:	00000000 	udf	#0
 4d8:	6100251c 	.inst	0x6100251c ; undefined
	...
 4f0:	6100251c 	.inst	0x6100251c ; undefined
 4f4:	00000000 	udf	#0
 4f8:	61002540 	.inst	0x61002540 ; undefined
 4fc:	00000000 	udf	#0
 500:	61002540 	.inst	0x61002540 ; undefined
 504:	00000000 	udf	#0
 508:	61002564 	.inst	0x61002564 ; undefined
 50c:	00000000 	udf	#0
 510:	61002564 	.inst	0x61002564 ; undefined
 514:	00000000 	udf	#0
 518:	61002628 	.inst	0x61002628 ; undefined
 51c:	00000000 	udf	#0
 520:	61002628 	.inst	0x61002628 ; undefined
 524:	00000000 	udf	#0
 528:	6100265c 	.inst	0x6100265c ; undefined
 52c:	00000000 	udf	#0
 530:	6100265c 	.inst	0x6100265c ; undefined
 534:	00000000 	udf	#0
 538:	61002690 	.inst	0x61002690 ; undefined
 53c:	00000000 	udf	#0
 540:	00000001 	udf	#1
 544:	00000000 	udf	#0
 548:	00000001 	udf	#1
 54c:	00000000 	udf	#0
 550:	61002690 	.inst	0x61002690 ; undefined
 554:	00000000 	udf	#0
 558:	610026b4 	.inst	0x610026b4 ; undefined
 55c:	00000000 	udf	#0
 560:	00000001 	udf	#1
 564:	00000000 	udf	#0
 568:	00000001 	udf	#1
 56c:	00000000 	udf	#0
 570:	610026b4 	.inst	0x610026b4 ; undefined
 574:	00000000 	udf	#0
 578:	610026e8 	.inst	0x610026e8 ; undefined
 57c:	00000000 	udf	#0
 580:	00000001 	udf	#1
 584:	00000000 	udf	#0
 588:	00000001 	udf	#1
 58c:	00000000 	udf	#0
 590:	610026e8 	.inst	0x610026e8 ; undefined
 594:	00000000 	udf	#0
 598:	61002788 	.inst	0x61002788 ; undefined
 59c:	00000000 	udf	#0
 5a0:	00000001 	udf	#1
 5a4:	00000000 	udf	#0
 5a8:	00000001 	udf	#1
 5ac:	00000000 	udf	#0
 5b0:	61002788 	.inst	0x61002788 ; undefined
 5b4:	00000000 	udf	#0
 5b8:	610027a4 	.inst	0x610027a4 ; undefined
 5bc:	00000000 	udf	#0
 5c0:	610027a4 	.inst	0x610027a4 ; undefined
 5c4:	00000000 	udf	#0
 5c8:	61002828 	.inst	0x61002828 ; undefined
 5cc:	00000000 	udf	#0
 5d0:	61002828 	.inst	0x61002828 ; undefined
 5d4:	00000000 	udf	#0
 5d8:	6100284c 	.inst	0x6100284c ; undefined
 5dc:	00000000 	udf	#0
 5e0:	6100284c 	.inst	0x6100284c ; undefined
 5e4:	00000000 	udf	#0
 5e8:	61002870 	.inst	0x61002870 ; undefined
 5ec:	00000000 	udf	#0
 5f0:	61002870 	.inst	0x61002870 ; undefined
 5f4:	00000000 	udf	#0
 5f8:	61002894 	.inst	0x61002894 ; undefined
 5fc:	00000000 	udf	#0
 600:	00000001 	udf	#1
 604:	00000000 	udf	#0
 608:	00000001 	udf	#1
 60c:	00000000 	udf	#0
 610:	61002894 	.inst	0x61002894 ; undefined
 614:	00000000 	udf	#0
 618:	610028c0 	.inst	0x610028c0 ; undefined
 61c:	00000000 	udf	#0
 620:	00000001 	udf	#1
 624:	00000000 	udf	#0
 628:	00000001 	udf	#1
 62c:	00000000 	udf	#0
 630:	610028c0 	.inst	0x610028c0 ; undefined
 634:	00000000 	udf	#0
 638:	610028e4 	.inst	0x610028e4 ; undefined
 63c:	00000000 	udf	#0
 640:	610028e4 	.inst	0x610028e4 ; undefined
 644:	00000000 	udf	#0
 648:	6100290c 	.inst	0x6100290c ; undefined
 64c:	00000000 	udf	#0
 650:	6100290c 	.inst	0x6100290c ; undefined
 654:	00000000 	udf	#0
 658:	61002924 	.inst	0x61002924 ; undefined
 65c:	00000000 	udf	#0
 660:	61002924 	.inst	0x61002924 ; undefined
 664:	00000000 	udf	#0
 668:	6100293c 	.inst	0x6100293c ; undefined
 66c:	00000000 	udf	#0
 670:	6100293c 	.inst	0x6100293c ; undefined
 674:	00000000 	udf	#0
 678:	61002ad8 	.inst	0x61002ad8 ; undefined
 67c:	00000000 	udf	#0
 680:	00000001 	udf	#1
 684:	00000000 	udf	#0
 688:	00000001 	udf	#1
 68c:	00000000 	udf	#0
 690:	00000001 	udf	#1
 694:	00000000 	udf	#0
 698:	00000001 	udf	#1
 69c:	00000000 	udf	#0
 6a0:	00000001 	udf	#1
 6a4:	00000000 	udf	#0
 6a8:	00000001 	udf	#1
 6ac:	00000000 	udf	#0
 6b0:	00000001 	udf	#1
 6b4:	00000000 	udf	#0
 6b8:	00000001 	udf	#1
 6bc:	00000000 	udf	#0
 6c0:	00000001 	udf	#1
 6c4:	00000000 	udf	#0
 6c8:	00000001 	udf	#1
	...
 6e0:	61002ad8 	.inst	0x61002ad8 ; undefined
 6e4:	00000000 	udf	#0
 6e8:	61002eb0 	.inst	0x61002eb0 ; undefined
	...
 700:	61002eb0 	.inst	0x61002eb0 ; undefined
 704:	00000000 	udf	#0
 708:	61002ed0 	.inst	0x61002ed0 ; undefined
 70c:	00000000 	udf	#0
 710:	61002ed0 	.inst	0x61002ed0 ; undefined
 714:	00000000 	udf	#0
 718:	61002f88 	.inst	0x61002f88 ; undefined
 71c:	00000000 	udf	#0
 720:	61002f88 	.inst	0x61002f88 ; undefined
 724:	00000000 	udf	#0
 728:	61003040 	.inst	0x61003040 ; undefined
 72c:	00000000 	udf	#0
 730:	61003040 	.inst	0x61003040 ; undefined
 734:	00000000 	udf	#0
 738:	610030e8 	.inst	0x610030e8 ; undefined
 73c:	00000000 	udf	#0
 740:	610030e8 	.inst	0x610030e8 ; undefined
 744:	00000000 	udf	#0
 748:	61003194 	.inst	0x61003194 ; undefined
 74c:	00000000 	udf	#0
 750:	61003194 	.inst	0x61003194 ; undefined
 754:	00000000 	udf	#0
 758:	610031d8 	.inst	0x610031d8 ; undefined
 75c:	00000000 	udf	#0
 760:	610031d8 	.inst	0x610031d8 ; undefined
 764:	00000000 	udf	#0
 768:	61003240 	.inst	0x61003240 ; undefined
 76c:	00000000 	udf	#0
 770:	00000001 	udf	#1
 774:	00000000 	udf	#0
 778:	00000001 	udf	#1
 77c:	00000000 	udf	#0
 780:	00000001 	udf	#1
 784:	00000000 	udf	#0
 788:	00000001 	udf	#1
 78c:	00000000 	udf	#0
 790:	00000001 	udf	#1
 794:	00000000 	udf	#0
 798:	00000001 	udf	#1
 79c:	00000000 	udf	#0
 7a0:	00000001 	udf	#1
 7a4:	00000000 	udf	#0
 7a8:	00000001 	udf	#1
 7ac:	00000000 	udf	#0
 7b0:	00000001 	udf	#1
 7b4:	00000000 	udf	#0
 7b8:	00000001 	udf	#1
 7bc:	00000000 	udf	#0
 7c0:	00000001 	udf	#1
 7c4:	00000000 	udf	#0
 7c8:	00000001 	udf	#1
 7cc:	00000000 	udf	#0
 7d0:	00000001 	udf	#1
 7d4:	00000000 	udf	#0
 7d8:	00000001 	udf	#1
 7dc:	00000000 	udf	#0
 7e0:	00000001 	udf	#1
 7e4:	00000000 	udf	#0
 7e8:	00000001 	udf	#1
 7ec:	00000000 	udf	#0
 7f0:	00000001 	udf	#1
 7f4:	00000000 	udf	#0
 7f8:	00000001 	udf	#1
 7fc:	00000000 	udf	#0
 800:	00000001 	udf	#1
 804:	00000000 	udf	#0
 808:	00000001 	udf	#1
 80c:	00000000 	udf	#0
 810:	00000001 	udf	#1
 814:	00000000 	udf	#0
 818:	00000001 	udf	#1
 81c:	00000000 	udf	#0
 820:	00000001 	udf	#1
 824:	00000000 	udf	#0
 828:	00000001 	udf	#1
 82c:	00000000 	udf	#0
 830:	00000001 	udf	#1
 834:	00000000 	udf	#0
 838:	00000001 	udf	#1
 83c:	00000000 	udf	#0
 840:	00000001 	udf	#1
 844:	00000000 	udf	#0
 848:	00000001 	udf	#1
 84c:	00000000 	udf	#0
 850:	00000001 	udf	#1
 854:	00000000 	udf	#0
 858:	00000001 	udf	#1
 85c:	00000000 	udf	#0
 860:	00000001 	udf	#1
 864:	00000000 	udf	#0
 868:	00000001 	udf	#1
 86c:	00000000 	udf	#0
 870:	00000001 	udf	#1
 874:	00000000 	udf	#0
 878:	00000001 	udf	#1
 87c:	00000000 	udf	#0
 880:	00000001 	udf	#1
 884:	00000000 	udf	#0
 888:	00000001 	udf	#1
 88c:	00000000 	udf	#0
 890:	00000001 	udf	#1
 894:	00000000 	udf	#0
 898:	00000001 	udf	#1
 89c:	00000000 	udf	#0
 8a0:	00000001 	udf	#1
 8a4:	00000000 	udf	#0
 8a8:	00000001 	udf	#1
	...
 8c0:	61003240 	.inst	0x61003240 ; undefined
 8c4:	00000000 	udf	#0
 8c8:	61003280 	.inst	0x61003280 ; undefined
 8cc:	00000000 	udf	#0
 8d0:	61003280 	.inst	0x61003280 ; undefined
 8d4:	00000000 	udf	#0
 8d8:	610032c4 	.inst	0x610032c4 ; undefined
 8dc:	00000000 	udf	#0
 8e0:	610032c4 	.inst	0x610032c4 ; undefined
 8e4:	00000000 	udf	#0
 8e8:	61003310 	.inst	0x61003310 ; undefined
 8ec:	00000000 	udf	#0
 8f0:	00000001 	udf	#1
 8f4:	00000000 	udf	#0
 8f8:	00000001 	udf	#1
 8fc:	00000000 	udf	#0
 900:	00000001 	udf	#1
 904:	00000000 	udf	#0
 908:	00000001 	udf	#1
 90c:	00000000 	udf	#0
 910:	00000001 	udf	#1
 914:	00000000 	udf	#0
 918:	00000001 	udf	#1
 91c:	00000000 	udf	#0
 920:	61003310 	.inst	0x61003310 ; undefined
 924:	00000000 	udf	#0
 928:	61003370 	.inst	0x61003370 ; undefined
 92c:	00000000 	udf	#0
 930:	00000001 	udf	#1
 934:	00000000 	udf	#0
 938:	00000001 	udf	#1
 93c:	00000000 	udf	#0
 940:	61003370 	.inst	0x61003370 ; undefined
 944:	00000000 	udf	#0
 948:	610033bc 	.inst	0x610033bc ; undefined
 94c:	00000000 	udf	#0
 950:	00000001 	udf	#1
 954:	00000000 	udf	#0
 958:	00000001 	udf	#1
 95c:	00000000 	udf	#0
 960:	00000001 	udf	#1
 964:	00000000 	udf	#0
 968:	00000001 	udf	#1
 96c:	00000000 	udf	#0
 970:	00000001 	udf	#1
 974:	00000000 	udf	#0
 978:	00000001 	udf	#1
 97c:	00000000 	udf	#0
 980:	610033bc 	.inst	0x610033bc ; undefined
 984:	00000000 	udf	#0
 988:	61003408 	.inst	0x61003408 ; undefined
 98c:	00000000 	udf	#0
 990:	61003408 	.inst	0x61003408 ; undefined
 994:	00000000 	udf	#0
 998:	6100345c 	.inst	0x6100345c ; undefined
 99c:	00000000 	udf	#0
 9a0:	6100345c 	.inst	0x6100345c ; undefined
 9a4:	00000000 	udf	#0
 9a8:	610034a4 	.inst	0x610034a4 ; undefined
 9ac:	00000000 	udf	#0
 9b0:	610034a4 	.inst	0x610034a4 ; undefined
 9b4:	00000000 	udf	#0
 9b8:	610034ec 	.inst	0x610034ec ; undefined
 9bc:	00000000 	udf	#0
 9c0:	610034ec 	.inst	0x610034ec ; undefined
 9c4:	00000000 	udf	#0
 9c8:	61003540 	.inst	0x61003540 ; undefined
 9cc:	00000000 	udf	#0
 9d0:	00000001 	udf	#1
 9d4:	00000000 	udf	#0
 9d8:	00000001 	udf	#1
 9dc:	00000000 	udf	#0
 9e0:	61003540 	.inst	0x61003540 ; undefined
 9e4:	00000000 	udf	#0
 9e8:	61003588 	.inst	0x61003588 ; undefined
 9ec:	00000000 	udf	#0
 9f0:	61003588 	.inst	0x61003588 ; undefined
 9f4:	00000000 	udf	#0
 9f8:	610035a0 	.inst	0x610035a0 ; undefined
 9fc:	00000000 	udf	#0
 a00:	610035a0 	.inst	0x610035a0 ; undefined
 a04:	00000000 	udf	#0
 a08:	610035d0 	.inst	0x610035d0 ; undefined
 a0c:	00000000 	udf	#0
 a10:	610035d0 	.inst	0x610035d0 ; undefined
 a14:	00000000 	udf	#0
 a18:	61003600 	.inst	0x61003600 ; undefined
 a1c:	00000000 	udf	#0
 a20:	61003600 	.inst	0x61003600 ; undefined
 a24:	00000000 	udf	#0
 a28:	61003630 	.inst	0x61003630 ; undefined
 a2c:	00000000 	udf	#0
 a30:	61003630 	.inst	0x61003630 ; undefined
 a34:	00000000 	udf	#0
 a38:	61003654 	.inst	0x61003654 ; undefined
	...
 a50:	61003654 	.inst	0x61003654 ; undefined
 a54:	00000000 	udf	#0
 a58:	61003ba8 	.inst	0x61003ba8 ; undefined
 a5c:	00000000 	udf	#0
 a60:	61003ba8 	.inst	0x61003ba8 ; undefined
 a64:	00000000 	udf	#0
 a68:	61003c10 	.inst	0x61003c10 ; undefined
	...
 a80:	61003c10 	.inst	0x61003c10 ; undefined
 a84:	00000000 	udf	#0
 a88:	61003c2c 	.inst	0x61003c2c ; undefined
	...
 aa0:	61003c2c 	.inst	0x61003c2c ; undefined
 aa4:	00000000 	udf	#0
 aa8:	61003cd8 	.inst	0x61003cd8 ; undefined
 aac:	00000000 	udf	#0
 ab0:	61003cd8 	.inst	0x61003cd8 ; undefined
 ab4:	00000000 	udf	#0
 ab8:	61003dbc 	.inst	0x61003dbc ; undefined
 abc:	00000000 	udf	#0
 ac0:	61003dbc 	.inst	0x61003dbc ; undefined
 ac4:	00000000 	udf	#0
 ac8:	61004408 	.inst	0x61004408 ; undefined
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
{
   0:	3a434347 	ccmn	w26, w3, #0x7, mi  // mi = first
   4:	4e472820 	trn1	v0.8h, v1.8h, v7.8h
	panic();
   8:	6f542055 	umlal2	v21.4s, v2.8h, v4.h[1]
}
   c:	68636c6f 	.inst	0x68636c6f ; undefined
  10:	206e6961 	.inst	0x206e6961 ; undefined
  14:	20726f66 	.inst	0x20726f66 ; undefined
{
  18:	20656874 	.inst	0x20656874 ; undefined
  1c:	206d7241 	.inst	0x206d7241 ; undefined
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
  20:	68637241 	.inst	0x68637241 ; undefined
  24:	63657469 	.inst	0x63657469 ; undefined
  28:	65727574 	fnmls	z20.h, p5/m, z11.h, z18.h
  2c:	2e313120 	usubw	v0.8h, v9.8h, v17.8b
	return 0;
  30:	30322d32 	adr	x18, 645d5 <__stack_size+0x605d5>
}
  34:	302e3232 	adr	x18, 5c679 <__stack_size+0x58679>
  38:	61282032 	.inst	0x61282032 ; undefined
    __delay(delay_cnt);
  3c:	312d6d72 	adds	w18, w11, #0xb5b
  40:	34312e31 	cbz	w17, 62604 <__stack_size+0x5e604>
}
  44:	31202929 	adds	w9, w9, #0x80a
  48:	2e322e31 	uqsub	v17.8b, v17.8b, v18.8b
  4c:	30322031 	adr	x17, 64451 <__stack_size+0x60451>
		spi->CTRLR0 |= (SPI_CTRLR0_SCPH); // sck toggles at start of first data bit.
  50:	31303232 	adds	w18, w17, #0xc0c
  54:	Address 0x0000000000000054 is out of bounds.


Disassembly of section .debug_frame:

0000000000000000 <.debug_frame>:
{
       0:	0000000c 	udf	#12
       4:	ffffffff 	.inst	0xffffffff ; undefined
	panic();
       8:	78040001 	sturh	w1, [x0, #64]
}
       c:	001f0c1e 	.inst	0x001f0c1e ; undefined
      10:	0000001c 	udf	#28
      14:	00000000 	udf	#0
{
      18:	61000d10 	.inst	0x61000d10 ; undefined
      1c:	00000000 	udf	#0
	request_irq(IRQn + SPI_ID_OFFSET_APU_TO_RPU, handler);
      20:	00000024 	udf	#36
      24:	00000000 	udf	#0
      28:	47100e41 	.inst	0x47100e41 ; undefined
      2c:	0000000e 	udf	#14
	return 0;
      30:	0000001c 	udf	#28
}
      34:	00000000 	udf	#0
      38:	61000d58 	.inst	0x61000d58 ; undefined
    __delay(delay_cnt);
      3c:	00000000 	udf	#0
      40:	00000020 	udf	#32
}
      44:	00000000 	udf	#0
      48:	46100e41 	.inst	0x46100e41 ; undefined
      4c:	0000000e 	udf	#14
      50:	0000001c 	udf	#28
      54:	00000000 	udf	#0
      58:	61000d78 	.inst	0x61000d78 ; undefined
      5c:	00000000 	udf	#0
      60:	0000001c 	udf	#28
      64:	00000000 	udf	#0
		spi->CTRLR0 |= ~(SPI_CTRLR0_SCPH); // sck toggles in middle of first data bit.
      68:	45100e41 	.inst	0x45100e41 ; undefined
      6c:	0000000e 	udf	#14
      70:	0000001c 	udf	#28
      74:	00000000 	udf	#0
      78:	61000d94 	.inst	0x61000d94 ; undefined
	return 0;
      7c:	00000000 	udf	#0
}
      80:	00000018 	udf	#24
      84:	00000000 	udf	#0
	pri = pri & (~(0xffUL << ((int_id & 0x03) << 3))) | (priority << ((int_id & 0x03) << 3));
      88:	44100e41 	.inst	0x44100e41 ; undefined
      8c:	0000000e 	udf	#14
      90:	00000024 	udf	#36
      94:	00000000 	udf	#0
      98:	61000dac 	.inst	0x61000dac ; undefined
      9c:	00000000 	udf	#0
      a0:	0000004c 	udf	#76
      a4:	00000000 	udf	#0
      a8:	9d100e41 	.inst	0x9d100e41 ; undefined
	writel_relaxed(pri, addr + (int_id & 0xfffffffc));
      ac:	51019e02 	sub	w2, w16, #0x67
      b0:	000eddde 	.inst	0x000eddde ; undefined
      b4:	00000000 	udf	#0
      b8:	0000000c 	udf	#12
      bc:	ffffffff 	.inst	0xffffffff ; undefined
      c0:	78040001 	sturh	w1, [x0, #64]
      c4:	001f0c1e 	.inst	0x001f0c1e ; undefined
      c8:	0000001c 	udf	#28
	return 0;
      cc:	000000b8 	udf	#184
}
      d0:	61000df8 	.inst	0x61000df8 ; undefined
      d4:	00000000 	udf	#0
            printf("Clear to send or data set ready or ring indicator or data carrier detect");
      d8:	00000028 	udf	#40
      dc:	00000000 	udf	#0
            retval = Uart_event_modem;
      e0:	48200e41 	.inst	0x48200e41 ; undefined
            break;
      e4:	0000000e 	udf	#14
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
      e8:	0000001c 	udf	#28
      ec:	000000b8 	udf	#184
      f0:	61000e20 	.inst	0x61000e20 ; undefined
        	retval =Uart_event_thre;
      f4:	00000000 	udf	#0
      f8:	00000024 	udf	#36
        	break;
      fc:	00000000 	udf	#0
        	printf("No characters in or out of the RCVR FIFO during the last 4 character times and there is at least 1 character in it during this time");
     100:	47100e41 	.inst	0x47100e41 ; undefined
     104:	0000000e 	udf	#14
     108:	0000001c 	udf	#28
        	retval = Uart_event_timeout;
     10c:	000000b8 	udf	#184
     110:	61000e44 	.inst	0x61000e44 ; undefined
        	break;
     114:	00000000 	udf	#0
        	printf("Receiver data available (nonFIFO mode or FIFOs disabled) or RCVR FIFO trigger level reached");
     118:	00000028 	udf	#40
     11c:	00000000 	udf	#0
     120:	48200e41 	.inst	0x48200e41 ; undefined
        	retval = Received_data_available;
     124:	0000000e 	udf	#14
     128:	0000001c 	udf	#28
            break;
     12c:	000000b8 	udf	#184
	...
        	printf("Overrun/parity/ framing errors or break interrupt");
     138:	00000018 	udf	#24
        	retval = Receiver_line_status;
     13c:	00000000 	udf	#0
     140:	44100e41 	.inst	0x44100e41 ; undefined
            break;
     144:	0000000e 	udf	#14
        	printf("Transmitter holding register empty or XMIT FIFO at or below threshold");
     148:	0000001c 	udf	#28
     14c:	000000b8 	udf	#184
     150:	61000e6c 	.inst	0x61000e6c ; undefined
        	retval = Uart_event_busy;
     154:	00000000 	udf	#0
     158:	00000028 	udf	#40
            break;
     15c:	00000000 	udf	#0
            retval = 0;
     160:	48200e41 	.inst	0x48200e41 ; undefined
            break;
     164:	0000000e 	udf	#14
    return retval;
     168:	0000001c 	udf	#28
}
     16c:	000000b8 	udf	#184
     170:	61000e94 	.inst	0x61000e94 ; undefined
     174:	00000000 	udf	#0
     178:	00000018 	udf	#24
     17c:	00000000 	udf	#0
     180:	44100e41 	.inst	0x44100e41 ; undefined
     184:	0000000e 	udf	#14
     188:	0000001c 	udf	#28
     18c:	000000b8 	udf	#184
     190:	61000eac 	.inst	0x61000eac ; undefined
     194:	00000000 	udf	#0
     198:	00000028 	udf	#40
     19c:	00000000 	udf	#0
     1a0:	48200e41 	.inst	0x48200e41 ; undefined
     1a4:	0000000e 	udf	#14
     1a8:	0000001c 	udf	#28
     1ac:	000000b8 	udf	#184
     1b0:	61000ed4 	.inst	0x61000ed4 ; undefined
     1b4:	00000000 	udf	#0
     1b8:	00000024 	udf	#36
     1bc:	00000000 	udf	#0
     1c0:	47200e41 	.inst	0x47200e41 ; undefined
     1c4:	0000000e 	udf	#14
     1c8:	0000001c 	udf	#28
     1cc:	000000b8 	udf	#184
     1d0:	61000d34 	.inst	0x61000d34 ; undefined
     1d4:	00000000 	udf	#0
     1d8:	00000024 	udf	#36
     1dc:	00000000 	udf	#0
     1e0:	47100e41 	.inst	0x47100e41 ; undefined
     1e4:	0000000e 	udf	#14
     1e8:	0000001c 	udf	#28
     1ec:	000000b8 	udf	#184
     1f0:	61000ef8 	.inst	0x61000ef8 ; undefined
     1f4:	00000000 	udf	#0
     1f8:	00000024 	udf	#36
     1fc:	00000000 	udf	#0
     200:	47100e41 	.inst	0x47100e41 ; undefined
     204:	0000000e 	udf	#14
     208:	0000001c 	udf	#28
     20c:	000000b8 	udf	#184
     210:	61000f1c 	.inst	0x61000f1c ; undefined
     214:	00000000 	udf	#0
     218:	00000020 	udf	#32
     21c:	00000000 	udf	#0
     220:	46200e41 	.inst	0x46200e41 ; undefined
     224:	0000000e 	udf	#14
     228:	00000014 	udf	#20
     22c:	000000b8 	udf	#184
     230:	61000f3c 	.inst	0x61000f3c ; undefined
     234:	00000000 	udf	#0
     238:	0000000c 	udf	#12
     23c:	00000000 	udf	#0
     240:	00000024 	udf	#36
     244:	000000b8 	udf	#184
	...
     250:	00000048 	udf	#72
     254:	00000000 	udf	#0
     258:	9d200e41 	.inst	0x9d200e41 ; undefined
     25c:	50039e04 	adr	x4, 761e <__stack_size+0x361e>
     260:	000eddde 	.inst	0x000eddde ; undefined
     264:	00000000 	udf	#0
     268:	00000024 	udf	#36
     26c:	000000b8 	udf	#184
     270:	61000f48 	.inst	0x61000f48 ; undefined
     274:	00000000 	udf	#0
     278:	00000084 	udf	#132
     27c:	00000000 	udf	#0
     280:	9d400e41 	.inst	0x9d400e41 ; undefined
     284:	5f079e08 	.inst	0x5f079e08 ; undefined
     288:	000eddde 	.inst	0x000eddde ; undefined
     28c:	00000000 	udf	#0
     290:	00000024 	udf	#36
     294:	000000b8 	udf	#184
     298:	61000fcc 	.inst	0x61000fcc ; undefined
     29c:	00000000 	udf	#0
     2a0:	0000001c 	udf	#28
     2a4:	00000000 	udf	#0
     2a8:	9d100e41 	.inst	0x9d100e41 ; undefined
     2ac:	45019e02 	.inst	0x45019e02 ; undefined
     2b0:	000eddde 	.inst	0x000eddde ; undefined
     2b4:	00000000 	udf	#0
     2b8:	00000024 	udf	#36
     2bc:	000000b8 	udf	#184
     2c0:	61000fe8 	.inst	0x61000fe8 ; undefined
     2c4:	00000000 	udf	#0
     2c8:	0000001c 	udf	#28
     2cc:	00000000 	udf	#0
     2d0:	9d100e41 	.inst	0x9d100e41 ; undefined
     2d4:	45019e02 	.inst	0x45019e02 ; undefined
     2d8:	000eddde 	.inst	0x000eddde ; undefined
     2dc:	00000000 	udf	#0
     2e0:	0000001c 	udf	#28
     2e4:	000000b8 	udf	#184
     2e8:	61001004 	.inst	0x61001004 ; undefined
     2ec:	00000000 	udf	#0
     2f0:	00000028 	udf	#40
     2f4:	00000000 	udf	#0
     2f8:	48200e41 	.inst	0x48200e41 ; undefined
     2fc:	0000000e 	udf	#14
     300:	00000024 	udf	#36
     304:	000000b8 	udf	#184
     308:	6100102c 	.inst	0x6100102c ; undefined
     30c:	00000000 	udf	#0
     310:	00000334 	udf	#820
     314:	00000000 	udf	#0
     318:	9d400e41 	.inst	0x9d400e41 ; undefined
     31c:	02079e08 	.inst	0x02079e08 ; undefined
     320:	0edddecb 	.inst	0x0edddecb ; undefined
     324:	00000000 	udf	#0
     328:	00000024 	udf	#36
     32c:	000000b8 	udf	#184
     330:	61001360 	.inst	0x61001360 ; undefined
     334:	00000000 	udf	#0
     338:	0000011c 	udf	#284
     33c:	00000000 	udf	#0
     340:	9d400e41 	.inst	0x9d400e41 ; undefined
     344:	02079e08 	.inst	0x02079e08 ; undefined
     348:	0eddde45 	.inst	0x0eddde45 ; undefined
     34c:	00000000 	udf	#0
     350:	00000024 	udf	#36
     354:	000000b8 	udf	#184
     358:	6100147c 	.inst	0x6100147c ; undefined
     35c:	00000000 	udf	#0
     360:	00000110 	udf	#272
     364:	00000000 	udf	#0
     368:	9d300e41 	.inst	0x9d300e41 ; undefined
     36c:	02059e06 	.inst	0x02059e06 ; undefined
     370:	0eddde42 	.inst	0x0eddde42 ; undefined
     374:	00000000 	udf	#0
     378:	00000024 	udf	#36
     37c:	000000b8 	udf	#184
     380:	6100158c 	.inst	0x6100158c ; undefined
     384:	00000000 	udf	#0
     388:	00000060 	udf	#96
     38c:	00000000 	udf	#0
     390:	9d200e41 	.inst	0x9d200e41 ; undefined
     394:	56039e04 	.inst	0x56039e04 ; undefined
     398:	000eddde 	.inst	0x000eddde ; undefined
     39c:	00000000 	udf	#0
     3a0:	00000024 	udf	#36
     3a4:	000000b8 	udf	#184
	...
     3b0:	00000040 	udf	#64
     3b4:	00000000 	udf	#0
     3b8:	9d200e41 	.inst	0x9d200e41 ; undefined
     3bc:	4e039e04 	.inst	0x4e039e04 ; undefined
     3c0:	000eddde 	.inst	0x000eddde ; undefined
     3c4:	00000000 	udf	#0
     3c8:	00000024 	udf	#36
     3cc:	000000b8 	udf	#184
     3d0:	610015ec 	.inst	0x610015ec ; undefined
     3d4:	00000000 	udf	#0
     3d8:	0000004c 	udf	#76
     3dc:	00000000 	udf	#0
     3e0:	9d200e41 	.inst	0x9d200e41 ; undefined
     3e4:	51039e04 	sub	w4, w16, #0xe7
     3e8:	000eddde 	.inst	0x000eddde ; undefined
     3ec:	00000000 	udf	#0
     3f0:	00000024 	udf	#36
     3f4:	000000b8 	udf	#184
     3f8:	61001638 	.inst	0x61001638 ; undefined
     3fc:	00000000 	udf	#0
     400:	00000040 	udf	#64
     404:	00000000 	udf	#0
     408:	9d100e41 	.inst	0x9d100e41 ; undefined
     40c:	4e019e02 	.inst	0x4e019e02 ; undefined
     410:	000eddde 	.inst	0x000eddde ; undefined
     414:	00000000 	udf	#0
     418:	00000024 	udf	#36
     41c:	000000b8 	udf	#184
     420:	61001678 	.inst	0x61001678 ; undefined
     424:	00000000 	udf	#0
     428:	00000038 	udf	#56
     42c:	00000000 	udf	#0
     430:	9d100e41 	.inst	0x9d100e41 ; undefined
     434:	4c019e02 	.inst	0x4c019e02 ; undefined
     438:	000eddde 	.inst	0x000eddde ; undefined
     43c:	00000000 	udf	#0
     440:	00000024 	udf	#36
     444:	000000b8 	udf	#184
     448:	610016b0 	.inst	0x610016b0 ; undefined
     44c:	00000000 	udf	#0
     450:	00000028 	udf	#40
     454:	00000000 	udf	#0
     458:	9d100e41 	.inst	0x9d100e41 ; undefined
     45c:	48019e02 	stlxrh	w1, w2, [x16]
     460:	000eddde 	.inst	0x000eddde ; undefined
     464:	00000000 	udf	#0
     468:	00000024 	udf	#36
     46c:	000000b8 	udf	#184
	...
     478:	00000064 	udf	#100
     47c:	00000000 	udf	#0
     480:	9d300e41 	.inst	0x9d300e41 ; undefined
     484:	57059e06 	.inst	0x57059e06 ; undefined
     488:	000eddde 	.inst	0x000eddde ; undefined
     48c:	00000000 	udf	#0
     490:	00000024 	udf	#36
     494:	000000b8 	udf	#184
	...
     4a0:	0000004c 	udf	#76
     4a4:	00000000 	udf	#0
     4a8:	9d300e41 	.inst	0x9d300e41 ; undefined
     4ac:	51059e06 	sub	w6, w16, #0x167
     4b0:	000eddde 	.inst	0x000eddde ; undefined
     4b4:	00000000 	udf	#0
     4b8:	00000024 	udf	#36
     4bc:	000000b8 	udf	#184
	...
     4c8:	0000004c 	udf	#76
     4cc:	00000000 	udf	#0
     4d0:	9d300e41 	.inst	0x9d300e41 ; undefined
     4d4:	51059e06 	sub	w6, w16, #0x167
     4d8:	000eddde 	.inst	0x000eddde ; undefined
     4dc:	00000000 	udf	#0
     4e0:	00000024 	udf	#36
     4e4:	000000b8 	udf	#184
     4e8:	610016d8 	.inst	0x610016d8 ; undefined
     4ec:	00000000 	udf	#0
     4f0:	000000b4 	udf	#180
     4f4:	00000000 	udf	#0
     4f8:	9d200e41 	.inst	0x9d200e41 ; undefined
     4fc:	6b039e04 	.inst	0x6b039e04 ; undefined
     500:	000eddde 	.inst	0x000eddde ; undefined
     504:	00000000 	udf	#0
     508:	00000014 	udf	#20
     50c:	000000b8 	udf	#184
	...
     518:	0000000c 	udf	#12
     51c:	00000000 	udf	#0
     520:	00000014 	udf	#20
     524:	000000b8 	udf	#184
	...
     530:	0000000c 	udf	#12
     534:	00000000 	udf	#0
     538:	00000024 	udf	#36
     53c:	000000b8 	udf	#184
	...
     548:	000000d8 	udf	#216
     54c:	00000000 	udf	#0
     550:	9d300e41 	.inst	0x9d300e41 ; undefined
     554:	74059e06 	.inst	0x74059e06 ; undefined
     558:	000eddde 	.inst	0x000eddde ; undefined
     55c:	00000000 	udf	#0
     560:	0000000c 	udf	#12
     564:	ffffffff 	.inst	0xffffffff ; undefined
     568:	78040001 	sturh	w1, [x0, #64]
     56c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     570:	0000001c 	udf	#28
     574:	00000560 	udf	#1376
     578:	6100178c 	.inst	0x6100178c ; undefined
     57c:	00000000 	udf	#0
     580:	00000030 	udf	#48
     584:	00000000 	udf	#0
     588:	9d300e41 	.inst	0x9d300e41 ; undefined
     58c:	00059e06 	.inst	0x00059e06 ; undefined
     590:	0000000c 	udf	#12
     594:	ffffffff 	.inst	0xffffffff ; undefined
     598:	78040001 	sturh	w1, [x0, #64]
     59c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     5a0:	0000001c 	udf	#28
     5a4:	00000590 	udf	#1424
     5a8:	610017bc 	.inst	0x610017bc ; undefined
     5ac:	00000000 	udf	#0
     5b0:	00000148 	udf	#328
     5b4:	00000000 	udf	#0
     5b8:	02400e41 	.inst	0x02400e41 ; undefined
     5bc:	00000e50 	udf	#3664
     5c0:	0000000c 	udf	#12
     5c4:	ffffffff 	.inst	0xffffffff ; undefined
     5c8:	78040001 	sturh	w1, [x0, #64]
     5cc:	001f0c1e 	.inst	0x001f0c1e ; undefined
     5d0:	00000024 	udf	#36
     5d4:	000005c0 	udf	#1472
     5d8:	61001904 	.inst	0x61001904 ; undefined
     5dc:	00000000 	udf	#0
     5e0:	00000074 	udf	#116
     5e4:	00000000 	udf	#0
     5e8:	9d300e41 	.inst	0x9d300e41 ; undefined
     5ec:	5b059e06 	.inst	0x5b059e06 ; undefined
     5f0:	000eddde 	.inst	0x000eddde ; undefined
     5f4:	00000000 	udf	#0
     5f8:	00000024 	udf	#36
     5fc:	000005c0 	udf	#1472
     600:	61001978 	.inst	0x61001978 ; undefined
     604:	00000000 	udf	#0
     608:	0000012c 	udf	#300
     60c:	00000000 	udf	#0
     610:	9d500e41 	.inst	0x9d500e41 ; undefined
     614:	02099e0a 	.inst	0x02099e0a ; undefined
     618:	0eddde49 	.inst	0x0eddde49 ; undefined
     61c:	00000000 	udf	#0
     620:	0000002c 	udf	#44
     624:	000005c0 	udf	#1472
     628:	61001aa4 	.inst	0x61001aa4 ; undefined
     62c:	00000000 	udf	#0
     630:	0000072c 	udf	#1836
     634:	00000000 	udf	#0
     638:	9d700e41 	.inst	0x9d700e41 ; undefined
     63c:	420d9e0e 	.inst	0x420d9e0e ; undefined
     640:	c7030c93 	.inst	0xc7030c93 ; undefined
     644:	d3ddde01 	.inst	0xd3ddde01 ; undefined
     648:	0000000e 	udf	#14
     64c:	00000000 	udf	#0
     650:	00000024 	udf	#36
     654:	000005c0 	udf	#1472
     658:	610021d0 	.inst	0x610021d0 ; undefined
     65c:	00000000 	udf	#0
     660:	000000b0 	udf	#176
     664:	00000000 	udf	#0
     668:	02b00e41 	.inst	0x02b00e41 ; undefined
     66c:	259e269d 	cmple	p13.s, p1/z, z20.s, #-2
     670:	0eddde6a 	.inst	0x0eddde6a ; undefined
     674:	00000000 	udf	#0
     678:	0000000c 	udf	#12
     67c:	ffffffff 	.inst	0xffffffff ; undefined
     680:	78040001 	sturh	w1, [x0, #64]
     684:	001f0c1e 	.inst	0x001f0c1e ; undefined
     688:	00000024 	udf	#36
     68c:	00000678 	udf	#1656
     690:	61002280 	.inst	0x61002280 ; undefined
     694:	00000000 	udf	#0
     698:	00000028 	udf	#40
     69c:	00000000 	udf	#0
     6a0:	9d200e41 	.inst	0x9d200e41 ; undefined
     6a4:	48039e04 	stlxrh	w3, w4, [x16]
     6a8:	000eddde 	.inst	0x000eddde ; undefined
     6ac:	00000000 	udf	#0
     6b0:	0000000c 	udf	#12
     6b4:	ffffffff 	.inst	0xffffffff ; undefined
     6b8:	78040001 	sturh	w1, [x0, #64]
     6bc:	001f0c1e 	.inst	0x001f0c1e ; undefined
     6c0:	0000001c 	udf	#28
     6c4:	000006b0 	udf	#1712
     6c8:	610022a8 	.inst	0x610022a8 ; undefined
     6cc:	00000000 	udf	#0
     6d0:	00000058 	udf	#88
     6d4:	00000000 	udf	#0
     6d8:	54300e41 	b.ne	608a0 <__stack_size+0x5c8a0>  // b.any
     6dc:	0000000e 	udf	#14
     6e0:	0000001c 	udf	#28
     6e4:	000006b0 	udf	#1712
     6e8:	61002300 	.inst	0x61002300 ; undefined
     6ec:	00000000 	udf	#0
     6f0:	00000018 	udf	#24
     6f4:	00000000 	udf	#0
     6f8:	44100e41 	.inst	0x44100e41 ; undefined
     6fc:	0000000e 	udf	#14
     700:	00000024 	udf	#36
     704:	000006b0 	udf	#1712
	...
     710:	00000038 	udf	#56
     714:	00000000 	udf	#0
     718:	9d300e41 	.inst	0x9d300e41 ; undefined
     71c:	4c059e06 	.inst	0x4c059e06 ; undefined
     720:	000eddde 	.inst	0x000eddde ; undefined
     724:	00000000 	udf	#0
     728:	00000024 	udf	#36
     72c:	000006b0 	udf	#1712
     730:	61002318 	.inst	0x61002318 ; undefined
     734:	00000000 	udf	#0
     738:	00000054 	udf	#84
     73c:	00000000 	udf	#0
     740:	9d300e41 	.inst	0x9d300e41 ; undefined
     744:	53059e06 	.inst	0x53059e06 ; undefined
     748:	000eddde 	.inst	0x000eddde ; undefined
     74c:	00000000 	udf	#0
     750:	00000024 	udf	#36
     754:	000006b0 	udf	#1712
	...
     760:	00000050 	udf	#80
     764:	00000000 	udf	#0
     768:	9d300e41 	.inst	0x9d300e41 ; undefined
     76c:	52059e06 	eor	w6, w16, #0xf807f807
     770:	000eddde 	.inst	0x000eddde ; undefined
     774:	00000000 	udf	#0
     778:	0000000c 	udf	#12
     77c:	ffffffff 	.inst	0xffffffff ; undefined
     780:	78040001 	sturh	w1, [x0, #64]
     784:	001f0c1e 	.inst	0x001f0c1e ; undefined
     788:	00000014 	udf	#20
     78c:	00000778 	udf	#1912
     790:	6100236c 	.inst	0x6100236c ; undefined
     794:	00000000 	udf	#0
     798:	00000004 	udf	#4
     79c:	00000000 	udf	#0
     7a0:	00000024 	udf	#36
     7a4:	00000778 	udf	#1912
     7a8:	61002370 	.inst	0x61002370 ; undefined
     7ac:	00000000 	udf	#0
     7b0:	00000020 	udf	#32
     7b4:	00000000 	udf	#0
     7b8:	9d200e41 	.inst	0x9d200e41 ; undefined
     7bc:	46039e04 	.inst	0x46039e04 ; undefined
     7c0:	000eddde 	.inst	0x000eddde ; undefined
     7c4:	00000000 	udf	#0
     7c8:	00000024 	udf	#36
     7cc:	00000778 	udf	#1912
     7d0:	61002390 	.inst	0x61002390 ; undefined
     7d4:	00000000 	udf	#0
     7d8:	00000020 	udf	#32
     7dc:	00000000 	udf	#0
     7e0:	9d200e41 	.inst	0x9d200e41 ; undefined
     7e4:	46039e04 	.inst	0x46039e04 ; undefined
     7e8:	000eddde 	.inst	0x000eddde ; undefined
     7ec:	00000000 	udf	#0
     7f0:	00000024 	udf	#36
     7f4:	00000778 	udf	#1912
     7f8:	610023b0 	.inst	0x610023b0 ; undefined
     7fc:	00000000 	udf	#0
     800:	00000020 	udf	#32
     804:	00000000 	udf	#0
     808:	9d200e41 	.inst	0x9d200e41 ; undefined
     80c:	46039e04 	.inst	0x46039e04 ; undefined
     810:	000eddde 	.inst	0x000eddde ; undefined
     814:	00000000 	udf	#0
     818:	00000024 	udf	#36
     81c:	00000778 	udf	#1912
     820:	610023d0 	.inst	0x610023d0 ; undefined
     824:	00000000 	udf	#0
     828:	00000020 	udf	#32
     82c:	00000000 	udf	#0
     830:	9d200e41 	.inst	0x9d200e41 ; undefined
     834:	46039e04 	.inst	0x46039e04 ; undefined
     838:	000eddde 	.inst	0x000eddde ; undefined
     83c:	00000000 	udf	#0
     840:	00000024 	udf	#36
     844:	00000778 	udf	#1912
     848:	610023f0 	.inst	0x610023f0 ; undefined
     84c:	00000000 	udf	#0
     850:	00000020 	udf	#32
     854:	00000000 	udf	#0
     858:	9d200e41 	.inst	0x9d200e41 ; undefined
     85c:	46039e04 	.inst	0x46039e04 ; undefined
     860:	000eddde 	.inst	0x000eddde ; undefined
     864:	00000000 	udf	#0
     868:	00000024 	udf	#36
     86c:	00000778 	udf	#1912
	...
     878:	00000018 	udf	#24
     87c:	00000000 	udf	#0
     880:	9d100e41 	.inst	0x9d100e41 ; undefined
     884:	44019e02 	.inst	0x44019e02 ; undefined
     888:	000eddde 	.inst	0x000eddde ; undefined
     88c:	00000000 	udf	#0
     890:	00000024 	udf	#36
     894:	00000778 	udf	#1912
     898:	61002410 	.inst	0x61002410 ; undefined
     89c:	00000000 	udf	#0
     8a0:	00000020 	udf	#32
     8a4:	00000000 	udf	#0
     8a8:	9d200e41 	.inst	0x9d200e41 ; undefined
     8ac:	46039e04 	.inst	0x46039e04 ; undefined
     8b0:	000eddde 	.inst	0x000eddde ; undefined
     8b4:	00000000 	udf	#0
     8b8:	00000024 	udf	#36
     8bc:	00000778 	udf	#1912
     8c0:	61002430 	.inst	0x61002430 ; undefined
     8c4:	00000000 	udf	#0
     8c8:	00000020 	udf	#32
     8cc:	00000000 	udf	#0
     8d0:	9d200e41 	.inst	0x9d200e41 ; undefined
     8d4:	46039e04 	.inst	0x46039e04 ; undefined
     8d8:	000eddde 	.inst	0x000eddde ; undefined
     8dc:	00000000 	udf	#0
     8e0:	0000000c 	udf	#12
     8e4:	ffffffff 	.inst	0xffffffff ; undefined
     8e8:	78040001 	sturh	w1, [x0, #64]
     8ec:	001f0c1e 	.inst	0x001f0c1e ; undefined
     8f0:	00000014 	udf	#20
     8f4:	000008e0 	udf	#2272
	...
     900:	0000001c 	udf	#28
     904:	00000000 	udf	#0
     908:	00000014 	udf	#20
     90c:	000008e0 	udf	#2272
	...
     918:	0000001c 	udf	#28
     91c:	00000000 	udf	#0
     920:	00000024 	udf	#36
     924:	000008e0 	udf	#2272
     928:	61002450 	.inst	0x61002450 ; undefined
     92c:	00000000 	udf	#0
     930:	00000090 	udf	#144
     934:	00000000 	udf	#0
     938:	9d300e41 	.inst	0x9d300e41 ; undefined
     93c:	62059e06 	.inst	0x62059e06 ; undefined
     940:	000eddde 	.inst	0x000eddde ; undefined
     944:	00000000 	udf	#0
     948:	00000024 	udf	#36
     94c:	000008e0 	udf	#2272
	...
     958:	0000003c 	udf	#60
     95c:	00000000 	udf	#0
     960:	9d300e41 	.inst	0x9d300e41 ; undefined
     964:	4d059e06 	.inst	0x4d059e06 ; undefined
     968:	000eddde 	.inst	0x000eddde ; undefined
     96c:	00000000 	udf	#0
     970:	00000024 	udf	#36
     974:	000008e0 	udf	#2272
     978:	610024e0 	.inst	0x610024e0 ; undefined
     97c:	00000000 	udf	#0
     980:	0000003c 	udf	#60
     984:	00000000 	udf	#0
     988:	9d100e41 	.inst	0x9d100e41 ; undefined
     98c:	4d019e02 	.inst	0x4d019e02 ; undefined
     990:	000eddde 	.inst	0x000eddde ; undefined
     994:	00000000 	udf	#0
     998:	0000000c 	udf	#12
     99c:	ffffffff 	.inst	0xffffffff ; undefined
     9a0:	78040001 	sturh	w1, [x0, #64]
     9a4:	001f0c1e 	.inst	0x001f0c1e ; undefined
     9a8:	0000001c 	udf	#28
     9ac:	00000998 	udf	#2456
     9b0:	6100251c 	.inst	0x6100251c ; undefined
     9b4:	00000000 	udf	#0
     9b8:	00000024 	udf	#36
     9bc:	00000000 	udf	#0
     9c0:	47100e41 	.inst	0x47100e41 ; undefined
     9c4:	0000000e 	udf	#14
     9c8:	0000001c 	udf	#28
     9cc:	00000998 	udf	#2456
     9d0:	61002540 	.inst	0x61002540 ; undefined
     9d4:	00000000 	udf	#0
     9d8:	00000024 	udf	#36
     9dc:	00000000 	udf	#0
     9e0:	47100e41 	.inst	0x47100e41 ; undefined
     9e4:	0000000e 	udf	#14
     9e8:	0000001c 	udf	#28
     9ec:	00000998 	udf	#2456
     9f0:	61002564 	.inst	0x61002564 ; undefined
     9f4:	00000000 	udf	#0
     9f8:	000000c4 	udf	#196
     9fc:	00000000 	udf	#0
     a00:	6f200e41 	.inst	0x6f200e41 ; undefined
     a04:	0000000e 	udf	#14
     a08:	0000001c 	udf	#28
     a0c:	00000998 	udf	#2456
     a10:	61002628 	.inst	0x61002628 ; undefined
     a14:	00000000 	udf	#0
     a18:	00000034 	udf	#52
     a1c:	00000000 	udf	#0
     a20:	4b100e41 	sub	w1, w18, w16, lsl #3
     a24:	0000000e 	udf	#14
     a28:	0000001c 	udf	#28
     a2c:	00000998 	udf	#2456
     a30:	6100265c 	.inst	0x6100265c ; undefined
     a34:	00000000 	udf	#0
     a38:	00000034 	udf	#52
     a3c:	00000000 	udf	#0
     a40:	4b100e41 	sub	w1, w18, w16, lsl #3
     a44:	0000000e 	udf	#14
     a48:	0000001c 	udf	#28
     a4c:	00000998 	udf	#2456
	...
     a58:	00000034 	udf	#52
     a5c:	00000000 	udf	#0
     a60:	4b100e41 	sub	w1, w18, w16, lsl #3
     a64:	0000000e 	udf	#14
     a68:	0000001c 	udf	#28
     a6c:	00000998 	udf	#2456
     a70:	61002690 	.inst	0x61002690 ; undefined
     a74:	00000000 	udf	#0
     a78:	00000024 	udf	#36
     a7c:	00000000 	udf	#0
     a80:	47100e41 	.inst	0x47100e41 ; undefined
     a84:	0000000e 	udf	#14
     a88:	0000001c 	udf	#28
     a8c:	00000998 	udf	#2456
	...
     a98:	00000024 	udf	#36
     a9c:	00000000 	udf	#0
     aa0:	47100e41 	.inst	0x47100e41 ; undefined
     aa4:	0000000e 	udf	#14
     aa8:	0000001c 	udf	#28
     aac:	00000998 	udf	#2456
     ab0:	610026b4 	.inst	0x610026b4 ; undefined
     ab4:	00000000 	udf	#0
     ab8:	00000034 	udf	#52
     abc:	00000000 	udf	#0
     ac0:	4b100e41 	sub	w1, w18, w16, lsl #3
     ac4:	0000000e 	udf	#14
     ac8:	0000001c 	udf	#28
     acc:	00000998 	udf	#2456
	...
     ad8:	00000034 	udf	#52
     adc:	00000000 	udf	#0
     ae0:	4b100e41 	sub	w1, w18, w16, lsl #3
     ae4:	0000000e 	udf	#14
     ae8:	0000001c 	udf	#28
     aec:	00000998 	udf	#2456
     af0:	610026e8 	.inst	0x610026e8 ; undefined
     af4:	00000000 	udf	#0
     af8:	000000a0 	udf	#160
     afc:	00000000 	udf	#0
     b00:	66100e41 	.inst	0x66100e41 ; undefined
     b04:	0000000e 	udf	#14
     b08:	0000001c 	udf	#28
     b0c:	00000998 	udf	#2456
	...
     b18:	0000003c 	udf	#60
     b1c:	00000000 	udf	#0
     b20:	4d200e41 	st2	{v1.b, v2.b}[11], [x18]
     b24:	0000000e 	udf	#14
     b28:	0000001c 	udf	#28
     b2c:	00000998 	udf	#2456
     b30:	61002788 	.inst	0x61002788 ; undefined
     b34:	00000000 	udf	#0
     b38:	0000001c 	udf	#28
     b3c:	00000000 	udf	#0
     b40:	45100e41 	.inst	0x45100e41 ; undefined
     b44:	0000000e 	udf	#14
     b48:	0000001c 	udf	#28
     b4c:	00000998 	udf	#2456
     b50:	610027a4 	.inst	0x610027a4 ; undefined
     b54:	00000000 	udf	#0
     b58:	00000084 	udf	#132
     b5c:	00000000 	udf	#0
     b60:	5f100e41 	.inst	0x5f100e41 ; undefined
     b64:	0000000e 	udf	#14
     b68:	0000001c 	udf	#28
     b6c:	00000998 	udf	#2456
     b70:	61002828 	.inst	0x61002828 ; undefined
     b74:	00000000 	udf	#0
     b78:	00000024 	udf	#36
     b7c:	00000000 	udf	#0
     b80:	47100e41 	.inst	0x47100e41 ; undefined
     b84:	0000000e 	udf	#14
     b88:	0000001c 	udf	#28
     b8c:	00000998 	udf	#2456
     b90:	6100284c 	.inst	0x6100284c ; undefined
     b94:	00000000 	udf	#0
     b98:	00000024 	udf	#36
     b9c:	00000000 	udf	#0
     ba0:	47100e41 	.inst	0x47100e41 ; undefined
     ba4:	0000000e 	udf	#14
     ba8:	0000001c 	udf	#28
     bac:	00000998 	udf	#2456
     bb0:	61002870 	.inst	0x61002870 ; undefined
     bb4:	00000000 	udf	#0
     bb8:	00000024 	udf	#36
     bbc:	00000000 	udf	#0
     bc0:	47100e41 	.inst	0x47100e41 ; undefined
     bc4:	0000000e 	udf	#14
     bc8:	0000001c 	udf	#28
     bcc:	00000998 	udf	#2456
	...
     bd8:	0000002c 	udf	#44
     bdc:	00000000 	udf	#0
     be0:	49100e41 	.inst	0x49100e41 ; undefined
     be4:	0000000e 	udf	#14
     be8:	0000001c 	udf	#28
     bec:	00000998 	udf	#2456
     bf0:	61002894 	.inst	0x61002894 ; undefined
     bf4:	00000000 	udf	#0
     bf8:	0000002c 	udf	#44
     bfc:	00000000 	udf	#0
     c00:	49100e41 	.inst	0x49100e41 ; undefined
     c04:	0000000e 	udf	#14
     c08:	0000001c 	udf	#28
     c0c:	00000998 	udf	#2456
	...
     c18:	00000024 	udf	#36
     c1c:	00000000 	udf	#0
     c20:	47100e41 	.inst	0x47100e41 ; undefined
     c24:	0000000e 	udf	#14
     c28:	0000001c 	udf	#28
     c2c:	00000998 	udf	#2456
     c30:	610028c0 	.inst	0x610028c0 ; undefined
     c34:	00000000 	udf	#0
     c38:	00000024 	udf	#36
     c3c:	00000000 	udf	#0
     c40:	47100e41 	.inst	0x47100e41 ; undefined
     c44:	0000000e 	udf	#14
     c48:	0000001c 	udf	#28
     c4c:	00000998 	udf	#2456
     c50:	610028e4 	.inst	0x610028e4 ; undefined
     c54:	00000000 	udf	#0
     c58:	00000028 	udf	#40
     c5c:	00000000 	udf	#0
     c60:	48200e41 	.inst	0x48200e41 ; undefined
     c64:	0000000e 	udf	#14
     c68:	0000001c 	udf	#28
     c6c:	00000998 	udf	#2456
     c70:	6100290c 	.inst	0x6100290c ; undefined
     c74:	00000000 	udf	#0
     c78:	00000018 	udf	#24
     c7c:	00000000 	udf	#0
     c80:	44100e41 	.inst	0x44100e41 ; undefined
     c84:	0000000e 	udf	#14
     c88:	0000001c 	udf	#28
     c8c:	00000998 	udf	#2456
     c90:	61002924 	.inst	0x61002924 ; undefined
     c94:	00000000 	udf	#0
     c98:	00000018 	udf	#24
     c9c:	00000000 	udf	#0
     ca0:	44100e41 	.inst	0x44100e41 ; undefined
     ca4:	0000000e 	udf	#14
     ca8:	00000024 	udf	#36
     cac:	00000998 	udf	#2456
     cb0:	6100293c 	.inst	0x6100293c ; undefined
     cb4:	00000000 	udf	#0
     cb8:	0000019c 	udf	#412
     cbc:	00000000 	udf	#0
     cc0:	9d300e41 	.inst	0x9d300e41 ; undefined
     cc4:	02059e06 	.inst	0x02059e06 ; undefined
     cc8:	0eddde65 	.inst	0x0eddde65 ; undefined
     ccc:	00000000 	udf	#0
     cd0:	0000001c 	udf	#28
     cd4:	00000998 	udf	#2456
	...
     ce0:	00000034 	udf	#52
     ce4:	00000000 	udf	#0
     ce8:	4b100e41 	sub	w1, w18, w16, lsl #3
     cec:	0000000e 	udf	#14
     cf0:	0000001c 	udf	#28
     cf4:	00000998 	udf	#2456
	...
     d00:	00000034 	udf	#52
     d04:	00000000 	udf	#0
     d08:	4b100e41 	sub	w1, w18, w16, lsl #3
     d0c:	0000000e 	udf	#14
     d10:	0000001c 	udf	#28
     d14:	00000998 	udf	#2456
	...
     d20:	00000024 	udf	#36
     d24:	00000000 	udf	#0
     d28:	47100e41 	.inst	0x47100e41 ; undefined
     d2c:	0000000e 	udf	#14
     d30:	0000001c 	udf	#28
     d34:	00000998 	udf	#2456
	...
     d40:	00000024 	udf	#36
     d44:	00000000 	udf	#0
     d48:	47100e41 	.inst	0x47100e41 ; undefined
     d4c:	0000000e 	udf	#14
     d50:	0000001c 	udf	#28
     d54:	00000998 	udf	#2456
	...
     d60:	00000034 	udf	#52
     d64:	00000000 	udf	#0
     d68:	4b100e41 	sub	w1, w18, w16, lsl #3
     d6c:	0000000e 	udf	#14
     d70:	0000000c 	udf	#12
     d74:	ffffffff 	.inst	0xffffffff ; undefined
     d78:	78040001 	sturh	w1, [x0, #64]
     d7c:	001f0c1e 	.inst	0x001f0c1e ; undefined
     d80:	00000014 	udf	#20
     d84:	00000d70 	udf	#3440
     d88:	61002ad8 	.inst	0x61002ad8 ; undefined
     d8c:	00000000 	udf	#0
     d90:	000003d8 	udf	#984
     d94:	00000000 	udf	#0
     d98:	0000000c 	udf	#12
     d9c:	ffffffff 	.inst	0xffffffff ; undefined
     da0:	78040001 	sturh	w1, [x0, #64]
     da4:	001f0c1e 	.inst	0x001f0c1e ; undefined
     da8:	0000001c 	udf	#28
     dac:	00000d98 	udf	#3480
     db0:	61002eb0 	.inst	0x61002eb0 ; undefined
     db4:	00000000 	udf	#0
     db8:	00000020 	udf	#32
     dbc:	00000000 	udf	#0
     dc0:	46200e41 	.inst	0x46200e41 ; undefined
     dc4:	0000000e 	udf	#14
     dc8:	00000024 	udf	#36
     dcc:	00000d98 	udf	#3480
     dd0:	61002ed0 	.inst	0x61002ed0 ; undefined
     dd4:	00000000 	udf	#0
     dd8:	000000b8 	udf	#184
     ddc:	00000000 	udf	#0
     de0:	9d300e41 	.inst	0x9d300e41 ; undefined
     de4:	6c059e06 	stnp	d6, d7, [x16, #88]
     de8:	000eddde 	.inst	0x000eddde ; undefined
     dec:	00000000 	udf	#0
     df0:	0000001c 	udf	#28
     df4:	00000d98 	udf	#3480
     df8:	61002f88 	.inst	0x61002f88 ; undefined
     dfc:	00000000 	udf	#0
     e00:	000000b8 	udf	#184
     e04:	00000000 	udf	#0
     e08:	6c100e41 	stnp	d1, d3, [x18, #256]
     e0c:	0000000e 	udf	#14
     e10:	0000001c 	udf	#28
     e14:	00000d98 	udf	#3480
     e18:	61003040 	.inst	0x61003040 ; undefined
     e1c:	00000000 	udf	#0
     e20:	000000a8 	udf	#168
     e24:	00000000 	udf	#0
     e28:	68100e41 	.inst	0x68100e41 ; undefined
     e2c:	0000000e 	udf	#14
     e30:	0000001c 	udf	#28
     e34:	00000d98 	udf	#3480
     e38:	610030e8 	.inst	0x610030e8 ; undefined
     e3c:	00000000 	udf	#0
     e40:	000000ac 	udf	#172
     e44:	00000000 	udf	#0
     e48:	69100e41 	stgp	x1, x3, [x18, #512]
     e4c:	0000000e 	udf	#14
     e50:	0000001c 	udf	#28
     e54:	00000d98 	udf	#3480
     e58:	61003194 	.inst	0x61003194 ; undefined
     e5c:	00000000 	udf	#0
     e60:	00000044 	udf	#68
     e64:	00000000 	udf	#0
     e68:	4f100e41 	.inst	0x4f100e41 ; undefined
     e6c:	0000000e 	udf	#14
     e70:	0000001c 	udf	#28
     e74:	00000d98 	udf	#3480
     e78:	610031d8 	.inst	0x610031d8 ; undefined
     e7c:	00000000 	udf	#0
     e80:	00000068 	udf	#104
     e84:	00000000 	udf	#0
     e88:	58100e41 	ldr	x1, 21050 <__stack_size+0x1d050>
     e8c:	0000000e 	udf	#14
     e90:	0000001c 	udf	#28
     e94:	00000d98 	udf	#3480
	...
     ea0:	00000068 	udf	#104
     ea4:	00000000 	udf	#0
     ea8:	58100e41 	ldr	x1, 21070 <__stack_size+0x1d070>
     eac:	0000000e 	udf	#14
     eb0:	0000001c 	udf	#28
     eb4:	00000d98 	udf	#3480
	...
     ec0:	00000060 	udf	#96
     ec4:	00000000 	udf	#0
     ec8:	56200e41 	.inst	0x56200e41 ; undefined
     ecc:	0000000e 	udf	#14
     ed0:	0000001c 	udf	#28
     ed4:	00000d98 	udf	#3480
	...
     ee0:	0000004c 	udf	#76
     ee4:	00000000 	udf	#0
     ee8:	51100e41 	sub	w1, w18, #0x403
     eec:	0000000e 	udf	#14
     ef0:	0000001c 	udf	#28
     ef4:	00000d98 	udf	#3480
	...
     f00:	0000003c 	udf	#60
     f04:	00000000 	udf	#0
     f08:	4d100e41 	.inst	0x4d100e41 ; undefined
     f0c:	0000000e 	udf	#14
     f10:	0000001c 	udf	#28
     f14:	00000d98 	udf	#3480
	...
     f20:	0000003c 	udf	#60
     f24:	00000000 	udf	#0
     f28:	4d100e41 	.inst	0x4d100e41 ; undefined
     f2c:	0000000e 	udf	#14
     f30:	0000001c 	udf	#28
     f34:	00000d98 	udf	#3480
	...
     f40:	0000004c 	udf	#76
     f44:	00000000 	udf	#0
     f48:	51100e41 	sub	w1, w18, #0x403
     f4c:	0000000e 	udf	#14
     f50:	00000024 	udf	#36
     f54:	00000d98 	udf	#3480
	...
     f60:	00000054 	udf	#84
     f64:	00000000 	udf	#0
     f68:	9d200e41 	.inst	0x9d200e41 ; undefined
     f6c:	53039e04 	.inst	0x53039e04 ; undefined
     f70:	000eddde 	.inst	0x000eddde ; undefined
     f74:	00000000 	udf	#0
     f78:	0000001c 	udf	#28
     f7c:	00000d98 	udf	#3480
	...
     f88:	0000003c 	udf	#60
     f8c:	00000000 	udf	#0
     f90:	4d100e41 	.inst	0x4d100e41 ; undefined
     f94:	0000000e 	udf	#14
     f98:	0000001c 	udf	#28
     f9c:	00000d98 	udf	#3480
	...
     fa8:	00000040 	udf	#64
     fac:	00000000 	udf	#0
     fb0:	4e100e41 	.inst	0x4e100e41 ; undefined
     fb4:	0000000e 	udf	#14
     fb8:	0000001c 	udf	#28
     fbc:	00000d98 	udf	#3480
	...
     fc8:	0000003c 	udf	#60
     fcc:	00000000 	udf	#0
     fd0:	4d100e41 	.inst	0x4d100e41 ; undefined
     fd4:	0000000e 	udf	#14
     fd8:	0000001c 	udf	#28
     fdc:	00000d98 	udf	#3480
	...
     fe8:	00000040 	udf	#64
     fec:	00000000 	udf	#0
     ff0:	4e100e41 	.inst	0x4e100e41 ; undefined
     ff4:	0000000e 	udf	#14
     ff8:	0000001c 	udf	#28
     ffc:	00000d98 	udf	#3480
	...
    1008:	0000003c 	udf	#60
    100c:	00000000 	udf	#0
    1010:	4d100e41 	.inst	0x4d100e41 ; undefined
    1014:	0000000e 	udf	#14
    1018:	0000001c 	udf	#28
    101c:	00000d98 	udf	#3480
	...
    1028:	00000054 	udf	#84
    102c:	00000000 	udf	#0
    1030:	53200e41 	.inst	0x53200e41 ; undefined
    1034:	0000000e 	udf	#14
    1038:	00000024 	udf	#36
    103c:	00000d98 	udf	#3480
	...
    1048:	00000070 	udf	#112
    104c:	00000000 	udf	#0
    1050:	9d300e41 	.inst	0x9d300e41 ; undefined
    1054:	5a059e06 	.inst	0x5a059e06 ; undefined
    1058:	000eddde 	.inst	0x000eddde ; undefined
    105c:	00000000 	udf	#0
    1060:	0000001c 	udf	#28
    1064:	00000d98 	udf	#3480
	...
    1070:	000000d8 	udf	#216
    1074:	00000000 	udf	#0
    1078:	74100e41 	.inst	0x74100e41 ; undefined
    107c:	0000000e 	udf	#14
    1080:	0000001c 	udf	#28
    1084:	00000d98 	udf	#3480
	...
    1090:	000000d8 	udf	#216
    1094:	00000000 	udf	#0
    1098:	74100e41 	.inst	0x74100e41 ; undefined
    109c:	0000000e 	udf	#14
    10a0:	00000024 	udf	#36
    10a4:	00000d98 	udf	#3480
	...
    10b0:	00000174 	udf	#372
    10b4:	00000000 	udf	#0
    10b8:	9d300e41 	.inst	0x9d300e41 ; undefined
    10bc:	02059e06 	.inst	0x02059e06 ; undefined
    10c0:	0eddde5b 	.inst	0x0eddde5b ; undefined
    10c4:	00000000 	udf	#0
    10c8:	0000001c 	udf	#28
    10cc:	00000d98 	udf	#3480
	...
    10d8:	00000058 	udf	#88
    10dc:	00000000 	udf	#0
    10e0:	54200e41 	b.ne	412a8 <__stack_size+0x3d2a8>  // b.any
    10e4:	0000000e 	udf	#14
    10e8:	00000024 	udf	#36
    10ec:	00000d98 	udf	#3480
	...
    10f8:	00000054 	udf	#84
    10fc:	00000000 	udf	#0
    1100:	9d300e41 	.inst	0x9d300e41 ; undefined
    1104:	53059e06 	.inst	0x53059e06 ; undefined
    1108:	000eddde 	.inst	0x000eddde ; undefined
    110c:	00000000 	udf	#0
    1110:	00000024 	udf	#36
    1114:	00000d98 	udf	#3480
	...
    1120:	00000054 	udf	#84
    1124:	00000000 	udf	#0
    1128:	9d300e41 	.inst	0x9d300e41 ; undefined
    112c:	53059e06 	.inst	0x53059e06 ; undefined
    1130:	000eddde 	.inst	0x000eddde ; undefined
    1134:	00000000 	udf	#0
    1138:	0000000c 	udf	#12
    113c:	ffffffff 	.inst	0xffffffff ; undefined
    1140:	78040001 	sturh	w1, [x0, #64]
    1144:	001f0c1e 	.inst	0x001f0c1e ; undefined
    1148:	0000001c 	udf	#28
    114c:	00001138 	udf	#4408
    1150:	61003240 	.inst	0x61003240 ; undefined
    1154:	00000000 	udf	#0
    1158:	00000040 	udf	#64
    115c:	00000000 	udf	#0
    1160:	4e100e41 	.inst	0x4e100e41 ; undefined
    1164:	0000000e 	udf	#14
    1168:	0000001c 	udf	#28
    116c:	00001138 	udf	#4408
    1170:	61003280 	.inst	0x61003280 ; undefined
    1174:	00000000 	udf	#0
    1178:	00000044 	udf	#68
    117c:	00000000 	udf	#0
    1180:	4f100e41 	.inst	0x4f100e41 ; undefined
    1184:	0000000e 	udf	#14
    1188:	0000001c 	udf	#28
    118c:	00001138 	udf	#4408
    1190:	610032c4 	.inst	0x610032c4 ; undefined
    1194:	00000000 	udf	#0
    1198:	0000004c 	udf	#76
    119c:	00000000 	udf	#0
    11a0:	51100e41 	sub	w1, w18, #0x403
    11a4:	0000000e 	udf	#14
    11a8:	0000001c 	udf	#28
    11ac:	00001138 	udf	#4408
	...
    11b8:	00000060 	udf	#96
    11bc:	00000000 	udf	#0
    11c0:	56100e41 	.inst	0x56100e41 ; undefined
    11c4:	0000000e 	udf	#14
    11c8:	0000001c 	udf	#28
    11cc:	00001138 	udf	#4408
	...
    11d8:	00000060 	udf	#96
    11dc:	00000000 	udf	#0
    11e0:	56100e41 	.inst	0x56100e41 ; undefined
    11e4:	0000000e 	udf	#14
    11e8:	0000001c 	udf	#28
    11ec:	00001138 	udf	#4408
	...
    11f8:	0000004c 	udf	#76
    11fc:	00000000 	udf	#0
    1200:	51100e41 	sub	w1, w18, #0x403
    1204:	0000000e 	udf	#14
    1208:	0000001c 	udf	#28
    120c:	00001138 	udf	#4408
    1210:	61003310 	.inst	0x61003310 ; undefined
    1214:	00000000 	udf	#0
    1218:	00000060 	udf	#96
    121c:	00000000 	udf	#0
    1220:	56100e41 	.inst	0x56100e41 ; undefined
    1224:	0000000e 	udf	#14
    1228:	0000001c 	udf	#28
    122c:	00001138 	udf	#4408
	...
    1238:	00000060 	udf	#96
    123c:	00000000 	udf	#0
    1240:	56100e41 	.inst	0x56100e41 ; undefined
    1244:	0000000e 	udf	#14
    1248:	0000001c 	udf	#28
    124c:	00001138 	udf	#4408
    1250:	61003370 	.inst	0x61003370 ; undefined
    1254:	00000000 	udf	#0
    1258:	0000004c 	udf	#76
    125c:	00000000 	udf	#0
    1260:	51100e41 	sub	w1, w18, #0x403
    1264:	0000000e 	udf	#14
    1268:	0000001c 	udf	#28
    126c:	00001138 	udf	#4408
	...
    1278:	0000004c 	udf	#76
    127c:	00000000 	udf	#0
    1280:	51100e41 	sub	w1, w18, #0x403
    1284:	0000000e 	udf	#14
    1288:	0000001c 	udf	#28
    128c:	00001138 	udf	#4408
	...
    1298:	00000088 	udf	#136
    129c:	00000000 	udf	#0
    12a0:	60100e41 	.inst	0x60100e41 ; undefined
    12a4:	0000000e 	udf	#14
    12a8:	0000001c 	udf	#28
    12ac:	00001138 	udf	#4408
	...
    12b8:	00000088 	udf	#136
    12bc:	00000000 	udf	#0
    12c0:	60100e41 	.inst	0x60100e41 ; undefined
    12c4:	0000000e 	udf	#14
    12c8:	0000001c 	udf	#28
    12cc:	00001138 	udf	#4408
    12d0:	610033bc 	.inst	0x610033bc ; undefined
    12d4:	00000000 	udf	#0
    12d8:	0000004c 	udf	#76
    12dc:	00000000 	udf	#0
    12e0:	51100e41 	sub	w1, w18, #0x403
    12e4:	0000000e 	udf	#14
    12e8:	0000001c 	udf	#28
    12ec:	00001138 	udf	#4408
    12f0:	61003408 	.inst	0x61003408 ; undefined
    12f4:	00000000 	udf	#0
    12f8:	00000054 	udf	#84
    12fc:	00000000 	udf	#0
    1300:	53100e41 	ubfiz	w1, w18, #16, #4
    1304:	0000000e 	udf	#14
    1308:	0000001c 	udf	#28
    130c:	00001138 	udf	#4408
    1310:	6100345c 	.inst	0x6100345c ; undefined
    1314:	00000000 	udf	#0
    1318:	00000048 	udf	#72
    131c:	00000000 	udf	#0
    1320:	50100e41 	adr	x1, 214ea <__stack_size+0x1d4ea>
    1324:	0000000e 	udf	#14
    1328:	0000001c 	udf	#28
    132c:	00001138 	udf	#4408
    1330:	610034a4 	.inst	0x610034a4 ; undefined
    1334:	00000000 	udf	#0
    1338:	00000048 	udf	#72
    133c:	00000000 	udf	#0
    1340:	50100e41 	adr	x1, 2150a <__stack_size+0x1d50a>
    1344:	0000000e 	udf	#14
    1348:	0000001c 	udf	#28
    134c:	00001138 	udf	#4408
    1350:	610034ec 	.inst	0x610034ec ; undefined
    1354:	00000000 	udf	#0
    1358:	00000054 	udf	#84
    135c:	00000000 	udf	#0
    1360:	53100e41 	ubfiz	w1, w18, #16, #4
    1364:	0000000e 	udf	#14
    1368:	0000001c 	udf	#28
    136c:	00001138 	udf	#4408
	...
    1378:	00000054 	udf	#84
    137c:	00000000 	udf	#0
    1380:	53100e41 	ubfiz	w1, w18, #16, #4
    1384:	0000000e 	udf	#14
    1388:	0000001c 	udf	#28
    138c:	00001138 	udf	#4408
    1390:	61003540 	.inst	0x61003540 ; undefined
    1394:	00000000 	udf	#0
    1398:	00000048 	udf	#72
    139c:	00000000 	udf	#0
    13a0:	50100e41 	adr	x1, 2156a <__stack_size+0x1d56a>
    13a4:	0000000e 	udf	#14
    13a8:	0000001c 	udf	#28
    13ac:	00001138 	udf	#4408
    13b0:	61003588 	.inst	0x61003588 ; undefined
    13b4:	00000000 	udf	#0
    13b8:	00000018 	udf	#24
    13bc:	00000000 	udf	#0
    13c0:	44100e41 	.inst	0x44100e41 ; undefined
    13c4:	0000000e 	udf	#14
    13c8:	0000001c 	udf	#28
    13cc:	00001138 	udf	#4408
    13d0:	610035a0 	.inst	0x610035a0 ; undefined
    13d4:	00000000 	udf	#0
    13d8:	00000030 	udf	#48
    13dc:	00000000 	udf	#0
    13e0:	4a100e41 	eor	w1, w18, w16, lsl #3
    13e4:	0000000e 	udf	#14
    13e8:	0000001c 	udf	#28
    13ec:	00001138 	udf	#4408
    13f0:	610035d0 	.inst	0x610035d0 ; undefined
    13f4:	00000000 	udf	#0
    13f8:	00000030 	udf	#48
    13fc:	00000000 	udf	#0
    1400:	4a100e41 	eor	w1, w18, w16, lsl #3
    1404:	0000000e 	udf	#14
    1408:	0000001c 	udf	#28
    140c:	00001138 	udf	#4408
    1410:	61003600 	.inst	0x61003600 ; undefined
    1414:	00000000 	udf	#0
    1418:	00000030 	udf	#48
    141c:	00000000 	udf	#0
    1420:	4a100e41 	eor	w1, w18, w16, lsl #3
    1424:	0000000e 	udf	#14
    1428:	0000001c 	udf	#28
    142c:	00001138 	udf	#4408
    1430:	61003630 	.inst	0x61003630 ; undefined
    1434:	00000000 	udf	#0
    1438:	00000024 	udf	#36
    143c:	00000000 	udf	#0
    1440:	47100e41 	.inst	0x47100e41 ; undefined
    1444:	0000000e 	udf	#14
    1448:	0000000c 	udf	#12
    144c:	ffffffff 	.inst	0xffffffff ; undefined
    1450:	78040001 	sturh	w1, [x0, #64]
    1454:	001f0c1e 	.inst	0x001f0c1e ; undefined
    1458:	0000002c 	udf	#44
    145c:	00001448 	udf	#5192
    1460:	61003654 	.inst	0x61003654 ; undefined
    1464:	00000000 	udf	#0
    1468:	00000554 	udf	#1364
    146c:	00000000 	udf	#0
    1470:	9d500e41 	.inst	0x9d500e41 ; undefined
    1474:	42099e0a 	.inst	0x42099e0a ; undefined
    1478:	51030893 	sub	w19, w4, #0xc2
    147c:	d3ddde01 	.inst	0xd3ddde01 ; undefined
    1480:	0000000e 	udf	#14
    1484:	00000000 	udf	#0
    1488:	00000024 	udf	#36
    148c:	00001448 	udf	#5192
    1490:	61003ba8 	.inst	0x61003ba8 ; undefined
    1494:	00000000 	udf	#0
    1498:	00000068 	udf	#104
    149c:	00000000 	udf	#0
    14a0:	9d200e41 	.inst	0x9d200e41 ; undefined
    14a4:	58039e04 	ldr	x4, 8864 <__stack_size+0x4864>
    14a8:	000eddde 	.inst	0x000eddde ; undefined
    14ac:	00000000 	udf	#0
    14b0:	0000000c 	udf	#12
    14b4:	ffffffff 	.inst	0xffffffff ; undefined
    14b8:	78040001 	sturh	w1, [x0, #64]
    14bc:	001f0c1e 	.inst	0x001f0c1e ; undefined
    14c0:	00000024 	udf	#36
    14c4:	000014b0 	udf	#5296
    14c8:	61003c10 	.inst	0x61003c10 ; undefined
    14cc:	00000000 	udf	#0
    14d0:	0000001c 	udf	#28
    14d4:	00000000 	udf	#0
    14d8:	9d100e41 	.inst	0x9d100e41 ; undefined
    14dc:	45019e02 	.inst	0x45019e02 ; undefined
    14e0:	000eddde 	.inst	0x000eddde ; undefined
    14e4:	00000000 	udf	#0
    14e8:	0000000c 	udf	#12
    14ec:	ffffffff 	.inst	0xffffffff ; undefined
    14f0:	78040001 	sturh	w1, [x0, #64]
    14f4:	001f0c1e 	.inst	0x001f0c1e ; undefined
    14f8:	00000024 	udf	#36
    14fc:	000014e8 	udf	#5352
    1500:	61003c2c 	.inst	0x61003c2c ; undefined
    1504:	00000000 	udf	#0
    1508:	000000ac 	udf	#172
    150c:	00000000 	udf	#0
    1510:	9d200e41 	.inst	0x9d200e41 ; undefined
    1514:	69039e04 	stgp	x4, x7, [x16, #112]
    1518:	000eddde 	.inst	0x000eddde ; undefined
    151c:	00000000 	udf	#0
    1520:	00000024 	udf	#36
    1524:	000014e8 	udf	#5352
    1528:	61003cd8 	.inst	0x61003cd8 ; undefined
    152c:	00000000 	udf	#0
    1530:	000000e4 	udf	#228
    1534:	00000000 	udf	#0
    1538:	9d200e41 	.inst	0x9d200e41 ; undefined
    153c:	77039e04 	.inst	0x77039e04 ; undefined
    1540:	000eddde 	.inst	0x000eddde ; undefined
    1544:	00000000 	udf	#0
    1548:	0000002c 	udf	#44
    154c:	000014e8 	udf	#5352
    1550:	61003dbc 	.inst	0x61003dbc ; undefined
    1554:	00000000 	udf	#0
    1558:	0000064c 	udf	#1612
    155c:	00000000 	udf	#0
    1560:	10b00e41 	adr	x1, fffffffffff61728 <_sp+0xffffffff9ef21728>
    1564:	02869d41 	.inst	0x02869d41 ; undefined
    1568:	4202859e 	.inst	0x4202859e ; undefined
    156c:	03028493 	.inst	0x03028493 ; undefined
    1570:	dedd018e 	.inst	0xdedd018e ; undefined
    1574:	00000ed3 	udf	#3795
