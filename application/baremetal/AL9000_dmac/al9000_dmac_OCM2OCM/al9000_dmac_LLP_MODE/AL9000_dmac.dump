
AL9000_dmac.elf:     file format elf64-littleriscv


Disassembly of section .init:

0000000061000000 <vector_base>:

    .globl vector_base
    .type vector_base, @object
vector_base:
#if defined(DOWNLOAD_MODE) && (DOWNLOAD_MODE != DOWNLOAD_MODE_FLASH)
    j _start                                                /* 0: Reserved, Jump to _start when reset for ILM/FlashXIP mode.*/
    61000000:	6f 00 00 1b 00 00 00 00 b2 03 00 61 00 00 00 00     o..........a....
    61000010:	b2 03 00 61 00 00 00 00 00 00 00 00 00 00 00 00     ...a............
    61000020:	b2 03 00 61 00 00 00 00 b2 03 00 61 00 00 00 00     ...a.......a....
    61000030:	b2 03 00 61 00 00 00 00 00 00 00 00 00 00 00 00     ...a............
    61000040:	b2 03 00 61 00 00 00 00 b2 03 00 61 00 00 00 00     ...a.......a....
    61000050:	b2 03 00 61 00 00 00 00 b2 03 00 61 00 00 00 00     ...a.......a....
    61000060:	b2 03 00 61 00 00 00 00 b2 03 00 61 00 00 00 00     ...a.......a....
    61000070:	b2 03 00 61 00 00 00 00 b2 03 00 61 00 00 00 00     ...a.......a....
    61000080:	b2 03 00 61 00 00 00 00 b2 03 00 61 00 00 00 00     ...a.......a....
    61000090:	b2 03 00 61 00 00 00 00 00 00 00 00 00 00 00 00     ...a............
	...

00000000610001b0 <_start>:
 * Reset Handler called on controller reset
 */
_start:
    /* ===== Startup Stage 1 ===== */
    /* Disable Global Interrupt */
    csrc CSR_MSTATUS, MSTATUS_MIE
    610001b0:	30047073          	csrci	mstatus,8

    /* Initialize GP and Stack Pointer SP */
    .option push
    .option norelax
    la gp, __global_pointer$
    610001b4:	00010197          	auipc	gp,0x10
    610001b8:	6fc18193          	addi	gp,gp,1788 # 610108b0 <__global_pointer$>
    .option pop
    la sp, _sp
    610001bc:	00020117          	auipc	sp,0x20
    610001c0:	e4410113          	addi	sp,sp,-444 # 61020000 <_sp>
    /*
     * Set the the NMI base mnvec to share
     * with mtvec by setting CSR_MMISC_CTL
     * bit 9 NMI_CAUSE_FFF to 1
     */
    li t0, MMISC_CTL_NMI_CAUSE_FFF
    610001c4:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
    610001c8:	7d02a073          	csrs	0x7d0,t0

    /*
     * Intialize ECLIC vector interrupt
     * base address mtvt to vector_base
     */
    la t0, vector_base
    610001cc:	00000297          	auipc	t0,0x0
    610001d0:	e3428293          	addi	t0,t0,-460 # 61000000 <vector_base>
    csrw CSR_MTVT, t0
    610001d4:	30729073          	csrw	0x307,t0
     * Set ECLIC non-vector entry to be controlled
     * by mtvt2 CSR register.
     * Intialize ECLIC non-vector interrupt
     * base address mtvt2 to irq_entry.
     */
    la t0, irq_entry
    610001d8:	00000297          	auipc	t0,0x0
    610001dc:	16828293          	addi	t0,t0,360 # 61000340 <irq_entry>
    csrw CSR_MTVT2, t0
    610001e0:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
    610001e4:	7ec0e073          	csrsi	0x7ec,1
    /*
     * Set Exception Entry MTVEC to exc_entry
     * Due to settings above, Exception and NMI
     * will share common entry.
     */
    la t0, exc_entry
    610001e8:	00000297          	auipc	t0,0x0
    610001ec:	0d828293          	addi	t0,t0,216 # 610002c0 <exc_entry>
    csrw CSR_MTVEC, t0
    610001f0:	30529073          	csrw	mtvec,t0

    /* Set the interrupt processing mode to ECLIC mode */
    li t0, 0x3f
    610001f4:	03f00293          	li	t0,63
    csrc CSR_MTVEC, t0
    610001f8:	3052b073          	csrc	mtvec,t0
    csrs CSR_MTVEC, 0x3
    610001fc:	3051e073          	csrsi	mtvec,3

    /* ===== Startup Stage 2 ===== */

#ifdef __riscv_flen
    /* Enable FPU */
    li t0, MSTATUS_FS
    61000200:	6299                	lui	t0,0x6
    csrs mstatus, t0
    61000202:	3002a073          	csrs	mstatus,t0
    csrw fcsr, x0
    61000206:	00301073          	fssr	zero
#endif

    /* Enable mcycle and minstret counter */
    csrci CSR_MCOUNTINHIBIT, 0x5
    6100020a:	3202f073          	csrci	mucounteren,5
    /* ===== Startup Stage 3 ===== */
    /*
     * Load code section from FLASH to ILM
     * when code LMA is different with VMA
     */
    la a0, _ilm_lma
    6100020e:	00000517          	auipc	a0,0x0
    61000212:	09e50513          	addi	a0,a0,158 # 610002ac <_ilm>
    la a1, _ilm
    61000216:	00000597          	auipc	a1,0x0
    6100021a:	09658593          	addi	a1,a1,150 # 610002ac <_ilm>
    /* If the ILM phy-address same as the logic-address, then quit */
    beq a0, a1, 2f
    6100021e:	02b50063          	beq	a0,a1,6100023e <_start+0x8e>
    la a2, _eilm
    61000222:	00004617          	auipc	a2,0x4
    61000226:	7ee60613          	addi	a2,a2,2030 # 61004a10 <__fsymtab_end>
    bgeu a1, a2, 2f
    6100022a:	00c5fa63          	bgeu	a1,a2,6100023e <_start+0x8e>

1:
    /* Load code section if necessary */
    lw t0, (a0)
    6100022e:	00052283          	lw	t0,0(a0)
    sw t0, (a1)
    61000232:	0055a023          	sw	t0,0(a1)
    addi a0, a0, 4
    61000236:	0511                	addi	a0,a0,4
    addi a1, a1, 4
    61000238:	0591                	addi	a1,a1,4
    bltu a1, a2, 1b
    6100023a:	fec5eae3          	bltu	a1,a2,6100022e <_start+0x7e>
2:
    /* Load data section */
    la a0, _data_lma
    6100023e:	00004517          	auipc	a0,0x4
    61000242:	7d250513          	addi	a0,a0,2002 # 61004a10 <__fsymtab_end>
    la a1, _data
    61000246:	00010597          	auipc	a1,0x10
    6100024a:	dba58593          	addi	a1,a1,-582 # 61010000 <_data>
    la a2, _edata
    6100024e:	00010617          	auipc	a2,0x10
    61000252:	e8260613          	addi	a2,a2,-382 # 610100d0 <_global_atexit>
    bgeu a1, a2, 2f
    61000256:	00c5fa63          	bgeu	a1,a2,6100026a <_start+0xba>
1:
    lw t0, (a0)
    6100025a:	00052283          	lw	t0,0(a0)
    sw t0, (a1)
    6100025e:	0055a023          	sw	t0,0(a1)
    addi a0, a0, 4
    61000262:	0511                	addi	a0,a0,4
    addi a1, a1, 4
    61000264:	0591                	addi	a1,a1,4
    bltu a1, a2, 1b
    61000266:	fec5eae3          	bltu	a1,a2,6100025a <_start+0xaa>
2:
    /* Clear bss section */
    la a0, __bss_start
    6100026a:	00010517          	auipc	a0,0x10
    6100026e:	e6650513          	addi	a0,a0,-410 # 610100d0 <_global_atexit>
    la a1, _end
    61000272:	9c018593          	addi	a1,gp,-1600 # 61010270 <_end>
    bgeu a0, a1, 2f
    61000276:	00b57763          	bgeu	a0,a1,61000284 <_start+0xd4>
1:
    sw zero, (a0)
    6100027a:	00052023          	sw	zero,0(a0)
    addi a0, a0, 4
    6100027e:	0511                	addi	a0,a0,4
    bltu a0, a1, 1b
    61000280:	feb56de3          	bltu	a0,a1,6100027a <_start+0xca>

    /*
     * Call vendor defined SystemInit to
     * initialize the micro-controller system
     */
    call SystemInit
    61000284:	659010ef          	jal	ra,610020dc <SystemInit>

    /* Call global constructors */
    la a0, __libc_fini_array
    61000288:	00003517          	auipc	a0,0x3
    6100028c:	ae850513          	addi	a0,a0,-1304 # 61002d70 <__libc_fini_array>
    call atexit
    61000290:	2d5020ef          	jal	ra,61002d64 <atexit>
    /* Call C/C++ constructor start up code */
    call __libc_init_array
    61000294:	317020ef          	jal	ra,61002daa <__libc_init_array>

    /* do pre-init steps before main */
    call _premain_init
    61000298:	56e020ef          	jal	ra,61002806 <_premain_init>
    /* ===== Call Main Function  ===== */
    /* argc = argv = 0 */
    li a0, 0
    6100029c:	4501                	li	a0,0
    li a1, 0
    6100029e:	4581                	li	a1,0

#ifdef RTOS_RTTHREAD
    // Call entry function when using RT-Thread
    call entry
#else
    call main
    610002a0:	742020ef          	jal	ra,610029e2 <main>
#endif
    /* do post-main steps after main */
    call _postmain_fini
    610002a4:	596020ef          	jal	ra,6100283a <_postmain_fini>

1:
    j 1b
    610002a8:	a001                	j	610002a8 <_start+0xf8>

Disassembly of section .text:

00000000610002c0 <exc_entry>:
.align 6
.global exc_entry
.weak exc_entry
exc_entry:
    /* Save the caller saving registers (context) */
    SAVE_CONTEXT
    610002c0:	7135                	addi	sp,sp,-160
    610002c2:	e006                	sd	ra,0(sp)
    610002c4:	e412                	sd	tp,8(sp)
    610002c6:	e816                	sd	t0,16(sp)
    610002c8:	ec1a                	sd	t1,24(sp)
    610002ca:	f01e                	sd	t2,32(sp)
    610002cc:	f42a                	sd	a0,40(sp)
    610002ce:	f82e                	sd	a1,48(sp)
    610002d0:	fc32                	sd	a2,56(sp)
    610002d2:	e0b6                	sd	a3,64(sp)
    610002d4:	e4ba                	sd	a4,72(sp)
    610002d6:	e8be                	sd	a5,80(sp)
    610002d8:	f8c2                	sd	a6,112(sp)
    610002da:	fcc6                	sd	a7,120(sp)
    610002dc:	e172                	sd	t3,128(sp)
    610002de:	e576                	sd	t4,136(sp)
    610002e0:	e97a                	sd	t5,144(sp)
    610002e2:	ed7e                	sd	t6,152(sp)
    /* Save the necessary CSR registers */
    SAVE_CSR_CONTEXT
    610002e4:	7ee5d073          	csrwi	0x7ee,11
    610002e8:	7ef65073          	csrwi	0x7ef,12
    610002ec:	7eb6d073          	csrwi	0x7eb,13
    /*
     * Set the exception handler function arguments
     * argument 1: mcause value
     * argument 2: current stack point(SP) value
     */
    csrr a0, mcause
    610002f0:	34202573          	csrr	a0,mcause
    mv a1, sp
    610002f4:	858a                	mv	a1,sp
    /*
     * TODO: Call the exception handler function
     * By default, the function template is provided in
     * system_Device.c, you can adjust it as you want
     */
    call core_exception_handler
    610002f6:	6b3010ef          	jal	ra,610021a8 <core_exception_handler>

    /* Restore the necessary CSR registers */
    RESTORE_CSR_CONTEXT
    610002fa:	72a6                	ld	t0,104(sp)
    610002fc:	7c429073          	csrw	0x7c4,t0
    61000300:	7286                	ld	t0,96(sp)
    61000302:	34129073          	csrw	mepc,t0
    61000306:	62e6                	ld	t0,88(sp)
    61000308:	34229073          	csrw	mcause,t0
    /* Restore the caller saving registers (context) */
    RESTORE_CONTEXT
    6100030c:	6082                	ld	ra,0(sp)
    6100030e:	6222                	ld	tp,8(sp)
    61000310:	62c2                	ld	t0,16(sp)
    61000312:	6362                	ld	t1,24(sp)
    61000314:	7382                	ld	t2,32(sp)
    61000316:	7522                	ld	a0,40(sp)
    61000318:	75c2                	ld	a1,48(sp)
    6100031a:	7662                	ld	a2,56(sp)
    6100031c:	6686                	ld	a3,64(sp)
    6100031e:	6726                	ld	a4,72(sp)
    61000320:	67c6                	ld	a5,80(sp)
    61000322:	7846                	ld	a6,112(sp)
    61000324:	78e6                	ld	a7,120(sp)
    61000326:	6e0a                	ld	t3,128(sp)
    61000328:	6eaa                	ld	t4,136(sp)
    6100032a:	6f4a                	ld	t5,144(sp)
    6100032c:	6fea                	ld	t6,152(sp)
    6100032e:	610d                	addi	sp,sp,160

    /* Return to regular code */
    mret
    61000330:	30200073          	mret
	...

0000000061000340 <irq_entry>:
.global irq_entry
.weak irq_entry
/* This label will be set to MTVT2 register */
irq_entry:
    /* Save the caller saving registers (context) */
    SAVE_CONTEXT
    61000340:	7135                	addi	sp,sp,-160
    61000342:	e006                	sd	ra,0(sp)
    61000344:	e412                	sd	tp,8(sp)
    61000346:	e816                	sd	t0,16(sp)
    61000348:	ec1a                	sd	t1,24(sp)
    6100034a:	f01e                	sd	t2,32(sp)
    6100034c:	f42a                	sd	a0,40(sp)
    6100034e:	f82e                	sd	a1,48(sp)
    61000350:	fc32                	sd	a2,56(sp)
    61000352:	e0b6                	sd	a3,64(sp)
    61000354:	e4ba                	sd	a4,72(sp)
    61000356:	e8be                	sd	a5,80(sp)
    61000358:	f8c2                	sd	a6,112(sp)
    6100035a:	fcc6                	sd	a7,120(sp)
    6100035c:	e172                	sd	t3,128(sp)
    6100035e:	e576                	sd	t4,136(sp)
    61000360:	e97a                	sd	t5,144(sp)
    61000362:	ed7e                	sd	t6,152(sp)
    /* Save the necessary CSR registers */
    SAVE_CSR_CONTEXT
    61000364:	7ee5d073          	csrwi	0x7ee,11
    61000368:	7ef65073          	csrwi	0x7ef,12
    6100036c:	7eb6d073          	csrwi	0x7eb,13
    /* This special CSR read/write operation, which is actually
     * claim the CLIC to find its pending highest ID, if the ID
     * is not 0, then automatically enable the mstatus.MIE, and
     * jump to its vector-entry-label, and update the link register
     */
    csrrw ra, CSR_JALMNXTI, ra
    61000370:	7ed090f3          	csrrw	ra,0x7ed,ra

    /* Critical section with interrupts disabled */
    DISABLE_MIE
    61000374:	30047073          	csrci	mstatus,8

    /* Restore the necessary CSR registers */
    RESTORE_CSR_CONTEXT
    61000378:	72a6                	ld	t0,104(sp)
    6100037a:	7c429073          	csrw	0x7c4,t0
    6100037e:	7286                	ld	t0,96(sp)
    61000380:	34129073          	csrw	mepc,t0
    61000384:	62e6                	ld	t0,88(sp)
    61000386:	34229073          	csrw	mcause,t0
    /* Restore the caller saving registers (context) */
    RESTORE_CONTEXT
    6100038a:	6082                	ld	ra,0(sp)
    6100038c:	6222                	ld	tp,8(sp)
    6100038e:	62c2                	ld	t0,16(sp)
    61000390:	6362                	ld	t1,24(sp)
    61000392:	7382                	ld	t2,32(sp)
    61000394:	7522                	ld	a0,40(sp)
    61000396:	75c2                	ld	a1,48(sp)
    61000398:	7662                	ld	a2,56(sp)
    6100039a:	6686                	ld	a3,64(sp)
    6100039c:	6726                	ld	a4,72(sp)
    6100039e:	67c6                	ld	a5,80(sp)
    610003a0:	7846                	ld	a6,112(sp)
    610003a2:	78e6                	ld	a7,120(sp)
    610003a4:	6e0a                	ld	t3,128(sp)
    610003a6:	6eaa                	ld	t4,136(sp)
    610003a8:	6f4a                	ld	t5,144(sp)
    610003aa:	6fea                	ld	t6,152(sp)
    610003ac:	610d                	addi	sp,sp,160

    /* Return to regular code */
    mret
    610003ae:	30200073          	mret

00000000610003b2 <default_intexc_handler>:
.global default_intexc_handler
.weak default_intexc_handler
Undef_Handler:
default_intexc_handler:
1:
    j 1b
    610003b2:	a001                	j	610003b2 <default_intexc_handler>
	...

00000000610003b6 <dw_dmac_enable>:
}
*////
/**********************************************************************/
//pass
void dw_dmac_enable(DMAC_AL9000_TypeDef *DMAC)
{
    610003b6:	1101                	addi	sp,sp,-32
    610003b8:	ec22                	sd	s0,24(sp)
    610003ba:	1000                	addi	s0,sp,32
    610003bc:	fea43423          	sd	a0,-24(s0)
    DMAC->DmaCfgReg_L |=  DMAC_DmaCfgReg_DMA_EN;
    610003c0:	fe843783          	ld	a5,-24(s0)
    610003c4:	0d87a783          	lw	a5,216(a5)
    610003c8:	2781                	sext.w	a5,a5
    610003ca:	0017e793          	ori	a5,a5,1
    610003ce:	0007871b          	sext.w	a4,a5
    610003d2:	fe843783          	ld	a5,-24(s0)
    610003d6:	0ce7ac23          	sw	a4,216(a5)
}
    610003da:	0001                	nop
    610003dc:	6462                	ld	s0,24(sp)
    610003de:	6105                	addi	sp,sp,32
    610003e0:	8082                	ret

00000000610003e2 <dw_dmac_enableChannel>:


/**********************************************************************/
//pass
int dw_dmac_enableChannel(DMAC_AL9000_TypeDef *DMAC,enum  dw_dmac_channel_number ch_num)
{
    610003e2:	7179                	addi	sp,sp,-48
    610003e4:	f422                	sd	s0,40(sp)
    610003e6:	1800                	addi	s0,sp,48
    610003e8:	fca43c23          	sd	a0,-40(s0)
    610003ec:	87ae                	mv	a5,a1
    610003ee:	fcf42a23          	sw	a5,-44(s0)
    int errorCode=1;
    610003f2:	4785                	li	a5,1
    610003f4:	fef42623          	sw	a5,-20(s0)
    uint32_t reg;
     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
    if(errorCode == 1) {
    610003f8:	fec42783          	lw	a5,-20(s0)
    610003fc:	0007871b          	sext.w	a4,a5
    61000400:	4785                	li	a5,1
    61000402:	02f71363          	bne	a4,a5,61000428 <dw_dmac_enableChannel+0x46>
         //The dw_dmac_channel_number enum is declared such that
         //the enumerated value maps exactly to the value that
         //needs to be written into the ChEnReg for enabling.
        reg = ch_num;
    61000406:	fd442783          	lw	a5,-44(s0)
    6100040a:	fef42423          	sw	a5,-24(s0)
        DMAC ->ChEnReg_L |= DMAC_ChEnReg_L_CH1_EN;
    6100040e:	fd843783          	ld	a5,-40(s0)
    61000412:	0e07a783          	lw	a5,224(a5)
    61000416:	2781                	sext.w	a5,a5
    61000418:	1017e793          	ori	a5,a5,257
    6100041c:	0007871b          	sext.w	a4,a5
    61000420:	fd843783          	ld	a5,-40(s0)
    61000424:	0ee7a023          	sw	a4,224(a5)
    }
    return errorCode;
    61000428:	fec42783          	lw	a5,-20(s0)
}
    6100042c:	853e                	mv	a0,a5
    6100042e:	7422                	ld	s0,40(sp)
    61000430:	6145                	addi	sp,sp,48
    61000432:	8082                	ret

0000000061000434 <dw_dmac_enableChannelIrq>:
/**********************************************************************/

int dw_dmac_enableChannelIrq(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num)
{
    61000434:	7179                	addi	sp,sp,-48
    61000436:	f422                	sd	s0,40(sp)
    61000438:	1800                	addi	s0,sp,48
    6100043a:	fca43c23          	sd	a0,-40(s0)
    6100043e:	87ae                	mv	a5,a1
    61000440:	fcf42a23          	sw	a5,-44(s0)
    int x;
    int errorCode = 1;
    61000444:	4785                	li	a5,1
    61000446:	fef42423          	sw	a5,-24(s0)
    // Limit all channels to the number of channels on this
    // configuration of the DMA controller.

    // Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(dev, ch_num);
    if(errorCode == 1) {
    6100044a:	fe842783          	lw	a5,-24(s0)
    6100044e:	0007871b          	sext.w	a4,a5
    61000452:	4785                	li	a5,1
    61000454:	04f71063          	bne	a4,a5,61000494 <dw_dmac_enableChannelIrq+0x60>

        // Loop through each channel in turn and enable
        // the channel Irq for the selected channels.
        for(x=1;x<num_channels;x++) {
    61000458:	4785                	li	a5,1
    6100045a:	fef42623          	sw	a5,-20(s0)
    6100045e:	a035                	j	6100048a <dw_dmac_enableChannelIrq+0x56>
                if(Channelx ->CTL_L.INT_EN != 0x1) {
    61000460:	fd843783          	ld	a5,-40(s0)
    61000464:	4f9c                	lw	a5,24(a5)
    61000466:	8b85                	andi	a5,a5,1
    61000468:	0ff7f793          	andi	a5,a5,255
    6100046c:	873e                	mv	a4,a5
    6100046e:	4785                	li	a5,1
    61000470:	00f70863          	beq	a4,a5,61000480 <dw_dmac_enableChannelIrq+0x4c>
                	Channelx ->CTL_L.INT_EN = ENABLE;
    61000474:	fd843783          	ld	a5,-40(s0)
    61000478:	4f98                	lw	a4,24(a5)
    6100047a:	00176713          	ori	a4,a4,1
    6100047e:	cf98                	sw	a4,24(a5)
        for(x=1;x<num_channels;x++) {
    61000480:	fec42783          	lw	a5,-20(s0)
    61000484:	2785                	addiw	a5,a5,1
    61000486:	fef42623          	sw	a5,-20(s0)
    6100048a:	fec42783          	lw	a5,-20(s0)
    6100048e:	2781                	sext.w	a5,a5
    61000490:	fcf058e3          	blez	a5,61000460 <dw_dmac_enableChannelIrq+0x2c>
                }
        }
    }
    return errorCode;
    61000494:	fe842783          	lw	a5,-24(s0)
}
    61000498:	853e                	mv	a0,a5
    6100049a:	7422                	ld	s0,40(sp)
    6100049c:	6145                	addi	sp,sp,48
    6100049e:	8082                	ret

00000000610004a0 <dw_dmac_unmaskIrq>:

int dw_dmac_unmaskIrq(
		DMAC_AL9000_TypeDef *DMAC,
		enum   dw_dmac_channel_number ch_num,
		enum   dw_dmac_irq ch_irq)
{
    610004a0:	7179                	addi	sp,sp,-48
    610004a2:	f422                	sd	s0,40(sp)
    610004a4:	1800                	addi	s0,sp,48
    610004a6:	fca43c23          	sd	a0,-40(s0)
    610004aa:	87ae                	mv	a5,a1
    610004ac:	8732                	mv	a4,a2
    610004ae:	fcf42a23          	sw	a5,-44(s0)
    610004b2:	87ba                	mv	a5,a4
    610004b4:	fcf42823          	sw	a5,-48(s0)
    int x;
    int errorCode=1;
    610004b8:	4785                	li	a5,1
    610004ba:	fef42423          	sw	a5,-24(s0)
    uint32_t reg;

    if(errorCode == 1) {
    610004be:	fe842783          	lw	a5,-24(s0)
    610004c2:	0007871b          	sext.w	a4,a5
    610004c6:	4785                	li	a5,1
    610004c8:	0cf71f63          	bne	a4,a5,610005a6 <dw_dmac_unmaskIrq+0x106>

        // Loop through and mask the selected channel Irq
        // for the targeted channels.
        reg = ch_num & (DMAC_MAX_CH_MASK << DMAC_MAX_CHANNELS);
    610004cc:	fd442703          	lw	a4,-44(s0)
    610004d0:	67a1                	lui	a5,0x8
    610004d2:	8ff9                	and	a5,a5,a4
    610004d4:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<DMAC_MAX_INTERRUPTS;x++) {
    610004d8:	fe042623          	sw	zero,-20(s0)
    610004dc:	a875                	j	61000598 <dw_dmac_unmaskIrq+0xf8>
            //if(ch_irq & (1<<x)) {
                switch(ch_irq) {
    610004de:	fd042783          	lw	a5,-48(s0)
    610004e2:	0007871b          	sext.w	a4,a5
    610004e6:	4791                	li	a5,4
    610004e8:	08f70763          	beq	a4,a5,61000576 <dw_dmac_unmaskIrq+0xd6>
    610004ec:	fd042783          	lw	a5,-48(s0)
    610004f0:	0007871b          	sext.w	a4,a5
    610004f4:	4791                	li	a5,4
    610004f6:	08e7ec63          	bltu	a5,a4,6100058e <dw_dmac_unmaskIrq+0xee>
    610004fa:	fd042783          	lw	a5,-48(s0)
    610004fe:	0007871b          	sext.w	a4,a5
    61000502:	478d                	li	a5,3
    61000504:	04f70d63          	beq	a4,a5,6100055e <dw_dmac_unmaskIrq+0xbe>
    61000508:	fd042783          	lw	a5,-48(s0)
    6100050c:	0007871b          	sext.w	a4,a5
    61000510:	478d                	li	a5,3
    61000512:	06e7ee63          	bltu	a5,a4,6100058e <dw_dmac_unmaskIrq+0xee>
    61000516:	fd042783          	lw	a5,-48(s0)
    6100051a:	2781                	sext.w	a5,a5
    6100051c:	cb89                	beqz	a5,6100052e <dw_dmac_unmaskIrq+0x8e>
    6100051e:	fd042783          	lw	a5,-48(s0)
    61000522:	0007871b          	sext.w	a4,a5
    61000526:	4785                	li	a5,1
    61000528:	00f70f63          	beq	a4,a5,61000546 <dw_dmac_unmaskIrq+0xa6>
    6100052c:	a08d                	j	6100058e <dw_dmac_unmaskIrq+0xee>
                    case 0 :
 		DMAC ->MaskTfer_L   |= DMAC_MaskTfer_CH1_INT_MASK;
    6100052e:	fd843783          	ld	a5,-40(s0)
    61000532:	4bbc                	lw	a5,80(a5)
    61000534:	2781                	sext.w	a5,a5
    61000536:	1017e793          	ori	a5,a5,257
    6100053a:	0007871b          	sext.w	a4,a5
    6100053e:	fd843783          	ld	a5,-40(s0)
    61000542:	cbb8                	sw	a4,80(a5)
                             break;
    61000544:	a0a9                	j	6100058e <dw_dmac_unmaskIrq+0xee>
                    case 1 :
 		DMAC ->MaskBlock_L  |= DMAC_MaskBlock_CH1_INT_MASK;
    61000546:	fd843783          	ld	a5,-40(s0)
    6100054a:	4fbc                	lw	a5,88(a5)
    6100054c:	2781                	sext.w	a5,a5
    6100054e:	1017e793          	ori	a5,a5,257
    61000552:	0007871b          	sext.w	a4,a5
    61000556:	fd843783          	ld	a5,-40(s0)
    6100055a:	cfb8                	sw	a4,88(a5)
                             break;
    6100055c:	a80d                	j	6100058e <dw_dmac_unmaskIrq+0xee>
                    //case 2 :
		DMAC ->MaskSrcTran_L|= DMAC_MaskSrcTran_CH1_INT_MASK;
                            break;
                    case 3 :
 		DMAC ->MaskDstTran_L|= DMAC_MaskDstTran_CH1_INT_MASK;
    6100055e:	fd843783          	ld	a5,-40(s0)
    61000562:	57bc                	lw	a5,104(a5)
    61000564:	2781                	sext.w	a5,a5
    61000566:	1017e793          	ori	a5,a5,257
    6100056a:	0007871b          	sext.w	a4,a5
    6100056e:	fd843783          	ld	a5,-40(s0)
    61000572:	d7b8                	sw	a4,104(a5)
                             break;
    61000574:	a829                	j	6100058e <dw_dmac_unmaskIrq+0xee>
                    case 4 :
 		DMAC ->MaskErr_L    |= DMAC_MaskErr_CH1_INT_MASK;
    61000576:	fd843783          	ld	a5,-40(s0)
    6100057a:	5bbc                	lw	a5,112(a5)
    6100057c:	2781                	sext.w	a5,a5
    6100057e:	0017e793          	ori	a5,a5,1
    61000582:	0007871b          	sext.w	a4,a5
    61000586:	fd843783          	ld	a5,-40(s0)
    6100058a:	dbb8                	sw	a4,112(a5)
                             break;
    6100058c:	0001                	nop
        for(x=0;x<DMAC_MAX_INTERRUPTS;x++) {
    6100058e:	fec42783          	lw	a5,-20(s0)
    61000592:	2785                	addiw	a5,a5,1
    61000594:	fef42623          	sw	a5,-20(s0)
    61000598:	fec42783          	lw	a5,-20(s0)
    6100059c:	0007871b          	sext.w	a4,a5
    610005a0:	4791                	li	a5,4
    610005a2:	f2e7dee3          	bge	a5,a4,610004de <dw_dmac_unmaskIrq+0x3e>
                }
            //}
        }
    }
    return errorCode;
    610005a6:	fe842783          	lw	a5,-24(s0)
}
    610005aa:	853e                	mv	a0,a5
    610005ac:	7422                	ld	s0,40(sp)
    610005ae:	6145                	addi	sp,sp,48
    610005b0:	8082                	ret

00000000610005b2 <dw_dmac_setAddress>:
int dw_dmac_setAddress(
		DMA_Channel_TypeDef *Channelx,
        enum     dw_dmac_channel_number ch_num,
        enum     dw_dmac_src_dst_select sd_sel,
        uint32_t address)
{
    610005b2:	7139                	addi	sp,sp,-64
    610005b4:	fc22                	sd	s0,56(sp)
    610005b6:	0080                	addi	s0,sp,64
    610005b8:	fca43c23          	sd	a0,-40(s0)
    610005bc:	87ae                	mv	a5,a1
    610005be:	8736                	mv	a4,a3
    610005c0:	fcf42a23          	sw	a5,-44(s0)
    610005c4:	87b2                	mv	a5,a2
    610005c6:	fcf42823          	sw	a5,-48(s0)
    610005ca:	87ba                	mv	a5,a4
    610005cc:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    610005d0:	4785                	li	a5,1
    610005d2:	fef42423          	sw	a5,-24(s0)
    int x;

    //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
        for(x=0;x<num_channels;x++) {
    610005d6:	fe042623          	sw	zero,-20(s0)
    610005da:	a889                	j	6100062c <dw_dmac_setAddress+0x7a>
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    610005dc:	fd042783          	lw	a5,-48(s0)
    610005e0:	2781                	sext.w	a5,a5
    610005e2:	cb81                	beqz	a5,610005f2 <dw_dmac_setAddress+0x40>
    610005e4:	fd042783          	lw	a5,-48(s0)
    610005e8:	0007871b          	sext.w	a4,a5
    610005ec:	4789                	li	a5,2
    610005ee:	00f71763          	bne	a4,a5,610005fc <dw_dmac_setAddress+0x4a>
                	Channelx -> SAR_L = address;
    610005f2:	fd843783          	ld	a5,-40(s0)
    610005f6:	fcc42703          	lw	a4,-52(s0)
    610005fa:	c398                	sw	a4,0(a5)
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    610005fc:	fd042783          	lw	a5,-48(s0)
    61000600:	0007871b          	sext.w	a4,a5
    61000604:	4785                	li	a5,1
    61000606:	00f70963          	beq	a4,a5,61000618 <dw_dmac_setAddress+0x66>
    6100060a:	fd042783          	lw	a5,-48(s0)
    6100060e:	0007871b          	sext.w	a4,a5
    61000612:	4789                	li	a5,2
    61000614:	00f71763          	bne	a4,a5,61000622 <dw_dmac_setAddress+0x70>
                	Channelx -> DAR_L = address;
    61000618:	fd843783          	ld	a5,-40(s0)
    6100061c:	fcc42703          	lw	a4,-52(s0)
    61000620:	c798                	sw	a4,8(a5)
        for(x=0;x<num_channels;x++) {
    61000622:	fec42783          	lw	a5,-20(s0)
    61000626:	2785                	addiw	a5,a5,1
    61000628:	fef42623          	sw	a5,-20(s0)
    6100062c:	fec42783          	lw	a5,-20(s0)
    61000630:	2781                	sext.w	a5,a5
    61000632:	faf055e3          	blez	a5,610005dc <dw_dmac_setAddress+0x2a>
                }
        }
    return errorCode;
    61000636:	fe842783          	lw	a5,-24(s0)
}
    6100063a:	853e                	mv	a0,a5
    6100063c:	7462                	ld	s0,56(sp)
    6100063e:	6121                	addi	sp,sp,64
    61000640:	8082                	ret

0000000061000642 <dw_dmac_setChannelConfig>:
//pass
int dw_dmac_setChannelConfig(
		DMA_Channel_TypeDef *Channelx)
{
    61000642:	7179                	addi	sp,sp,-48
    61000644:	f422                	sd	s0,40(sp)
    61000646:	1800                	addi	s0,sp,48
    61000648:	fca43c23          	sd	a0,-40(s0)
    int errorCode=1;
    6100064c:	4785                	li	a5,1
    6100064e:	fef42623          	sw	a5,-20(s0)
     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);


         //Set the control register
        	Channelx ->CTL_L.INT_EN     	= ENABLE ;
    61000652:	fd843783          	ld	a5,-40(s0)
    61000656:	4f98                	lw	a4,24(a5)
    61000658:	00176713          	ori	a4,a4,1
    6100065c:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.DST_TR_WIDTH   	= WIDTH_8;
    6100065e:	fd843783          	ld	a5,-40(s0)
    61000662:	4f98                	lw	a4,24(a5)
    61000664:	9b45                	andi	a4,a4,-15
    61000666:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.SRC_TR_WIDTH   	= WIDTH_8;
    61000668:	fd843783          	ld	a5,-40(s0)
    6100066c:	4f98                	lw	a4,24(a5)
    6100066e:	f8f77713          	andi	a4,a4,-113
    61000672:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.LLP_SRC_EN 		= DISABLE;
    61000674:	fd843783          	ld	a5,-40(s0)
    61000678:	4f94                	lw	a3,24(a5)
    6100067a:	f0000737          	lui	a4,0xf0000
    6100067e:	177d                	addi	a4,a4,-1
    61000680:	8f75                	and	a4,a4,a3
    61000682:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.LLP_DST_EN 		= DISABLE;
    61000684:	fd843783          	ld	a5,-40(s0)
    61000688:	4f94                	lw	a3,24(a5)
    6100068a:	f8000737          	lui	a4,0xf8000
    6100068e:	177d                	addi	a4,a4,-1
    61000690:	8f75                	and	a4,a4,a3
    61000692:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.DINC           	= Increments;
    61000694:	fd843783          	ld	a5,-40(s0)
    61000698:	4f98                	lw	a4,24(a5)
    6100069a:	e7f77713          	andi	a4,a4,-385
    6100069e:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.SINC           	= Increments;
    610006a0:	fd843783          	ld	a5,-40(s0)
    610006a4:	4f98                	lw	a4,24(a5)
    610006a6:	9ff77713          	andi	a4,a4,-1537
    610006aa:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.DEST_MSIZE     	= DW_DMA_MSIZE_1 ;
    610006ac:	fd843783          	ld	a5,-40(s0)
    610006b0:	4f94                	lw	a3,24(a5)
    610006b2:	7771                	lui	a4,0xffffc
    610006b4:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    610006b8:	8f75                	and	a4,a4,a3
    610006ba:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.SRC_MSIZE     	 	= DW_DMA_MSIZE_1 ;
    610006bc:	fd843783          	ld	a5,-40(s0)
    610006c0:	4f94                	lw	a3,24(a5)
    610006c2:	7711                	lui	a4,0xfffe4
    610006c4:	177d                	addi	a4,a4,-1
    610006c6:	8f75                	and	a4,a4,a3
    610006c8:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.SRC_GATHER_EN  	= DISABLE;
    610006ca:	fd843783          	ld	a5,-40(s0)
    610006ce:	4f94                	lw	a3,24(a5)
    610006d0:	7701                	lui	a4,0xfffe0
    610006d2:	177d                	addi	a4,a4,-1
    610006d4:	8f75                	and	a4,a4,a3
    610006d6:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.DST_SCATTER_EN 	= DISABLE;
    610006d8:	fd843783          	ld	a5,-40(s0)
    610006dc:	4f94                	lw	a3,24(a5)
    610006de:	fffc0737          	lui	a4,0xfffc0
    610006e2:	177d                	addi	a4,a4,-1
    610006e4:	8f75                	and	a4,a4,a3
    610006e6:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.TT_FC      		= MEM2MEM ;
    610006e8:	fd843783          	ld	a5,-40(s0)
    610006ec:	4f94                	lw	a3,24(a5)
    610006ee:	ff900737          	lui	a4,0xff900
    610006f2:	177d                	addi	a4,a4,-1
    610006f4:	8f75                	and	a4,a4,a3
    610006f6:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.DMS			= DMS_master1;
    610006f8:	fd843783          	ld	a5,-40(s0)
    610006fc:	4f94                	lw	a3,24(a5)
    610006fe:	fe800737          	lui	a4,0xfe800
    61000702:	177d                	addi	a4,a4,-1
    61000704:	8f75                	and	a4,a4,a3
    61000706:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_L.SMS			= SMS_master1;
    61000708:	fd843783          	ld	a5,-40(s0)
    6100070c:	4f94                	lw	a3,24(a5)
    6100070e:	fa000737          	lui	a4,0xfa000
    61000712:	177d                	addi	a4,a4,-1
    61000714:	8f75                	and	a4,a4,a3
    61000716:	cf98                	sw	a4,24(a5)
		Channelx ->CTL_H.BLOCK_TS       	= 5;
    61000718:	fd843783          	ld	a5,-40(s0)
    6100071c:	4fd4                	lw	a3,28(a5)
    6100071e:	777d                	lui	a4,0xfffff
    61000720:	8f75                	and	a4,a4,a3
    61000722:	00576713          	ori	a4,a4,5
    61000726:	cfd8                	sw	a4,28(a5)
		Channelx ->CTL_H.DONE           	= ENABLE;
    61000728:	fd843783          	ld	a5,-40(s0)
    6100072c:	4fd4                	lw	a3,28(a5)
    6100072e:	6705                	lui	a4,0x1
    61000730:	8f55                	or	a4,a4,a3
    61000732:	cfd8                	sw	a4,28(a5)

         //Set the config register
		Channelx ->CFG_L.CH_PRIOR 		= Channel_priority_0;
    61000734:	fd843783          	ld	a5,-40(s0)
    61000738:	43b8                	lw	a4,64(a5)
    6100073a:	f1f77713          	andi	a4,a4,-225
    6100073e:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.CH_SUSP  		= DISABLE;
    61000740:	fd843783          	ld	a5,-40(s0)
    61000744:	43b8                	lw	a4,64(a5)
    61000746:	eff77713          	andi	a4,a4,-257
    6100074a:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.HS_SEL_DST     	= Hardware_handshaking;
    6100074c:	fd843783          	ld	a5,-40(s0)
    61000750:	43b8                	lw	a4,64(a5)
    61000752:	bff77713          	andi	a4,a4,-1025
    61000756:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.HS_SEL_SRC     	= Hardware_handshaking;
    61000758:	fd843783          	ld	a5,-40(s0)
    6100075c:	43b4                	lw	a3,64(a5)
    6100075e:	777d                	lui	a4,0xfffff
    61000760:	7ff70713          	addi	a4,a4,2047 # fffffffffffff7ff <_sp+0xffffffff9efdf7ff>
    61000764:	8f75                	and	a4,a4,a3
    61000766:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.DST_HS_POL     	= ACTIVE_HIGH;
    61000768:	fd843783          	ld	a5,-40(s0)
    6100076c:	43b4                	lw	a3,64(a5)
    6100076e:	fffc0737          	lui	a4,0xfffc0
    61000772:	177d                	addi	a4,a4,-1
    61000774:	8f75                	and	a4,a4,a3
    61000776:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.SRC_HS_POL     	= ACTIVE_HIGH;
    61000778:	fd843783          	ld	a5,-40(s0)
    6100077c:	43b4                	lw	a3,64(a5)
    6100077e:	fff80737          	lui	a4,0xfff80
    61000782:	177d                	addi	a4,a4,-1
    61000784:	8f75                	and	a4,a4,a3
    61000786:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.RELOAD_SRC		= DISABLE;
    61000788:	fd843783          	ld	a5,-40(s0)
    6100078c:	43b4                	lw	a3,64(a5)
    6100078e:	c0000737          	lui	a4,0xc0000
    61000792:	177d                	addi	a4,a4,-1
    61000794:	8f75                	and	a4,a4,a3
    61000796:	c3b8                	sw	a4,64(a5)
		Channelx ->CFG_L.RELOAD_DST		= DISABLE;
    61000798:	fd843783          	ld	a5,-40(s0)
    6100079c:	43b4                	lw	a3,64(a5)
    6100079e:	80000737          	lui	a4,0x80000
    610007a2:	fff74713          	not	a4,a4
    610007a6:	8f75                	and	a4,a4,a3
    610007a8:	c3b8                	sw	a4,64(a5)

		Channelx ->CFG_H.FCMODE         	= fc_mode_0;
    610007aa:	fd843783          	ld	a5,-40(s0)
    610007ae:	43f8                	lw	a4,68(a5)
    610007b0:	9b79                	andi	a4,a4,-2
    610007b2:	c3f8                	sw	a4,68(a5)
		Channelx ->CFG_H.FIFO_MODE      	= FIFO_MODE_0;
    610007b4:	fd843783          	ld	a5,-40(s0)
    610007b8:	43f8                	lw	a4,68(a5)
    610007ba:	9b75                	andi	a4,a4,-3
    610007bc:	c3f8                	sw	a4,68(a5)
		Channelx ->CFG_H.DS_UPD_EN      	= DISABLE;
    610007be:	fd843783          	ld	a5,-40(s0)
    610007c2:	43f8                	lw	a4,68(a5)
    610007c4:	fdf77713          	andi	a4,a4,-33
    610007c8:	c3f8                	sw	a4,68(a5)
		Channelx ->CFG_H.SS_UPD_EN      	= DISABLE;
    610007ca:	fd843783          	ld	a5,-40(s0)
    610007ce:	43f8                	lw	a4,68(a5)
    610007d0:	fbf77713          	andi	a4,a4,-65
    610007d4:	c3f8                	sw	a4,68(a5)
		Channelx ->CFG_H.SRC_PER        	= 0x01;
    610007d6:	fd843783          	ld	a5,-40(s0)
    610007da:	43f8                	lw	a4,68(a5)
    610007dc:	87f77713          	andi	a4,a4,-1921
    610007e0:	08076713          	ori	a4,a4,128
    610007e4:	c3f8                	sw	a4,68(a5)
		Channelx ->CFG_H.DEST_PER       	= 0x01;
    610007e6:	fd843783          	ld	a5,-40(s0)
    610007ea:	43f4                	lw	a3,68(a5)
    610007ec:	7761                	lui	a4,0xffff8
    610007ee:	7ff70713          	addi	a4,a4,2047 # ffffffffffff87ff <_sp+0xffffffff9efd87ff>
    610007f2:	8f75                	and	a4,a4,a3
    610007f4:	86ba                	mv	a3,a4
    610007f6:	6705                	lui	a4,0x1
    610007f8:	80070713          	addi	a4,a4,-2048 # 800 <__stack_size>
    610007fc:	8f55                	or	a4,a4,a3
    610007fe:	c3f8                	sw	a4,68(a5)

         //set the SAR/DAR registers
		Channelx ->SAR_L 			= MEM_BASE1_ADDR;
    61000800:	fd843783          	ld	a5,-40(s0)
    61000804:	61030737          	lui	a4,0x61030
    61000808:	c398                	sw	a4,0(a5)
		Channelx ->DAR_L			= MEM_BASE2_ADDR;
    6100080a:	fd843783          	ld	a5,-40(s0)
    6100080e:	61030737          	lui	a4,0x61030
    61000812:	1007071b          	addiw	a4,a4,256
    61000816:	c798                	sw	a4,8(a5)

    return errorCode;
    61000818:	fec42783          	lw	a5,-20(s0)
}
    6100081c:	853e                	mv	a0,a5
    6100081e:	7422                	ld	s0,40(sp)
    61000820:	6145                	addi	sp,sp,48
    61000822:	8082                	ret

0000000061000824 <dw_dmac_setTransferType>:
//pass
int dw_dmac_setTransferType(DMA_Channel_TypeDef *Channelx,
		enum dw_dmac_channel_number ch_num,
		enum dw_dmac_transfer_type  transfer,
		enum   dw_dmac_src_dst_select sd_sel)
{
    61000824:	7139                	addi	sp,sp,-64
    61000826:	fc06                	sd	ra,56(sp)
    61000828:	f822                	sd	s0,48(sp)
    6100082a:	0080                	addi	s0,sp,64
    6100082c:	fca43c23          	sd	a0,-40(s0)
    61000830:	87ae                	mv	a5,a1
    61000832:	8736                	mv	a4,a3
    61000834:	fcf42a23          	sw	a5,-44(s0)
    61000838:	87b2                	mv	a5,a2
    6100083a:	fcf42823          	sw	a5,-48(s0)
    6100083e:	87ba                	mv	a5,a4
    61000840:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    61000844:	4785                	li	a5,1
    61000846:	fef42623          	sw	a5,-20(s0)


     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
    if(errorCode == 1) {
    6100084a:	fec42783          	lw	a5,-20(s0)
    6100084e:	0007871b          	sext.w	a4,a5
    61000852:	4785                	li	a5,1
    61000854:	1ef71363          	bne	a4,a5,61000a3a <dw_dmac_setTransferType+0x216>
    61000858:	fd042783          	lw	a5,-48(s0)
    6100085c:	0007871b          	sext.w	a4,a5
    61000860:	47a5                	li	a5,9
    61000862:	20e7e163          	bltu	a5,a4,61000a64 <dw_dmac_setTransferType+0x240>
    61000866:	fd046783          	lwu	a5,-48(s0)
    6100086a:	00279713          	slli	a4,a5,0x2
    6100086e:	00004797          	auipc	a5,0x4
    61000872:	aca78793          	addi	a5,a5,-1334 # 61004338 <_read_r+0x2e>
    61000876:	97ba                	add	a5,a5,a4
    61000878:	439c                	lw	a5,0(a5)
    6100087a:	0007871b          	sext.w	a4,a5
    6100087e:	00004797          	auipc	a5,0x4
    61000882:	aba78793          	addi	a5,a5,-1350 # 61004338 <_read_r+0x2e>
    61000886:	97ba                	add	a5,a5,a4
    61000888:	8782                	jr	a5
        switch(transfer) {
            case Dmac_transfer_row1 :
                if(errorCode == 1) {
    6100088a:	fec42783          	lw	a5,-20(s0)
    6100088e:	0007871b          	sext.w	a4,a5
    61000892:	4785                	li	a5,1
    61000894:	1af71563          	bne	a4,a5,61000a3e <dw_dmac_setTransferType+0x21a>
		   dw_dmac_setSingle(Channelx,ch_num,Dmac_src_dst);
    61000898:	fd442783          	lw	a5,-44(s0)
    6100089c:	4609                	li	a2,2
    6100089e:	85be                	mv	a1,a5
    610008a0:	fd843503          	ld	a0,-40(s0)
    610008a4:	729000ef          	jal	ra,610017cc <dw_dmac_setSingle>
                }
                break;
    610008a8:	aa59                	j	61000a3e <dw_dmac_setTransferType+0x21a>
 	   case Dmac_transfer_row2 :
                if(errorCode == 1) {
    610008aa:	fec42783          	lw	a5,-20(s0)
    610008ae:	0007871b          	sext.w	a4,a5
    610008b2:	4785                	li	a5,1
    610008b4:	18f71763          	bne	a4,a5,61000a42 <dw_dmac_setTransferType+0x21e>
		   dw_dmac_setReload(Channelx,ch_num,sd_sel);
    610008b8:	fcc42703          	lw	a4,-52(s0)
    610008bc:	fd442783          	lw	a5,-44(s0)
    610008c0:	863a                	mv	a2,a4
    610008c2:	85be                	mv	a1,a5
    610008c4:	fd843503          	ld	a0,-40(s0)
    610008c8:	635000ef          	jal	ra,610016fc <dw_dmac_setReload>
                }
                break;
    610008cc:	aa9d                	j	61000a42 <dw_dmac_setTransferType+0x21e>
           case Dmac_transfer_row3 :
                if(errorCode == 1) {
    610008ce:	fec42783          	lw	a5,-20(s0)
    610008d2:	0007871b          	sext.w	a4,a5
    610008d6:	4785                	li	a5,1
    610008d8:	16f71763          	bne	a4,a5,61000a46 <dw_dmac_setTransferType+0x222>
		   dw_dmac_setReload(Channelx,ch_num,sd_sel);
    610008dc:	fcc42703          	lw	a4,-52(s0)
    610008e0:	fd442783          	lw	a5,-44(s0)
    610008e4:	863a                	mv	a2,a4
    610008e6:	85be                	mv	a1,a5
    610008e8:	fd843503          	ld	a0,-40(s0)
    610008ec:	611000ef          	jal	ra,610016fc <dw_dmac_setReload>
                }
                break;
    610008f0:	aa99                	j	61000a46 <dw_dmac_setTransferType+0x222>
          case Dmac_transfer_row4 :
                if(errorCode == 1) {
    610008f2:	fec42783          	lw	a5,-20(s0)
    610008f6:	0007871b          	sext.w	a4,a5
    610008fa:	4785                	li	a5,1
    610008fc:	14f71763          	bne	a4,a5,61000a4a <dw_dmac_setTransferType+0x226>
		  dw_dmac_setReload(Channelx,ch_num,sd_sel);
    61000900:	fcc42703          	lw	a4,-52(s0)
    61000904:	fd442783          	lw	a5,-44(s0)
    61000908:	863a                	mv	a2,a4
    6100090a:	85be                	mv	a1,a5
    6100090c:	fd843503          	ld	a0,-40(s0)
    61000910:	5ed000ef          	jal	ra,610016fc <dw_dmac_setReload>
                }
                break;
    61000914:	aa1d                	j	61000a4a <dw_dmac_setTransferType+0x226>
          case Dmac_transfer_row5 :
                if(errorCode == 1) {
    61000916:	fec42783          	lw	a5,-20(s0)
    6100091a:	0007871b          	sext.w	a4,a5
    6100091e:	4785                	li	a5,1
    61000920:	12f71763          	bne	a4,a5,61000a4e <dw_dmac_setTransferType+0x22a>
		  dw_dmac_setSingle(Channelx,ch_num,sd_sel);
    61000924:	fcc42703          	lw	a4,-52(s0)
    61000928:	fd442783          	lw	a5,-44(s0)
    6100092c:	863a                	mv	a2,a4
    6100092e:	85be                	mv	a1,a5
    61000930:	fd843503          	ld	a0,-40(s0)
    61000934:	699000ef          	jal	ra,610017cc <dw_dmac_setSingle>
                }
                break;
    61000938:	aa19                	j	61000a4e <dw_dmac_setTransferType+0x22a>
          case Dmac_transfer_row6 :
                if(errorCode == 1) {
    6100093a:	fec42783          	lw	a5,-20(s0)
    6100093e:	0007871b          	sext.w	a4,a5
    61000942:	4785                	li	a5,1
    61000944:	10f71763          	bne	a4,a5,61000a52 <dw_dmac_setTransferType+0x22e>
		   dw_dmac_setReload(Channelx,ch_num,Dmac_src);
    61000948:	fd442783          	lw	a5,-44(s0)
    6100094c:	4601                	li	a2,0
    6100094e:	85be                	mv	a1,a5
    61000950:	fd843503          	ld	a0,-40(s0)
    61000954:	5a9000ef          	jal	ra,610016fc <dw_dmac_setReload>
		   dw_dmac_setLlpEnable(Channelx,ch_num,sd_sel);
    61000958:	fcc42703          	lw	a4,-52(s0)
    6100095c:	fd442783          	lw	a5,-44(s0)
    61000960:	863a                	mv	a2,a4
    61000962:	85be                	mv	a1,a5
    61000964:	fd843503          	ld	a0,-40(s0)
    61000968:	71b000ef          	jal	ra,61001882 <dw_dmac_setLlpEnable>
                }
                break;
    6100096c:	a0dd                	j	61000a52 <dw_dmac_setTransferType+0x22e>
          case Dmac_transfer_row7 :
                if(errorCode == 1) {
    6100096e:	fec42783          	lw	a5,-20(s0)
    61000972:	0007871b          	sext.w	a4,a5
    61000976:	4785                	li	a5,1
    61000978:	0cf71f63          	bne	a4,a5,61000a56 <dw_dmac_setTransferType+0x232>
		   		   dw_dmac_setReload(Channelx,ch_num,sd_sel);
    6100097c:	fcc42703          	lw	a4,-52(s0)
    61000980:	fd442783          	lw	a5,-44(s0)
    61000984:	863a                	mv	a2,a4
    61000986:	85be                	mv	a1,a5
    61000988:	fd843503          	ld	a0,-40(s0)
    6100098c:	571000ef          	jal	ra,610016fc <dw_dmac_setReload>
		   dw_dmac_setLlpEnable(Channelx,ch_num,sd_sel);
    61000990:	fcc42703          	lw	a4,-52(s0)
    61000994:	fd442783          	lw	a5,-44(s0)
    61000998:	863a                	mv	a2,a4
    6100099a:	85be                	mv	a1,a5
    6100099c:	fd843503          	ld	a0,-40(s0)
    610009a0:	6e3000ef          	jal	ra,61001882 <dw_dmac_setLlpEnable>

}
                break;
    610009a4:	a84d                	j	61000a56 <dw_dmac_setTransferType+0x232>
          case Dmac_transfer_row8 :
                if(errorCode == 1) {
    610009a6:	fec42783          	lw	a5,-20(s0)
    610009aa:	0007871b          	sext.w	a4,a5
    610009ae:	4785                	li	a5,1
    610009b0:	0af71563          	bne	a4,a5,61000a5a <dw_dmac_setTransferType+0x236>
		   dw_dmac_setReload(Channelx,ch_num,sd_sel);
    610009b4:	fcc42703          	lw	a4,-52(s0)
    610009b8:	fd442783          	lw	a5,-44(s0)
    610009bc:	863a                	mv	a2,a4
    610009be:	85be                	mv	a1,a5
    610009c0:	fd843503          	ld	a0,-40(s0)
    610009c4:	539000ef          	jal	ra,610016fc <dw_dmac_setReload>
		   dw_dmac_setLlpEnable(Channelx,ch_num,sd_sel);
    610009c8:	fcc42703          	lw	a4,-52(s0)
    610009cc:	fd442783          	lw	a5,-44(s0)
    610009d0:	863a                	mv	a2,a4
    610009d2:	85be                	mv	a1,a5
    610009d4:	fd843503          	ld	a0,-40(s0)
    610009d8:	6ab000ef          	jal	ra,61001882 <dw_dmac_setLlpEnable>

                }
                break;
    610009dc:	a8bd                	j	61000a5a <dw_dmac_setTransferType+0x236>
 	  case Dmac_transfer_row9 :
                if(errorCode == 1) {
    610009de:	fec42783          	lw	a5,-20(s0)
    610009e2:	0007871b          	sext.w	a4,a5
    610009e6:	4785                	li	a5,1
    610009e8:	06f71b63          	bne	a4,a5,61000a5e <dw_dmac_setTransferType+0x23a>
		   dw_dmac_setReload(Channelx,ch_num,sd_sel);
    610009ec:	fcc42703          	lw	a4,-52(s0)
    610009f0:	fd442783          	lw	a5,-44(s0)
    610009f4:	863a                	mv	a2,a4
    610009f6:	85be                	mv	a1,a5
    610009f8:	fd843503          	ld	a0,-40(s0)
    610009fc:	501000ef          	jal	ra,610016fc <dw_dmac_setReload>
		   dw_dmac_setLlpEnable(Channelx,ch_num,sd_sel);
    61000a00:	fcc42703          	lw	a4,-52(s0)
    61000a04:	fd442783          	lw	a5,-44(s0)
    61000a08:	863a                	mv	a2,a4
    61000a0a:	85be                	mv	a1,a5
    61000a0c:	fd843503          	ld	a0,-40(s0)
    61000a10:	673000ef          	jal	ra,61001882 <dw_dmac_setLlpEnable>
 }
                break;
    61000a14:	a0a9                	j	61000a5e <dw_dmac_setTransferType+0x23a>
 	  case Dmac_transfer_row10 :
                if(errorCode == 1) {
    61000a16:	fec42783          	lw	a5,-20(s0)
    61000a1a:	0007871b          	sext.w	a4,a5
    61000a1e:	4785                	li	a5,1
    61000a20:	04f71163          	bne	a4,a5,61000a62 <dw_dmac_setTransferType+0x23e>
		   dw_dmac_setLlpEnable(Channelx,ch_num,sd_sel);
    61000a24:	fcc42703          	lw	a4,-52(s0)
    61000a28:	fd442783          	lw	a5,-44(s0)
    61000a2c:	863a                	mv	a2,a4
    61000a2e:	85be                	mv	a1,a5
    61000a30:	fd843503          	ld	a0,-40(s0)
    61000a34:	64f000ef          	jal	ra,61001882 <dw_dmac_setLlpEnable>
                }
                break;
    61000a38:	a02d                	j	61000a62 <dw_dmac_setTransferType+0x23e>

        }
    }
    61000a3a:	0001                	nop
    61000a3c:	a025                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a3e:	0001                	nop
    61000a40:	a015                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a42:	0001                	nop
    61000a44:	a005                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a46:	0001                	nop
    61000a48:	a831                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a4a:	0001                	nop
    61000a4c:	a821                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a4e:	0001                	nop
    61000a50:	a811                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a52:	0001                	nop
    61000a54:	a801                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a56:	0001                	nop
    61000a58:	a031                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a5a:	0001                	nop
    61000a5c:	a021                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a5e:	0001                	nop
    61000a60:	a011                	j	61000a64 <dw_dmac_setTransferType+0x240>
                break;
    61000a62:	0001                	nop
    return errorCode;
    61000a64:	fec42783          	lw	a5,-20(s0)
}
    61000a68:	853e                	mv	a0,a5
    61000a6a:	70e2                	ld	ra,56(sp)
    61000a6c:	7442                	ld	s0,48(sp)
    61000a6e:	6121                	addi	sp,sp,64
    61000a70:	8082                	ret

0000000061000a72 <dw_dmac_setMemPeriphFlowCtl>:
//pass
int dw_dmac_setMemPeriphFlowCtl(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_transfer_flow  tt_fc)
{
    61000a72:	7179                	addi	sp,sp,-48
    61000a74:	f422                	sd	s0,40(sp)
    61000a76:	1800                	addi	s0,sp,48
    61000a78:	fca43c23          	sd	a0,-40(s0)
    61000a7c:	87ae                	mv	a5,a1
    61000a7e:	8732                	mv	a4,a2
    61000a80:	fcf42a23          	sw	a5,-44(s0)
    61000a84:	87ba                	mv	a5,a4
    61000a86:	fcf42823          	sw	a5,-48(s0)
    int x, errorCode=1;
    61000a8a:	4785                	li	a5,1
    61000a8c:	fef42423          	sw	a5,-24(s0)

     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
    if(errorCode == 1) {
    61000a90:	fe842783          	lw	a5,-24(s0)
    61000a94:	0007871b          	sext.w	a4,a5
    61000a98:	4785                	li	a5,1
    61000a9a:	0cf71963          	bne	a4,a5,61000b6c <dw_dmac_setMemPeriphFlowCtl+0xfa>

         //Check for hard-coded values
    	//仅支持dmac flow 控制
        for(x=0;x<num_channels;x++) {
    61000a9e:	fe042623          	sw	zero,-20(s0)
    61000aa2:	a0c1                	j	61000b62 <dw_dmac_setMemPeriphFlowCtl+0xf0>
        	if(Channelx ->CTL_L.TT_FC != tt_fc)
    61000aa4:	fd843783          	ld	a5,-40(s0)
    61000aa8:	4f9c                	lw	a5,24(a5)
    61000aaa:	0147d79b          	srliw	a5,a5,0x14
    61000aae:	8b9d                	andi	a5,a5,7
    61000ab0:	0ff7f793          	andi	a5,a5,255
    61000ab4:	0007871b          	sext.w	a4,a5
    61000ab8:	fd042783          	lw	a5,-48(s0)
    61000abc:	2781                	sext.w	a5,a5
    61000abe:	08e78c63          	beq	a5,a4,61000b56 <dw_dmac_setMemPeriphFlowCtl+0xe4>
        	{
            	switch(tt_fc)
    61000ac2:	fd042783          	lw	a5,-48(s0)
    61000ac6:	0007871b          	sext.w	a4,a5
    61000aca:	4789                	li	a5,2
    61000acc:	04f70b63          	beq	a4,a5,61000b22 <dw_dmac_setMemPeriphFlowCtl+0xb0>
    61000ad0:	fd042783          	lw	a5,-48(s0)
    61000ad4:	0007871b          	sext.w	a4,a5
    61000ad8:	4789                	li	a5,2
    61000ada:	06e7e163          	bltu	a5,a4,61000b3c <dw_dmac_setMemPeriphFlowCtl+0xca>
    61000ade:	fd042783          	lw	a5,-48(s0)
    61000ae2:	2781                	sext.w	a5,a5
    61000ae4:	cb89                	beqz	a5,61000af6 <dw_dmac_setMemPeriphFlowCtl+0x84>
    61000ae6:	fd042783          	lw	a5,-48(s0)
    61000aea:	0007871b          	sext.w	a4,a5
    61000aee:	4785                	li	a5,1
    61000af0:	00f70c63          	beq	a4,a5,61000b08 <dw_dmac_setMemPeriphFlowCtl+0x96>
    61000af4:	a0a1                	j	61000b3c <dw_dmac_setMemPeriphFlowCtl+0xca>
            	{
            	case 0:
            		Channelx ->CTL_L.TT_FC = MEM2MEM;
    61000af6:	fd843783          	ld	a5,-40(s0)
    61000afa:	4f94                	lw	a3,24(a5)
    61000afc:	ff900737          	lui	a4,0xff900
    61000b00:	177d                	addi	a4,a4,-1
    61000b02:	8f75                	and	a4,a4,a3
    61000b04:	cf98                	sw	a4,24(a5)
					break;
    61000b06:	a889                	j	61000b58 <dw_dmac_setMemPeriphFlowCtl+0xe6>
            	case 1:
            		Channelx ->CTL_L.TT_FC = MEM2PER;
    61000b08:	fd843783          	ld	a5,-40(s0)
    61000b0c:	4f94                	lw	a3,24(a5)
    61000b0e:	ff900737          	lui	a4,0xff900
    61000b12:	177d                	addi	a4,a4,-1
    61000b14:	8f75                	and	a4,a4,a3
    61000b16:	86ba                	mv	a3,a4
    61000b18:	00100737          	lui	a4,0x100
    61000b1c:	8f55                	or	a4,a4,a3
    61000b1e:	cf98                	sw	a4,24(a5)
            	    break;
    61000b20:	a825                	j	61000b58 <dw_dmac_setMemPeriphFlowCtl+0xe6>
            	case 2:
            		Channelx ->CTL_L.TT_FC = PER2MEM;
    61000b22:	fd843783          	ld	a5,-40(s0)
    61000b26:	4f94                	lw	a3,24(a5)
    61000b28:	ff900737          	lui	a4,0xff900
    61000b2c:	177d                	addi	a4,a4,-1
    61000b2e:	8f75                	and	a4,a4,a3
    61000b30:	86ba                	mv	a3,a4
    61000b32:	00200737          	lui	a4,0x200
    61000b36:	8f55                	or	a4,a4,a3
    61000b38:	cf98                	sw	a4,24(a5)
                    break;
    61000b3a:	a839                	j	61000b58 <dw_dmac_setMemPeriphFlowCtl+0xe6>
            	default:
            		Channelx ->CTL_L.TT_FC = PER2PER;
    61000b3c:	fd843783          	ld	a5,-40(s0)
    61000b40:	4f94                	lw	a3,24(a5)
    61000b42:	ff900737          	lui	a4,0xff900
    61000b46:	177d                	addi	a4,a4,-1
    61000b48:	8f75                	and	a4,a4,a3
    61000b4a:	86ba                	mv	a3,a4
    61000b4c:	00300737          	lui	a4,0x300
    61000b50:	8f55                	or	a4,a4,a3
    61000b52:	cf98                	sw	a4,24(a5)
                    break;
    61000b54:	a011                	j	61000b58 <dw_dmac_setMemPeriphFlowCtl+0xe6>
            	}
        	}
    61000b56:	0001                	nop
        for(x=0;x<num_channels;x++) {
    61000b58:	fec42783          	lw	a5,-20(s0)
    61000b5c:	2785                	addiw	a5,a5,1
    61000b5e:	fef42623          	sw	a5,-20(s0)
    61000b62:	fec42783          	lw	a5,-20(s0)
    61000b66:	2781                	sext.w	a5,a5
    61000b68:	f2f05ee3          	blez	a5,61000aa4 <dw_dmac_setMemPeriphFlowCtl+0x32>
        }
    }
    return errorCode;
    61000b6c:	fe842783          	lw	a5,-24(s0)
}
    61000b70:	853e                	mv	a0,a5
    61000b72:	7422                	ld	s0,40(sp)
    61000b74:	6145                	addi	sp,sp,48
    61000b76:	8082                	ret

0000000061000b78 <dw_dmac_setTransWidth>:
int dw_dmac_setTransWidth(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel,
        enum   dw_dmac_transfer_width xf_width)
{
    61000b78:	7139                	addi	sp,sp,-64
    61000b7a:	fc22                	sd	s0,56(sp)
    61000b7c:	0080                	addi	s0,sp,64
    61000b7e:	fca43c23          	sd	a0,-40(s0)
    61000b82:	87ae                	mv	a5,a1
    61000b84:	8736                	mv	a4,a3
    61000b86:	fcf42a23          	sw	a5,-44(s0)
    61000b8a:	87b2                	mv	a5,a2
    61000b8c:	fcf42823          	sw	a5,-48(s0)
    61000b90:	87ba                	mv	a5,a4
    61000b92:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    61000b96:	4785                	li	a5,1
    61000b98:	fef42423          	sw	a5,-24(s0)
    uint32_t reg;

     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);

    if(errorCode == 1) {
    61000b9c:	fe842783          	lw	a5,-24(s0)
    61000ba0:	0007871b          	sext.w	a4,a5
    61000ba4:	4785                	li	a5,1
    61000ba6:	20f71263          	bne	a4,a5,61000daa <dw_dmac_setTransWidth+0x232>
        for(x=0;x<num_channels;x++) {
    61000baa:	fe042623          	sw	zero,-20(s0)
    61000bae:	aacd                	j	61000da0 <dw_dmac_setTransWidth+0x228>
                write_en = FALSE;
    61000bb0:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    61000bb4:	fd042783          	lw	a5,-48(s0)
    61000bb8:	2781                	sext.w	a5,a5
    61000bba:	cb81                	beqz	a5,61000bca <dw_dmac_setTransWidth+0x52>
    61000bbc:	fd042783          	lw	a5,-48(s0)
    61000bc0:	0007871b          	sext.w	a4,a5
    61000bc4:	4789                	li	a5,2
    61000bc6:	0ef71063          	bne	a4,a5,61000ca6 <dw_dmac_setTransWidth+0x12e>
                    if(Channelx->CTL_L.SRC_TR_WIDTH != xf_width) {
    61000bca:	fd843783          	ld	a5,-40(s0)
    61000bce:	4f9c                	lw	a5,24(a5)
    61000bd0:	0047d79b          	srliw	a5,a5,0x4
    61000bd4:	8b9d                	andi	a5,a5,7
    61000bd6:	0ff7f793          	andi	a5,a5,255
    61000bda:	0007871b          	sext.w	a4,a5
    61000bde:	fcc42783          	lw	a5,-52(s0)
    61000be2:	2781                	sext.w	a5,a5
    61000be4:	0ce78163          	beq	a5,a4,61000ca6 <dw_dmac_setTransWidth+0x12e>
    61000be8:	fcc42783          	lw	a5,-52(s0)
    61000bec:	0007871b          	sext.w	a4,a5
    61000bf0:	4791                	li	a5,4
    61000bf2:	08e7ee63          	bltu	a5,a4,61000c8e <dw_dmac_setTransWidth+0x116>
    61000bf6:	fcc46783          	lwu	a5,-52(s0)
    61000bfa:	00279713          	slli	a4,a5,0x2
    61000bfe:	00003797          	auipc	a5,0x3
    61000c02:	76278793          	addi	a5,a5,1890 # 61004360 <_read_r+0x56>
    61000c06:	97ba                	add	a5,a5,a4
    61000c08:	439c                	lw	a5,0(a5)
    61000c0a:	0007871b          	sext.w	a4,a5
    61000c0e:	00003797          	auipc	a5,0x3
    61000c12:	75278793          	addi	a5,a5,1874 # 61004360 <_read_r+0x56>
    61000c16:	97ba                	add	a5,a5,a4
    61000c18:	8782                	jr	a5
                    	switch(xf_width)
                    	{
                    	    case 0:
                    	    	Channelx ->CTL_L.SRC_TR_WIDTH = WIDTH_8;//DMAC_CTL_L_SRC_TR_WIDTH;
    61000c1a:	fd843783          	ld	a5,-40(s0)
    61000c1e:	4f98                	lw	a4,24(a5)
    61000c20:	f8f77713          	andi	a4,a4,-113
    61000c24:	cf98                	sw	a4,24(a5)
                    	           write_en = TRUE;
    61000c26:	4785                	li	a5,1
    61000c28:	fef42223          	sw	a5,-28(s0)
                    	    break;
    61000c2c:	a8b5                	j	61000ca8 <dw_dmac_setTransWidth+0x130>
                    	    case 1:
                    	    	Channelx ->CTL_L.SRC_TR_WIDTH = WIDTH_16 ;//DMAC_CTL_L_SRC_TR_WIDTH;
    61000c2e:	fd843783          	ld	a5,-40(s0)
    61000c32:	4f98                	lw	a4,24(a5)
    61000c34:	f8f77713          	andi	a4,a4,-113
    61000c38:	01076713          	ori	a4,a4,16
    61000c3c:	cf98                	sw	a4,24(a5)
                    	           write_en = TRUE;
    61000c3e:	4785                	li	a5,1
    61000c40:	fef42223          	sw	a5,-28(s0)
                    	    break;
    61000c44:	a095                	j	61000ca8 <dw_dmac_setTransWidth+0x130>
                    	    case 2:
                    	    	Channelx ->CTL_L.SRC_TR_WIDTH = WIDTH_32 ;//DMAC_CTL_L_SRC_TR_WIDTH;
    61000c46:	fd843783          	ld	a5,-40(s0)
    61000c4a:	4f98                	lw	a4,24(a5)
    61000c4c:	f8f77713          	andi	a4,a4,-113
    61000c50:	02076713          	ori	a4,a4,32
    61000c54:	cf98                	sw	a4,24(a5)
                    	           write_en = TRUE;
    61000c56:	4785                	li	a5,1
    61000c58:	fef42223          	sw	a5,-28(s0)
                    	    break;
    61000c5c:	a0b1                	j	61000ca8 <dw_dmac_setTransWidth+0x130>
                    	    case 3:
                    	    	Channelx ->CTL_L.SRC_TR_WIDTH =WIDTH_64 ;//DMAC_CTL_L_SRC_TR_WIDTH;
    61000c5e:	fd843783          	ld	a5,-40(s0)
    61000c62:	4f98                	lw	a4,24(a5)
    61000c64:	f8f77713          	andi	a4,a4,-113
    61000c68:	03076713          	ori	a4,a4,48
    61000c6c:	cf98                	sw	a4,24(a5)
                    	           write_en = TRUE;
    61000c6e:	4785                	li	a5,1
    61000c70:	fef42223          	sw	a5,-28(s0)
                    	    break;
    61000c74:	a815                	j	61000ca8 <dw_dmac_setTransWidth+0x130>
                    	    case 4:
                    	    	Channelx ->CTL_L.SRC_TR_WIDTH = WIDTH_128;//DMAC_CTL_L_SRC_TR_WIDTH;
    61000c76:	fd843783          	ld	a5,-40(s0)
    61000c7a:	4f98                	lw	a4,24(a5)
    61000c7c:	f8f77713          	andi	a4,a4,-113
    61000c80:	04076713          	ori	a4,a4,64
    61000c84:	cf98                	sw	a4,24(a5)
                    	           write_en = TRUE;
    61000c86:	4785                	li	a5,1
    61000c88:	fef42223          	sw	a5,-28(s0)
                    	    break;
    61000c8c:	a831                	j	61000ca8 <dw_dmac_setTransWidth+0x130>
                    	    default:
                    	    	Channelx ->CTL_L.SRC_TR_WIDTH = WIDTH_256 ;//DMAC_CTL_L_SRC_TR_WIDTH;
    61000c8e:	fd843783          	ld	a5,-40(s0)
    61000c92:	4f98                	lw	a4,24(a5)
    61000c94:	f8f77713          	andi	a4,a4,-113
    61000c98:	05076713          	ori	a4,a4,80
    61000c9c:	cf98                	sw	a4,24(a5)
                    	     	write_en = TRUE;
    61000c9e:	4785                	li	a5,1
    61000ca0:	fef42223          	sw	a5,-28(s0)
                    	    break;
    61000ca4:	a011                	j	61000ca8 <dw_dmac_setTransWidth+0x130>
                    	                    	}
                    }
    61000ca6:	0001                	nop
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    61000ca8:	fd042783          	lw	a5,-48(s0)
    61000cac:	0007871b          	sext.w	a4,a5
    61000cb0:	4785                	li	a5,1
    61000cb2:	00f70963          	beq	a4,a5,61000cc4 <dw_dmac_setTransWidth+0x14c>
    61000cb6:	fd042783          	lw	a5,-48(s0)
    61000cba:	0007871b          	sext.w	a4,a5
    61000cbe:	4789                	li	a5,2
    61000cc0:	0cf71a63          	bne	a4,a5,61000d94 <dw_dmac_setTransWidth+0x21c>
                    if(Channelx->CTL_L.DST_TR_WIDTH !=xf_width) {
    61000cc4:	fd843783          	ld	a5,-40(s0)
    61000cc8:	4f9c                	lw	a5,24(a5)
    61000cca:	0017d79b          	srliw	a5,a5,0x1
    61000cce:	8b9d                	andi	a5,a5,7
    61000cd0:	0ff7f793          	andi	a5,a5,255
    61000cd4:	0007871b          	sext.w	a4,a5
    61000cd8:	fcc42783          	lw	a5,-52(s0)
    61000cdc:	2781                	sext.w	a5,a5
    61000cde:	0ae78b63          	beq	a5,a4,61000d94 <dw_dmac_setTransWidth+0x21c>
    61000ce2:	fcc42783          	lw	a5,-52(s0)
    61000ce6:	0007871b          	sext.w	a4,a5
    61000cea:	4791                	li	a5,4
    61000cec:	08e7e963          	bltu	a5,a4,61000d7e <dw_dmac_setTransWidth+0x206>
    61000cf0:	fcc46783          	lwu	a5,-52(s0)
    61000cf4:	00279713          	slli	a4,a5,0x2
    61000cf8:	00003797          	auipc	a5,0x3
    61000cfc:	67c78793          	addi	a5,a5,1660 # 61004374 <_read_r+0x6a>
    61000d00:	97ba                	add	a5,a5,a4
    61000d02:	439c                	lw	a5,0(a5)
    61000d04:	0007871b          	sext.w	a4,a5
    61000d08:	00003797          	auipc	a5,0x3
    61000d0c:	66c78793          	addi	a5,a5,1644 # 61004374 <_read_r+0x6a>
    61000d10:	97ba                	add	a5,a5,a4
    61000d12:	8782                	jr	a5
                    	switch(xf_width)
                    	{
                    	case 0:
                    		Channelx ->CTL_L.DST_TR_WIDTH = WIDTH_8 ;//DMAC_CTL_L_DST_TR_WIDTH;
    61000d14:	fd843783          	ld	a5,-40(s0)
    61000d18:	4f98                	lw	a4,24(a5)
    61000d1a:	9b45                	andi	a4,a4,-15
    61000d1c:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61000d1e:	4785                	li	a5,1
    61000d20:	fef42223          	sw	a5,-28(s0)
                        break;
    61000d24:	a88d                	j	61000d96 <dw_dmac_setTransWidth+0x21e>
                    	case 1:
                    		Channelx ->CTL_L.DST_TR_WIDTH = WIDTH_16 ;//DMAC_CTL_L_DST_TR_WIDTH;
    61000d26:	fd843783          	ld	a5,-40(s0)
    61000d2a:	4f98                	lw	a4,24(a5)
    61000d2c:	9b45                	andi	a4,a4,-15
    61000d2e:	00276713          	ori	a4,a4,2
    61000d32:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61000d34:	4785                	li	a5,1
    61000d36:	fef42223          	sw	a5,-28(s0)
                        break;
    61000d3a:	a8b1                	j	61000d96 <dw_dmac_setTransWidth+0x21e>
                    	case 2:
                    		Channelx ->CTL_L.DST_TR_WIDTH = WIDTH_32 ;//DMAC_CTL_L_DST_TR_WIDTH;
    61000d3c:	fd843783          	ld	a5,-40(s0)
    61000d40:	4f98                	lw	a4,24(a5)
    61000d42:	9b45                	andi	a4,a4,-15
    61000d44:	00476713          	ori	a4,a4,4
    61000d48:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61000d4a:	4785                	li	a5,1
    61000d4c:	fef42223          	sw	a5,-28(s0)
                        break;
    61000d50:	a099                	j	61000d96 <dw_dmac_setTransWidth+0x21e>
                    	case 3:
                    		Channelx ->CTL_L.DST_TR_WIDTH = WIDTH_64 ;//DMAC_CTL_L_DST_TR_WIDTH;
    61000d52:	fd843783          	ld	a5,-40(s0)
    61000d56:	4f98                	lw	a4,24(a5)
    61000d58:	9b45                	andi	a4,a4,-15
    61000d5a:	00676713          	ori	a4,a4,6
    61000d5e:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61000d60:	4785                	li	a5,1
    61000d62:	fef42223          	sw	a5,-28(s0)
                        break;
    61000d66:	a805                	j	61000d96 <dw_dmac_setTransWidth+0x21e>
                    	case 4:
                    		Channelx ->CTL_L.DST_TR_WIDTH = WIDTH_128 ;//DMAC_CTL_L_DST_TR_WIDTH;
    61000d68:	fd843783          	ld	a5,-40(s0)
    61000d6c:	4f98                	lw	a4,24(a5)
    61000d6e:	9b45                	andi	a4,a4,-15
    61000d70:	00876713          	ori	a4,a4,8
    61000d74:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61000d76:	4785                	li	a5,1
    61000d78:	fef42223          	sw	a5,-28(s0)
                        break;
    61000d7c:	a829                	j	61000d96 <dw_dmac_setTransWidth+0x21e>
                    	default:
                    		Channelx ->CTL_L.DST_TR_WIDTH = WIDTH_256 ;//DMAC_CTL_L_DST_TR_WIDTH;
    61000d7e:	fd843783          	ld	a5,-40(s0)
    61000d82:	4f98                	lw	a4,24(a5)
    61000d84:	9b45                	andi	a4,a4,-15
    61000d86:	00a76713          	ori	a4,a4,10
    61000d8a:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61000d8c:	4785                	li	a5,1
    61000d8e:	fef42223          	sw	a5,-28(s0)
                        break;
    61000d92:	a011                	j	61000d96 <dw_dmac_setTransWidth+0x21e>
                    	}
                    }
    61000d94:	0001                	nop
        for(x=0;x<num_channels;x++) {
    61000d96:	fec42783          	lw	a5,-20(s0)
    61000d9a:	2785                	addiw	a5,a5,1
    61000d9c:	fef42623          	sw	a5,-20(s0)
    61000da0:	fec42783          	lw	a5,-20(s0)
    61000da4:	2781                	sext.w	a5,a5
    61000da6:	e0f055e3          	blez	a5,61000bb0 <dw_dmac_setTransWidth+0x38>
                }
        }
    }
    return errorCode;
    61000daa:	fe842783          	lw	a5,-24(s0)
}
    61000dae:	853e                	mv	a0,a5
    61000db0:	7462                	ld	s0,56(sp)
    61000db2:	6121                	addi	sp,sp,64
    61000db4:	8082                	ret

0000000061000db6 <dw_dmac_setBlockTransSize>:
//pass
int dw_dmac_setBlockTransSize(
		DMA_Channel_TypeDef *Channelx,
        enum     dw_dmac_channel_number ch_num,
        uint16_t block_size)
{
    61000db6:	7179                	addi	sp,sp,-48
    61000db8:	f422                	sd	s0,40(sp)
    61000dba:	1800                	addi	s0,sp,48
    61000dbc:	fca43c23          	sd	a0,-40(s0)
    61000dc0:	87ae                	mv	a5,a1
    61000dc2:	8732                	mv	a4,a2
    61000dc4:	fcf42a23          	sw	a5,-44(s0)
    61000dc8:	87ba                	mv	a5,a4
    61000dca:	fcf41923          	sh	a5,-46(s0)
    int errorCode = 1 ;
    61000dce:	4785                	li	a5,1
    61000dd0:	fef42423          	sw	a5,-24(s0)
    int x;

     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
    if(errorCode == 1) {
    61000dd4:	fe842783          	lw	a5,-24(s0)
    61000dd8:	0007871b          	sext.w	a4,a5
    61000ddc:	4785                	li	a5,1
    61000dde:	06f71563          	bne	a4,a5,61000e48 <dw_dmac_setBlockTransSize+0x92>
        for(x=0;x<num_channels;x++) {
    61000de2:	fe042623          	sw	zero,-20(s0)
    61000de6:	a8a1                	j	61000e3e <dw_dmac_setBlockTransSize+0x88>

                if(Channelx -> CTL_H.BLOCK_TS != block_size) {
    61000de8:	fd843783          	ld	a5,-40(s0)
    61000dec:	4fdc                	lw	a5,28(a5)
    61000dee:	873e                	mv	a4,a5
    61000df0:	6785                	lui	a5,0x1
    61000df2:	17fd                	addi	a5,a5,-1
    61000df4:	8ff9                	and	a5,a5,a4
    61000df6:	17c2                	slli	a5,a5,0x30
    61000df8:	93c1                	srli	a5,a5,0x30
    61000dfa:	0007871b          	sext.w	a4,a5
    61000dfe:	fd245783          	lhu	a5,-46(s0)
    61000e02:	2781                	sext.w	a5,a5
    61000e04:	02f70863          	beq	a4,a5,61000e34 <dw_dmac_setBlockTransSize+0x7e>

                		  Channelx -> CTL_H.BLOCK_TS = (uint32_t) block_size;
    61000e08:	fd245703          	lhu	a4,-46(s0)
    61000e0c:	6785                	lui	a5,0x1
    61000e0e:	17fd                	addi	a5,a5,-1
    61000e10:	8ff9                	and	a5,a5,a4
    61000e12:	03079713          	slli	a4,a5,0x30
    61000e16:	9341                	srli	a4,a4,0x30
    61000e18:	fd843783          	ld	a5,-40(s0)
    61000e1c:	86ba                	mv	a3,a4
    61000e1e:	6705                	lui	a4,0x1
    61000e20:	177d                	addi	a4,a4,-1
    61000e22:	00e6f633          	and	a2,a3,a4
    61000e26:	4fd4                	lw	a3,28(a5)
    61000e28:	777d                	lui	a4,0xfffff
    61000e2a:	8f75                	and	a4,a4,a3
    61000e2c:	86ba                	mv	a3,a4
    61000e2e:	8732                	mv	a4,a2
    61000e30:	8f55                	or	a4,a4,a3
    61000e32:	cfd8                	sw	a4,28(a5)
        for(x=0;x<num_channels;x++) {
    61000e34:	fec42783          	lw	a5,-20(s0)
    61000e38:	2785                	addiw	a5,a5,1
    61000e3a:	fef42623          	sw	a5,-20(s0)
    61000e3e:	fec42783          	lw	a5,-20(s0)
    61000e42:	2781                	sext.w	a5,a5
    61000e44:	faf052e3          	blez	a5,61000de8 <dw_dmac_setBlockTransSize+0x32>
            }
        }
    }
    return errorCode;
    61000e48:	fe842783          	lw	a5,-24(s0)
}
    61000e4c:	853e                	mv	a0,a5
    61000e4e:	7422                	ld	s0,40(sp)
    61000e50:	6145                	addi	sp,sp,48
    61000e52:	8082                	ret

0000000061000e54 <dw_dmac_setBurstTransLength>:
int dw_dmac_setBurstTransLength(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel,
        enum   dw_dmac_burst_trans_length xf_length)
{
    61000e54:	7139                	addi	sp,sp,-64
    61000e56:	fc22                	sd	s0,56(sp)
    61000e58:	0080                	addi	s0,sp,64
    61000e5a:	fca43c23          	sd	a0,-40(s0)
    61000e5e:	87ae                	mv	a5,a1
    61000e60:	8736                	mv	a4,a3
    61000e62:	fcf42a23          	sw	a5,-44(s0)
    61000e66:	87b2                	mv	a5,a2
    61000e68:	fcf42823          	sw	a5,-48(s0)
    61000e6c:	87ba                	mv	a5,a4
    61000e6e:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    61000e72:	4785                	li	a5,1
    61000e74:	fef42423          	sw	a5,-24(s0)
    int x;
    BOOL write_en;

    //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
    if(errorCode == 1) {
    61000e78:	fe842783          	lw	a5,-24(s0)
    61000e7c:	0007871b          	sext.w	a4,a5
    61000e80:	4785                	li	a5,1
    61000e82:	26f71163          	bne	a4,a5,610010e4 <dw_dmac_setBurstTransLength+0x290>
        for(x=0;x<num_channels;x++) {
    61000e86:	fe042623          	sw	zero,-20(s0)
    61000e8a:	ac81                	j	610010da <dw_dmac_setBurstTransLength+0x286>
                write_en = FALSE;
    61000e8c:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    61000e90:	fd042783          	lw	a5,-48(s0)
    61000e94:	2781                	sext.w	a5,a5
    61000e96:	cb81                	beqz	a5,61000ea6 <dw_dmac_setBurstTransLength+0x52>
    61000e98:	fd042783          	lw	a5,-48(s0)
    61000e9c:	0007871b          	sext.w	a4,a5
    61000ea0:	4789                	li	a5,2
    61000ea2:	0ef71e63          	bne	a4,a5,61000f9e <dw_dmac_setBurstTransLength+0x14a>
                    if(Channelx ->CTL_L.SRC_MSIZE != xf_length) {
    61000ea6:	fd843783          	ld	a5,-40(s0)
    61000eaa:	4f9c                	lw	a5,24(a5)
    61000eac:	00e7d79b          	srliw	a5,a5,0xe
    61000eb0:	8b9d                	andi	a5,a5,7
    61000eb2:	0ff7f793          	andi	a5,a5,255
    61000eb6:	0007871b          	sext.w	a4,a5
    61000eba:	fcc42783          	lw	a5,-52(s0)
    61000ebe:	2781                	sext.w	a5,a5
    61000ec0:	0ce78f63          	beq	a5,a4,61000f9e <dw_dmac_setBurstTransLength+0x14a>
    61000ec4:	fcc42783          	lw	a5,-52(s0)
    61000ec8:	0007871b          	sext.w	a4,a5
    61000ecc:	4799                	li	a5,6
    61000ece:	0ae7ee63          	bltu	a5,a4,61000f8a <dw_dmac_setBurstTransLength+0x136>
    61000ed2:	fcc46783          	lwu	a5,-52(s0)
    61000ed6:	00279713          	slli	a4,a5,0x2
    61000eda:	00003797          	auipc	a5,0x3
    61000ede:	4ae78793          	addi	a5,a5,1198 # 61004388 <_read_r+0x7e>
    61000ee2:	97ba                	add	a5,a5,a4
    61000ee4:	439c                	lw	a5,0(a5)
    61000ee6:	0007871b          	sext.w	a4,a5
    61000eea:	00003797          	auipc	a5,0x3
    61000eee:	49e78793          	addi	a5,a5,1182 # 61004388 <_read_r+0x7e>
    61000ef2:	97ba                	add	a5,a5,a4
    61000ef4:	8782                	jr	a5
                    	switch(xf_length)
                    	{
                    	case 0:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_1;
    61000ef6:	fd843783          	ld	a5,-40(s0)
    61000efa:	4f94                	lw	a3,24(a5)
    61000efc:	7711                	lui	a4,0xfffe4
    61000efe:	177d                	addi	a4,a4,-1
    61000f00:	8f75                	and	a4,a4,a3
    61000f02:	cf98                	sw	a4,24(a5)
                    	break;
    61000f04:	a851                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	case 1:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_4;
    61000f06:	fd843783          	ld	a5,-40(s0)
    61000f0a:	4f94                	lw	a3,24(a5)
    61000f0c:	7711                	lui	a4,0xfffe4
    61000f0e:	177d                	addi	a4,a4,-1
    61000f10:	8f75                	and	a4,a4,a3
    61000f12:	86ba                	mv	a3,a4
    61000f14:	6711                	lui	a4,0x4
    61000f16:	8f55                	or	a4,a4,a3
    61000f18:	cf98                	sw	a4,24(a5)
                    	break;
    61000f1a:	a8bd                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	case 2:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_8;
    61000f1c:	fd843783          	ld	a5,-40(s0)
    61000f20:	4f94                	lw	a3,24(a5)
    61000f22:	7711                	lui	a4,0xfffe4
    61000f24:	177d                	addi	a4,a4,-1
    61000f26:	8f75                	and	a4,a4,a3
    61000f28:	86ba                	mv	a3,a4
    61000f2a:	6721                	lui	a4,0x8
    61000f2c:	8f55                	or	a4,a4,a3
    61000f2e:	cf98                	sw	a4,24(a5)
                    	break;
    61000f30:	a0a5                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	case 3:
                    		Channelx ->CTL_L.SRC_MSIZE= DW_DMA_MSIZE_16;
    61000f32:	fd843783          	ld	a5,-40(s0)
    61000f36:	4f94                	lw	a3,24(a5)
    61000f38:	7711                	lui	a4,0xfffe4
    61000f3a:	177d                	addi	a4,a4,-1
    61000f3c:	8f75                	and	a4,a4,a3
    61000f3e:	86ba                	mv	a3,a4
    61000f40:	6731                	lui	a4,0xc
    61000f42:	8f55                	or	a4,a4,a3
    61000f44:	cf98                	sw	a4,24(a5)
                    	break;
    61000f46:	a889                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	case 4:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_32;
    61000f48:	fd843783          	ld	a5,-40(s0)
    61000f4c:	4f94                	lw	a3,24(a5)
    61000f4e:	7711                	lui	a4,0xfffe4
    61000f50:	177d                	addi	a4,a4,-1
    61000f52:	8f75                	and	a4,a4,a3
    61000f54:	86ba                	mv	a3,a4
    61000f56:	6741                	lui	a4,0x10
    61000f58:	8f55                	or	a4,a4,a3
    61000f5a:	cf98                	sw	a4,24(a5)
                    	break;
    61000f5c:	a835                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	case 5:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_64;
    61000f5e:	fd843783          	ld	a5,-40(s0)
    61000f62:	4f94                	lw	a3,24(a5)
    61000f64:	7711                	lui	a4,0xfffe4
    61000f66:	177d                	addi	a4,a4,-1
    61000f68:	8f75                	and	a4,a4,a3
    61000f6a:	86ba                	mv	a3,a4
    61000f6c:	6751                	lui	a4,0x14
    61000f6e:	8f55                	or	a4,a4,a3
    61000f70:	cf98                	sw	a4,24(a5)
                    	break;
    61000f72:	a01d                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	case 6:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_128;
    61000f74:	fd843783          	ld	a5,-40(s0)
    61000f78:	4f94                	lw	a3,24(a5)
    61000f7a:	7711                	lui	a4,0xfffe4
    61000f7c:	177d                	addi	a4,a4,-1
    61000f7e:	8f75                	and	a4,a4,a3
    61000f80:	86ba                	mv	a3,a4
    61000f82:	6761                	lui	a4,0x18
    61000f84:	8f55                	or	a4,a4,a3
    61000f86:	cf98                	sw	a4,24(a5)
                    	break;
    61000f88:	a801                	j	61000f98 <dw_dmac_setBurstTransLength+0x144>
                    	default:
                    		Channelx ->CTL_L.SRC_MSIZE = DW_DMA_MSIZE_256;
    61000f8a:	fd843783          	ld	a5,-40(s0)
    61000f8e:	4f94                	lw	a3,24(a5)
    61000f90:	6771                	lui	a4,0x1c
    61000f92:	8f55                	or	a4,a4,a3
    61000f94:	cf98                	sw	a4,24(a5)
                    	break;
    61000f96:	0001                	nop
                    	}
                        write_en = TRUE;
    61000f98:	4785                	li	a5,1
    61000f9a:	fef42223          	sw	a5,-28(s0)
                    }
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    61000f9e:	fd042783          	lw	a5,-48(s0)
    61000fa2:	0007871b          	sext.w	a4,a5
    61000fa6:	4785                	li	a5,1
    61000fa8:	00f70963          	beq	a4,a5,61000fba <dw_dmac_setBurstTransLength+0x166>
    61000fac:	fd042783          	lw	a5,-48(s0)
    61000fb0:	0007871b          	sext.w	a4,a5
    61000fb4:	4789                	li	a5,2
    61000fb6:	10f71d63          	bne	a4,a5,610010d0 <dw_dmac_setBurstTransLength+0x27c>
                    if(Channelx ->CTL_L.DEST_MSIZE  !=xf_length)
    61000fba:	fd843783          	ld	a5,-40(s0)
    61000fbe:	4f9c                	lw	a5,24(a5)
    61000fc0:	00b7d79b          	srliw	a5,a5,0xb
    61000fc4:	8b9d                	andi	a5,a5,7
    61000fc6:	0ff7f793          	andi	a5,a5,255
    61000fca:	0007871b          	sext.w	a4,a5
    61000fce:	fcc42783          	lw	a5,-52(s0)
    61000fd2:	2781                	sext.w	a5,a5
    61000fd4:	0ee78e63          	beq	a5,a4,610010d0 <dw_dmac_setBurstTransLength+0x27c>
    61000fd8:	fcc42783          	lw	a5,-52(s0)
    61000fdc:	0007871b          	sext.w	a4,a5
    61000fe0:	4799                	li	a5,6
    61000fe2:	0ce7eb63          	bltu	a5,a4,610010b8 <dw_dmac_setBurstTransLength+0x264>
    61000fe6:	fcc46783          	lwu	a5,-52(s0)
    61000fea:	00279713          	slli	a4,a5,0x2
    61000fee:	00003797          	auipc	a5,0x3
    61000ff2:	3b678793          	addi	a5,a5,950 # 610043a4 <_read_r+0x9a>
    61000ff6:	97ba                	add	a5,a5,a4
    61000ff8:	439c                	lw	a5,0(a5)
    61000ffa:	0007871b          	sext.w	a4,a5
    61000ffe:	00003797          	auipc	a5,0x3
    61001002:	3a678793          	addi	a5,a5,934 # 610043a4 <_read_r+0x9a>
    61001006:	97ba                	add	a5,a5,a4
    61001008:	8782                	jr	a5
                    {
                    	switch(xf_length)
                    	      {
                    	       case 0:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_1;
    6100100a:	fd843783          	ld	a5,-40(s0)
    6100100e:	4f94                	lw	a3,24(a5)
    61001010:	7771                	lui	a4,0xffffc
    61001012:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    61001016:	8f75                	and	a4,a4,a3
    61001018:	cf98                	sw	a4,24(a5)
                    	       break;
    6100101a:	a845                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       case 1:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_4;
    6100101c:	fd843783          	ld	a5,-40(s0)
    61001020:	4f94                	lw	a3,24(a5)
    61001022:	7771                	lui	a4,0xffffc
    61001024:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    61001028:	8f75                	and	a4,a4,a3
    6100102a:	86ba                	mv	a3,a4
    6100102c:	6705                	lui	a4,0x1
    6100102e:	80070713          	addi	a4,a4,-2048 # 800 <__stack_size>
    61001032:	8f55                	or	a4,a4,a3
    61001034:	cf98                	sw	a4,24(a5)
                    	       break;
    61001036:	a851                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       case 2:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_8;
    61001038:	fd843783          	ld	a5,-40(s0)
    6100103c:	4f94                	lw	a3,24(a5)
    6100103e:	7771                	lui	a4,0xffffc
    61001040:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    61001044:	8f75                	and	a4,a4,a3
    61001046:	86ba                	mv	a3,a4
    61001048:	6705                	lui	a4,0x1
    6100104a:	8f55                	or	a4,a4,a3
    6100104c:	cf98                	sw	a4,24(a5)
                    	       break;
    6100104e:	a8b5                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       case 3:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_16;
    61001050:	fd843783          	ld	a5,-40(s0)
    61001054:	4f94                	lw	a3,24(a5)
    61001056:	7771                	lui	a4,0xffffc
    61001058:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    6100105c:	8f75                	and	a4,a4,a3
    6100105e:	86ba                	mv	a3,a4
    61001060:	6709                	lui	a4,0x2
    61001062:	80070713          	addi	a4,a4,-2048 # 1800 <__stack_size+0x1000>
    61001066:	8f55                	or	a4,a4,a3
    61001068:	cf98                	sw	a4,24(a5)
                    	       break;
    6100106a:	a085                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       case 4:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_32;
    6100106c:	fd843783          	ld	a5,-40(s0)
    61001070:	4f94                	lw	a3,24(a5)
    61001072:	7771                	lui	a4,0xffffc
    61001074:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    61001078:	8f75                	and	a4,a4,a3
    6100107a:	86ba                	mv	a3,a4
    6100107c:	6709                	lui	a4,0x2
    6100107e:	8f55                	or	a4,a4,a3
    61001080:	cf98                	sw	a4,24(a5)
                    	       break;
    61001082:	a0a1                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       case 5:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_64;
    61001084:	fd843783          	ld	a5,-40(s0)
    61001088:	4f94                	lw	a3,24(a5)
    6100108a:	7771                	lui	a4,0xffffc
    6100108c:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    61001090:	8f75                	and	a4,a4,a3
    61001092:	86ba                	mv	a3,a4
    61001094:	670d                	lui	a4,0x3
    61001096:	80070713          	addi	a4,a4,-2048 # 2800 <__stack_size+0x2000>
    6100109a:	8f55                	or	a4,a4,a3
    6100109c:	cf98                	sw	a4,24(a5)
                    	       break;
    6100109e:	a035                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       case 6:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_128;
    610010a0:	fd843783          	ld	a5,-40(s0)
    610010a4:	4f94                	lw	a3,24(a5)
    610010a6:	7771                	lui	a4,0xffffc
    610010a8:	7ff70713          	addi	a4,a4,2047 # ffffffffffffc7ff <_sp+0xffffffff9efdc7ff>
    610010ac:	8f75                	and	a4,a4,a3
    610010ae:	86ba                	mv	a3,a4
    610010b0:	670d                	lui	a4,0x3
    610010b2:	8f55                	or	a4,a4,a3
    610010b4:	cf98                	sw	a4,24(a5)
                    	       break;
    610010b6:	a811                	j	610010ca <dw_dmac_setBurstTransLength+0x276>
                    	       default:
                    	    	   Channelx ->CTL_L.DEST_MSIZE = DW_DMA_MSIZE_256;
    610010b8:	fd843783          	ld	a5,-40(s0)
    610010bc:	4f94                	lw	a3,24(a5)
    610010be:	6711                	lui	a4,0x4
    610010c0:	80070713          	addi	a4,a4,-2048 # 3800 <__stack_size+0x3000>
    610010c4:	8f55                	or	a4,a4,a3
    610010c6:	cf98                	sw	a4,24(a5)
                    	       break;
    610010c8:	0001                	nop
                    	       }
                        write_en = TRUE;
    610010ca:	4785                	li	a5,1
    610010cc:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    610010d0:	fec42783          	lw	a5,-20(s0)
    610010d4:	2785                	addiw	a5,a5,1
    610010d6:	fef42623          	sw	a5,-20(s0)
    610010da:	fec42783          	lw	a5,-20(s0)
    610010de:	2781                	sext.w	a5,a5
    610010e0:	daf056e3          	blez	a5,61000e8c <dw_dmac_setBurstTransLength+0x38>
                    }
                }
        }
    }
    return errorCode;
    610010e4:	fe842783          	lw	a5,-24(s0)
}
    610010e8:	853e                	mv	a0,a5
    610010ea:	7462                	ld	s0,56(sp)
    610010ec:	6121                	addi	sp,sp,64
    610010ee:	8082                	ret

00000000610010f0 <dw_dmac_setMstSelect>:
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel,
		enum   dw_dmac_SRCmaster_number  SRCmst_num,
		enum   dw_dmac_DSTmaster_number  DSTmst_num)
{
    610010f0:	7139                	addi	sp,sp,-64
    610010f2:	fc22                	sd	s0,56(sp)
    610010f4:	0080                	addi	s0,sp,64
    610010f6:	fca43c23          	sd	a0,-40(s0)
    610010fa:	87ae                	mv	a5,a1
    610010fc:	fcf42a23          	sw	a5,-44(s0)
    61001100:	87b2                	mv	a5,a2
    61001102:	fcf42823          	sw	a5,-48(s0)
    61001106:	87b6                	mv	a5,a3
    61001108:	fcf42623          	sw	a5,-52(s0)
    6100110c:	87ba                	mv	a5,a4
    6100110e:	fcf42423          	sw	a5,-56(s0)
    int errorCode=1;
    61001112:	4785                	li	a5,1
    61001114:	fef42423          	sw	a5,-24(s0)
    BOOL write_en;

     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);

    if(errorCode == 1) {
    61001118:	fe842783          	lw	a5,-24(s0)
    6100111c:	0007871b          	sext.w	a4,a5
    61001120:	4785                	li	a5,1
    61001122:	14f71f63          	bne	a4,a5,61001280 <dw_dmac_setMstSelect+0x190>
        for(x=0;x<num_channels;x++) {
    61001126:	fe042623          	sw	zero,-20(s0)
    6100112a:	a2b1                	j	61001276 <dw_dmac_setMstSelect+0x186>
                write_en = FALSE;
    6100112c:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    61001130:	fd042783          	lw	a5,-48(s0)
    61001134:	2781                	sext.w	a5,a5
    61001136:	cb81                	beqz	a5,61001146 <dw_dmac_setMstSelect+0x56>
    61001138:	fd042783          	lw	a5,-48(s0)
    6100113c:	0007871b          	sext.w	a4,a5
    61001140:	4789                	li	a5,2
    61001142:	06f71063          	bne	a4,a5,610011a2 <dw_dmac_setMstSelect+0xb2>
                    if(Channelx -> CTL_L.SMS != SRCmst_num) {
    61001146:	fd843783          	ld	a5,-40(s0)
    6100114a:	4f9c                	lw	a5,24(a5)
    6100114c:	0197d79b          	srliw	a5,a5,0x19
    61001150:	8b8d                	andi	a5,a5,3
    61001152:	0ff7f793          	andi	a5,a5,255
    61001156:	0007871b          	sext.w	a4,a5
    6100115a:	fcc42783          	lw	a5,-52(s0)
    6100115e:	2781                	sext.w	a5,a5
    61001160:	04e78163          	beq	a5,a4,610011a2 <dw_dmac_setMstSelect+0xb2>
                    	if(1 == SRCmst_num)
    61001164:	fcc42783          	lw	a5,-52(s0)
    61001168:	0007871b          	sext.w	a4,a5
    6100116c:	4785                	li	a5,1
    6100116e:	00f71f63          	bne	a4,a5,6100118c <dw_dmac_setMstSelect+0x9c>
                    	{
                    		Channelx -> CTL_L.SMS = SMS_master2;//都是假值需要替换成具体配置
    61001172:	fd843783          	ld	a5,-40(s0)
    61001176:	4f94                	lw	a3,24(a5)
    61001178:	fa000737          	lui	a4,0xfa000
    6100117c:	177d                	addi	a4,a4,-1
    6100117e:	8f75                	and	a4,a4,a3
    61001180:	86ba                	mv	a3,a4
    61001182:	02000737          	lui	a4,0x2000
    61001186:	8f55                	or	a4,a4,a3
    61001188:	cf98                	sw	a4,24(a5)
    6100118a:	a809                	j	6100119c <dw_dmac_setMstSelect+0xac>
                    	}
                    	else
                    	{
                    		Channelx -> CTL_L.SMS = SMS_master1;//都是假值需要替换成具体配置
    6100118c:	fd843783          	ld	a5,-40(s0)
    61001190:	4f94                	lw	a3,24(a5)
    61001192:	fa000737          	lui	a4,0xfa000
    61001196:	177d                	addi	a4,a4,-1
    61001198:	8f75                	and	a4,a4,a3
    6100119a:	cf98                	sw	a4,24(a5)
                    	}
                        write_en = TRUE;
    6100119c:	4785                	li	a5,1
    6100119e:	fef42223          	sw	a5,-28(s0)
                    }
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    610011a2:	fd042783          	lw	a5,-48(s0)
    610011a6:	0007871b          	sext.w	a4,a5
    610011aa:	4785                	li	a5,1
    610011ac:	00f70963          	beq	a4,a5,610011be <dw_dmac_setMstSelect+0xce>
    610011b0:	fd042783          	lw	a5,-48(s0)
    610011b4:	0007871b          	sext.w	a4,a5
    610011b8:	4789                	li	a5,2
    610011ba:	0af71963          	bne	a4,a5,6100126c <dw_dmac_setMstSelect+0x17c>
                    if(Channelx -> CTL_L.DMS != DSTmst_num) {
    610011be:	fd843783          	ld	a5,-40(s0)
    610011c2:	4f9c                	lw	a5,24(a5)
    610011c4:	0177d79b          	srliw	a5,a5,0x17
    610011c8:	8b8d                	andi	a5,a5,3
    610011ca:	0ff7f793          	andi	a5,a5,255
    610011ce:	0007871b          	sext.w	a4,a5
    610011d2:	fc842783          	lw	a5,-56(s0)
    610011d6:	2781                	sext.w	a5,a5
    610011d8:	08e78a63          	beq	a5,a4,6100126c <dw_dmac_setMstSelect+0x17c>
                    	switch(DSTmst_num)
    610011dc:	fc842783          	lw	a5,-56(s0)
    610011e0:	0007871b          	sext.w	a4,a5
    610011e4:	4789                	li	a5,2
    610011e6:	04f70b63          	beq	a4,a5,6100123c <dw_dmac_setMstSelect+0x14c>
    610011ea:	fc842783          	lw	a5,-56(s0)
    610011ee:	0007871b          	sext.w	a4,a5
    610011f2:	4789                	li	a5,2
    610011f4:	06e7e163          	bltu	a5,a4,61001256 <dw_dmac_setMstSelect+0x166>
    610011f8:	fc842783          	lw	a5,-56(s0)
    610011fc:	2781                	sext.w	a5,a5
    610011fe:	cb89                	beqz	a5,61001210 <dw_dmac_setMstSelect+0x120>
    61001200:	fc842783          	lw	a5,-56(s0)
    61001204:	0007871b          	sext.w	a4,a5
    61001208:	4785                	li	a5,1
    6100120a:	00f70c63          	beq	a4,a5,61001222 <dw_dmac_setMstSelect+0x132>
    6100120e:	a0a1                	j	61001256 <dw_dmac_setMstSelect+0x166>
                    	{
                    		case 0:
                    			Channelx -> CTL_L.DMS = DMS_master1;
    61001210:	fd843783          	ld	a5,-40(s0)
    61001214:	4f94                	lw	a3,24(a5)
    61001216:	fe800737          	lui	a4,0xfe800
    6100121a:	177d                	addi	a4,a4,-1
    6100121c:	8f75                	and	a4,a4,a3
    6100121e:	cf98                	sw	a4,24(a5)
                    			break;
    61001220:	a099                	j	61001266 <dw_dmac_setMstSelect+0x176>
                    		case 1:
                    			Channelx -> CTL_L.DMS = DMS_master2;
    61001222:	fd843783          	ld	a5,-40(s0)
    61001226:	4f94                	lw	a3,24(a5)
    61001228:	fe800737          	lui	a4,0xfe800
    6100122c:	177d                	addi	a4,a4,-1
    6100122e:	8f75                	and	a4,a4,a3
    61001230:	86ba                	mv	a3,a4
    61001232:	00800737          	lui	a4,0x800
    61001236:	8f55                	or	a4,a4,a3
    61001238:	cf98                	sw	a4,24(a5)
                    		    break;
    6100123a:	a035                	j	61001266 <dw_dmac_setMstSelect+0x176>
                    		case 2:
                    			Channelx -> CTL_L.DMS = DMS_master3;
    6100123c:	fd843783          	ld	a5,-40(s0)
    61001240:	4f94                	lw	a3,24(a5)
    61001242:	fe800737          	lui	a4,0xfe800
    61001246:	177d                	addi	a4,a4,-1
    61001248:	8f75                	and	a4,a4,a3
    6100124a:	86ba                	mv	a3,a4
    6100124c:	01000737          	lui	a4,0x1000
    61001250:	8f55                	or	a4,a4,a3
    61001252:	cf98                	sw	a4,24(a5)
                    		    break;
    61001254:	a809                	j	61001266 <dw_dmac_setMstSelect+0x176>
                    		default:
                    			Channelx -> CTL_L.DMS = DMS_master4;
    61001256:	fd843783          	ld	a5,-40(s0)
    6100125a:	4f94                	lw	a3,24(a5)
    6100125c:	01800737          	lui	a4,0x1800
    61001260:	8f55                	or	a4,a4,a3
    61001262:	cf98                	sw	a4,24(a5)
                    		    break;
    61001264:	0001                	nop
                    	}
                        write_en = TRUE;
    61001266:	4785                	li	a5,1
    61001268:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    6100126c:	fec42783          	lw	a5,-20(s0)
    61001270:	2785                	addiw	a5,a5,1
    61001272:	fef42623          	sw	a5,-20(s0)
    61001276:	fec42783          	lw	a5,-20(s0)
    6100127a:	2781                	sext.w	a5,a5
    6100127c:	eaf058e3          	blez	a5,6100112c <dw_dmac_setMstSelect+0x3c>
                    }
                }

        }
    }
    return errorCode;
    61001280:	fe842783          	lw	a5,-24(s0)
}
    61001284:	853e                	mv	a0,a5
    61001286:	7462                	ld	s0,56(sp)
    61001288:	6121                	addi	sp,sp,64
    6100128a:	8082                	ret

000000006100128c <dw_dmac_setAddressInc>:
int dw_dmac_setAddressInc(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel,
        enum   dw_dmac_address_increment addr_inc)
{
    6100128c:	7139                	addi	sp,sp,-64
    6100128e:	fc22                	sd	s0,56(sp)
    61001290:	0080                	addi	s0,sp,64
    61001292:	fca43c23          	sd	a0,-40(s0)
    61001296:	87ae                	mv	a5,a1
    61001298:	8736                	mv	a4,a3
    6100129a:	fcf42a23          	sw	a5,-44(s0)
    6100129e:	87b2                	mv	a5,a2
    610012a0:	fcf42823          	sw	a5,-48(s0)
    610012a4:	87ba                	mv	a5,a4
    610012a6:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    610012aa:	4785                	li	a5,1
    610012ac:	fef42423          	sw	a5,-24(s0)
    uint32_t reg;
    struct dw_dmac_param *param;

     //Check for valid channel number and not busy
    //errorCode = dw_dmac_checkChannelBusy(DMAC, ch_num);
    if(errorCode == 1) {
    610012b0:	fe842783          	lw	a5,-24(s0)
    610012b4:	0007871b          	sext.w	a4,a5
    610012b8:	4785                	li	a5,1
    610012ba:	14f71663          	bne	a4,a5,61001406 <dw_dmac_setAddressInc+0x17a>
        for(x=0;x<num_channels;x++) {
    610012be:	fe042623          	sw	zero,-20(s0)
    610012c2:	aa2d                	j	610013fc <dw_dmac_setAddressInc+0x170>
                write_en = FALSE;
    610012c4:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    610012c8:	fd042783          	lw	a5,-48(s0)
    610012cc:	2781                	sext.w	a5,a5
    610012ce:	cb81                	beqz	a5,610012de <dw_dmac_setAddressInc+0x52>
    610012d0:	fd042783          	lw	a5,-48(s0)
    610012d4:	0007871b          	sext.w	a4,a5
    610012d8:	4789                	li	a5,2
    610012da:	06f71f63          	bne	a4,a5,61001358 <dw_dmac_setAddressInc+0xcc>
                    if(Channelx ->CTL_L.SINC != addr_inc) {
    610012de:	fd843783          	ld	a5,-40(s0)
    610012e2:	4f9c                	lw	a5,24(a5)
    610012e4:	0097d79b          	srliw	a5,a5,0x9
    610012e8:	8b8d                	andi	a5,a5,3
    610012ea:	0ff7f793          	andi	a5,a5,255
    610012ee:	0007871b          	sext.w	a4,a5
    610012f2:	fcc42783          	lw	a5,-52(s0)
    610012f6:	2781                	sext.w	a5,a5
    610012f8:	06e78063          	beq	a5,a4,61001358 <dw_dmac_setAddressInc+0xcc>
                    	switch(addr_inc)
    610012fc:	fcc42783          	lw	a5,-52(s0)
    61001300:	2781                	sext.w	a5,a5
    61001302:	cb89                	beqz	a5,61001314 <dw_dmac_setAddressInc+0x88>
    61001304:	fcc42783          	lw	a5,-52(s0)
    61001308:	0007871b          	sext.w	a4,a5
    6100130c:	4785                	li	a5,1
    6100130e:	00f70d63          	beq	a4,a5,61001328 <dw_dmac_setAddressInc+0x9c>
    61001312:	a03d                	j	61001340 <dw_dmac_setAddressInc+0xb4>
                    	{
                    	case 0:
                    		Channelx ->CTL_L.SINC = Increments;
    61001314:	fd843783          	ld	a5,-40(s0)
    61001318:	4f98                	lw	a4,24(a5)
    6100131a:	9ff77713          	andi	a4,a4,-1537
    6100131e:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61001320:	4785                	li	a5,1
    61001322:	fef42223          	sw	a5,-28(s0)
                        break;
    61001326:	a815                	j	6100135a <dw_dmac_setAddressInc+0xce>
                    	case 1:
                    		Channelx ->CTL_L.SINC = Decrements;
    61001328:	fd843783          	ld	a5,-40(s0)
    6100132c:	4f98                	lw	a4,24(a5)
    6100132e:	9ff77713          	andi	a4,a4,-1537
    61001332:	20076713          	ori	a4,a4,512
    61001336:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61001338:	4785                	li	a5,1
    6100133a:	fef42223          	sw	a5,-28(s0)
                        break;
    6100133e:	a831                	j	6100135a <dw_dmac_setAddressInc+0xce>
                    	default :
                    		Channelx ->CTL_L.SINC = FIX;
    61001340:	fd843783          	ld	a5,-40(s0)
    61001344:	4f98                	lw	a4,24(a5)
    61001346:	9ff77713          	andi	a4,a4,-1537
    6100134a:	40076713          	ori	a4,a4,1024
    6100134e:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    61001350:	4785                	li	a5,1
    61001352:	fef42223          	sw	a5,-28(s0)
                        break;
    61001356:	a011                	j	6100135a <dw_dmac_setAddressInc+0xce>
                    	}
                    }
    61001358:	0001                	nop
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    6100135a:	fd042783          	lw	a5,-48(s0)
    6100135e:	0007871b          	sext.w	a4,a5
    61001362:	4785                	li	a5,1
    61001364:	00f70963          	beq	a4,a5,61001376 <dw_dmac_setAddressInc+0xea>
    61001368:	fd042783          	lw	a5,-48(s0)
    6100136c:	0007871b          	sext.w	a4,a5
    61001370:	4789                	li	a5,2
    61001372:	06f71f63          	bne	a4,a5,610013f0 <dw_dmac_setAddressInc+0x164>
                    if(Channelx ->CTL_L.DINC != addr_inc) {
    61001376:	fd843783          	ld	a5,-40(s0)
    6100137a:	4f9c                	lw	a5,24(a5)
    6100137c:	0077d79b          	srliw	a5,a5,0x7
    61001380:	8b8d                	andi	a5,a5,3
    61001382:	0ff7f793          	andi	a5,a5,255
    61001386:	0007871b          	sext.w	a4,a5
    6100138a:	fcc42783          	lw	a5,-52(s0)
    6100138e:	2781                	sext.w	a5,a5
    61001390:	06e78063          	beq	a5,a4,610013f0 <dw_dmac_setAddressInc+0x164>
                    	switch(addr_inc)
    61001394:	fcc42783          	lw	a5,-52(s0)
    61001398:	2781                	sext.w	a5,a5
    6100139a:	cb89                	beqz	a5,610013ac <dw_dmac_setAddressInc+0x120>
    6100139c:	fcc42783          	lw	a5,-52(s0)
    610013a0:	0007871b          	sext.w	a4,a5
    610013a4:	4785                	li	a5,1
    610013a6:	00f70d63          	beq	a4,a5,610013c0 <dw_dmac_setAddressInc+0x134>
    610013aa:	a03d                	j	610013d8 <dw_dmac_setAddressInc+0x14c>
                    	{
                    	case 0:
                    		Channelx ->CTL_L.DINC = Increments;
    610013ac:	fd843783          	ld	a5,-40(s0)
    610013b0:	4f98                	lw	a4,24(a5)
    610013b2:	e7f77713          	andi	a4,a4,-385
    610013b6:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    610013b8:	4785                	li	a5,1
    610013ba:	fef42223          	sw	a5,-28(s0)
                    	break;
    610013be:	a815                	j	610013f2 <dw_dmac_setAddressInc+0x166>
                    	case 1:
                    		Channelx ->CTL_L.DINC = Decrements;
    610013c0:	fd843783          	ld	a5,-40(s0)
    610013c4:	4f98                	lw	a4,24(a5)
    610013c6:	e7f77713          	andi	a4,a4,-385
    610013ca:	08076713          	ori	a4,a4,128
    610013ce:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    610013d0:	4785                	li	a5,1
    610013d2:	fef42223          	sw	a5,-28(s0)
                    	break;
    610013d6:	a831                	j	610013f2 <dw_dmac_setAddressInc+0x166>
                    	default:
                    		Channelx ->CTL_L.DINC = FIX;
    610013d8:	fd843783          	ld	a5,-40(s0)
    610013dc:	4f98                	lw	a4,24(a5)
    610013de:	e7f77713          	andi	a4,a4,-385
    610013e2:	10076713          	ori	a4,a4,256
    610013e6:	cf98                	sw	a4,24(a5)
                    			write_en = TRUE;
    610013e8:	4785                	li	a5,1
    610013ea:	fef42223          	sw	a5,-28(s0)
                    	break;
    610013ee:	a011                	j	610013f2 <dw_dmac_setAddressInc+0x166>
                    	}
                    }
    610013f0:	0001                	nop
        for(x=0;x<num_channels;x++) {
    610013f2:	fec42783          	lw	a5,-20(s0)
    610013f6:	2785                	addiw	a5,a5,1
    610013f8:	fef42623          	sw	a5,-20(s0)
    610013fc:	fec42783          	lw	a5,-20(s0)
    61001400:	2781                	sext.w	a5,a5
    61001402:	ecf051e3          	blez	a5,610012c4 <dw_dmac_setAddressInc+0x38>
                }
        }
    }
    return errorCode;
    61001406:	fe842783          	lw	a5,-24(s0)
}
    6100140a:	853e                	mv	a0,a5
    6100140c:	7462                	ld	s0,56(sp)
    6100140e:	6121                	addi	sp,sp,64
    61001410:	8082                	ret

0000000061001412 <dw_dmac_setHsPolarity>:
int dw_dmac_setHsPolarity(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel,
        enum   dw_dmac_polarity_level pol_level)
{
    61001412:	7139                	addi	sp,sp,-64
    61001414:	fc22                	sd	s0,56(sp)
    61001416:	0080                	addi	s0,sp,64
    61001418:	fca43c23          	sd	a0,-40(s0)
    6100141c:	87ae                	mv	a5,a1
    6100141e:	8736                	mv	a4,a3
    61001420:	fcf42a23          	sw	a5,-44(s0)
    61001424:	87b2                	mv	a5,a2
    61001426:	fcf42823          	sw	a5,-48(s0)
    6100142a:	87ba                	mv	a5,a4
    6100142c:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    61001430:	4785                	li	a5,1
    61001432:	fef42423          	sw	a5,-24(s0)
    int x;
    BOOL write_en;
    uint32_t reg;

    if(errorCode == 1) {
    61001436:	fe842783          	lw	a5,-24(s0)
    6100143a:	0007871b          	sext.w	a4,a5
    6100143e:	4785                	li	a5,1
    61001440:	0af71e63          	bne	a4,a5,610014fc <dw_dmac_setHsPolarity+0xea>
        for(x=0;x<num_channels;x++) {
    61001444:	fe042623          	sw	zero,-20(s0)
    61001448:	a06d                	j	610014f2 <dw_dmac_setHsPolarity+0xe0>
                write_en = FALSE;
    6100144a:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    6100144e:	fd042783          	lw	a5,-48(s0)
    61001452:	2781                	sext.w	a5,a5
    61001454:	cb81                	beqz	a5,61001464 <dw_dmac_setHsPolarity+0x52>
    61001456:	fd042783          	lw	a5,-48(s0)
    6100145a:	0007871b          	sext.w	a4,a5
    6100145e:	4789                	li	a5,2
    61001460:	02f71c63          	bne	a4,a5,61001498 <dw_dmac_setHsPolarity+0x86>
                    if(Channelx ->CFG_L.SRC_HS_POL!=pol_level)
    61001464:	fd843783          	ld	a5,-40(s0)
    61001468:	43bc                	lw	a5,64(a5)
    6100146a:	0137d79b          	srliw	a5,a5,0x13
    6100146e:	8b85                	andi	a5,a5,1
    61001470:	0ff7f793          	andi	a5,a5,255
    61001474:	0007871b          	sext.w	a4,a5
    61001478:	fcc42783          	lw	a5,-52(s0)
    6100147c:	2781                	sext.w	a5,a5
    6100147e:	00e78d63          	beq	a5,a4,61001498 <dw_dmac_setHsPolarity+0x86>
                    {
                    	Channelx ->CFG_L.SRC_HS_POL = ACTIVE_HIGH ;// (reg, DMAC_CFG_L_SRC_HS_POL,pol_level);
    61001482:	fd843783          	ld	a5,-40(s0)
    61001486:	43b4                	lw	a3,64(a5)
    61001488:	fff80737          	lui	a4,0xfff80
    6100148c:	177d                	addi	a4,a4,-1
    6100148e:	8f75                	and	a4,a4,a3
    61001490:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    61001492:	4785                	li	a5,1
    61001494:	fef42223          	sw	a5,-28(s0)
                    }
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    61001498:	fd042783          	lw	a5,-48(s0)
    6100149c:	0007871b          	sext.w	a4,a5
    610014a0:	4785                	li	a5,1
    610014a2:	00f70963          	beq	a4,a5,610014b4 <dw_dmac_setHsPolarity+0xa2>
    610014a6:	fd042783          	lw	a5,-48(s0)
    610014aa:	0007871b          	sext.w	a4,a5
    610014ae:	4789                	li	a5,2
    610014b0:	02f71c63          	bne	a4,a5,610014e8 <dw_dmac_setHsPolarity+0xd6>
                    if(Channelx ->CFG_L.DST_HS_POL !=pol_level)
    610014b4:	fd843783          	ld	a5,-40(s0)
    610014b8:	43bc                	lw	a5,64(a5)
    610014ba:	0127d79b          	srliw	a5,a5,0x12
    610014be:	8b85                	andi	a5,a5,1
    610014c0:	0ff7f793          	andi	a5,a5,255
    610014c4:	0007871b          	sext.w	a4,a5
    610014c8:	fcc42783          	lw	a5,-52(s0)
    610014cc:	2781                	sext.w	a5,a5
    610014ce:	00e78d63          	beq	a5,a4,610014e8 <dw_dmac_setHsPolarity+0xd6>
                    {
                    	Channelx ->CFG_L.DST_HS_POL = ACTIVE_HIGH;
    610014d2:	fd843783          	ld	a5,-40(s0)
    610014d6:	43b4                	lw	a3,64(a5)
    610014d8:	fffc0737          	lui	a4,0xfffc0
    610014dc:	177d                	addi	a4,a4,-1
    610014de:	8f75                	and	a4,a4,a3
    610014e0:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    610014e2:	4785                	li	a5,1
    610014e4:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    610014e8:	fec42783          	lw	a5,-20(s0)
    610014ec:	2785                	addiw	a5,a5,1
    610014ee:	fef42623          	sw	a5,-20(s0)
    610014f2:	fec42783          	lw	a5,-20(s0)
    610014f6:	2781                	sext.w	a5,a5
    610014f8:	f4f059e3          	blez	a5,6100144a <dw_dmac_setHsPolarity+0x38>
                    }
                }
            }
    }
    return errorCode;
    610014fc:	fe842783          	lw	a5,-24(s0)
}
    61001500:	853e                	mv	a0,a5
    61001502:	7462                	ld	s0,56(sp)
    61001504:	6121                	addi	sp,sp,64
    61001506:	8082                	ret

0000000061001508 <dw_dmac_setFifoMode>:
//pass
int dw_dmac_setFifoMode(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_fifo_mode fifo_mode)
{
    61001508:	7179                	addi	sp,sp,-48
    6100150a:	f422                	sd	s0,40(sp)
    6100150c:	1800                	addi	s0,sp,48
    6100150e:	fca43c23          	sd	a0,-40(s0)
    61001512:	87ae                	mv	a5,a1
    61001514:	8732                	mv	a4,a2
    61001516:	fcf42a23          	sw	a5,-44(s0)
    6100151a:	87ba                	mv	a5,a4
    6100151c:	fcf42823          	sw	a5,-48(s0)
    int errorCode = 1;
    61001520:	4785                	li	a5,1
    61001522:	fef42423          	sw	a5,-24(s0)
    int x;

    if(errorCode == 1) {
    61001526:	fe842783          	lw	a5,-24(s0)
    6100152a:	0007871b          	sext.w	a4,a5
    6100152e:	4785                	li	a5,1
    61001530:	06f71163          	bne	a4,a5,61001592 <dw_dmac_setFifoMode+0x8a>
        for(x=0;x<num_channels;x++) {
    61001534:	fe042623          	sw	zero,-20(s0)
    61001538:	a881                	j	61001588 <dw_dmac_setFifoMode+0x80>
                if(Channelx ->CFG_H.FIFO_MODE != fifo_mode) {
    6100153a:	fd843783          	ld	a5,-40(s0)
    6100153e:	43fc                	lw	a5,68(a5)
    61001540:	0017d79b          	srliw	a5,a5,0x1
    61001544:	8b85                	andi	a5,a5,1
    61001546:	0ff7f793          	andi	a5,a5,255
    6100154a:	0007871b          	sext.w	a4,a5
    6100154e:	fd042783          	lw	a5,-48(s0)
    61001552:	2781                	sext.w	a5,a5
    61001554:	02e78563          	beq	a5,a4,6100157e <dw_dmac_setFifoMode+0x76>
                	if(fifo_mode == 1)
    61001558:	fd042783          	lw	a5,-48(s0)
    6100155c:	0007871b          	sext.w	a4,a5
    61001560:	4785                	li	a5,1
    61001562:	00f71863          	bne	a4,a5,61001572 <dw_dmac_setFifoMode+0x6a>
                	{
                		Channelx ->CFG_H.FIFO_MODE = FIFO_MODE_0 ;// DMAC_CFG_H_FIFO_MODE, fifo_mode
    61001566:	fd843783          	ld	a5,-40(s0)
    6100156a:	43f8                	lw	a4,68(a5)
    6100156c:	9b75                	andi	a4,a4,-3
    6100156e:	c3f8                	sw	a4,68(a5)
    61001570:	a039                	j	6100157e <dw_dmac_setFifoMode+0x76>
                	}
                	else
                	{
                		Channelx ->CFG_H.FIFO_MODE = FIFO_MODE_1;
    61001572:	fd843783          	ld	a5,-40(s0)
    61001576:	43f8                	lw	a4,68(a5)
    61001578:	00276713          	ori	a4,a4,2
    6100157c:	c3f8                	sw	a4,68(a5)
        for(x=0;x<num_channels;x++) {
    6100157e:	fec42783          	lw	a5,-20(s0)
    61001582:	2785                	addiw	a5,a5,1
    61001584:	fef42623          	sw	a5,-20(s0)
    61001588:	fec42783          	lw	a5,-20(s0)
    6100158c:	2781                	sext.w	a5,a5
    6100158e:	faf056e3          	blez	a5,6100153a <dw_dmac_setFifoMode+0x32>
                	}
                }
        }
    }
    return errorCode;
    61001592:	fe842783          	lw	a5,-24(s0)
}
    61001596:	853e                	mv	a0,a5
    61001598:	7422                	ld	s0,40(sp)
    6100159a:	6145                	addi	sp,sp,48
    6100159c:	8082                	ret

000000006100159e <dw_dmac_setFlowCtlMode>:
//pass
int dw_dmac_setFlowCtlMode(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_flow_ctl_mode  fc_mode)
{
    6100159e:	7179                	addi	sp,sp,-48
    610015a0:	f422                	sd	s0,40(sp)
    610015a2:	1800                	addi	s0,sp,48
    610015a4:	fca43c23          	sd	a0,-40(s0)
    610015a8:	87ae                	mv	a5,a1
    610015aa:	8732                	mv	a4,a2
    610015ac:	fcf42a23          	sw	a5,-44(s0)
    610015b0:	87ba                	mv	a5,a4
    610015b2:	fcf42823          	sw	a5,-48(s0)
    int errorCode=1;
    610015b6:	4785                	li	a5,1
    610015b8:	fef42423          	sw	a5,-24(s0)
    int x;

    if(errorCode == 1) {
    610015bc:	fe842783          	lw	a5,-24(s0)
    610015c0:	0007871b          	sext.w	a4,a5
    610015c4:	4785                	li	a5,1
    610015c6:	02f71c63          	bne	a4,a5,610015fe <dw_dmac_setFlowCtlMode+0x60>
        for(x=0;x<num_channels;x++) {
    610015ca:	fe042623          	sw	zero,-20(s0)
    610015ce:	a01d                	j	610015f4 <dw_dmac_setFlowCtlMode+0x56>
                if(Channelx -> CFG_H.FCMODE != fc_mode_0) {
    610015d0:	fd843783          	ld	a5,-40(s0)
    610015d4:	43fc                	lw	a5,68(a5)
    610015d6:	8b85                	andi	a5,a5,1
    610015d8:	0ff7f793          	andi	a5,a5,255
    610015dc:	c799                	beqz	a5,610015ea <dw_dmac_setFlowCtlMode+0x4c>
                	Channelx -> CFG_H.FCMODE = fc_mode_1; //(reg, DMAC_CFG_H_FCMODE, fc_mode);
    610015de:	fd843783          	ld	a5,-40(s0)
    610015e2:	43f8                	lw	a4,68(a5)
    610015e4:	00176713          	ori	a4,a4,1
    610015e8:	c3f8                	sw	a4,68(a5)
        for(x=0;x<num_channels;x++) {
    610015ea:	fec42783          	lw	a5,-20(s0)
    610015ee:	2785                	addiw	a5,a5,1
    610015f0:	fef42623          	sw	a5,-20(s0)
    610015f4:	fec42783          	lw	a5,-20(s0)
    610015f8:	2781                	sext.w	a5,a5
    610015fa:	fcf05be3          	blez	a5,610015d0 <dw_dmac_setFlowCtlMode+0x32>
                }
        }
    }
    return errorCode;
    610015fe:	fe842783          	lw	a5,-24(s0)
}
    61001602:	853e                	mv	a0,a5
    61001604:	7422                	ld	s0,40(sp)
    61001606:	6145                	addi	sp,sp,48
    61001608:	8082                	ret

000000006100160a <dw_dmac_setHandshakingMode>:
int dw_dmac_setHandshakingMode(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number  ch_num,
        enum   dw_dmac_src_dst_select  sd_sel,
        enum   dw_dmac_sw_hw_hs_select hs_hwsw_sel)
{
    6100160a:	7139                	addi	sp,sp,-64
    6100160c:	fc22                	sd	s0,56(sp)
    6100160e:	0080                	addi	s0,sp,64
    61001610:	fca43c23          	sd	a0,-40(s0)
    61001614:	87ae                	mv	a5,a1
    61001616:	8736                	mv	a4,a3
    61001618:	fcf42a23          	sw	a5,-44(s0)
    6100161c:	87b2                	mv	a5,a2
    6100161e:	fcf42823          	sw	a5,-48(s0)
    61001622:	87ba                	mv	a5,a4
    61001624:	fcf42623          	sw	a5,-52(s0)
    int errorCode=1;
    61001628:	4785                	li	a5,1
    6100162a:	fef42423          	sw	a5,-24(s0)
    int x;
    BOOL write_en;

    if(errorCode == 1) {
    6100162e:	fe842783          	lw	a5,-24(s0)
    61001632:	0007871b          	sext.w	a4,a5
    61001636:	4785                	li	a5,1
    61001638:	0af71c63          	bne	a4,a5,610016f0 <dw_dmac_setHandshakingMode+0xe6>
        for(x=0;x<num_channels;x++) {
    6100163c:	fe042623          	sw	zero,-20(s0)
    61001640:	a05d                	j	610016e6 <dw_dmac_setHandshakingMode+0xdc>
                write_en = FALSE;
    61001642:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    61001646:	fd042783          	lw	a5,-48(s0)
    6100164a:	2781                	sext.w	a5,a5
    6100164c:	cb81                	beqz	a5,6100165c <dw_dmac_setHandshakingMode+0x52>
    6100164e:	fd042783          	lw	a5,-48(s0)
    61001652:	0007871b          	sext.w	a4,a5
    61001656:	4789                	li	a5,2
    61001658:	02f71c63          	bne	a4,a5,61001690 <dw_dmac_setHandshakingMode+0x86>
                    if(Channelx -> CFG_L.HS_SEL_SRC!= hs_hwsw_sel) {
    6100165c:	fd843783          	ld	a5,-40(s0)
    61001660:	43bc                	lw	a5,64(a5)
    61001662:	00b7d79b          	srliw	a5,a5,0xb
    61001666:	8b85                	andi	a5,a5,1
    61001668:	0ff7f793          	andi	a5,a5,255
    6100166c:	0007871b          	sext.w	a4,a5
    61001670:	fcc42783          	lw	a5,-52(s0)
    61001674:	2781                	sext.w	a5,a5
    61001676:	00e78d63          	beq	a5,a4,61001690 <dw_dmac_setHandshakingMode+0x86>
                    	Channelx -> CFG_L.HS_SEL_SRC = Hardware_handshaking;// (reg, DMAC_CFG_L_HS_SEL_SRC,hs_hwsw_sel);
    6100167a:	fd843783          	ld	a5,-40(s0)
    6100167e:	43b4                	lw	a3,64(a5)
    61001680:	777d                	lui	a4,0xfffff
    61001682:	7ff70713          	addi	a4,a4,2047 # fffffffffffff7ff <_sp+0xffffffff9efdf7ff>
    61001686:	8f75                	and	a4,a4,a3
    61001688:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    6100168a:	4785                	li	a5,1
    6100168c:	fef42223          	sw	a5,-28(s0)
                    }
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    61001690:	fd042783          	lw	a5,-48(s0)
    61001694:	0007871b          	sext.w	a4,a5
    61001698:	4785                	li	a5,1
    6100169a:	00f70963          	beq	a4,a5,610016ac <dw_dmac_setHandshakingMode+0xa2>
    6100169e:	fd042783          	lw	a5,-48(s0)
    610016a2:	0007871b          	sext.w	a4,a5
    610016a6:	4789                	li	a5,2
    610016a8:	02f71a63          	bne	a4,a5,610016dc <dw_dmac_setHandshakingMode+0xd2>
                    if(Channelx -> CFG_L.HS_SEL_DST !=hs_hwsw_sel) {
    610016ac:	fd843783          	ld	a5,-40(s0)
    610016b0:	43bc                	lw	a5,64(a5)
    610016b2:	00a7d79b          	srliw	a5,a5,0xa
    610016b6:	8b85                	andi	a5,a5,1
    610016b8:	0ff7f793          	andi	a5,a5,255
    610016bc:	0007871b          	sext.w	a4,a5
    610016c0:	fcc42783          	lw	a5,-52(s0)
    610016c4:	2781                	sext.w	a5,a5
    610016c6:	00e78b63          	beq	a5,a4,610016dc <dw_dmac_setHandshakingMode+0xd2>
                       Channelx -> CFG_L.HS_SEL_DST = Hardware_handshaking;
    610016ca:	fd843783          	ld	a5,-40(s0)
    610016ce:	43b8                	lw	a4,64(a5)
    610016d0:	bff77713          	andi	a4,a4,-1025
    610016d4:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    610016d6:	4785                	li	a5,1
    610016d8:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    610016dc:	fec42783          	lw	a5,-20(s0)
    610016e0:	2785                	addiw	a5,a5,1
    610016e2:	fef42623          	sw	a5,-20(s0)
    610016e6:	fec42783          	lw	a5,-20(s0)
    610016ea:	2781                	sext.w	a5,a5
    610016ec:	f4f05be3          	blez	a5,61001642 <dw_dmac_setHandshakingMode+0x38>
                    }
                }
        }
    }
    return errorCode;
    610016f0:	fe842783          	lw	a5,-24(s0)
}
    610016f4:	853e                	mv	a0,a5
    610016f6:	7462                	ld	s0,56(sp)
    610016f8:	6121                	addi	sp,sp,64
    610016fa:	8082                	ret

00000000610016fc <dw_dmac_setReload>:
/**********************************************************************/
int dw_dmac_setReload(
		DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel)
{
    610016fc:	7179                	addi	sp,sp,-48
    610016fe:	f422                	sd	s0,40(sp)
    61001700:	1800                	addi	s0,sp,48
    61001702:	fca43c23          	sd	a0,-40(s0)
    61001706:	87ae                	mv	a5,a1
    61001708:	8732                	mv	a4,a2
    6100170a:	fcf42a23          	sw	a5,-44(s0)
    6100170e:	87ba                	mv	a5,a4
    61001710:	fcf42823          	sw	a5,-48(s0)
    int x, errorCode=1;
    61001714:	4785                	li	a5,1
    61001716:	fef42423          	sw	a5,-24(s0)
    BOOL write_en;
    uint32_t reg;
    //struct dw_dmac_param *param;
    if(errorCode == 1) {
    6100171a:	fe842783          	lw	a5,-24(s0)
    6100171e:	0007871b          	sext.w	a4,a5
    61001722:	4785                	li	a5,1
    61001724:	08f71e63          	bne	a4,a5,610017c0 <dw_dmac_setReload+0xc4>
        for(x=0;x<num_channels;x++) {
    61001728:	fe042623          	sw	zero,-20(s0)
    6100172c:	a069                	j	610017b6 <dw_dmac_setReload+0xba>
                write_en = FALSE;
    6100172e:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    61001732:	fd042783          	lw	a5,-48(s0)
    61001736:	2781                	sext.w	a5,a5
    61001738:	cb81                	beqz	a5,61001748 <dw_dmac_setReload+0x4c>
    6100173a:	fd042783          	lw	a5,-48(s0)
    6100173e:	0007871b          	sext.w	a4,a5
    61001742:	4789                	li	a5,2
    61001744:	02f71463          	bne	a4,a5,6100176c <dw_dmac_setReload+0x70>
                   	Channelx ->CTL_L.LLP_SRC_EN = DISABLE;
    61001748:	fd843783          	ld	a5,-40(s0)
    6100174c:	4f94                	lw	a3,24(a5)
    6100174e:	f0000737          	lui	a4,0xf0000
    61001752:	177d                	addi	a4,a4,-1
    61001754:	8f75                	and	a4,a4,a3
    61001756:	cf98                	sw	a4,24(a5)
                    	Channelx ->CFG_L.RELOAD_SRC = ENABLE;
    61001758:	fd843783          	ld	a5,-40(s0)
    6100175c:	43b4                	lw	a3,64(a5)
    6100175e:	40000737          	lui	a4,0x40000
    61001762:	8f55                	or	a4,a4,a3
    61001764:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    61001766:	4785                	li	a5,1
    61001768:	fef42223          	sw	a5,-28(s0)
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    6100176c:	fd042783          	lw	a5,-48(s0)
    61001770:	0007871b          	sext.w	a4,a5
    61001774:	4785                	li	a5,1
    61001776:	00f70963          	beq	a4,a5,61001788 <dw_dmac_setReload+0x8c>
    6100177a:	fd042783          	lw	a5,-48(s0)
    6100177e:	0007871b          	sext.w	a4,a5
    61001782:	4789                	li	a5,2
    61001784:	02f71463          	bne	a4,a5,610017ac <dw_dmac_setReload+0xb0>
			Channelx ->CTL_L.LLP_SRC_EN = DISABLE;
    61001788:	fd843783          	ld	a5,-40(s0)
    6100178c:	4f94                	lw	a3,24(a5)
    6100178e:	f0000737          	lui	a4,0xf0000
    61001792:	177d                	addi	a4,a4,-1
    61001794:	8f75                	and	a4,a4,a3
    61001796:	cf98                	sw	a4,24(a5)
                    	Channelx ->CFG_L.RELOAD_DST = ENABLE;
    61001798:	fd843783          	ld	a5,-40(s0)
    6100179c:	43b4                	lw	a3,64(a5)
    6100179e:	80000737          	lui	a4,0x80000
    610017a2:	8f55                	or	a4,a4,a3
    610017a4:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    610017a6:	4785                	li	a5,1
    610017a8:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    610017ac:	fec42783          	lw	a5,-20(s0)
    610017b0:	2785                	addiw	a5,a5,1
    610017b2:	fef42623          	sw	a5,-20(s0)
    610017b6:	fec42783          	lw	a5,-20(s0)
    610017ba:	2781                	sext.w	a5,a5
    610017bc:	f6f059e3          	blez	a5,6100172e <dw_dmac_setReload+0x32>
                }

        }
    }
    return errorCode;
    610017c0:	fe842783          	lw	a5,-24(s0)
}
    610017c4:	853e                	mv	a0,a5
    610017c6:	7422                	ld	s0,40(sp)
    610017c8:	6145                	addi	sp,sp,48
    610017ca:	8082                	ret

00000000610017cc <dw_dmac_setSingle>:
int dw_dmac_setSingle(
	DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel
		)
{
    610017cc:	7179                	addi	sp,sp,-48
    610017ce:	f422                	sd	s0,40(sp)
    610017d0:	1800                	addi	s0,sp,48
    610017d2:	fca43c23          	sd	a0,-40(s0)
    610017d6:	87ae                	mv	a5,a1
    610017d8:	8732                	mv	a4,a2
    610017da:	fcf42a23          	sw	a5,-44(s0)
    610017de:	87ba                	mv	a5,a4
    610017e0:	fcf42823          	sw	a5,-48(s0)
    int x, errorCode=1;
    610017e4:	4785                	li	a5,1
    610017e6:	fef42423          	sw	a5,-24(s0)
    BOOL write_en;
    uint32_t reg;
    //struct dw_dmac_param *param;
    if(errorCode == 1) {
    610017ea:	fe842783          	lw	a5,-24(s0)
    610017ee:	0007871b          	sext.w	a4,a5
    610017f2:	4785                	li	a5,1
    610017f4:	08f71163          	bne	a4,a5,61001876 <dw_dmac_setSingle+0xaa>
        for(x=0;x<num_channels;x++) {
    610017f8:	fe042623          	sw	zero,-20(s0)
    610017fc:	a885                	j	6100186c <dw_dmac_setSingle+0xa0>
                write_en = FALSE;
    610017fe:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    61001802:	fd042783          	lw	a5,-48(s0)
    61001806:	2781                	sext.w	a5,a5
    61001808:	cb81                	beqz	a5,61001818 <dw_dmac_setSingle+0x4c>
    6100180a:	fd042783          	lw	a5,-48(s0)
    6100180e:	0007871b          	sext.w	a4,a5
    61001812:	4789                	li	a5,2
    61001814:	00f71d63          	bne	a4,a5,6100182e <dw_dmac_setSingle+0x62>

                    	Channelx ->CFG_L.RELOAD_SRC = DISABLE;
    61001818:	fd843783          	ld	a5,-40(s0)
    6100181c:	43b4                	lw	a3,64(a5)
    6100181e:	c0000737          	lui	a4,0xc0000
    61001822:	177d                	addi	a4,a4,-1
    61001824:	8f75                	and	a4,a4,a3
    61001826:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    61001828:	4785                	li	a5,1
    6100182a:	fef42223          	sw	a5,-28(s0)

                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    6100182e:	fd042783          	lw	a5,-48(s0)
    61001832:	0007871b          	sext.w	a4,a5
    61001836:	4785                	li	a5,1
    61001838:	00f70963          	beq	a4,a5,6100184a <dw_dmac_setSingle+0x7e>
    6100183c:	fd042783          	lw	a5,-48(s0)
    61001840:	0007871b          	sext.w	a4,a5
    61001844:	4789                	li	a5,2
    61001846:	00f71e63          	bne	a4,a5,61001862 <dw_dmac_setSingle+0x96>
                    	Channelx ->CFG_L.RELOAD_DST = DISABLE;
    6100184a:	fd843783          	ld	a5,-40(s0)
    6100184e:	43b4                	lw	a3,64(a5)
    61001850:	80000737          	lui	a4,0x80000
    61001854:	fff74713          	not	a4,a4
    61001858:	8f75                	and	a4,a4,a3
    6100185a:	c3b8                	sw	a4,64(a5)
                        write_en = TRUE;
    6100185c:	4785                	li	a5,1
    6100185e:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    61001862:	fec42783          	lw	a5,-20(s0)
    61001866:	2785                	addiw	a5,a5,1
    61001868:	fef42623          	sw	a5,-20(s0)
    6100186c:	fec42783          	lw	a5,-20(s0)
    61001870:	2781                	sext.w	a5,a5
    61001872:	f8f056e3          	blez	a5,610017fe <dw_dmac_setSingle+0x32>
                    }

        }
    }
    return errorCode;
    61001876:	fe842783          	lw	a5,-24(s0)
}
    6100187a:	853e                	mv	a0,a5
    6100187c:	7422                	ld	s0,40(sp)
    6100187e:	6145                	addi	sp,sp,48
    61001880:	8082                	ret

0000000061001882 <dw_dmac_setLlpEnable>:
/**********************************************************************/
int dw_dmac_setLlpEnable(
	DMA_Channel_TypeDef *Channelx,
        enum   dw_dmac_channel_number ch_num,
        enum   dw_dmac_src_dst_select sd_sel)
{
    61001882:	7179                	addi	sp,sp,-48
    61001884:	f422                	sd	s0,40(sp)
    61001886:	1800                	addi	s0,sp,48
    61001888:	fca43c23          	sd	a0,-40(s0)
    6100188c:	87ae                	mv	a5,a1
    6100188e:	8732                	mv	a4,a2
    61001890:	fcf42a23          	sw	a5,-44(s0)
    61001894:	87ba                	mv	a5,a4
    61001896:	fcf42823          	sw	a5,-48(s0)
    int x, errorCode=1;
    6100189a:	4785                	li	a5,1
    6100189c:	fef42423          	sw	a5,-24(s0)
    BOOL write_en;
    uint32_t reg;
    //struct dw_dmac_param *param;
    if(errorCode == 1) {
    610018a0:	fe842783          	lw	a5,-24(s0)
    610018a4:	0007871b          	sext.w	a4,a5
    610018a8:	4785                	li	a5,1
    610018aa:	08f71e63          	bne	a4,a5,61001946 <dw_dmac_setLlpEnable+0xc4>
        for(x=0;x<num_channels;x++) {
    610018ae:	fe042623          	sw	zero,-20(s0)
    610018b2:	a069                	j	6100193c <dw_dmac_setLlpEnable+0xba>
                write_en = FALSE;
    610018b4:	fe042223          	sw	zero,-28(s0)
                if(sd_sel == Dmac_src || sd_sel == Dmac_src_dst) {
    610018b8:	fd042783          	lw	a5,-48(s0)
    610018bc:	2781                	sext.w	a5,a5
    610018be:	cb81                	beqz	a5,610018ce <dw_dmac_setLlpEnable+0x4c>
    610018c0:	fd042783          	lw	a5,-48(s0)
    610018c4:	0007871b          	sext.w	a4,a5
    610018c8:	4789                	li	a5,2
    610018ca:	02f71463          	bne	a4,a5,610018f2 <dw_dmac_setLlpEnable+0x70>
			Channelx ->CFG_L.RELOAD_SRC = DISABLE;
    610018ce:	fd843783          	ld	a5,-40(s0)
    610018d2:	43b4                	lw	a3,64(a5)
    610018d4:	c0000737          	lui	a4,0xc0000
    610018d8:	177d                	addi	a4,a4,-1
    610018da:	8f75                	and	a4,a4,a3
    610018dc:	c3b8                	sw	a4,64(a5)
                    	Channelx ->CTL_L.LLP_SRC_EN = ENABLE;
    610018de:	fd843783          	ld	a5,-40(s0)
    610018e2:	4f94                	lw	a3,24(a5)
    610018e4:	10000737          	lui	a4,0x10000
    610018e8:	8f55                	or	a4,a4,a3
    610018ea:	cf98                	sw	a4,24(a5)
                        write_en = TRUE;
    610018ec:	4785                	li	a5,1
    610018ee:	fef42223          	sw	a5,-28(s0)
                }
                if(sd_sel == Dmac_dst || sd_sel == Dmac_src_dst) {
    610018f2:	fd042783          	lw	a5,-48(s0)
    610018f6:	0007871b          	sext.w	a4,a5
    610018fa:	4785                	li	a5,1
    610018fc:	00f70963          	beq	a4,a5,6100190e <dw_dmac_setLlpEnable+0x8c>
    61001900:	fd042783          	lw	a5,-48(s0)
    61001904:	0007871b          	sext.w	a4,a5
    61001908:	4789                	li	a5,2
    6100190a:	02f71463          	bne	a4,a5,61001932 <dw_dmac_setLlpEnable+0xb0>
			Channelx ->CFG_L.RELOAD_SRC = DISABLE;
    6100190e:	fd843783          	ld	a5,-40(s0)
    61001912:	43b4                	lw	a3,64(a5)
    61001914:	c0000737          	lui	a4,0xc0000
    61001918:	177d                	addi	a4,a4,-1
    6100191a:	8f75                	and	a4,a4,a3
    6100191c:	c3b8                	sw	a4,64(a5)
                    	Channelx ->CTL_L.LLP_DST_EN  =ENABLE;
    6100191e:	fd843783          	ld	a5,-40(s0)
    61001922:	4f94                	lw	a3,24(a5)
    61001924:	08000737          	lui	a4,0x8000
    61001928:	8f55                	or	a4,a4,a3
    6100192a:	cf98                	sw	a4,24(a5)
                        write_en = TRUE;
    6100192c:	4785                	li	a5,1
    6100192e:	fef42223          	sw	a5,-28(s0)
        for(x=0;x<num_channels;x++) {
    61001932:	fec42783          	lw	a5,-20(s0)
    61001936:	2785                	addiw	a5,a5,1
    61001938:	fef42623          	sw	a5,-20(s0)
    6100193c:	fec42783          	lw	a5,-20(s0)
    61001940:	2781                	sext.w	a5,a5
    61001942:	f6f059e3          	blez	a5,610018b4 <dw_dmac_setLlpEnable+0x32>
                }

        }
    }
    return errorCode;
    61001946:	fe842783          	lw	a5,-24(s0)
}
    6100194a:	853e                	mv	a0,a5
    6100194c:	7422                	ld	s0,40(sp)
    6100194e:	6145                	addi	sp,sp,48
    61001950:	8082                	ret

0000000061001952 <dw_dmac_setListPointerAddress>:
int dw_dmac_setListPointerAddress(
		DMA_Channel_TypeDef *Channelx,
		enum   dw_dmac_channel_number ch_num,
		enum   dw_dmac_LMSmaster_number LMS_master,
		uint32_t address)
{
    61001952:	7139                	addi	sp,sp,-64
    61001954:	fc22                	sd	s0,56(sp)
    61001956:	0080                	addi	s0,sp,64
    61001958:	fca43c23          	sd	a0,-40(s0)
    6100195c:	87ae                	mv	a5,a1
    6100195e:	8736                	mv	a4,a3
    61001960:	fcf42a23          	sw	a5,-44(s0)
    61001964:	87b2                	mv	a5,a2
    61001966:	fcf42823          	sw	a5,-48(s0)
    6100196a:	87ba                	mv	a5,a4
    6100196c:	fcf42623          	sw	a5,-52(s0)
	int errorcode = 1;
    61001970:	4785                	li	a5,1
    61001972:	fef42423          	sw	a5,-24(s0)
	int x         = 0;
    61001976:	fe042623          	sw	zero,-20(s0)
	if(errorcode == 1){
    6100197a:	fe842783          	lw	a5,-24(s0)
    6100197e:	0007871b          	sext.w	a4,a5
    61001982:	4785                	li	a5,1
    61001984:	04f71f63          	bne	a4,a5,610019e2 <dw_dmac_setListPointerAddress+0x90>
		if(Channelx ->LLP_L.LMS != LMS_master1)
    61001988:	fd843783          	ld	a5,-40(s0)
    6100198c:	4b9c                	lw	a5,16(a5)
    6100198e:	8b8d                	andi	a5,a5,3
    61001990:	0ff7f793          	andi	a5,a5,255
    61001994:	c7b9                	beqz	a5,610019e2 <dw_dmac_setListPointerAddress+0x90>
			switch(LMS_master){
    61001996:	fd042783          	lw	a5,-48(s0)
    6100199a:	0007871b          	sext.w	a4,a5
    6100199e:	4789                	li	a5,2
    610019a0:	02f70d63          	beq	a4,a5,610019da <dw_dmac_setListPointerAddress+0x88>
    610019a4:	fd042783          	lw	a5,-48(s0)
    610019a8:	0007871b          	sext.w	a4,a5
    610019ac:	4789                	li	a5,2
    610019ae:	02e7eb63          	bltu	a5,a4,610019e4 <dw_dmac_setListPointerAddress+0x92>
    610019b2:	fd042783          	lw	a5,-48(s0)
    610019b6:	2781                	sext.w	a5,a5
    610019b8:	cb89                	beqz	a5,610019ca <dw_dmac_setListPointerAddress+0x78>
    610019ba:	fd042783          	lw	a5,-48(s0)
    610019be:	0007871b          	sext.w	a4,a5
    610019c2:	4785                	li	a5,1
    610019c4:	00f70763          	beq	a4,a5,610019d2 <dw_dmac_setListPointerAddress+0x80>
    610019c8:	a831                	j	610019e4 <dw_dmac_setListPointerAddress+0x92>
				case 0:
   					Channelx ->LLP_L.LMS != LMS_master1;
    610019ca:	fd843783          	ld	a5,-40(s0)
    610019ce:	4b9c                	lw	a5,16(a5)
				break;
    610019d0:	a811                	j	610019e4 <dw_dmac_setListPointerAddress+0x92>
				case 1:
					Channelx ->LLP_L.LMS != LMS_master2;
    610019d2:	fd843783          	ld	a5,-40(s0)
    610019d6:	4b9c                	lw	a5,16(a5)
				break;
    610019d8:	a031                	j	610019e4 <dw_dmac_setListPointerAddress+0x92>
				case 2:
   					Channelx ->LLP_L.LMS != LMS_master3;
    610019da:	fd843783          	ld	a5,-40(s0)
    610019de:	4b9c                	lw	a5,16(a5)
				break;
    610019e0:	a011                	j	610019e4 <dw_dmac_setListPointerAddress+0x92>
				defulat:
   					Channelx ->LLP_L.LMS != LMS_master4;
				break;

    }
}
    610019e2:	0001                	nop
	if(errorcode == 1){
    610019e4:	fe842783          	lw	a5,-24(s0)
    610019e8:	0007871b          	sext.w	a4,a5
    610019ec:	4785                	li	a5,1
    610019ee:	08f71663          	bne	a4,a5,61001a7a <dw_dmac_setListPointerAddress+0x128>
		for(x = 0 ; x < ch_num ; x++){
    610019f2:	fe042623          	sw	zero,-20(s0)
    610019f6:	a89d                	j	61001a6c <dw_dmac_setListPointerAddress+0x11a>
			if(Channelx -> LLP_L.LOC != address){
    610019f8:	fd843783          	ld	a5,-40(s0)
    610019fc:	4b9c                	lw	a5,16(a5)
    610019fe:	0027d79b          	srliw	a5,a5,0x2
    61001a02:	2781                	sext.w	a5,a5
    61001a04:	873e                	mv	a4,a5
    61001a06:	fcc42783          	lw	a5,-52(s0)
    61001a0a:	2781                	sext.w	a5,a5
    61001a0c:	02e78763          	beq	a5,a4,61001a3a <dw_dmac_setListPointerAddress+0xe8>
				Channelx -> LLP_L.LOC =((uint32_t) address >> 2);
    61001a10:	fcc42783          	lw	a5,-52(s0)
    61001a14:	0027d79b          	srliw	a5,a5,0x2
    61001a18:	0007871b          	sext.w	a4,a5
    61001a1c:	400007b7          	lui	a5,0x40000
    61001a20:	17fd                	addi	a5,a5,-1
    61001a22:	8ff9                	and	a5,a5,a4
    61001a24:	0007871b          	sext.w	a4,a5
    61001a28:	fd843783          	ld	a5,-40(s0)
    61001a2c:	0027171b          	slliw	a4,a4,0x2
    61001a30:	4b94                	lw	a3,16(a5)
    61001a32:	8a8d                	andi	a3,a3,3
    61001a34:	8f55                	or	a4,a4,a3
    61001a36:	cb98                	sw	a4,16(a5)
    61001a38:	a02d                	j	61001a62 <dw_dmac_setListPointerAddress+0x110>
	    }
		else{
			Channelx -> LLP_L.LOC =((uint32_t) address >> 2);
    61001a3a:	fcc42783          	lw	a5,-52(s0)
    61001a3e:	0027d79b          	srliw	a5,a5,0x2
    61001a42:	0007871b          	sext.w	a4,a5
    61001a46:	400007b7          	lui	a5,0x40000
    61001a4a:	17fd                	addi	a5,a5,-1
    61001a4c:	8ff9                	and	a5,a5,a4
    61001a4e:	0007871b          	sext.w	a4,a5
    61001a52:	fd843783          	ld	a5,-40(s0)
    61001a56:	0027171b          	slliw	a4,a4,0x2
    61001a5a:	4b94                	lw	a3,16(a5)
    61001a5c:	8a8d                	andi	a3,a3,3
    61001a5e:	8f55                	or	a4,a4,a3
    61001a60:	cb98                	sw	a4,16(a5)
		for(x = 0 ; x < ch_num ; x++){
    61001a62:	fec42783          	lw	a5,-20(s0)
    61001a66:	2785                	addiw	a5,a5,1
    61001a68:	fef42623          	sw	a5,-20(s0)
    61001a6c:	fec42703          	lw	a4,-20(s0)
    61001a70:	fd442783          	lw	a5,-44(s0)
    61001a74:	2781                	sext.w	a5,a5
    61001a76:	f8f761e3          	bltu	a4,a5,610019f8 <dw_dmac_setListPointerAddress+0xa6>
	    }
        }
    }
	return errorcode;
    61001a7a:	fe842783          	lw	a5,-24(s0)
}
    61001a7e:	853e                	mv	a0,a5
    61001a80:	7462                	ld	s0,56(sp)
    61001a82:	6121                	addi	sp,sp,64
    61001a84:	8082                	ret

0000000061001a86 <dw_dmac_checkChannelBusy>:
#endif
/**********************************************************************/
int dw_dmac_checkChannelBusy(
        DMAC_AL9000_TypeDef *DMAC,
        enum   dw_dmac_channel_number ch_num)
{
    61001a86:	7179                	addi	sp,sp,-48
    61001a88:	f422                	sd	s0,40(sp)
    61001a8a:	1800                	addi	s0,sp,48
    61001a8c:	fca43c23          	sd	a0,-40(s0)
    61001a90:	87ae                	mv	a5,a1
    61001a92:	fcf42a23          	sw	a5,-44(s0)
    int errorCode = 1;
    61001a96:	4785                	li	a5,1
    61001a98:	fef42623          	sw	a5,-20(s0)

    DMAC -> ChEnReg_L |= DMAC_ChEnReg_L_CH1_EN;
    61001a9c:	fd843783          	ld	a5,-40(s0)
    61001aa0:	0e07a783          	lw	a5,224(a5) # 400000e0 <__stack_size+0x3ffff8e0>
    61001aa4:	2781                	sext.w	a5,a5
    61001aa6:	1017e793          	ori	a5,a5,257
    61001aaa:	0007871b          	sext.w	a4,a5
    61001aae:	fd843783          	ld	a5,-40(s0)
    61001ab2:	0ee7a023          	sw	a4,224(a5)

    return errorCode;
    61001ab6:	fec42783          	lw	a5,-20(s0)
}
    61001aba:	853e                	mv	a0,a5
    61001abc:	7422                	ld	s0,40(sp)
    61001abe:	6145                	addi	sp,sp,48
    61001ac0:	8082                	ret

0000000061001ac2 <write_To_OCM>:

void write_To_OCM(uint32_t* pSnAddr, uint32_t Count, uint32_t* pDnAddr)
{
    61001ac2:	7139                	addi	sp,sp,-64
    61001ac4:	fc22                	sd	s0,56(sp)
    61001ac6:	0080                	addi	s0,sp,64
    61001ac8:	fca43c23          	sd	a0,-40(s0)
    61001acc:	87ae                	mv	a5,a1
    61001ace:	fcc43423          	sd	a2,-56(s0)
    61001ad2:	fcf42a23          	sw	a5,-44(s0)
    volatile uint32_t i;
    if (Count < 0 || Count == 0) return;
    61001ad6:	fd442783          	lw	a5,-44(s0)
    61001ada:	2781                	sext.w	a5,a5
    61001adc:	c3b9                	beqz	a5,61001b22 <write_To_OCM+0x60>
    for (i = 0; i < Count; i++)
    61001ade:	fe042623          	sw	zero,-20(s0)
    61001ae2:	a035                	j	61001b0e <write_To_OCM+0x4c>
    {
        *pDnAddr++ = *pSnAddr++;
    61001ae4:	fd843703          	ld	a4,-40(s0)
    61001ae8:	00470793          	addi	a5,a4,4 # 8000004 <__stack_size+0x7fff804>
    61001aec:	fcf43c23          	sd	a5,-40(s0)
    61001af0:	fc843783          	ld	a5,-56(s0)
    61001af4:	00478693          	addi	a3,a5,4
    61001af8:	fcd43423          	sd	a3,-56(s0)
    61001afc:	4318                	lw	a4,0(a4)
    61001afe:	c398                	sw	a4,0(a5)
    for (i = 0; i < Count; i++)
    61001b00:	fec42783          	lw	a5,-20(s0)
    61001b04:	2781                	sext.w	a5,a5
    61001b06:	2785                	addiw	a5,a5,1
    61001b08:	2781                	sext.w	a5,a5
    61001b0a:	fef42623          	sw	a5,-20(s0)
    61001b0e:	fec42783          	lw	a5,-20(s0)
    61001b12:	0007871b          	sext.w	a4,a5
    61001b16:	fd442783          	lw	a5,-44(s0)
    61001b1a:	2781                	sext.w	a5,a5
    61001b1c:	fcf764e3          	bltu	a4,a5,61001ae4 <write_To_OCM+0x22>
    61001b20:	a011                	j	61001b24 <write_To_OCM+0x62>
    if (Count < 0 || Count == 0) return;
    61001b22:	0001                	nop
    }
}
    61001b24:	7462                	ld	s0,56(sp)
    61001b26:	6121                	addi	sp,sp,64
    61001b28:	8082                	ret

0000000061001b2a <AL9000_uart_init>:
    \param  baudrate: uart buadrate
    \param  bit_length: bit length (5/6/7/8)
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t AL9000_uart_init(UART_AL9000_TypeDef *uart, uint32_t baudrate,AL9000_UART_BIT_LENGTH bit_length, AL9000_UART_STOP_BIT stopbit)
{
    61001b2a:	7179                	addi	sp,sp,-48
    61001b2c:	f406                	sd	ra,40(sp)
    61001b2e:	f022                	sd	s0,32(sp)
    61001b30:	1800                	addi	s0,sp,48
    61001b32:	fea43423          	sd	a0,-24(s0)
    61001b36:	87ae                	mv	a5,a1
    61001b38:	8736                	mv	a4,a3
    61001b3a:	fef42223          	sw	a5,-28(s0)
    61001b3e:	87b2                	mv	a5,a2
    61001b40:	fef42023          	sw	a5,-32(s0)
    61001b44:	87ba                	mv	a5,a4
    61001b46:	fcf42e23          	sw	a5,-36(s0)
    if (__RARELY(uart == NULL)) {
    61001b4a:	fe843783          	ld	a5,-24(s0)
    61001b4e:	0017b793          	seqz	a5,a5
    61001b52:	0ff7f793          	andi	a5,a5,255
    61001b56:	c399                	beqz	a5,61001b5c <AL9000_uart_init+0x32>
        return -1;
    61001b58:	57fd                	li	a5,-1
    61001b5a:	a889                	j	61001bac <AL9000_uart_init+0x82>
    }
    setvbuf(stdout, NULL, _IONBF, 0);
    61001b5c:	81018793          	addi	a5,gp,-2032 # 610100c0 <_impure_ptr>
    61001b60:	639c                	ld	a5,0(a5)
    61001b62:	6b9c                	ld	a5,16(a5)
    61001b64:	4681                	li	a3,0
    61001b66:	4609                	li	a2,2
    61001b68:	4581                	li	a1,0
    61001b6a:	853e                	mv	a0,a5
    61001b6c:	3da010ef          	jal	ra,61002f46 <setvbuf>
    AL9000_uart_enablePtime(uart);					//enable programmable THR empty mode
    61001b70:	fe843503          	ld	a0,-24(s0)
    61001b74:	328000ef          	jal	ra,61001e9c <AL9000_uart_enablePtime>
    AL9000_uart_set_baudrate(uart, baudrate);		//set_baudrate
    61001b78:	fe442783          	lw	a5,-28(s0)
    61001b7c:	85be                	mv	a1,a5
    61001b7e:	fe843503          	ld	a0,-24(s0)
    61001b82:	034000ef          	jal	ra,61001bb6 <AL9000_uart_set_baudrate>
    AL9000_uart_dataleng_config(uart,bit_length);	//set_dataleng
    61001b86:	fe042783          	lw	a5,-32(s0)
    61001b8a:	85be                	mv	a1,a5
    61001b8c:	fe843503          	ld	a0,-24(s0)
    61001b90:	0f0000ef          	jal	ra,61001c80 <AL9000_uart_dataleng_config>
    AL9000_uart_config_stopbit(uart,stopbit);		//set_stopbit
    61001b94:	fdc42783          	lw	a5,-36(s0)
    61001b98:	85be                	mv	a1,a5
    61001b9a:	fe843503          	ld	a0,-24(s0)
    61001b9e:	18a000ef          	jal	ra,61001d28 <AL9000_uart_config_stopbit>
    AL9000_uart_fifo_enable(uart);
    61001ba2:	fe843503          	ld	a0,-24(s0)
    61001ba6:	218000ef          	jal	ra,61001dbe <AL9000_uart_fifo_enable>
    return 0;
    61001baa:	4781                	li	a5,0
}
    61001bac:	853e                	mv	a0,a5
    61001bae:	70a2                	ld	ra,40(sp)
    61001bb0:	7402                	ld	s0,32(sp)
    61001bb2:	6145                	addi	sp,sp,48
    61001bb4:	8082                	ret

0000000061001bb6 <AL9000_uart_set_baudrate>:
uint8_t AL9000_uart_set_baudrate(UART_AL9000_TypeDef *uart, uint32_t baudrate){
    61001bb6:	1101                	addi	sp,sp,-32
    61001bb8:	ec22                	sd	s0,24(sp)
    61001bba:	1000                	addi	s0,sp,32
    61001bbc:	fea43423          	sd	a0,-24(s0)
    61001bc0:	87ae                	mv	a5,a1
    61001bc2:	fef42223          	sw	a5,-28(s0)
    uart->LCR 		 |= UART_REG_LCR_DLAB_MASK ;
    61001bc6:	fe843783          	ld	a5,-24(s0)
    61001bca:	47dc                	lw	a5,12(a5)
    61001bcc:	2781                	sext.w	a5,a5
    61001bce:	0807e793          	ori	a5,a5,128
    61001bd2:	0007871b          	sext.w	a4,a5
    61001bd6:	fe843783          	ld	a5,-24(s0)
    61001bda:	c7d8                	sw	a4,12(a5)
    uart->DLH_IER 	  = ((uint16_t)(SystemCoreClock / (baudrate*16))) >> 8 ;
    61001bdc:	0000e797          	auipc	a5,0xe
    61001be0:	4dc78793          	addi	a5,a5,1244 # 610100b8 <SystemCoreClock>
    61001be4:	4398                	lw	a4,0(a5)
    61001be6:	fe442783          	lw	a5,-28(s0)
    61001bea:	0047979b          	slliw	a5,a5,0x4
    61001bee:	2781                	sext.w	a5,a5
    61001bf0:	02f757bb          	divuw	a5,a4,a5
    61001bf4:	2781                	sext.w	a5,a5
    61001bf6:	17c2                	slli	a5,a5,0x30
    61001bf8:	93c1                	srli	a5,a5,0x30
    61001bfa:	0087d79b          	srliw	a5,a5,0x8
    61001bfe:	17c2                	slli	a5,a5,0x30
    61001c00:	93c1                	srli	a5,a5,0x30
    61001c02:	0007871b          	sext.w	a4,a5
    61001c06:	fe843783          	ld	a5,-24(s0)
    61001c0a:	c3d8                	sw	a4,4(a5)
    uart->RBR_THR_DLL = ((uint8_t)(SystemCoreClock / (baudrate*16))) ;
    61001c0c:	0000e797          	auipc	a5,0xe
    61001c10:	4ac78793          	addi	a5,a5,1196 # 610100b8 <SystemCoreClock>
    61001c14:	4398                	lw	a4,0(a5)
    61001c16:	fe442783          	lw	a5,-28(s0)
    61001c1a:	0047979b          	slliw	a5,a5,0x4
    61001c1e:	2781                	sext.w	a5,a5
    61001c20:	02f757bb          	divuw	a5,a4,a5
    61001c24:	2781                	sext.w	a5,a5
    61001c26:	0ff7f793          	andi	a5,a5,255
    61001c2a:	0007871b          	sext.w	a4,a5
    61001c2e:	fe843783          	ld	a5,-24(s0)
    61001c32:	c398                	sw	a4,0(a5)
    uart->MCR 		 |= UART_REG_MCR_DTR_MASK;
    61001c34:	fe843783          	ld	a5,-24(s0)
    61001c38:	4b9c                	lw	a5,16(a5)
    61001c3a:	2781                	sext.w	a5,a5
    61001c3c:	0017e793          	ori	a5,a5,1
    61001c40:	0007871b          	sext.w	a4,a5
    61001c44:	fe843783          	ld	a5,-24(s0)
    61001c48:	cb98                	sw	a4,16(a5)
    uart->MCR 		 |= UART_REG_MCR_RTS_MASK;
    61001c4a:	fe843783          	ld	a5,-24(s0)
    61001c4e:	4b9c                	lw	a5,16(a5)
    61001c50:	2781                	sext.w	a5,a5
    61001c52:	0027e793          	ori	a5,a5,2
    61001c56:	0007871b          	sext.w	a4,a5
    61001c5a:	fe843783          	ld	a5,-24(s0)
    61001c5e:	cb98                	sw	a4,16(a5)
    uart->LCR 		 &= (uint8_t)(0x7f);
    61001c60:	fe843783          	ld	a5,-24(s0)
    61001c64:	47dc                	lw	a5,12(a5)
    61001c66:	2781                	sext.w	a5,a5
    61001c68:	07f7f793          	andi	a5,a5,127
    61001c6c:	0007871b          	sext.w	a4,a5
    61001c70:	fe843783          	ld	a5,-24(s0)
    61001c74:	c7d8                	sw	a4,12(a5)
    return 0;
    61001c76:	4781                	li	a5,0
}
    61001c78:	853e                	mv	a0,a5
    61001c7a:	6462                	ld	s0,24(sp)
    61001c7c:	6105                	addi	sp,sp,32
    61001c7e:	8082                	ret

0000000061001c80 <AL9000_uart_dataleng_config>:
uint8_t AL9000_uart_dataleng_config(UART_AL9000_TypeDef *uart,AL9000_UART_BIT_LENGTH bit_length){
    61001c80:	1101                	addi	sp,sp,-32
    61001c82:	ec22                	sd	s0,24(sp)
    61001c84:	1000                	addi	s0,sp,32
    61001c86:	fea43423          	sd	a0,-24(s0)
    61001c8a:	87ae                	mv	a5,a1
    61001c8c:	fef42223          	sw	a5,-28(s0)
	switch (bit_length)
    61001c90:	fe442783          	lw	a5,-28(s0)
    61001c94:	0007871b          	sext.w	a4,a5
    61001c98:	4789                	li	a5,2
    61001c9a:	04f70a63          	beq	a4,a5,61001cee <AL9000_uart_dataleng_config+0x6e>
    61001c9e:	fe442783          	lw	a5,-28(s0)
    61001ca2:	0007871b          	sext.w	a4,a5
    61001ca6:	4789                	li	a5,2
    61001ca8:	04e7ef63          	bltu	a5,a4,61001d06 <AL9000_uart_dataleng_config+0x86>
    61001cac:	fe442783          	lw	a5,-28(s0)
    61001cb0:	2781                	sext.w	a5,a5
    61001cb2:	cb89                	beqz	a5,61001cc4 <AL9000_uart_dataleng_config+0x44>
    61001cb4:	fe442783          	lw	a5,-28(s0)
    61001cb8:	0007871b          	sext.w	a4,a5
    61001cbc:	4785                	li	a5,1
    61001cbe:	00f70c63          	beq	a4,a5,61001cd6 <AL9000_uart_dataleng_config+0x56>
    61001cc2:	a091                	j	61001d06 <AL9000_uart_dataleng_config+0x86>
	    {
	    case 0:
	    	uart->LCR |= UART_REG_LCR_DLS_5BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61001cc4:	fe843783          	ld	a5,-24(s0)
    61001cc8:	47dc                	lw	a5,12(a5)
    61001cca:	0007871b          	sext.w	a4,a5
    61001cce:	fe843783          	ld	a5,-24(s0)
    61001cd2:	c7d8                	sw	a4,12(a5)
	    	break;
    61001cd4:	a0a9                	j	61001d1e <AL9000_uart_dataleng_config+0x9e>
	    case 1:
	    	uart->LCR |= UART_REG_LCR_DLS_6BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61001cd6:	fe843783          	ld	a5,-24(s0)
    61001cda:	47dc                	lw	a5,12(a5)
    61001cdc:	2781                	sext.w	a5,a5
    61001cde:	0017e793          	ori	a5,a5,1
    61001ce2:	0007871b          	sext.w	a4,a5
    61001ce6:	fe843783          	ld	a5,-24(s0)
    61001cea:	c7d8                	sw	a4,12(a5)
	    	break;
    61001cec:	a80d                	j	61001d1e <AL9000_uart_dataleng_config+0x9e>
	    case 2:
	        uart->LCR |= UART_REG_LCR_DLS_7BITS;//(bit_length<<UART_REG_LCR_DLS) & UART_REG_LCR_DLS_MASK;
    61001cee:	fe843783          	ld	a5,-24(s0)
    61001cf2:	47dc                	lw	a5,12(a5)
    61001cf4:	2781                	sext.w	a5,a5
    61001cf6:	0027e793          	ori	a5,a5,2
    61001cfa:	0007871b          	sext.w	a4,a5
    61001cfe:	fe843783          	ld	a5,-24(s0)
    61001d02:	c7d8                	sw	a4,12(a5)
	        break;
    61001d04:	a829                	j	61001d1e <AL9000_uart_dataleng_config+0x9e>
	    default:
	    	uart->LCR |= UART_REG_LCR_DLS_8BITS;
    61001d06:	fe843783          	ld	a5,-24(s0)
    61001d0a:	47dc                	lw	a5,12(a5)
    61001d0c:	2781                	sext.w	a5,a5
    61001d0e:	0037e793          	ori	a5,a5,3
    61001d12:	0007871b          	sext.w	a4,a5
    61001d16:	fe843783          	ld	a5,-24(s0)
    61001d1a:	c7d8                	sw	a4,12(a5)
	    	break;
    61001d1c:	0001                	nop
	    }
	return 0;
    61001d1e:	4781                	li	a5,0
}
    61001d20:	853e                	mv	a0,a5
    61001d22:	6462                	ld	s0,24(sp)
    61001d24:	6105                	addi	sp,sp,32
    61001d26:	8082                	ret

0000000061001d28 <AL9000_uart_config_stopbit>:
    \param  uart: uart parameter stuct
    \param  stopbit: stop bit (1/2/0.5/1.5)
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t AL9000_uart_config_stopbit(UART_AL9000_TypeDef *uart, AL9000_UART_STOP_BIT stopbit)
{
    61001d28:	1101                	addi	sp,sp,-32
    61001d2a:	ec22                	sd	s0,24(sp)
    61001d2c:	1000                	addi	s0,sp,32
    61001d2e:	fea43423          	sd	a0,-24(s0)
    61001d32:	87ae                	mv	a5,a1
    61001d34:	fef42223          	sw	a5,-28(s0)
   if (__RARELY(uart == NULL)) {
    61001d38:	fe843783          	ld	a5,-24(s0)
    61001d3c:	0017b793          	seqz	a5,a5
    61001d40:	0ff7f793          	andi	a5,a5,255
    61001d44:	c399                	beqz	a5,61001d4a <AL9000_uart_config_stopbit+0x22>
        return -1;
    61001d46:	57fd                	li	a5,-1
    61001d48:	a0bd                	j	61001db6 <AL9000_uart_config_stopbit+0x8e>
    }
   switch(stopbit)
    61001d4a:	fe442783          	lw	a5,-28(s0)
    61001d4e:	2781                	sext.w	a5,a5
    61001d50:	cb89                	beqz	a5,61001d62 <AL9000_uart_config_stopbit+0x3a>
    61001d52:	fe442783          	lw	a5,-28(s0)
    61001d56:	0007871b          	sext.w	a4,a5
    61001d5a:	4785                	li	a5,1
    61001d5c:	00f70c63          	beq	a4,a5,61001d74 <AL9000_uart_config_stopbit+0x4c>
    61001d60:	a835                	j	61001d9c <AL9000_uart_config_stopbit+0x74>
      {
      case 0:
   	   uart->LCR |=  UART_REG_LCR_STOP_1BITS;
    61001d62:	fe843783          	ld	a5,-24(s0)
    61001d66:	47dc                	lw	a5,12(a5)
    61001d68:	0007871b          	sext.w	a4,a5
    61001d6c:	fe843783          	ld	a5,-24(s0)
    61001d70:	c7d8                	sw	a4,12(a5)
   	   break;
    61001d72:	a089                	j	61001db4 <AL9000_uart_config_stopbit+0x8c>
      case 1:
   	   uart->LCR &= ~UART_REG_LCR_DLS_5BITS;
    61001d74:	fe843783          	ld	a5,-24(s0)
    61001d78:	47dc                	lw	a5,12(a5)
    61001d7a:	0007871b          	sext.w	a4,a5
    61001d7e:	fe843783          	ld	a5,-24(s0)
    61001d82:	c7d8                	sw	a4,12(a5)
   	   uart->LCR |=  UART_REG_LCR_STOP_2BITS;
    61001d84:	fe843783          	ld	a5,-24(s0)
    61001d88:	47dc                	lw	a5,12(a5)
    61001d8a:	2781                	sext.w	a5,a5
    61001d8c:	0047e793          	ori	a5,a5,4
    61001d90:	0007871b          	sext.w	a4,a5
    61001d94:	fe843783          	ld	a5,-24(s0)
    61001d98:	c7d8                	sw	a4,12(a5)
   	   break;
    61001d9a:	a829                	j	61001db4 <AL9000_uart_config_stopbit+0x8c>
      default:
   	   uart->LCR |=  UART_REG_LCR_STOP_2BITS;
    61001d9c:	fe843783          	ld	a5,-24(s0)
    61001da0:	47dc                	lw	a5,12(a5)
    61001da2:	2781                	sext.w	a5,a5
    61001da4:	0047e793          	ori	a5,a5,4
    61001da8:	0007871b          	sext.w	a4,a5
    61001dac:	fe843783          	ld	a5,-24(s0)
    61001db0:	c7d8                	sw	a4,12(a5)
   	   break;
    61001db2:	0001                	nop
      }
    return 0;
    61001db4:	4781                	li	a5,0
}
    61001db6:	853e                	mv	a0,a5
    61001db8:	6462                	ld	s0,24(sp)
    61001dba:	6105                	addi	sp,sp,32
    61001dbc:	8082                	ret

0000000061001dbe <AL9000_uart_fifo_enable>:
    \brief  uart FIFOF enable
    \param  uart: uart parameter stuct
    \retval FCR:  value
*/
uint8_t AL9000_uart_fifo_enable(UART_AL9000_TypeDef *uart)
{
    61001dbe:	1101                	addi	sp,sp,-32
    61001dc0:	ec22                	sd	s0,24(sp)
    61001dc2:	1000                	addi	s0,sp,32
    61001dc4:	fea43423          	sd	a0,-24(s0)

    if (__RARELY(uart == NULL)) {
    61001dc8:	fe843783          	ld	a5,-24(s0)
    61001dcc:	0017b793          	seqz	a5,a5
    61001dd0:	0ff7f793          	andi	a5,a5,255
    61001dd4:	c781                	beqz	a5,61001ddc <AL9000_uart_fifo_enable+0x1e>
        return -1;
    61001dd6:	0ff00793          	li	a5,255
    61001dda:	a031                	j	61001de6 <AL9000_uart_fifo_enable+0x28>
    }
    uart ->IIR_FCR = UART_REG_FCR_FIFOE_MASK;
    61001ddc:	fe843783          	ld	a5,-24(s0)
    61001de0:	4705                	li	a4,1
    61001de2:	c798                	sw	a4,8(a5)
    return 0;
    61001de4:	4781                	li	a5,0
}
    61001de6:	853e                	mv	a0,a5
    61001de8:	6462                	ld	s0,24(sp)
    61001dea:	6105                	addi	sp,sp,32
    61001dec:	8082                	ret

0000000061001dee <uart_write>:
    \param  uart: uart parameter stuct
    \param  val: value of TXFIFO
    \retval 0,if uart!=null; otherwise -1;
*/
int32_t uart_write(UART_AL9000_TypeDef *uart, volatile uint8_t val)
{
    61001dee:	1101                	addi	sp,sp,-32
    61001df0:	ec22                	sd	s0,24(sp)
    61001df2:	1000                	addi	s0,sp,32
    61001df4:	fea43423          	sd	a0,-24(s0)
    61001df8:	87ae                	mv	a5,a1
    61001dfa:	fef403a3          	sb	a5,-25(s0)
   if (__RARELY(uart == NULL)) {
    61001dfe:	fe843783          	ld	a5,-24(s0)
    61001e02:	0017b793          	seqz	a5,a5
    61001e06:	0ff7f793          	andi	a5,a5,255
    61001e0a:	c399                	beqz	a5,61001e10 <uart_write+0x22>
        return -1;
    61001e0c:	57fd                	li	a5,-1
    61001e0e:	a025                	j	61001e36 <uart_write+0x48>
    }
	   while (uart->LSR & 0x20);
    61001e10:	0001                	nop
    61001e12:	fe843783          	ld	a5,-24(s0)
    61001e16:	4bdc                	lw	a5,20(a5)
    61001e18:	2781                	sext.w	a5,a5
    61001e1a:	0207f793          	andi	a5,a5,32
    61001e1e:	2781                	sext.w	a5,a5
    61001e20:	fbed                	bnez	a5,61001e12 <uart_write+0x24>
	   uart ->RBR_THR_DLL = val & 0xFF ;
    61001e22:	fe744783          	lbu	a5,-25(s0)
    61001e26:	0ff7f793          	andi	a5,a5,255
    61001e2a:	0007871b          	sext.w	a4,a5
    61001e2e:	fe843783          	ld	a5,-24(s0)
    61001e32:	c398                	sw	a4,0(a5)
    return 0;
    61001e34:	4781                	li	a5,0
}
    61001e36:	853e                	mv	a0,a5
    61001e38:	6462                	ld	s0,24(sp)
    61001e3a:	6105                	addi	sp,sp,32
    61001e3c:	8082                	ret

0000000061001e3e <uart_read>:
    \brief  uart RXFIFO receive
    \param  uart: uart parameter stuct
    \retval RXFIFO value
*/
uint8_t uart_read(UART_AL9000_TypeDef *uart)
{
    61001e3e:	7179                	addi	sp,sp,-48
    61001e40:	f406                	sd	ra,40(sp)
    61001e42:	f022                	sd	s0,32(sp)
    61001e44:	1800                	addi	s0,sp,48
    61001e46:	fca43c23          	sd	a0,-40(s0)
    uint32_t reg;
    if (__RARELY(uart == NULL)) {
    61001e4a:	fd843783          	ld	a5,-40(s0)
    61001e4e:	0017b793          	seqz	a5,a5
    61001e52:	0ff7f793          	andi	a5,a5,255
    61001e56:	c781                	beqz	a5,61001e5e <uart_read+0x20>
        return -1;
    61001e58:	0ff00793          	li	a5,255
    61001e5c:	a81d                	j	61001e92 <uart_read+0x54>
    }
    while ( 0 == ((uart ->LSR) & 0x01));
    61001e5e:	0001                	nop
    61001e60:	fd843783          	ld	a5,-40(s0)
    61001e64:	4bdc                	lw	a5,20(a5)
    61001e66:	2781                	sext.w	a5,a5
    61001e68:	8b85                	andi	a5,a5,1
    61001e6a:	2781                	sext.w	a5,a5
    61001e6c:	dbf5                	beqz	a5,61001e60 <uart_read+0x22>
    reg = uart ->RBR_THR_DLL;
    61001e6e:	fd843783          	ld	a5,-40(s0)
    61001e72:	439c                	lw	a5,0(a5)
    61001e74:	fef42623          	sw	a5,-20(s0)
    printf("reg_interrupt %.2x\r\n",reg);
    61001e78:	fec42783          	lw	a5,-20(s0)
    61001e7c:	85be                	mv	a1,a5
    61001e7e:	00002517          	auipc	a0,0x2
    61001e82:	54250513          	addi	a0,a0,1346 # 610043c0 <_read_r+0xb6>
    61001e86:	793000ef          	jal	ra,61002e18 <iprintf>
    return (uint8_t)(reg & 0xFF);
    61001e8a:	fec42783          	lw	a5,-20(s0)
    61001e8e:	0ff7f793          	andi	a5,a5,255
}
    61001e92:	853e                	mv	a0,a5
    61001e94:	70a2                	ld	ra,40(sp)
    61001e96:	7402                	ld	s0,32(sp)
    61001e98:	6145                	addi	sp,sp,48
    61001e9a:	8082                	ret

0000000061001e9c <AL9000_uart_enablePtime>:
	return dmac_handshake;
}
/**********************************************************************/

int AL9000_uart_enablePtime(UART_AL9000_TypeDef *uart) //enable THRE Mode
{
    61001e9c:	1101                	addi	sp,sp,-32
    61001e9e:	ec22                	sd	s0,24(sp)
    61001ea0:	1000                	addi	s0,sp,32
    61001ea2:	fea43423          	sd	a0,-24(s0)
	if (__RARELY(uart == NULL)) {
    61001ea6:	fe843783          	ld	a5,-24(s0)
    61001eaa:	0017b793          	seqz	a5,a5
    61001eae:	0ff7f793          	andi	a5,a5,255
    61001eb2:	c399                	beqz	a5,61001eb8 <AL9000_uart_enablePtime+0x1c>
	        return -1;
    61001eb4:	57fd                	li	a5,-1
    61001eb6:	a829                	j	61001ed0 <AL9000_uart_enablePtime+0x34>
	    }
	uart ->DLH_IER |=UART_REG_IER_PTIME_MASK;
    61001eb8:	fe843783          	ld	a5,-24(s0)
    61001ebc:	43dc                	lw	a5,4(a5)
    61001ebe:	2781                	sext.w	a5,a5
    61001ec0:	0807e793          	ori	a5,a5,128
    61001ec4:	0007871b          	sext.w	a4,a5
    61001ec8:	fe843783          	ld	a5,-24(s0)
    61001ecc:	c3d8                	sw	a4,4(a5)
    return 0;
    61001ece:	4781                	li	a5,0
}
    61001ed0:	853e                	mv	a0,a5
    61001ed2:	6462                	ld	s0,24(sp)
    61001ed4:	6105                	addi	sp,sp,32
    61001ed6:	8082                	ret

0000000061001ed8 <_close>:

#undef errno
extern int errno;

__WEAK int _close(int fd)
{
    61001ed8:	1101                	addi	sp,sp,-32
    61001eda:	ec22                	sd	s0,24(sp)
    61001edc:	1000                	addi	s0,sp,32
    61001ede:	87aa                	mv	a5,a0
    61001ee0:	fef42623          	sw	a5,-20(s0)
    errno = EBADF;
    61001ee4:	9b818793          	addi	a5,gp,-1608 # 61010268 <errno>
    61001ee8:	4725                	li	a4,9
    61001eea:	c398                	sw	a4,0(a5)
    return -1;
    61001eec:	57fd                	li	a5,-1
}
    61001eee:	853e                	mv	a0,a5
    61001ef0:	6462                	ld	s0,24(sp)
    61001ef2:	6105                	addi	sp,sp,32
    61001ef4:	8082                	ret

0000000061001ef6 <_fstat>:

#undef errno
extern int errno;

__WEAK int _fstat(int file, struct stat* st)
{
    61001ef6:	1101                	addi	sp,sp,-32
    61001ef8:	ec22                	sd	s0,24(sp)
    61001efa:	1000                	addi	s0,sp,32
    61001efc:	87aa                	mv	a5,a0
    61001efe:	feb43023          	sd	a1,-32(s0)
    61001f02:	fef42623          	sw	a5,-20(s0)
    if ((STDOUT_FILENO == file) || (STDERR_FILENO == file)) {
    61001f06:	fec42783          	lw	a5,-20(s0)
    61001f0a:	0007871b          	sext.w	a4,a5
    61001f0e:	4785                	li	a5,1
    61001f10:	00f70963          	beq	a4,a5,61001f22 <_fstat+0x2c>
    61001f14:	fec42783          	lw	a5,-20(s0)
    61001f18:	0007871b          	sext.w	a4,a5
    61001f1c:	4789                	li	a5,2
    61001f1e:	00f71863          	bne	a4,a5,61001f2e <_fstat+0x38>
        st->st_mode = S_IFCHR;
    61001f22:	fe043783          	ld	a5,-32(s0)
    61001f26:	6709                	lui	a4,0x2
    61001f28:	c3d8                	sw	a4,4(a5)
        return 0;
    61001f2a:	4781                	li	a5,0
    61001f2c:	a031                	j	61001f38 <_fstat+0x42>
    } else {
        errno = EBADF;
    61001f2e:	9b818793          	addi	a5,gp,-1608 # 61010268 <errno>
    61001f32:	4725                	li	a4,9
    61001f34:	c398                	sw	a4,0(a5)
        return -1;
    61001f36:	57fd                	li	a5,-1
    }
}
    61001f38:	853e                	mv	a0,a5
    61001f3a:	6462                	ld	s0,24(sp)
    61001f3c:	6105                	addi	sp,sp,32
    61001f3e:	8082                	ret

0000000061001f40 <_isatty>:
/* See LICENSE of license details. */
#include "nuclei_sdk_soc.h"
#include <unistd.h>

__WEAK int _isatty(int fd)
{
    61001f40:	1101                	addi	sp,sp,-32
    61001f42:	ec22                	sd	s0,24(sp)
    61001f44:	1000                	addi	s0,sp,32
    61001f46:	87aa                	mv	a5,a0
    61001f48:	fef42623          	sw	a5,-20(s0)
    return 1;
    61001f4c:	4785                	li	a5,1
}
    61001f4e:	853e                	mv	a0,a5
    61001f50:	6462                	ld	s0,24(sp)
    61001f52:	6105                	addi	sp,sp,32
    61001f54:	8082                	ret

0000000061001f56 <_lseek>:

#undef errno
extern int errno;

__WEAK int _lseek(int file, int offset, int whence)
{
    61001f56:	1101                	addi	sp,sp,-32
    61001f58:	ec22                	sd	s0,24(sp)
    61001f5a:	1000                	addi	s0,sp,32
    61001f5c:	87aa                	mv	a5,a0
    61001f5e:	86ae                	mv	a3,a1
    61001f60:	8732                	mv	a4,a2
    61001f62:	fef42623          	sw	a5,-20(s0)
    61001f66:	87b6                	mv	a5,a3
    61001f68:	fef42423          	sw	a5,-24(s0)
    61001f6c:	87ba                	mv	a5,a4
    61001f6e:	fef42223          	sw	a5,-28(s0)
    return 0;
    61001f72:	4781                	li	a5,0
}
    61001f74:	853e                	mv	a0,a5
    61001f76:	6462                	ld	s0,24(sp)
    61001f78:	6105                	addi	sp,sp,32
    61001f7a:	8082                	ret

0000000061001f7c <_read>:
#include "nuclei_sdk_hal.h"

// #define UART_AUTO_ECHO

__WEAK ssize_t _read(int fd, void* ptr, size_t len)
{
    61001f7c:	7139                	addi	sp,sp,-64
    61001f7e:	fc06                	sd	ra,56(sp)
    61001f80:	f822                	sd	s0,48(sp)
    61001f82:	0080                	addi	s0,sp,64
    61001f84:	87aa                	mv	a5,a0
    61001f86:	fcb43823          	sd	a1,-48(s0)
    61001f8a:	fcc43423          	sd	a2,-56(s0)
    61001f8e:	fcf42e23          	sw	a5,-36(s0)
    if (fd != STDIN_FILENO) {
    61001f92:	fdc42783          	lw	a5,-36(s0)
    61001f96:	2781                	sext.w	a5,a5
    61001f98:	c399                	beqz	a5,61001f9e <_read+0x22>
        return -1;
    61001f9a:	57fd                	li	a5,-1
    61001f9c:	a015                	j	61001fc0 <_read+0x44>
    }

    uint8_t* readbuf = (uint8_t*)ptr;
    61001f9e:	fd043783          	ld	a5,-48(s0)
    61001fa2:	fef43423          	sd	a5,-24(s0)
    readbuf[0] = uart_read(SOC_DEBUG_UART);
    61001fa6:	3e100793          	li	a5,993
    61001faa:	01679513          	slli	a0,a5,0x16
    61001fae:	e91ff0ef          	jal	ra,61001e3e <uart_read>
    61001fb2:	87aa                	mv	a5,a0
    61001fb4:	873e                	mv	a4,a5
    61001fb6:	fe843783          	ld	a5,-24(s0)
    61001fba:	00e78023          	sb	a4,0(a5)
#ifdef UART_AUTO_ECHO
    uart_write(SOC_DEBUG_UART, readbuf[0]);
#endif
    return 1;
    61001fbe:	4785                	li	a5,1
}
    61001fc0:	853e                	mv	a0,a5
    61001fc2:	70e2                	ld	ra,56(sp)
    61001fc4:	7442                	ld	s0,48(sp)
    61001fc6:	6121                	addi	sp,sp,64
    61001fc8:	8082                	ret

0000000061001fca <_sbrk>:
#include <stdint.h>
#include <stddef.h>
#include <unistd.h>

__WEAK void* _sbrk(ptrdiff_t incr)
{
    61001fca:	1101                	addi	sp,sp,-32
    61001fcc:	ec22                	sd	s0,24(sp)
    61001fce:	1000                	addi	s0,sp,32
    61001fd0:	fea43423          	sd	a0,-24(s0)
    extern char _end[];
    extern char _heap_end[];
    static char* curbrk = _end;

    if ((curbrk + incr < _end) || (curbrk + incr > _heap_end)) {
    61001fd4:	0000e797          	auipc	a5,0xe
    61001fd8:	0dc78793          	addi	a5,a5,220 # 610100b0 <curbrk.7012>
    61001fdc:	6398                	ld	a4,0(a5)
    61001fde:	fe843783          	ld	a5,-24(s0)
    61001fe2:	973e                	add	a4,a4,a5
    61001fe4:	9c018793          	addi	a5,gp,-1600 # 61010270 <_end>
    61001fe8:	02f76063          	bltu	a4,a5,61002008 <_sbrk+0x3e>
    61001fec:	0000e797          	auipc	a5,0xe
    61001ff0:	0c478793          	addi	a5,a5,196 # 610100b0 <curbrk.7012>
    61001ff4:	6398                	ld	a4,0(a5)
    61001ff6:	fe843783          	ld	a5,-24(s0)
    61001ffa:	973e                	add	a4,a4,a5
    61001ffc:	0001e797          	auipc	a5,0x1e
    61002000:	80478793          	addi	a5,a5,-2044 # 6101f800 <_heap_end>
    61002004:	00e7f463          	bgeu	a5,a4,6100200c <_sbrk+0x42>
        return (void*)(-1);
    61002008:	57fd                	li	a5,-1
    6100200a:	a805                	j	6100203a <_sbrk+0x70>
    }

    curbrk += incr;
    6100200c:	0000e797          	auipc	a5,0xe
    61002010:	0a478793          	addi	a5,a5,164 # 610100b0 <curbrk.7012>
    61002014:	6398                	ld	a4,0(a5)
    61002016:	fe843783          	ld	a5,-24(s0)
    6100201a:	973e                	add	a4,a4,a5
    6100201c:	0000e797          	auipc	a5,0xe
    61002020:	09478793          	addi	a5,a5,148 # 610100b0 <curbrk.7012>
    61002024:	e398                	sd	a4,0(a5)
    return (void*)(curbrk - incr);
    61002026:	0000e797          	auipc	a5,0xe
    6100202a:	08a78793          	addi	a5,a5,138 # 610100b0 <curbrk.7012>
    6100202e:	6398                	ld	a4,0(a5)
    61002030:	fe843783          	ld	a5,-24(s0)
    61002034:	40f007b3          	neg	a5,a5
    61002038:	97ba                	add	a5,a5,a4
}
    6100203a:	853e                	mv	a0,a5
    6100203c:	6462                	ld	s0,24(sp)
    6100203e:	6105                	addi	sp,sp,32
    61002040:	8082                	ret

0000000061002042 <_write>:
#include <unistd.h>
#include <sys/types.h>
#include <nuclei_sdk_hal.h>

__WEAK ssize_t _write(int fd, const void* ptr, size_t len)
{
    61002042:	7139                	addi	sp,sp,-64
    61002044:	fc06                	sd	ra,56(sp)
    61002046:	f822                	sd	s0,48(sp)
    61002048:	0080                	addi	s0,sp,64
    6100204a:	87aa                	mv	a5,a0
    6100204c:	fcb43823          	sd	a1,-48(s0)
    61002050:	fcc43423          	sd	a2,-56(s0)
    61002054:	fcf42e23          	sw	a5,-36(s0)
    if (!isatty(fd)) {
    61002058:	fdc42783          	lw	a5,-36(s0)
    6100205c:	853e                	mv	a0,a5
    6100205e:	078010ef          	jal	ra,610030d6 <isatty>
    61002062:	87aa                	mv	a5,a0
    61002064:	e399                	bnez	a5,6100206a <_write+0x28>
        return -1;
    61002066:	57fd                	li	a5,-1
    61002068:	a0ad                	j	610020d2 <_write+0x90>
    }

    const uint8_t* writebuf = (const uint8_t*)ptr;
    6100206a:	fd043783          	ld	a5,-48(s0)
    6100206e:	fef43023          	sd	a5,-32(s0)
    for (size_t i = 0; i < len; i++) {
    61002072:	fe043423          	sd	zero,-24(s0)
    61002076:	a0b1                	j	610020c2 <_write+0x80>
        if (writebuf[i] == '\n') {
    61002078:	fe043703          	ld	a4,-32(s0)
    6100207c:	fe843783          	ld	a5,-24(s0)
    61002080:	97ba                	add	a5,a5,a4
    61002082:	0007c783          	lbu	a5,0(a5)
    61002086:	873e                	mv	a4,a5
    61002088:	47a9                	li	a5,10
    6100208a:	00f71963          	bne	a4,a5,6100209c <_write+0x5a>
            uart_write(SOC_DEBUG_UART, '\r');
    6100208e:	45b5                	li	a1,13
    61002090:	3e100793          	li	a5,993
    61002094:	01679513          	slli	a0,a5,0x16
    61002098:	d57ff0ef          	jal	ra,61001dee <uart_write>
        }
        uart_write(SOC_DEBUG_UART, writebuf[i]);
    6100209c:	fe043703          	ld	a4,-32(s0)
    610020a0:	fe843783          	ld	a5,-24(s0)
    610020a4:	97ba                	add	a5,a5,a4
    610020a6:	0007c783          	lbu	a5,0(a5)
    610020aa:	85be                	mv	a1,a5
    610020ac:	3e100793          	li	a5,993
    610020b0:	01679513          	slli	a0,a5,0x16
    610020b4:	d3bff0ef          	jal	ra,61001dee <uart_write>
    for (size_t i = 0; i < len; i++) {
    610020b8:	fe843783          	ld	a5,-24(s0)
    610020bc:	0785                	addi	a5,a5,1
    610020be:	fef43423          	sd	a5,-24(s0)
    610020c2:	fe843703          	ld	a4,-24(s0)
    610020c6:	fc843783          	ld	a5,-56(s0)
    610020ca:	faf767e3          	bltu	a4,a5,61002078 <_write+0x36>
    }
    return len;
    610020ce:	fc843783          	ld	a5,-56(s0)
}
    610020d2:	853e                	mv	a0,a5
    610020d4:	70e2                	ld	ra,56(sp)
    610020d6:	7442                	ld	s0,48(sp)
    610020d8:	6121                	addi	sp,sp,64
    610020da:	8082                	ret

00000000610020dc <SystemInit>:
 * oscillator (PLL) that is part of the microcontroller device. For systems
 * with a variable clock speed, it updates the variable \ref SystemCoreClock.
 * SystemInit is called from the file <b>startup<i>_device</i></b>.
 */
void SystemInit(void)
{
    610020dc:	1141                	addi	sp,sp,-16
    610020de:	e422                	sd	s0,8(sp)
    610020e0:	0800                	addi	s0,sp,16
    /* ToDo: add code to initialize the system
     * Warn: do not use global variables because this function is called before
     * reaching pre-main. RW section maybe overwritten afterwards.
     */
    SystemCoreClock = SYSTEM_CLOCK;
    610020e2:	0000e797          	auipc	a5,0xe
    610020e6:	fd678793          	addi	a5,a5,-42 # 610100b8 <SystemCoreClock>
    610020ea:	02626737          	lui	a4,0x2626
    610020ee:	a007071b          	addiw	a4,a4,-1536
    610020f2:	c398                	sw	a4,0(a5)
}
    610020f4:	0001                	nop
    610020f6:	6422                	ld	s0,8(sp)
    610020f8:	0141                	addi	sp,sp,16
    610020fa:	8082                	ret

00000000610020fc <system_default_exception_handler>:
 * \details
 * This function provided a default exception and NMI handling code for all exception ids.
 * By default, It will just print some information for debug, Vendor can customize it according to its requirements.
 */
static void system_default_exception_handler(unsigned long mcause, unsigned long sp)
{
    610020fc:	1101                	addi	sp,sp,-32
    610020fe:	ec06                	sd	ra,24(sp)
    61002100:	e822                	sd	s0,16(sp)
    61002102:	1000                	addi	s0,sp,32
    61002104:	fea43423          	sd	a0,-24(s0)
    61002108:	feb43023          	sd	a1,-32(s0)
    /* TODO: Uncomment this if you have implement printf function */
    printf("MCAUSE : 0x%lx\r\n", mcause);
    6100210c:	fe843583          	ld	a1,-24(s0)
    61002110:	00002517          	auipc	a0,0x2
    61002114:	52050513          	addi	a0,a0,1312 # 61004630 <_read_r+0x326>
    61002118:	501000ef          	jal	ra,61002e18 <iprintf>
    printf("MDCAUSE: 0x%lx\r\n", __RV_CSR_READ(CSR_MDCAUSE));
    6100211c:	7c9027f3          	csrr	a5,0x7c9
    61002120:	80be                	mv	ra,a5
    61002122:	8786                	mv	a5,ra
    61002124:	85be                	mv	a1,a5
    61002126:	00002517          	auipc	a0,0x2
    6100212a:	52250513          	addi	a0,a0,1314 # 61004648 <_read_r+0x33e>
    6100212e:	4eb000ef          	jal	ra,61002e18 <iprintf>
    printf("MEPC   : 0x%lx\r\n", __RV_CSR_READ(CSR_MEPC));
    61002132:	341027f3          	csrr	a5,mepc
    61002136:	80be                	mv	ra,a5
    61002138:	8786                	mv	a5,ra
    6100213a:	85be                	mv	a1,a5
    6100213c:	00002517          	auipc	a0,0x2
    61002140:	52450513          	addi	a0,a0,1316 # 61004660 <_read_r+0x356>
    61002144:	4d5000ef          	jal	ra,61002e18 <iprintf>
    printf("MTVAL  : 0x%lx\r\n", __RV_CSR_READ(CSR_MTVAL));
    61002148:	343027f3          	csrr	a5,mtval
    6100214c:	80be                	mv	ra,a5
    6100214e:	8786                	mv	a5,ra
    61002150:	85be                	mv	a1,a5
    61002152:	00002517          	auipc	a0,0x2
    61002156:	52650513          	addi	a0,a0,1318 # 61004678 <_read_r+0x36e>
    6100215a:	4bf000ef          	jal	ra,61002e18 <iprintf>
    while (1);
    6100215e:	a001                	j	6100215e <system_default_exception_handler+0x62>

0000000061002160 <Exception_Init>:
 * The core exception handler for each exception id will be initialized to \ref system_default_exception_handler.
 * \note
 * Called in \ref _init function, used to initialize default exception handlers for all exception IDs
 */
static void Exception_Init(void)
{
    61002160:	1101                	addi	sp,sp,-32
    61002162:	ec22                	sd	s0,24(sp)
    61002164:	1000                	addi	s0,sp,32
    for (int i = 0; i < MAX_SYSTEM_EXCEPTION_NUM + 1; i++) {
    61002166:	fe042623          	sw	zero,-20(s0)
    6100216a:	a01d                	j	61002190 <Exception_Init+0x30>
        SystemExceptionHandlers[i] = (unsigned long)system_default_exception_handler;
    6100216c:	00000717          	auipc	a4,0x0
    61002170:	f9070713          	addi	a4,a4,-112 # 610020fc <system_default_exception_handler>
    61002174:	0000e697          	auipc	a3,0xe
    61002178:	f7468693          	addi	a3,a3,-140 # 610100e8 <SystemExceptionHandlers>
    6100217c:	fec42783          	lw	a5,-20(s0)
    61002180:	078e                	slli	a5,a5,0x3
    61002182:	97b6                	add	a5,a5,a3
    61002184:	e398                	sd	a4,0(a5)
    for (int i = 0; i < MAX_SYSTEM_EXCEPTION_NUM + 1; i++) {
    61002186:	fec42783          	lw	a5,-20(s0)
    6100218a:	2785                	addiw	a5,a5,1
    6100218c:	fef42623          	sw	a5,-20(s0)
    61002190:	fec42783          	lw	a5,-20(s0)
    61002194:	0007871b          	sext.w	a4,a5
    61002198:	47b1                	li	a5,12
    6100219a:	fce7d9e3          	bge	a5,a4,6100216c <Exception_Init+0xc>
    }
}
    6100219e:	0001                	nop
    610021a0:	0001                	nop
    610021a2:	6462                	ld	s0,24(sp)
    610021a4:	6105                	addi	sp,sp,32
    610021a6:	8082                	ret

00000000610021a8 <core_exception_handler>:
 *   for exception entry function, Silicon Vendor could modify the implementation.
 * - For the core_exception_handler template, we provided exception register function \ref Exception_Register_EXC
 *   which can help developer to register your exception handler for specific exception number.
 */
uint32_t core_exception_handler(unsigned long mcause, unsigned long sp)
{
    610021a8:	7179                	addi	sp,sp,-48
    610021aa:	f406                	sd	ra,40(sp)
    610021ac:	f022                	sd	s0,32(sp)
    610021ae:	1800                	addi	s0,sp,48
    610021b0:	fca43c23          	sd	a0,-40(s0)
    610021b4:	fcb43823          	sd	a1,-48(s0)
    uint32_t EXCn = (uint32_t)(mcause & 0X00000fff);
    610021b8:	fd843783          	ld	a5,-40(s0)
    610021bc:	2781                	sext.w	a5,a5
    610021be:	873e                	mv	a4,a5
    610021c0:	6785                	lui	a5,0x1
    610021c2:	17fd                	addi	a5,a5,-1
    610021c4:	8ff9                	and	a5,a5,a4
    610021c6:	fef42223          	sw	a5,-28(s0)
    EXC_HANDLER exc_handler;

    if ((EXCn < MAX_SYSTEM_EXCEPTION_NUM) && (EXCn >= 0)) {
    610021ca:	fe442783          	lw	a5,-28(s0)
    610021ce:	0007871b          	sext.w	a4,a5
    610021d2:	47ad                	li	a5,11
    610021d4:	00e7ee63          	bltu	a5,a4,610021f0 <core_exception_handler+0x48>
        exc_handler = (EXC_HANDLER)SystemExceptionHandlers[EXCn];
    610021d8:	0000e717          	auipc	a4,0xe
    610021dc:	f1070713          	addi	a4,a4,-240 # 610100e8 <SystemExceptionHandlers>
    610021e0:	fe446783          	lwu	a5,-28(s0)
    610021e4:	078e                	slli	a5,a5,0x3
    610021e6:	97ba                	add	a5,a5,a4
    610021e8:	639c                	ld	a5,0(a5)
    610021ea:	fef43423          	sd	a5,-24(s0)
    610021ee:	a03d                	j	6100221c <core_exception_handler+0x74>
    } else if (EXCn == NMI_EXCn) {
    610021f0:	fe442783          	lw	a5,-28(s0)
    610021f4:	0007871b          	sext.w	a4,a5
    610021f8:	6785                	lui	a5,0x1
    610021fa:	17fd                	addi	a5,a5,-1
    610021fc:	00f71a63          	bne	a4,a5,61002210 <core_exception_handler+0x68>
        exc_handler = (EXC_HANDLER)SystemExceptionHandlers[MAX_SYSTEM_EXCEPTION_NUM];
    61002200:	0000e797          	auipc	a5,0xe
    61002204:	ee878793          	addi	a5,a5,-280 # 610100e8 <SystemExceptionHandlers>
    61002208:	73bc                	ld	a5,96(a5)
    6100220a:	fef43423          	sd	a5,-24(s0)
    6100220e:	a039                	j	6100221c <core_exception_handler+0x74>
    } else {
        exc_handler = (EXC_HANDLER)system_default_exception_handler;
    61002210:	00000797          	auipc	a5,0x0
    61002214:	eec78793          	addi	a5,a5,-276 # 610020fc <system_default_exception_handler>
    61002218:	fef43423          	sd	a5,-24(s0)
    }
    if (exc_handler != NULL) {
    6100221c:	fe843783          	ld	a5,-24(s0)
    61002220:	cb81                	beqz	a5,61002230 <core_exception_handler+0x88>
        exc_handler(mcause, sp);
    61002222:	fe843783          	ld	a5,-24(s0)
    61002226:	fd043583          	ld	a1,-48(s0)
    6100222a:	fd843503          	ld	a0,-40(s0)
    6100222e:	9782                	jalr	a5
    }
    return 0;
    61002230:	4781                	li	a5,0
}
    61002232:	853e                	mv	a0,a5
    61002234:	70a2                	ld	ra,40(sp)
    61002236:	7402                	ld	s0,32(sp)
    61002238:	6145                	addi	sp,sp,48
    6100223a:	8082                	ret

000000006100223c <SystemBannerPrint>:
/** @} */ /* End of Doxygen Group NMSIS_Core_ExceptionAndNMI */

/** Banner Print for Nuclei SDK */
void SystemBannerPrint(void)
{
    6100223c:	7179                	addi	sp,sp,-48
    6100223e:	f406                	sd	ra,40(sp)
    61002240:	f022                	sd	s0,32(sp)
    61002242:	1800                	addi	s0,sp,48
#if defined(NUCLEI_BANNER) && (NUCLEI_BANNER == 1)
#ifndef DOWNLOAD_MODE
#error DOWNLOAD_MODE is not defined via build system, please check!
#endif
    const char* download_modes[] = {"FLASHXIP", "FLASH", "ILM", "DDR"};
    61002244:	00002797          	auipc	a5,0x2
    61002248:	4bc78793          	addi	a5,a5,1212 # 61004700 <_read_r+0x3f6>
    6100224c:	6390                	ld	a2,0(a5)
    6100224e:	6794                	ld	a3,8(a5)
    61002250:	6b98                	ld	a4,16(a5)
    61002252:	6f9c                	ld	a5,24(a5)
    61002254:	fcc43823          	sd	a2,-48(s0)
    61002258:	fcd43c23          	sd	a3,-40(s0)
    6100225c:	fee43023          	sd	a4,-32(s0)
    61002260:	fef43423          	sd	a5,-24(s0)
    printf("Nuclei SDK Build Time: %s, %s\r\n", __DATE__, __TIME__);
    61002264:	00002617          	auipc	a2,0x2
    61002268:	42c60613          	addi	a2,a2,1068 # 61004690 <_read_r+0x386>
    6100226c:	00002597          	auipc	a1,0x2
    61002270:	43458593          	addi	a1,a1,1076 # 610046a0 <_read_r+0x396>
    61002274:	00002517          	auipc	a0,0x2
    61002278:	43c50513          	addi	a0,a0,1084 # 610046b0 <_read_r+0x3a6>
    6100227c:	39d000ef          	jal	ra,61002e18 <iprintf>
    printf("Download Mode: %s\r\n", download_modes[DOWNLOAD_MODE]);
    61002280:	fe043783          	ld	a5,-32(s0)
    61002284:	85be                	mv	a1,a5
    61002286:	00002517          	auipc	a0,0x2
    6100228a:	44a50513          	addi	a0,a0,1098 # 610046d0 <_read_r+0x3c6>
    6100228e:	38b000ef          	jal	ra,61002e18 <iprintf>
    printf("CPU Frequency %lu Hz\r\n", SystemCoreClock);
    61002292:	0000e797          	auipc	a5,0xe
    61002296:	e2678793          	addi	a5,a5,-474 # 610100b8 <SystemCoreClock>
    6100229a:	439c                	lw	a5,0(a5)
    6100229c:	85be                	mv	a1,a5
    6100229e:	00002517          	auipc	a0,0x2
    610022a2:	44a50513          	addi	a0,a0,1098 # 610046e8 <_read_r+0x3de>
    610022a6:	373000ef          	jal	ra,61002e18 <iprintf>
#endif
}
    610022aa:	0001                	nop
    610022ac:	70a2                	ld	ra,40(sp)
    610022ae:	7402                	ld	s0,32(sp)
    610022b0:	6145                	addi	sp,sp,48
    610022b2:	8082                	ret

00000000610022b4 <ECLIC_Init>:
 * ECLIC needs be initialized after boot up,
 * Vendor could also change the initialization
 * configuration.
 */
void ECLIC_Init(void)
{
    610022b4:	1101                	addi	sp,sp,-32
    610022b6:	ec22                	sd	s0,24(sp)
    610022b8:	1000                	addi	s0,sp,32
    610022ba:	fe0405a3          	sb	zero,-21(s0)
 * \sa
 * - \ref ECLIC_GetMth
 */
__STATIC_FORCEINLINE void __ECLIC_SetMth(uint8_t mth)
{
    ECLIC->MTH = mth;
    610022be:	680007b7          	lui	a5,0x68000
    610022c2:	feb44703          	lbu	a4,-21(s0)
    610022c6:	00e785a3          	sb	a4,11(a5) # 6800000b <_sp+0x6fe000b>
}
    610022ca:	0001                	nop
    return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
    610022cc:	680007b7          	lui	a5,0x68000
    610022d0:	43dc                	lw	a5,4(a5)
    610022d2:	2781                	sext.w	a5,a5
    610022d4:	1782                	slli	a5,a5,0x20
    610022d6:	9381                	srli	a5,a5,0x20
    610022d8:	83d5                	srli	a5,a5,0x15
    610022da:	2781                	sext.w	a5,a5
    610022dc:	8bbd                	andi	a5,a5,15
    610022de:	2781                	sext.w	a5,a5
    610022e0:	2781                	sext.w	a5,a5
    /* Global Configuration about MTH and NLBits.
     * TODO: Please adapt it according to your system requirement.
     * This function is called in _init function */
    ECLIC_SetMth(0);
    ECLIC_SetCfgNlbits(__ECLIC_INTCTLBITS);
    610022e2:	2781                	sext.w	a5,a5
    610022e4:	fef42623          	sw	a5,-20(s0)
    ECLIC->CFG &= ~CLIC_CLICCFG_NLBIT_Msk;
    610022e8:	680007b7          	lui	a5,0x68000
    610022ec:	0007c783          	lbu	a5,0(a5) # 68000000 <_sp+0x6fe0000>
    610022f0:	0ff7f713          	andi	a4,a5,255
    610022f4:	680007b7          	lui	a5,0x68000
    610022f8:	9b05                	andi	a4,a4,-31
    610022fa:	0ff77713          	andi	a4,a4,255
    610022fe:	00e78023          	sb	a4,0(a5) # 68000000 <_sp+0x6fe0000>
    ECLIC->CFG |= (uint8_t)((nlbits <<CLIC_CLICCFG_NLBIT_Pos) & CLIC_CLICCFG_NLBIT_Msk);
    61002302:	680007b7          	lui	a5,0x68000
    61002306:	0007c783          	lbu	a5,0(a5) # 68000000 <_sp+0x6fe0000>
    6100230a:	0ff7f793          	andi	a5,a5,255
    6100230e:	0187971b          	slliw	a4,a5,0x18
    61002312:	4187571b          	sraiw	a4,a4,0x18
    61002316:	fec42783          	lw	a5,-20(s0)
    6100231a:	0ff7f793          	andi	a5,a5,255
    6100231e:	0017979b          	slliw	a5,a5,0x1
    61002322:	0ff7f793          	andi	a5,a5,255
    61002326:	0187979b          	slliw	a5,a5,0x18
    6100232a:	4187d79b          	sraiw	a5,a5,0x18
    6100232e:	8bf9                	andi	a5,a5,30
    61002330:	0187979b          	slliw	a5,a5,0x18
    61002334:	4187d79b          	sraiw	a5,a5,0x18
    61002338:	8fd9                	or	a5,a5,a4
    6100233a:	0187971b          	slliw	a4,a5,0x18
    6100233e:	4187571b          	sraiw	a4,a4,0x18
    61002342:	680007b7          	lui	a5,0x68000
    61002346:	0ff77713          	andi	a4,a4,255
    6100234a:	00e78023          	sb	a4,0(a5) # 68000000 <_sp+0x6fe0000>
}
    6100234e:	0001                	nop
}
    61002350:	0001                	nop
    61002352:	6462                	ld	s0,24(sp)
    61002354:	6105                	addi	sp,sp,32
    61002356:	8082                	ret

0000000061002358 <ECLIC_Register_IRQ>:
 * \remarks
 * - This function use to configure specific eclic interrupt and register its interrupt handler and enable its interrupt.
 * - If the vector table is placed in read-only section(FLASHXIP mode), handler could not be installed
 */
int32_t ECLIC_Register_IRQ(IRQn_Type IRQn, uint8_t shv, ECLIC_TRIGGER_Type trig_mode, uint8_t lvl, uint8_t priority, void* handler)
{
    61002358:	7135                	addi	sp,sp,-160
    6100235a:	ed22                	sd	s0,152(sp)
    6100235c:	e926                	sd	s1,144(sp)
    6100235e:	1100                	addi	s0,sp,160
    61002360:	f6f43423          	sd	a5,-152(s0)
    61002364:	87aa                	mv	a5,a0
    61002366:	f6f42e23          	sw	a5,-132(s0)
    6100236a:	87ae                	mv	a5,a1
    6100236c:	f6f40da3          	sb	a5,-133(s0)
    61002370:	87b2                	mv	a5,a2
    61002372:	f6f42a23          	sw	a5,-140(s0)
    61002376:	87b6                	mv	a5,a3
    61002378:	f6f40d23          	sb	a5,-134(s0)
    6100237c:	87ba                	mv	a5,a4
    6100237e:	f6f40ca3          	sb	a5,-135(s0)
    if ((IRQn > SOC_INT_MAX) || (shv > ECLIC_VECTOR_INTERRUPT) \
    61002382:	f7c42783          	lw	a5,-132(s0)
    61002386:	0007871b          	sext.w	a4,a5
    6100238a:	05e00793          	li	a5,94
    6100238e:	02e7e063          	bltu	a5,a4,610023ae <ECLIC_Register_IRQ+0x56>
    61002392:	f7b44783          	lbu	a5,-133(s0)
    61002396:	0ff7f713          	andi	a4,a5,255
    6100239a:	4785                	li	a5,1
    6100239c:	00e7e963          	bltu	a5,a4,610023ae <ECLIC_Register_IRQ+0x56>
        || (trig_mode > ECLIC_NEGTIVE_EDGE_TRIGGER)) {
    610023a0:	f7442783          	lw	a5,-140(s0)
    610023a4:	0007871b          	sext.w	a4,a5
    610023a8:	478d                	li	a5,3
    610023aa:	00e7f463          	bgeu	a5,a4,610023b2 <ECLIC_Register_IRQ+0x5a>
        return -1;
    610023ae:	57fd                	li	a5,-1
    610023b0:	a1b1                	j	610027fc <ECLIC_Register_IRQ+0x4a4>
    }

    /* set interrupt vector mode */
    ECLIC_SetShvIRQ(IRQn, shv);
    610023b2:	f7b44783          	lbu	a5,-133(s0)
    610023b6:	2781                	sext.w	a5,a5
    610023b8:	f7c42703          	lw	a4,-132(s0)
    610023bc:	fae42623          	sw	a4,-84(s0)
    610023c0:	faf42423          	sw	a5,-88(s0)
 * \sa
 * - \ref ECLIC_GetShvIRQ
 */
__STATIC_FORCEINLINE void __ECLIC_SetShvIRQ(IRQn_Type IRQn, uint32_t shv)
{
    ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_SHV_Msk;
    610023c4:	68000737          	lui	a4,0x68000
    610023c8:	fac46783          	lwu	a5,-84(s0)
    610023cc:	40078793          	addi	a5,a5,1024
    610023d0:	078a                	slli	a5,a5,0x2
    610023d2:	97ba                	add	a5,a5,a4
    610023d4:	0027c783          	lbu	a5,2(a5)
    610023d8:	0ff7f793          	andi	a5,a5,255
    610023dc:	680006b7          	lui	a3,0x68000
    610023e0:	9bf9                	andi	a5,a5,-2
    610023e2:	0ff7f713          	andi	a4,a5,255
    610023e6:	fac46783          	lwu	a5,-84(s0)
    610023ea:	40078793          	addi	a5,a5,1024
    610023ee:	078a                	slli	a5,a5,0x2
    610023f0:	97b6                	add	a5,a5,a3
    610023f2:	00e78123          	sb	a4,2(a5)
    ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(shv<<CLIC_INTATTR_SHV_Pos);
    610023f6:	68000737          	lui	a4,0x68000
    610023fa:	fac46783          	lwu	a5,-84(s0)
    610023fe:	40078793          	addi	a5,a5,1024
    61002402:	078a                	slli	a5,a5,0x2
    61002404:	97ba                	add	a5,a5,a4
    61002406:	0027c783          	lbu	a5,2(a5)
    6100240a:	0ff7f713          	andi	a4,a5,255
    6100240e:	fa842783          	lw	a5,-88(s0)
    61002412:	0ff7f793          	andi	a5,a5,255
    61002416:	680006b7          	lui	a3,0x68000
    6100241a:	8fd9                	or	a5,a5,a4
    6100241c:	0ff7f713          	andi	a4,a5,255
    61002420:	fac46783          	lwu	a5,-84(s0)
    61002424:	40078793          	addi	a5,a5,1024
    61002428:	078a                	slli	a5,a5,0x2
    6100242a:	97b6                	add	a5,a5,a3
    6100242c:	00e78123          	sb	a4,2(a5)
}
    61002430:	0001                	nop
    61002432:	f7c42783          	lw	a5,-132(s0)
    61002436:	faf42a23          	sw	a5,-76(s0)
    6100243a:	f7442783          	lw	a5,-140(s0)
    6100243e:	faf42823          	sw	a5,-80(s0)
    ECLIC->CTRL[IRQn].INTATTR &= ~CLIC_INTATTR_TRIG_Msk;
    61002442:	68000737          	lui	a4,0x68000
    61002446:	fb446783          	lwu	a5,-76(s0)
    6100244a:	40078793          	addi	a5,a5,1024
    6100244e:	078a                	slli	a5,a5,0x2
    61002450:	97ba                	add	a5,a5,a4
    61002452:	0027c783          	lbu	a5,2(a5)
    61002456:	0ff7f793          	andi	a5,a5,255
    6100245a:	680006b7          	lui	a3,0x68000
    6100245e:	9be5                	andi	a5,a5,-7
    61002460:	0ff7f713          	andi	a4,a5,255
    61002464:	fb446783          	lwu	a5,-76(s0)
    61002468:	40078793          	addi	a5,a5,1024
    6100246c:	078a                	slli	a5,a5,0x2
    6100246e:	97b6                	add	a5,a5,a3
    61002470:	00e78123          	sb	a4,2(a5)
    ECLIC->CTRL[IRQn].INTATTR |= (uint8_t)(trig<<CLIC_INTATTR_TRIG_Pos);
    61002474:	68000737          	lui	a4,0x68000
    61002478:	fb446783          	lwu	a5,-76(s0)
    6100247c:	40078793          	addi	a5,a5,1024
    61002480:	078a                	slli	a5,a5,0x2
    61002482:	97ba                	add	a5,a5,a4
    61002484:	0027c783          	lbu	a5,2(a5)
    61002488:	0ff7f713          	andi	a4,a5,255
    6100248c:	fb042783          	lw	a5,-80(s0)
    61002490:	0ff7f793          	andi	a5,a5,255
    61002494:	0017979b          	slliw	a5,a5,0x1
    61002498:	0ff7f793          	andi	a5,a5,255
    6100249c:	680006b7          	lui	a3,0x68000
    610024a0:	8fd9                	or	a5,a5,a4
    610024a2:	0ff7f713          	andi	a4,a5,255
    610024a6:	fb446783          	lwu	a5,-76(s0)
    610024aa:	40078793          	addi	a5,a5,1024
    610024ae:	078a                	slli	a5,a5,0x2
    610024b0:	97b6                	add	a5,a5,a3
    610024b2:	00e78123          	sb	a4,2(a5)
}
    610024b6:	0001                	nop
    610024b8:	f7c42783          	lw	a5,-132(s0)
    610024bc:	fcf42823          	sw	a5,-48(s0)
    610024c0:	f7a44783          	lbu	a5,-134(s0)
    610024c4:	fcf407a3          	sb	a5,-49(s0)
    return ((uint32_t)((ECLIC->CFG & CLIC_CLICCFG_NLBIT_Msk) >> CLIC_CLICCFG_NLBIT_Pos));
    610024c8:	680007b7          	lui	a5,0x68000
    610024cc:	0007c783          	lbu	a5,0(a5) # 68000000 <_sp+0x6fe0000>
    610024d0:	0ff7f793          	andi	a5,a5,255
    610024d4:	8385                	srli	a5,a5,0x1
    610024d6:	2781                	sext.w	a5,a5
    610024d8:	8bbd                	andi	a5,a5,15
    610024da:	2781                	sext.w	a5,a5
    610024dc:	2781                	sext.w	a5,a5
 * \sa
 * - \ref ECLIC_GetLevelIRQ
 */
__STATIC_FORCEINLINE void __ECLIC_SetLevelIRQ(IRQn_Type IRQn, uint8_t lvl_abs)
{
    uint8_t nlbits = __ECLIC_GetCfgNlbits();
    610024de:	2781                	sext.w	a5,a5
    610024e0:	fcf40723          	sb	a5,-50(s0)
    return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
    610024e4:	680007b7          	lui	a5,0x68000
    610024e8:	43dc                	lw	a5,4(a5)
    610024ea:	2781                	sext.w	a5,a5
    610024ec:	1782                	slli	a5,a5,0x20
    610024ee:	9381                	srli	a5,a5,0x20
    610024f0:	83d5                	srli	a5,a5,0x15
    610024f2:	2781                	sext.w	a5,a5
    610024f4:	8bbd                	andi	a5,a5,15
    610024f6:	2781                	sext.w	a5,a5
    610024f8:	2781                	sext.w	a5,a5
    uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
    610024fa:	2781                	sext.w	a5,a5
    610024fc:	fcf406a3          	sb	a5,-51(s0)

    if (nlbits == 0) {
    61002500:	fce44783          	lbu	a5,-50(s0)
    61002504:	0ff7f793          	andi	a5,a5,255
    61002508:	cfed                	beqz	a5,61002602 <ECLIC_Register_IRQ+0x2aa>
        return;
    }

    if (nlbits > intctlbits) {
    6100250a:	fce44703          	lbu	a4,-50(s0)
    6100250e:	fcd44783          	lbu	a5,-51(s0)
    61002512:	0ff77713          	andi	a4,a4,255
    61002516:	0ff7f793          	andi	a5,a5,255
    6100251a:	00e7f663          	bgeu	a5,a4,61002526 <ECLIC_Register_IRQ+0x1ce>
        nlbits = intctlbits;
    6100251e:	fcd44783          	lbu	a5,-51(s0)
    61002522:	fcf40723          	sb	a5,-50(s0)
    }
    uint8_t maxlvl = ((1 << nlbits) - 1);
    61002526:	fce44783          	lbu	a5,-50(s0)
    6100252a:	2781                	sext.w	a5,a5
    6100252c:	4705                	li	a4,1
    6100252e:	00f717bb          	sllw	a5,a4,a5
    61002532:	2781                	sext.w	a5,a5
    61002534:	0ff7f793          	andi	a5,a5,255
    61002538:	37fd                	addiw	a5,a5,-1
    6100253a:	fcf40623          	sb	a5,-52(s0)
    if (lvl_abs > maxlvl) {
    6100253e:	fcf44703          	lbu	a4,-49(s0)
    61002542:	fcc44783          	lbu	a5,-52(s0)
    61002546:	0ff77713          	andi	a4,a4,255
    6100254a:	0ff7f793          	andi	a5,a5,255
    6100254e:	00e7f663          	bgeu	a5,a4,6100255a <ECLIC_Register_IRQ+0x202>
        lvl_abs = maxlvl;
    61002552:	fcc44783          	lbu	a5,-52(s0)
    61002556:	fcf407a3          	sb	a5,-49(s0)
    }
    uint8_t lvl = lvl_abs << (ECLIC_MAX_NLBITS - nlbits);
    6100255a:	fcf44783          	lbu	a5,-49(s0)
    6100255e:	0007871b          	sext.w	a4,a5
    61002562:	fce44783          	lbu	a5,-50(s0)
    61002566:	2781                	sext.w	a5,a5
    61002568:	46a1                	li	a3,8
    6100256a:	40f687bb          	subw	a5,a3,a5
    6100256e:	2781                	sext.w	a5,a5
    61002570:	00f717bb          	sllw	a5,a4,a5
    61002574:	2781                	sext.w	a5,a5
    61002576:	fcf405a3          	sb	a5,-53(s0)
    6100257a:	fd042783          	lw	a5,-48(s0)
    6100257e:	fcf42223          	sw	a5,-60(s0)
    return (ECLIC->CTRL[IRQn].INTCTRL);
    61002582:	68000737          	lui	a4,0x68000
    61002586:	fc446783          	lwu	a5,-60(s0)
    6100258a:	40078793          	addi	a5,a5,1024 # 68000400 <_sp+0x6fe0400>
    6100258e:	078a                	slli	a5,a5,0x2
    61002590:	97ba                	add	a5,a5,a4
    61002592:	0037c783          	lbu	a5,3(a5)
    61002596:	0ff7f793          	andi	a5,a5,255
    uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
    6100259a:	fcf401a3          	sb	a5,-61(s0)
    cur_ctrl = cur_ctrl << nlbits;
    6100259e:	fc344783          	lbu	a5,-61(s0)
    610025a2:	0007871b          	sext.w	a4,a5
    610025a6:	fce44783          	lbu	a5,-50(s0)
    610025aa:	2781                	sext.w	a5,a5
    610025ac:	00f717bb          	sllw	a5,a4,a5
    610025b0:	2781                	sext.w	a5,a5
    610025b2:	fcf401a3          	sb	a5,-61(s0)
    cur_ctrl = cur_ctrl >> nlbits;
    610025b6:	fc344783          	lbu	a5,-61(s0)
    610025ba:	0007871b          	sext.w	a4,a5
    610025be:	fce44783          	lbu	a5,-50(s0)
    610025c2:	2781                	sext.w	a5,a5
    610025c4:	40f757bb          	sraw	a5,a4,a5
    610025c8:	2781                	sext.w	a5,a5
    610025ca:	fcf401a3          	sb	a5,-61(s0)
    __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | lvl));
    610025ce:	fcb44703          	lbu	a4,-53(s0)
    610025d2:	fc344783          	lbu	a5,-61(s0)
    610025d6:	8fd9                	or	a5,a5,a4
    610025d8:	0ff7f793          	andi	a5,a5,255
    610025dc:	fd042703          	lw	a4,-48(s0)
    610025e0:	fae42e23          	sw	a4,-68(s0)
    610025e4:	faf40da3          	sb	a5,-69(s0)
    ECLIC->CTRL[IRQn].INTCTRL = intctrl;
    610025e8:	68000737          	lui	a4,0x68000
    610025ec:	fbc46783          	lwu	a5,-68(s0)
    610025f0:	40078793          	addi	a5,a5,1024
    610025f4:	078a                	slli	a5,a5,0x2
    610025f6:	97ba                	add	a5,a5,a4
    610025f8:	fbb44703          	lbu	a4,-69(s0)
    610025fc:	00e781a3          	sb	a4,3(a5)
}
    61002600:	a011                	j	61002604 <ECLIC_Register_IRQ+0x2ac>
        return;
    61002602:	0001                	nop
    61002604:	f7c42783          	lw	a5,-132(s0)
    61002608:	fef42623          	sw	a5,-20(s0)
    6100260c:	f7944783          	lbu	a5,-135(s0)
    61002610:	fef405a3          	sb	a5,-21(s0)
    return ((uint32_t)((ECLIC->CFG & CLIC_CLICCFG_NLBIT_Msk) >> CLIC_CLICCFG_NLBIT_Pos));
    61002614:	680007b7          	lui	a5,0x68000
    61002618:	0007c783          	lbu	a5,0(a5) # 68000000 <_sp+0x6fe0000>
    6100261c:	0ff7f793          	andi	a5,a5,255
    61002620:	8385                	srli	a5,a5,0x1
    61002622:	2781                	sext.w	a5,a5
    61002624:	8bbd                	andi	a5,a5,15
    61002626:	2781                	sext.w	a5,a5
    61002628:	2781                	sext.w	a5,a5
 * \sa
 * - \ref ECLIC_GetPriorityIRQ
 */
__STATIC_FORCEINLINE void __ECLIC_SetPriorityIRQ(IRQn_Type IRQn, uint8_t pri)
{
    uint8_t nlbits = __ECLIC_GetCfgNlbits();
    6100262a:	2781                	sext.w	a5,a5
    6100262c:	fef40523          	sb	a5,-22(s0)
    return ((uint32_t)((ECLIC->INFO & CLIC_CLICINFO_CTLBIT_Msk) >> CLIC_CLICINFO_CTLBIT_Pos));
    61002630:	680007b7          	lui	a5,0x68000
    61002634:	43dc                	lw	a5,4(a5)
    61002636:	2781                	sext.w	a5,a5
    61002638:	1782                	slli	a5,a5,0x20
    6100263a:	9381                	srli	a5,a5,0x20
    6100263c:	83d5                	srli	a5,a5,0x15
    6100263e:	2781                	sext.w	a5,a5
    61002640:	8bbd                	andi	a5,a5,15
    61002642:	2781                	sext.w	a5,a5
    61002644:	2781                	sext.w	a5,a5
    uint8_t intctlbits = (uint8_t)__ECLIC_INTCTLBITS;
    61002646:	2781                	sext.w	a5,a5
    61002648:	fef404a3          	sb	a5,-23(s0)
    if (nlbits < intctlbits) {
    6100264c:	fea44703          	lbu	a4,-22(s0)
    61002650:	fe944783          	lbu	a5,-23(s0)
    61002654:	0ff77713          	andi	a4,a4,255
    61002658:	0ff7f793          	andi	a5,a5,255
    6100265c:	12f77063          	bgeu	a4,a5,6100277c <ECLIC_Register_IRQ+0x424>
        uint8_t maxpri = ((1 << (intctlbits - nlbits)) - 1);
    61002660:	fe944783          	lbu	a5,-23(s0)
    61002664:	0007871b          	sext.w	a4,a5
    61002668:	fea44783          	lbu	a5,-22(s0)
    6100266c:	2781                	sext.w	a5,a5
    6100266e:	40f707bb          	subw	a5,a4,a5
    61002672:	2781                	sext.w	a5,a5
    61002674:	4705                	li	a4,1
    61002676:	00f717bb          	sllw	a5,a4,a5
    6100267a:	2781                	sext.w	a5,a5
    6100267c:	0ff7f793          	andi	a5,a5,255
    61002680:	37fd                	addiw	a5,a5,-1
    61002682:	fef40423          	sb	a5,-24(s0)
        if (pri > maxpri) {
    61002686:	feb44703          	lbu	a4,-21(s0)
    6100268a:	fe844783          	lbu	a5,-24(s0)
    6100268e:	0ff77713          	andi	a4,a4,255
    61002692:	0ff7f793          	andi	a5,a5,255
    61002696:	00e7f663          	bgeu	a5,a4,610026a2 <ECLIC_Register_IRQ+0x34a>
            pri = maxpri;
    6100269a:	fe844783          	lbu	a5,-24(s0)
    6100269e:	fef405a3          	sb	a5,-21(s0)
        }
        pri = pri << (ECLIC_MAX_NLBITS - intctlbits);
    610026a2:	feb44783          	lbu	a5,-21(s0)
    610026a6:	0007871b          	sext.w	a4,a5
    610026aa:	fe944783          	lbu	a5,-23(s0)
    610026ae:	2781                	sext.w	a5,a5
    610026b0:	46a1                	li	a3,8
    610026b2:	40f687bb          	subw	a5,a3,a5
    610026b6:	2781                	sext.w	a5,a5
    610026b8:	00f717bb          	sllw	a5,a4,a5
    610026bc:	2781                	sext.w	a5,a5
    610026be:	fef405a3          	sb	a5,-21(s0)
        uint8_t mask = ((uint8_t)(-1)) >> intctlbits;
    610026c2:	fe944783          	lbu	a5,-23(s0)
    610026c6:	2781                	sext.w	a5,a5
    610026c8:	0ff00713          	li	a4,255
    610026cc:	40f757bb          	sraw	a5,a4,a5
    610026d0:	2781                	sext.w	a5,a5
    610026d2:	fef403a3          	sb	a5,-25(s0)
        pri = pri | mask;
    610026d6:	feb44703          	lbu	a4,-21(s0)
    610026da:	fe744783          	lbu	a5,-25(s0)
    610026de:	8fd9                	or	a5,a5,a4
    610026e0:	fef405a3          	sb	a5,-21(s0)
    610026e4:	fec42783          	lw	a5,-20(s0)
    610026e8:	fef42023          	sw	a5,-32(s0)
    return (ECLIC->CTRL[IRQn].INTCTRL);
    610026ec:	68000737          	lui	a4,0x68000
    610026f0:	fe046783          	lwu	a5,-32(s0)
    610026f4:	40078793          	addi	a5,a5,1024 # 68000400 <_sp+0x6fe0400>
    610026f8:	078a                	slli	a5,a5,0x2
    610026fa:	97ba                	add	a5,a5,a4
    610026fc:	0037c783          	lbu	a5,3(a5)
    61002700:	0ff7f793          	andi	a5,a5,255
        uint8_t cur_ctrl = __ECLIC_GetCtrlIRQ(IRQn);
    61002704:	fcf40fa3          	sb	a5,-33(s0)
        cur_ctrl = cur_ctrl >> (ECLIC_MAX_NLBITS - nlbits);
    61002708:	fdf44783          	lbu	a5,-33(s0)
    6100270c:	0007871b          	sext.w	a4,a5
    61002710:	fea44783          	lbu	a5,-22(s0)
    61002714:	2781                	sext.w	a5,a5
    61002716:	46a1                	li	a3,8
    61002718:	40f687bb          	subw	a5,a3,a5
    6100271c:	2781                	sext.w	a5,a5
    6100271e:	40f757bb          	sraw	a5,a4,a5
    61002722:	2781                	sext.w	a5,a5
    61002724:	fcf40fa3          	sb	a5,-33(s0)
        cur_ctrl = cur_ctrl << (ECLIC_MAX_NLBITS - nlbits);
    61002728:	fdf44783          	lbu	a5,-33(s0)
    6100272c:	0007871b          	sext.w	a4,a5
    61002730:	fea44783          	lbu	a5,-22(s0)
    61002734:	2781                	sext.w	a5,a5
    61002736:	46a1                	li	a3,8
    61002738:	40f687bb          	subw	a5,a3,a5
    6100273c:	2781                	sext.w	a5,a5
    6100273e:	00f717bb          	sllw	a5,a4,a5
    61002742:	2781                	sext.w	a5,a5
    61002744:	fcf40fa3          	sb	a5,-33(s0)
        __ECLIC_SetCtrlIRQ(IRQn, (cur_ctrl | pri));
    61002748:	feb44703          	lbu	a4,-21(s0)
    6100274c:	fdf44783          	lbu	a5,-33(s0)
    61002750:	8fd9                	or	a5,a5,a4
    61002752:	0ff7f793          	andi	a5,a5,255
    61002756:	fec42703          	lw	a4,-20(s0)
    6100275a:	fce42c23          	sw	a4,-40(s0)
    6100275e:	fcf40ba3          	sb	a5,-41(s0)
    ECLIC->CTRL[IRQn].INTCTRL = intctrl;
    61002762:	68000737          	lui	a4,0x68000
    61002766:	fd846783          	lwu	a5,-40(s0)
    6100276a:	40078793          	addi	a5,a5,1024
    6100276e:	078a                	slli	a5,a5,0x2
    61002770:	97ba                	add	a5,a5,a4
    61002772:	fd744703          	lbu	a4,-41(s0)
    61002776:	00e781a3          	sb	a4,3(a5)
}
    6100277a:	0001                	nop
    }
}
    6100277c:	0001                	nop
    ECLIC_SetTrigIRQ(IRQn, trig_mode);
    /* set interrupt level */
    ECLIC_SetLevelIRQ(IRQn, lvl);
    /* set interrupt priority */
    ECLIC_SetPriorityIRQ(IRQn, priority);
    if (handler != NULL) {
    6100277e:	f6843783          	ld	a5,-152(s0)
    61002782:	cf8d                	beqz	a5,610027bc <ECLIC_Register_IRQ+0x464>
        /* set interrupt handler entry to vector table */
        ECLIC_SetVector(IRQn, (rv_csr_t)handler);
    61002784:	f6843783          	ld	a5,-152(s0)
    61002788:	f7c42703          	lw	a4,-132(s0)
    6100278c:	fae42223          	sw	a4,-92(s0)
    61002790:	f8f43c23          	sd	a5,-104(s0)
    volatile uint32_t vec_base;
    vec_base = ((uint32_t)__RV_CSR_READ(CSR_MTVT));
    (* (unsigned long *) (vec_base + ((int32_t)IRQn) * 4)) = vector;
#elif __RISCV_XLEN == 64
    volatile uint64_t vec_base;
    vec_base = ((uint64_t)__RV_CSR_READ(CSR_MTVT));
    61002794:	307027f3          	csrr	a5,0x307
    61002798:	84be                	mv	s1,a5
    6100279a:	87a6                	mv	a5,s1
    6100279c:	f8f43423          	sd	a5,-120(s0)
    (* (unsigned long *) (vec_base + ((int32_t)IRQn) * 8)) = vector;
    610027a0:	fa442783          	lw	a5,-92(s0)
    610027a4:	0037979b          	slliw	a5,a5,0x3
    610027a8:	2781                	sext.w	a5,a5
    610027aa:	873e                	mv	a4,a5
    610027ac:	f8843783          	ld	a5,-120(s0)
    610027b0:	97ba                	add	a5,a5,a4
    610027b2:	873e                	mv	a4,a5
    610027b4:	f9843783          	ld	a5,-104(s0)
    610027b8:	e31c                	sd	a5,0(a4)
#else // TODO Need cover for XLEN=128 case in future
    volatile uint64_t vec_base;
    vec_base = ((uint64_t)__RV_CSR_READ(CSR_MTVT));
    (* (unsigned long *) (vec_base + ((int32_t)IRQn) * 8)) = vector;
#endif
}
    610027ba:	0001                	nop
    610027bc:	f7c42783          	lw	a5,-132(s0)
    610027c0:	f8f42a23          	sw	a5,-108(s0)
    ECLIC->CTRL[IRQn].INTIE |= CLIC_INTIE_IE_Msk;
    610027c4:	68000737          	lui	a4,0x68000
    610027c8:	f9446783          	lwu	a5,-108(s0)
    610027cc:	40078793          	addi	a5,a5,1024
    610027d0:	078a                	slli	a5,a5,0x2
    610027d2:	97ba                	add	a5,a5,a4
    610027d4:	0017c783          	lbu	a5,1(a5)
    610027d8:	0ff7f793          	andi	a5,a5,255
    610027dc:	680006b7          	lui	a3,0x68000
    610027e0:	0017e793          	ori	a5,a5,1
    610027e4:	0ff7f713          	andi	a4,a5,255
    610027e8:	f9446783          	lwu	a5,-108(s0)
    610027ec:	40078793          	addi	a5,a5,1024
    610027f0:	078a                	slli	a5,a5,0x2
    610027f2:	97b6                	add	a5,a5,a3
    610027f4:	00e780a3          	sb	a4,1(a5)
}
    610027f8:	0001                	nop
    }
    /* enable interrupt */
    ECLIC_EnableIRQ(IRQn);
    return 0;
    610027fa:	4781                	li	a5,0
}
    610027fc:	853e                	mv	a0,a5
    610027fe:	646a                	ld	s0,152(sp)
    61002800:	64ca                	ld	s1,144(sp)
    61002802:	610d                	addi	sp,sp,160
    61002804:	8082                	ret

0000000061002806 <_premain_init>:
 * For RISC-V gnu toolchain, _init function might not be called
 * by __libc_init_array function, so we defined a new function
 * to do initialization
 */
void _premain_init(void)
{
    61002806:	1141                	addi	sp,sp,-16
    61002808:	e406                	sd	ra,8(sp)
    6100280a:	e022                	sd	s0,0(sp)
    6100280c:	0800                	addi	s0,sp,16
    gpio_iof_config(GPIO, IOF0_UART0_MASK, IOF_SEL_0);
    uart_init(SOC_DEBUG_UART, 115200);
#endif
    //uart init
    //dma_init();
	AL9000_uart_init(AL9000_UART0, 115200,UART_BIT_LENGTH_8, AL9000_UART_STOP_BIT_1);
    6100280e:	4681                	li	a3,0
    61002810:	460d                	li	a2,3
    61002812:	67f1                	lui	a5,0x1c
    61002814:	20078593          	addi	a1,a5,512 # 1c200 <__stack_size+0x1ba00>
    61002818:	3e100793          	li	a5,993
    6100281c:	01679513          	slli	a0,a5,0x16
    61002820:	b0aff0ef          	jal	ra,61001b2a <AL9000_uart_init>
	//AL9000_uart_init(AL9000_UART0,115200,UART_BIT_LENGTH_8);
	//AL9000_uart_config_stopbit(AL9000_UART0,AL9000_UART_STOP_BIT_1);
	//AL9000_uart_fifo_enable(AL9000_UART0);
	//dma_init();
    /* Display banner after UART initialized */
    SystemBannerPrint();
    61002824:	a19ff0ef          	jal	ra,6100223c <SystemBannerPrint>
    /* Initialize exception default handlers */
    Exception_Init();
    61002828:	939ff0ef          	jal	ra,61002160 <Exception_Init>
    /* ECLIC initialization, mainly MTH and NLBIT */

    ECLIC_Init();
    6100282c:	a89ff0ef          	jal	ra,610022b4 <ECLIC_Init>
}
    61002830:	0001                	nop
    61002832:	60a2                	ld	ra,8(sp)
    61002834:	6402                	ld	s0,0(sp)
    61002836:	0141                	addi	sp,sp,16
    61002838:	8082                	ret

000000006100283a <_postmain_fini>:
 * For RISC-V gnu toolchain, _fini function might not be called
 * by __libc_fini_array function, so we defined a new function
 * to do initialization
 */
void _postmain_fini(int status)
{
    6100283a:	1101                	addi	sp,sp,-32
    6100283c:	ec22                	sd	s0,24(sp)
    6100283e:	1000                	addi	s0,sp,32
    61002840:	87aa                	mv	a5,a0
    61002842:	fef42623          	sw	a5,-20(s0)
    /* TODO: Add your own finishing code here, called after main */
#ifdef SIMULATION_XLSPIKE
    extern void xlspike_exit(int status);
    xlspike_exit(status);
#endif
}
    61002846:	0001                	nop
    61002848:	6462                	ld	s0,24(sp)
    6100284a:	6105                	addi	sp,sp,32
    6100284c:	8082                	ret

000000006100284e <_init>:
 * error init.c:(.text.__libc_init_array+0x26): undefined reference to `_init'
 * \note
 * Please use \ref _premain_init function now
 */
void _init(void)
{
    6100284e:	1141                	addi	sp,sp,-16
    61002850:	e422                	sd	s0,8(sp)
    61002852:	0800                	addi	s0,sp,16
    /* Don't put any code here, please use _premain_init now */
}
    61002854:	0001                	nop
    61002856:	6422                	ld	s0,8(sp)
    61002858:	0141                	addi	sp,sp,16
    6100285a:	8082                	ret

000000006100285c <_fini>:
 * error fini.c:(.text.__libc_fini_array+0x28): undefined reference to `_fini'
 * \note
 * Please use \ref _postmain_fini function now
 */
void _fini(void)
{
    6100285c:	1141                	addi	sp,sp,-16
    6100285e:	e422                	sd	s0,8(sp)
    61002860:	0800                	addi	s0,sp,16
    /* Don't put any code here, please use _postmain_fini now */
}
    61002862:	0001                	nop
    61002864:	6422                	ld	s0,8(sp)
    61002866:	0141                	addi	sp,sp,16
    61002868:	8082                	ret

000000006100286a <SOC_DMA_AHB_HANDLER>:
     {
        *pDnAddr++ = *pSnAddr++;
     }
}*/
void SOC_DMA_AHB_HANDLER(void)
{
    6100286a:	1101                	addi	sp,sp,-32
    6100286c:	ec06                	sd	ra,24(sp)
    6100286e:	e822                	sd	s0,16(sp)
    61002870:	1000                	addi	s0,sp,32
    printf("enter_irq_sucess\n\r");
    61002872:	00002517          	auipc	a0,0x2
    61002876:	eae50513          	addi	a0,a0,-338 # 61004720 <_read_r+0x416>
    6100287a:	59e000ef          	jal	ra,61002e18 <iprintf>
    printf("DMAC_MEM2MEM_LLP_MODE has been completed\n\r");
    6100287e:	00002517          	auipc	a0,0x2
    61002882:	eba50513          	addi	a0,a0,-326 # 61004738 <_read_r+0x42e>
    61002886:	592000ef          	jal	ra,61002e18 <iprintf>
    for(int i = 0 ; i< 5 ; i++)
    6100288a:	fe042623          	sw	zero,-20(s0)
    6100288e:	a291                	j	610029d2 <SOC_DMA_AHB_HANDLER+0x168>
    {

    	printf("ocm_data LLP_1_ADDR = %.2x\r\n",*(uint32_t*)(LLP_1_ADDR + i*4));
    61002890:	fec42703          	lw	a4,-20(s0)
    61002894:	1840c7b7          	lui	a5,0x1840c
    61002898:	0807879b          	addiw	a5,a5,128
    6100289c:	9fb9                	addw	a5,a5,a4
    6100289e:	2781                	sext.w	a5,a5
    610028a0:	0027979b          	slliw	a5,a5,0x2
    610028a4:	2781                	sext.w	a5,a5
    610028a6:	439c                	lw	a5,0(a5)
    610028a8:	85be                	mv	a1,a5
    610028aa:	00002517          	auipc	a0,0x2
    610028ae:	ebe50513          	addi	a0,a0,-322 # 61004768 <_read_r+0x45e>
    610028b2:	566000ef          	jal	ra,61002e18 <iprintf>
    	printf("ocm_data LLP_2_ADDR = %.2x\r\n",*(uint32_t*)(LLP_2_ADDR + i*4));
    610028b6:	fec42703          	lw	a4,-20(s0)
    610028ba:	1840c7b7          	lui	a5,0x1840c
    610028be:	0c07879b          	addiw	a5,a5,192
    610028c2:	9fb9                	addw	a5,a5,a4
    610028c4:	2781                	sext.w	a5,a5
    610028c6:	0027979b          	slliw	a5,a5,0x2
    610028ca:	2781                	sext.w	a5,a5
    610028cc:	439c                	lw	a5,0(a5)
    610028ce:	85be                	mv	a1,a5
    610028d0:	00002517          	auipc	a0,0x2
    610028d4:	eb850513          	addi	a0,a0,-328 # 61004788 <_read_r+0x47e>
    610028d8:	540000ef          	jal	ra,61002e18 <iprintf>
    	printf("ocm_data LLP_3_ADDR = %.2x\r\n",*(uint32_t*)(LLP_3_ADDR + i*4));
    610028dc:	fec42703          	lw	a4,-20(s0)
    610028e0:	1840c7b7          	lui	a5,0x1840c
    610028e4:	1007879b          	addiw	a5,a5,256
    610028e8:	9fb9                	addw	a5,a5,a4
    610028ea:	2781                	sext.w	a5,a5
    610028ec:	0027979b          	slliw	a5,a5,0x2
    610028f0:	2781                	sext.w	a5,a5
    610028f2:	439c                	lw	a5,0(a5)
    610028f4:	85be                	mv	a1,a5
    610028f6:	00002517          	auipc	a0,0x2
    610028fa:	eb250513          	addi	a0,a0,-334 # 610047a8 <_read_r+0x49e>
    610028fe:	51a000ef          	jal	ra,61002e18 <iprintf>
    	printf("ocm_data LLP_4_ADDR = %.2x\r\n",*(uint32_t*)(LLP_4_ADDR + i*4));
    61002902:	fec42703          	lw	a4,-20(s0)
    61002906:	1840c7b7          	lui	a5,0x1840c
    6100290a:	1407879b          	addiw	a5,a5,320
    6100290e:	9fb9                	addw	a5,a5,a4
    61002910:	2781                	sext.w	a5,a5
    61002912:	0027979b          	slliw	a5,a5,0x2
    61002916:	2781                	sext.w	a5,a5
    61002918:	439c                	lw	a5,0(a5)
    6100291a:	85be                	mv	a1,a5
    6100291c:	00002517          	auipc	a0,0x2
    61002920:	eac50513          	addi	a0,a0,-340 # 610047c8 <_read_r+0x4be>
    61002924:	4f4000ef          	jal	ra,61002e18 <iprintf>
    	printf("ocm_data MEM_BASE1_ADDR = %.2x\r\n",*(uint32_t*)(MEM_BASE1_ADDR + i*4));
    61002928:	fec42703          	lw	a4,-20(s0)
    6100292c:	1840c7b7          	lui	a5,0x1840c
    61002930:	9fb9                	addw	a5,a5,a4
    61002932:	2781                	sext.w	a5,a5
    61002934:	0027979b          	slliw	a5,a5,0x2
    61002938:	2781                	sext.w	a5,a5
    6100293a:	439c                	lw	a5,0(a5)
    6100293c:	85be                	mv	a1,a5
    6100293e:	00002517          	auipc	a0,0x2
    61002942:	eaa50513          	addi	a0,a0,-342 # 610047e8 <_read_r+0x4de>
    61002946:	4d2000ef          	jal	ra,61002e18 <iprintf>
    	printf("ocm_data MEM_BASE2_ADDR = %.2x\r\n",*(uint32_t*)(MEM_BASE2_ADDR + i*4));
    6100294a:	fec42703          	lw	a4,-20(s0)
    6100294e:	1840c7b7          	lui	a5,0x1840c
    61002952:	0407879b          	addiw	a5,a5,64
    61002956:	9fb9                	addw	a5,a5,a4
    61002958:	2781                	sext.w	a5,a5
    6100295a:	0027979b          	slliw	a5,a5,0x2
    6100295e:	2781                	sext.w	a5,a5
    61002960:	439c                	lw	a5,0(a5)
    61002962:	85be                	mv	a1,a5
    61002964:	00002517          	auipc	a0,0x2
    61002968:	eac50513          	addi	a0,a0,-340 # 61004810 <_read_r+0x506>
    6100296c:	4ac000ef          	jal	ra,61002e18 <iprintf>

    	if((*(uint32_t*)(MEM_BASE1_ADDR + i*4)) == (*(uint32_t*)(MEM_BASE2_ADDR + i*4)))
    61002970:	fec42703          	lw	a4,-20(s0)
    61002974:	1840c7b7          	lui	a5,0x1840c
    61002978:	9fb9                	addw	a5,a5,a4
    6100297a:	2781                	sext.w	a5,a5
    6100297c:	0027979b          	slliw	a5,a5,0x2
    61002980:	2781                	sext.w	a5,a5
    61002982:	4394                	lw	a3,0(a5)
    61002984:	fec42703          	lw	a4,-20(s0)
    61002988:	1840c7b7          	lui	a5,0x1840c
    6100298c:	0407879b          	addiw	a5,a5,64
    61002990:	9fb9                	addw	a5,a5,a4
    61002992:	2781                	sext.w	a5,a5
    61002994:	0027979b          	slliw	a5,a5,0x2
    61002998:	2781                	sext.w	a5,a5
    6100299a:	439c                	lw	a5,0(a5)
    6100299c:	8736                	mv	a4,a3
    6100299e:	00f71963          	bne	a4,a5,610029b0 <SOC_DMA_AHB_HANDLER+0x146>
    	{
    		printf("dmac_transmissiom_pass\r\n");
    610029a2:	00002517          	auipc	a0,0x2
    610029a6:	e9650513          	addi	a0,a0,-362 # 61004838 <_read_r+0x52e>
    610029aa:	592000ef          	jal	ra,61002f3c <puts>
    610029ae:	a039                	j	610029bc <SOC_DMA_AHB_HANDLER+0x152>
    	}
    	else
    	{
    		printf("dmac_transmissiom_fail\r\n");
    610029b0:	00002517          	auipc	a0,0x2
    610029b4:	ea050513          	addi	a0,a0,-352 # 61004850 <_read_r+0x546>
    610029b8:	584000ef          	jal	ra,61002f3c <puts>
    	}
    	printf("very good");
    610029bc:	00002517          	auipc	a0,0x2
    610029c0:	eac50513          	addi	a0,a0,-340 # 61004868 <_read_r+0x55e>
    610029c4:	454000ef          	jal	ra,61002e18 <iprintf>
    for(int i = 0 ; i< 5 ; i++)
    610029c8:	fec42783          	lw	a5,-20(s0)
    610029cc:	2785                	addiw	a5,a5,1
    610029ce:	fef42623          	sw	a5,-20(s0)
    610029d2:	fec42783          	lw	a5,-20(s0)
    610029d6:	0007871b          	sext.w	a4,a5
    610029da:	4791                	li	a5,4
    610029dc:	eae7dae3          	bge	a5,a4,61002890 <SOC_DMA_AHB_HANDLER+0x26>
    }
    while(1);
    610029e0:	a001                	j	610029e0 <SOC_DMA_AHB_HANDLER+0x176>

00000000610029e2 <main>:
    else{
           dw_dmac_clearIrq(AL9000_DMAC,dw_dmac_channel_num_1,block_1);
         }
#endif
}
    int main(void){
    610029e2:	7135                	addi	sp,sp,-160
    610029e4:	ed06                	sd	ra,152(sp)
    610029e6:	e922                	sd	s0,144(sp)
    610029e8:	1100                	addi	s0,sp,160
	__RV_CSR_CLEAR(CSR_MMISC_CTL,MMISC_CTL_BPU);
    610029ea:	40a1                	li	ra,8
    610029ec:	7d00b073          	csrc	0x7d0,ra
 	 *You can open this part
 	 *But we do not recommend this
 	 *interrupts_count_blocks_mode will stay in interruptttttt fo a long time,reduce DMA efficiency
 	 *
 	 */
        ECLIC_Register_IRQ(SOC_INT65_IRQn, ECLIC_NON_VECTOR_INTERRUPT,ECLIC_LEVEL_TRIGGER, 1, 1,SOC_DMA_AHB_HANDLER);
    610029f0:	00000797          	auipc	a5,0x0
    610029f4:	e7a78793          	addi	a5,a5,-390 # 6100286a <SOC_DMA_AHB_HANDLER>
    610029f8:	4705                	li	a4,1
    610029fa:	4685                	li	a3,1
    610029fc:	4601                	li	a2,0
    610029fe:	4581                	li	a1,0
    61002a00:	04100513          	li	a0,65
    61002a04:	955ff0ef          	jal	ra,61002358 <ECLIC_Register_IRQ>
 * \remarks
 *          Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
    __RV_CSR_SET(CSR_MSTATUS, MSTATUS_MIE);
    61002a08:	40a1                	li	ra,8
    61002a0a:	3000a073          	csrs	mstatus,ra
}
    61002a0e:	0001                	nop
	__enable_irq();
	/*
 	 *dw_dmac_enableChannelIrq()
 	 */
         dw_dmac_enableChannelIrq(AL9000_DMAC_channel_0,dw_dmac_channel_num_1);
    61002a10:	4585                	li	a1,1
    61002a12:	000f87b7          	lui	a5,0xf8
    61002a16:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002a1a:	00c79513          	slli	a0,a5,0xc
    61002a1e:	a17fd0ef          	jal	ra,61000434 <dw_dmac_enableChannelIrq>
	/*
	 *dw_dmac_unmaskIrq()
	 */
         dw_dmac_unmaskIrq(AL9000_DMAC,dw_dmac_channel_num_1,tfr_l);
    61002a22:	4601                	li	a2,0
    61002a24:	4585                	li	a1,1
    61002a26:	03e017b7          	lui	a5,0x3e01
    61002a2a:	34b78793          	addi	a5,a5,843 # 3e0134b <__stack_size+0x3e00b4b>
    61002a2e:	00679513          	slli	a0,a5,0x6
    61002a32:	a6ffd0ef          	jal	ra,610004a0 <dw_dmac_unmaskIrq>

	/*
	 * dw_dmac_setAddress
	 *
	 */
	 dw_dmac_setAddress(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src,MEM_BASE1_ADDR);
    61002a36:	610306b7          	lui	a3,0x61030
    61002a3a:	4601                	li	a2,0
    61002a3c:	4585                	li	a1,1
    61002a3e:	000f87b7          	lui	a5,0xf8
    61002a42:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002a46:	00c79513          	slli	a0,a5,0xc
    61002a4a:	b69fd0ef          	jal	ra,610005b2 <dw_dmac_setAddress>
		/*
		 * dw_dmac_setAddress
		 */
         dw_dmac_setAddress(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_dst,MEM_BASE2_ADDR);
    61002a4e:	610307b7          	lui	a5,0x61030
    61002a52:	10078693          	addi	a3,a5,256 # 61030100 <_sp+0x10100>
    61002a56:	4605                	li	a2,1
    61002a58:	4585                	li	a1,1
    61002a5a:	000f87b7          	lui	a5,0xf8
    61002a5e:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002a62:	00c79513          	slli	a0,a5,0xc
    61002a66:	b4dfd0ef          	jal	ra,610005b2 <dw_dmac_setAddress>

	/*
	 * dw_dmac_setChannelConfig
	 */
	 dw_dmac_setChannelConfig(AL9000_DMAC_channel_0);
    61002a6a:	000f87b7          	lui	a5,0xf8
    61002a6e:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002a72:	00c79513          	slli	a0,a5,0xc
    61002a76:	bcdfd0ef          	jal	ra,61000642 <dw_dmac_setChannelConfig>
	 /*
	  * dw_dmac_setTransferType
	  */
	 dw_dmac_setTransferType(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_transfer_row10,Dmac_src_dst);
    61002a7a:	4689                	li	a3,2
    61002a7c:	4625                	li	a2,9
    61002a7e:	4585                	li	a1,1
    61002a80:	000f87b7          	lui	a5,0xf8
    61002a84:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002a88:	00c79513          	slli	a0,a5,0xc
    61002a8c:	d99fd0ef          	jal	ra,61000824 <dw_dmac_setTransferType>
	 /*
	  * dw_dmac_setMemPeriphFlowCtl
	  */
	 dw_dmac_setMemPeriphFlowCtl(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,MEM2MEM);
    61002a90:	4601                	li	a2,0
    61002a92:	4585                	li	a1,1
    61002a94:	000f87b7          	lui	a5,0xf8
    61002a98:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002a9c:	00c79513          	slli	a0,a5,0xc
    61002aa0:	fd3fd0ef          	jal	ra,61000a72 <dw_dmac_setMemPeriphFlowCtl>
	 /*
	  * dw_dmac_setTransWidth
	  * you can set the Transwidth :8/16/32/64/256 MAX_WIDTH=256
	  */
	 dw_dmac_setTransWidth(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src_dst,WIDTH_32);
    61002aa4:	4689                	li	a3,2
    61002aa6:	4609                	li	a2,2
    61002aa8:	4585                	li	a1,1
    61002aaa:	000f87b7          	lui	a5,0xf8
    61002aae:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002ab2:	00c79513          	slli	a0,a5,0xc
    61002ab6:	8c2fe0ef          	jal	ra,61000b78 <dw_dmac_setTransWidth>
	 /*
	  * dw_dmac_setBlockTransSize
	  * you can set the number of burst in one of the block
	  * range MIN:MAX = 1:4096
	  */
	 dw_dmac_setBlockTransSize(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,10);
    61002aba:	4629                	li	a2,10
    61002abc:	4585                	li	a1,1
    61002abe:	000f87b7          	lui	a5,0xf8
    61002ac2:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002ac6:	00c79513          	slli	a0,a5,0xc
    61002aca:	aecfe0ef          	jal	ra,61000db6 <dw_dmac_setBlockTransSize>
	 /*
	  * dw_dmac_setBurstTransLength
	  */
	 dw_dmac_setBurstTransLength(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src_dst,DW_DMA_MSIZE_8);
    61002ace:	4689                	li	a3,2
    61002ad0:	4609                	li	a2,2
    61002ad2:	4585                	li	a1,1
    61002ad4:	000f87b7          	lui	a5,0xf8
    61002ad8:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002adc:	00c79513          	slli	a0,a5,0xc
    61002ae0:	b74fe0ef          	jal	ra,61000e54 <dw_dmac_setBurstTransLength>
	 /*
	  *  dw_dmac_setMstSelect
	  */
	 dw_dmac_setMstSelect(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src_dst,SMS_master1,DMS_master1);
    61002ae4:	4701                	li	a4,0
    61002ae6:	4681                	li	a3,0
    61002ae8:	4609                	li	a2,2
    61002aea:	4585                	li	a1,1
    61002aec:	000f87b7          	lui	a5,0xf8
    61002af0:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002af4:	00c79513          	slli	a0,a5,0xc
    61002af8:	df8fe0ef          	jal	ra,610010f0 <dw_dmac_setMstSelect>
	 /*
	  * dw_dmac_setAddressInc
	  */
	 dw_dmac_setAddressInc(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src_dst,Increments);
    61002afc:	4681                	li	a3,0
    61002afe:	4609                	li	a2,2
    61002b00:	4585                	li	a1,1
    61002b02:	000f87b7          	lui	a5,0xf8
    61002b06:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002b0a:	00c79513          	slli	a0,a5,0xc
    61002b0e:	f7efe0ef          	jal	ra,6100128c <dw_dmac_setAddressInc>
	 /*
	  * dw_dmac_setHandshakingMode
	  */
	 dw_dmac_setHandshakingMode(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src_dst,Hardware_handshaking);
    61002b12:	4681                	li	a3,0
    61002b14:	4609                	li	a2,2
    61002b16:	4585                	li	a1,1
    61002b18:	000f87b7          	lui	a5,0xf8
    61002b1c:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002b20:	00c79513          	slli	a0,a5,0xc
    61002b24:	ae7fe0ef          	jal	ra,6100160a <dw_dmac_setHandshakingMode>
	 /*
	  * dw_dmac_setHsPolarity
	  */
	 dw_dmac_setHsPolarity(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,Dmac_src_dst,ACTIVE_HIGH);
    61002b28:	4681                	li	a3,0
    61002b2a:	4609                	li	a2,2
    61002b2c:	4585                	li	a1,1
    61002b2e:	000f87b7          	lui	a5,0xf8
    61002b32:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002b36:	00c79513          	slli	a0,a5,0xc
    61002b3a:	8d9fe0ef          	jal	ra,61001412 <dw_dmac_setHsPolarity>
	 /*
	  * dw_dmac_setFifoMode
	  */
	 dw_dmac_setFifoMode(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,FIFO_MODE_0);
    61002b3e:	4601                	li	a2,0
    61002b40:	4585                	li	a1,1
    61002b42:	000f87b7          	lui	a5,0xf8
    61002b46:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002b4a:	00c79513          	slli	a0,a5,0xc
    61002b4e:	9bbfe0ef          	jal	ra,61001508 <dw_dmac_setFifoMode>

	 /*
	  * dw_dmac_setFlowCtlMode
	  */
	 dw_dmac_setFlowCtlMode(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,fc_mode_0);
    61002b52:	4601                	li	a2,0
    61002b54:	4585                	li	a1,1
    61002b56:	000f87b7          	lui	a5,0xf8
    61002b5a:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002b5e:	00c79513          	slli	a0,a5,0xc
    61002b62:	a3dfe0ef          	jal	ra,6100159e <dw_dmac_setFlowCtlMode>
	 /*
	  * dw_dmac_checkChannelBusy
	  */
	 dw_dmac_checkChannelBusy(AL9000_DMAC,dw_dmac_channel_num_1);
    61002b66:	4585                	li	a1,1
    61002b68:	03e017b7          	lui	a5,0x3e01
    61002b6c:	34b78793          	addi	a5,a5,843 # 3e0134b <__stack_size+0x3e00b4b>
    61002b70:	00679513          	slli	a0,a5,0x6
    61002b74:	f13fe0ef          	jal	ra,61001a86 <dw_dmac_checkChannelBusy>

	 dw_dmac_setListPointerAddress(AL9000_DMAC_channel_0,dw_dmac_channel_num_1,LMS_master1,LLP_BASE_ADDR);
    61002b78:	610307b7          	lui	a5,0x61030
    61002b7c:	20078693          	addi	a3,a5,512 # 61030200 <_sp+0x10200>
    61002b80:	4601                	li	a2,0
    61002b82:	4585                	li	a1,1
    61002b84:	000f87b7          	lui	a5,0xf8
    61002b88:	04d78793          	addi	a5,a5,77 # f804d <__stack_size+0xf784d>
    61002b8c:	00c79513          	slli	a0,a5,0xc
    61002b90:	dc3fe0ef          	jal	ra,61001952 <dw_dmac_setListPointerAddress>

          volatile uint32_t buffer[10];
	  volatile uint32_t buffer_list_parm[4][5]={{0x61030000,0x61030100,0x61030300,0x18004825,0x00000008},
    61002b94:	00002797          	auipc	a5,0x2
    61002b98:	ce478793          	addi	a5,a5,-796 # 61004878 <_read_r+0x56e>
    61002b9c:	0007be03          	ld	t3,0(a5)
    61002ba0:	0087b303          	ld	t1,8(a5)
    61002ba4:	0107b883          	ld	a7,16(a5)
    61002ba8:	0187b803          	ld	a6,24(a5)
    61002bac:	7388                	ld	a0,32(a5)
    61002bae:	778c                	ld	a1,40(a5)
    61002bb0:	7b90                	ld	a2,48(a5)
    61002bb2:	7f94                	ld	a3,56(a5)
    61002bb4:	63b8                	ld	a4,64(a5)
    61002bb6:	67bc                	ld	a5,72(a5)
    61002bb8:	f7c43c23          	sd	t3,-136(s0)
    61002bbc:	f8643023          	sd	t1,-128(s0)
    61002bc0:	f9143423          	sd	a7,-120(s0)
    61002bc4:	f9043823          	sd	a6,-112(s0)
    61002bc8:	f8a43c23          	sd	a0,-104(s0)
    61002bcc:	fab43023          	sd	a1,-96(s0)
    61002bd0:	fac43423          	sd	a2,-88(s0)
    61002bd4:	fad43823          	sd	a3,-80(s0)
    61002bd8:	fae43c23          	sd	a4,-72(s0)
    61002bdc:	fcf43023          	sd	a5,-64(s0)
						    					{0x61030000,0x61030100,0x61030400,0x18004825,0x00000008},
												{0x61030000,0x61030100,0x61030500,0x00004825,0x00000008},
												{0x61030000,0x61030100,0x61030600,0x00004825,0x00000008}};
	 for (volatile uint32_t i = 0 ; i < 10 ; i++)
    61002be0:	f6042a23          	sw	zero,-140(s0)
    61002be4:	a035                	j	61002c10 <main+0x22e>
	 {
		 buffer[i] = i;
    61002be6:	f7442783          	lw	a5,-140(s0)
    61002bea:	2781                	sext.w	a5,a5
    61002bec:	f7442703          	lw	a4,-140(s0)
    61002bf0:	2701                	sext.w	a4,a4
    61002bf2:	1782                	slli	a5,a5,0x20
    61002bf4:	9381                	srli	a5,a5,0x20
    61002bf6:	078a                	slli	a5,a5,0x2
    61002bf8:	ff040693          	addi	a3,s0,-16
    61002bfc:	97b6                	add	a5,a5,a3
    61002bfe:	fce7ac23          	sw	a4,-40(a5)
	 for (volatile uint32_t i = 0 ; i < 10 ; i++)
    61002c02:	f7442783          	lw	a5,-140(s0)
    61002c06:	2781                	sext.w	a5,a5
    61002c08:	2785                	addiw	a5,a5,1
    61002c0a:	2781                	sext.w	a5,a5
    61002c0c:	f6f42a23          	sw	a5,-140(s0)
    61002c10:	f7442783          	lw	a5,-140(s0)
    61002c14:	2781                	sext.w	a5,a5
    61002c16:	873e                	mv	a4,a5
    61002c18:	47a5                	li	a5,9
    61002c1a:	fce7f6e3          	bgeu	a5,a4,61002be6 <main+0x204>
	 }
	 write_To_OCM((uint32_t*)buffer,10,(uint32_t*)MEM_BASE1_ADDR);
    61002c1e:	fc840793          	addi	a5,s0,-56
    61002c22:	61030637          	lui	a2,0x61030
    61002c26:	45a9                	li	a1,10
    61002c28:	853e                	mv	a0,a5
    61002c2a:	e99fe0ef          	jal	ra,61001ac2 <write_To_OCM>
	 /*static volatile uint32_t *p=(uint32_t*)MEM_BASE1_ADDR;    //指定q的地址为MEM_BASE1_ADDR;
			          *p=1;*/

        for (volatile uint32_t i = 0 ; i < 4 ; i++)
    61002c2e:	f6042823          	sw	zero,-144(s0)
    61002c32:	a8dd                	j	61002d28 <main+0x346>
	{
		for (volatile uint32_t j = 0 ; j < 5 ; j++)
    61002c34:	f6042623          	sw	zero,-148(s0)
    61002c38:	a8a9                	j	61002c92 <main+0x2b0>
		{
 			buffer[j] = (uint32_t)buffer_list_parm[i][j];
    61002c3a:	f7042783          	lw	a5,-144(s0)
    61002c3e:	2781                	sext.w	a5,a5
    61002c40:	f6c42703          	lw	a4,-148(s0)
    61002c44:	2701                	sext.w	a4,a4
    61002c46:	f6c42683          	lw	a3,-148(s0)
    61002c4a:	0006861b          	sext.w	a2,a3
    61002c4e:	02071693          	slli	a3,a4,0x20
    61002c52:	9281                	srli	a3,a3,0x20
    61002c54:	02079713          	slli	a4,a5,0x20
    61002c58:	9301                	srli	a4,a4,0x20
    61002c5a:	87ba                	mv	a5,a4
    61002c5c:	078a                	slli	a5,a5,0x2
    61002c5e:	97ba                	add	a5,a5,a4
    61002c60:	97b6                	add	a5,a5,a3
    61002c62:	078a                	slli	a5,a5,0x2
    61002c64:	ff040713          	addi	a4,s0,-16
    61002c68:	97ba                	add	a5,a5,a4
    61002c6a:	f887a783          	lw	a5,-120(a5)
    61002c6e:	0007871b          	sext.w	a4,a5
    61002c72:	02061793          	slli	a5,a2,0x20
    61002c76:	9381                	srli	a5,a5,0x20
    61002c78:	078a                	slli	a5,a5,0x2
    61002c7a:	ff040693          	addi	a3,s0,-16
    61002c7e:	97b6                	add	a5,a5,a3
    61002c80:	fce7ac23          	sw	a4,-40(a5)
		for (volatile uint32_t j = 0 ; j < 5 ; j++)
    61002c84:	f6c42783          	lw	a5,-148(s0)
    61002c88:	2781                	sext.w	a5,a5
    61002c8a:	2785                	addiw	a5,a5,1
    61002c8c:	2781                	sext.w	a5,a5
    61002c8e:	f6f42623          	sw	a5,-148(s0)
    61002c92:	f6c42783          	lw	a5,-148(s0)
    61002c96:	2781                	sext.w	a5,a5
    61002c98:	873e                	mv	a4,a5
    61002c9a:	4791                	li	a5,4
    61002c9c:	f8e7ffe3          	bgeu	a5,a4,61002c3a <main+0x258>
			{
			    dw_dmac_setListPointerAddress(AL9000_DMAC,AL9000_DMAC_channel_0,dw_dmac_channel_num_1,LMS_master1,buffer_list_parm[i][j]);
			}
#endif
 		}
              switch(i)
    61002ca0:	f7042783          	lw	a5,-144(s0)
    61002ca4:	2781                	sext.w	a5,a5
    61002ca6:	86be                	mv	a3,a5
    61002ca8:	4709                	li	a4,2
    61002caa:	04e68263          	beq	a3,a4,61002cee <main+0x30c>
    61002cae:	86be                	mv	a3,a5
    61002cb0:	4709                	li	a4,2
    61002cb2:	04d76963          	bltu	a4,a3,61002d04 <main+0x322>
    61002cb6:	c791                	beqz	a5,61002cc2 <main+0x2e0>
    61002cb8:	873e                	mv	a4,a5
    61002cba:	4785                	li	a5,1
    61002cbc:	00f70e63          	beq	a4,a5,61002cd8 <main+0x2f6>
    61002cc0:	a091                	j	61002d04 <main+0x322>
		{
		case 0:
		      write_To_OCM((uint32_t*)buffer,5,(uint32_t*)LLP_1_ADDR );
    61002cc2:	fc840713          	addi	a4,s0,-56
    61002cc6:	610307b7          	lui	a5,0x61030
    61002cca:	20078613          	addi	a2,a5,512 # 61030200 <_sp+0x10200>
    61002cce:	4595                	li	a1,5
    61002cd0:	853a                	mv	a0,a4
    61002cd2:	df1fe0ef          	jal	ra,61001ac2 <write_To_OCM>
		break;
    61002cd6:	a091                	j	61002d1a <main+0x338>
		case 1:
		      write_To_OCM((uint32_t*)buffer,5,(uint32_t*)LLP_2_ADDR);
    61002cd8:	fc840713          	addi	a4,s0,-56
    61002cdc:	610307b7          	lui	a5,0x61030
    61002ce0:	30078613          	addi	a2,a5,768 # 61030300 <_sp+0x10300>
    61002ce4:	4595                	li	a1,5
    61002ce6:	853a                	mv	a0,a4
    61002ce8:	ddbfe0ef          	jal	ra,61001ac2 <write_To_OCM>
		break;
    61002cec:	a03d                	j	61002d1a <main+0x338>
		case 2:
			  write_To_OCM((uint32_t*)buffer,5,(uint32_t*)LLP_3_ADDR);
    61002cee:	fc840713          	addi	a4,s0,-56
    61002cf2:	610307b7          	lui	a5,0x61030
    61002cf6:	40078613          	addi	a2,a5,1024 # 61030400 <_sp+0x10400>
    61002cfa:	4595                	li	a1,5
    61002cfc:	853a                	mv	a0,a4
    61002cfe:	dc5fe0ef          	jal	ra,61001ac2 <write_To_OCM>
				break;
    61002d02:	a821                	j	61002d1a <main+0x338>
		default:
		      write_To_OCM((uint32_t*)buffer,5,(uint32_t*)LLP_4_ADDR);
    61002d04:	fc840713          	addi	a4,s0,-56
    61002d08:	610307b7          	lui	a5,0x61030
    61002d0c:	50078613          	addi	a2,a5,1280 # 61030500 <_sp+0x10500>
    61002d10:	4595                	li	a1,5
    61002d12:	853a                	mv	a0,a4
    61002d14:	daffe0ef          	jal	ra,61001ac2 <write_To_OCM>
		break;
    61002d18:	0001                	nop
        for (volatile uint32_t i = 0 ; i < 4 ; i++)
    61002d1a:	f7042783          	lw	a5,-144(s0)
    61002d1e:	2781                	sext.w	a5,a5
    61002d20:	2785                	addiw	a5,a5,1
    61002d22:	2781                	sext.w	a5,a5
    61002d24:	f6f42823          	sw	a5,-144(s0)
    61002d28:	f7042783          	lw	a5,-144(s0)
    61002d2c:	2781                	sext.w	a5,a5
    61002d2e:	873e                	mv	a4,a5
    61002d30:	478d                	li	a5,3
    61002d32:	f0e7f1e3          	bgeu	a5,a4,61002c34 <main+0x252>
		}
	}
  	 /*
	  * dw_dmac_enable
	  */
	 dw_dmac_enable(AL9000_DMAC);
    61002d36:	03e017b7          	lui	a5,0x3e01
    61002d3a:	34b78793          	addi	a5,a5,843 # 3e0134b <__stack_size+0x3e00b4b>
    61002d3e:	00679513          	slli	a0,a5,0x6
    61002d42:	e74fd0ef          	jal	ra,610003b6 <dw_dmac_enable>
	 /*
	  * dw_dmac_enableChannel
	  */
	 dw_dmac_enableChannel(AL9000_DMAC,dw_dmac_channel_num_1);
    61002d46:	4585                	li	a1,1
    61002d48:	03e017b7          	lui	a5,0x3e01
    61002d4c:	34b78793          	addi	a5,a5,843 # 3e0134b <__stack_size+0x3e00b4b>
    61002d50:	00679513          	slli	a0,a5,0x6
    61002d54:	e8efd0ef          	jal	ra,610003e2 <dw_dmac_enableChannel>
	printf("ocm_data = %.2x\r\n",*(uint32_t*)(MEM_BASE2_ADDR + i*4));
}*/
	//printf("123456");
	//printf("ocm_data");

	return 0;
    61002d58:	4781                	li	a5,0
}
    61002d5a:	853e                	mv	a0,a5
    61002d5c:	60ea                	ld	ra,152(sp)
    61002d5e:	644a                	ld	s0,144(sp)
    61002d60:	610d                	addi	sp,sp,160
    61002d62:	8082                	ret

0000000061002d64 <atexit>:
    61002d64:	85aa                	mv	a1,a0
    61002d66:	4681                	li	a3,0
    61002d68:	4601                	li	a2,0
    61002d6a:	4501                	li	a0,0
    61002d6c:	5400006f          	j	610032ac <__register_exitproc>

0000000061002d70 <__libc_fini_array>:
    61002d70:	1101                	addi	sp,sp,-32
    61002d72:	00002797          	auipc	a5,0x2
    61002d76:	c9e78793          	addi	a5,a5,-866 # 61004a10 <__fsymtab_end>
    61002d7a:	e822                	sd	s0,16(sp)
    61002d7c:	00002417          	auipc	s0,0x2
    61002d80:	c9440413          	addi	s0,s0,-876 # 61004a10 <__fsymtab_end>
    61002d84:	8c1d                	sub	s0,s0,a5
    61002d86:	e426                	sd	s1,8(sp)
    61002d88:	ec06                	sd	ra,24(sp)
    61002d8a:	840d                	srai	s0,s0,0x3
    61002d8c:	84be                	mv	s1,a5
    61002d8e:	e419                	bnez	s0,61002d9c <__libc_fini_array+0x2c>
    61002d90:	6442                	ld	s0,16(sp)
    61002d92:	60e2                	ld	ra,24(sp)
    61002d94:	64a2                	ld	s1,8(sp)
    61002d96:	6105                	addi	sp,sp,32
    61002d98:	ac5ff06f          	j	6100285c <_fini>
    61002d9c:	147d                	addi	s0,s0,-1
    61002d9e:	00341793          	slli	a5,s0,0x3
    61002da2:	97a6                	add	a5,a5,s1
    61002da4:	639c                	ld	a5,0(a5)
    61002da6:	9782                	jalr	a5
    61002da8:	b7dd                	j	61002d8e <__libc_fini_array+0x1e>

0000000061002daa <__libc_init_array>:
    61002daa:	1101                	addi	sp,sp,-32
    61002dac:	00002797          	auipc	a5,0x2
    61002db0:	c6478793          	addi	a5,a5,-924 # 61004a10 <__fsymtab_end>
    61002db4:	e822                	sd	s0,16(sp)
    61002db6:	00002417          	auipc	s0,0x2
    61002dba:	c5a40413          	addi	s0,s0,-934 # 61004a10 <__fsymtab_end>
    61002dbe:	8c1d                	sub	s0,s0,a5
    61002dc0:	e426                	sd	s1,8(sp)
    61002dc2:	e04a                	sd	s2,0(sp)
    61002dc4:	ec06                	sd	ra,24(sp)
    61002dc6:	840d                	srai	s0,s0,0x3
    61002dc8:	4481                	li	s1,0
    61002dca:	893e                	mv	s2,a5
    61002dcc:	02849863          	bne	s1,s0,61002dfc <__libc_init_array+0x52>
    61002dd0:	a7fff0ef          	jal	ra,6100284e <_init>
    61002dd4:	00002797          	auipc	a5,0x2
    61002dd8:	c3c78793          	addi	a5,a5,-964 # 61004a10 <__fsymtab_end>
    61002ddc:	00002417          	auipc	s0,0x2
    61002de0:	c3440413          	addi	s0,s0,-972 # 61004a10 <__fsymtab_end>
    61002de4:	8c1d                	sub	s0,s0,a5
    61002de6:	840d                	srai	s0,s0,0x3
    61002de8:	4481                	li	s1,0
    61002dea:	893e                	mv	s2,a5
    61002dec:	00849f63          	bne	s1,s0,61002e0a <__libc_init_array+0x60>
    61002df0:	60e2                	ld	ra,24(sp)
    61002df2:	6442                	ld	s0,16(sp)
    61002df4:	64a2                	ld	s1,8(sp)
    61002df6:	6902                	ld	s2,0(sp)
    61002df8:	6105                	addi	sp,sp,32
    61002dfa:	8082                	ret
    61002dfc:	00349793          	slli	a5,s1,0x3
    61002e00:	97ca                	add	a5,a5,s2
    61002e02:	639c                	ld	a5,0(a5)
    61002e04:	0485                	addi	s1,s1,1
    61002e06:	9782                	jalr	a5
    61002e08:	b7d1                	j	61002dcc <__libc_init_array+0x22>
    61002e0a:	00349793          	slli	a5,s1,0x3
    61002e0e:	97ca                	add	a5,a5,s2
    61002e10:	639c                	ld	a5,0(a5)
    61002e12:	0485                	addi	s1,s1,1
    61002e14:	9782                	jalr	a5
    61002e16:	bfd9                	j	61002dec <__libc_init_array+0x42>

0000000061002e18 <iprintf>:
    61002e18:	7159                	addi	sp,sp,-112
    61002e1a:	f022                	sd	s0,32(sp)
    61002e1c:	f406                	sd	ra,40(sp)
    61002e1e:	842a                	mv	s0,a0
    61002e20:	fc2e                	sd	a1,56(sp)
    61002e22:	e0b2                	sd	a2,64(sp)
    61002e24:	e4b6                	sd	a3,72(sp)
    61002e26:	e8ba                	sd	a4,80(sp)
    61002e28:	ecbe                	sd	a5,88(sp)
    61002e2a:	f0c2                	sd	a6,96(sp)
    61002e2c:	f4c6                	sd	a7,104(sp)
    61002e2e:	8101b503          	ld	a0,-2032(gp) # 610100c0 <_impure_ptr>
    61002e32:	c519                	beqz	a0,61002e40 <iprintf+0x28>
    61002e34:	591c                	lw	a5,48(a0)
    61002e36:	e789                	bnez	a5,61002e40 <iprintf+0x28>
    61002e38:	e42a                	sd	a0,8(sp)
    61002e3a:	750000ef          	jal	ra,6100358a <__sinit>
    61002e3e:	6522                	ld	a0,8(sp)
    61002e40:	690c                	ld	a1,16(a0)
    61002e42:	1834                	addi	a3,sp,56
    61002e44:	8622                	mv	a2,s0
    61002e46:	ec36                	sd	a3,24(sp)
    61002e48:	47d000ef          	jal	ra,61003ac4 <_vfiprintf_r>
    61002e4c:	70a2                	ld	ra,40(sp)
    61002e4e:	7402                	ld	s0,32(sp)
    61002e50:	6165                	addi	sp,sp,112
    61002e52:	8082                	ret

0000000061002e54 <_puts_r>:
    61002e54:	7179                	addi	sp,sp,-48
    61002e56:	ec26                	sd	s1,24(sp)
    61002e58:	e84a                	sd	s2,16(sp)
    61002e5a:	f406                	sd	ra,40(sp)
    61002e5c:	f022                	sd	s0,32(sp)
    61002e5e:	e44e                	sd	s3,8(sp)
    61002e60:	e052                	sd	s4,0(sp)
    61002e62:	84aa                	mv	s1,a0
    61002e64:	892e                	mv	s2,a1
    61002e66:	c509                	beqz	a0,61002e70 <_puts_r+0x1c>
    61002e68:	591c                	lw	a5,48(a0)
    61002e6a:	e399                	bnez	a5,61002e70 <_puts_r+0x1c>
    61002e6c:	71e000ef          	jal	ra,6100358a <__sinit>
    61002e70:	589c                	lw	a5,48(s1)
    61002e72:	6880                	ld	s0,16(s1)
    61002e74:	e781                	bnez	a5,61002e7c <_puts_r+0x28>
    61002e76:	8526                	mv	a0,s1
    61002e78:	712000ef          	jal	ra,6100358a <__sinit>
    61002e7c:	00002797          	auipc	a5,0x2
    61002e80:	a8478793          	addi	a5,a5,-1404 # 61004900 <__sf_fake_stdin>
    61002e84:	02f41f63          	bne	s0,a5,61002ec2 <_puts_r+0x6e>
    61002e88:	6480                	ld	s0,8(s1)
    61002e8a:	01045783          	lhu	a5,16(s0)
    61002e8e:	8ba1                	andi	a5,a5,8
    61002e90:	cba9                	beqz	a5,61002ee2 <_puts_r+0x8e>
    61002e92:	6c1c                	ld	a5,24(s0)
    61002e94:	c7b9                	beqz	a5,61002ee2 <_puts_r+0x8e>
    61002e96:	59fd                	li	s3,-1
    61002e98:	4a29                	li	s4,10
    61002e9a:	4458                	lw	a4,12(s0)
    61002e9c:	00094583          	lbu	a1,0(s2)
    61002ea0:	fff7079b          	addiw	a5,a4,-1
    61002ea4:	873e                	mv	a4,a5
    61002ea6:	eda1                	bnez	a1,61002efe <_puts_r+0xaa>
    61002ea8:	c45c                	sw	a5,12(s0)
    61002eaa:	0807d163          	bgez	a5,61002f2c <_puts_r+0xd8>
    61002eae:	8622                	mv	a2,s0
    61002eb0:	45a9                	li	a1,10
    61002eb2:	8526                	mv	a0,s1
    61002eb4:	226000ef          	jal	ra,610030da <__swbuf_r>
    61002eb8:	57fd                	li	a5,-1
    61002eba:	02f50963          	beq	a0,a5,61002eec <_puts_r+0x98>
    61002ebe:	4529                	li	a0,10
    61002ec0:	a03d                	j	61002eee <_puts_r+0x9a>
    61002ec2:	00002797          	auipc	a5,0x2
    61002ec6:	a7678793          	addi	a5,a5,-1418 # 61004938 <__sf_fake_stdout>
    61002eca:	00f41463          	bne	s0,a5,61002ed2 <_puts_r+0x7e>
    61002ece:	6880                	ld	s0,16(s1)
    61002ed0:	bf6d                	j	61002e8a <_puts_r+0x36>
    61002ed2:	00002797          	auipc	a5,0x2
    61002ed6:	9f678793          	addi	a5,a5,-1546 # 610048c8 <__sf_fake_stderr>
    61002eda:	faf418e3          	bne	s0,a5,61002e8a <_puts_r+0x36>
    61002ede:	6c80                	ld	s0,24(s1)
    61002ee0:	b76d                	j	61002e8a <_puts_r+0x36>
    61002ee2:	85a2                	mv	a1,s0
    61002ee4:	8526                	mv	a0,s1
    61002ee6:	2ba000ef          	jal	ra,610031a0 <__swsetup_r>
    61002eea:	d555                	beqz	a0,61002e96 <_puts_r+0x42>
    61002eec:	557d                	li	a0,-1
    61002eee:	70a2                	ld	ra,40(sp)
    61002ef0:	7402                	ld	s0,32(sp)
    61002ef2:	64e2                	ld	s1,24(sp)
    61002ef4:	6942                	ld	s2,16(sp)
    61002ef6:	69a2                	ld	s3,8(sp)
    61002ef8:	6a02                	ld	s4,0(sp)
    61002efa:	6145                	addi	sp,sp,48
    61002efc:	8082                	ret
    61002efe:	c458                	sw	a4,12(s0)
    61002f00:	0905                	addi	s2,s2,1
    61002f02:	0007d763          	bgez	a5,61002f10 <_puts_r+0xbc>
    61002f06:	5418                	lw	a4,40(s0)
    61002f08:	00e7cb63          	blt	a5,a4,61002f1e <_puts_r+0xca>
    61002f0c:	01458963          	beq	a1,s4,61002f1e <_puts_r+0xca>
    61002f10:	601c                	ld	a5,0(s0)
    61002f12:	00178713          	addi	a4,a5,1
    61002f16:	e018                	sd	a4,0(s0)
    61002f18:	00b78023          	sb	a1,0(a5)
    61002f1c:	bfbd                	j	61002e9a <_puts_r+0x46>
    61002f1e:	8622                	mv	a2,s0
    61002f20:	8526                	mv	a0,s1
    61002f22:	1b8000ef          	jal	ra,610030da <__swbuf_r>
    61002f26:	f7351ae3          	bne	a0,s3,61002e9a <_puts_r+0x46>
    61002f2a:	b7c9                	j	61002eec <_puts_r+0x98>
    61002f2c:	601c                	ld	a5,0(s0)
    61002f2e:	00178713          	addi	a4,a5,1
    61002f32:	e018                	sd	a4,0(s0)
    61002f34:	4729                	li	a4,10
    61002f36:	00e78023          	sb	a4,0(a5)
    61002f3a:	b751                	j	61002ebe <_puts_r+0x6a>

0000000061002f3c <puts>:
    61002f3c:	85aa                	mv	a1,a0
    61002f3e:	8101b503          	ld	a0,-2032(gp) # 610100c0 <_impure_ptr>
    61002f42:	f13ff06f          	j	61002e54 <_puts_r>

0000000061002f46 <setvbuf>:
    61002f46:	715d                	addi	sp,sp,-80
    61002f48:	e0a2                	sd	s0,64(sp)
    61002f4a:	fc26                	sd	s1,56(sp)
    61002f4c:	f84a                	sd	s2,48(sp)
    61002f4e:	f44e                	sd	s3,40(sp)
    61002f50:	f052                	sd	s4,32(sp)
    61002f52:	e486                	sd	ra,72(sp)
    61002f54:	ec56                	sd	s5,24(sp)
    61002f56:	8101b983          	ld	s3,-2032(gp) # 610100c0 <_impure_ptr>
    61002f5a:	842a                	mv	s0,a0
    61002f5c:	892e                	mv	s2,a1
    61002f5e:	8a32                	mv	s4,a2
    61002f60:	84b6                	mv	s1,a3
    61002f62:	00098863          	beqz	s3,61002f72 <setvbuf+0x2c>
    61002f66:	0309a783          	lw	a5,48(s3)
    61002f6a:	e781                	bnez	a5,61002f72 <setvbuf+0x2c>
    61002f6c:	854e                	mv	a0,s3
    61002f6e:	61c000ef          	jal	ra,6100358a <__sinit>
    61002f72:	00002797          	auipc	a5,0x2
    61002f76:	98e78793          	addi	a5,a5,-1650 # 61004900 <__sf_fake_stdin>
    61002f7a:	0cf41363          	bne	s0,a5,61003040 <setvbuf+0xfa>
    61002f7e:	0089b403          	ld	s0,8(s3)
    61002f82:	4789                	li	a5,2
    61002f84:	00fa0a63          	beq	s4,a5,61002f98 <setvbuf+0x52>
    61002f88:	4785                	li	a5,1
    61002f8a:	557d                	li	a0,-1
    61002f8c:	0b47e163          	bltu	a5,s4,6100302e <setvbuf+0xe8>
    61002f90:	02049793          	slli	a5,s1,0x20
    61002f94:	0807cd63          	bltz	a5,6100302e <setvbuf+0xe8>
    61002f98:	85a2                	mv	a1,s0
    61002f9a:	854e                	mv	a0,s3
    61002f9c:	4cc000ef          	jal	ra,61003468 <_fflush_r>
    61002fa0:	702c                	ld	a1,96(s0)
    61002fa2:	c991                	beqz	a1,61002fb6 <setvbuf+0x70>
    61002fa4:	07c40793          	addi	a5,s0,124
    61002fa8:	00f58563          	beq	a1,a5,61002fb2 <setvbuf+0x6c>
    61002fac:	854e                	mv	a0,s3
    61002fae:	107000ef          	jal	ra,610038b4 <_free_r>
    61002fb2:	06043023          	sd	zero,96(s0)
    61002fb6:	01045783          	lhu	a5,16(s0)
    61002fba:	02042423          	sw	zero,40(s0)
    61002fbe:	00042423          	sw	zero,8(s0)
    61002fc2:	0807f793          	andi	a5,a5,128
    61002fc6:	c789                	beqz	a5,61002fd0 <setvbuf+0x8a>
    61002fc8:	6c0c                	ld	a1,24(s0)
    61002fca:	854e                	mv	a0,s3
    61002fcc:	0e9000ef          	jal	ra,610038b4 <_free_r>
    61002fd0:	01045783          	lhu	a5,16(s0)
    61002fd4:	777d                	lui	a4,0xfffff
    61002fd6:	35c70713          	addi	a4,a4,860 # fffffffffffff35c <_sp+0xffffffff9efdf35c>
    61002fda:	8ff9                	and	a5,a5,a4
    61002fdc:	00f41823          	sh	a5,16(s0)
    61002fe0:	4789                	li	a5,2
    61002fe2:	0efa0363          	beq	s4,a5,610030c8 <setvbuf+0x182>
    61002fe6:	0054                	addi	a3,sp,4
    61002fe8:	0030                	addi	a2,sp,8
    61002fea:	85a2                	mv	a1,s0
    61002fec:	854e                	mv	a0,s3
    61002fee:	714000ef          	jal	ra,61003702 <__swhatbuf_r>
    61002ff2:	01045783          	lhu	a5,16(s0)
    61002ff6:	8d5d                	or	a0,a0,a5
    61002ff8:	00a41823          	sh	a0,16(s0)
    61002ffc:	e4a5                	bnez	s1,61003064 <setvbuf+0x11e>
    61002ffe:	64a2                	ld	s1,8(sp)
    61003000:	8526                	mv	a0,s1
    61003002:	7fe000ef          	jal	ra,61003800 <malloc>
    61003006:	892a                	mv	s2,a0
    61003008:	e94d                	bnez	a0,610030ba <setvbuf+0x174>
    6100300a:	6aa2                	ld	s5,8(sp)
    6100300c:	0a9a9163          	bne	s5,s1,610030ae <setvbuf+0x168>
    61003010:	557d                	li	a0,-1
    61003012:	01045783          	lhu	a5,16(s0)
    61003016:	00042623          	sw	zero,12(s0)
    6100301a:	0027e793          	ori	a5,a5,2
    6100301e:	00f41823          	sh	a5,16(s0)
    61003022:	07f40793          	addi	a5,s0,127
    61003026:	e01c                	sd	a5,0(s0)
    61003028:	ec1c                	sd	a5,24(s0)
    6100302a:	4785                	li	a5,1
    6100302c:	d01c                	sw	a5,32(s0)
    6100302e:	60a6                	ld	ra,72(sp)
    61003030:	6406                	ld	s0,64(sp)
    61003032:	74e2                	ld	s1,56(sp)
    61003034:	7942                	ld	s2,48(sp)
    61003036:	79a2                	ld	s3,40(sp)
    61003038:	7a02                	ld	s4,32(sp)
    6100303a:	6ae2                	ld	s5,24(sp)
    6100303c:	6161                	addi	sp,sp,80
    6100303e:	8082                	ret
    61003040:	00002797          	auipc	a5,0x2
    61003044:	8f878793          	addi	a5,a5,-1800 # 61004938 <__sf_fake_stdout>
    61003048:	00f41563          	bne	s0,a5,61003052 <setvbuf+0x10c>
    6100304c:	0109b403          	ld	s0,16(s3)
    61003050:	bf0d                	j	61002f82 <setvbuf+0x3c>
    61003052:	00002797          	auipc	a5,0x2
    61003056:	87678793          	addi	a5,a5,-1930 # 610048c8 <__sf_fake_stderr>
    6100305a:	f2f414e3          	bne	s0,a5,61002f82 <setvbuf+0x3c>
    6100305e:	0189b403          	ld	s0,24(s3)
    61003062:	b705                	j	61002f82 <setvbuf+0x3c>
    61003064:	f8090ee3          	beqz	s2,61003000 <setvbuf+0xba>
    61003068:	0309a783          	lw	a5,48(s3)
    6100306c:	e781                	bnez	a5,61003074 <setvbuf+0x12e>
    6100306e:	854e                	mv	a0,s3
    61003070:	51a000ef          	jal	ra,6100358a <__sinit>
    61003074:	4785                	li	a5,1
    61003076:	00fa1863          	bne	s4,a5,61003086 <setvbuf+0x140>
    6100307a:	01045783          	lhu	a5,16(s0)
    6100307e:	0017e793          	ori	a5,a5,1
    61003082:	00f41823          	sh	a5,16(s0)
    61003086:	01045783          	lhu	a5,16(s0)
    6100308a:	2481                	sext.w	s1,s1
    6100308c:	01243023          	sd	s2,0(s0)
    61003090:	01243c23          	sd	s2,24(s0)
    61003094:	d004                	sw	s1,32(s0)
    61003096:	0087f713          	andi	a4,a5,8
    6100309a:	cb1d                	beqz	a4,610030d0 <setvbuf+0x18a>
    6100309c:	8b85                	andi	a5,a5,1
    6100309e:	c79d                	beqz	a5,610030cc <setvbuf+0x186>
    610030a0:	409004bb          	negw	s1,s1
    610030a4:	00042623          	sw	zero,12(s0)
    610030a8:	d404                	sw	s1,40(s0)
    610030aa:	4501                	li	a0,0
    610030ac:	b749                	j	6100302e <setvbuf+0xe8>
    610030ae:	8556                	mv	a0,s5
    610030b0:	750000ef          	jal	ra,61003800 <malloc>
    610030b4:	892a                	mv	s2,a0
    610030b6:	84d6                	mv	s1,s5
    610030b8:	dd21                	beqz	a0,61003010 <setvbuf+0xca>
    610030ba:	01045783          	lhu	a5,16(s0)
    610030be:	0807e793          	ori	a5,a5,128
    610030c2:	00f41823          	sh	a5,16(s0)
    610030c6:	b74d                	j	61003068 <setvbuf+0x122>
    610030c8:	4501                	li	a0,0
    610030ca:	b7a1                	j	61003012 <setvbuf+0xcc>
    610030cc:	c444                	sw	s1,12(s0)
    610030ce:	bff1                	j	610030aa <setvbuf+0x164>
    610030d0:	00042623          	sw	zero,12(s0)
    610030d4:	bfd9                	j	610030aa <setvbuf+0x164>

00000000610030d6 <isatty>:
    610030d6:	e6bfe06f          	j	61001f40 <_isatty>

00000000610030da <__swbuf_r>:
    610030da:	7179                	addi	sp,sp,-48
    610030dc:	f022                	sd	s0,32(sp)
    610030de:	ec26                	sd	s1,24(sp)
    610030e0:	e84a                	sd	s2,16(sp)
    610030e2:	f406                	sd	ra,40(sp)
    610030e4:	e44e                	sd	s3,8(sp)
    610030e6:	84aa                	mv	s1,a0
    610030e8:	892e                	mv	s2,a1
    610030ea:	8432                	mv	s0,a2
    610030ec:	c509                	beqz	a0,610030f6 <__swbuf_r+0x1c>
    610030ee:	591c                	lw	a5,48(a0)
    610030f0:	e399                	bnez	a5,610030f6 <__swbuf_r+0x1c>
    610030f2:	498000ef          	jal	ra,6100358a <__sinit>
    610030f6:	00002797          	auipc	a5,0x2
    610030fa:	80a78793          	addi	a5,a5,-2038 # 61004900 <__sf_fake_stdin>
    610030fe:	06f41a63          	bne	s0,a5,61003172 <__swbuf_r+0x98>
    61003102:	6480                	ld	s0,8(s1)
    61003104:	541c                	lw	a5,40(s0)
    61003106:	c45c                	sw	a5,12(s0)
    61003108:	01045783          	lhu	a5,16(s0)
    6100310c:	8ba1                	andi	a5,a5,8
    6100310e:	c3d1                	beqz	a5,61003192 <__swbuf_r+0xb8>
    61003110:	6c1c                	ld	a5,24(s0)
    61003112:	c3c1                	beqz	a5,61003192 <__swbuf_r+0xb8>
    61003114:	6c1c                	ld	a5,24(s0)
    61003116:	6008                	ld	a0,0(s0)
    61003118:	0ff97993          	andi	s3,s2,255
    6100311c:	894e                	mv	s2,s3
    6100311e:	9d1d                	subw	a0,a0,a5
    61003120:	501c                	lw	a5,32(s0)
    61003122:	00f54763          	blt	a0,a5,61003130 <__swbuf_r+0x56>
    61003126:	85a2                	mv	a1,s0
    61003128:	8526                	mv	a0,s1
    6100312a:	33e000ef          	jal	ra,61003468 <_fflush_r>
    6100312e:	e53d                	bnez	a0,6100319c <__swbuf_r+0xc2>
    61003130:	445c                	lw	a5,12(s0)
    61003132:	2505                	addiw	a0,a0,1
    61003134:	37fd                	addiw	a5,a5,-1
    61003136:	c45c                	sw	a5,12(s0)
    61003138:	601c                	ld	a5,0(s0)
    6100313a:	00178713          	addi	a4,a5,1
    6100313e:	e018                	sd	a4,0(s0)
    61003140:	01378023          	sb	s3,0(a5)
    61003144:	501c                	lw	a5,32(s0)
    61003146:	00a78963          	beq	a5,a0,61003158 <__swbuf_r+0x7e>
    6100314a:	01045783          	lhu	a5,16(s0)
    6100314e:	8b85                	andi	a5,a5,1
    61003150:	cb89                	beqz	a5,61003162 <__swbuf_r+0x88>
    61003152:	47a9                	li	a5,10
    61003154:	00f91763          	bne	s2,a5,61003162 <__swbuf_r+0x88>
    61003158:	85a2                	mv	a1,s0
    6100315a:	8526                	mv	a0,s1
    6100315c:	30c000ef          	jal	ra,61003468 <_fflush_r>
    61003160:	ed15                	bnez	a0,6100319c <__swbuf_r+0xc2>
    61003162:	70a2                	ld	ra,40(sp)
    61003164:	7402                	ld	s0,32(sp)
    61003166:	64e2                	ld	s1,24(sp)
    61003168:	69a2                	ld	s3,8(sp)
    6100316a:	854a                	mv	a0,s2
    6100316c:	6942                	ld	s2,16(sp)
    6100316e:	6145                	addi	sp,sp,48
    61003170:	8082                	ret
    61003172:	00001797          	auipc	a5,0x1
    61003176:	7c678793          	addi	a5,a5,1990 # 61004938 <__sf_fake_stdout>
    6100317a:	00f41463          	bne	s0,a5,61003182 <__swbuf_r+0xa8>
    6100317e:	6880                	ld	s0,16(s1)
    61003180:	b751                	j	61003104 <__swbuf_r+0x2a>
    61003182:	00001797          	auipc	a5,0x1
    61003186:	74678793          	addi	a5,a5,1862 # 610048c8 <__sf_fake_stderr>
    6100318a:	f6f41de3          	bne	s0,a5,61003104 <__swbuf_r+0x2a>
    6100318e:	6c80                	ld	s0,24(s1)
    61003190:	bf95                	j	61003104 <__swbuf_r+0x2a>
    61003192:	85a2                	mv	a1,s0
    61003194:	8526                	mv	a0,s1
    61003196:	00a000ef          	jal	ra,610031a0 <__swsetup_r>
    6100319a:	dd2d                	beqz	a0,61003114 <__swbuf_r+0x3a>
    6100319c:	597d                	li	s2,-1
    6100319e:	b7d1                	j	61003162 <__swbuf_r+0x88>

00000000610031a0 <__swsetup_r>:
    610031a0:	1101                	addi	sp,sp,-32
    610031a2:	e822                	sd	s0,16(sp)
    610031a4:	e426                	sd	s1,8(sp)
    610031a6:	e04a                	sd	s2,0(sp)
    610031a8:	ec06                	sd	ra,24(sp)
    610031aa:	8101b483          	ld	s1,-2032(gp) # 610100c0 <_impure_ptr>
    610031ae:	892a                	mv	s2,a0
    610031b0:	842e                	mv	s0,a1
    610031b2:	c491                	beqz	s1,610031be <__swsetup_r+0x1e>
    610031b4:	589c                	lw	a5,48(s1)
    610031b6:	e781                	bnez	a5,610031be <__swsetup_r+0x1e>
    610031b8:	8526                	mv	a0,s1
    610031ba:	3d0000ef          	jal	ra,6100358a <__sinit>
    610031be:	00001797          	auipc	a5,0x1
    610031c2:	74278793          	addi	a5,a5,1858 # 61004900 <__sf_fake_stdin>
    610031c6:	02f41763          	bne	s0,a5,610031f4 <__swsetup_r+0x54>
    610031ca:	6480                	ld	s0,8(s1)
    610031cc:	01041783          	lh	a5,16(s0)
    610031d0:	03079713          	slli	a4,a5,0x30
    610031d4:	0087f693          	andi	a3,a5,8
    610031d8:	9341                	srli	a4,a4,0x30
    610031da:	eab5                	bnez	a3,6100324e <__swsetup_r+0xae>
    610031dc:	01077693          	andi	a3,a4,16
    610031e0:	ea95                	bnez	a3,61003214 <__swsetup_r+0x74>
    610031e2:	4725                	li	a4,9
    610031e4:	00e92023          	sw	a4,0(s2)
    610031e8:	0407e793          	ori	a5,a5,64
    610031ec:	00f41823          	sh	a5,16(s0)
    610031f0:	557d                	li	a0,-1
    610031f2:	a045                	j	61003292 <__swsetup_r+0xf2>
    610031f4:	00001797          	auipc	a5,0x1
    610031f8:	74478793          	addi	a5,a5,1860 # 61004938 <__sf_fake_stdout>
    610031fc:	00f41463          	bne	s0,a5,61003204 <__swsetup_r+0x64>
    61003200:	6880                	ld	s0,16(s1)
    61003202:	b7e9                	j	610031cc <__swsetup_r+0x2c>
    61003204:	00001797          	auipc	a5,0x1
    61003208:	6c478793          	addi	a5,a5,1732 # 610048c8 <__sf_fake_stderr>
    6100320c:	fcf410e3          	bne	s0,a5,610031cc <__swsetup_r+0x2c>
    61003210:	6c80                	ld	s0,24(s1)
    61003212:	bf6d                	j	610031cc <__swsetup_r+0x2c>
    61003214:	8b11                	andi	a4,a4,4
    61003216:	c715                	beqz	a4,61003242 <__swsetup_r+0xa2>
    61003218:	702c                	ld	a1,96(s0)
    6100321a:	c991                	beqz	a1,6100322e <__swsetup_r+0x8e>
    6100321c:	07c40793          	addi	a5,s0,124
    61003220:	00f58563          	beq	a1,a5,6100322a <__swsetup_r+0x8a>
    61003224:	854a                	mv	a0,s2
    61003226:	68e000ef          	jal	ra,610038b4 <_free_r>
    6100322a:	06043023          	sd	zero,96(s0)
    6100322e:	01045783          	lhu	a5,16(s0)
    61003232:	00042423          	sw	zero,8(s0)
    61003236:	fdb7f793          	andi	a5,a5,-37
    6100323a:	00f41823          	sh	a5,16(s0)
    6100323e:	6c1c                	ld	a5,24(s0)
    61003240:	e01c                	sd	a5,0(s0)
    61003242:	01045783          	lhu	a5,16(s0)
    61003246:	0087e793          	ori	a5,a5,8
    6100324a:	00f41823          	sh	a5,16(s0)
    6100324e:	6c1c                	ld	a5,24(s0)
    61003250:	ef89                	bnez	a5,6100326a <__swsetup_r+0xca>
    61003252:	01045783          	lhu	a5,16(s0)
    61003256:	20000713          	li	a4,512
    6100325a:	2807f793          	andi	a5,a5,640
    6100325e:	00e78663          	beq	a5,a4,6100326a <__swsetup_r+0xca>
    61003262:	85a2                	mv	a1,s0
    61003264:	854a                	mv	a0,s2
    61003266:	4f8000ef          	jal	ra,6100375e <__smakebuf_r>
    6100326a:	01041783          	lh	a5,16(s0)
    6100326e:	03079713          	slli	a4,a5,0x30
    61003272:	0017f693          	andi	a3,a5,1
    61003276:	9341                	srli	a4,a4,0x30
    61003278:	c29d                	beqz	a3,6100329e <__swsetup_r+0xfe>
    6100327a:	5014                	lw	a3,32(s0)
    6100327c:	00042623          	sw	zero,12(s0)
    61003280:	40d006bb          	negw	a3,a3
    61003284:	d414                	sw	a3,40(s0)
    61003286:	6c14                	ld	a3,24(s0)
    61003288:	4501                	li	a0,0
    6100328a:	e681                	bnez	a3,61003292 <__swsetup_r+0xf2>
    6100328c:	08077713          	andi	a4,a4,128
    61003290:	ff21                	bnez	a4,610031e8 <__swsetup_r+0x48>
    61003292:	60e2                	ld	ra,24(sp)
    61003294:	6442                	ld	s0,16(sp)
    61003296:	64a2                	ld	s1,8(sp)
    61003298:	6902                	ld	s2,0(sp)
    6100329a:	6105                	addi	sp,sp,32
    6100329c:	8082                	ret
    6100329e:	00277693          	andi	a3,a4,2
    610032a2:	4601                	li	a2,0
    610032a4:	e291                	bnez	a3,610032a8 <__swsetup_r+0x108>
    610032a6:	5010                	lw	a2,32(s0)
    610032a8:	c450                	sw	a2,12(s0)
    610032aa:	bff1                	j	61003286 <__swsetup_r+0xe6>

00000000610032ac <__register_exitproc>:
    610032ac:	88aa                	mv	a7,a0
    610032ae:	0000d517          	auipc	a0,0xd
    610032b2:	e2250513          	addi	a0,a0,-478 # 610100d0 <_global_atexit>
    610032b6:	611c                	ld	a5,0(a0)
    610032b8:	ef91                	bnez	a5,610032d4 <__register_exitproc+0x28>
    610032ba:	8a018713          	addi	a4,gp,-1888 # 61010150 <_global_atexit0>
    610032be:	e118                	sd	a4,0(a0)
    610032c0:	9effd517          	auipc	a0,0x9effd
    610032c4:	d4050513          	addi	a0,a0,-704 # 0 <__stack_size-0x800>
    610032c8:	87ba                	mv	a5,a4
    610032ca:	c509                	beqz	a0,610032d4 <__register_exitproc+0x28>
    610032cc:	611c                	ld	a5,0(a0)
    610032ce:	10f73823          	sd	a5,272(a4)
    610032d2:	87ba                	mv	a5,a4
    610032d4:	4798                	lw	a4,8(a5)
    610032d6:	487d                	li	a6,31
    610032d8:	557d                	li	a0,-1
    610032da:	04e84763          	blt	a6,a4,61003328 <__register_exitproc+0x7c>
    610032de:	02088d63          	beqz	a7,61003318 <__register_exitproc+0x6c>
    610032e2:	1107b803          	ld	a6,272(a5)
    610032e6:	04080163          	beqz	a6,61003328 <__register_exitproc+0x7c>
    610032ea:	00371513          	slli	a0,a4,0x3
    610032ee:	9542                	add	a0,a0,a6
    610032f0:	e110                	sd	a2,0(a0)
    610032f2:	20082303          	lw	t1,512(a6)
    610032f6:	4605                	li	a2,1
    610032f8:	00e6163b          	sllw	a2,a2,a4
    610032fc:	00c36333          	or	t1,t1,a2
    61003300:	20682023          	sw	t1,512(a6)
    61003304:	10d53023          	sd	a3,256(a0)
    61003308:	4689                	li	a3,2
    6100330a:	00d89763          	bne	a7,a3,61003318 <__register_exitproc+0x6c>
    6100330e:	20482683          	lw	a3,516(a6)
    61003312:	8e55                	or	a2,a2,a3
    61003314:	20c82223          	sw	a2,516(a6)
    61003318:	0017069b          	addiw	a3,a4,1
    6100331c:	0709                	addi	a4,a4,2
    6100331e:	070e                	slli	a4,a4,0x3
    61003320:	c794                	sw	a3,8(a5)
    61003322:	97ba                	add	a5,a5,a4
    61003324:	e38c                	sd	a1,0(a5)
    61003326:	4501                	li	a0,0
    61003328:	8082                	ret

000000006100332a <__sflush_r>:
    6100332a:	0105d783          	lhu	a5,16(a1)
    6100332e:	7179                	addi	sp,sp,-48
    61003330:	f022                	sd	s0,32(sp)
    61003332:	ec26                	sd	s1,24(sp)
    61003334:	f406                	sd	ra,40(sp)
    61003336:	e84a                	sd	s2,16(sp)
    61003338:	e44e                	sd	s3,8(sp)
    6100333a:	0087f713          	andi	a4,a5,8
    6100333e:	84aa                	mv	s1,a0
    61003340:	842e                	mv	s0,a1
    61003342:	ef79                	bnez	a4,61003420 <__sflush_r+0xf6>
    61003344:	4598                	lw	a4,8(a1)
    61003346:	00e04d63          	bgtz	a4,61003360 <__sflush_r+0x36>
    6100334a:	5db8                	lw	a4,120(a1)
    6100334c:	00e04a63          	bgtz	a4,61003360 <__sflush_r+0x36>
    61003350:	4501                	li	a0,0
    61003352:	70a2                	ld	ra,40(sp)
    61003354:	7402                	ld	s0,32(sp)
    61003356:	64e2                	ld	s1,24(sp)
    61003358:	6942                	ld	s2,16(sp)
    6100335a:	69a2                	ld	s3,8(sp)
    6100335c:	6145                	addi	sp,sp,48
    6100335e:	8082                	ret
    61003360:	6838                	ld	a4,80(s0)
    61003362:	d77d                	beqz	a4,61003350 <__sflush_r+0x26>
    61003364:	0004a903          	lw	s2,0(s1)
    61003368:	03379693          	slli	a3,a5,0x33
    6100336c:	0004a023          	sw	zero,0(s1)
    61003370:	0606de63          	bgez	a3,610033ec <__sflush_r+0xc2>
    61003374:	6c50                	ld	a2,152(s0)
    61003376:	01045783          	lhu	a5,16(s0)
    6100337a:	8b91                	andi	a5,a5,4
    6100337c:	c799                	beqz	a5,6100338a <__sflush_r+0x60>
    6100337e:	441c                	lw	a5,8(s0)
    61003380:	8e1d                	sub	a2,a2,a5
    61003382:	703c                	ld	a5,96(s0)
    61003384:	c399                	beqz	a5,6100338a <__sflush_r+0x60>
    61003386:	5c3c                	lw	a5,120(s0)
    61003388:	8e1d                	sub	a2,a2,a5
    6100338a:	683c                	ld	a5,80(s0)
    6100338c:	7c0c                	ld	a1,56(s0)
    6100338e:	4681                	li	a3,0
    61003390:	8526                	mv	a0,s1
    61003392:	9782                	jalr	a5
    61003394:	57fd                	li	a5,-1
    61003396:	01045703          	lhu	a4,16(s0)
    6100339a:	00f51d63          	bne	a0,a5,610033b4 <__sflush_r+0x8a>
    6100339e:	4094                	lw	a3,0(s1)
    610033a0:	47f5                	li	a5,29
    610033a2:	06d7e963          	bltu	a5,a3,61003414 <__sflush_r+0xea>
    610033a6:	204007b7          	lui	a5,0x20400
    610033aa:	0785                	addi	a5,a5,1
    610033ac:	00d7d7b3          	srl	a5,a5,a3
    610033b0:	8b85                	andi	a5,a5,1
    610033b2:	c3ad                	beqz	a5,61003414 <__sflush_r+0xea>
    610033b4:	6c1c                	ld	a5,24(s0)
    610033b6:	00042423          	sw	zero,8(s0)
    610033ba:	e01c                	sd	a5,0(s0)
    610033bc:	03371793          	slli	a5,a4,0x33
    610033c0:	0007d863          	bgez	a5,610033d0 <__sflush_r+0xa6>
    610033c4:	57fd                	li	a5,-1
    610033c6:	00f51463          	bne	a0,a5,610033ce <__sflush_r+0xa4>
    610033ca:	409c                	lw	a5,0(s1)
    610033cc:	e391                	bnez	a5,610033d0 <__sflush_r+0xa6>
    610033ce:	ec48                	sd	a0,152(s0)
    610033d0:	702c                	ld	a1,96(s0)
    610033d2:	0124a023          	sw	s2,0(s1)
    610033d6:	ddad                	beqz	a1,61003350 <__sflush_r+0x26>
    610033d8:	07c40793          	addi	a5,s0,124
    610033dc:	00f58563          	beq	a1,a5,610033e6 <__sflush_r+0xbc>
    610033e0:	8526                	mv	a0,s1
    610033e2:	4d2000ef          	jal	ra,610038b4 <_free_r>
    610033e6:	06043023          	sd	zero,96(s0)
    610033ea:	b79d                	j	61003350 <__sflush_r+0x26>
    610033ec:	7c0c                	ld	a1,56(s0)
    610033ee:	4601                	li	a2,0
    610033f0:	4685                	li	a3,1
    610033f2:	8526                	mv	a0,s1
    610033f4:	9702                	jalr	a4
    610033f6:	57fd                	li	a5,-1
    610033f8:	862a                	mv	a2,a0
    610033fa:	f6f51ee3          	bne	a0,a5,61003376 <__sflush_r+0x4c>
    610033fe:	409c                	lw	a5,0(s1)
    61003400:	dbbd                	beqz	a5,61003376 <__sflush_r+0x4c>
    61003402:	4775                	li	a4,29
    61003404:	00e78563          	beq	a5,a4,6100340e <__sflush_r+0xe4>
    61003408:	4759                	li	a4,22
    6100340a:	04e79463          	bne	a5,a4,61003452 <__sflush_r+0x128>
    6100340e:	0124a023          	sw	s2,0(s1)
    61003412:	bf3d                	j	61003350 <__sflush_r+0x26>
    61003414:	04076713          	ori	a4,a4,64
    61003418:	00e41823          	sh	a4,16(s0)
    6100341c:	557d                	li	a0,-1
    6100341e:	bf15                	j	61003352 <__sflush_r+0x28>
    61003420:	0185b983          	ld	s3,24(a1)
    61003424:	f20986e3          	beqz	s3,61003350 <__sflush_r+0x26>
    61003428:	0005b903          	ld	s2,0(a1)
    6100342c:	8b8d                	andi	a5,a5,3
    6100342e:	0135b023          	sd	s3,0(a1)
    61003432:	4139093b          	subw	s2,s2,s3
    61003436:	4701                	li	a4,0
    61003438:	e391                	bnez	a5,6100343c <__sflush_r+0x112>
    6100343a:	5198                	lw	a4,32(a1)
    6100343c:	c458                	sw	a4,12(s0)
    6100343e:	f12059e3          	blez	s2,61003350 <__sflush_r+0x26>
    61003442:	643c                	ld	a5,72(s0)
    61003444:	7c0c                	ld	a1,56(s0)
    61003446:	86ca                	mv	a3,s2
    61003448:	864e                	mv	a2,s3
    6100344a:	8526                	mv	a0,s1
    6100344c:	9782                	jalr	a5
    6100344e:	00a04963          	bgtz	a0,61003460 <__sflush_r+0x136>
    61003452:	01045783          	lhu	a5,16(s0)
    61003456:	0407e793          	ori	a5,a5,64
    6100345a:	00f41823          	sh	a5,16(s0)
    6100345e:	bf7d                	j	6100341c <__sflush_r+0xf2>
    61003460:	99aa                	add	s3,s3,a0
    61003462:	40a9093b          	subw	s2,s2,a0
    61003466:	bfe1                	j	6100343e <__sflush_r+0x114>

0000000061003468 <_fflush_r>:
    61003468:	6d9c                	ld	a5,24(a1)
    6100346a:	c3ad                	beqz	a5,610034cc <_fflush_r+0x64>
    6100346c:	1101                	addi	sp,sp,-32
    6100346e:	e822                	sd	s0,16(sp)
    61003470:	ec06                	sd	ra,24(sp)
    61003472:	842a                	mv	s0,a0
    61003474:	c519                	beqz	a0,61003482 <_fflush_r+0x1a>
    61003476:	591c                	lw	a5,48(a0)
    61003478:	e789                	bnez	a5,61003482 <_fflush_r+0x1a>
    6100347a:	e42e                	sd	a1,8(sp)
    6100347c:	10e000ef          	jal	ra,6100358a <__sinit>
    61003480:	65a2                	ld	a1,8(sp)
    61003482:	00001797          	auipc	a5,0x1
    61003486:	47e78793          	addi	a5,a5,1150 # 61004900 <__sf_fake_stdin>
    6100348a:	00f59c63          	bne	a1,a5,610034a2 <_fflush_r+0x3a>
    6100348e:	640c                	ld	a1,8(s0)
    61003490:	01059783          	lh	a5,16(a1)
    61003494:	c79d                	beqz	a5,610034c2 <_fflush_r+0x5a>
    61003496:	8522                	mv	a0,s0
    61003498:	6442                	ld	s0,16(sp)
    6100349a:	60e2                	ld	ra,24(sp)
    6100349c:	6105                	addi	sp,sp,32
    6100349e:	e8dff06f          	j	6100332a <__sflush_r>
    610034a2:	00001797          	auipc	a5,0x1
    610034a6:	49678793          	addi	a5,a5,1174 # 61004938 <__sf_fake_stdout>
    610034aa:	00f59463          	bne	a1,a5,610034b2 <_fflush_r+0x4a>
    610034ae:	680c                	ld	a1,16(s0)
    610034b0:	b7c5                	j	61003490 <_fflush_r+0x28>
    610034b2:	00001797          	auipc	a5,0x1
    610034b6:	41678793          	addi	a5,a5,1046 # 610048c8 <__sf_fake_stderr>
    610034ba:	fcf59be3          	bne	a1,a5,61003490 <_fflush_r+0x28>
    610034be:	6c0c                	ld	a1,24(s0)
    610034c0:	bfc1                	j	61003490 <_fflush_r+0x28>
    610034c2:	60e2                	ld	ra,24(sp)
    610034c4:	6442                	ld	s0,16(sp)
    610034c6:	4501                	li	a0,0
    610034c8:	6105                	addi	sp,sp,32
    610034ca:	8082                	ret
    610034cc:	4501                	li	a0,0
    610034ce:	8082                	ret

00000000610034d0 <std>:
    610034d0:	1141                	addi	sp,sp,-16
    610034d2:	e022                	sd	s0,0(sp)
    610034d4:	e406                	sd	ra,8(sp)
    610034d6:	842a                	mv	s0,a0
    610034d8:	00b51823          	sh	a1,16(a0)
    610034dc:	00c51923          	sh	a2,18(a0)
    610034e0:	00053023          	sd	zero,0(a0)
    610034e4:	00053423          	sd	zero,8(a0)
    610034e8:	0a052623          	sw	zero,172(a0)
    610034ec:	00053c23          	sd	zero,24(a0)
    610034f0:	02052023          	sw	zero,32(a0)
    610034f4:	02052423          	sw	zero,40(a0)
    610034f8:	4621                	li	a2,8
    610034fa:	4581                	li	a1,0
    610034fc:	0a450513          	addi	a0,a0,164
    61003500:	30a000ef          	jal	ra,6100380a <memset>
    61003504:	00001797          	auipc	a5,0x1
    61003508:	89a78793          	addi	a5,a5,-1894 # 61003d9e <__sread>
    6100350c:	e03c                	sd	a5,64(s0)
    6100350e:	00001797          	auipc	a5,0x1
    61003512:	8c278793          	addi	a5,a5,-1854 # 61003dd0 <__swrite>
    61003516:	e43c                	sd	a5,72(s0)
    61003518:	00001797          	auipc	a5,0x1
    6100351c:	90a78793          	addi	a5,a5,-1782 # 61003e22 <__sseek>
    61003520:	e83c                	sd	a5,80(s0)
    61003522:	00001797          	auipc	a5,0x1
    61003526:	93878793          	addi	a5,a5,-1736 # 61003e5a <__sclose>
    6100352a:	60a2                	ld	ra,8(sp)
    6100352c:	fc00                	sd	s0,56(s0)
    6100352e:	ec3c                	sd	a5,88(s0)
    61003530:	6402                	ld	s0,0(sp)
    61003532:	0141                	addi	sp,sp,16
    61003534:	8082                	ret

0000000061003536 <_cleanup_r>:
    61003536:	00000597          	auipc	a1,0x0
    6100353a:	f3258593          	addi	a1,a1,-206 # 61003468 <_fflush_r>
    6100353e:	1580006f          	j	61003696 <_fwalk_reent>

0000000061003542 <__sfmoreglue>:
    61003542:	1101                	addi	sp,sp,-32
    61003544:	e426                	sd	s1,8(sp)
    61003546:	0b000613          	li	a2,176
    6100354a:	fff5849b          	addiw	s1,a1,-1
    6100354e:	02c484b3          	mul	s1,s1,a2
    61003552:	e04a                	sd	s2,0(sp)
    61003554:	892e                	mv	s2,a1
    61003556:	e822                	sd	s0,16(sp)
    61003558:	ec06                	sd	ra,24(sp)
    6100355a:	0c848593          	addi	a1,s1,200
    6100355e:	400000ef          	jal	ra,6100395e <_malloc_r>
    61003562:	842a                	mv	s0,a0
    61003564:	cd01                	beqz	a0,6100357c <__sfmoreglue+0x3a>
    61003566:	00053023          	sd	zero,0(a0)
    6100356a:	01252423          	sw	s2,8(a0)
    6100356e:	0561                	addi	a0,a0,24
    61003570:	e808                	sd	a0,16(s0)
    61003572:	0b048613          	addi	a2,s1,176
    61003576:	4581                	li	a1,0
    61003578:	292000ef          	jal	ra,6100380a <memset>
    6100357c:	60e2                	ld	ra,24(sp)
    6100357e:	8522                	mv	a0,s0
    61003580:	6442                	ld	s0,16(sp)
    61003582:	64a2                	ld	s1,8(sp)
    61003584:	6902                	ld	s2,0(sp)
    61003586:	6105                	addi	sp,sp,32
    61003588:	8082                	ret

000000006100358a <__sinit>:
    6100358a:	591c                	lw	a5,48(a0)
    6100358c:	e7bd                	bnez	a5,610035fa <__sinit+0x70>
    6100358e:	1141                	addi	sp,sp,-16
    61003590:	e022                	sd	s0,0(sp)
    61003592:	e406                	sd	ra,8(sp)
    61003594:	00000797          	auipc	a5,0x0
    61003598:	fa278793          	addi	a5,a5,-94 # 61003536 <_cleanup_r>
    6100359c:	e53c                	sd	a5,72(a0)
    6100359e:	08053023          	sd	zero,128(a0)
    610035a2:	08052423          	sw	zero,136(a0)
    610035a6:	08053823          	sd	zero,144(a0)
    610035aa:	8181b783          	ld	a5,-2024(gp) # 610100c8 <_global_impure_ptr>
    610035ae:	842a                	mv	s0,a0
    610035b0:	00f51463          	bne	a0,a5,610035b8 <__sinit+0x2e>
    610035b4:	4785                	li	a5,1
    610035b6:	d91c                	sw	a5,48(a0)
    610035b8:	8522                	mv	a0,s0
    610035ba:	042000ef          	jal	ra,610035fc <__sfp>
    610035be:	e408                	sd	a0,8(s0)
    610035c0:	8522                	mv	a0,s0
    610035c2:	03a000ef          	jal	ra,610035fc <__sfp>
    610035c6:	e808                	sd	a0,16(s0)
    610035c8:	8522                	mv	a0,s0
    610035ca:	032000ef          	jal	ra,610035fc <__sfp>
    610035ce:	ec08                	sd	a0,24(s0)
    610035d0:	6408                	ld	a0,8(s0)
    610035d2:	4601                	li	a2,0
    610035d4:	4591                	li	a1,4
    610035d6:	efbff0ef          	jal	ra,610034d0 <std>
    610035da:	6808                	ld	a0,16(s0)
    610035dc:	4605                	li	a2,1
    610035de:	45a5                	li	a1,9
    610035e0:	ef1ff0ef          	jal	ra,610034d0 <std>
    610035e4:	6c08                	ld	a0,24(s0)
    610035e6:	4609                	li	a2,2
    610035e8:	45c9                	li	a1,18
    610035ea:	ee7ff0ef          	jal	ra,610034d0 <std>
    610035ee:	4785                	li	a5,1
    610035f0:	60a2                	ld	ra,8(sp)
    610035f2:	d81c                	sw	a5,48(s0)
    610035f4:	6402                	ld	s0,0(sp)
    610035f6:	0141                	addi	sp,sp,16
    610035f8:	8082                	ret
    610035fa:	8082                	ret

00000000610035fc <__sfp>:
    610035fc:	1101                	addi	sp,sp,-32
    610035fe:	e426                	sd	s1,8(sp)
    61003600:	8181b483          	ld	s1,-2024(gp) # 610100c8 <_global_impure_ptr>
    61003604:	589c                	lw	a5,48(s1)
    61003606:	e04a                	sd	s2,0(sp)
    61003608:	ec06                	sd	ra,24(sp)
    6100360a:	e822                	sd	s0,16(sp)
    6100360c:	892a                	mv	s2,a0
    6100360e:	e781                	bnez	a5,61003616 <__sfp+0x1a>
    61003610:	8526                	mv	a0,s1
    61003612:	f79ff0ef          	jal	ra,6100358a <__sinit>
    61003616:	08048493          	addi	s1,s1,128
    6100361a:	6880                	ld	s0,16(s1)
    6100361c:	449c                	lw	a5,8(s1)
    6100361e:	37fd                	addiw	a5,a5,-1
    61003620:	0007d663          	bgez	a5,6100362c <__sfp+0x30>
    61003624:	609c                	ld	a5,0(s1)
    61003626:	cfa9                	beqz	a5,61003680 <__sfp+0x84>
    61003628:	6084                	ld	s1,0(s1)
    6100362a:	bfc5                	j	6100361a <__sfp+0x1e>
    6100362c:	01041703          	lh	a4,16(s0)
    61003630:	e729                	bnez	a4,6100367a <__sfp+0x7e>
    61003632:	77c1                	lui	a5,0xffff0
    61003634:	2785                	addiw	a5,a5,1
    61003636:	0a042623          	sw	zero,172(s0)
    6100363a:	00043023          	sd	zero,0(s0)
    6100363e:	00043423          	sd	zero,8(s0)
    61003642:	c81c                	sw	a5,16(s0)
    61003644:	00043c23          	sd	zero,24(s0)
    61003648:	02042023          	sw	zero,32(s0)
    6100364c:	02042423          	sw	zero,40(s0)
    61003650:	4621                	li	a2,8
    61003652:	4581                	li	a1,0
    61003654:	0a440513          	addi	a0,s0,164
    61003658:	1b2000ef          	jal	ra,6100380a <memset>
    6100365c:	06043023          	sd	zero,96(s0)
    61003660:	06042423          	sw	zero,104(s0)
    61003664:	08043023          	sd	zero,128(s0)
    61003668:	08042423          	sw	zero,136(s0)
    6100366c:	60e2                	ld	ra,24(sp)
    6100366e:	8522                	mv	a0,s0
    61003670:	6442                	ld	s0,16(sp)
    61003672:	64a2                	ld	s1,8(sp)
    61003674:	6902                	ld	s2,0(sp)
    61003676:	6105                	addi	sp,sp,32
    61003678:	8082                	ret
    6100367a:	0b040413          	addi	s0,s0,176
    6100367e:	b745                	j	6100361e <__sfp+0x22>
    61003680:	4591                	li	a1,4
    61003682:	854a                	mv	a0,s2
    61003684:	ebfff0ef          	jal	ra,61003542 <__sfmoreglue>
    61003688:	e088                	sd	a0,0(s1)
    6100368a:	842a                	mv	s0,a0
    6100368c:	fd51                	bnez	a0,61003628 <__sfp+0x2c>
    6100368e:	47b1                	li	a5,12
    61003690:	00f92023          	sw	a5,0(s2)
    61003694:	bfe1                	j	6100366c <__sfp+0x70>

0000000061003696 <_fwalk_reent>:
    61003696:	715d                	addi	sp,sp,-80
    61003698:	e0a2                	sd	s0,64(sp)
    6100369a:	fc26                	sd	s1,56(sp)
    6100369c:	f44e                	sd	s3,40(sp)
    6100369e:	f052                	sd	s4,32(sp)
    610036a0:	e85a                	sd	s6,16(sp)
    610036a2:	e45e                	sd	s7,8(sp)
    610036a4:	e486                	sd	ra,72(sp)
    610036a6:	f84a                	sd	s2,48(sp)
    610036a8:	ec56                	sd	s5,24(sp)
    610036aa:	89aa                	mv	s3,a0
    610036ac:	8a2e                	mv	s4,a1
    610036ae:	08050493          	addi	s1,a0,128
    610036b2:	4401                	li	s0,0
    610036b4:	4b05                	li	s6,1
    610036b6:	5bfd                	li	s7,-1
    610036b8:	0104b903          	ld	s2,16(s1)
    610036bc:	0084aa83          	lw	s5,8(s1)
    610036c0:	3afd                	addiw	s5,s5,-1
    610036c2:	020ad063          	bgez	s5,610036e2 <_fwalk_reent+0x4c>
    610036c6:	6084                	ld	s1,0(s1)
    610036c8:	f8e5                	bnez	s1,610036b8 <_fwalk_reent+0x22>
    610036ca:	60a6                	ld	ra,72(sp)
    610036cc:	8522                	mv	a0,s0
    610036ce:	6406                	ld	s0,64(sp)
    610036d0:	74e2                	ld	s1,56(sp)
    610036d2:	7942                	ld	s2,48(sp)
    610036d4:	79a2                	ld	s3,40(sp)
    610036d6:	7a02                	ld	s4,32(sp)
    610036d8:	6ae2                	ld	s5,24(sp)
    610036da:	6b42                	ld	s6,16(sp)
    610036dc:	6ba2                	ld	s7,8(sp)
    610036de:	6161                	addi	sp,sp,80
    610036e0:	8082                	ret
    610036e2:	01095783          	lhu	a5,16(s2)
    610036e6:	00fb7b63          	bgeu	s6,a5,610036fc <_fwalk_reent+0x66>
    610036ea:	01291783          	lh	a5,18(s2)
    610036ee:	01778763          	beq	a5,s7,610036fc <_fwalk_reent+0x66>
    610036f2:	85ca                	mv	a1,s2
    610036f4:	854e                	mv	a0,s3
    610036f6:	9a02                	jalr	s4
    610036f8:	8c49                	or	s0,s0,a0
    610036fa:	2401                	sext.w	s0,s0
    610036fc:	0b090913          	addi	s2,s2,176
    61003700:	b7c1                	j	610036c0 <_fwalk_reent+0x2a>

0000000061003702 <__swhatbuf_r>:
    61003702:	7175                	addi	sp,sp,-144
    61003704:	f8ca                	sd	s2,112(sp)
    61003706:	892e                	mv	s2,a1
    61003708:	01259583          	lh	a1,18(a1)
    6100370c:	e122                	sd	s0,128(sp)
    6100370e:	fca6                	sd	s1,120(sp)
    61003710:	e506                	sd	ra,136(sp)
    61003712:	8432                	mv	s0,a2
    61003714:	84b6                	mv	s1,a3
    61003716:	0005dc63          	bgez	a1,6100372e <__swhatbuf_r+0x2c>
    6100371a:	01095783          	lhu	a5,16(s2)
    6100371e:	0004a023          	sw	zero,0(s1)
    61003722:	0807f793          	andi	a5,a5,128
    61003726:	e395                	bnez	a5,6100374a <__swhatbuf_r+0x48>
    61003728:	40000793          	li	a5,1024
    6100372c:	a00d                	j	6100374e <__swhatbuf_r+0x4c>
    6100372e:	0030                	addi	a2,sp,8
    61003730:	786000ef          	jal	ra,61003eb6 <_fstat_r>
    61003734:	fe0543e3          	bltz	a0,6100371a <__swhatbuf_r+0x18>
    61003738:	47b2                	lw	a5,12(sp)
    6100373a:	673d                	lui	a4,0xf
    6100373c:	8ff9                	and	a5,a5,a4
    6100373e:	6709                	lui	a4,0x2
    61003740:	8f99                	sub	a5,a5,a4
    61003742:	0017b793          	seqz	a5,a5
    61003746:	c09c                	sw	a5,0(s1)
    61003748:	b7c5                	j	61003728 <__swhatbuf_r+0x26>
    6100374a:	04000793          	li	a5,64
    6100374e:	60aa                	ld	ra,136(sp)
    61003750:	e01c                	sd	a5,0(s0)
    61003752:	640a                	ld	s0,128(sp)
    61003754:	74e6                	ld	s1,120(sp)
    61003756:	7946                	ld	s2,112(sp)
    61003758:	4501                	li	a0,0
    6100375a:	6149                	addi	sp,sp,144
    6100375c:	8082                	ret

000000006100375e <__smakebuf_r>:
    6100375e:	0105d783          	lhu	a5,16(a1)
    61003762:	7179                	addi	sp,sp,-48
    61003764:	f022                	sd	s0,32(sp)
    61003766:	f406                	sd	ra,40(sp)
    61003768:	ec26                	sd	s1,24(sp)
    6100376a:	e84a                	sd	s2,16(sp)
    6100376c:	8b89                	andi	a5,a5,2
    6100376e:	842e                	mv	s0,a1
    61003770:	cf89                	beqz	a5,6100378a <__smakebuf_r+0x2c>
    61003772:	07f40793          	addi	a5,s0,127
    61003776:	e01c                	sd	a5,0(s0)
    61003778:	ec1c                	sd	a5,24(s0)
    6100377a:	4785                	li	a5,1
    6100377c:	d01c                	sw	a5,32(s0)
    6100377e:	70a2                	ld	ra,40(sp)
    61003780:	7402                	ld	s0,32(sp)
    61003782:	64e2                	ld	s1,24(sp)
    61003784:	6942                	ld	s2,16(sp)
    61003786:	6145                	addi	sp,sp,48
    61003788:	8082                	ret
    6100378a:	0054                	addi	a3,sp,4
    6100378c:	0030                	addi	a2,sp,8
    6100378e:	892a                	mv	s2,a0
    61003790:	f73ff0ef          	jal	ra,61003702 <__swhatbuf_r>
    61003794:	65a2                	ld	a1,8(sp)
    61003796:	84aa                	mv	s1,a0
    61003798:	854a                	mv	a0,s2
    6100379a:	1c4000ef          	jal	ra,6100395e <_malloc_r>
    6100379e:	ed01                	bnez	a0,610037b6 <__smakebuf_r+0x58>
    610037a0:	01041783          	lh	a5,16(s0)
    610037a4:	2007f713          	andi	a4,a5,512
    610037a8:	fb79                	bnez	a4,6100377e <__smakebuf_r+0x20>
    610037aa:	9bf1                	andi	a5,a5,-4
    610037ac:	0027e793          	ori	a5,a5,2
    610037b0:	00f41823          	sh	a5,16(s0)
    610037b4:	bf7d                	j	61003772 <__smakebuf_r+0x14>
    610037b6:	00000797          	auipc	a5,0x0
    610037ba:	d8078793          	addi	a5,a5,-640 # 61003536 <_cleanup_r>
    610037be:	04f93423          	sd	a5,72(s2)
    610037c2:	01045783          	lhu	a5,16(s0)
    610037c6:	e008                	sd	a0,0(s0)
    610037c8:	ec08                	sd	a0,24(s0)
    610037ca:	0807e793          	ori	a5,a5,128
    610037ce:	00f41823          	sh	a5,16(s0)
    610037d2:	67a2                	ld	a5,8(sp)
    610037d4:	d01c                	sw	a5,32(s0)
    610037d6:	4792                	lw	a5,4(sp)
    610037d8:	cf91                	beqz	a5,610037f4 <__smakebuf_r+0x96>
    610037da:	01241583          	lh	a1,18(s0)
    610037de:	854a                	mv	a0,s2
    610037e0:	700000ef          	jal	ra,61003ee0 <_isatty_r>
    610037e4:	c901                	beqz	a0,610037f4 <__smakebuf_r+0x96>
    610037e6:	01045783          	lhu	a5,16(s0)
    610037ea:	9bf1                	andi	a5,a5,-4
    610037ec:	0017e793          	ori	a5,a5,1
    610037f0:	00f41823          	sh	a5,16(s0)
    610037f4:	01045503          	lhu	a0,16(s0)
    610037f8:	8cc9                	or	s1,s1,a0
    610037fa:	00941823          	sh	s1,16(s0)
    610037fe:	b741                	j	6100377e <__smakebuf_r+0x20>

0000000061003800 <malloc>:
    61003800:	85aa                	mv	a1,a0
    61003802:	8101b503          	ld	a0,-2032(gp) # 610100c0 <_impure_ptr>
    61003806:	1580006f          	j	6100395e <_malloc_r>

000000006100380a <memset>:
    6100380a:	433d                	li	t1,15
    6100380c:	872a                	mv	a4,a0
    6100380e:	02c37163          	bgeu	t1,a2,61003830 <memset+0x26>
    61003812:	00f77793          	andi	a5,a4,15
    61003816:	e3c1                	bnez	a5,61003896 <memset+0x8c>
    61003818:	e1bd                	bnez	a1,6100387e <memset+0x74>
    6100381a:	ff067693          	andi	a3,a2,-16
    6100381e:	8a3d                	andi	a2,a2,15
    61003820:	96ba                	add	a3,a3,a4
    61003822:	e30c                	sd	a1,0(a4)
    61003824:	e70c                	sd	a1,8(a4)
    61003826:	0741                	addi	a4,a4,16
    61003828:	fed76de3          	bltu	a4,a3,61003822 <memset+0x18>
    6100382c:	e211                	bnez	a2,61003830 <memset+0x26>
    6100382e:	8082                	ret
    61003830:	40c306b3          	sub	a3,t1,a2
    61003834:	068a                	slli	a3,a3,0x2
    61003836:	00000297          	auipc	t0,0x0
    6100383a:	9696                	add	a3,a3,t0
    6100383c:	00a68067          	jr	10(a3) # 6103000a <_sp+0x1000a>
    61003840:	00b70723          	sb	a1,14(a4) # 200e <__stack_size+0x180e>
    61003844:	00b706a3          	sb	a1,13(a4)
    61003848:	00b70623          	sb	a1,12(a4)
    6100384c:	00b705a3          	sb	a1,11(a4)
    61003850:	00b70523          	sb	a1,10(a4)
    61003854:	00b704a3          	sb	a1,9(a4)
    61003858:	00b70423          	sb	a1,8(a4)
    6100385c:	00b703a3          	sb	a1,7(a4)
    61003860:	00b70323          	sb	a1,6(a4)
    61003864:	00b702a3          	sb	a1,5(a4)
    61003868:	00b70223          	sb	a1,4(a4)
    6100386c:	00b701a3          	sb	a1,3(a4)
    61003870:	00b70123          	sb	a1,2(a4)
    61003874:	00b700a3          	sb	a1,1(a4)
    61003878:	00b70023          	sb	a1,0(a4)
    6100387c:	8082                	ret
    6100387e:	0ff5f593          	andi	a1,a1,255
    61003882:	00859693          	slli	a3,a1,0x8
    61003886:	8dd5                	or	a1,a1,a3
    61003888:	01059693          	slli	a3,a1,0x10
    6100388c:	8dd5                	or	a1,a1,a3
    6100388e:	02059693          	slli	a3,a1,0x20
    61003892:	8dd5                	or	a1,a1,a3
    61003894:	b759                	j	6100381a <memset+0x10>
    61003896:	00279693          	slli	a3,a5,0x2
    6100389a:	00000297          	auipc	t0,0x0
    6100389e:	9696                	add	a3,a3,t0
    610038a0:	8286                	mv	t0,ra
    610038a2:	fa2680e7          	jalr	-94(a3)
    610038a6:	8096                	mv	ra,t0
    610038a8:	17c1                	addi	a5,a5,-16
    610038aa:	8f1d                	sub	a4,a4,a5
    610038ac:	963e                	add	a2,a2,a5
    610038ae:	f8c371e3          	bgeu	t1,a2,61003830 <memset+0x26>
    610038b2:	b79d                	j	61003818 <memset+0xe>

00000000610038b4 <_free_r>:
    610038b4:	c5c5                	beqz	a1,6100395c <_free_r+0xa8>
    610038b6:	ff85b783          	ld	a5,-8(a1)
    610038ba:	1101                	addi	sp,sp,-32
    610038bc:	e822                	sd	s0,16(sp)
    610038be:	ec06                	sd	ra,24(sp)
    610038c0:	ff858413          	addi	s0,a1,-8
    610038c4:	0007d363          	bgez	a5,610038ca <_free_r+0x16>
    610038c8:	943e                	add	s0,s0,a5
    610038ca:	e42a                	sd	a0,8(sp)
    610038cc:	682000ef          	jal	ra,61003f4e <__malloc_lock>
    610038d0:	0000d717          	auipc	a4,0xd
    610038d4:	80870713          	addi	a4,a4,-2040 # 610100d8 <__malloc_free_list>
    610038d8:	631c                	ld	a5,0(a4)
    610038da:	6522                	ld	a0,8(sp)
    610038dc:	863a                	mv	a2,a4
    610038de:	eb89                	bnez	a5,610038f0 <_free_r+0x3c>
    610038e0:	00043423          	sd	zero,8(s0)
    610038e4:	e300                	sd	s0,0(a4)
    610038e6:	6442                	ld	s0,16(sp)
    610038e8:	60e2                	ld	ra,24(sp)
    610038ea:	6105                	addi	sp,sp,32
    610038ec:	6640006f          	j	61003f50 <__malloc_unlock>
    610038f0:	00f47e63          	bgeu	s0,a5,6100390c <_free_r+0x58>
    610038f4:	6014                	ld	a3,0(s0)
    610038f6:	00d40733          	add	a4,s0,a3
    610038fa:	00e79663          	bne	a5,a4,61003906 <_free_r+0x52>
    610038fe:	6398                	ld	a4,0(a5)
    61003900:	679c                	ld	a5,8(a5)
    61003902:	9736                	add	a4,a4,a3
    61003904:	e018                	sd	a4,0(s0)
    61003906:	e41c                	sd	a5,8(s0)
    61003908:	e200                	sd	s0,0(a2)
    6100390a:	bff1                	j	610038e6 <_free_r+0x32>
    6100390c:	873e                	mv	a4,a5
    6100390e:	679c                	ld	a5,8(a5)
    61003910:	c399                	beqz	a5,61003916 <_free_r+0x62>
    61003912:	fef47de3          	bgeu	s0,a5,6100390c <_free_r+0x58>
    61003916:	6314                	ld	a3,0(a4)
    61003918:	00d70633          	add	a2,a4,a3
    6100391c:	00861f63          	bne	a2,s0,6100393a <_free_r+0x86>
    61003920:	6010                	ld	a2,0(s0)
    61003922:	96b2                	add	a3,a3,a2
    61003924:	e314                	sd	a3,0(a4)
    61003926:	00d70633          	add	a2,a4,a3
    6100392a:	fac79ee3          	bne	a5,a2,610038e6 <_free_r+0x32>
    6100392e:	6390                	ld	a2,0(a5)
    61003930:	679c                	ld	a5,8(a5)
    61003932:	96b2                	add	a3,a3,a2
    61003934:	e314                	sd	a3,0(a4)
    61003936:	e71c                	sd	a5,8(a4)
    61003938:	b77d                	j	610038e6 <_free_r+0x32>
    6100393a:	00c47563          	bgeu	s0,a2,61003944 <_free_r+0x90>
    6100393e:	47b1                	li	a5,12
    61003940:	c11c                	sw	a5,0(a0)
    61003942:	b755                	j	610038e6 <_free_r+0x32>
    61003944:	6010                	ld	a2,0(s0)
    61003946:	00c406b3          	add	a3,s0,a2
    6100394a:	00d79663          	bne	a5,a3,61003956 <_free_r+0xa2>
    6100394e:	6394                	ld	a3,0(a5)
    61003950:	679c                	ld	a5,8(a5)
    61003952:	96b2                	add	a3,a3,a2
    61003954:	e014                	sd	a3,0(s0)
    61003956:	e41c                	sd	a5,8(s0)
    61003958:	e700                	sd	s0,8(a4)
    6100395a:	b771                	j	610038e6 <_free_r+0x32>
    6100395c:	8082                	ret

000000006100395e <_malloc_r>:
    6100395e:	00758793          	addi	a5,a1,7
    61003962:	7179                	addi	sp,sp,-48
    61003964:	9be1                	andi	a5,a5,-8
    61003966:	ec26                	sd	s1,24(sp)
    61003968:	e84a                	sd	s2,16(sp)
    6100396a:	f406                	sd	ra,40(sp)
    6100396c:	f022                	sd	s0,32(sp)
    6100396e:	e44e                	sd	s3,8(sp)
    61003970:	07a1                	addi	a5,a5,8
    61003972:	4741                	li	a4,16
    61003974:	84aa                	mv	s1,a0
    61003976:	4941                	li	s2,16
    61003978:	00e7e363          	bltu	a5,a4,6100397e <_malloc_r+0x20>
    6100397c:	893e                	mv	s2,a5
    6100397e:	80000737          	lui	a4,0x80000
    61003982:	fff74713          	not	a4,a4
    61003986:	00f76463          	bltu	a4,a5,6100398e <_malloc_r+0x30>
    6100398a:	00b97c63          	bgeu	s2,a1,610039a2 <_malloc_r+0x44>
    6100398e:	47b1                	li	a5,12
    61003990:	c09c                	sw	a5,0(s1)
    61003992:	4501                	li	a0,0
    61003994:	70a2                	ld	ra,40(sp)
    61003996:	7402                	ld	s0,32(sp)
    61003998:	64e2                	ld	s1,24(sp)
    6100399a:	6942                	ld	s2,16(sp)
    6100399c:	69a2                	ld	s3,8(sp)
    6100399e:	6145                	addi	sp,sp,48
    610039a0:	8082                	ret
    610039a2:	8526                	mv	a0,s1
    610039a4:	5aa000ef          	jal	ra,61003f4e <__malloc_lock>
    610039a8:	0000c797          	auipc	a5,0xc
    610039ac:	73078793          	addi	a5,a5,1840 # 610100d8 <__malloc_free_list>
    610039b0:	6398                	ld	a4,0(a5)
    610039b2:	86be                	mv	a3,a5
    610039b4:	843a                	mv	s0,a4
    610039b6:	e80d                	bnez	s0,610039e8 <_malloc_r+0x8a>
    610039b8:	0000c417          	auipc	s0,0xc
    610039bc:	72840413          	addi	s0,s0,1832 # 610100e0 <__malloc_sbrk_start>
    610039c0:	601c                	ld	a5,0(s0)
    610039c2:	e791                	bnez	a5,610039ce <_malloc_r+0x70>
    610039c4:	4581                	li	a1,0
    610039c6:	8526                	mv	a0,s1
    610039c8:	3ae000ef          	jal	ra,61003d76 <_sbrk_r>
    610039cc:	e008                	sd	a0,0(s0)
    610039ce:	85ca                	mv	a1,s2
    610039d0:	8526                	mv	a0,s1
    610039d2:	3a4000ef          	jal	ra,61003d76 <_sbrk_r>
    610039d6:	59fd                	li	s3,-1
    610039d8:	05351e63          	bne	a0,s3,61003a34 <_malloc_r+0xd6>
    610039dc:	47b1                	li	a5,12
    610039de:	c09c                	sw	a5,0(s1)
    610039e0:	8526                	mv	a0,s1
    610039e2:	56e000ef          	jal	ra,61003f50 <__malloc_unlock>
    610039e6:	b775                	j	61003992 <_malloc_r+0x34>
    610039e8:	601c                	ld	a5,0(s0)
    610039ea:	412787bb          	subw	a5,a5,s2
    610039ee:	0407c063          	bltz	a5,61003a2e <_malloc_r+0xd0>
    610039f2:	463d                	li	a2,15
    610039f4:	00f65763          	bge	a2,a5,61003a02 <_malloc_r+0xa4>
    610039f8:	e01c                	sd	a5,0(s0)
    610039fa:	943e                	add	s0,s0,a5
    610039fc:	01243023          	sd	s2,0(s0)
    61003a00:	a029                	j	61003a0a <_malloc_r+0xac>
    61003a02:	641c                	ld	a5,8(s0)
    61003a04:	02871363          	bne	a4,s0,61003a2a <_malloc_r+0xcc>
    61003a08:	e29c                	sd	a5,0(a3)
    61003a0a:	8526                	mv	a0,s1
    61003a0c:	544000ef          	jal	ra,61003f50 <__malloc_unlock>
    61003a10:	00f40513          	addi	a0,s0,15
    61003a14:	00840793          	addi	a5,s0,8
    61003a18:	9961                	andi	a0,a0,-8
    61003a1a:	40f507bb          	subw	a5,a0,a5
    61003a1e:	dbbd                	beqz	a5,61003994 <_malloc_r+0x36>
    61003a20:	943e                	add	s0,s0,a5
    61003a22:	40f007bb          	negw	a5,a5
    61003a26:	e01c                	sd	a5,0(s0)
    61003a28:	b7b5                	j	61003994 <_malloc_r+0x36>
    61003a2a:	e71c                	sd	a5,8(a4)
    61003a2c:	bff9                	j	61003a0a <_malloc_r+0xac>
    61003a2e:	8722                	mv	a4,s0
    61003a30:	6400                	ld	s0,8(s0)
    61003a32:	b751                	j	610039b6 <_malloc_r+0x58>
    61003a34:	00750413          	addi	s0,a0,7
    61003a38:	9861                	andi	s0,s0,-8
    61003a3a:	fc8501e3          	beq	a0,s0,610039fc <_malloc_r+0x9e>
    61003a3e:	40a405b3          	sub	a1,s0,a0
    61003a42:	8526                	mv	a0,s1
    61003a44:	332000ef          	jal	ra,61003d76 <_sbrk_r>
    61003a48:	fb351ae3          	bne	a0,s3,610039fc <_malloc_r+0x9e>
    61003a4c:	bf41                	j	610039dc <_malloc_r+0x7e>

0000000061003a4e <__sfputc_r>:
    61003a4e:	465c                	lw	a5,12(a2)
    61003a50:	37fd                	addiw	a5,a5,-1
    61003a52:	c65c                	sw	a5,12(a2)
    61003a54:	02079693          	slli	a3,a5,0x20
    61003a58:	0007871b          	sext.w	a4,a5
    61003a5c:	0006da63          	bgez	a3,61003a70 <__sfputc_r+0x22>
    61003a60:	561c                	lw	a5,40(a2)
    61003a62:	00f74563          	blt	a4,a5,61003a6c <__sfputc_r+0x1e>
    61003a66:	47a9                	li	a5,10
    61003a68:	00f59463          	bne	a1,a5,61003a70 <__sfputc_r+0x22>
    61003a6c:	e6eff06f          	j	610030da <__swbuf_r>
    61003a70:	621c                	ld	a5,0(a2)
    61003a72:	852e                	mv	a0,a1
    61003a74:	00178713          	addi	a4,a5,1
    61003a78:	e218                	sd	a4,0(a2)
    61003a7a:	00b78023          	sb	a1,0(a5)
    61003a7e:	8082                	ret

0000000061003a80 <__sfputs_r>:
    61003a80:	7179                	addi	sp,sp,-48
    61003a82:	f022                	sd	s0,32(sp)
    61003a84:	ec26                	sd	s1,24(sp)
    61003a86:	e84a                	sd	s2,16(sp)
    61003a88:	e44e                	sd	s3,8(sp)
    61003a8a:	e052                	sd	s4,0(sp)
    61003a8c:	f406                	sd	ra,40(sp)
    61003a8e:	892a                	mv	s2,a0
    61003a90:	89ae                	mv	s3,a1
    61003a92:	8432                	mv	s0,a2
    61003a94:	00d604b3          	add	s1,a2,a3
    61003a98:	5a7d                	li	s4,-1
    61003a9a:	00941463          	bne	s0,s1,61003aa2 <__sfputs_r+0x22>
    61003a9e:	4501                	li	a0,0
    61003aa0:	a811                	j	61003ab4 <__sfputs_r+0x34>
    61003aa2:	00044583          	lbu	a1,0(s0)
    61003aa6:	864e                	mv	a2,s3
    61003aa8:	854a                	mv	a0,s2
    61003aaa:	fa5ff0ef          	jal	ra,61003a4e <__sfputc_r>
    61003aae:	0405                	addi	s0,s0,1
    61003ab0:	ff4515e3          	bne	a0,s4,61003a9a <__sfputs_r+0x1a>
    61003ab4:	70a2                	ld	ra,40(sp)
    61003ab6:	7402                	ld	s0,32(sp)
    61003ab8:	64e2                	ld	s1,24(sp)
    61003aba:	6942                	ld	s2,16(sp)
    61003abc:	69a2                	ld	s3,8(sp)
    61003abe:	6a02                	ld	s4,0(sp)
    61003ac0:	6145                	addi	sp,sp,48
    61003ac2:	8082                	ret

0000000061003ac4 <_vfiprintf_r>:
    61003ac4:	7155                	addi	sp,sp,-208
    61003ac6:	e1a2                	sd	s0,192(sp)
    61003ac8:	fd26                	sd	s1,184(sp)
    61003aca:	f94a                	sd	s2,176(sp)
    61003acc:	f54e                	sd	s3,168(sp)
    61003ace:	f152                	sd	s4,160(sp)
    61003ad0:	e586                	sd	ra,200(sp)
    61003ad2:	ed56                	sd	s5,152(sp)
    61003ad4:	e95a                	sd	s6,144(sp)
    61003ad6:	e55e                	sd	s7,136(sp)
    61003ad8:	e162                	sd	s8,128(sp)
    61003ada:	fce6                	sd	s9,120(sp)
    61003adc:	f8ea                	sd	s10,112(sp)
    61003ade:	89aa                	mv	s3,a0
    61003ae0:	84ae                	mv	s1,a1
    61003ae2:	8932                	mv	s2,a2
    61003ae4:	8436                	mv	s0,a3
    61003ae6:	4a01                	li	s4,0
    61003ae8:	c509                	beqz	a0,61003af2 <_vfiprintf_r+0x2e>
    61003aea:	591c                	lw	a5,48(a0)
    61003aec:	e399                	bnez	a5,61003af2 <_vfiprintf_r+0x2e>
    61003aee:	a9dff0ef          	jal	ra,6100358a <__sinit>
    61003af2:	00001797          	auipc	a5,0x1
    61003af6:	e0e78793          	addi	a5,a5,-498 # 61004900 <__sf_fake_stdin>
    61003afa:	0cf49e63          	bne	s1,a5,61003bd6 <_vfiprintf_r+0x112>
    61003afe:	0089b483          	ld	s1,8(s3)
    61003b02:	0104d783          	lhu	a5,16(s1)
    61003b06:	8ba1                	andi	a5,a5,8
    61003b08:	cbed                	beqz	a5,61003bfa <_vfiprintf_r+0x136>
    61003b0a:	6c9c                	ld	a5,24(s1)
    61003b0c:	c7fd                	beqz	a5,61003bfa <_vfiprintf_r+0x136>
    61003b0e:	02000793          	li	a5,32
    61003b12:	02f104a3          	sb	a5,41(sp)
    61003b16:	5afd                	li	s5,-1
    61003b18:	03000793          	li	a5,48
    61003b1c:	d202                	sw	zero,36(sp)
    61003b1e:	02f10523          	sb	a5,42(sp)
    61003b22:	e422                	sd	s0,8(sp)
    61003b24:	02500b93          	li	s7,37
    61003b28:	020a9c13          	slli	s8,s5,0x20
    61003b2c:	00001b17          	auipc	s6,0x1
    61003b30:	e44b0b13          	addi	s6,s6,-444 # 61004970 <__sf_fake_stdout+0x38>
    61003b34:	4c85                	li	s9,1
    61003b36:	844a                	mv	s0,s2
    61003b38:	00044783          	lbu	a5,0(s0)
    61003b3c:	c399                	beqz	a5,61003b42 <_vfiprintf_r+0x7e>
    61003b3e:	0f779263          	bne	a5,s7,61003c22 <_vfiprintf_r+0x15e>
    61003b42:	41240d3b          	subw	s10,s0,s2
    61003b46:	000d0e63          	beqz	s10,61003b62 <_vfiprintf_r+0x9e>
    61003b4a:	86ea                	mv	a3,s10
    61003b4c:	864a                	mv	a2,s2
    61003b4e:	85a6                	mv	a1,s1
    61003b50:	854e                	mv	a0,s3
    61003b52:	f2fff0ef          	jal	ra,61003a80 <__sfputs_r>
    61003b56:	1f550d63          	beq	a0,s5,61003d50 <_vfiprintf_r+0x28c>
    61003b5a:	5792                	lw	a5,36(sp)
    61003b5c:	01a787bb          	addw	a5,a5,s10
    61003b60:	d23e                	sw	a5,36(sp)
    61003b62:	00044783          	lbu	a5,0(s0)
    61003b66:	1e078563          	beqz	a5,61003d50 <_vfiprintf_r+0x28c>
    61003b6a:	00140913          	addi	s2,s0,1
    61003b6e:	e862                	sd	s8,16(sp)
    61003b70:	ec02                	sd	zero,24(sp)
    61003b72:	040109a3          	sb	zero,83(sp)
    61003b76:	d482                	sw	zero,104(sp)
    61003b78:	00094583          	lbu	a1,0(s2)
    61003b7c:	4615                	li	a2,5
    61003b7e:	855a                	mv	a0,s6
    61003b80:	3b4000ef          	jal	ra,61003f34 <memchr>
    61003b84:	00190413          	addi	s0,s2,1
    61003b88:	ed59                	bnez	a0,61003c26 <_vfiprintf_r+0x162>
    61003b8a:	47c2                	lw	a5,16(sp)
    61003b8c:	0107f713          	andi	a4,a5,16
    61003b90:	c709                	beqz	a4,61003b9a <_vfiprintf_r+0xd6>
    61003b92:	02000713          	li	a4,32
    61003b96:	04e109a3          	sb	a4,83(sp)
    61003b9a:	0087f713          	andi	a4,a5,8
    61003b9e:	c709                	beqz	a4,61003ba8 <_vfiprintf_r+0xe4>
    61003ba0:	02b00713          	li	a4,43
    61003ba4:	04e109a3          	sb	a4,83(sp)
    61003ba8:	00094683          	lbu	a3,0(s2)
    61003bac:	02a00713          	li	a4,42
    61003bb0:	08e68463          	beq	a3,a4,61003c38 <_vfiprintf_r+0x174>
    61003bb4:	47f2                	lw	a5,28(sp)
    61003bb6:	844a                	mv	s0,s2
    61003bb8:	4681                	li	a3,0
    61003bba:	4625                	li	a2,9
    61003bbc:	4829                	li	a6,10
    61003bbe:	00044703          	lbu	a4,0(s0)
    61003bc2:	00140513          	addi	a0,s0,1
    61003bc6:	fd07059b          	addiw	a1,a4,-48
    61003bca:	872e                	mv	a4,a1
    61003bcc:	0ab67b63          	bgeu	a2,a1,61003c82 <_vfiprintf_r+0x1be>
    61003bd0:	cea5                	beqz	a3,61003c48 <_vfiprintf_r+0x184>
    61003bd2:	ce3e                	sw	a5,28(sp)
    61003bd4:	a895                	j	61003c48 <_vfiprintf_r+0x184>
    61003bd6:	00001797          	auipc	a5,0x1
    61003bda:	d6278793          	addi	a5,a5,-670 # 61004938 <__sf_fake_stdout>
    61003bde:	00f49563          	bne	s1,a5,61003be8 <_vfiprintf_r+0x124>
    61003be2:	0109b483          	ld	s1,16(s3)
    61003be6:	bf31                	j	61003b02 <_vfiprintf_r+0x3e>
    61003be8:	00001797          	auipc	a5,0x1
    61003bec:	ce078793          	addi	a5,a5,-800 # 610048c8 <__sf_fake_stderr>
    61003bf0:	f0f499e3          	bne	s1,a5,61003b02 <_vfiprintf_r+0x3e>
    61003bf4:	0189b483          	ld	s1,24(s3)
    61003bf8:	b729                	j	61003b02 <_vfiprintf_r+0x3e>
    61003bfa:	85a6                	mv	a1,s1
    61003bfc:	854e                	mv	a0,s3
    61003bfe:	da2ff0ef          	jal	ra,610031a0 <__swsetup_r>
    61003c02:	d511                	beqz	a0,61003b0e <_vfiprintf_r+0x4a>
    61003c04:	557d                	li	a0,-1
    61003c06:	60ae                	ld	ra,200(sp)
    61003c08:	640e                	ld	s0,192(sp)
    61003c0a:	74ea                	ld	s1,184(sp)
    61003c0c:	794a                	ld	s2,176(sp)
    61003c0e:	79aa                	ld	s3,168(sp)
    61003c10:	7a0a                	ld	s4,160(sp)
    61003c12:	6aea                	ld	s5,152(sp)
    61003c14:	6b4a                	ld	s6,144(sp)
    61003c16:	6baa                	ld	s7,136(sp)
    61003c18:	6c0a                	ld	s8,128(sp)
    61003c1a:	7ce6                	ld	s9,120(sp)
    61003c1c:	7d46                	ld	s10,112(sp)
    61003c1e:	6169                	addi	sp,sp,208
    61003c20:	8082                	ret
    61003c22:	0405                	addi	s0,s0,1
    61003c24:	bf11                	j	61003b38 <_vfiprintf_r+0x74>
    61003c26:	47c2                	lw	a5,16(sp)
    61003c28:	41650533          	sub	a0,a0,s6
    61003c2c:	00ac953b          	sllw	a0,s9,a0
    61003c30:	8d5d                	or	a0,a0,a5
    61003c32:	c82a                	sw	a0,16(sp)
    61003c34:	8922                	mv	s2,s0
    61003c36:	b789                	j	61003b78 <_vfiprintf_r+0xb4>
    61003c38:	6722                	ld	a4,8(sp)
    61003c3a:	00870693          	addi	a3,a4,8 # ffffffff80000008 <_sp+0xffffffff1efe0008>
    61003c3e:	4318                	lw	a4,0(a4)
    61003c40:	e436                	sd	a3,8(sp)
    61003c42:	02074963          	bltz	a4,61003c74 <_vfiprintf_r+0x1b0>
    61003c46:	ce3a                	sw	a4,28(sp)
    61003c48:	00044703          	lbu	a4,0(s0)
    61003c4c:	02e00793          	li	a5,46
    61003c50:	06f71163          	bne	a4,a5,61003cb2 <_vfiprintf_r+0x1ee>
    61003c54:	00144703          	lbu	a4,1(s0)
    61003c58:	02a00793          	li	a5,42
    61003c5c:	02f71b63          	bne	a4,a5,61003c92 <_vfiprintf_r+0x1ce>
    61003c60:	67a2                	ld	a5,8(sp)
    61003c62:	0409                	addi	s0,s0,2
    61003c64:	00878713          	addi	a4,a5,8
    61003c68:	439c                	lw	a5,0(a5)
    61003c6a:	e43a                	sd	a4,8(sp)
    61003c6c:	0207c163          	bltz	a5,61003c8e <_vfiprintf_r+0x1ca>
    61003c70:	ca3e                	sw	a5,20(sp)
    61003c72:	a081                	j	61003cb2 <_vfiprintf_r+0x1ee>
    61003c74:	40e0073b          	negw	a4,a4
    61003c78:	0027e793          	ori	a5,a5,2
    61003c7c:	ce3a                	sw	a4,28(sp)
    61003c7e:	c83e                	sw	a5,16(sp)
    61003c80:	b7e1                	j	61003c48 <_vfiprintf_r+0x184>
    61003c82:	02f807bb          	mulw	a5,a6,a5
    61003c86:	842a                	mv	s0,a0
    61003c88:	4685                	li	a3,1
    61003c8a:	9fb9                	addw	a5,a5,a4
    61003c8c:	bf0d                	j	61003bbe <_vfiprintf_r+0xfa>
    61003c8e:	57fd                	li	a5,-1
    61003c90:	b7c5                	j	61003c70 <_vfiprintf_r+0x1ac>
    61003c92:	0405                	addi	s0,s0,1
    61003c94:	ca02                	sw	zero,20(sp)
    61003c96:	4681                	li	a3,0
    61003c98:	4781                	li	a5,0
    61003c9a:	4625                	li	a2,9
    61003c9c:	4829                	li	a6,10
    61003c9e:	00044703          	lbu	a4,0(s0)
    61003ca2:	00140513          	addi	a0,s0,1
    61003ca6:	fd07059b          	addiw	a1,a4,-48
    61003caa:	872e                	mv	a4,a1
    61003cac:	06b67b63          	bgeu	a2,a1,61003d22 <_vfiprintf_r+0x25e>
    61003cb0:	f2e1                	bnez	a3,61003c70 <_vfiprintf_r+0x1ac>
    61003cb2:	00044583          	lbu	a1,0(s0)
    61003cb6:	460d                	li	a2,3
    61003cb8:	00001517          	auipc	a0,0x1
    61003cbc:	cc050513          	addi	a0,a0,-832 # 61004978 <__sf_fake_stdout+0x40>
    61003cc0:	274000ef          	jal	ra,61003f34 <memchr>
    61003cc4:	cd11                	beqz	a0,61003ce0 <_vfiprintf_r+0x21c>
    61003cc6:	00001797          	auipc	a5,0x1
    61003cca:	cb278793          	addi	a5,a5,-846 # 61004978 <__sf_fake_stdout+0x40>
    61003cce:	8d1d                	sub	a0,a0,a5
    61003cd0:	04000793          	li	a5,64
    61003cd4:	00a7953b          	sllw	a0,a5,a0
    61003cd8:	47c2                	lw	a5,16(sp)
    61003cda:	0405                	addi	s0,s0,1
    61003cdc:	8d5d                	or	a0,a0,a5
    61003cde:	c82a                	sw	a0,16(sp)
    61003ce0:	00044583          	lbu	a1,0(s0)
    61003ce4:	4619                	li	a2,6
    61003ce6:	00001517          	auipc	a0,0x1
    61003cea:	c9a50513          	addi	a0,a0,-870 # 61004980 <__sf_fake_stdout+0x48>
    61003cee:	00140913          	addi	s2,s0,1
    61003cf2:	02b10423          	sb	a1,40(sp)
    61003cf6:	23e000ef          	jal	ra,61003f34 <memchr>
    61003cfa:	c13d                	beqz	a0,61003d60 <_vfiprintf_r+0x29c>
    61003cfc:	9effc797          	auipc	a5,0x9effc
    61003d00:	30478793          	addi	a5,a5,772 # 0 <__stack_size-0x800>
    61003d04:	e79d                	bnez	a5,61003d32 <_vfiprintf_r+0x26e>
    61003d06:	4742                	lw	a4,16(sp)
    61003d08:	67a2                	ld	a5,8(sp)
    61003d0a:	10077713          	andi	a4,a4,256
    61003d0e:	c305                	beqz	a4,61003d2e <_vfiprintf_r+0x26a>
    61003d10:	07bd                	addi	a5,a5,15
    61003d12:	9bc1                	andi	a5,a5,-16
    61003d14:	07c1                	addi	a5,a5,16
    61003d16:	e43e                	sd	a5,8(sp)
    61003d18:	5792                	lw	a5,36(sp)
    61003d1a:	014787bb          	addw	a5,a5,s4
    61003d1e:	d23e                	sw	a5,36(sp)
    61003d20:	bd19                	j	61003b36 <_vfiprintf_r+0x72>
    61003d22:	02f807bb          	mulw	a5,a6,a5
    61003d26:	842a                	mv	s0,a0
    61003d28:	4685                	li	a3,1
    61003d2a:	9fb9                	addw	a5,a5,a4
    61003d2c:	bf8d                	j	61003c9e <_vfiprintf_r+0x1da>
    61003d2e:	07a1                	addi	a5,a5,8
    61003d30:	b7dd                	j	61003d16 <_vfiprintf_r+0x252>
    61003d32:	0038                	addi	a4,sp,8
    61003d34:	00000697          	auipc	a3,0x0
    61003d38:	d4c68693          	addi	a3,a3,-692 # 61003a80 <__sfputs_r>
    61003d3c:	8626                	mv	a2,s1
    61003d3e:	080c                	addi	a1,sp,16
    61003d40:	854e                	mv	a0,s3
    61003d42:	00000097          	auipc	ra,0x0
    61003d46:	000000e7          	jalr	zero # 0 <__stack_size-0x800>
    61003d4a:	8a2a                	mv	s4,a0
    61003d4c:	fd5516e3          	bne	a0,s5,61003d18 <_vfiprintf_r+0x254>
    61003d50:	0104d783          	lhu	a5,16(s1)
    61003d54:	0407f793          	andi	a5,a5,64
    61003d58:	ea0796e3          	bnez	a5,61003c04 <_vfiprintf_r+0x140>
    61003d5c:	5512                	lw	a0,36(sp)
    61003d5e:	b565                	j	61003c06 <_vfiprintf_r+0x142>
    61003d60:	0038                	addi	a4,sp,8
    61003d62:	00000697          	auipc	a3,0x0
    61003d66:	d1e68693          	addi	a3,a3,-738 # 61003a80 <__sfputs_r>
    61003d6a:	8626                	mv	a2,s1
    61003d6c:	080c                	addi	a1,sp,16
    61003d6e:	854e                	mv	a0,s3
    61003d70:	308000ef          	jal	ra,61004078 <_printf_i>
    61003d74:	bfd9                	j	61003d4a <_vfiprintf_r+0x286>

0000000061003d76 <_sbrk_r>:
    61003d76:	1141                	addi	sp,sp,-16
    61003d78:	e022                	sd	s0,0(sp)
    61003d7a:	842a                	mv	s0,a0
    61003d7c:	852e                	mv	a0,a1
    61003d7e:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    61003d82:	e406                	sd	ra,8(sp)
    61003d84:	a46fe0ef          	jal	ra,61001fca <_sbrk>
    61003d88:	57fd                	li	a5,-1
    61003d8a:	00f51663          	bne	a0,a5,61003d96 <_sbrk_r+0x20>
    61003d8e:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    61003d92:	c391                	beqz	a5,61003d96 <_sbrk_r+0x20>
    61003d94:	c01c                	sw	a5,0(s0)
    61003d96:	60a2                	ld	ra,8(sp)
    61003d98:	6402                	ld	s0,0(sp)
    61003d9a:	0141                	addi	sp,sp,16
    61003d9c:	8082                	ret

0000000061003d9e <__sread>:
    61003d9e:	1141                	addi	sp,sp,-16
    61003da0:	e022                	sd	s0,0(sp)
    61003da2:	842e                	mv	s0,a1
    61003da4:	01259583          	lh	a1,18(a1)
    61003da8:	e406                	sd	ra,8(sp)
    61003daa:	560000ef          	jal	ra,6100430a <_read_r>
    61003dae:	00054963          	bltz	a0,61003dc0 <__sread+0x22>
    61003db2:	6c5c                	ld	a5,152(s0)
    61003db4:	97aa                	add	a5,a5,a0
    61003db6:	ec5c                	sd	a5,152(s0)
    61003db8:	60a2                	ld	ra,8(sp)
    61003dba:	6402                	ld	s0,0(sp)
    61003dbc:	0141                	addi	sp,sp,16
    61003dbe:	8082                	ret
    61003dc0:	01045783          	lhu	a5,16(s0)
    61003dc4:	777d                	lui	a4,0xfffff
    61003dc6:	177d                	addi	a4,a4,-1
    61003dc8:	8ff9                	and	a5,a5,a4
    61003dca:	00f41823          	sh	a5,16(s0)
    61003dce:	b7ed                	j	61003db8 <__sread+0x1a>

0000000061003dd0 <__swrite>:
    61003dd0:	0105d783          	lhu	a5,16(a1)
    61003dd4:	7179                	addi	sp,sp,-48
    61003dd6:	f022                	sd	s0,32(sp)
    61003dd8:	ec26                	sd	s1,24(sp)
    61003dda:	e84a                	sd	s2,16(sp)
    61003ddc:	e44e                	sd	s3,8(sp)
    61003dde:	f406                	sd	ra,40(sp)
    61003de0:	1007f793          	andi	a5,a5,256
    61003de4:	84aa                	mv	s1,a0
    61003de6:	842e                	mv	s0,a1
    61003de8:	8932                	mv	s2,a2
    61003dea:	89b6                	mv	s3,a3
    61003dec:	c799                	beqz	a5,61003dfa <__swrite+0x2a>
    61003dee:	01259583          	lh	a1,18(a1)
    61003df2:	4689                	li	a3,2
    61003df4:	4601                	li	a2,0
    61003df6:	112000ef          	jal	ra,61003f08 <_lseek_r>
    61003dfa:	01045783          	lhu	a5,16(s0)
    61003dfe:	777d                	lui	a4,0xfffff
    61003e00:	177d                	addi	a4,a4,-1
    61003e02:	8ff9                	and	a5,a5,a4
    61003e04:	01241583          	lh	a1,18(s0)
    61003e08:	00f41823          	sh	a5,16(s0)
    61003e0c:	7402                	ld	s0,32(sp)
    61003e0e:	70a2                	ld	ra,40(sp)
    61003e10:	86ce                	mv	a3,s3
    61003e12:	864a                	mv	a2,s2
    61003e14:	69a2                	ld	s3,8(sp)
    61003e16:	6942                	ld	s2,16(sp)
    61003e18:	8526                	mv	a0,s1
    61003e1a:	64e2                	ld	s1,24(sp)
    61003e1c:	6145                	addi	sp,sp,48
    61003e1e:	0440006f          	j	61003e62 <_write_r>

0000000061003e22 <__sseek>:
    61003e22:	1141                	addi	sp,sp,-16
    61003e24:	e022                	sd	s0,0(sp)
    61003e26:	842e                	mv	s0,a1
    61003e28:	01259583          	lh	a1,18(a1)
    61003e2c:	e406                	sd	ra,8(sp)
    61003e2e:	0da000ef          	jal	ra,61003f08 <_lseek_r>
    61003e32:	57fd                	li	a5,-1
    61003e34:	01045703          	lhu	a4,16(s0)
    61003e38:	00f51b63          	bne	a0,a5,61003e4e <__sseek+0x2c>
    61003e3c:	77fd                	lui	a5,0xfffff
    61003e3e:	17fd                	addi	a5,a5,-1
    61003e40:	8ff9                	and	a5,a5,a4
    61003e42:	00f41823          	sh	a5,16(s0)
    61003e46:	60a2                	ld	ra,8(sp)
    61003e48:	6402                	ld	s0,0(sp)
    61003e4a:	0141                	addi	sp,sp,16
    61003e4c:	8082                	ret
    61003e4e:	6785                	lui	a5,0x1
    61003e50:	8fd9                	or	a5,a5,a4
    61003e52:	00f41823          	sh	a5,16(s0)
    61003e56:	ec48                	sd	a0,152(s0)
    61003e58:	b7fd                	j	61003e46 <__sseek+0x24>

0000000061003e5a <__sclose>:
    61003e5a:	01259583          	lh	a1,18(a1)
    61003e5e:	0300006f          	j	61003e8e <_close_r>

0000000061003e62 <_write_r>:
    61003e62:	1141                	addi	sp,sp,-16
    61003e64:	e022                	sd	s0,0(sp)
    61003e66:	842a                	mv	s0,a0
    61003e68:	852e                	mv	a0,a1
    61003e6a:	85b2                	mv	a1,a2
    61003e6c:	8636                	mv	a2,a3
    61003e6e:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    61003e72:	e406                	sd	ra,8(sp)
    61003e74:	9cefe0ef          	jal	ra,61002042 <_write>
    61003e78:	57fd                	li	a5,-1
    61003e7a:	00f51663          	bne	a0,a5,61003e86 <_write_r+0x24>
    61003e7e:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    61003e82:	c391                	beqz	a5,61003e86 <_write_r+0x24>
    61003e84:	c01c                	sw	a5,0(s0)
    61003e86:	60a2                	ld	ra,8(sp)
    61003e88:	6402                	ld	s0,0(sp)
    61003e8a:	0141                	addi	sp,sp,16
    61003e8c:	8082                	ret

0000000061003e8e <_close_r>:
    61003e8e:	1141                	addi	sp,sp,-16
    61003e90:	e022                	sd	s0,0(sp)
    61003e92:	842a                	mv	s0,a0
    61003e94:	852e                	mv	a0,a1
    61003e96:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    61003e9a:	e406                	sd	ra,8(sp)
    61003e9c:	83cfe0ef          	jal	ra,61001ed8 <_close>
    61003ea0:	57fd                	li	a5,-1
    61003ea2:	00f51663          	bne	a0,a5,61003eae <_close_r+0x20>
    61003ea6:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    61003eaa:	c391                	beqz	a5,61003eae <_close_r+0x20>
    61003eac:	c01c                	sw	a5,0(s0)
    61003eae:	60a2                	ld	ra,8(sp)
    61003eb0:	6402                	ld	s0,0(sp)
    61003eb2:	0141                	addi	sp,sp,16
    61003eb4:	8082                	ret

0000000061003eb6 <_fstat_r>:
    61003eb6:	1141                	addi	sp,sp,-16
    61003eb8:	e022                	sd	s0,0(sp)
    61003eba:	842a                	mv	s0,a0
    61003ebc:	852e                	mv	a0,a1
    61003ebe:	85b2                	mv	a1,a2
    61003ec0:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    61003ec4:	e406                	sd	ra,8(sp)
    61003ec6:	830fe0ef          	jal	ra,61001ef6 <_fstat>
    61003eca:	57fd                	li	a5,-1
    61003ecc:	00f51663          	bne	a0,a5,61003ed8 <_fstat_r+0x22>
    61003ed0:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    61003ed4:	c391                	beqz	a5,61003ed8 <_fstat_r+0x22>
    61003ed6:	c01c                	sw	a5,0(s0)
    61003ed8:	60a2                	ld	ra,8(sp)
    61003eda:	6402                	ld	s0,0(sp)
    61003edc:	0141                	addi	sp,sp,16
    61003ede:	8082                	ret

0000000061003ee0 <_isatty_r>:
    61003ee0:	1141                	addi	sp,sp,-16
    61003ee2:	e022                	sd	s0,0(sp)
    61003ee4:	842a                	mv	s0,a0
    61003ee6:	852e                	mv	a0,a1
    61003ee8:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    61003eec:	e406                	sd	ra,8(sp)
    61003eee:	852fe0ef          	jal	ra,61001f40 <_isatty>
    61003ef2:	57fd                	li	a5,-1
    61003ef4:	00f51663          	bne	a0,a5,61003f00 <_isatty_r+0x20>
    61003ef8:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    61003efc:	c391                	beqz	a5,61003f00 <_isatty_r+0x20>
    61003efe:	c01c                	sw	a5,0(s0)
    61003f00:	60a2                	ld	ra,8(sp)
    61003f02:	6402                	ld	s0,0(sp)
    61003f04:	0141                	addi	sp,sp,16
    61003f06:	8082                	ret

0000000061003f08 <_lseek_r>:
    61003f08:	1141                	addi	sp,sp,-16
    61003f0a:	e022                	sd	s0,0(sp)
    61003f0c:	842a                	mv	s0,a0
    61003f0e:	852e                	mv	a0,a1
    61003f10:	85b2                	mv	a1,a2
    61003f12:	8636                	mv	a2,a3
    61003f14:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    61003f18:	e406                	sd	ra,8(sp)
    61003f1a:	83cfe0ef          	jal	ra,61001f56 <_lseek>
    61003f1e:	57fd                	li	a5,-1
    61003f20:	00f51663          	bne	a0,a5,61003f2c <_lseek_r+0x24>
    61003f24:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    61003f28:	c391                	beqz	a5,61003f2c <_lseek_r+0x24>
    61003f2a:	c01c                	sw	a5,0(s0)
    61003f2c:	60a2                	ld	ra,8(sp)
    61003f2e:	6402                	ld	s0,0(sp)
    61003f30:	0141                	addi	sp,sp,16
    61003f32:	8082                	ret

0000000061003f34 <memchr>:
    61003f34:	0ff5f593          	andi	a1,a1,255
    61003f38:	962a                	add	a2,a2,a0
    61003f3a:	00c51463          	bne	a0,a2,61003f42 <memchr+0xe>
    61003f3e:	4501                	li	a0,0
    61003f40:	8082                	ret
    61003f42:	00054783          	lbu	a5,0(a0)
    61003f46:	feb78de3          	beq	a5,a1,61003f40 <memchr+0xc>
    61003f4a:	0505                	addi	a0,a0,1
    61003f4c:	b7fd                	j	61003f3a <memchr+0x6>

0000000061003f4e <__malloc_lock>:
    61003f4e:	8082                	ret

0000000061003f50 <__malloc_unlock>:
    61003f50:	8082                	ret

0000000061003f52 <_printf_common>:
    61003f52:	715d                	addi	sp,sp,-80
    61003f54:	499c                	lw	a5,16(a1)
    61003f56:	f052                	sd	s4,32(sp)
    61003f58:	8a3a                	mv	s4,a4
    61003f5a:	4598                	lw	a4,8(a1)
    61003f5c:	e0a2                	sd	s0,64(sp)
    61003f5e:	f84a                	sd	s2,48(sp)
    61003f60:	f44e                	sd	s3,40(sp)
    61003f62:	ec56                	sd	s5,24(sp)
    61003f64:	8932                	mv	s2,a2
    61003f66:	8ab6                	mv	s5,a3
    61003f68:	e486                	sd	ra,72(sp)
    61003f6a:	fc26                	sd	s1,56(sp)
    61003f6c:	e85a                	sd	s6,16(sp)
    61003f6e:	e45e                	sd	s7,8(sp)
    61003f70:	0007861b          	sext.w	a2,a5
    61003f74:	0007069b          	sext.w	a3,a4
    61003f78:	89aa                	mv	s3,a0
    61003f7a:	842e                	mv	s0,a1
    61003f7c:	00d65363          	bge	a2,a3,61003f82 <_printf_common+0x30>
    61003f80:	87ba                	mv	a5,a4
    61003f82:	00f92023          	sw	a5,0(s2)
    61003f86:	04344703          	lbu	a4,67(s0)
    61003f8a:	c701                	beqz	a4,61003f92 <_printf_common+0x40>
    61003f8c:	2785                	addiw	a5,a5,1
    61003f8e:	00f92023          	sw	a5,0(s2)
    61003f92:	401c                	lw	a5,0(s0)
    61003f94:	0207f793          	andi	a5,a5,32
    61003f98:	c791                	beqz	a5,61003fa4 <_printf_common+0x52>
    61003f9a:	00092783          	lw	a5,0(s2)
    61003f9e:	2789                	addiw	a5,a5,2
    61003fa0:	00f92023          	sw	a5,0(s2)
    61003fa4:	4004                	lw	s1,0(s0)
    61003fa6:	8899                	andi	s1,s1,6
    61003fa8:	e891                	bnez	s1,61003fbc <_printf_common+0x6a>
    61003faa:	01940b13          	addi	s6,s0,25
    61003fae:	5bfd                	li	s7,-1
    61003fb0:	445c                	lw	a5,12(s0)
    61003fb2:	00092703          	lw	a4,0(s2)
    61003fb6:	9f99                	subw	a5,a5,a4
    61003fb8:	06f4c163          	blt	s1,a5,6100401a <_printf_common+0xc8>
    61003fbc:	04344783          	lbu	a5,67(s0)
    61003fc0:	00f03733          	snez	a4,a5
    61003fc4:	00f036b3          	snez	a3,a5
    61003fc8:	401c                	lw	a5,0(s0)
    61003fca:	0207f793          	andi	a5,a5,32
    61003fce:	ebbd                	bnez	a5,61004044 <_printf_common+0xf2>
    61003fd0:	04340613          	addi	a2,s0,67
    61003fd4:	85d6                	mv	a1,s5
    61003fd6:	854e                	mv	a0,s3
    61003fd8:	9a02                	jalr	s4
    61003fda:	57fd                	li	a5,-1
    61003fdc:	04f50663          	beq	a0,a5,61004028 <_printf_common+0xd6>
    61003fe0:	401c                	lw	a5,0(s0)
    61003fe2:	4611                	li	a2,4
    61003fe4:	4454                	lw	a3,12(s0)
    61003fe6:	8b99                	andi	a5,a5,6
    61003fe8:	00092703          	lw	a4,0(s2)
    61003fec:	4481                	li	s1,0
    61003fee:	00c79963          	bne	a5,a2,61004000 <_printf_common+0xae>
    61003ff2:	40e684bb          	subw	s1,a3,a4
    61003ff6:	02049793          	slli	a5,s1,0x20
    61003ffa:	0007d363          	bgez	a5,61004000 <_printf_common+0xae>
    61003ffe:	4481                	li	s1,0
    61004000:	441c                	lw	a5,8(s0)
    61004002:	4818                	lw	a4,16(s0)
    61004004:	00f75463          	bge	a4,a5,6100400c <_printf_common+0xba>
    61004008:	9f99                	subw	a5,a5,a4
    6100400a:	9cbd                	addw	s1,s1,a5
    6100400c:	4901                	li	s2,0
    6100400e:	0469                	addi	s0,s0,26
    61004010:	5b7d                	li	s6,-1
    61004012:	05249a63          	bne	s1,s2,61004066 <_printf_common+0x114>
    61004016:	4501                	li	a0,0
    61004018:	a809                	j	6100402a <_printf_common+0xd8>
    6100401a:	4685                	li	a3,1
    6100401c:	865a                	mv	a2,s6
    6100401e:	85d6                	mv	a1,s5
    61004020:	854e                	mv	a0,s3
    61004022:	9a02                	jalr	s4
    61004024:	01751e63          	bne	a0,s7,61004040 <_printf_common+0xee>
    61004028:	557d                	li	a0,-1
    6100402a:	60a6                	ld	ra,72(sp)
    6100402c:	6406                	ld	s0,64(sp)
    6100402e:	74e2                	ld	s1,56(sp)
    61004030:	7942                	ld	s2,48(sp)
    61004032:	79a2                	ld	s3,40(sp)
    61004034:	7a02                	ld	s4,32(sp)
    61004036:	6ae2                	ld	s5,24(sp)
    61004038:	6b42                	ld	s6,16(sp)
    6100403a:	6ba2                	ld	s7,8(sp)
    6100403c:	6161                	addi	sp,sp,80
    6100403e:	8082                	ret
    61004040:	2485                	addiw	s1,s1,1
    61004042:	b7bd                	j	61003fb0 <_printf_common+0x5e>
    61004044:	00d407b3          	add	a5,s0,a3
    61004048:	03000693          	li	a3,48
    6100404c:	04d781a3          	sb	a3,67(a5) # 1043 <__stack_size+0x843>
    61004050:	0017061b          	addiw	a2,a4,1
    61004054:	0027069b          	addiw	a3,a4,2
    61004058:	04544703          	lbu	a4,69(s0)
    6100405c:	00c407b3          	add	a5,s0,a2
    61004060:	04e781a3          	sb	a4,67(a5)
    61004064:	b7b5                	j	61003fd0 <_printf_common+0x7e>
    61004066:	4685                	li	a3,1
    61004068:	8622                	mv	a2,s0
    6100406a:	85d6                	mv	a1,s5
    6100406c:	854e                	mv	a0,s3
    6100406e:	9a02                	jalr	s4
    61004070:	fb650ce3          	beq	a0,s6,61004028 <_printf_common+0xd6>
    61004074:	2905                	addiw	s2,s2,1
    61004076:	bf71                	j	61004012 <_printf_common+0xc0>

0000000061004078 <_printf_i>:
    61004078:	715d                	addi	sp,sp,-80
    6100407a:	e0a2                	sd	s0,64(sp)
    6100407c:	f84a                	sd	s2,48(sp)
    6100407e:	f44e                	sd	s3,40(sp)
    61004080:	f052                	sd	s4,32(sp)
    61004082:	e486                	sd	ra,72(sp)
    61004084:	fc26                	sd	s1,56(sp)
    61004086:	ec56                	sd	s5,24(sp)
    61004088:	e85a                	sd	s6,16(sp)
    6100408a:	842e                	mv	s0,a1
    6100408c:	8a36                	mv	s4,a3
    6100408e:	04358693          	addi	a3,a1,67
    61004092:	0185c583          	lbu	a1,24(a1)
    61004096:	07800793          	li	a5,120
    6100409a:	892a                	mv	s2,a0
    6100409c:	89b2                	mv	s3,a2
    6100409e:	00b7ec63          	bltu	a5,a1,610040b6 <_printf_i+0x3e>
    610040a2:	06200793          	li	a5,98
    610040a6:	00b7ed63          	bltu	a5,a1,610040c0 <_printf_i+0x48>
    610040aa:	1c058863          	beqz	a1,6100427a <_printf_i+0x202>
    610040ae:	05800793          	li	a5,88
    610040b2:	14f58063          	beq	a1,a5,610041f2 <_printf_i+0x17a>
    610040b6:	04240493          	addi	s1,s0,66
    610040ba:	04b40123          	sb	a1,66(s0)
    610040be:	a815                	j	610040f2 <_printf_i+0x7a>
    610040c0:	f9d5879b          	addiw	a5,a1,-99
    610040c4:	0ff7f793          	andi	a5,a5,255
    610040c8:	4655                	li	a2,21
    610040ca:	fef666e3          	bltu	a2,a5,610040b6 <_printf_i+0x3e>
    610040ce:	00001617          	auipc	a2,0x1
    610040d2:	8ea60613          	addi	a2,a2,-1814 # 610049b8 <__sf_fake_stdout+0x80>
    610040d6:	078a                	slli	a5,a5,0x2
    610040d8:	97b2                	add	a5,a5,a2
    610040da:	439c                	lw	a5,0(a5)
    610040dc:	97b2                	add	a5,a5,a2
    610040de:	8782                	jr	a5
    610040e0:	631c                	ld	a5,0(a4)
    610040e2:	04240493          	addi	s1,s0,66
    610040e6:	00878693          	addi	a3,a5,8
    610040ea:	439c                	lw	a5,0(a5)
    610040ec:	e314                	sd	a3,0(a4)
    610040ee:	04f40123          	sb	a5,66(s0)
    610040f2:	4785                	li	a5,1
    610040f4:	aa7d                	j	610042b2 <_printf_i+0x23a>
    610040f6:	4010                	lw	a2,0(s0)
    610040f8:	631c                	ld	a5,0(a4)
    610040fa:	08067513          	andi	a0,a2,128
    610040fe:	00878593          	addi	a1,a5,8
    61004102:	c10d                	beqz	a0,61004124 <_printf_i+0xac>
    61004104:	639c                	ld	a5,0(a5)
    61004106:	e30c                	sd	a1,0(a4)
    61004108:	0007d863          	bgez	a5,61004118 <_printf_i+0xa0>
    6100410c:	02d00713          	li	a4,45
    61004110:	40f007b3          	neg	a5,a5
    61004114:	04e401a3          	sb	a4,67(s0)
    61004118:	00001617          	auipc	a2,0x1
    6100411c:	87060613          	addi	a2,a2,-1936 # 61004988 <__sf_fake_stdout+0x50>
    61004120:	4729                	li	a4,10
    61004122:	a83d                	j	61004160 <_printf_i+0xe8>
    61004124:	04067613          	andi	a2,a2,64
    61004128:	e30c                	sd	a1,0(a4)
    6100412a:	c601                	beqz	a2,61004132 <_printf_i+0xba>
    6100412c:	00079783          	lh	a5,0(a5)
    61004130:	bfe1                	j	61004108 <_printf_i+0x90>
    61004132:	439c                	lw	a5,0(a5)
    61004134:	bfd1                	j	61004108 <_printf_i+0x90>
    61004136:	4010                	lw	a2,0(s0)
    61004138:	631c                	ld	a5,0(a4)
    6100413a:	08067813          	andi	a6,a2,128
    6100413e:	00878513          	addi	a0,a5,8
    61004142:	08080d63          	beqz	a6,610041dc <_printf_i+0x164>
    61004146:	639c                	ld	a5,0(a5)
    61004148:	e308                	sd	a0,0(a4)
    6100414a:	06f00713          	li	a4,111
    6100414e:	00001617          	auipc	a2,0x1
    61004152:	83a60613          	addi	a2,a2,-1990 # 61004988 <__sf_fake_stdout+0x50>
    61004156:	10e58463          	beq	a1,a4,6100425e <_printf_i+0x1e6>
    6100415a:	4729                	li	a4,10
    6100415c:	040401a3          	sb	zero,67(s0)
    61004160:	404c                	lw	a1,4(s0)
    61004162:	c40c                	sw	a1,8(s0)
    61004164:	0005c563          	bltz	a1,6100416e <_printf_i+0xf6>
    61004168:	4008                	lw	a0,0(s0)
    6100416a:	996d                	andi	a0,a0,-5
    6100416c:	c008                	sw	a0,0(s0)
    6100416e:	e399                	bnez	a5,61004174 <_printf_i+0xfc>
    61004170:	84b6                	mv	s1,a3
    61004172:	cd99                	beqz	a1,61004190 <_printf_i+0x118>
    61004174:	84b6                	mv	s1,a3
    61004176:	02e7f5b3          	remu	a1,a5,a4
    6100417a:	14fd                	addi	s1,s1,-1
    6100417c:	95b2                	add	a1,a1,a2
    6100417e:	0005c583          	lbu	a1,0(a1)
    61004182:	00b48023          	sb	a1,0(s1)
    61004186:	85be                	mv	a1,a5
    61004188:	02e7d7b3          	divu	a5,a5,a4
    6100418c:	fee5f5e3          	bgeu	a1,a4,61004176 <_printf_i+0xfe>
    61004190:	47a1                	li	a5,8
    61004192:	00f71e63          	bne	a4,a5,610041ae <_printf_i+0x136>
    61004196:	401c                	lw	a5,0(s0)
    61004198:	8b85                	andi	a5,a5,1
    6100419a:	cb91                	beqz	a5,610041ae <_printf_i+0x136>
    6100419c:	4058                	lw	a4,4(s0)
    6100419e:	481c                	lw	a5,16(s0)
    610041a0:	00e7c763          	blt	a5,a4,610041ae <_printf_i+0x136>
    610041a4:	03000793          	li	a5,48
    610041a8:	fef48fa3          	sb	a5,-1(s1)
    610041ac:	14fd                	addi	s1,s1,-1
    610041ae:	8e85                	sub	a3,a3,s1
    610041b0:	c814                	sw	a3,16(s0)
    610041b2:	8752                	mv	a4,s4
    610041b4:	86ce                	mv	a3,s3
    610041b6:	0070                	addi	a2,sp,12
    610041b8:	85a2                	mv	a1,s0
    610041ba:	854a                	mv	a0,s2
    610041bc:	d97ff0ef          	jal	ra,61003f52 <_printf_common>
    610041c0:	5afd                	li	s5,-1
    610041c2:	0f551c63          	bne	a0,s5,610042ba <_printf_i+0x242>
    610041c6:	557d                	li	a0,-1
    610041c8:	60a6                	ld	ra,72(sp)
    610041ca:	6406                	ld	s0,64(sp)
    610041cc:	74e2                	ld	s1,56(sp)
    610041ce:	7942                	ld	s2,48(sp)
    610041d0:	79a2                	ld	s3,40(sp)
    610041d2:	7a02                	ld	s4,32(sp)
    610041d4:	6ae2                	ld	s5,24(sp)
    610041d6:	6b42                	ld	s6,16(sp)
    610041d8:	6161                	addi	sp,sp,80
    610041da:	8082                	ret
    610041dc:	439c                	lw	a5,0(a5)
    610041de:	04067613          	andi	a2,a2,64
    610041e2:	e308                	sd	a0,0(a4)
    610041e4:	c601                	beqz	a2,610041ec <_printf_i+0x174>
    610041e6:	17c2                	slli	a5,a5,0x30
    610041e8:	93c1                	srli	a5,a5,0x30
    610041ea:	b785                	j	6100414a <_printf_i+0xd2>
    610041ec:	1782                	slli	a5,a5,0x20
    610041ee:	9381                	srli	a5,a5,0x20
    610041f0:	bfa9                	j	6100414a <_printf_i+0xd2>
    610041f2:	04b402a3          	sb	a1,69(s0)
    610041f6:	00000617          	auipc	a2,0x0
    610041fa:	79260613          	addi	a2,a2,1938 # 61004988 <__sf_fake_stdout+0x50>
    610041fe:	400c                	lw	a1,0(s0)
    61004200:	631c                	ld	a5,0(a4)
    61004202:	0805f813          	andi	a6,a1,128
    61004206:	00878513          	addi	a0,a5,8
    6100420a:	02080e63          	beqz	a6,61004246 <_printf_i+0x1ce>
    6100420e:	639c                	ld	a5,0(a5)
    61004210:	e308                	sd	a0,0(a4)
    61004212:	0015f713          	andi	a4,a1,1
    61004216:	c701                	beqz	a4,6100421e <_printf_i+0x1a6>
    61004218:	0205e593          	ori	a1,a1,32
    6100421c:	c00c                	sw	a1,0(s0)
    6100421e:	4741                	li	a4,16
    61004220:	ff95                	bnez	a5,6100415c <_printf_i+0xe4>
    61004222:	400c                	lw	a1,0(s0)
    61004224:	fdf5f593          	andi	a1,a1,-33
    61004228:	c00c                	sw	a1,0(s0)
    6100422a:	bf0d                	j	6100415c <_printf_i+0xe4>
    6100422c:	401c                	lw	a5,0(s0)
    6100422e:	0a07e793          	ori	a5,a5,160
    61004232:	c01c                	sw	a5,0(s0)
    61004234:	07800793          	li	a5,120
    61004238:	04f402a3          	sb	a5,69(s0)
    6100423c:	00000617          	auipc	a2,0x0
    61004240:	76460613          	addi	a2,a2,1892 # 610049a0 <__sf_fake_stdout+0x68>
    61004244:	bf6d                	j	610041fe <_printf_i+0x186>
    61004246:	439c                	lw	a5,0(a5)
    61004248:	0405f813          	andi	a6,a1,64
    6100424c:	e308                	sd	a0,0(a4)
    6100424e:	00080563          	beqz	a6,61004258 <_printf_i+0x1e0>
    61004252:	17c2                	slli	a5,a5,0x30
    61004254:	93c1                	srli	a5,a5,0x30
    61004256:	bf75                	j	61004212 <_printf_i+0x19a>
    61004258:	1782                	slli	a5,a5,0x20
    6100425a:	9381                	srli	a5,a5,0x20
    6100425c:	bf5d                	j	61004212 <_printf_i+0x19a>
    6100425e:	4721                	li	a4,8
    61004260:	bdf5                	j	6100415c <_printf_i+0xe4>
    61004262:	4010                	lw	a2,0(s0)
    61004264:	631c                	ld	a5,0(a4)
    61004266:	484c                	lw	a1,20(s0)
    61004268:	08067813          	andi	a6,a2,128
    6100426c:	00878513          	addi	a0,a5,8
    61004270:	00080963          	beqz	a6,61004282 <_printf_i+0x20a>
    61004274:	e308                	sd	a0,0(a4)
    61004276:	639c                	ld	a5,0(a5)
    61004278:	e38c                	sd	a1,0(a5)
    6100427a:	00042823          	sw	zero,16(s0)
    6100427e:	84b6                	mv	s1,a3
    61004280:	bf0d                	j	610041b2 <_printf_i+0x13a>
    61004282:	e308                	sd	a0,0(a4)
    61004284:	04067613          	andi	a2,a2,64
    61004288:	639c                	ld	a5,0(a5)
    6100428a:	c601                	beqz	a2,61004292 <_printf_i+0x21a>
    6100428c:	00b79023          	sh	a1,0(a5)
    61004290:	b7ed                	j	6100427a <_printf_i+0x202>
    61004292:	c38c                	sw	a1,0(a5)
    61004294:	b7dd                	j	6100427a <_printf_i+0x202>
    61004296:	631c                	ld	a5,0(a4)
    61004298:	4050                	lw	a2,4(s0)
    6100429a:	4581                	li	a1,0
    6100429c:	00878693          	addi	a3,a5,8
    610042a0:	e314                	sd	a3,0(a4)
    610042a2:	6384                	ld	s1,0(a5)
    610042a4:	8526                	mv	a0,s1
    610042a6:	c8fff0ef          	jal	ra,61003f34 <memchr>
    610042aa:	c119                	beqz	a0,610042b0 <_printf_i+0x238>
    610042ac:	8d05                	sub	a0,a0,s1
    610042ae:	c048                	sw	a0,4(s0)
    610042b0:	405c                	lw	a5,4(s0)
    610042b2:	c81c                	sw	a5,16(s0)
    610042b4:	040401a3          	sb	zero,67(s0)
    610042b8:	bded                	j	610041b2 <_printf_i+0x13a>
    610042ba:	4814                	lw	a3,16(s0)
    610042bc:	8626                	mv	a2,s1
    610042be:	85ce                	mv	a1,s3
    610042c0:	854a                	mv	a0,s2
    610042c2:	9a02                	jalr	s4
    610042c4:	f15501e3          	beq	a0,s5,610041c6 <_printf_i+0x14e>
    610042c8:	401c                	lw	a5,0(s0)
    610042ca:	8b89                	andi	a5,a5,2
    610042cc:	eb95                	bnez	a5,61004300 <_printf_i+0x288>
    610042ce:	47b2                	lw	a5,12(sp)
    610042d0:	4448                	lw	a0,12(s0)
    610042d2:	0007871b          	sext.w	a4,a5
    610042d6:	0005069b          	sext.w	a3,a0
    610042da:	00e6d363          	bge	a3,a4,610042e0 <_printf_i+0x268>
    610042de:	853e                	mv	a0,a5
    610042e0:	2501                	sext.w	a0,a0
    610042e2:	b5dd                	j	610041c8 <_printf_i+0x150>
    610042e4:	4685                	li	a3,1
    610042e6:	8656                	mv	a2,s5
    610042e8:	85ce                	mv	a1,s3
    610042ea:	854a                	mv	a0,s2
    610042ec:	9a02                	jalr	s4
    610042ee:	ed650ce3          	beq	a0,s6,610041c6 <_printf_i+0x14e>
    610042f2:	2485                	addiw	s1,s1,1
    610042f4:	445c                	lw	a5,12(s0)
    610042f6:	4732                	lw	a4,12(sp)
    610042f8:	9f99                	subw	a5,a5,a4
    610042fa:	fef4c5e3          	blt	s1,a5,610042e4 <_printf_i+0x26c>
    610042fe:	bfc1                	j	610042ce <_printf_i+0x256>
    61004300:	4481                	li	s1,0
    61004302:	01940a93          	addi	s5,s0,25
    61004306:	5b7d                	li	s6,-1
    61004308:	b7f5                	j	610042f4 <_printf_i+0x27c>

000000006100430a <_read_r>:
    6100430a:	1141                	addi	sp,sp,-16
    6100430c:	e022                	sd	s0,0(sp)
    6100430e:	842a                	mv	s0,a0
    61004310:	852e                	mv	a0,a1
    61004312:	85b2                	mv	a1,a2
    61004314:	8636                	mv	a2,a3
    61004316:	9a01ac23          	sw	zero,-1608(gp) # 61010268 <errno>
    6100431a:	e406                	sd	ra,8(sp)
    6100431c:	c61fd0ef          	jal	ra,61001f7c <_read>
    61004320:	57fd                	li	a5,-1
    61004322:	00f51663          	bne	a0,a5,6100432e <_read_r+0x24>
    61004326:	9b81a783          	lw	a5,-1608(gp) # 61010268 <errno>
    6100432a:	c391                	beqz	a5,6100432e <_read_r+0x24>
    6100432c:	c01c                	sw	a5,0(s0)
    6100432e:	60a2                	ld	ra,8(sp)
    61004330:	6402                	ld	s0,0(sp)
    61004332:	0141                	addi	sp,sp,16
    61004334:	8082                	ret
