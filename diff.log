diff --cc solutions/demo/fsbl/alfsbl_image_header.c
index 17fa5139,dd74e593..00000000
--- a/solutions/demo/fsbl/alfsbl_image_header.c
+++ b/solutions/demo/fsbl/alfsbl_image_header.c
@@@ -1,10 -1,4 +1,10 @@@
 +/*
 + * Copyright (c) 2023, Anlogic Inc. and Contributors. All rights reserved.
 + *
 + * SPDX-License-Identifier: BSD-3-Clause
 + */
 +
- #include <alfsbl_secure.h>
+ #include "alfsbl_secure.h"
  #include <stdio.h>
  #include "alfsbl_image_header.h"
  #include "al_reg_io.h"
diff --cc solutions/demo/fsbl/alfsbl_main.c
index 8bf903bc,c97348c3..00000000
--- a/solutions/demo/fsbl/alfsbl_main.c
+++ b/solutions/demo/fsbl/alfsbl_main.c
@@@ -12,7 -6,7 +12,8 @@@
  #include "alfsbl_err_lockdown.h"
  #include "alfsbl_misc.h"
  #include "alfsbl_hw.h"
- #include "alfsbl_qspi.h"
++
+ #include "soc_plat.h"
  
  
  /********************* global variables *********************/
@@@ -21,7 -15,7 +22,6 @@@ uint8_t  AuthBuffer[ALFSBL_AUTH_BUFFER_
  AlFsblInfo FsblInstance = {0x00U, 0, 0, 0};
  SecureInfo FsblSecInfo = {0};
  
- extern int Soc_PlatInit();
 -//extern int Soc_PlatInit();
  
  int main(void)
  {
diff --cc solutions/demo/fsbl/alfsbl_partition_load.c
index afe99d6d,0c393c78..00000000
--- a/solutions/demo/fsbl/alfsbl_partition_load.c
+++ b/solutions/demo/fsbl/alfsbl_partition_load.c
@@@ -1,10 -1,3 +1,9 @@@
 +/*
 + * Copyright (c) 2023, Anlogic Inc. and Contributors. All rights reserved.
 + *
 + * SPDX-License-Identifier: BSD-3-Clause
 + */
 +
- #include <alfsbl_secure.h>
  #include <stdio.h>
  #include <stdint.h>
  #include "al_reg_io.h"
diff --cc solutions/demo/fsbl/alfsbl_qspi.c
index f920f7b1,58bf6436..00000000
--- a/solutions/demo/fsbl/alfsbl_qspi.c
+++ b/solutions/demo/fsbl/alfsbl_qspi.c
@@@ -1,114 -1,124 +1,114 @@@
 -#include <stdio.h>
 +/*
 + * Copyright (c) 2023, Anlogic Inc. and Contributors. All rights reserved.
 + *
 + * SPDX-License-Identifier: BSD-3-Clause
 + */
 +
 +#include "al_qspi_hal.h"
 +#include "al_spinor.h"
 +
- #include <alfsbl_secure.h>
+ #include "alfsbl_secure.h"
 -#include "alfsbl_qspi.h"
 -#include "alfsbl_misc.h"
  #include "alfsbl_boot.h"
 -#include "qspi_drv.h"
 -#include "qspi_flash_drv.h"
  
 -extern QSPI_CORE_HANDLE    *g_pdev;
 +AL_QSPI_HalStruct QspiHal;
  
 -
 -//-----------------------------------------------------------
 -//QSPI_FLASH_SR_BIT_SET: set flash status-register certain bit
 -//-----------------------------------------------------------
 -void QSPI_FLASH_SR_BIT_SET (unsigned bit_num, unsigned bit_val)
 +AL_QSPI_ConfigsStruct QspiInitConfigs =
 +{
 +    .TransMode          = QSPI_EEPROM,
 +    .SpiFrameFormat     = SPI_STANDARD_FORMAT,
 +    .DataFrameSize      = QSPI_DFS_8BITS,
 +    .EnSpiCfg.AddrLength    = QSPI_ADDR_L0,
 +    .EnSpiCfg.InstLength    = QSPI_INST_L8,
 +    .EnSpiCfg.TransType     = QSPI_TT0,
 +    .EnSpiCfg.WaitCycles    = 0,
 +    .EnSpiCfg.ClockStretch  = QSPI_EnableClockStretch,
 +    .ClkDiv             = 10,
 +    .SamplDelay         = 0,
 +    .SlvToggleEnum      = QSPI_SLV_TOGGLE_DISABLE,
 +    .SlvSelEnum         = QSPI_SER_SS0_EN,
 +    .IsUseDma           = AL_QSPI_USE_INTR
 +};
 +AL_U8 __attribute__((aligned(4))) FlashId[4] = { 0x0 };
 +
 +AL_VOID AlNor_Wren(AL_VOID)
  {
 -    unsigned data_r_7to0;   //read data
 -    unsigned data_r_15to8;  //read data
 -
 -    //-----------------------------------------------------------
 -    //read flash status-register
 -    //-----------------------------------------------------------
 -    //config qspi
 -    Qspi_Disable(g_pdev);  //disable
 -	Qspi_Width(g_pdev,QSPI_WIDTH_X1);//QSPI_WIDTH_X4
 -	Qspi_Mode(g_pdev,TMOD_EEPROM);//TMOD_TX_ONLY
 -    Qspi_Dfs(g_pdev,DFS_BYTE);
 -
 -	Qspi_TxfifoStartLevelSet(g_pdev,0); //transfer will start on serial line
 -
 -    //REG_WRITE(QSPI__CTRLR1__ADDR,0x0);  //rx need receive 1 data-frame
 -    //QSPI_TXFIFO_START_LEVEL_SET(0x0);  //tx need transmit 1 data-frame
 -	Qspi_Ctrl1Ndf(g_pdev,0);
 -
 -	Qspi_Enable(g_pdev);
 -
 -    //sent read flash status-register[7:0] instruction 0x05
 -    //QSPI_DATA_WRITE(0x05);  //send inst
 -	Qspi_DataTransmit(g_pdev,0x5);
 -    //wait qspi is not busy
 -    //QSPI_WAIT_ACT_COMPLETE();  //until tx-fifo is empty, and qspi is not busy
 -    //read flash status-register[7:0] from rx-fifo
 -	//
 -    while( !Qspi_TxfifoEmpty(g_pdev) );
 -	while(Qspi_Busy(g_pdev));
 -    data_r_7to0 = Qspi_DataRead(g_pdev);  //read data from rx-fifo
 -
 -    //sent read flash status-register[15:8] instruction 0x35
 -    //QSPI_DATA_WRITE(0x35);  //send inst
 -	Qspi_DataTransmit(g_pdev,0x35);
 -    //wait qspi is not busy
 -	while( !Qspi_TxfifoEmpty(g_pdev) );
 -	while(Qspi_Busy(g_pdev));  //until tx-fifo is empty, and qspi is not busy
 -    //read flash status-register[15:8] from rx-fifo
 -    data_r_15to8 = Qspi_DataRead(g_pdev);  //read data from rx-fifo
 -
 -    //-----------------------------------------------------------
 -    //modified the bit needed to be set
 -    //-----------------------------------------------------------
 -    //set if bit[7:0]
 -    if (bit_num < 8) {
 -        data_r_7to0 = (~(0x1 << bit_num) & data_r_7to0) | (bit_val << bit_num);  //only set the needed bit
 -    //set if bit[15:8]
 -    } else {
 -        data_r_15to8 = (~(0x1 << (bit_num-8)) & data_r_15to8) | (bit_val << (bit_num-8));  //only set the needed bit
 +    AL_S32 Ret = AL_OK;
 +    AL_U8 SendData[4] = {0x0};
 +
 +    QspiHal.Dev->Configs.EnSpiCfg.WaitCycles = 0;
 +    QspiHal.Dev->Configs.TransMode = QSPI_TX_ONLY;
 +    QspiHal.Dev->Configs.EnSpiCfg.AddrLength = QSPI_ADDR_L0;
 +    QspiHal.Dev->Configs.SpiFrameFormat = SPI_STANDARD_FORMAT;
 +    QspiHal.Dev->Configs.EnSpiCfg.TransType = QSPI_TT0;
 +
 +    SendData[0] = NOR_OP_WREN;
 +
 +    Ret = AlQspi_Hal_SendDataBlock(&QspiHal, SendData, 1, 10000);
 +    if (Ret != AL_OK) {
 +        AL_LOG(AL_LOG_LEVEL_DEBUG, "AL_NOR_WREN error\r\n");
      }
 +}
  
 -    //-----------------------------------------------------------
 -    //set flash status-register certain bit
 -    //-----------------------------------------------------------
 -    //QSPI_FLASH_SEND_WREN();  //send flash WREN
 -	Qspi_Disable(g_pdev);  //disable
 -	Qspi_Width(g_pdev,QSPI_WIDTH_X1);
 -	Qspi_Mode(g_pdev,TMOD_TX_ONLY);
 -	Qspi_TxfifoStartLevelSet(g_pdev,0); //transfer will start on serial line
 -	Qspi_Enable(g_pdev);
 -
 -	Qspi_DataTransmit(g_pdev,0x6);
 -    while( !Qspi_TxfifoEmpty(g_pdev) );
 -	while(Qspi_Busy(g_pdev));  //until tx-fifo is empty, and qspi is not busy
 -
 -    //config qspi
 -    Qspi_Disable(g_pdev);  //disable
 -    Qspi_TxfifoStartLevelSet(g_pdev,2); //transfer will start on serial line
 -    Qspi_Enable(g_pdev);  //enable
 -    //sent write flash status-register instruction 0x01, and set value[15:0]
 -    Qspi_DataTransmit(g_pdev,0x01);  //send inst
 -    Qspi_DataTransmit(g_pdev,data_r_7to0);  //send data
 -    Qspi_DataTransmit(g_pdev,data_r_15to8);  //send data
 -    //wait qspi is not busy
 -    while( !Qspi_TxfifoEmpty(g_pdev) );
 -	while(Qspi_Busy(g_pdev));  //until tx-fifo is empty, and qspi is not busy
 -    //wait flash WIP returns to 0
 -    //QSPI_FLASH_WAIT_WIP_COMPLETE();  //until WIP returns to 0
 -    Qspi_Disable(g_pdev);  //disable
 -}  //QSPI_FLASH_SR_BIT_SE
  
 +AL_VOID AlNor_WaitWip(AL_VOID)
 +{
 +    AL_S32 Ret = AL_OK;
 +    AL_U8 SendData[4] = {0x0};
 +    AL_U8 RecvData[4] = {0x0};
 +
 +    QspiHal.Dev->Configs.EnSpiCfg.WaitCycles = 0;
 +    QspiHal.Dev->Configs.TransMode  = QSPI_EEPROM;
 +    QspiHal.Dev->Configs.EnSpiCfg.AddrLength = QSPI_ADDR_L0;
 +    QspiHal.Dev->Configs.SpiFrameFormat = SPI_STANDARD_FORMAT;
 +    QspiHal.Dev->Configs.EnSpiCfg.TransType = QSPI_TT0;
 +
 +    SendData[0] = NOR_OP_RDSR;
 +
 +    do {
 +        Ret = AlQspi_Hal_TranferDataBlock(&QspiHal, SendData, 1, RecvData, 1, 100000);
 +        if (Ret != AL_OK) {
 +            AL_LOG(AL_LOG_LEVEL_DEBUG, "AL_NOR_WAITWIP error\r\n");
 +        }
 +#ifdef QSPI_DEBUG
 +        AL_LOG(AL_LOG_LEVEL_DEBUG, "WAITWIP Nor Status1 Reg:%x\r\n", RecvData[0]);
 +#endif
 +    } while (RecvData[0] & SR_WIP);
 +}
  
 -uint32_t AlFsbl_Qspi24Init(uint32_t *pBlockSizeMax)
 +AL_S32 AlNor_SetQuad(AL_U8 SetQuadCmd, AL_U8 ReadQuadCmd, AL_U8 QuadPos)
  {
 -	QspiParams qspi_params;
 -	printf("qspi 24 init\r\n");	
 -	Csu_QspiInit(&qspi_params);
 +    AL_S32  Ret = AL_OK;
 +    AL_U8 SendData[4] = {0x0}, Data = 0;
 +
 +    SendData[0] = ReadQuadCmd;
 +    QspiHal.Dev->Configs.EnSpiCfg.WaitCycles = 0;
 +    QspiHal.Dev->Configs.TransMode  = QSPI_EEPROM;
 +    QspiHal.Dev->Configs.EnSpiCfg.AddrLength = QSPI_ADDR_L0;
 +    QspiHal.Dev->Configs.SpiFrameFormat = SPI_STANDARD_FORMAT;
 +    QspiHal.Dev->Configs.EnSpiCfg.TransType = QSPI_TT0;
 +
 +    Ret = AlQspi_Hal_TranferDataBlock(&QspiHal, SendData, 1, &Data, 1, 10000);
 +    if (Ret != AL_OK) {
 +        AL_LOG(AL_LOG_LEVEL_DEBUG, "AlNor_SetQuad ReadQuadCmd error\r\n");
 +    }
  
 -	QSPI_FLASH_SR_BIT_SET(9, 1);
 -    Csu_QspiSetMode(QSPI_WIDTH_X4, QSPI_ADDR_24);
 +    Data = Data | (1 << QuadPos);
  
 -    Qspi_Disable(g_pdev);
 -	Qspi_SckdivCfg(g_pdev,0x3); // ahb: 200M, spi: 200 / 4 = 50M
 +    AlNor_Wren();
  
 -	g_pdev->regs->SPI_CTRLR0 = (g_pdev->regs->SPI_CTRLR0) | (1 << 30);
 +    SendData[0] = SetQuadCmd;
 +    SendData[1] = Data;
  
 -    Qspi_Enable(g_pdev);
 +    QspiHal.Dev->Configs.TransMode = QSPI_TX_ONLY;
  
 -    *pBlockSizeMax = 1024 * 8;   
 +    Ret = AlQspi_Hal_SendDataBlock(&QspiHal, SendData, 2, 10000);
 +    if (Ret != AL_OK) {
 +        AL_LOG(AL_LOG_LEVEL_DEBUG, "AlNor_SetQuad SetQuadCmd error\r\n");
 +    }
  
 -    printf("flashID:%x\r\n", qspi_params.flashID);
 -    printf("flashSize:0x%x\r\n", qspi_params.flashSize);
 -    printf("flashSize:%dMB\r\n", qspi_params.flashSize/1024/1024);
 +    AlNor_WaitWip();
  
 -	return 0;
 +    return Ret;
  }
  
  
* Unmerged path solutions/boards/board_dr1x90_emulation/inc/ddr_demo/al9000_ddrc_init.c
* Unmerged path solutions/boards/board_dr1x90_emulation/inc/ddr_demo/al9000_ddrc_init.h
* Unmerged path solutions/boards/board_dr1x90_emulation/inc/ddr_demo/al9000_new_func.h
diff --git a/solutions/demo/fsbl/alfsbl_secure.h b/solutions/demo/fsbl/alfsbl_secure.h
index f0e90d31..8fa676d8 100644
--- a/solutions/demo/fsbl/alfsbl_secure.h
+++ b/solutions/demo/fsbl/alfsbl_secure.h
@@ -1,20 +1,12 @@
-<<<<<<< HEAD
 /*
  * Copyright (c) 2023, Anlogic Inc. and Contributors. All rights reserved.
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
 
-/*
- * alfsbl_sec.h
- *
- *  Created on: May 25, 2022
- *      Author: qsxu
- */
 
 
-=======
->>>>>>> 1eaa58bd ([ES-382][style][fsbl]delete some comments, change al9000 to dr1x90 in fsbl/ddr code files)
+
 #ifndef ALFSBL_SEC_H_
 #define ALFSBL_SEC_H_
 
