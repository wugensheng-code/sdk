/*
 * Copyright (c) 2023, Anlogic Inc. and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef __AL_SOC_BOARD_INIT_H_
#define __AL_SOC_BOARD_INIT_H_

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _UL
#define _UL unsigned int
#endif

/* config opcode */
#define CONFIG_EXIT         0U
#define CONFIG_CLEAR        1U
#define CONFIG_WRITE        2U
#define CONFIG_MASKWRITE    3U
#define CONFIG_MASKPOLL     4U
#define CONFIG_MASKDELAY    5U
#define NEW_ALSOC_ERR_CODE  6U

#define CONFIG_POLL_TIME    100000

/* Encode number of arguments */
#define CONFIG_REG_EXIT()                    ( (CONFIG_EXIT      << 4 ) | 0 )
#define CONFIG_REG_CLEAR(addr)               ( (CONFIG_CLEAR     << 4 ) | 1 ) , addr
#define CONFIG_REG(addr,val)                 ( (CONFIG_WRITE     << 4 ) | 2 ) , addr, val
#define CONFIG_REG_MASK(addr,mask,val)       ( (CONFIG_MASKWRITE << 4 ) | 3 ) , addr, mask, val

/* Returns codes  of ALSOC_Init */
#define ALSOC_INIT_SUCCESS         (0)    // success
#define ALSOC_INIT_OPCODE_ERROR    (1)    // config opcode error
#define ALSOC_INIT_VERSION_ERROR   (2)    // data error
#define ALSOC_INIT_TIMEOUT         (3)    // timeout

/* Silicon Versions */
#define SOC_VERSION_1 0


/* This flag to be used by FSBL to check whether apu_post_config() proc exixts */
#define ALSOC_POST_CONFIG

/* Freq of all peripherals */
#define MHZ                     1000000U


#define ALSOC_APU_FREQ          (100*MHZ)

#if defined __aarch64__
    #ifdef AL_OSC_25
        #define SYSTEM_CLOCK            (25*MHZ)
    #elif defined AL_OSC_33
        #define SYSTEM_CLOCK            (33333333UL)
    #elif defined AL_OSC_50
        #define SYSTEM_CLOCK            (50*MHZ)
    #else
        #define SYSTEM_CLOCK            (50*MHZ)
    #endif
#else
    #ifdef AL_CLK_CONFIG
        #ifdef AL_OSC_25
            #define SYSTEM_CLOCK            (200*MHZ)
        #elif defined AL_OSC_33
            #if (defined AL_CLK_800M || defined AL_CLK_400M)
                #define SYSTEM_CLOCK            (400*MHZ)
            #elif defined AL_CLK_600M
                #define SYSTEM_CLOCK            (600*MHZ)
            #elif defined AL_CLK_1000M
                #define SYSTEM_CLOCK            (333333333UL)
            #elif defined AL_CLK_1200M
                #define SYSTEM_CLOCK            (600*MHZ)
            #else
                #error "undefined RPU CLK"
            #endif
        #elif defined AL_OSC_50
            #define SYSTEM_CLOCK            (400*MHZ)
        #else
            #error "undefined OSC"
        #endif
    #else
        #ifdef AL_OSC_25
            #define SYSTEM_CLOCK            (200*MHZ)
        #elif defined AL_OSC_33
            #define SYSTEM_CLOCK            (266666666UL)
        #elif defined AL_OSC_50
            #define SYSTEM_CLOCK            (400*MHZ)
        #else
            #error "undefined OSC"
        #endif
    #endif
#endif

#define HAVE_UARTPS_DRIVER

#ifdef AL_CLK_CONFIG
#define UART_CLOCK              (50*MHZ)
#else
    #ifdef AL_OSC_25
        #define UART_CLOCK              (25*MHZ)
    #elif defined AL_OSC_33
        #define UART_CLOCK              (33333333UL)
    #elif defined AL_OSC_50
        #define UART_CLOCK              (50*MHZ)
    #else
        #define UART_CLOCK              (40*MHZ)
    #endif
#endif

#define HAVE_IICPS_DRIVER
#define I2C_CLOCK               (40*MHZ)

#define HAVE_MMCPS_DRIVER
#ifdef AL_CLK_CONFIG
#define MMC_CLOCK               (100*MHZ)
#else
#ifdef AL_OSC_25
#define MMC_CLOCK               (50*MHZ)
#elif defined AL_OSC_33
#define MMC_CLOCK               (66*MHZ)
#else
#define MMC_CLOCK               (100*MHZ)
#endif
#endif

#define HAVE_CANPS_DRIVER
#define CAN_CLOCK               (80*MHZ)

#define HAVE_QSPIPS_DRIVER
#define QSPI_CLOCK              (50*MHZ)

#define HAVE_SPIPS_DRIVER
#define SPI_CLOCK               (50*MHZ)


#define HAVE_SMCPS_DRIVER
#define SMC_CLOCK               (50*MHZ)


#define HAVE_ADC_DRIVER
#define ADC_CLOCK               (50*MHZ)

#define HAVE_TTCPS_DRIVER
#define TTC_CLOCK              (200*MHZ)


#define HAVE_GBEPS_DRIVER
#define GBE_CLOCK               (25*MHZ)
#define GBE_PTP_CLOCK           (100*MHZ)

#define GBE_DEVICE_ID           (0)

#define HAVE_GPIOPS_DRIVER

#define HAVE_MPUPS_DRIVER

#define HAVE_CIPHERPS_DRIVER

#define HAVE_DMACAHBPS_DRIVER

#define HAVE_PMU_DRIVER

#define HAVE_WDTPS_DRIVER
#define WDT_CLOCK              (200*MHZ)

#define HAVE_IPCPS_DRIVER

#define HAVE_DMAPS_DRIVER

#define HAVE_USBPS_DRIVER

#define DDR_AVAILABLE

#define UART0_BAUDRATE 115200
#define UART1_BAUDRATE 115200

/* device config, generated by system automatically.*/
#define HAVE_DDR_DRIVRE 
#define DDR_AVAILABLE 
#define DDRC_ADDR_MAP                  ROW_COL_BANK
#define DDRC_COMP_DENSITY                      4096
#define DDRC_SPEED_BIN         SPEED_BIN_DDR3_1066G
#define DDRC_COMP_TYPE           DDR_COMP_WIDTH_X16
#define DDRC_IO_VOL                             1.5
#define DDRC_PZQ_CONF                             0
#define DDRC_DDR_SPEED                         1066
#define DDRC_TRAINING_EN                          1
#define DDRC_DELAY_B0_AC                        0.0
#define DDRC_DELAY_B0_DQ                        0.0
#define DDRC_DELAY_B1_AC                        0.0
#define DDRC_DELAY_B1_DQ                        0.0
#define DDRC_DELAY_B2_AC                        0.0
#define DDRC_DELAY_B2_DQ                        0.0
#define DDRC_DELAY_B3_AC                        0.0
#define DDRC_DELAY_B3_DQ                        0.0
#define DDRC_DDR_TYPE                          DDR3
#define DDRC_VREF                          Internal
#define DDRC_WDM_WDBI                           WDM
#define DDRC_DQ_WIDTH                            32

// (1) ddr type, default: DDR3
#define DDR4                                      4
#define DDR3                                      3
#ifdef  DDRC_DDR_TYPE
#define FD_PARA_DDR_TYPE              DDRC_DDR_TYPE
#else
#define FD_PARA_DDR_TYPE                          3
#endif

// (2) ddr speed: 800.0, 1066.667, default:800.0
#if (DDRC_DDR_SPEED == 1066)
#define FD_PARA_DDR_SPEED                  1066.667
#else 
#define FD_PARA_DDR_SPEED                     800.0
#endif

// (3) ddr dc width: 8, 16, 32,default: 32
#ifdef  DDRC_DQ_WIDTH
#define FD_PARA_DQ_WIDTH              DDRC_DQ_WIDTH
#else
#define FD_PARA_DQ_WIDTH                         32
#endif

// (4) ddrc io vol: 1.2, 1.35, 1.5,default: 1.5
#ifdef  DDRC_IO_VOL
#define FD_PARA_IO_VOLT                 DDRC_IO_VOL
#else
#define FD_PARA_IO_VOLT                         1.5
#endif

// (5) ddrc vref, default: 0
#define Internal                                  0
#define External                                  1
#ifdef  DDRC_VREF
#define FD_PARA_VREF                      DDRC_VREF
#else
#define FD_PARA_VREF                              0
#endif

// (6) ddr pzq config, default: 0
#ifdef  DDRC_PZQ_CONF
#define FD_PARA_PZQ_ENABLE            DDRC_PZQ_CONF
#else
#define FD_PARA_PZQ_ENABLE                        0
#endif

// (7) ddr dram width: 8:x8, 16:x16,default: 8
#define DDR_COMP_WIDTH_X16                        16
#define DDR_COMP_WIDTH_X8                         8
#ifdef  DDRC_COMP_TYPE
#define FD_PARA_DRAM_WIDTH           DDRC_COMP_TYPE
#else
#define FD_PARA_DRAM_WIDTH                        8
#endif

// (8) ddr dram density:  512, 1024, 2048, 4096,8192
// default: 4096
#ifdef  DDRC_COMP_DENSITY
#define FD_PARA_DRAM_DENSITY      DDRC_COMP_DENSITY
#else
#define FD_PARA_DRAM_DENSITY                   4096
#endif

// (9) ddr speed bin
// #define SPEED_BIN_DDR3_800D                       0
// #define SPEED_BIN_DDR3_800E                       1
// #define SPEED_BIN_DDR3_1066E                      2
// #define SPEED_BIN_DDR3_1066F                      3
// #define SPEED_BIN_DDR3_1066G                      4
// #define SPEED_BIN_DDR4_1600J                      5
// #define SPEED_BIN_DDR4_1600K                      6
// #define SPEED_BIN_DDR4_1600L                      7

#ifdef  DDRC_SPEED_BIN
#define FD_PARA_SPEED_BIN            DDRC_SPEED_BIN
#else
#define FD_PARA_SPEED_BIN      SPEED_BIN_DDR3_1066G
#endif


// (10) ddr wdm sdbi, default: 0
#define NONE                                       0
#define WDM                                        1
#ifdef  DDRC_WDM_WDBI
#define FD_PARA_WDM                    DDRC_WDM_WDBI
#else
#define FD_PARA_WDM                                1
#endif

// (11) ddr rdbi,default:0
#define RDBI                                       1
#ifdef  DDRC_RDBI
#define FD_PARA_RDBI                       DDRC_RDBI
#else
#define FD_PARA_RDBI                               0
#endif

// (12) ddr ecc: 0:None, 1:SideBand, 2:Inline.
//  default: 0
#ifdef  DDRC_ECC_EN
#define FD_PARA_ECC                      DDRC_ECC_EN
#else
#define FD_PARA_ECC                                0
#endif


// (13)ddr addr map
#define ROW_COL_BANK 0
#define ROW_BANK_COL 1
#define BANK_ROW_COL 2
#ifdef  DDRC_ADDR_MAP
#define FD_PARA_ADDRMAP                DDRC_ADDR_MAP
#else 
#define FD_PARA_ADDRMAP                 ROW_COL_BANK
#endif

// (14) ddr training, 0:Disable, 1:Enable
// default:1
#ifdef  DDRC_TRAINING_EN
#define FD_PARA_TRAINING            DDRC_TRAINING_EN
#else
#define FD_PARA_TRAINING                           1
#endif

// (15) ddr train 
// (15.1) byte0
#ifdef  DDRC_DELAY_B0_AC
#define FD_PARA_BYTE0_AC_DLY        DDRC_DELAY_B0_AC
#else 
#define FD_PARA_BYTE0_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B0_DQ
#define FD_PARA_BYTE0_DQS_DLY       DDRC_DELAY_B0_DQ
#else
#define FD_PARA_BYTE0_DQS_DLY                   (0.0)
#endif

// (15.2) byte1
#ifdef  DDRC_DELAY_B1_AC
#define FD_PARA_BYTE1_AC_DLY        DDRC_DELAY_B1_AC
#else 
#define FD_PARA_BYTE1_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B1_DQ
#define FD_PARA_BYTE1_DQS_DLY       DDRC_DELAY_B1_DQ
#else
#define FD_PARA_BYTE1_DQS_DLY                   (0.0)
#endif

// (15.2) byte2
#ifdef  DDRC_DELAY_B2_AC
#define FD_PARA_BYTE2_AC_DLY        DDRC_DELAY_B2_AC
#else 
#define FD_PARA_BYTE2_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B2_DQ
#define FD_PARA_BYTE2_DQS_DLY       DDRC_DELAY_B2_DQ
#else
#define FD_PARA_BYTE2_DQS_DLY                   (0.0)
#endif

// (15.3) byte3
#ifdef  DDRC_DELAY_B3_AC
#define FD_PARA_BYTE3_AC_DLY        DDRC_DELAY_B3_AC
#else 
#define FD_PARA_BYTE3_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B3_DQ
#define FD_PARA_BYTE3_DQS_DLY DDRC_DELAY_B3_DQ
#else
#define FD_PARA_BYTE3_DQS_DLY (0.0)
#endif

/**
 * @desc  : init soc platform according to user configuration
 * @return {int} status code of platform init
 */
int Soc_PlatInit();
int Soc_PsPlInit();
int Soc_PlatGetDeviceVersion();

#ifdef __cplusplus
}
#endif

#endif /* AL_SOC_BOARD_INIT_H */
