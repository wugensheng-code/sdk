#ifndef __SOC_PLAT_H
#define __SOC_PLAT_H

#ifdef __cplusplus
extern "C" {
#endif

#define USE_DDR_DEBUG

#ifndef _UL
#define _UL unsigned int
#endif

/* config opcode */
#define CONFIG_EXIT         0U
#define CONFIG_CLEAR        1U
#define CONFIG_WRITE        2U
#define CONFIG_MASKWRITE    3U
#define CONFIG_MASKPOLL     4U
#define CONFIG_MASKDELAY    5U
#define PLAT_ERR_CODE       6U

#define CONFIG_POLL_TIME    100000

/* Encode number of arguments */
#define CONFIG_REG_EXIT()                    ( (CONFIG_EXIT      << 4 ) | 0 )
#define CONFIG_REG_CLEAR(addr)               ( (CONFIG_CLEAR     << 4 ) | 1 ) , addr
#define CONFIG_REG(addr,val)                 ( (CONFIG_WRITE     << 4 ) | 2 ) , addr, val
#define CONFIG_REG_MASK(addr,mask,val)       ( (CONFIG_MASKWRITE << 4 ) | 3 ) , addr, mask, val
#define CONFIG_REG_MASKPOLL(addr,mask,val)   ( (CONFIG_MASKPOLL  << 4 ) | 3 ) , addr, mask, val

/* Returns codes  of PLAT_Init */
#define PLAT_INIT_SUCCESS         (0)    // success
#define PLAT_INIT_OPCODE_ERROR    (1)    // config opcode error
#define PLAT_INIT_VERSION_ERROR   (2)    // data error
#define PLAT_INIT_TIMEOUT         (3)    // timeout

/* Silicon Versions */
#define SOC_VERSION_1 0


/* This flag used by FSBL to check whether apu_post_config() proc exists */
#define PLAT_POST_CONFIG

/* Clock frequency of all peripherals, generated by system automatically. */
#define Hz                                        1
#define MHz                                 1000000
#define MHZ                                 1000000
#define UART_CLOCK                         ( 50*MHz)
#define I2C_CLOCK                          ( 40*MHz)
#define CAN_CLOCK                          ( 80*MHz)
#define GBE_CLOCK                          ( 25*MHz)
#define ADC_CLOCK                           (50*MHz)

#define CPU_CLOCK                       (799.92*MHz)
#define SYSTEM_CLOCK                     (33.33*MHz)
#define P2F_CLOCK_0                       (50.0*MHz)
#define QSPI_CLOCK                        (50.0*MHz)

/* PLL configuration, generated by system automatically. */
#define CPU_CLOCK_RATIO                         421
#define CPU_FBK_DIV                              96
#define CPU_OUT_DIV                               2
#define CPU_REF_DIV                               2
#define IO1000_OUT_DIV                            2
#define IO25_OUT_DIV                             80
#define IO400_OUT_DIV                             5
#define IO80_OUT_DIV                             25
#define IO_FBK_DIV                              120
#define IO_REF_DIV                                2

/* device config, generated by system automatically.*/
#define HAVE_DDR_DRIVRE
#define DDR_AVAILABLE
//#define DDRC_ADDR_MAP                  ROW_COL_BANK
//#define DDRC_COMP_DENSITY                         4
//#define DDRC_SPEED_BIN          SPEED_BIN_DDR3_800D
//#define DDRC_COMP_TYPE            DDR_COMP_WIDTH_x8
//#define DDRC_ECC_EN                               0
//#define DDRC_IO_VOL                             1.5
//#define DDRC_PZQ_CONF                             0
//#define DDRC_DDR_SPEED                          800
//#define DDRC_TRAINING_EN                          0
//#define DDRC_DELAY_B0_AC                        0.0
//#define DDRC_DELAY_B0_DQ                        0.0
//#define DDRC_DDR_TYPE                          DDR3
//#define DDRC_VREF                          Internal
//#define DDRC_WDM_WDBI                          NONE
//#define DDRC_DQ_WIDTH                             8
#define UART1_BAUDRATE                       115200

#define DDRC_ADDR_MAP                  ROW_COL_BANK
#define DDRC_COMP_DENSITY                      4096
#define DDRC_SPEED_BIN        _SPEED_BIN_DDR3_1066G
#define DDRC_COMP_TYPE           DDR_COMP_WIDTH_x16
#define DDRC_IO_VOL                             1.5
#define DDRC_PZQ_CONF                             0
#define DDRC_DDR_SPEED                         1066
#define DDRC_TRAINING_EN                          1
#define DDRC_DELAY_B0_AC                        0.0
#define DDRC_DELAY_B0_DQ                        0.0
#define DDRC_DELAY_B1_AC                        0.0
#define DDRC_DELAY_B1_DQ                        0.0
#define DDRC_DELAY_B2_AC                        0.0
#define DDRC_DELAY_B2_DQ                        0.0
#define DDRC_DELAY_B3_AC                        0.0
#define DDRC_DELAY_B3_DQ                        0.0
#define DDRC_DDR_TYPE                          DDR3
#define DDRC_VREF                          Internal
#define DDRC_WDM_WDBI                           WDM
#define DDRC_DQ_WIDTH                            32

// (1) ddr type, default: DDR3
#define DDR4                                      4
#define DDR3                                      3
#ifdef  DDRC_DDR_TYPE
#define FD_PARA_DDR_TYPE              DDRC_DDR_TYPE
#else
#define FD_PARA_DDR_TYPE                          3
#endif

// (2) ddr speed: default: 800
#ifdef  DDRC_DDR_SPEED
#define FD_PARA_DDR_SPEED            DDRC_DDR_SPEED
#else
#define FD_PARA_DDR_SPEED                       800
#endif

// (3) ddr dc width: 8, 16, 32,default: 32
#ifdef  DDRC_DQ_WIDTH
#define FD_PARA_DQ_WIDTH              DDRC_DQ_WIDTH
#else
#define FD_PARA_DQ_WIDTH                         32
#endif

// (4) ddrc io vol: 1.2, 1.35, 1.5,default: 1.5
// unused ....
#ifdef  DDRC_IO_VOL
#define FD_PARA_IO_VOLT                 DDRC_IO_VOL
#else
#define FD_PARA_IO_VOLT                         1.5
#endif

// (5) ddrc vref, default: 0
#define Internal                                  0
#define External                                  1
#ifdef  DDRC_VREF
#define FD_PARA_VREF                      DDRC_VREF
#else
#define FD_PARA_VREF                              0
#endif

// (6) ddr pzq config, default: 0
#ifdef  DDRC_PZQ_CONF
#define FD_PARA_PZQ_ENABLE            DDRC_PZQ_CONF
#else
#define FD_PARA_PZQ_ENABLE                        0
#endif

// (7) ddr dram width: 8:x8, 16:x16,default: 8
#define DDR_COMP_WIDTH_x16                       16
#define DDR_COMP_WIDTH_x8                         8
#ifdef  DDRC_COMP_TYPE
#define FD_PARA_DRAM_WIDTH           DDRC_COMP_TYPE
#else
#define FD_PARA_DRAM_WIDTH                        8
#endif

// (8) ddr dram density:  512, 1024, 2048, 4096,8192
// default: 4096
#ifdef  DDRC_COMP_DENSITY
#define FD_PARA_DRAM_DENSITY      DDRC_COMP_DENSITY
#else
#define FD_PARA_DRAM_DENSITY                   4096
#endif

// (9) ddr speed bin
#define _SPEED_BIN_DDR3_800D                       0
#define _SPEED_BIN_DDR3_800E                       1
#define _SPEED_BIN_DDR3_1066E                      2
#define _SPEED_BIN_DDR3_1066F                      3
#define _SPEED_BIN_DDR3_1066G                      4
#define _SPEED_BIN_DDR3_1333F                      5
#define _SPEED_BIN_DDR3_1333G                      6
#define _SPEED_BIN_DDR3_1333H                      7
#define _SPEED_BIN_DDR3_1333J                      8
#define _SPEED_BIN_DDR4_1600J                      9
#define _SPEED_BIN_DDR4_1600K                     10
#define _SPEED_BIN_DDR4_1600L                     11
#ifdef  DDRC_SPEED_BIN
#define FD_PARA_SPEED_BIN            DDRC_SPEED_BIN
#else
#define FD_PARA_SPEED_BIN      _SPEED_BIN_DDR3_1066G
#endif

// (10) ddr wdm sdbi, default: 0
#define NONE                                       0
#define WDM                                        1
#ifdef  DDRC_WDM_WDBI
#define FD_PARA_WDM                    DDRC_WDM_WDBI
#else
#define FD_PARA_WDM                                1
#endif

// (11) ddr rdbi,default:0
#define RDBI                                       1
#ifdef  DDRC_RDBI
#define FD_PARA_RDBI                       DDRC_RDBI
#else
#define FD_PARA_RDBI                               0
#endif

// (12) ddr ecc: 0:None, 1:SideBand, 2:Inline.
//  default: 0
#ifdef  DDRC_ECC_EN
#define FD_PARA_ECC                      DDRC_ECC_EN
#else
#define FD_PARA_ECC                                0
#endif


// (13)ddr addr map
#define ROW_COL_BANK 0
#define ROW_BANK_COL 1
#define BANK_ROW_COL 2
#ifdef  DDRC_ADDR_MAP
#define FD_PARA_ADDRMAP                DDRC_ADDR_MAP
#else
#define FD_PARA_ADDRMAP                 ROW_COL_BANK
#endif

// (14) ddr training, 0:Disable, 1:Enable
// default:1
#ifdef  DDRC_TRAINING_EN
#define FD_PARA_TRAINING            DDRC_TRAINING_EN
#else
#define FD_PARA_TRAINING                           1
#endif

// (15) ddr train
// (15.1) byte0
#ifdef  DDRC_DELAY_B0_AC
#define FD_PARA_BYTE0_AC_DLY        DDRC_DELAY_B0_AC
#else
#define FD_PARA_BYTE0_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B0_DQ
#define FD_PARA_BYTE0_DQS_DLY       DDRC_DELAY_B0_DQ
#else
#define FD_PARA_BYTE0_DQS_DLY                   (0.0)
#endif

// (15.2) byte1
#ifdef  DDRC_DELAY_B1_AC
#define FD_PARA_BYTE1_AC_DLY        DDRC_DELAY_B1_AC
#else
#define FD_PARA_BYTE1_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B1_DQ
#define FD_PARA_BYTE1_DQS_DLY       DDRC_DELAY_B1_DQ
#else
#define FD_PARA_BYTE1_DQS_DLY                   (0.0)
#endif

// (15.2) byte2
#ifdef  DDRC_DELAY_B2_AC
#define FD_PARA_BYTE2_AC_DLY        DDRC_DELAY_B2_AC
#else
#define FD_PARA_BYTE2_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B2_DQ
#define FD_PARA_BYTE2_DQS_DLY       DDRC_DELAY_B2_DQ
#else
#define FD_PARA_BYTE2_DQS_DLY                   (0.0)
#endif

// (15.3) byte3
#ifdef  DDRC_DELAY_B3_AC
#define FD_PARA_BYTE3_AC_DLY        DDRC_DELAY_B3_AC
#else
#define FD_PARA_BYTE3_AC_DLY                    (0.0)
#endif
#ifdef  DDRC_DELAY_B3_DQ
#define FD_PARA_BYTE3_DQS_DLY DDRC_DELAY_B3_DQ
#else
#define FD_PARA_BYTE3_DQS_DLY (0.0)
#endif


/* drivers which enabled by user, generated by FD automatically.*/
#define HAVE_QSPIPS_DRIVER
#define HAVE_UARTPS_DRIVER
#define GBE_DEVICE_ID (0)
#ifndef GBE_PTP_CLOCK
#define GBE_PTP_CLOCK (100*MHz)
#endif

/**
 * @desc  : initialize soc platform according to user configuration
 * @return {int} status code of platform initialization
 */
int  Soc_PlatInit();

/**
 * @desc  : initialize ps_pl only according to user configuration
 * @return {int} status code of pl_ps initialization
 */
int  Soc_PsPlInit();

int  Soc_PlatGetDeviceVersion();

/* debug info */
#ifndef MMC_CLOCK
#define MMC_CLOCK              (100*MHz)
#endif
#ifndef TTC_CLOCK
#define TTC_CLOCK              (200*MHz)
#endif
#ifndef WDT_CLOCK
#define WDT_CLOCK              (16.665*MHz)
#endif

#ifdef __cplusplus
}
#endif

#endif /* __SOC_PLAT_H */


